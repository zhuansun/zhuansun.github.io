<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张三碎碎念</title>
  
  
  <link href="https://zspcer.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://zspcer.gitee.io/"/>
  <updated>2023-03-15T04:24:10.518Z</updated>
  <id>https://zspcer.gitee.io/</id>
  
  <author>
    <name>zs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在页面上一键部署hexo</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/hexo/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2hexo/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/hexo/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2hexo/</id>
    <published>2023-03-15T04:24:10.518Z</published>
    <updated>2023-03-15T04:24:10.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/msoap/shell2http">https://github.com/msoap/shell2http</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/msoap/shell2http&quot;&gt;https://github.com/msoap/shell2http&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/categories/TOOLS/hexo/"/>
    
    
    <category term="hexo" scheme="https://zspcer.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>考研单词</title>
    <link href="https://zspcer.gitee.io/note/MYSELF/%E8%80%83%E7%A0%94%E5%8D%95%E8%AF%8D/"/>
    <id>https://zspcer.gitee.io/note/MYSELF/%E8%80%83%E7%A0%94%E5%8D%95%E8%AF%8D/</id>
    <published>2023-03-15T04:24:10.516Z</published>
    <updated>2023-03-15T04:24:10.516Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="41c886d8aa42b96063fd2552e4a94e69a1a72481c90d8241db529f846cb7bf0a">8c00d3d27fb3c22fd589b44480636208b254d36dcab312b8d586f594994421cdc2a66fb6f53c331fbe0d646100e300d482407aa672632636be83fd9dbabba1f9aa467ee799dc74584c66bab5bb559a9c5e15c93e4de8b65f9eaded1212f97a72b68ea82d93d023b7e079f6691e878106b830876ba5febd717cef78b99650fc891fc480bf8256c5bfc343255fe0235769f53852c802f0f1b5c1e40333d84d775e9a5c2a3df4d72d45cc8e3ab80cdb01168fd43e14eab37ad54c74fb565c385d88092a53225d39deb94feb2f45f7d837c3243c44e07aea3bef0bc823e45d1bcb93611c46052708f1b23f1e6b237d620dbed7767d44ea7738aab787195a33c2d6c40309c77f5f8528350223120cc812f97356d68fca9c4f3db367d3fb92161a68bed860c8c110b435b84d4a519bae60585964b271badb47648d9a212d00b8fbb37c635eb5ce88283c2fd81ca56c2d243da2129b170698343d1e5219f8111466e4dc192074ffd5b93995d16764e38f515e409faba0414aff40ad6b5d18d6473f427d85a3a094b0eaa36791d7e5f548db3bd2b5ceee5ff928050abc356743858f4d77d2202f83ff069132bc814bb3476b8db5b343a1cb9e241e7836bab980c17df4a37145957b0bdb8367464383a6e2b08e046b11243f664a53112081308ae225e81f6ae3fe82d80109e2e590358623a6b746a594ca2f1f8c6f81ecae71f644f158fb01e8362c4a07ff066395fec4103bf8c15585788981c28fac61b8836f0386e356823173d643fa9098120f69a8d74eefd2351659668ece26ad6394e69b6e50e12a4f8e776dfe219b6a61acd1b33703ecf94e2ce0f2f65d1523ef0859156bfd4cecd1f3cf124af228eb34702f3f8bcbe8f24fa3e9fc664a686b18c2f483b023e76260bb62fffc26755a0c7c5e4ffb7dbf59ea7f2f8b742cbb55e27ca54e953206a190ff1ef213c7578fa63f92faf26063f92e5a414e1842fead724c81673f31c185454d1a5cb7b3a375d093b12538d6571320987cf67ba7e29097d74feca9cf7b3722ef6d27cefd4ca5985b1d740e02386f2a390df848483edae7cba77e77a7a5d9168b053bc9a81a3489902c42b5e8b118131990a660aee27cf436430601b191e30f8f63e3f79eb41fddbe8d6d113460eadbd23effbd04e5f112009c5891effa9111cf2a714769c310af8288ab413e0629dc54dcab0f68337a1161199beb5038eb13c0d811a3c2ba84cdc3d011245407c46978ceeb45e2e7a4c8d0d265a602dbb78979c9af485e792e64d77a99a376093185b4adfd9966c124668c0938126110a25bd3301bce203bfbd4f258eb25f26bc9651908a568004691d64664445210695a340b2f0b148f9be18cb85568e2eb606eae72dd5ae10eafccd92c3906cc0cd4bbe3db34775239096fbe2364cbbdd7d04f4845b6fb11f0372e6338052f6aad4bed7861ec2b23c0093fd7fbecc7f6e9e791189ab37423d88d25fbb12fed64dd777e0ffe7cdec30750ec38b41fa6c9589d8db2aff55a9030ba24f514cc646c49b882e46a8f68c8fcc3fa87e0146a521474e3784c959063fc56b103940d69b4bd6006e4c91d9123e053dcf4121800626b10a6c7f9433c92892fd2871b0520fe3f3723db6a074ae3a3ec5fd00f8cbfca3457bdee5d56444037a1cb84a2cf28142ae4c988eebb663a0f065cac52a37a5445b4551b7fd43dccb97becadbd4abb5b0e5ae96c503016a1b8f82105b872e1d01e3c9d45a607af17ea1bc0000a16007d8bc186f9cc5c52b17ada9450c5c4d66337c81224083634ea088b13b24543cc259897f1be1881f98106b15318bb4429f73a1ea5bd9b28c4641dbcbb1c372e54e718a3fa17de5c98d56ba70cd91f122791930e25427065a30aeb1adc08188a98e74d193a51371669168c7f213c151e307b2bc56224969e4b3aef82c1ea44b74da91ffb5e33256b1688669d3a0d18720b23cbde1b419da56ed475f9c75c0b446c518c9f3d0c68de480d703c8b96b0075971c17d3c1a62eeee2a34a224fec248c73cc0fcd88283ca01057215fae0fc369ea885c12c6432880759f219913e997f4b952087fd56097a2b0380067e79459f2e5a4ae6da45958b4b236bae6dc3d1114bbf3c5ba22116f500510d3c62b0a63bc939f616c04275d243be3f57ff22646da83f06d4e0b1c736c4937c615d7946ae18a1549e1c8edbae17aae366ce92723f662aacd1e650bdf74324039d22ddf5574b8fa7f2af9e7bf3da9d782e352d19a9a9b2cf7e1f76e3936d00d90b324d2f9b085eaafa1fc30f2ebb6a855637d9fabcedde0918bb4bbb9b8ba2bc2234a547226a19030c76b6e78ae7eb500e4c71f255fd8ca4d8e087292e0da384c64f5c9fc03f1dd7a3299483767f45548a1f0aeec351be8ce055afd8477264a4a8a8fd340a34c4eb28a07f784ddbd7c8984caa692cfdf80ab9088d03513c11c28d2b0b0f54a39a39b3b68c516ffda4103c864f21a11123ac092ec9df0b58d1894713d4e1b9023b83412255c56f09ed8670a51540395025ce517abf6ef98eb800d43aa151de5cb25f03697b6ebf427cd5faa96ba446cd2d7a24e28c7a7b7bc9f2e4d9b5ca5734a87e2bd6435eab4d13050410a5c96178c182830c2930df46e0193bdd8561237695845cbec17b671d1754bb6de4c20290a887c04c969864873e6cdec7b2f1fc2f732b7adfc162ec70df60131454b0fbb88aacb836a1156839110a296dba3a7a6a1de52ea8739bbee4c20a19288ce2eb612741139b91d20d8531cb3fd3d239deb09e173eb61e855ef5b9ba768a542091aca1a2da2e1ca81addd868dd5a96eefec37077c8ccf52486f1fd14a704053281ec9679774df9266fd829e26e94aa9c155c2bfa955063e04592b70a4208ae79f6046f0e09b5f2bb55ff4e1e7fd14c1add95fd448b3aecbb2e63c18d9c9796c5e7c6f6bcb57559523c7e46eb9bc1eabc4c5bf8c7adf9c95d087418addae006b5801c1925a3207fffeb724a11e28eced5940565b54a73308e396178704eff4874db513e516bba408d05612416cfc20028f1786192e5826617bf990721bd426a8ac435037cb50d9b32fcdeaadded614c6dc308f8accbbf2613922f2553922b5698dd33f7a749b9cebdbb54ebba0b69e285716bf8935ce6636e93d54059d97d78ab91c209e41be08c3e02c459e18235c7d9f287a6379f40833dda0d3991b3cbe5fc3e3de6680cd5d4a390ab1e3fb1e0d4877d75283118b7f7c11bd6a7196e581ca3ef8dfdb1cff5aeb946388e1fda89cf3cedf6d07b0bdc18ffcc585780e6d5ce8877e8c53e0cc46d869b721ea571b3ffc82cca5c2c3dd0af17817b77bdeedcfe22d95f6bbe747e3a34f4d54f275b8ee854a46297928c8f37d7fc3790a981d7448b123da821d6a89fadcad3b423524f241d2942f5065ac6a58ca14626b927017ecfe8a641aebee581d7d6b8ca34267c50667bb9cfe25feb0117f0f761643f7da026d73906b650bb770a72fa98e131cbb7a6a5e8843efe601a3e68372adc9fe14749827a5bd1f688d2ea4ddd3bb6d02ee26f992e7a5ecdfcabec361e35ef640e8b2ce27ee9292db83f0b1b17e723e24a6289076b5a4b20d1d8e1779d32f6d5189632bea395e9fba9b3b8a7c5339a1759995ff1ea9196a0c8061a93a3631507fe1d3a09ba3c5b5f28ee478217397d43bef345ff24f81833e2c6936630f4b81cbdf20bfcc160e1d775f954c028a348434da0699cb04b350bee42732af65fd601d187dcf0871f9647a2955a7263f3c890addf2bcb2d9a36581a13909704d409047ab9fb4dbf046e1dbd999dbb739bb346e9efea574c099aee14e06cd50657352e44afbf765fc84a85af8be5b61aa2ef9fa4569bf1b21d1ac4f91c3c4943bec47913f69417073f287debc6e0d2dbc9d0147f475dcd42d33876f8cb4a7f54c4e57cf73fe28cb5b9d1cc474bd234f607a46dac98fb0c87b3ae824321eac6bcaf176b7751d6f6e82c207e4bfe69d8fd91292c83031c4e646d02c684910a187fd8e00488b592ecbaf7fc0bd0341d1a0a4f1eafe55771417f24254fc009436b3458b59fba7569226b7c4a3654831eadb7be786591597b427ea4d20b745d190b69cefdd2574af96d28f99d15f363e45f689324a9a993cd6bac2d6975ff46098c84c793c2403282b5df918b1a569dd68737f24da9475b2cb277e52b3c038541aaaa9a83263acca93baaf094bacf9661dddc79ae7cc28aa0571aa9490db078d6322326af6e9f37634f5792c8061e6843ca956f7f28aba79aefb087bb9f8346b7bdf71245a5bf6de1ec052c6fe01c23e6fa67ed36db61077550bb8eb85bed6330e7e2c21f5d13071d6bfa6d6fb144f8e29c8dd7b220f429175dad171762ffc3b276992a09c8683aaf420589e15dd98f0e8124dc4805c9b3ceab67115644c20392b351f25ce777c66862a4060da1ce51f0b80c12977b2c541a4ce8769fe92cc5dbd7fda667c5367c8b9dc163f20cde06dbf30f235befb11b2c630a63366f697a674e34922c76cc42e347910ae828d40252d43db4bd8990264460124e6ff712c1e3faa140232be46f5e3fe9a7df1ee2c7464cb137fabac965629bcb5bb263d7229a1a3c49a9a39acf59786ad4aba82a1719992b09b1c172697a1bc995fc025295a79348cd9bedb8789025a6c0c48c54a75e881f27ae3c8e7701e0549ddb9d3db860e06cce0762345e80e2bd67962ff7c0779dd1c1734b9ce92bd915e353b913dcbee6293526eb4e863862505d01b3fd8d0af84725b108fa78299cbd0e6b2c0153b8fc945631926142c5ce1d865dd85305b2e331aac35a66bb76e0abeb998632c317a9e175c1e76be7870b7e184a60dfc3bf772cd9c1a921ddbefcfaeb16aa2a8803fe0fd3493268fd74cc633b5334131f9d8a0a84d661a7fee0a9dbd1cae58ed5f41592102bbb9516fdec1f07d5c54ed9fb8fd791e3c0aa49e20e49166dd6fc62cf92046abd1a83a24c8c4fd6129a7b9065e792d8d1d4cfceb0318466cac985e52000a8f13b2bc1a8c004478aa345bd0eed8e129b2813e02e604522e44ec2ae9f5fcf63945c4272b3329a7fc25127606c15c71d1f00fd303ec0fe0cf1be23cc894a4fee27abd0ca09ddfb80d484420a3841ea8ef76e577bfb7b9b8d6800979aabb045a0107b4ef67283c8d44f2bbfca4687fe0fbf132227d231723db0d82efc6454f15581ca3b83c16b5e7d7e5cfe86c39e7b934dd18e587d485fc7b03fbd145ce1421480761d603cb1c2c1c381e7e11c5368540060bb12bf2d26289d9bc57c719b0a41efefbdff4e78206e8e6bf7c422bda1664d893c21fe930106f63f39d422f770003676811be467148a36409d517c95344e85965789f40e3200b7103da098fdcc7d00be0470cfb9717e7e3c49718e526c4c322a93e080bb242b0694ffd02017f99b0cc383f9497b457d0abbf8e47c7db0ba048c090cd5186a63d4ae71c0a1bcf8202172a1bdda31424e68ab10e3491fbbc3e6f46163d8c16db535e6b8c2e33840f58e29ad6dbc72a9dbe8dc02cabb2adb3cdfaec81bc9918feb7f3fcc2e6d9684845a593f49f45454218115829f13f7c4d06741e0c8e07cef3951a71b36c6667a79c83c4c8faa487a02a2921ede65573f6c253cc32da701b2f6dfc2025344c53fbfb05004569b5596eb973d23f030cae105df4f393efbdaaa0065f49d64a785b5edbc2e3c24aea527b857b027adbf49010063df93e8f5a48caed081ad568cbd0a714cb2bdf3def6f14f3e31a4e1d15bdef83120016ec88cc50f862e805f6bab50fe07dfc8a52d615200862671437e994e54c9d66b4a94a0c769334013783ffc5ae8808d6e9ac9d419422cace7e8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="MYSELF" scheme="https://zspcer.gitee.io/categories/MYSELF/"/>
    
    
    <category term="考研" scheme="https://zspcer.gitee.io/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="单词" scheme="https://zspcer.gitee.io/tags/%E5%8D%95%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>黑群晖使用DNSPod设置外网访问</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/DSM/%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8DNSPod%E8%AE%BE%E7%BD%AE%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/DSM/%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8DNSPod%E8%AE%BE%E7%BD%AE%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</id>
    <published>2023-03-15T04:24:10.516Z</published>
    <updated>2023-03-15T04:24:10.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑群晖使用DNSPod设置外网访问"><a href="#黑群晖使用DNSPod设置外网访问" class="headerlink" title="黑群晖使用DNSPod设置外网访问"></a>黑群晖使用DNSPod设置外网访问</h1><p>我折腾群辉的 DDNS 已经很久了，之前使用的是花生壳，虽然能用，但是我觉得并不好用，所以使用了腾讯云的 DSNPod 做 DDNS</p><h2 id="步骤1-注册域名"><a href="#步骤1-注册域名" class="headerlink" title="步骤1:  注册域名"></a><strong>步骤1:  注册域名</strong></h2><ol><li><p>登录 <a href="https://console.dnspod.cn/"><strong>DNSPod 管理控制台</strong></a>，进行购买</p></li><li><p>完成购买后，即可进入 <a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a> 管理页面查看您注册的域名。</p></li></ol><h2 id="步骤2：启用-DDNS"><a href="#步骤2：启用-DDNS" class="headerlink" title="步骤2：启用 DDNS"></a><strong>步骤2：启用 DDNS</strong></h2><ol><li><p>在 “<a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a>” 管理页面，单击您已注册的域名，即可进入【记录管理】页面。</p></li><li><p>单击【添加记录】，添加一条主机记录为 @，记录值为 0.0.0.0  的 A 记录。如下图所示：</p></li></ol><p>注意：记录值可以填写为任意IP地址，完成操作步骤后将会自动更新为您的公网IP地址。此处以 0.0.0.0记录值为例。</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223171928275.png" alt="image-20230223171928275" style="zoom: 67%;" /><ol start="3"><li>进入 <a href="https://console.dnspod.cn/account/token"><strong>密钥管理</strong></a> 页面，单击【创建密钥】，输入自定义的密钥名称后并单击【确定】。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172005486.png" alt="image-20230223172005486" style="zoom:80%;" /><ol start="4"><li>请妥善保管对话框中的 ID 与 Token。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172030142.png" alt="image-20230223172030142" style="zoom:80%;" /><ol start="5"><li>请使用具有管理员权限的账号登录您的群晖（Synology） NAS，依次单击【控制面板】&gt;【外部访问】。如下图所示</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172051836.png" alt="image-20230223172051836" style="zoom:80%;" /><ol start="6"><li>在【DDNS】页签中，单击【新增】。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172118673.png" alt="image-20230223172118673" style="zoom:80%;" /><ol start="7"><li>在弹出的对话框中的【服务供应商】选单内下拉选择【DNSPod.cn】,并填写相关信息。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172142806.png" alt="image-20230223172142806" style="zoom:80%;" /><ul><li><strong>主机名称：</strong>填写您购买的域名。</li><li><strong>用户名&#x2F;电子邮箱：</strong>填写您获取到的DNSPod ID。</li><li><strong>密码&#x2F;密钥：</strong>填写您获取到的密钥。</li></ul><p>注意：您可单击【测试联机】，测试是否能成功联机。状态栏显示为正常，即代表成功联机。</p><ol start="8"><li><p>单击【确定】。</p></li><li><p>单击【立即更新】，确认状态栏显示正常。如下图所示：</p></li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172238586.png" alt="image-20230223172238586" style="zoom:80%;" /><ol start="10"><li>返回 <a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a> 管理页面，查看记录值的是否已变更为您的公网 IP 地址，已变更为设置成功。未变更，请进行相关排查。</li></ol><p><strong>完成以上步骤，我们的DDNS就搭建好啦！</strong></p><h2 id="步骤3：配置外网访问"><a href="#步骤3：配置外网访问" class="headerlink" title="步骤3：配置外网访问"></a>步骤3：配置外网访问</h2><p>一般家庭网络，公网ip都是禁用80端口和443端口的，所以要想配置外网访问，只能修改端口</p><p>1.打开群辉的设置，选择【网络】，然后选择【DSM设置】，设置 http 端口和 https 端口</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172711400.png" alt="image-20230223172711400" style="zoom:80%;" /><p>2.配置路由器端口转发</p><p>我用的是小米路由器，在【高级设置】中【端口转发】，将内网的要转发的端口转发出去</p><p>比如我这里的设置的就是：当从公网访问 1337 端口后，会转发到内网的 1337 端口上</p><p>注意：这里我只配置了 https 的端口，因为我绑定了证书，可以使用 https 访问，更加安全；如果没有https，可以使用http</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223173032070.png" alt="image-20230223173032070" style="zoom: 67%;" /><p>3.这样，你就可以通过公网访问了。</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223173158744.png" alt="image-20230223173158744" style="zoom:67%;" /><h2 id="步骤4：配置https安全访问"><a href="#步骤4：配置https安全访问" class="headerlink" title="步骤4：配置https安全访问"></a>步骤4：配置https安全访问</h2><p>要想配置 https 访问，首先必须要有 证书，证书可以直接取 DNSPod 控制台免费申请，一个账号可以免费申请 20本 证书，足够用了</p><p>这里的步骤，简单的描述就是：</p><ul><li>申请证书</li><li>把证书导入到群辉</li><li>将证书设置为默认证书</li><li>搞定</li></ul><p>具体的步骤可以直接参考DNSPod的官方文档：<a href="#https://cloud.tencent.com/document/product/302/79821">群晖（Synology）NAS 安装免费 SSL 证书</a></p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223203835651.png" alt="image-20230223203835651" style="zoom:80%;" /><p>至此，HTTPS 安全访问就可以了，也就意味着，你可以通过公网，使用https访问你的群辉了。</p><p>注意在路由器中，将你的 https 服务对应的端口号转发出去哦</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223173158744.png" alt="image-20230223173158744" style="zoom:67%;" /><h2 id="步骤5：配置其他服务的HTTPS访问"><a href="#步骤5：配置其他服务的HTTPS访问" class="headerlink" title="步骤5：配置其他服务的HTTPS访问"></a>步骤5：配置其他服务的HTTPS访问</h2><p>经过上面的配置，我们的群辉已经可以通过外网安全访问了。</p><p>使用我们的域名：xxxx.xxx</p><p>使用我们配置的https的端口：1337</p><p>就可以在外网通过  xxxx.xxx:1337  愉快的访问群辉了。</p><p>下面我们来看看：在群辉中，我有一个内网服务，怎么把这个内网服务映射到外网中。</p><p>我以 firefox 为例子；配置一个可以外网访问的 firefox 浏览器，可以在外网访问家里内网的各种服务</p><p>通过域名：firefox.xxxx.xxx:1337 访问内网的firefox浏览器，就像下面这样：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204238222.png" alt="image-20230223204238222" style="zoom:80%;" /><p><strong>在 docker 中安装 firefox</strong></p><p>在 docker 中搜索 firefox，并安装：</p><p>docker 镜像：<a href="https://registry.hub.docker.com/r/jlesage/firefox/">https://registry.hub.docker.com/r/jlesage/firefox/</a></p><p>github网站：<a href="https://github.com/jlesage/docker-firefox">GitHub - jlesage&#x2F;docker-firefox: Docker container for Firefox</a></p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204413138.png" alt="image-20230223204413138" style="zoom:80%;" /> <p>安装教程和相关文档，作者已经说得很清楚了。我这里再简单的描述一下</p><p>本地新建一个文件夹：&#x2F;docker&#x2F;firefo&#x2F;data</p><p>然后配置docker</p><p><strong>端口配置</strong>：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204644619.png" alt="image-20230223204644619" style="zoom:80%;" /><p><strong>存储空间配置</strong>：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204702767.png" alt="image-20230223204702767" style="zoom:80%;" /><p><strong>环境变量配置</strong>：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204955490.png" alt="image-20230223204955490" style="zoom:80%;" /><p>然后启动docker</p><p>因为字体包比较大， 所以启动的时间会比较慢，等，，我等了15分钟左右</p><p>启动之后，在本地就可以通过 192.168.x.x:5888 端口访问 firefox 了；</p><p><strong>配置外网访问</strong></p><p>因为上面我们对群辉配置了 https 安全访问，所以 firefox 也要设置https安全访问</p><p>通过作者的文档可以看到，firefox是支持https访问的</p><p>只需要将配置项：SECURE_CONNECTION 设置为 1 就可以了</p><p>设置为 1 之后，会自动生成 证书文件， 放在 config&#x2F;certs 文件夹下面</p><p><strong>但是呢</strong></p><p>上面的方法，我亲身验证，其实并不需要这么做。 所以我们不需要设置：SECURE_CONNECTION ，让它保持默认值 0 就可以啦。</p><p>那怎么配置呢？</p><p>打开群辉，【设置】【Synology应用程序门户】【反向代理服务器】【新增】一个反向代理配置</p><p>配置入图</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223205555072.png" alt="image-20230223205555072" style="zoom:80%;" /><p>到这里，群辉的配置就结束了。</p><p>但是别忘了，要想使用 https 安全的访问firefox还需要什么？ 对头，还需要证书！</p><p>所以我们要为我们的二级域名，也就是 ：firefox.xxxx.xxx 去单独申请一个证书。</p><p><strong>申请二级域名证书</strong></p><ol><li><p>在 “<a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a>” 管理页面，单击您已注册的域名，即可进入【记录管理】页面。</p></li><li><p>单击【添加记录】，添加一条主机记录为 firefox，记录值为 xxxx.xxx(这里是指你的域名)  的 CNAME 解析记录。如下图所示：</p></li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223205841510.png" alt="image-20230223205841510" style="zoom:80%;" /><p>然后在这个记录后面，去申请 SSL 证书，申请方法和上面讲的一样，这里不再赘述；</p><p>证书申请下来之后</p><p>按照DNSPod的官方文档：<a href="#https://cloud.tencent.com/document/product/302/79821">群晖（Synology）NAS 安装免费 SSL 证书</a>，导入到群辉中，<strong>注意，只是导入进来， 不需要任何配置</strong></p><p>也就是说，步骤是：</p><ul><li>申请证书</li><li>把证书导入到群辉</li><li><del>将证书设置为默认证书（<strong>这一步可千万不要做如果你做了，就在改回来</strong>，）</del></li><li>搞定</li></ul><p>搞定之后，我们来到群辉中，打开【设置】【安全性】【证书】在进行接下来的配置</p><p>按照图片上的内容，进行如下的配置</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223210520238.png" alt="image-20230223210520238" style="zoom:80%;" /><p>等你配置完之后，就完结撒花了。</p><p>在浏览器中，就可以通过 <a href="https://firefox.xxx.xx:1337/">https://firefox.xxx.xx:1337</a> 访问你的firefox火狐浏览器啦。</p><p>举一反三：其他任何的内网服务，都可以通过这样的步骤，暴露到公网中。 </p><p>所以，每一个二级域名，都要单独申请一本证书，还是挺麻烦的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;黑群晖使用DNSPod设置外网访问&quot;&gt;&lt;a href=&quot;#黑群晖使用DNSPod设置外网访问&quot; class=&quot;headerlink&quot; title=&quot;黑群晖使用DNSPod设置外网访问&quot;&gt;&lt;/a&gt;黑群晖使用DNSPod设置外网访问&lt;/h1&gt;&lt;p&gt;我折腾群辉的 DDN</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="DSM" scheme="https://zspcer.gitee.io/categories/TOOLS/DSM/"/>
    
    
    <category term="dsm" scheme="https://zspcer.gitee.io/tags/dsm/"/>
    
    <category term="群辉" scheme="https://zspcer.gitee.io/tags/%E7%BE%A4%E8%BE%89/"/>
    
    <category term="ddns" scheme="https://zspcer.gitee.io/tags/ddns/"/>
    
  </entry>
  
  <entry>
    <title>我的面试问题</title>
    <link href="https://zspcer.gitee.io/note/MYSELF/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <id>https://zspcer.gitee.io/note/MYSELF/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</id>
    <published>2023-03-15T04:24:10.515Z</published>
    <updated>2023-03-15T04:24:10.515Z</updated>
    
    <content type="html"><![CDATA[<p>redis的基本类型有哪些？<br>redis的有哪些使用场景？<br>String类型里面有bitmap，了解过吗？<br>sorted_set的底层原理是什么？<br>    跳表<br>redis的事务<br>    如果A，B两个事务，A事务修改了k1的值，然后查询k1，B事务删了k1，如果B的exec先发送完，A的exec后发送，会出现什么现象<br>    怎么解决这个现象呢？<br>缓存穿透？布隆过滤器？<br>Redis的持久化？RDB和AOF的区别<br>    RDB的原理：父子进程fork 和 copy on write； 指针指向同一个key，如果这个key修改了怎么办？<br>Redis主从中怎么保证数据的一致性（主从复制怎么实现的）<br>    - 通过RDB文件进行同步的，同步有两种方式网络和磁盘<br>    redis的管道pipline用过吗<br>    redis的内存如果用完了，会怎么样？<br>    - Redis有哪几种数据淘汰策略？<br>    - LRU<br>    - 怎么保证都是热点数据<br>    redis的集群有了解吗?<br>    普通哈希，一致性哈希（哈希环），哈希槽</p><p>一条查询语句是怎么执行的？</p><p>事务的四个特性，Mysql是怎么实现这四个特性的<br>事务有哪些隔离级别？<br>RR是怎么解决脏读的？<br>生产使用的隔离级别是哪种？<br>MySQL日志有哪几种？区别呢？</p><p>如何强制使用某个索引？<br>如果有一个很长的url存到了库中，我要利用这个字段去精确查询某行记录，怎么创建索引更好？<br>前缀索引怎么确定长度？</p><p>mysql有哪些调优方案？<br>    - 索引，使用覆盖索引，索引下推；<br>mysql会不会选错索引？选错了怎么办？<br>    - sql中手动指定索引<br>    - 删除掉走错的索引<br>mysql为什么会选错索引？<br>    - 统计不准，可以anlize table；<br>analize table准确吗？<br>    - 不准确，抽样采集的；</p><p>涉及到财务的系统设计</p><ul><li><a href="http://confluence.sf-express.com/pages/viewpage.action?pageId=189135181">http://confluence.sf-express.com/pages/viewpage.action?pageId=189135181</a></li><li>快递  银行  商家</li><li>快递根据快递单生成账单，根据账单的金额，调用银行进行打款申请，打款给商家；</li><li>快递单号，发件人，发件人银行账号，收件人，快递金额</li><li>用户可能涉及的状态：</li></ul><p>DDD的一些基本概念：</p><ul><li>实体和值对象的区别是什么？</li><li>一个查询请求过来，打到DDD后台之后，你们的分层是怎么样的，这个请求的链路是什么样子的</li><li>防腐层是什么？</li></ul><p>mysql</p><ul><li>对一个字段创建索引，是选择普通索引，还是唯一索引（buffer）？</li><li>对一个很长的字段，想精确查询，怎么建立索引？</li><li>回表？ 怎么减少回表<ul><li>有没有可能经过索引优化，避免回表过程呢？（覆盖索引）</li></ul></li><li><h2 id="索引的B-树"><a href="#索引的B-树" class="headerlink" title="索引的B+树"></a>索引的B+树</h2></li><li>mysql的事务特性<ul><li>日志</li></ul></li></ul><p>分布式的基本概念：</p><p>二阶段提交流程是什么？有什么问题？</p><p><a href="https://baijiahao.baidu.com/s?id=1698550212539924249&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1698550212539924249&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://baijiahao.baidu.com/s?id=1694171547415193602&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1694171547415193602&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://blog.csdn.net/qq_27184497/article/details/103673548">https://blog.csdn.net/qq_27184497/article/details/103673548</a></p><p><a href="https://blog.csdn.net/qq_27184497/article/details/103673548">https://blog.csdn.net/qq_27184497/article/details/103673548</a></p><p><a href="https://zhuanlan.zhihu.com/p/78599954">https://zhuanlan.zhihu.com/p/78599954</a></p><p><a href="https://www.cnblogs.com/Courage129/p/14528981.html">https://www.cnblogs.com/Courage129/p/14528981.html</a></p><p><a href="https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX">https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX</a></p><p><a href="https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX">https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX</a></p><p><a href="https://zhuanlan.zhihu.com/p/61129707">https://zhuanlan.zhihu.com/p/61129707</a></p><p><a href="https://blog.csdn.net/qq_38747892/article/details/122326276">https://blog.csdn.net/qq_38747892/article/details/122326276</a></p><p><a href="https://zhuanlan.zhihu.com/p/42056183">https://zhuanlan.zhihu.com/p/42056183</a></p><p>JVM垃圾回收</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;redis的基本类型有哪些？&lt;br&gt;redis的有哪些使用场景？&lt;br&gt;String类型里面有bitmap，了解过吗？&lt;br&gt;sorted_set的底层原理是什么？&lt;br&gt;    跳表&lt;br&gt;redis的事务&lt;br&gt;    如果A，B两个事务，A事务修改了k1的值，然后查询</summary>
      
    
    
    
    <category term="MYSELF" scheme="https://zspcer.gitee.io/categories/MYSELF/"/>
    
    
    <category term="面试" scheme="https://zspcer.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>群辉记录</title>
    <link href="https://zspcer.gitee.io/note/MYSELF/%E7%BE%A4%E8%BE%89%E8%AE%B0%E5%BD%95/"/>
    <id>https://zspcer.gitee.io/note/MYSELF/%E7%BE%A4%E8%BE%89%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-15T04:24:10.515Z</published>
    <updated>2023-03-15T04:24:10.515Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5ebbc7c8e516a0e43f174ccb514c52a56b3876d6f7847e4526ff9d2819dc075a">8c00d3d27fb3c22fd589b44480636208283bc4f252b9d9a315fe285b7e6fdd7f930a20fa3f69a5692dc74a7bfb3323d7e419308d04e4d1b2c69d6ce874d15309d9b162fc742adecea1031d6df21b4970298cac3e5f2c75a9773931a94ddbd44d82b561c49a1b41237030cec8a279f390d19b6c0e8e9445c6208e1dd88fdd5bd073919cb914a7302022c8b7134022ff8d8ffd9e17841462ef970cc3a330c9ed4b9e221ce8a1c472a795238e964e6a9bd39568d3ffb023b9bc150a23e5b94b3e472d35e981d51e9b1572cc8b2fab654670b4de33ec8ac492d501ec51ea8df2ef5b5d2b46cd2510351b4efc93ef1de3567119a316f11dcb488fa3435ec0ef7e5640f22a0c234b5d23a03246e045960a49c8405be82177305068354452b4a0d6f757f0ab3f5293a708f2683055c48382288dc61763ed5116eeba89374b81210b6b7ae891fd510f624f99bdd10a28537060f6125b9435738e1ee43ce46a3dd608f1399e987f29eaef971c0369b9a0e2d671b2f141f106b2859fe1ba00bd3c55b9a7105aa9e57910b314839c2cf1948d54e7fe780e0d241387ea446e6fd6d2b726e91ed597fecdbb6f1baf9a80192119a71c0dfe57c2df5c97bbe8ee2c1571eab5d01a959c014a389864b18142644f8b4001184c72a99a440e4999187b84c10abb308fe1ad28847c8ae2ab26b8f5223d5a0737b643702de328933a40909629e7f5ef4003634de8a5796156940b8482e36827fe015f2e4e18edc63feb5fa45f0da7061b528d9aac93f910d48642a7d44df5be7c5ea847f539e60d63bd94d4b326c6d4aaad071d97c9b7ae3d6e75327c0833b6bc65b3f3439d2028c282d965576dc54a920f12f65c925b620d711d6442656fbbc1c8b0aa800d6cce48c90fbe2f9146bfcdb7fe2522b1d649ee7541233c45b620be3122aa7b80e15989b0887cc138e48b554263b16418bc28fbaf7aee0f8bb2a099472d1ccbeda82a0cb9b9f952543b80ce1209711544edf3b424e13a05a8c9f861753a4a1abb91cfb990fd15c13ab5693c81a8039739c10b3f7e0e2238916438e076903d4e17d2604d9f8b5667365ea504132f978b4fadfe8fd7cc637e3cfb20d848f9d366e3c5c49e2fda6b3bc59e4c8597f04633a3bfb4b003478d10de34d71bce4e7c98acc3154282ed33978560af91e9a491721dd49b76ace914a02257f7228e4d32c069e4306b79922090d7c186329c4ce2b4614c6a566a460c3216d7843eb69502e48a4a73e93ae53ae1a0c94da59d2b98185c29d16cc4896e76aed4aff0eca87328264d6b2f6dbd5038c8d6e337e7310bef42fa631cb81a5a1c864e718941b62dcaaeeca0cbb7df3de172b69a4b600aef2909c39b0cc6d35631e2e120aa197a64c1ffde2aa9da49057b7954fddcd6fe8f60fbac7979cffae72ab6d629ad7d633cec7bc149004cb020644ec0c31ca696e5cd10658f26a37ae760e46681f1cfe0547059c0eed140a0d5af122ec9efbca92b499045c153bd8e59dcee1d92a9666c0ce16b3e2bd5d933891676315bce641c2586178a4b507ece88eefb85b6a99d4ba9055f212a41f1fdd5e27e1769598741533231f48ee919b389ee74066b043545d96eb2af57ec4d1fcdc05de8491ad89875e08f3f0c25dce14893a64a9d80ca9c7acc90b25fab662022d4827f50aece4cdba0059aa84e9faabb918e6b7905a575c794831225486b487acf6387d8362507c570a1fd8b17c508bf5a7829a418e7acb72d6e4d6eb6eef27a52e7ff429da5473284d5871f47e17a11c1a3ac12465392380af23cc2aa92057c04d0806b7e04a00e6549094cb9d93b484827671a59b4a1a7d13449800ac6953686877c9aaf128564fd0716755efd1eaeb224c287626ec05d8a8694f3c926037c095ce9299172b2459d943f0d2829418b12828a5e42e2d1f52475c90e2274c8574433d6de7a258d5810e2a018d3de532db33b3c7ecf97b57bcad48e6bdfcde0176faf8b86b7ac683e3ced531d5b25fff41dd778c874980ef64fcac0af64f3aaff12222c917f5e7d897a49d5b07e72bb1c743ec6b7b16ec4a8ade79c8bfc7f405aca9252c550fe0e4fd6a2bf317bedff1a46e5e9efae3fd51c0f0b62300e44d7b8bf9fea32dfb44176157f977556b2c47436f65acfc21e4d5fe3e5e89d7d5fd73803e128c29e807a8b6be9bc8d27671a96c77e7a6eb623acba9ebdcd60f6cdc504cc259a0cce25fad1d735841663911ecfafcd470952c6078cfd77b85c4df2910b62fef2b63d181c9746c2e9fbce9ec18c07ee1c8e259cd7c57ed1fc23d1c027f4725b1b33a195550e3dcc6fb2510b9a01abf7491ac95067b9c84133dfcd67ab0dc1cee4345832ff3852c9a6bd0b702ab269296f7eef4421d4173b3919d67d55a7caf243fc371df5c1e1332ba55f0ab34ed3900f094dbc967952430586c34320b0c786d9c894e0945216c5d6e67b45f8b8db7d0d9f1431601be9bf52797e670d047453a115a0285ba902e09130ec7cd4bbefa6c04429dc3d2bdc7ccd408b7ba67d2d26c921fd252eb815cb98163dc34cc48b6e5d394a920cffe2c825a20c8f92a6446df6c580f78ea780d34a9dcc039f6079e70b4b4093bf0aa5405a718b04ca591a6b8c0ffb722bc4f2321d640460ab1a22f48b120b582c58b40e68a5ed43b7d2984b9185ae53ae7ed0b47b5db947c18773b773d71cf470198c72a8b5902535f1ba22a8ae5966fc53be99294c7dbb84fc1a736ef8b087eefa5409c6b046e584a92ea85355dd34c2c997de4d0f996632f6b6bd92304118819f03e5aeefb0ba7e79837a1def48002d43bddc8445c30485078f7ec613b54db09900f5c246f4709761391b3129dc6f2ef5a2a9a52f85f70c3bae11e50543bf0b2bdae2dcba4d03f05e61dac3e042d56a99d22a7add94f629719dd518d1a5b059ea65abd545feb835b523b9b4d31b28d40cdbd06450147d1f4fb423468c40c67f4c2b69ec3fb1ba1d326dea6448b46a80b9c543bd24b677c3fd1114f8da9b057debfcab06addfb98eef1d99c3f12fb94c7b42f9c06524399c82c6de71a4f095fa977951dafaca12665d2f1f7f75b7753ead885beb073d755f138e69d4c928ab2066da1e628d7082dbc0d8fbd935c7aad1ae268011214765b657bbacb7ee95def047ad4dd6ae67dd833ee1df909bbf67abe5c8d4dbde8cd1d4343deabac1ac62688df45403bf8999597ae6c221f5e88fda23a039dd4e2886b81ffe1937dcbb0b7b86f733e268ad63fcc8e9b21fa76449c3029431181daeccf4f496e4035ffda6eecc5c8868295b9ccf5375c7689e87d05cc3c8de683f5653068ab699ffa456d4be77c6d134b776957d24df3695ecea3b9018c5ea8f49c4e8528d7707d77b3b0957206a00a8aa859320bad421b2608248d4f93d83e74bb4772a45be5c7e3410b30a9b9fcc3b67c714d961f13a7c1ce8231baa2c8ec0baedd43e8b282fa8631782a3894895482491b3c525804c7006d27c6f485dbd1155776bdc2b66cc39475e7421fe104e4a76ca4af0d03811af62313711882d28afcf3d58b50bed13b5dcd61faf220de4d10e3cba1eaa6028c0f0807c1a1233a44b8fab0efa042eaefd2fff4c9c05d08b661507ce44f0044d4a369fbe33b19b7572652580a41cd565a4a806b9a332ce62ddb4195bc0ab168afebc3744b1fe60d4c4c5f3172ab7aafc0054f2f560d4133969bbe89b349fcc0476aa812c397c3c341d30f835c73876aab910aa43016ae94d96f21c9698c9315a51356bc4c09d1ef18d5538b79109ea5abcc872f2be34cd902fa2877afe7e5489739d9d702b4c53ff6488f66a8cad79f4418ca6c17a846a078edde20eb1f84fae613104d3974c3c5c92286e9ad1197d2b83143211c25fd849e59e81d29a35a32d2d4e2f41c1794859fb12c87446d69143a5bc65808c2b3a89ba834cea5b38b7e6d2218be809732971bfdc0ce51b35f03e89f3f617cd3de67501d161ec455923d8ac207ece35a2fe6eea392abce653376cde542ff11467b50c0dd182dd93f216f5343a0b7059a117986bceef632889bf726fc7fafd7836d95bbfaba2cf0df8a24d0ebae955616b38cd8a8a647551ec07a3df68334ec72671249289abdde1612e0b454c1a80e9b41e7a97b91944c42a7a16813f9cc6f9bcf49e91698bf88997aa93a96c0b22418c89e6fea24b51ca7a83e801d8a882fcda35f7898b8094a91c1525331df103ab6f74c4ba270a96c816040bbae788bdc539d1ca0a7810631e96d682102e62cf24373d1af90f62c508bd635396465eeb22b3ab7211eba4e5bafa853743121e96733d23a0b7aa889212e4537e820134dc716b9025b4fc4c5375d44d275fdf4ec780b2f61920247f78ed1c3a9852a30c6c7f4a355775f54440a1ac8e81b5245f5b4368ce16df18dcd24af380514f236fd980c6cd62f3b26c1f744048c0acc1eb273998bc459051f3f8b4b98823f4b2751b34e78e9ca1eccc6ea0b735da226544e3aa3de7133788adb12eeeb9ab6da375a1d9fb9a3f5d845c841b7fec644e7347e4126e62b2942db1409bf90ef536a0258c8737e7fa612ff1876d5b14bd6b7567</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="MYSELF" scheme="https://zspcer.gitee.io/categories/MYSELF/"/>
    
    
    <category term="个人账号" scheme="https://zspcer.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>mysql的索引从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-03-15T04:24:10.514Z</published>
    <updated>2023-03-15T04:24:10.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的索引从入门到入土"><a href="#mysql的索引从入门到入土" class="headerlink" title="mysql的索引从入门到入土"></a>mysql的索引从入门到入土</h1><h2 id="索引的XMIND图"><a href="#索引的XMIND图" class="headerlink" title="索引的XMIND图"></a>索引的XMIND图</h2><p>文件位置：<a href="./mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/Mysql%E7%B4%A2%E5%BC%95.xmind">点我打开</a></p><h2 id="索引的常见数据结构"><a href="#索引的常见数据结构" class="headerlink" title="索引的常见数据结构"></a>索引的常见数据结构</h2><p>哈希表</p><ul><li>哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。</li></ul><p>有序数组</p><ul><li><p>有序数组在等值查询和范围查询场景中的性能就都非常优秀。</p></li><li><p>有序数组索引只适用于静态存储引擎</p></li></ul><p>搜索树</p><ul><li><p>二叉搜索树：父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。</p></li><li><p>平衡二叉树：</p></li><li><p>N叉树：</p></li></ul><h2 id="InnoDB为什么选择B-树（对比其他树）"><a href="#InnoDB为什么选择B-树（对比其他树）" class="headerlink" title="InnoDB为什么选择B+树（对比其他树）"></a>InnoDB为什么选择B+树（对比其他树）</h2><h3 id="为什么选择树"><a href="#为什么选择树" class="headerlink" title="为什么选择树"></a>为什么选择树</h3><p>树的查询效率高，还可以保持有序。</p><h3 id="为什么不用二叉搜索树"><a href="#为什么不用二叉搜索树" class="headerlink" title="为什么不用二叉搜索树"></a>为什么不用二叉搜索树</h3><h4 id="什么是二叉搜索树（也叫二叉排序树或者二叉查找树）"><a href="#什么是二叉搜索树（也叫二叉排序树或者二叉查找树）" class="headerlink" title="什么是二叉搜索树（也叫二叉排序树或者二叉查找树）"></a>什么是二叉搜索树（也叫二叉排序树或者二叉查找树）</h4><p>以下是二叉查找树的结构：</p><img src="mysql的索引从入门到入土.assets/image-20221219173305682.png" alt="image-20221219173305682" style="zoom:50%;" /><p>它的<strong>特点</strong>是：</p><ul><li>父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。</li><li>只有两个叉</li><li>查询的时间复杂度是：O(log(N))</li><li>从算法逻辑来讲，二叉搜索树的查找速度和比较次数都是最小的。</li></ul><h4 id="为什么不用二叉搜索树（查找耗磁盘IO）"><a href="#为什么不用二叉搜索树（查找耗磁盘IO）" class="headerlink" title="为什么不用二叉搜索树（查找耗磁盘IO）"></a>为什么不用二叉搜索树（查找耗磁盘IO）</h4><p>因为考虑到磁盘IO的性能。</p><p>为什么这么说：InnoDB在查找的时候，是不能将所有的索引全部加载到内存中的，所以必然涉及到磁盘IO。</p><p>比如下面这个，二叉搜索树，我们想获取到10，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219173305682.png" alt="image-20221219173305682" style="zoom:50%;" /><p>答案是：4次</p><ul><li>第一次磁盘IO，读取9</li><li>第二次磁盘IO，读取13</li><li>第三次磁盘IO，读取11</li><li>第四次磁盘IO，读取10</li></ul><p>这样性能是很低的。</p><p>所以InnoDB并没有采用二叉搜索树来作为索引的数据结构。</p><p>但是InnoDB的设计者，又不能抛弃树这个数据结构带来的遍历，所以只能将 “瘦高” 的二叉搜索树，让它变得 “矮胖”。以便于节省磁盘IO。这就是<code>B树</code>的特征之一</p><h3 id="什么是B树"><a href="#什么是B树" class="headerlink" title="什么是B树"></a>什么是B树</h3><h4 id="什么是B树-1"><a href="#什么是B树-1" class="headerlink" title="什么是B树"></a>什么是B树</h4><p>B树 是一种<code>多路平衡查找树</code>，它的每一个节点最多包含<code>m</code>个孩子，<code>m</code>被称为<code>B树</code>的阶。</p><p>上面说了，InnoDB的设计者为了想保留树带来的便利，只能将： “瘦高” 的二叉搜索树，让它变得 “矮胖”。以便于节省磁盘IO。</p><p>下图就是一个 <code>3阶的B树</code> 示意图</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>一颗<code>m阶的B树</code>，它的特点是：</p><ul><li><code>m阶</code>表示每一个节点最多拥有<code>m</code>个孩子</li><li>根节点至少有 <code>2</code> 个子女</li><li>有<code>k</code>个孩子的节点包含有k-1个元素，其中： <code>ceil(m/2) &lt;= k &lt;= m</code>，（ceil表示向上取整）</li><li>每一个叶子节点都包含<code>k-1</code>个元素，其中：<code>ceil(m/2) &lt;= k &lt;= m</code>，（ceil表示向上取整）</li><li>所有的叶子节点都位于同一层</li><li>每个节点的元素从小到大排列，并且当该结点的孩子是非叶子结点时，节点中第<code>k-1</code>个元素正好是<code>k</code>个孩子包含的元素的值域分划。</li></ul><p>我们一一来看这些特点，其中</p><ul><li>一颗<code>3阶</code>的树，每个节点最多包含<code>3</code>个孩子，m &#x3D; 3</li><li><code>9</code>是根节点，有<code>2</code>个孩子<code>（2,6）</code>和 <code>12</code>。(根节点至少<code>2</code>个)</li><li><code>（2,6）</code>这个中间节点包含<code>2</code>个元素：<code>2</code>和<code>6</code>，有<code>3</code>个孩子。 <code>2 &lt;= k &lt;= 3</code></li><li><code>12 </code>这个中间节点包含<code>1</code>一个元素：<code>12</code>，有<code>2</code>个孩子。满足规则</li><li>叶子节点<code>1</code>,<code>(3,5)</code>,<code>8</code>,<code>11</code>,<code>(13,15)</code>位于同一层</li><li>每个节点的元素从小到大排列，<code>(3,5)</code>在<code>(2,6)</code>的值域之间。</li></ul><h4 id="B树的等值查找"><a href="#B树的等值查找" class="headerlink" title="B树的等值查找"></a>B树的等值查找</h4><p>在下面的一个3阶B树中，查找5，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>答案是：三次</p><ul><li>第一次磁盘IO：<code>9</code></li><li>第二次磁盘IO：<code>（2,6）</code></li><li>第三次磁盘IO：<code>（3,5）</code></li></ul><h4 id="B树的范围查找"><a href="#B树的范围查找" class="headerlink" title="B树的范围查找"></a>B树的范围查找</h4><p>在下面的一个3阶B树中，查找范围是 3-11 的元素，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>答案是：好多好多次</p><ul><li>3次磁盘IO后，找到范围下限：3 所在的（3,5）这个节点</li><li>中序遍历到 元素6</li><li>中序遍历到 元素8</li><li>中序遍历到 元素9</li><li>中序遍历到 元素11，遍历结束</li></ul><p>由此可见，B树的范围查找，很繁琐。</p><h4 id="B树的插入（自平衡）"><a href="#B树的插入（自平衡）" class="headerlink" title="B树的插入（自平衡）"></a>B树的插入（自平衡）</h4><p>插入比较复杂</p><p>以下面的为例子：在一个3阶的B树中，插入 4</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>由于 4 在 （3,5）之间。</p><img src="mysql的索引从入门到入土.assets/image-20221219185214252.png" alt="image-20221219185214252" style="zoom:50%;" /><ul><li>这是一颗<code>3阶</code>的B树，由于每个节点最多包含 <code>k-1</code> 个元素，其中  <code>2 &lt;= k &lt;= 3</code>，所以每个节点可以包含<code>1个</code>，<code>2个</code>元素；</li><li>要在<code>（3,5）</code>之间插入 <code>4</code>，<code>（3,5）</code>已经是<code>2</code>个元素了，不能在插入了。</li><li><code>（3,5）</code>的父节点<code>（2,6）</code>也是<code>2</code>个元素，也不能在插入了</li><li>根节点 <code>9</code> 是<code>1</code>个元素，可以在升级为2个元素。</li><li>于是：</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219190355215.png" alt="image-20221219190355215" style="zoom:50%;" /><p>总结：</p><ul><li>仅仅是插入一个元素，就让整个B树发生了连锁反应</li><li>虽然麻烦，但是也正因为如此，可以让B树始终保持多路平衡。（<strong>自平衡</strong>）</li></ul><h4 id="B树的删除（左旋）"><a href="#B树的删除（左旋）" class="headerlink" title="B树的删除（左旋）"></a>B树的删除（左旋）</h4><p>在如下的一个3阶B树中，删除元素11</p><img src="mysql的索引从入门到入土.assets/image-20221219190937755.png" alt="image-20221219190937755" style="zoom:50%;" /><ul><li>首先这是一颗3阶B树，由于B树的规则，每个中间节点都包含<code>k-1</code>个元素和<code>k</code>个孩子，其中 <code> 2&lt;= k &lt;= 3</code></li><li>所以：11删除之后，父节点12就只剩下1个孩子了，不符合规则，3阶的B树每个中间节点至少有2个孩子。</li><li>因为，需要找出删除11后，剩余的三个元素12,13,15的中位数，取代节点12；然后节点12下移成为孩子（<strong>左旋</strong>）</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219191850585.png" alt="image-20221219191850585" style="zoom:50%;" /><h4 id="B树的卫星数据"><a href="#B树的卫星数据" class="headerlink" title="B树的卫星数据"></a>B树的卫星数据</h4><p>所谓的卫星数据（Satellite Information），指的是索引元素所指向的数据记录；</p><p>在B树中，每一个节点都带有卫星数据。</p><img src="mysql的索引从入门到入土.assets/image-20221219221417559.png" alt="image-20221219221417559" style="zoom:50%;" /><h3 id="为什么选择B-树"><a href="#为什么选择B-树" class="headerlink" title="为什么选择B+树"></a>为什么选择B+树</h3><h4 id="什么是B-树"><a href="#什么是B-树" class="headerlink" title="什么是B+树"></a>什么是B+树</h4><p>B+树是基于B树的一种变体。有着比B树更高的查询性能</p><p>下面是一个3阶的B+树的示意图：节点之间含有重复元素，叶子节点还用指针连在一起</p><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>一颗m阶的B+树有以下特点：</p><ul><li>有k个子树的中间节点包含有k个元素（B树中是k-1个元素）</li><li>每个元素不保存数据，只用来索引，所有的数据保存在叶子节点</li><li>所有的叶子节点包含了全部元素的信息，而且每个叶子节点都带有指向下一个节点的指针，形成了一个有序链表</li><li>叶子节点本身依关键字大小自小而大顺序链接</li><li>每一个父节点的元素都出现在子节点中，而且是子节点中最大（或最小）的元素</li><li>无论插入多少元素，都要保持最大元素在根节点中</li></ul><h4 id="B-树的卫星数据"><a href="#B-树的卫星数据" class="headerlink" title="B+树的卫星数据"></a>B+树的卫星数据</h4><p>所谓的卫星数据（Satellite Information），指的是索引元素所指向的数据记录；</p><p>在B+树中，只有叶子节点带有卫星数据。</p><p>在mysql中，表中的一行记录就是一个卫星数据。</p><p>不过需要注意的是：</p><ul><li>在mysql中，主键索引的叶子结点存的是<code>卫星数据</code>（就是行记录）</li><li>在mysql中，非主键索引的叶子节点存的是<code>指向卫星数据的指针</code>（就是行记录的主键id）</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219221505548.png" alt="image-20221219221505548" style="zoom:50%;" /><h4 id="B-树的等值查找"><a href="#B-树的等值查找" class="headerlink" title="B+树的等值查找"></a>B+树的等值查找</h4><p>在下面这颗3阶的B+树上查找元素 3，会经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>结果：</p><ul><li>第一次磁盘IO：（8,15）</li><li>第二次磁盘IO：（2,5,8）</li><li>第三次磁盘IO：（3,5）</li></ul><p>由于B+树的中间节点并没有存放卫星数据，所以比B树更加“矮胖”，也即是说：在相同数据量的情况下，B+树会比B树访问到更少的磁盘IO。</p><p>由于 B+树 的中间节点没有存放卫星数据，所以要想拿到记录，必须访问到叶子节点。</p><p>而 B树 由于每个节点都存放了卫星数据，所以只要匹配到，就可以获取到记录。</p><p>对B树来说：最好的情况是只访问根节点就能拿到记录，最坏的情况就是访问到叶子结点。换言之：B树的查找性能不稳定</p><p>对B+树来说：由于每一次都要访问到叶子节点，所以B+树的查找性能是稳定的。</p><h4 id="B-树的范围查找"><a href="#B-树的范围查找" class="headerlink" title="B+树的范围查找"></a>B+树的范围查找</h4><p>在下面这颗3阶的B+树上，查找范围是 3-11 的元素，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>答案是：5次</p><ul><li>第一次磁盘IO：找到：（8,15）</li><li>第二次磁盘IO：找到：（2,5,8）</li><li>第三次磁盘IO：找到：（3,5），此时找到范围下限：3 所在的（3,5）这个节点</li><li>然后通过叶子结点上的指针，直接遍历叶子节点。（3,5），（6,8），（9,11）</li><li>直接确定到范围</li></ul><p>相比于B树范围查找的繁琐，B+树就简单的多了。</p><h3 id="B-树的B树的比较"><a href="#B-树的B树的比较" class="headerlink" title="B+树的B树的比较"></a>B+树的B树的比较</h3><p>B+树相比B树的优势有三个</p><ul><li>IO次数更少</li><li>查询性能稳定</li><li>范围查询简便</li></ul><p>至于插入和删除，两者大同小异。</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>了解下面列出来的索引概念：</p><ul><li>主键索引</li><li>普通索引</li><li>聚簇索引</li><li>非聚簇索引</li><li>二级索引</li><li>唯一索引</li><li>全文索引</li><li>联合索引</li><li>覆盖索引</li><li>前缀索引</li></ul><h3 id="主键索引和普通索引"><a href="#主键索引和普通索引" class="headerlink" title="主键索引和普通索引"></a>主键索引和普通索引</h3><p>主键索引：也叫聚簇索引，它 是一种特殊的唯一索引，<strong>不允许有空值</strong>。</p><p>普通索引：也叫二级索引，最基本的索引，没有任何限制</p><p>主键索引在InnoDB中是聚簇索引；普通索引在InnoDB中是非聚簇索引</p><h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><p>聚簇索引并不是单独的索引类型，而是一种数据存储方式，指的是：数据和对应的索引紧凑的存储在一起。</p><p>非聚簇索引指的就是：数据和索引分开存储。</p><p>举例来说：</p><p>对于InnoDB：主键索引的叶子节点存的是主键id和数据，它们是保存在一起的；非主键索引的叶子节点存的是主键id，和真实的数据是分开的。所以主键索引是聚簇索引，非主键索引是非聚簇索引。（InnoDB的索引和数据是放在同一个文件中的：数据即索引，索引即数据）</p><p>对于MyISAM：索引和记录本身就是分开存储的，是不同的文件。所以MyISAM中所有的索引都是非聚簇索引。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>唯一索引：与”普通索引”类似，不同的就是：索引列的值必须唯一，但<strong>允许有空值</strong>。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时耗空间。</p><h3 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h3><p>也叫组合索引，为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>当一个SQL查询语句所需要查询的字段，被所使用的的索引可以直接满足需求，不需要回表了，称之为覆盖索引</p><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>当需要索引的字段很长，而且该字段后半部分的选择性很低，比如邮箱地址；后面都是一样的。</p><p>对于这种我们就可以建立前缀索引：使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> SUser <span class="token keyword">add</span> <span class="token keyword">index</span> index2<span class="token punctuation">(</span>email<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前缀索引会导致覆盖索引失效，因为前缀索引是截取后的部分做的索引，不得不在回表查一次完整的信息。</p><h2 id="索引特点"><a href="#索引特点" class="headerlink" title="索引特点"></a>索引特点</h2><h3 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h3><p>假设有一个用户表，我们给 （name, age）加上联合索引。</p><p>如果我们要查询所有名字第一个字是“张”的人，SQL语句可能会这么写：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'张%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这种情况下，也是可以使用到这个索引的。这就是索引的最左匹配原则。</p><ul><li>最左匹配原则可以是联合索引的最左N的字段，也可以是一个字符串的最左M个字符；</li><li>在建立联合索引的时候，如何安排索引内的字段顺序，需要仔细考量了。</li></ul><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>mysql 5.6 引入了 索引下推优化。可以在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足的记录，减少回表次数。</p><p>假如有一个用户表，我们给（name，age）加上联合索引。</p><p>如果我们要查询所有名字第一个字是“张”的人，并且年龄大于10岁的男人。SQL语句可能会这么写</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'张%'</span> <span class="token operator">and</span> age <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">and</span> male<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于这个语句，我们知道由于最左匹配原则，使用到了（name，age）这个索引。</p><p>然后，接下来呢？</p><p>在mysql 5.6之前，接下来就需要回表了。对扫描的每一条记录，都回表判断 age 和 male 是否满足；</p><p>在mysql 5.6之后，由于有索引下推优化，对于age的判断可以直接完成，过滤掉age不符合的记录，然后对剩下的记录在此回表判断male是否满足。（减少了回表次数）</p><h3 id="索引潜水"><a href="#索引潜水" class="headerlink" title="索引潜水"></a>索引潜水</h3><p>英文单词：index dive</p><p>主要是用于 IN 查询语句的优化，</p><p>跟这个词语相关的，还有一个配置参数 <code>eq_range_index_dive_limit</code>。</p><p>MySQL5.7.3之前的版本，这个值默认是10，之后的版本，这个值默认是200。</p><p>简单的理解就是：IN 语句的数量如果少于200个，就使用<strong>索引潜水（Index dive）</strong>预估扫描行数，很精确，所以选择索引的时候就不容易出错；</p><p>如果 IN 语句的数量大于200个，就使用 <strong>索引统计（Index statistics）</strong>预估扫描行数，误差很大，所以会导致选择索引容易选错，导致性能下降</p><p>关于索引潜水，具体见：Mysql性能调优从入门到入土</p><h3 id="普通索引默认联合主键索引"><a href="#普通索引默认联合主键索引" class="headerlink" title="普通索引默认联合主键索引"></a>普通索引默认联合主键索引</h3><p>二级索引会默认与主键索引做联合索引。</p><p>为什么？</p><p>因为二级索引的叶子节点存放的就是主键。</p><h2 id="索引比较"><a href="#索引比较" class="headerlink" title="索引比较"></a>索引比较</h2><p>任何索引之间的比较，都从 增删改查 四个角度来具体分析，就不迷惑了。</p><h3 id="普通索引和主键索引有什么区别？"><a href="#普通索引和主键索引有什么区别？" class="headerlink" title="普通索引和主键索引有什么区别？"></a>普通索引和主键索引有什么区别？</h3><p>主键索引的查询，不需要回表了。</p><p>普通索引的查询，如果要查询的字段没有被当前索引覆盖，是需要回表的。</p><p>针对回表的优化：</p><ul><li>覆盖索引可以减少回表</li><li>索引下推可以减少回表</li></ul><h3 id="普通索引和唯一索引有什么区别？"><a href="#普通索引和唯一索引有什么区别？" class="headerlink" title="普通索引和唯一索引有什么区别？"></a>普通索引和唯一索引有什么区别？</h3><h4 id="对查询的影响"><a href="#对查询的影响" class="headerlink" title="对查询的影响"></a>对查询的影响</h4><ul><li>微乎其微。</li><li>普通索引的查询：定位到当前记录之后，还要继续判断下一条记录是否满足条件。</li><li>唯一索引的查询：定位到当前记录之后，由于是唯一的，不再需要判断下一条记录了。</li></ul><p>不过，后面看到加锁规则这部分的时候，有一个加锁规则是：唯一索引上的范围查询，会访问到不满足查询条件的第一个值为止。 </p><p>也就是说：</p><ul><li>对于范围查询，普通索引和唯一索引是一样的，都需要访问下一条记录。</li><li>对于等值查询，唯一索引比普通索引少了一次查找下一条记录的性能消耗。</li></ul><h4 id="对更新的影响"><a href="#对更新的影响" class="headerlink" title="对更新的影响"></a>对更新的影响</h4><ul><li><p>参考：《mysql的日志从入门到入土》这篇文章中讲到了changebuffer：</p><ul><li>changebuffer（对更新的优化，对比redolog）</li><li>changebuffer在 5.5 版本之前叫做：insert buffer，只支持插入操作；在5.5之后，支持了更新操作</li><li>changebuffer的作用：</li><li>更新的时候不需要从内存中加载数据页，而是直接将更新后的记录写到changebuffer中（内存中）就可以返回了</li><li>那么changebuffer中的数据什么时候刷盘呢？</li><li>因为写入changebuffer了，一定会写入redolog，后台会定时将redolog中的数据应用到数据页中，同时也会将changebuffer的数据应用到数据页，这是两个后台线程，他俩没有任何关系。操作的都是内存中的数据页，然后刷脏页</li><li>具体的可以参考：《mysql的日志从入门到入土》</li></ul></li><li><p>为什么唯一索引的更新就不能使用 change buffer，只有普通索引可以使用。</p><ul><li><p>因为唯一索引的更新，需要判断当前的这个更新会不会影响到唯一索引的唯一性。</p></li><li><p>所以必须判断要将数据页加载到内存中，进行判断才可以。</p></li></ul></li><li><p>change buffer适应于：写多读少的场景和写多读多的场景；</p></li><li><p>change buffer 和 redo log的联系和区别。</p><ul><li>change buffer减少了磁盘的随机读（减少了加载数据页的操作）</li><li>redo log减少的磁盘的随机写（WAL机制）</li></ul></li></ul><h3 id="前缀索引对覆盖索引的影响"><a href="#前缀索引对覆盖索引的影响" class="headerlink" title="前缀索引对覆盖索引的影响"></a>前缀索引对覆盖索引的影响</h3><p>我们知道覆盖索引可以减少回表，提升查询性能；</p><p>但是当我们的覆盖索引是前缀索引的时候，此时覆盖索引是不生效的。</p><p>因为前缀索引是截取后的信息作为索引，要想获取完整的字段，就不得不回表在查询一次。</p><h2 id="选错索引（索引统计，强制索引）"><a href="#选错索引（索引统计，强制索引）" class="headerlink" title="选错索引（索引统计，强制索引）"></a>选错索引（索引统计，强制索引）</h2><ul><li><p>由于索引统计的更新机制，索引统计信息不准确导致的。</p></li><li><p>解决：重新采集统计信息：analyze table</p></li><li><p>解决：手动指定索引；force index</p></li></ul><h3 id="优化器是怎么选择索引的"><a href="#优化器是怎么选择索引的" class="headerlink" title="优化器是怎么选择索引的"></a>优化器是怎么选择索引的</h3><p>选择索引是优化器的工作。</p><p>而优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。</p><p>在数据库里面，扫描行数是影响执行代价的因素之一。扫描的行数越少，意味着访问磁盘数据的次数越少，消耗的 CPU 资源越少。</p><p>但是扫描行数并不是唯一确定索引的因素。优化器还会结合是否使用临时表、是否排序等因素进行综合判断。</p><h3 id="怎么确定扫描行数呢？"><a href="#怎么确定扫描行数呢？" class="headerlink" title="怎么确定扫描行数呢？"></a><strong>怎么确定扫描行数呢？</strong></h3><p>在确定扫描行数之前，mysql 会先看看 索引基数。索引基数决定了要不要使用索引</p><ul><li>如果索引基数太小，就会弃用索引。</li><li>当索引基数比较大的时候，要不要走这个索引，还得看扫描行数，回表，子查询等等，最后优化器根据预估的成本决定是否走这个索引。</li></ul><h4 id="什么是索引基数呢"><a href="#什么是索引基数呢" class="headerlink" title="什么是索引基数呢"></a>什么是索引基数呢</h4><p>MySQL 在真正开始执行语句之前，并不能精确地知道满足这个条件的记录有多少条，而只能根据<strong>统计信息</strong>来估算记录数。</p><p>这个<strong>统计信息</strong>就是索引的“<strong>区分度</strong>”。</p><p>显然，一个索引上不同的值越多，这个索引的区分度就越好。</p><p>而一个索引上不同的值的个数，我们称之为<strong>“基数”（cardinality）</strong>。</p><p>也就是说，这个基数越大，索引的区分度越好。</p><p>我们可以使用 show index 方法，看到一个索引的基数。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><span class="token operator">|</span> <span class="token keyword">Table</span> <span class="token operator">|</span> Non_unique <span class="token operator">|</span> Key_name <span class="token operator">|</span> Seq_in_index <span class="token operator">|</span> Column_name <span class="token operator">|</span> Collation <span class="token operator">|</span> Cardinality <span class="token operator">|</span> Sub_part <span class="token operator">|</span> Packed <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> Index_type <span class="token operator">|</span> <span class="token keyword">Comment</span> <span class="token operator">|</span> Index_comment <span class="token operator">|</span> Visible <span class="token operator">|</span> Expression <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><span class="token operator">|</span> t     <span class="token operator">|</span>          <span class="token number">0</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>  <span class="token operator">|</span>            <span class="token number">1</span> <span class="token operator">|</span> id          <span class="token operator">|</span> A         <span class="token operator">|</span>           <span class="token number">6</span> <span class="token operator">|</span>     <span class="token boolean">NULL</span> <span class="token operator">|</span>   <span class="token boolean">NULL</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token keyword">BTREE</span>      <span class="token operator">|</span>         <span class="token operator">|</span>               <span class="token operator">|</span> YES     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> t     <span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span> c        <span class="token operator">|</span>            <span class="token number">1</span> <span class="token operator">|</span> c           <span class="token operator">|</span> A         <span class="token operator">|</span>           <span class="token number">6</span> <span class="token operator">|</span>     <span class="token boolean">NULL</span> <span class="token operator">|</span>   <span class="token boolean">NULL</span> <span class="token operator">|</span> YES  <span class="token operator">|</span> <span class="token keyword">BTREE</span>      <span class="token operator">|</span>         <span class="token operator">|</span>               <span class="token operator">|</span> YES     <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MySQL 是怎样得到索引的基数的呢？</strong></p><p>MySQL 使用采样统计的方法进行统计索引的基数。</p><p>为什么要采样统计呢？因为把整张表取出来一行行统计，虽然可以得到精确的结果，但是代价太高了，所以只能选择“采样统计”。</p><p>采样统计的时候，InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。</p><p>而数据表是会持续更新的，索引统计信息也不会固定不变。所以，当变更的数据行数超过 1&#x2F;M 的时候，会自动触发重新做一次索引统计。</p><p>举个例子：</p><p>取n&#x3D;3个数据页统计，假设共有10个索引数据页； page1：10个不同值； page2：20个不同值； page3：15 个不同值； 索引基数&#x3D;(10+20+15)&#x2F;3*10&#x3D;150；</p><p><strong>上文所说的 N  和 M 具体是多少呢？</strong></p><p>在 MySQL 中，有两种存储索引统计的方式，可以通过设置参数 innodb_stats_persistent 的值来选择：</p><ul><li>设置为 on 的时候，表示统计信息会持久化存储。这时，默认的 N 是 20，M 是 10。</li><li>设置为 off 的时候，表示统计信息只存储在内存中。这时，默认的 N 是 8，M 是 16。</li></ul><p>由于是采样统计，所以不管 N 是 20 还是 8，这个基数都是很容易不准的。</p><h4 id="怎么确定扫描行数呢？-1"><a href="#怎么确定扫描行数呢？-1" class="headerlink" title="怎么确定扫描行数呢？"></a>怎么确定扫描行数呢？</h4><p>知道了索引基数，优化器还要继续预估执行这个语句，具体需要扫描多少行</p><p>通过 explain 命令可以看到优化器预估的扫描行数，至于mysql是怎么预估扫描行数的，这里就不在展开了。</p><h3 id="怎么解决选错索引的问题"><a href="#怎么解决选错索引的问题" class="headerlink" title="怎么解决选错索引的问题"></a>怎么解决选错索引的问题</h3><p>如果你通过 explain 命令，看到是由于 预估行数 错误，导致了mysql选错了索引。</p><p>可以使用：analyze table t 命令，可以用来重新统计索引信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">analyze</span> <span class="token keyword">table</span> t<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+----------+----------+</span><span class="token operator">|</span> <span class="token keyword">Table</span> <span class="token operator">|</span> Op      <span class="token operator">|</span> Msg_type <span class="token operator">|</span> Msg_text <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+----------+----------+</span><span class="token operator">|</span> zs<span class="token punctuation">.</span>t  <span class="token operator">|</span> <span class="token keyword">analyze</span> <span class="token operator">|</span> <span class="token keyword">status</span>   <span class="token operator">|</span> OK       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+----------+----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，我们知道索引的选择，并不是仅仅靠 扫描行数 这一个影响因素来决定的</p><p>如果在实际的生产环境中，我们发现使用 索引a 就是比 索引b 有更好的性能</p><p>我们可以使用 force index 强制这个sql语句使用索引a，而不是索引b</p><h2 id="索引排序（order-by）"><a href="#索引排序（order-by）" class="headerlink" title="索引排序（order by）"></a>索引排序（order by）</h2><p>在日常的开发过程中，经常会使用<code>order by</code>语句，那么排序的原理是什么呢？</p><p>排序分为两种情况</p><ul><li>排序的字段有索引</li><li>排序的字段没有索引</li></ul><h3 id="有索引的排序"><a href="#有索引的排序" class="headerlink" title="有索引的排序"></a>有索引的排序</h3><p>我们知道索引是有序的，所以有索引的排序会直接使用索引；</p><p>直接使用索引排序的话，<code>explain</code>结果中是不会有 Using filesort 的</p><p>结果中有 Using filesort ，表示的就是需要排序，而且没有用到索引</p><h3 id="没有索引的排序"><a href="#没有索引的排序" class="headerlink" title="没有索引的排序"></a>没有索引的排序</h3><p>没有索引的排序，相对来说复杂一下。</p><p>一个语句是否使用了排序，可以通过：<code>explain</code>命令查看，结果中有 Using filesort ，表示的就是需要排序。</p><p>MySQL 会给每个线程分配一块<code>内存</code>用于排序，称为<code> sort_buffer</code>。</p><h4 id="sort-buffer是什么"><a href="#sort-buffer是什么" class="headerlink" title="sort_buffer是什么"></a>sort_buffer是什么</h4><p>MySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer；</p><p>sort_buffer既然是内存区域，就不可能无限的扩大，是可以通过参数<code>sort_buffer_size</code>控制的</p><h4 id="sort-buffer有多大（内部排序和外部排序）"><a href="#sort-buffer有多大（内部排序和外部排序）" class="headerlink" title="sort buffer有多大（内部排序和外部排序）"></a>sort buffer有多大（内部排序和外部排序）</h4><p>通过参数<code>sort_buffer_size</code>控制的，默认是：262144（公司是：8388608）</p><p>sort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。</p><p>如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。 这叫做：<code>内部排序</code></p><p>但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。这叫做：<code>外部排序</code></p><p>内存放不下时，就需要使用外部排序，外部排序一般使用归并排序算法。</p><p>可以这么简单理解，MySQL 将需要排序的数据分成 N 份，每一份单独排序后存在这些临时文件中。然后把这 N 个有序文件再合并成一个有序的大文件。</p><p>内部排序：使用快速排序</p><p>外部排序：使用归并排序</p><h4 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h4><p>示例数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>addr<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 初始化10条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们执行下面的查询语句的时候</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> city<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">where</span> city<span class="token operator">=</span><span class="token string">'杭州'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">1000</span>  <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的排序执行流程如下：</p><ul><li>初始化 sort_buffer，确定放入 name、city、age 这三个字段；</li><li>从索引 city 找到第一个满足 city&#x3D;’杭州’条件的主键 id；</li><li>到主键 id 索引取出整行，取 name、city、age 三个字段的值，存入 sort_buffer 中</li><li>从索引 city 取下一个记录的主键 id；</li><li>重复步骤 3、4 直到 city 的值不满足查询条件为止；</li><li>对 sort_buffer 中的数据按照字段 name 做快速排序；</li><li>按照排序结果取前 1000 行返回给客户端。</li></ul><p>在上面这个过程里面，只对原表的数据读了一遍，剩下的操作都是在 sort_buffer 和临时文件中执行的。</p><p>但这个算法有一个问题，就是如果查询要返回的字段很多的话，那么 sort_buffer 里面要放的字段数太多，这样内存里能够同时放下的行数很少，要分成很多个临时文件，排序的性能会很差。</p><p>那么，如果 MySQL 认为排序的单行长度太大会怎么做呢？</p><h4 id="rowId排序"><a href="#rowId排序" class="headerlink" title="rowId排序"></a>rowId排序</h4><p>如果 MySQL 认为排序的单行长度太大会怎么做呢？</p><p><code>max_length_for_sort_data</code>：是 MySQL 中专门控制用于排序的行数据的长度的一个参数。</p><p>它的意思是，如果单行的长度超过这个值，MySQL 就认为单行太大，要换一个算法。</p><p>示例数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>addr<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 初始化10条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们执行下面的查询语句的时候</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> city<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">where</span> city<span class="token operator">=</span><span class="token string">'杭州'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">1000</span>  <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>city、name、age 这三个字段的定义总长度是 36，我把 max_length_for_sort_data 设置为 16，我们再来看看计算过程有什么改变。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> max_length_for_sort_data <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新的算法放入 sort_buffer 的字段，只有要排序的列（即 name 字段）和主键 id。</p><p>但这时，排序的结果就因为少了 city 和 age 字段的值，不能直接返回了，整个执行流程就变成如下所示的样子：</p><ul><li>初始化 sort_buffer，确定放入两个字段，即 name 和 id；</li><li>从索引 city 找到第一个满足 city&#x3D;’杭州’条件的主键 id；</li><li>到主键 id 索引取出整行，取 name、id 这两个字段，存入 sort_buffer 中；</li><li>从索引 city 取下一个记录的主键 id；</li><li>重复步骤 3、4 直到不满足 city&#x3D;’杭州’条件为止；</li><li>对 sort_buffer 中的数据按照字段 name 进行排序；</li><li>遍历排序结果，取前 1000 行，并按照 id 的值回到原表中取出 city、name 和 age 三个字段返回给客户端。</li></ul><h4 id="全字段排序-VS-rowid-排序"><a href="#全字段排序-VS-rowid-排序" class="headerlink" title="全字段排序 VS rowid 排序"></a>全字段排序 VS rowid 排序</h4><ul><li>MySQL 如果觉得排序内存太小，会影响排序效率，会采用 rowid 排序算法，这样排序过程中一次可以排序更多行，但是需要回表</li><li>MySQL 认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，可以减少回表</li></ul><h2 id="索引为什么不生效"><a href="#索引为什么不生效" class="headerlink" title="索引为什么不生效"></a>索引为什么不生效</h2><p>以下三种情况，都会影响索引的使用</p><ul><li>条件字段使用函数</li><li>隐式类型转换</li><li>隐式字符编码转换</li></ul><h3 id="条件字段函数操作会影响索引"><a href="#条件字段函数操作会影响索引" class="headerlink" title="条件字段函数操作会影响索引"></a>条件字段函数操作会影响索引</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询创建时间是7月份的记录，created_time有索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> <span class="token keyword">month</span><span class="token punctuation">(</span>created_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于加了 month() 函数操作，created_time索引树里面，并不认识7，所以MySQL 无法再使用索引快速定位功能，而<strong>只能使用全索引扫描</strong>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> id <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然这个加 1 操作并不会改变主键索引的有序性，但是 MySQL 优化器还是不能用 id 索引快速定位到 id&#x3D;4 这一行。</p><p>所以，需要你在写 SQL 语句的时候，手动改写成 where id &#x3D; 5 -1 才可以。</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>这个坑，今天刚踩过，表里对于单号 order_no 有索引，order_no 字段是varchar类型，但是我的语句是这么写的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> order_no<span class="token operator">=</span><span class="token number">110717</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>explain 的结果显示：这条语句需要走全表扫描</p><p>因为：order_no 字段是varchar类型，而我的查询条件里用到的是整型。所以mysql会默认用到类型转换，<strong>导致索引失效</strong></p><p><strong>字符串和数字做比较的话，是将字符串转换成数字</strong>；所以，上面那个语句等同于</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> CAST<span class="token punctuation">(</span>order_no signed <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">110717</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这也就明白了，为什么不会走索引了。</p><p>然后考虑下面这个语句，会走主键索引吗</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'11'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>答案是：会走索引，因为：字符串和数字做比较的话，是将字符串转换成数字，所以没有对条件字段使用函数。索引不会失效</p><h3 id="隐式字符编码转换"><a href="#隐式字符编码转换" class="headerlink" title="隐式字符编码转换"></a>隐式字符编码转换</h3><p>如果关联的两张表，使用的字符集不同的话，比如一个使用utf8，一个使用utf8mb4； 所以做表连接查询的时候用不上关联字段的索引。</p><p>为什么字符集不一样，不能用索引呢？</p><p>因为字符集 utf8mb4 是 utf8 的超集，所以当这两个类型的字符串在做比较的时候，MySQL 内部的操作是，先把 utf8 字符串转成 utf8mb4 字符集，再做比较。</p><p>（自动类型转换的时候，为了避免数据在转换过程中由于截断导致数据错误，也都是“<strong>按数据长度增加的方向</strong>”进行转换的。）</p><h2 id="InnoB的索引模型（B-树）"><a href="#InnoB的索引模型（B-树）" class="headerlink" title="InnoB的索引模型（B+树）"></a>InnoB的索引模型（B+树）</h2><h3 id="复习B-树"><a href="#复习B-树" class="headerlink" title="复习B+树"></a>复习B+树</h3><p>每一个索引在 InnoDB 里面对应一棵 B+ 树。在复习一下B+树</p><p>下面是一个3阶的B+树的示意图：</p><ul><li>节点之间含有重复元素</li><li>叶子节点还用指针连在一起</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>接下来：</p><ul><li>我们考虑各个索引在InnoDB中具体的B+树结构是什么样子的</li><li>这些索引是怎么维护的（插入数据，删除数据，更新数据对索引的影响，页分裂，页合并）</li><li>这些索引是怎么使用的（等值查询，范围查询）</li></ul><h3 id="案例数据"><a href="#案例数据" class="headerlink" title="案例数据"></a>案例数据</h3><p>准备一张表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>name_age<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表里有一个主键 id</li><li>表里有一个普通索引 city</li><li>表里有一个联合索引 name_age</li><li>接下来，我们看看，不停的向表里写入数据，会发生什么</li></ul><p><strong>重要声明</strong>：</p><ul><li>我们知道mysql的数据是按照 数据页 来进行存储的，对于索引来说，同样也是 数据页 存储的。</li><li>一个数据页是 16KB，所以一个数据库能存放的元素是有限的。</li><li>在测试的时候：我们假设<ul><li><code>id</code>是 int 类型，占<code>4</code>个字节</li><li><code>name</code>是 varchar 类型，因为是不定长的，假设 name 不论写入什么，都占<code>8</code>个字节</li><li><code>age</code>是 int 类型，占<code>4</code>个字节</li><li><code>city</code>是 varchar 类型，因为是不定长的，假设 city 不论写入什么，都占<code>8</code>个字节</li><li><code>address</code>是 varchar 类型，因为是不定长的，假设 address 不论写入什么，都占<code>8</code>个字节</li></ul></li><li>正常情况下，一个数据页是16KB，我们这里假设，一个数据页只有：<code>36字节</code><ul><li>意味着：一个数据页最多能存9个id索引元素(4x9&#x3D;36)；最多能存4个city索引元素(8x4&#x3D;32)，最多能存3个 name_age 联合索引元素(12x3&#x3D;36);</li></ul></li></ul><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>我们上边介绍的<code>B+</code>树本身就是一个目录，或者说本身就是一个索引。它有两个特点：</p><ol><li><p>使用记录主键值的大小进行记录和数据页的排序，这包括三个方面的含义：</p><ul><li>数据页中的记录是按照主键的大小顺序排成一个单向链表。</li><li>各个 存放用户记录的数据页 也是 根据 数据页中用户记录的主键大小 顺序排成一个双向链表。</li><li>存放 目录项记录的数据页 分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li></ul></li><li><p><code>B+</code>树的叶子节点存储的是完整的用户记录。</p><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</p></li></ol><p>我们把具有这两种特性的<code>B+</code>树称为<code>聚簇索引</code>，所有完整的用户记录都存放在这个<code>聚簇索引</code>的叶子节点处。这种<code>聚簇索引</code>并不需要我们在<code>MySQL</code>语句中显式的使用<code>INDEX</code>语句去创建（后边会介绍索引相关的语句），<code>InnoDB</code>存储引擎会自动的为我们创建聚簇索引。另外有趣的一点是，在<code>InnoDB</code>存储引擎中，<code>聚簇索引</code>就是数据的存储方式（所有的用户记录都存储在了<code>叶子节点</code>），也就是所谓的索引即数据，数据即索引。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h3 id="联合索引-1"><a href="#联合索引-1" class="headerlink" title="联合索引"></a>联合索引</h3><p><code>B+</code>树按照<code>name</code>和<code>age</code>列的大小进行排序，这个包含两层含义：</p><ul><li>先把各个记录和页按照<code>name</code>列进行排序。</li><li>在记录的<code>name</code>列相同的情况下，采用<code>age</code>列进行排序</li></ul><h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>索引维护（更新，页分裂，页合并）</p><p>为什么我们一般在建表的时候都会创建一个自增主键，及时表中有业务唯一的id，也会创建一个自增主键？</p><p>1、因为主键只会自增，在B+树中一直都是往后写的，不会触发页分裂；但是如果删除过多的话，会触发页合并；</p><p>2、要考虑业务唯一的id的长度，比如身份证号，如果用身份证号作为主键，比直接使用整型自增的主键占用的字节数要多，这样每一个页存放的数据就会少，每个页存的数据少了，这样查询的时候，效率就会低。 同时主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</p><p>3、所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</p><p>索引的页分裂和页合并是怎么导致的，会有什么影响？具体的分裂和合并的过程是什么样子的？</p><p>为什么mysql的b+树，在非叶子节点中，也保留了双向列表</p><p><a href="https://www.zhihu.com/question/478187330/answer/2050494617">https://www.zhihu.com/question/478187330/answer/2050494617</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的索引从入门到入土&quot;&gt;&lt;a href=&quot;#mysql的索引从入门到入土&quot; class=&quot;headerlink&quot; title=&quot;mysql的索引从入门到入土&quot;&gt;&lt;/a&gt;mysql的索引从入门到入土&lt;/h1&gt;&lt;h2 id=&quot;索引的XMIND图&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="索引" scheme="https://zspcer.gitee.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql的性能调优从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-03-15T04:24:10.513Z</published>
    <updated>2023-03-15T04:24:10.513Z</updated>
    
    <content type="html"><![CDATA[<hr><p>资料：打开</p><p>mysql的索引优化，联合索引使用的时候，时间+站点+code， 通过时间筛选之后，数据还比较多，此时效率很低。可以把所以改成：站点+时间+code，这样通过站点筛选之后的数据，就剩下很少了，此时效率很高。</p><p>事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能</p><p>减少大事务，可以减少主备延迟，可以降低锁的时间，减少死锁的产生，减少死锁检测的性能消耗。</p><p>减少并发量（减少对于同一行更新的并发量），可以减少死锁的产生，可以减少死锁检测的性能消耗</p><p>在删除数据的时候尽量加 limit。这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</p><p>在出现IO瓶颈的时候，可以将sync_binglog设置为100-1000内的值，表示累计多少个事务之后才会刷盘，默认是1表示每一个事务都会刷盘写binlog；</p><p>在出现IO瓶颈的时候，可以设置binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count，表示提升binlog的组提交的效果，但是会增加sql的响应时间</p><p>写多读少的场景，由于 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑普通索引。</p><p>mysql要调优，就要知道它为什么慢，哪里慢</p><p>在低版本：show profiles</p><p>在高版本：performance schema</p><p>以上有什么用？</p><ul><li>比如在实际环境中，有一个sql，非常慢</li><li>sql本身没有问题，看执行计划也比较慢，这个时候就可以用到上面的</li><li>可以更加详细的看到，这个sql到底是哪里慢</li></ul><p>process list 可以查看mysql的连接数量，顺丰云上的回话连接是不是？</p><p>不过一般有druid，不用太关注这个。但是呢，druid是什么，要去看看github上面的官网了。了解一下它的优点</p><p>MRR优化，将主键ID回表的随机读，改成主键ID的顺序读，但是默认是关闭的，优化器不倾向于使用MRR，不知道为啥；MRR 能够提升性能的核心在于，这条查询语句在索引 a 上做的是一个范围查询（也就是说，这是一个多值查询），可以得到足够多的主键 id。这样通过排序以后，再去主键索引查数据，才能体现出“顺序性”的优势。</p><p>字符集和字符编码的区别</p><p>大表拆分，将不常用的数据从表里拆出去，表小了之后，每个数据页存的数据就会多，查询的时候，就会减少磁盘IO</p><p>优化：</p><ul><li>不同的数据选择对应的mysql自建数据类型，比如数字就用数字类型，不要用字符串，时间就用时间类型，不要用字符串；用错了数据类型，对业务可能没影响，但是对mysql来说，内部多了一层转换，sql执行会比较慢</li><li>事件类型，建议用date，而不是timestamp，date类型</li></ul><p>大事务不仅会影响到主库，也是造成备库复制延迟的主要原因之一。因此，在平时的开发工作中，我建议你尽量减少大事务操作，把大事务拆成小事务。</p><p>show processlist</p><ul><li><p>看到的只是当前的并发连接数，如果你的系统动不动就成千上百个连接，其实都没关系，只是占用一些内存而已</p></li><li><p>&#96;&#96;&#96;sql<br>mysql&gt; show processlist;<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>| Id | User            | Host            | db   | Command | Time   | State                  | Info             |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>|  5 | event_scheduler | localhost       | NULL | Daemon  | 865562 | Waiting on empty queue | NULL             |<br>| 23 | root            | localhost:60179 | NULL | Query   |      0 | init                   | show processlist |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>2 rows in set (0.00 sec)</p><pre class="line-numbers language-none"><code class="language-none">- 真正需要关注的是并发执行数，也就是并发执行的线程，因为连接存在，这个连接不一定在执行。- innodb的并发执行数，通过&#96;innodb_thread_concurrency&#96;这个参数来控制的，默认是0表示不限制。- &#96;innodb_thread_concurrency&#96;的计算规则是：正在执行的线程+1，如果一个线程在执行过程中，遇到了锁，需要等待，线程-1---# IN 查询优化这个名字还真不是我起的，今天要讲的知识点就叫**索引潜水（Index dive）**。先要从一件怪事说起：我先造点数据复现一下问题，创建一张用户表：&#96;&#96;&#96;sqlCREATE TABLE &#96;user&#96; (  &#96;id&#96; bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键ID&#39;,  &#96;name&#96; varchar(100) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;姓名&#39;,  &#96;age&#96; int(11) NOT NULL DEFAULT 0 COMMENT &#39;年龄&#39;,  PRIMARY KEY (&#96;id&#96;),  KEY &#96;idx_age&#96; (&#96;age&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>通过一批用户年龄，查询该年龄的用户信息，并查看一下SQL执行计划：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="mysql的性能调优从入门到入土.assets/image-20230209164837331.png" alt="image-20230209164837331" style="zoom:60%;" /><p>where条件中有9个参数，重点关注一下执行计划中的预估扫描行数为279行。</p><p>到这里没什么问题，预估的非常准，实际就是279行。</p><img src="mysql的性能调优从入门到入土.assets/image-20230209164853902.png" alt="image-20230209164853902" /><p>但是，问题来了，当我们在where条件中，再加一个参数，变成了10个参数，预估扫描行数本应该增加，结果却大大减少了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="mysql的性能调优从入门到入土.assets/image-20230209164903103.png" alt="image-20230209164903103" /><p>一下子减少到了30行，可是实际行数是多少呢？</p><img src="mysql的性能调优从入门到入土.assets/image-20230209164911034.png" alt="image-20230209164911034" /><p>实际是310行，预估扫描行数是30行，真是错到姥姥家了。</p><p><strong>MySQL咋回事啊，到底还能不能预估？</strong></p><p><strong>不能预估的话，换其他人！</strong></p><p>大家肯定也是满脸疑惑，直到我去官网上看到了一个词语，<strong>索引潜水（Index dive）</strong>。</p><p>跟这个词语相关的，还有一个配置参数 <strong>eq_range_index_dive_limit</strong>。</p><p><strong>MySQL5.7.3</strong>之前的版本，这个值默认是10，之后的版本，这个值默认是200。</p><p>可以使用命令查看一下这个值的大小：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%eq_range_index_dive_limit%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="mysql的性能调优从入门到入土.assets/image-20230209164922082.png" alt="image-20230209164922082" /><p>当然，我们也可以手动修改这个值的大小：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> eq_range_index_dive_limit<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 <strong>eq_range_index_dive_limit</strong> 配置的作用就是：</p><p>当where语句in条件中参数个数小于这个值的时候，MySQL就采用<strong>索引潜水（Index dive）</strong>的方式预估扫描行数，非常准确。</p><p>当where语句in条件中参数个数大于等于这个值的时候，MySQL就采用另一种方式<strong>索引统计（Index statistics）</strong>预估扫描行数，误差较大。</p><p><strong>MySQL为什么要这么做呢？</strong></p><p>都用<strong>索引潜水（Index dive）</strong>的方式预估扫描行数，不好吗？</p><p>其实这是基于成本的考虑，<strong>索引潜水</strong>估算成本较高，适合小数据量。<strong>索引统计</strong>估算成本较低，适合大数据量。</p><p>一般情况下，我们的where语句的in条件的参数不会太多，适合使用<strong>索引潜水</strong>预估扫描行数。</p><p>建议还在使用<strong>MySQL5.7.3</strong>之前版本的同学们，手动修改一下<strong>索引潜水</strong>的配置参数，改成合适的数值。</p><p>如果你们项目中in条件最多有500个参数，就把配置参数改成501。</p><p>这样MySQL预估扫描行数更准确，可以选择更合适的索引。</p><hr><h2 id="performance-schema详解"><a href="#performance-schema详解" class="headerlink" title="performance schema详解"></a>performance schema详解</h2><h3 id="performance-schema的介绍"><a href="#performance-schema的介绍" class="headerlink" title="performance_schema的介绍"></a>performance_schema的介绍</h3><p>MySQL的performance schema 用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源等待等情况。</p><p>特点如下：</p><ul><li><p>提供了一种在数据库运行时实时检查server的内部执行情况的方法</p><ul><li><p>performance_schema 数据库中的表使用PERFORMANCE_SCHEMA存储引擎。</p></li><li><p>performance_schema 数据库主要关注数据库运行过程中的性能相关的数据</p></li><li><p>information_schema 数据库主要关注server运行过程中的元数据信息</p></li></ul></li><li><p>performance_schema 通过监视server的事件来实现监视server内部运行情况，</p><ul><li><p>“事件”：就是server内部活动中所做的任何事情以及对应的时间消耗（比如函数调用、操作系统的等待、SQL语句执行的阶段）</p></li><li><p>performance_schema中的事件与binlog中的记录的事件不同</p><ul><li>binlog中的事件是：描述数据修改的events</li><li>performance_schema中的事件是：计划调度程序（这是一种存储程序）的事件</li></ul></li><li><p>performance_schema中的事件记录的是：server执行某些活动对某些资源的消耗、耗时、这些活动执行的次数等情况。</p></li><li><p>performance_schema中的事件只记录在本地server的performance_schema中，不会被写入binlog中，也不会被复制到其他server中。</p></li><li><p>performance_schema的表中的数据不会持久化存储在磁盘中，而是保存在内存中，一旦服务器重启，这些数据会丢失</p></li></ul></li></ul><h3 id="performance-schema入门"><a href="#performance-schema入门" class="headerlink" title="performance schema入门"></a>performance schema入门</h3><p>在mysql的5.7版本中，性能模式是默认开启的，如果想要显式的关闭的话需要修改配置文件，不能直接进行修改，会报错Variable ‘performance_schema’ is a read only variable。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看performance_schema的属性</span>mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'performance_schema'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> Variable_name      <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token comment">-- 在配置文件中修改performance_schema的属性值，on表示开启，off表示关闭</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>performance_schema<span class="token operator">=</span><span class="token keyword">ON</span><span class="token comment">-- 切换数据库</span><span class="token keyword">use</span> performance_schema<span class="token punctuation">;</span><span class="token comment">-- 查看当前数据库下的所有表,会看到有很多表存储着相关的信息</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">-- 可以通过show create table tablename来查看创建表的时候的表结构</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> setup_consumers<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> <span class="token keyword">Table</span>           <span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Table</span>                    <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> setup_consumers <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>setup_consumers<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                        <span class="token identifier"><span class="token punctuation">`</span>ENABLED<span class="token punctuation">`</span></span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'YES'</span><span class="token punctuation">,</span><span class="token string">'NO'</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>               <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>PERFORMANCE_SCHEMA <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>想要搞明白后续的内容，同学们需要理解两个基本概念：</p><ul><li>instruments: 生产者，用于采集mysql中各种各样的操作产生的事件信息，对应配置表中的配置项我们可以称为监控采集配置项。</li><li>consumers: 消费者，对应的消费者表用于存储来自instruments采集的数据，对应配置表中的配置项我们可以称为消费存储配置项。</li></ul><h3 id="performance-schema表的分类"><a href="#performance-schema表的分类" class="headerlink" title="performance_schema表的分类"></a>performance_schema表的分类</h3><p>performance_schema库下的表可以按照监视纬度的不同进行分组。</p><h4 id="语句事件记录表"><a href="#语句事件记录表" class="headerlink" title="语句事件记录表"></a>语句事件记录表</h4><p>语句事件记录表，这些表记录了语句事件信息，当前语句事件表events_statements_current、历史语句事件表events_statements_history和长语句历史事件表events_statements_history_long、以及聚合后的摘要表summary，其中，summary表还可以根据帐号(account)，主机(host)，程序(program)，线程(thread)，用户(user)和全局(global)再进行细分)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%statement%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="等待事件记录表"><a href="#等待事件记录表" class="headerlink" title="等待事件记录表"></a>等待事件记录表</h4><p>等待事件记录表，与语句事件类型的相关记录表类似：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="阶段事件记录表"><a href="#阶段事件记录表" class="headerlink" title="阶段事件记录表"></a>阶段事件记录表</h4><p>阶段事件记录表，记录语句执行的阶段事件的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%stage%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="事务事件记录表"><a href="#事务事件记录表" class="headerlink" title="事务事件记录表"></a>事务事件记录表</h4><p>事务事件记录表，记录事务相关的事件的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%transaction%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="监控文件系统层调用的表"><a href="#监控文件系统层调用的表" class="headerlink" title="监控文件系统层调用的表"></a>监控文件系统层调用的表</h4><p>监控文件系统层调用的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%file%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="监视内存使用的表"><a href="#监视内存使用的表" class="headerlink" title="监视内存使用的表"></a>监视内存使用的表</h4><p>监视内存使用的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%memory%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置表"><a href="#配置表" class="headerlink" title="配置表"></a>配置表</h4><p>动态对performance_schema进行配置的配置表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%setup%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="performance-schema的简单配置与使用"><a href="#performance-schema的简单配置与使用" class="headerlink" title="performance_schema的简单配置与使用"></a>performance_schema的简单配置与使用</h3><p>数据库刚刚初始化并启动时，并非所有instruments(事件采集项，在采集项的配置表中每一项都有一个开关字段，或为YES，或为NO)和consumers(与采集项类似，也有一个对应的事件类型保存表配置项，为YES就表示对应的表保存性能数据，为NO就表示对应的表不保存性能数据)都启用了，所以默认不会收集所有的事件，可能你需要检测的事件并没有打开，需要进行设置，可以使用如下两个语句打开对应的instruments和consumers（行计数可能会因MySQL版本而异)。</p><h4 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 打开等待事件的采集器配置项开关，需要修改setup_instruments配置表中对应的采集器配置项</span><span class="token keyword">UPDATE</span> setup_instruments <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token punctuation">,</span> TIMED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'wait%'</span><span class="token punctuation">;</span><span class="token comment">-- 打开等待事件的保存表配置开关，修改setup_consumers配置表中对应的配置项</span><span class="token keyword">UPDATE</span> setup_consumers <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看当前server正在做什么"><a href="#查看当前server正在做什么" class="headerlink" title="查看当前server正在做什么"></a>查看当前server正在做什么</h4><p>当配置完成之后可以查看当前server正在做什么，可以通过查询events_waits_current表来得知，该表中每个线程只包含一行数据，用于显示每个线程的最新监视事件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> events_waits_current\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>            THREAD_ID: <span class="token number">11</span>             EVENT_ID: <span class="token number">570</span>         END_EVENT_ID: <span class="token number">570</span>           EVENT_NAME: wait<span class="token operator">/</span>synch<span class="token operator">/</span>mutex<span class="token operator">/</span><span class="token keyword">innodb</span><span class="token operator">/</span>buf_dblwr_mutex               SOURCE:           TIMER_START: <span class="token number">4508505105239280</span>            TIMER_END: <span class="token number">4508505105270160</span>           TIMER_WAIT: <span class="token number">30880</span>                SPINS: <span class="token boolean">NULL</span>        OBJECT_SCHEMA: <span class="token boolean">NULL</span>          OBJECT_NAME: <span class="token boolean">NULL</span>           INDEX_NAME: <span class="token boolean">NULL</span>          OBJECT_TYPE: <span class="token boolean">NULL</span>OBJECT_INSTANCE_BEGIN: <span class="token number">67918392</span>     NESTING_EVENT_ID: <span class="token boolean">NULL</span>   NESTING_EVENT_TYPE: <span class="token boolean">NULL</span>            OPERATION: <span class="token keyword">lock</span>      NUMBER_OF_BYTES: <span class="token boolean">NULL</span>                FLAGS: <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该信息表示线程id为11的线程正在等待buf_dblwr_mutex锁，等待事件为30880<br>属性说明：</p><ul><li>id:事件来自哪个线程，事件编号是多少</li><li>event_name:表示检测到的具体的内容</li><li>source:表示这个检测代码在哪个源文件中以及行号</li><li>timer_start:表示该事件的开始时间</li><li>timer_end:表示该事件的结束时间</li><li>timer_wait:表示该事件总的花费时间</li></ul><p>注意：_current表中每个线程只保留一条记录，一旦线程完成工作，该表中不会再记录该线程的事件信息</p><h4 id="查看每个线程已经执行完成的事件信息"><a href="#查看每个线程已经执行完成的事件信息" class="headerlink" title="查看每个线程已经执行完成的事件信息"></a>查看每个线程已经执行完成的事件信息</h4><p>_history表中记录每个线程应该执行完成的事件信息，但每个线程的事件信息只会记录10条，再多就会被覆盖，*_history_long表中记录所有线程的事件信息，但总记录数量是10000，超过就会被覆盖掉</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> thread_id<span class="token punctuation">,</span>event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>timer_wait <span class="token keyword">from</span> events_waits_history <span class="token keyword">order</span> <span class="token keyword">by</span> thread_id <span class="token keyword">limit</span> <span class="token number">21</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看事件的汇总信息"><a href="#查看事件的汇总信息" class="headerlink" title="查看事件的汇总信息"></a>查看事件的汇总信息</h4><p>summary表提供所有事件的汇总信息，该组中的表以不同的方式汇总事件数据（如：按用户，按主机，按线程等等）。例如：要查看哪些instruments占用最多的时间，可以通过对events_waits_summary_global_by_event_name表的COUNT_STAR或SUM_TIMER_WAIT列进行查询（这两列是对事件的记录数执行COUNT（*）、事件记录的TIMER_WAIT列执行SUM（TIMER_WAIT）统计而来）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看被检测的对象"><a href="#查看被检测的对象" class="headerlink" title="查看被检测的对象"></a>查看被检测的对象</h4><p>instance表记录了哪些类型的对象会被检测。这些对象在被server使用时，在该表中将会产生一条事件记录，例如，file_instances表列出了文件I&#x2F;O操作及其关联文件名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> file_instances <span class="token keyword">limit</span> <span class="token number">20</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用配置项的参数说明"><a href="#常用配置项的参数说明" class="headerlink" title="常用配置项的参数说明"></a>常用配置项的参数说明</h3><h4 id="启动选项"><a href="#启动选项" class="headerlink" title="启动选项"></a>启动选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>performance_schema_consumer_events_statements_current&#x3D;TRUE</td><td>是否在mysql server启动时就开启events_statements_current表的记录功能(该表记录当前的语句事件信息)，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新setup_consumers配置表中的events_statements_current配置项，默认值为TRUE</td></tr><tr><td>performance_schema_consumer_events_statements_history&#x3D;TRUE</td><td>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件短历史信息，默认为TRUE</td></tr><tr><td>performance_schema_consumer_events_stages_history_long&#x3D;FALSE</td><td>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件长历史信息，默认为FALSE</td></tr><tr><td>*</td><td>除了statement(语句)事件之外，还支持：wait(等待)事件、state(阶段)事件、transaction(事务)事件，他们与statement事件一样都有三个启动项分别进行配置，但这些等待事件默认未启用，如果需要在MySQL Server启动时一同启动，则通常需要写进my.cnf配置文件中</td></tr><tr><td>performance_schema_consumer_global_instrumentation&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启全局表（如：mutex_instances、rwlock_instances、cond_instances、file_instances、users、hostsaccounts、socket_summary_by_event_name、file_summary_by_instance等大部分的全局对象计数统计和事件汇总统计信息表 ）的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新全局配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_consumer_statements_digest&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启events_statements_summary_by_digest 表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新digest配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_consumer_thread_instrumentation&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启events_xxx_summary_by_yyy_by_event_name表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新线程配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_instrument[&#x3D;name]</td><td>是否在MySQL Server启动时就启用某些采集器，由于instruments配置项多达数千个，所以该配置项支持key-value模式，还支持%号进行通配等</td></tr></tbody></table><p>注意，这些启动选项要生效的前提是，需要设置performance_schema&#x3D;ON。另外，这些启动选项虽然无法使用show variables语句查看，但我们可以通过setup_instruments和setup_consumers表查询这些选项指定的值。</p><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%performance_schema%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重要的属性解释</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>performance_schema&#x3D;ON</td><td>控制performance_schema功能的开关，要使用MySQL的performance_schema，需要在mysqld启动时启用，以启用事件收集功能<br/>该参数在5.7.x之前支持performance_schema的版本中默认关闭，5.7.x版本开始默认开启<br/>注意：如果mysqld在初始化performance_schema时发现无法分配任何相关的内部缓冲区，则performance_schema将自动禁用，并将performance_schema设置为OFF</td></tr><tr><td>performance_schema_digests_size&#x3D;10000</td><td>控制events_statements_summary_by_digest表中的最大行数。如果产生的语句摘要信息超过此最大值，便无法继续存入该表，此时performance_schema会增加状态变量</td></tr><tr><td>performance_schema_events_statements_history_long_size&#x3D;10000</td><td>控制events_statements_history_long表中的最大行数，该参数控制所有会话在events_statements_history_long表中能够存放的总事件记录数，超过这个限制之后，最早的记录将被覆盖</td></tr><tr><td>performance_schema_events_statements_history_size&#x3D;10</td><td>控制events_statements_history表中单个线程（会话）的最大行数，该参数控制单个会话在events_statements_history表中能够存放的事件记录数，超过这个限制之后，单个会话最早的记录将被覆盖</td></tr><tr><td>performance_schema_max_digest_length&#x3D;1024</td><td>用于控制标准化形式的SQL语句文本在存入performance_schema时的限制长度，该变量与max_digest_length变量相关(max_digest_length变量含义请自行查阅相关资料)<br/>全局变量，只读变量，默认值1024字节，整型值，取值范围0~1048576</td></tr><tr><td>performance_schema_max_sql_text_length&#x3D;1024</td><td>控制存入events_statements_current，events_statements_history和events_statements_history_long语句事件表中的SQL_TEXT列的最大SQL长度字节数。 超出系统变量performance_schema_max_sql_text_length的部分将被丢弃，不会记录，一般情况下不需要调整该参数，除非被截断的部分与其他SQL比起来有很大差异<br/>全局变量，只读变量，整型值，默认值为1024字节，取值范围为0~1048576，5.7.6版本引入<br/>降低系统变量performance_schema_max_sql_text_length值可以减少内存使用，但如果汇总的SQL中，被截断部分有较大差异，会导致没有办法再对这些有较大差异的SQL进行区分。 增加该系统变量值会增加内存使用，但对于汇总SQL来讲可以更精准地区分不同的部分。</td></tr></tbody></table><h3 id="重要配置表的相关说明"><a href="#重要配置表的相关说明" class="headerlink" title="重要配置表的相关说明"></a>重要配置表的相关说明</h3><p>配置表之间存在相互关联关系</p><h4 id="performance-timers表"><a href="#performance-timers表" class="headerlink" title="performance_timers表"></a>performance_timers表</h4><p>performance_timers表中记录了server中有哪些可用的事件计时器</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> performance_timers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>timer_name</td><td>表示可用计时器名称，CYCLE是基于CPU周期计数器的定时器</td></tr><tr><td>timer_frequency</td><td>表示每秒钟对应的计时器单位的数量,CYCLE计时器的换算值与CPU的频率相关</td></tr><tr><td>timer_resolution</td><td>计时器精度值，表示在每个计时器被调用时额外增加的值</td></tr><tr><td>timer_overhead</td><td>表示在使用定时器获取事件时开销的最小周期值</td></tr></tbody></table><h4 id="setup-timers表"><a href="#setup-timers表" class="headerlink" title="setup_timers表"></a>setup_timers表</h4><p>setup_timers表中记录当前使用的事件计时器信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_timers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>计时器类型，对应某个事件类别</td></tr><tr><td>timer_name</td><td>计时器类型名称</td></tr></tbody></table><h4 id="setup-consumers表"><a href="#setup-consumers表" class="headerlink" title="setup_consumers表"></a>setup_consumers表</h4><p>setup_consumers表中列出了consumers可配置列表项</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_consumers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>NAME</td><td>consumers配置名称</td></tr><tr><td>ENABLED</td><td>consumers是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。</td></tr></tbody></table><h4 id="setup-instruments-表"><a href="#setup-instruments-表" class="headerlink" title="setup_instruments 表"></a>setup_instruments 表</h4><p>setup_instruments 表列出了instruments 列表配置项，即代表了哪些事件支持被收集：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_instruments<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>NAME</td><td>instruments名称，instruments名称可能具有多个部分并形成层次结构</td></tr><tr><td>ENABLED</td><td>instrumetns是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。如果设置为NO，则这个instruments不会被执行，不会产生任何的事件信息</td></tr><tr><td>TIMED</td><td>instruments是否收集时间信息，有效值为YES或NO，此列可以使用UPDATE语句修改，如果设置为NO，则这个instruments不会收集时间信息</td></tr></tbody></table><h4 id="setup-actors表"><a href="#setup-actors表" class="headerlink" title="setup_actors表"></a>setup_actors表</h4><p>setup_actors表的初始内容是匹配任何用户和主机，因此对于所有前台线程，默认情况下启用监视和历史事件收集功能</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_actors<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>HOST</td><td>与grant语句类似的主机名，一个具体的字符串名字，或使用“％”表示“任何主机”</td></tr><tr><td>USER</td><td>一个具体的字符串名称，或使用“％”表示“任何用户”</td></tr><tr><td>ROLE</td><td>当前未使用，MySQL 8.0中才启用角色功能</td></tr><tr><td>ENABLED</td><td>是否启用与HOST，USER，ROLE匹配的前台线程的监控功能，有效值为：YES或NO</td></tr><tr><td>HISTORY</td><td>是否启用与HOST， USER，ROLE匹配的前台线程的历史事件记录功能，有效值为：YES或NO</td></tr></tbody></table><h4 id="setup-objects表"><a href="#setup-objects表" class="headerlink" title="setup_objects表"></a>setup_objects表</h4><p>setup_objects表控制performance_schema是否监视特定对象。默认情况下，此表的最大行数为100行。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_objects<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>OBJECT_TYPE</td><td>instruments类型，有效值为：“EVENT”（事件调度器事件）、“FUNCTION”（存储函数）、“PROCEDURE”（存储过程）、“TABLE”（基表）、“TRIGGER”（触发器），TABLE对象类型的配置会影响表I&#x2F;O事件（wait&#x2F;io&#x2F;table&#x2F;sql&#x2F;handler instrument）和表锁事件（wait&#x2F;lock&#x2F;table&#x2F;sql&#x2F;handler instrument）的收集</td></tr><tr><td>OBJECT_SCHEMA</td><td>某个监视类型对象涵盖的数据库名称，一个字符串名称，或“％”(表示“任何数据库”)</td></tr><tr><td>OBJECT_NAME</td><td>某个监视类型对象涵盖的表名，一个字符串名称，或“％”(表示“任何数据库内的对象”)</td></tr><tr><td>ENABLED</td><td>是否开启对某个类型对象的监视功能，有效值为：YES或NO。此列可以修改</td></tr><tr><td>TIMED</td><td></td></tr></tbody></table><h4 id="threads表"><a href="#threads表" class="headerlink" title="threads表"></a>threads表</h4><p>threads表对于每个server线程生成一行包含线程相关的信息，</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> threads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>THREAD_ID</td><td>线程的唯一标识符（ID）</td></tr><tr><td>NAME</td><td>与server中的线程检测代码相关联的名称(注意，这里不是instruments名称)</td></tr><tr><td>TYPE</td><td>线程类型，有效值为：FOREGROUND、BACKGROUND。分别表示前台线程和后台线程</td></tr><tr><td>PROCESSLIST_ID</td><td>对应INFORMATION_SCHEMA.PROCESSLIST表中的ID列</td></tr><tr><td>PROCESSLIST_USER</td><td>与前台线程相关联的用户名，对于后台线程为NULL</td></tr><tr><td>PROCESSLIST_HOST</td><td>与前台线程关联的客户端的主机名，对于后台线程为NULL</td></tr><tr><td>PROCESSLIST_DB</td><td>线程的默认数据库，如果没有，则为NULL</td></tr><tr><td>PROCESSLIST_COMMAND</td><td>对于前台线程，该值代表着当前客户端正在执行的command类型，如果是sleep则表示当前会话处于空闲状态</td></tr><tr><td>PROCESSLIST_TIME</td><td>当前线程已处于当前线程状态的持续时间（秒）</td></tr><tr><td>PROCESSLIST_STATE</td><td>表示线程正在做什么事情</td></tr><tr><td>PROCESSLIST_INFO</td><td>线程正在执行的语句，如果没有执行任何语句，则为NULL</td></tr><tr><td>PARENT_THREAD_ID</td><td>如果这个线程是一个子线程（由另一个线程生成），那么该字段显示其父线程ID</td></tr><tr><td>ROLE</td><td>暂未使用</td></tr><tr><td>INSTRUMENTED</td><td>线程执行的事件是否被检测。有效值：YES、NO</td></tr><tr><td>HISTORY</td><td>是否记录线程的历史事件。有效值：YES、NO</td></tr><tr><td>THREAD_OS_ID</td><td>由操作系统层定义的线程或任务标识符（ID）</td></tr></tbody></table><p>注意：在performance_schema库中还包含了很多其他的库和表，能对数据库的性能做完整的监控，大家需要参考官网详细了解。</p><h3 id="performance-schema实践操作"><a href="#performance-schema实践操作" class="headerlink" title="performance_schema实践操作"></a>performance_schema实践操作</h3><p>基本了解了表的相关信息之后，可以通过这些表进行实际的查询操作来进行实际的分析。</p><h4 id="哪类的SQL执行最多？"><a href="#哪类的SQL执行最多？" class="headerlink" title="哪类的SQL执行最多？"></a>哪类的SQL执行最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>FIRST_SEEN<span class="token punctuation">,</span>LAST_SEEN <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL的平均响应时间最多？"><a href="#哪类SQL的平均响应时间最多？" class="headerlink" title="哪类SQL的平均响应时间最多？"></a>哪类SQL的平均响应时间最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL排序记录数最多？"><a href="#哪类SQL排序记录数最多？" class="headerlink" title="哪类SQL排序记录数最多？"></a>哪类SQL排序记录数最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_SORT_ROWS <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL扫描记录数最多？"><a href="#哪类SQL扫描记录数最多？" class="headerlink" title="哪类SQL扫描记录数最多？"></a>哪类SQL扫描记录数最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_EXAMINED <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL使用临时表最多？"><a href="#哪类SQL使用临时表最多？" class="headerlink" title="哪类SQL使用临时表最多？"></a>哪类SQL使用临时表最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_CREATED_TMP_TABLES<span class="token punctuation">,</span>SUM_CREATED_TMP_DISK_TABLES <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL返回结果集最多？"><a href="#哪类SQL返回结果集最多？" class="headerlink" title="哪类SQL返回结果集最多？"></a>哪类SQL返回结果集最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_SENT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪个表物理IO最多？"><a href="#哪个表物理IO最多？" class="headerlink" title="哪个表物理IO最多？"></a>哪个表物理IO最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> file_name<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_READ<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">FROM</span> file_summary_by_instance <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_NUMBER_OF_BYTES_READ <span class="token operator">+</span> SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪个表逻辑IO最多？"><a href="#哪个表逻辑IO最多？" class="headerlink" title="哪个表逻辑IO最多？"></a>哪个表逻辑IO最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> object_name<span class="token punctuation">,</span>COUNT_READ<span class="token punctuation">,</span>COUNT_WRITE<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>SUM_TIMER_WAIT <span class="token keyword">FROM</span> table_io_waits_summary_by_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sum_timer_wait <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个索引访问最多？"><a href="#哪个索引访问最多？" class="headerlink" title="哪个索引访问最多？"></a>哪个索引访问最多？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>COUNT_INSERT<span class="token punctuation">,</span>COUNT_UPDATE<span class="token punctuation">,</span>COUNT_DELETE <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个索引从来没有用过？"><a href="#哪个索引从来没有用过？" class="headerlink" title="哪个索引从来没有用过？"></a>哪个索引从来没有用过？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">WHERE</span> INDEX_NAME <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> COUNT_STAR <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> OBJECT_SCHEMA <span class="token operator">&lt;></span> <span class="token string">'mysql'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个等待事件消耗时间最多？"><a href="#哪个等待事件消耗时间最多？" class="headerlink" title="哪个等待事件消耗时间最多？"></a>哪个等待事件消耗时间最多？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>SUM_TIMER_WAIT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name <span class="token keyword">WHERE</span> event_name <span class="token operator">!=</span> <span class="token string">'idle'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息"><a href="#剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息" class="headerlink" title="剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息"></a>剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_ID<span class="token punctuation">,</span>sql_text <span class="token keyword">FROM</span> events_statements_history <span class="token keyword">WHERE</span> sql_text <span class="token operator">LIKE</span> <span class="token string">'%count(*)%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看每个阶段的时间消耗"><a href="#查看每个阶段的时间消耗" class="headerlink" title="查看每个阶段的时间消耗"></a>查看每个阶段的时间消耗</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>EVENT_NAME<span class="token punctuation">,</span>SOURCE<span class="token punctuation">,</span>TIMER_END <span class="token operator">-</span> TIMER_START <span class="token keyword">FROM</span> events_stages_history_long <span class="token keyword">WHERE</span> NESTING_EVENT_ID <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看每个阶段的锁等待情况"><a href="#查看每个阶段的锁等待情况" class="headerlink" title="查看每个阶段的锁等待情况"></a>查看每个阶段的锁等待情况</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>source<span class="token punctuation">,</span>timer_wait<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>nesting_event_id <span class="token keyword">FROM</span> events_waits_history_long <span class="token keyword">WHERE</span> nesting_event_id <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="看懂mysql执行计划"><a href="#看懂mysql执行计划" class="headerlink" title="看懂mysql执行计划"></a>看懂mysql执行计划</h2><p>​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。</p><p>​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。</p><p>​   官网地址： <a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html">https://dev.mysql.com/doc/refman/5.5/en/explain-output.html</a> </p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*Navicat MySQL Data TransferSource Server         : mybatisSource Server Version : 50722Source Host           : localhost:3306Source Database       : dempTarget Server Type    : MYSQLTarget Server Version : 50722File Encoding         : 65001Date: 2020-02-11 20:05:02*/</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for dept</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DNAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>LOC<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of dept</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'ACCOUNTING'</span><span class="token punctuation">,</span> <span class="token string">'NEW YORK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'RESEARCH'</span><span class="token punctuation">,</span> <span class="token string">'DALLAS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'SALES'</span><span class="token punctuation">,</span> <span class="token string">'CHICAGO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'40'</span><span class="token punctuation">,</span> <span class="token string">'OPERATIONS'</span><span class="token punctuation">,</span> <span class="token string">'BOSTON'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for emp</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>ENAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>JOB<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>MGR<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>HIREDATE<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>SAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>COMM<span class="token punctuation">`</span></span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of emp</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7369'</span><span class="token punctuation">,</span> <span class="token string">'SMITH'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7902'</span><span class="token punctuation">,</span> <span class="token string">'1980-12-17'</span><span class="token punctuation">,</span> <span class="token string">'800.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7499'</span><span class="token punctuation">,</span> <span class="token string">'ALLEN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-20'</span><span class="token punctuation">,</span> <span class="token string">'1600.00'</span><span class="token punctuation">,</span> <span class="token string">'300.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7521'</span><span class="token punctuation">,</span> <span class="token string">'WARD'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-22'</span><span class="token punctuation">,</span> <span class="token string">'1250.00'</span><span class="token punctuation">,</span> <span class="token string">'500.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7566'</span><span class="token punctuation">,</span> <span class="token string">'JONES'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-02'</span><span class="token punctuation">,</span> <span class="token string">'2975.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7654'</span><span class="token punctuation">,</span> <span class="token string">'MARTIN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-28'</span><span class="token punctuation">,</span> <span class="token string">'1250.00'</span><span class="token punctuation">,</span> <span class="token string">'1400.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'BLAKE'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2850.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7782'</span><span class="token punctuation">,</span> <span class="token string">'CLARK'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-06'</span><span class="token punctuation">,</span> <span class="token string">'2450.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'KING'</span><span class="token punctuation">,</span> <span class="token string">'PRESIDENT'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'1981-11-17'</span><span class="token punctuation">,</span> <span class="token string">'5000.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7844'</span><span class="token punctuation">,</span> <span class="token string">'TURNER'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-08'</span><span class="token punctuation">,</span> <span class="token string">'1500.00'</span><span class="token punctuation">,</span> <span class="token string">'0.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7900'</span><span class="token punctuation">,</span> <span class="token string">'JAMES'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-12-03'</span><span class="token punctuation">,</span> <span class="token string">'950.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7902'</span><span class="token punctuation">,</span> <span class="token string">'FORD'</span><span class="token punctuation">,</span> <span class="token string">'ANALYST'</span><span class="token punctuation">,</span> <span class="token string">'7566'</span><span class="token punctuation">,</span> <span class="token string">'1981-12-03'</span><span class="token punctuation">,</span> <span class="token string">'3000.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7934'</span><span class="token punctuation">,</span> <span class="token string">'MILLER'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7782'</span><span class="token punctuation">,</span> <span class="token string">'1982-01-23'</span><span class="token punctuation">,</span> <span class="token string">'1300.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for salgrade</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>GRADE<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>LOSAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>HISAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>GRADE<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of salgrade</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'700'</span><span class="token punctuation">,</span> <span class="token string">'1200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'1201'</span><span class="token punctuation">,</span> <span class="token string">'1400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'1401'</span><span class="token punctuation">,</span> <span class="token string">'2000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'2001'</span><span class="token punctuation">,</span> <span class="token string">'3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'3001'</span><span class="token punctuation">,</span> <span class="token string">'9999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行计划中包含的信息"><a href="#执行计划中包含的信息" class="headerlink" title="执行计划中包含的信息"></a>执行计划中包含的信息</h3><table><thead><tr><th align="center">列</th><th>含义</th></tr></thead><tbody><tr><td align="center">id</td><td>select查询的序列号</td></tr><tr><td align="center">select_type</td><td>查询的类型，是普通查询还是联合查询还是子查询</td></tr><tr><td align="center">table</td><td>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</td></tr><tr><td align="center">partitions</td><td>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</td></tr><tr><td align="center">type</td><td>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描</td></tr><tr><td align="center">possible_keys</td><td>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</td></tr><tr><td align="center">key</td><td>实际使用的索引，如果为null，则没有使用索引</td></tr><tr><td align="center">key_len</td><td>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好</td></tr><tr><td align="center">ref</td><td>显示索引的哪一列被使用了，如果可能的话，是一个常数</td></tr><tr><td align="center">rows</td><td>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数</td></tr><tr><td align="center">filtered</td><td>某个表经过搜索条件过滤后剩余记录条数的百分比，rows 乘以 filtered 的结果表示要与下表连接的行数</td></tr><tr><td align="center">extra</td><td>额外的信息</td></tr></tbody></table><h4 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h4><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><ul><li>如果id相同，那么执行顺序从上到下</li><li>如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>同时存在id相同和不同的：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</li></ul><h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><strong>select_type</strong></h4><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><ul><li><code>sample</code>：简单的查询，不包含子查询和union</li><li><code>primary</code>：查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</li><li><code>union</code>：若第二个select出现在union之后，则被标记为union</li><li><code>dependent union</code> ： 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</li><li><code>union result</code>：从union表获取结果的select</li><li><code>subquery</code>：在select或者where列表中包含子查询</li><li><code>dependent subquery</code>：subquery的子查询要受到外部表查询的影响</li><li><code>derived</code>：from子句中出现的子查询</li><li><code>uncacheable subquery</code>：表示使用子查询的结果不能被缓存</li><li><code>uncacheable union</code>：表示union的查询结果不能被缓存：sql语句未验证</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- sample:简单的查询，不包含子查询和union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">-- union:若第二个select出现在union之后，则被标记为union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">-- dependent union : 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>empno  <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment">-- union result:从union表获取结果的select</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">-- subquery:在select或者where列表中包含子查询</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">-- dependent subquery:subquery的子查询要受到外部表查询的影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- DERIVED: from子句中出现的子查询，也叫做派生类，</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">-- UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span>@<span class="token variable">@sort_buffer_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h4><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</p><ul><li>如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</li><li>表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</li><li>当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</li></ul><h4 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a><strong>partitions</strong></h4><p>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h4><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p><ul><li><code>system</code>：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</li><li><code>const</code>：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候是这种情况</li><li><code>eq_ref</code>：使用唯一性索引进行数据查找</li><li><code>ref</code>：使用了非唯一性索引进行数据的查找</li><li><code>fulltext</code></li><li><code>ref_or_null</code>：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</li><li><code>index_merge</code>：在查询过程中需要多个索引组合使用</li><li><code>unique_subquery</code>：该连接类型类似与index_subquery,使用的是唯一索引</li><li><code>index_subquery</code>：利用索引来关联子查询，不再扫描全表</li><li><code>range</code>：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描</li><li><code>index</code>：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，或者是使用了索引进行排序，这样就避免数据的重排序</li><li><code>all</code>：全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</li></ul><p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, &lt;>, >, >=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">between</span> <span class="token number">7000</span> <span class="token operator">and</span> <span class="token number">7500</span><span class="token punctuation">;</span><span class="token comment">-- index_subquery：利用索引来关联子查询，不再扫描全表</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> t_job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span><span class="token comment">-- ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> mgr <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> mgr<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment">-- ref：使用了非唯一性索引进行数据的查找</span> <span class="token keyword">create</span> <span class="token keyword">index</span> idx_3 <span class="token keyword">on</span> emp<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e<span class="token punctuation">,</span>dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span>d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">-- eq_ref ：使用唯一性索引进行数据查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>emp2 <span class="token keyword">where</span> emp<span class="token punctuation">.</span>empno <span class="token operator">=</span> emp2<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token comment">-- const：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候会有这个type</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span> <span class="token comment">-- system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a><strong>possible_keys</strong></h4><p>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h4><p>实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h4><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h4><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a><strong>rows</strong></h4><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a><strong>filtered</strong></h4><p>某个表经过搜索条件<code>过滤后剩余记录条数</code>的百分比，这个<code>过滤后剩余记录条数</code>，是需要用来对下一张表进行连接的行数。什么意思呢？</p><ul><li>对于单表查询来说，这个filtered列的值没什么意义。</li><li>对于多表联合查询，假设表1扫描的rows是10000行，filteres是20%，那么表示要与表2进行连接的行数是：10000 x 20% &#x3D; 2000条记录。</li></ul><h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a><strong>extra</strong></h4><p>包含额外的信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- using filesort :说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span><span class="token comment">-- using temporary:需要使用临时表来保存中间结果，查询完成之后把临时表删除</span><span class="token keyword">explain</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> ename<span class="token punctuation">;</span><span class="token comment">-- using index: 这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- using where:使用where进行条件过滤</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- using join buffer :使用连接缓存，情况没有模拟出来</span><span class="token comment">-- impossible where：where语句的结果总是false</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7469</span><span class="token punctuation">;</span><span class="token comment">-- using MRR：使用了Multi-Range Read 优化 (MRR)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;资料：打开&lt;/p&gt;
&lt;p&gt;mysql的索引优化，联合索引使用的时候，时间+站点+code， 通过时间筛选之后，数据还比较多，此时效率很低。可以把所以改成：站点+时间+code，这样通过站点筛选之后的数据，就剩下很少了，此时效率很高。&lt;/p&gt;
&lt;p&gt;事务中，行锁是在</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="性能调优" scheme="https://zspcer.gitee.io/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
    <category term="调优" scheme="https://zspcer.gitee.io/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>mysql的临时表从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-03-15T04:24:10.512Z</published>
    <updated>2023-03-15T04:24:10.512Z</updated>
    
    <content type="html"><![CDATA[<p>mysql临时表的xmind，<a href="">点击下载</a></p><p>#### 临时表相关 </p><ul><li>17 | 如何正确地显示随机消息？ </li><li>34 | 到底可不可以使用join？ </li><li>35 | join语句怎么优化？ </li><li>36 | 为什么临时表可以重名？</li><li>37 | 什么时候会使用内部临时表？</li><li>43 | 要不要使用分区表？</li></ul><hr><p>本文的内容，是mysql中关于sql优化，比较重要的一部分内容，涉及到：</p><ul><li>mysql的排序：就是我们日常sql语句中经常写的 order by</li></ul><p>还涉及到：</p><ul><li>临时文件，为什么会涉及临时文件，因为：排序的时候会有内部排序和外部排序</li><li>排序的记录比较多的时候，就会用到外部排序，外部排序就会用到临时文件，使用归并排序算法</li></ul><p>还涉及到：</p><ul><li>JOIN 语句的优化：就是我们日常开发中 a left join b 等等</li><li>临时表，因为涉及到JOIN的优化</li></ul><p>这些都是很日常的开发工作中，就会用到的部分，所以这篇文章要好好掌握以下，对实战的能力提升很大</p><h2 id="mysql的排序"><a href="#mysql的排序" class="headerlink" title="mysql的排序"></a>mysql的排序</h2><p>这部分在 Mysql的索引从入门到入土 已经介绍过了，这里我再总结一下</p><img src="mysql的临时表从入门到入土.assets/image-20230307144252828.png" alt="image-20230307144252828" style="zoom:80%;" /><p>在日常的开发过程中，经常会使用<code>order by</code>语句，那么排序的原理是什么呢？</p><p>排序分为两种情况</p><ul><li>排序的字段有索引</li><li>排序的字段没有索引</li></ul><p>有索引的排序，会直接使用索引，因为索引是有序的，所以没啥可说的。性能很高</p><p>主要讨论没有索引的排序：没有索引的排序，相对来说复杂一下。</p><p>一个语句是否使用了排序，可以通过：<code>explain</code>命令查看，结果中有 Using filesort ，说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</p><p>MySQL 会给每个线程分配一块<code>内存</code>用于排序，称为<code> sort_buffer</code>。</p><p>sort_buffer既然是内存区域，就不可能无限的扩大，是可以通过参数<code>sort_buffer_size</code>控制的</p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><p>如果要排序的数据量小于 <code>sort_buffer_size</code>，排序就在内存中完成。 </p><p>这叫做：<code>内部排序</code>，有两种算法：快排和优先队列排序(也叫堆排序)</p><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3><p>如果要排序的数据量 大于 <code>sort_buffer_size</code>，内存放不下，则不得不利用磁盘临时文件辅助排序。</p><p>这叫做：<code>外部排序</code>，算法是归并排序</p><h3 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h3><p>是指将 <strong>排序的字段和要返回的字段</strong>，全部放入内存，这样排序完之后，就不需要回表了。性能比较高</p><p>比如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>city<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果内存放得下，就将：name，city，age 全都放入内存，在内存中使用 name 排好序，直接返回。避免了回表</p><h3 id="rowId排序"><a href="#rowId排序" class="headerlink" title="rowId排序"></a>rowId排序</h3><p>如果 MySQL 认为排序的单行长度太大（通过参数：max_length_for_sort_data），就不能将 <strong>排序的字段和要返回的字段</strong> 都放在内存中了</p><p>只能将 <strong>排序的字段和要返回的字段所在记录的id</strong> 放在内存中进行排序</p><p>排序完之后，在通过：<strong>要返回的字段所在记录的id</strong> 进行回表，取出：<strong>要返回的字段</strong></p><p>比如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>prov<span class="token punctuation">,</span>city<span class="token punctuation">,</span>address<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要返回的字段：name,prov,city,address,age 太大了，内存放不下，就会将 id 和 name 放在内存中，然后通过name排序</p><p>排序完成之后，在通过 id 回表查找 name,prov,city,address,age 返回给客户端</p><h3 id="全字段排序-VS-rowid-排序"><a href="#全字段排序-VS-rowid-排序" class="headerlink" title="全字段排序 VS rowid 排序"></a>全字段排序 VS rowid 排序</h3><ul><li>MySQL 如果觉得排序内存太小，会影响排序效率，会采用 rowid 排序算法，这样排序过程中一次可以排序更多行，但是需要回表</li><li>MySQL 认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，可以减少回表</li></ul><h3 id="排序算法的选择"><a href="#排序算法的选择" class="headerlink" title="排序算法的选择"></a>排序算法的选择</h3><p>判断排序的单行字段大小</p><ul><li>如果 单行长度大小 &lt; max_length_for_sort_data ：全字段排序</li><li>如果 单行长度大小 &gt; max_length_for_sort_data ：rowid排序</li></ul><p>不管是全字段排序，还是rowid排序都受限制于：sort_buffer 的大小</p><ul><li>如果：要排序的总数据量 &lt; sort_buffer_size ： 内部排序，使用快速排序算法</li><li>如果 ：要排序的总数据量 &gt; sort_buffer_size：<ul><li>继续判断结果量级，结果量级大，比如：order by xx limit 10000：外部排序，使用归并排序算法</li><li>结果量级小，比如：order by xx limit 3：内部排序，使用 优化队列算法（堆排序）</li></ul></li></ul><p>表的存储引擎</p><ul><li>要排序的表是InnoDB的： 优先选择：全字段排序，rowid 排序会要求回表多造成磁盘读，因此不会被优先选择</li><li>要排序的是内存的(比如memory)： 优先选择：rowid排序，因为是内存表，不涉及磁盘读，使用rowid可以一次性排更多的数据</li></ul><p>上面我们说过，当排序的记录数比较多，sort_buffer 内存放不下，会使用临时文件辅助排序</p><p>接下老我们就看看：Mysql 中的临时文件</p><h2 id="Mysql的临时文件"><a href="#Mysql的临时文件" class="headerlink" title="Mysql的临时文件"></a>Mysql的临时文件</h2><p>临时文件和临时表是不一样的东西！</p><p>临时文件，一般是在排序过程中，内存放不下，会将数据存在磁盘中，这时，存在磁盘中的文件就是临时文件。排序完成之后，就删除了。</p><p>关于临时文件，这里不过多的解释。</p><p>我们来看看临时表吧</p><h2 id="Mysql的临时表"><a href="#Mysql的临时表" class="headerlink" title="Mysql的临时表"></a>Mysql的临时表</h2><h3 id="什么是临时表"><a href="#什么是临时表" class="headerlink" title="什么是临时表"></a>什么是临时表</h3><p>有的人可能会认为，临时表就是内存表。</p><p>但是，这两个概念可是完全不同的。</p><p>内存表，指的是使用 Memory 引擎的表，建表语法是 create table … engine&#x3D;memory。这种表的数据都保存在内存里，系统重启的时候会被清空，但是表结构还在。除了这两个特性看上去比较“奇怪”外，从其他的特征上看，它就是一个正常的表。</p><p>临时表，可以使用各种引擎类型 。如果是使用 InnoDB 引擎或者 MyISAM 引擎的临时表，写数据的时候是写到磁盘上的。当然，临时表也可以使用 Memory 引擎。</p><h3 id="临时表的特性"><a href="#临时表的特性" class="headerlink" title="临时表的特性"></a>临时表的特性</h3><p>通过一个实例，来了解临时表的特性</p><table><thead><tr><th>session A</th><th>session B</th></tr></thead><tbody><tr><td>create temporary table t (c int) engine&#x3D;myisam;</td><td></td></tr><tr><td></td><td>show create table t;<br/><font color='red'>(Table ‘t’ doesn’t exist)</font></td></tr><tr><td>create table t (id int primary key) engine&#x3D;innodb;</td><td></td></tr><tr><td>show create table t;<br/><font color='green'>&#x2F;&#x2F;create temporary table t (c int) engine&#x3D;myisam;</font></td><td></td></tr><tr><td>show tables;<br/><font color='green'>&#x2F;&#x2F;只显示普通表t</font></td><td></td></tr><tr><td></td><td>insert into t value (1);<br/>select * from t;<br/>&#x2F;&#x2F;返回1</td></tr><tr><td>select * from t;<br/>&#x2F;&#x2F;Empty Set</td><td></td></tr></tbody></table><p>临时表在使用上有以下几个特点：</p><ul><li>建表语法是 create temporary table …</li><li>一个临时表只能被创建它的 session 访问，对其他线程不可见。所以，图中 session A 创建的临时表 t，对于 session B 就是不可见的。</li><li>临时表可以与普通表同名。</li><li>session A 内有同名的临时表和普通表的时候，show create 语句，以及增删改查语句访问的是临时表。</li><li>show tables 命令不显示临时表。</li></ul><img src="mysql的临时表从入门到入土.assets/image-20230307150000571.png" alt="image-20230307150000571" /><h3 id="哪里会用到临时表"><a href="#哪里会用到临时表" class="headerlink" title="哪里会用到临时表"></a>哪里会用到临时表</h3><img src="mysql的临时表从入门到入土.assets/image-20230307145644973.png" alt="image-20230307145644973"  /><h3 id="怎么创建临时表"><a href="#怎么创建临时表" class="headerlink" title="怎么创建临时表"></a>怎么创建临时表</h3><img src="mysql的临时表从入门到入土.assets/image-20230307145631925.png" alt="image-20230307145631925" style="zoom:80%;" /><h3 id="临时表的分类"><a href="#临时表的分类" class="headerlink" title="临时表的分类"></a>临时表的分类</h3><img src="mysql的临时表从入门到入土.assets/image-20230307165554003.png" alt="image-20230307165554003" /><h3 id="临时表的日志"><a href="#临时表的日志" class="headerlink" title="临时表的日志"></a>临时表的日志</h3><img src="mysql的临时表从入门到入土.assets/image-20230307165507644.png" alt="image-20230307165507644" /><h2 id="JOIN语句"><a href="#JOIN语句" class="headerlink" title="JOIN语句"></a>JOIN语句</h2><h3 id="JOIN的基本概念"><a href="#JOIN的基本概念" class="headerlink" title="JOIN的基本概念"></a>JOIN的基本概念</h3><ul><li>笛卡尔积</li><li>隐式内连接<ul><li>等值连接</li><li>非等值连接</li></ul></li><li>自连接</li><li>外连接<ul><li>左外连接</li><li>右外连接</li><li>全外连接</li></ul></li><li>内连接</li><li>交叉连接</li></ul><p>可以参考：mysql的连接查询.md 一文，这里不再赘述</p><h3 id="JOIN语句的分类"><a href="#JOIN语句的分类" class="headerlink" title="JOIN语句的分类"></a>JOIN语句的分类</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><ul><li>准备 表t1：有索引a，100条记录</li><li>准备 表t2：有索引a，1000条记录</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t2<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token operator">like</span> t2<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Index-Nested-Loop-Join（NLJ）"><a href="#Index-Nested-Loop-Join（NLJ）" class="headerlink" title="Index Nested-Loop Join（NLJ）"></a>Index Nested-Loop Join（NLJ）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行过程</p><ul><li>从表 t1 中读入一行数据 R；</li><li>从数据行 R 中，取出 a 字段到表 t2 里去查找；</li><li>取出表 t2 中满足条件的行，跟 R 组成一行，作为结果集的一部分；</li><li>重复执行步骤 1 到 3，直到表 t1 的末尾循环结束。</li></ul><p>这个过程是先遍历表 t1，然后根据从表 t1 中取出的每行数据中的 a 值，去表 t2 中查找满足条件的记录。并且可以用上表t2的索引，所以我们称之为“Index Nested-Loop Join”，简称 NLJ。</p><h4 id="Simple-Nested-Loop-Join（SNL）"><a href="#Simple-Nested-Loop-Join（SNL）" class="headerlink" title="Simple Nested-Loop Join（SNL）"></a>Simple Nested-Loop Join（SNL）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                               <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于表 t2 的字段 b 上没有索引，因此再用图 2 的执行流程时，每次到 t2 去匹配的时候，就要做一次全表扫描。</p><p>你可以先设想一下这个问题，继续使用图 2 的算法，是不是可以得到正确的结果呢？如果只看结果的话，这个算法是正确的，而且这个算法也有一个名字，叫做“Simple Nested-Loop Join”。</p><p>但是，这样算来，这个 SQL 请求就要扫描表 t2 多达 100 次，总共扫描 100*1000&#x3D;10 万行。</p><p>效率极低。</p><p>但是mysql并没有使用这种算法，因为这种算法效率极低，通过执行计划也可以看到：Using where; Using join buffer (Block Nested Loop) </p><p>mysql使用的是 Block Nested Loop</p><h4 id="Block-Nested-Loop-Join（BNL）"><a href="#Block-Nested-Loop-Join（BNL）" class="headerlink" title="Block Nested Loop Join（BNL）"></a>Block Nested Loop Join（BNL）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                               <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>被驱动表</code>无法使用索引的时候，算法的流程是这样的：</p><ul><li><p>把表 t1 的数据读入线程内存 join_buffer 中，由于我们这个语句中写的是 select *，因此是把整个表 t1 放入了内存；</p></li><li><p>扫描表 t2，把表 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回。</p></li></ul><p><strong>如果驱动表的数据太多，join_buffer放不下怎么办？</strong></p><p>join_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。</p><p>如果放不下表 t1 的所有数据话，策略很简单，就是分段放。</p><p>执行过程就变成了：</p><ul><li>扫描表 t1，顺序读取数据行放入 join_buffer 中，放完第 88 行 join_buffer 满了，继续第 2 步；</li><li>扫描表 t2，把 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回；</li><li>清空 join_buffer；</li><li>继续扫描表 t1，顺序读取第 88 行之后的12 行数据放入 join_buffer 中，继续执行第 2 步。</li></ul><p>这个流程才体现出了这个算法名字中“Block”的由来，表示“分块去 join”</p><h4 id="hash-join（mysql-8-0-）"><a href="#hash-join（mysql-8-0-）" class="headerlink" title="hash join（mysql 8.0 ）"></a>hash join（mysql 8.0 ）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span><span class="token keyword">hash</span> <span class="token keyword">join</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的语句，在mysql8.0版本中，就不是使用 BNL了，而是使用 hash join</p><p>hash join 是mysql 8 的优化，在8之前这种语句使用的是：BNL，在8之后是 hash join</p><p>hash join 和 BNL 思路上是一致的</p><ul><li>将 驱动表 加载到内存<ul><li>BNL：所需的字段放在join_buffer中</li><li>hash join： 在 join_buffer中存的是一个hash表，key是将连接字段（join的字段）hash后的结果；value是所需的字段</li></ul></li><li>join_buffer不够用的时候<ul><li>BNL：分块加载</li><li>hash join：存到磁盘上</li></ul></li><li>读取 被驱动表 中记录与内存中的驱动表作比较<ul><li>BNL：遍历内存中的驱动表，时间复杂度是 O(n)</li><li>hash join：被驱动表的记录先hash，然后去内存中的hash表查找，时间复杂度是 O(1)</li></ul></li><li>返回结果集</li></ul><p>个人理解：主要是匹配的过程中，hash比BNL时间复杂度更好，所以更快</p><h4 id="它们之间的区别和联系"><a href="#它们之间的区别和联系" class="headerlink" title="它们之间的区别和联系"></a>它们之间的区别和联系</h4><img src="mysql的临时表从入门到入土.assets/image-20230307214104063.png" alt="image-20230307214104063"  /><h3 id="是否可以使用JOIN语句"><a href="#是否可以使用JOIN语句" class="headerlink" title="是否可以使用JOIN语句"></a>是否可以使用JOIN语句</h3><p>能不能使用 join 语句？</p><ul><li><p>如果可以使用 Index Nested-Loop Join 算法，也就是说可以用上被驱动表上的索引，其实是没问题的；</p></li><li><p>如果使用 Block Nested-Loop Join 算法，扫描行数就会过多。尤其是在大表上的 join 操作，这样可能要扫描被驱动表很多次，会占用大量的系统资源（比较次数多，CPU也会升高）。所以这种 join 尽量不要用。</p></li></ul><p>所以你在判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。</p><h3 id="驱动表应该怎么选"><a href="#驱动表应该怎么选" class="headerlink" title="驱动表应该怎么选"></a>驱动表应该怎么选</h3><p>先说结论：应该选择小表作为驱动表</p><h4 id="在-NLJ-的情况下"><a href="#在-NLJ-的情况下" class="headerlink" title="在 NLJ 的情况下"></a>在 NLJ 的情况下</h4><p>在 NLJ 的情况下，<code>驱动表</code>走全表扫描，<code>被驱动表</code>走索引树搜索</p><p>假设<code>被驱动表</code>的行数是 M，每次在<code>驱动表</code>查一行数据，要先搜索索引 a，在搜索主键索引。</p><p>每次搜索一棵树近似复杂度是 以2为底的M的对数，记为： log2M</p><p>所以在<code>被驱动表</code>上查一行数据的时间复杂度就是： 2 * log2M（因为走了2次索引，一次普通索引，一次主键索引）</p><p>假设<code>驱动表</code>的行数是 N，执行过程就要扫描驱动表的 N 行，然后对于每一行，都去<code>被驱动表</code>上匹配一次。</p><p>因此整个执行过程，近似复杂度为：N + N * 2 * log2M</p><p>显然，N 对扫描行数的影响更大，因此应该让小表来做驱动表。</p><blockquote><p> 如果你没觉得这个影响有那么“显然”， 可以这么理解：</p><p>N 扩大 1000 倍的话，扫描行数就会扩大 1000 倍；</p><p>而 M 扩大 1000 倍，扫描行数扩大不到 10 倍。</p></blockquote><p>总结：在 NLJ 的情况下，需要选择小表作为驱动表。</p><h4 id="在-BNL-的情况下"><a href="#在-BNL-的情况下" class="headerlink" title="在 BNL 的情况下"></a>在 BNL 的情况下</h4><p>在 BNL 的情况下，<code>驱动表</code>走全表扫描，<code>被驱动表</code>也是走全表扫描</p><p>假设小表的行数是 N，大表的行数是 M</p><p>在 BNL 算法，会首先把 <code>驱动表</code>加载到内存中，然后扫描<code>被驱动表</code>，扫描一行，就和内存中的<code>驱动表</code>做一次匹配，所以是：</p><ul><li>两次全表扫描：M + N</li><li>内存中的判断次数是 M * N</li></ul><p>可以看到，调换这两个算式中的 M 和 N 没差别，因此这时候无论选择哪个表做驱动表，执行耗时是一样的。</p><p><strong>但是！！！</strong>如果驱动表的数据比较多，我们知道此时需要分块join</p><p>此时假设，<code>驱动表</code>的数据行数是 N，需要分 K 段才能完成算法流程，<code>被驱动表</code>的数据行数是 M</p><p>注意，这里的 K 不是常数，N 越大 K 就会越大</p><p>所以：对驱动表的扫描次数是N； 对被驱动表的扫描次数是：K * M，此时：</p><ul><li>总的扫描次数是：N + K * M</li><li>总的内存判断次数是： N * M</li></ul><p>显然，内存判断次数是不受选择哪个表作为驱动表影响的。而考虑到扫描行数，在 M 和 N 大小确定的情况下，K 小一些，也就是分段小一些，整个算式的结果会更小。</p><p>为了让分段更小，有两个办法：</p><ul><li>选择小表作为驱动表</li><li>增大 join_buffer_size</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果要使用 join，应该选择大表做驱动表还是选择小表做驱动表？</p><ul><li>如果是 Index Nested-Loop Join 算法，应该选择小表做驱动表；</li><li>如果是 Block Nested-Loop Join 算法：<ul><li>在 join_buffer_size 足够大的时候，是一样的；</li><li>在 join_buffer_size 不够大的时候（这种情况更常见），应该选择小表做驱动表。</li></ul></li></ul><p>所以，这个问题的结论就是，总是应该使用小表做驱动表。</p><h4 id="什么是小表"><a href="#什么是小表" class="headerlink" title="什么是小表"></a>什么是小表</h4><p>这里所说的小表，并不是说表的数据量是多还是少；</p><p>而是作为 join 的数据量的大小。</p><p>比如下面两个语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 straight_join t1 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两个语句使用 b 字段进行 join，所以都用不上索引。</p><p>但如果是用第二个语句的话，join_buffer 只需要放入 t2 的前 50 行，显然是更好的。所以这里，“t2 的前 50 行”是那个相对小的表，也就是“小表”。</p><p>继续看另一个例子</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>b<span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>  t1  straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">select</span> t1<span class="token punctuation">.</span>b<span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>  t2  straight_join t1 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两个语句都是使用 b 字段进行 join，所以都用不上索引。并且 表t1 和 表t2 的数据量都是100行。</p><p>但是，这两条语句每次查询放入 join_buffer 中的数据是不一样的：</p><ul><li>表 t1 只查字段 b，因此如果把 t1 放到 join_buffer 中，则 join_buffer 中只需要放入 b 的值；</li><li>表 t2 需要查所有的字段，因此如果把表 t2 放到 join_buffer 中的话，就需要放入三个字段 id、a 和 b。</li></ul><p>所以这里，我们应该选择表 t1 作为驱动表。也就是说在这个例子里，“只需要一列参与 join 的表 t1”是那个相对小的表。</p><h2 id="JOIN语句的优化"><a href="#JOIN语句的优化" class="headerlink" title="JOIN语句的优化"></a>JOIN语句的优化</h2><p>在上文，我们知道了什么时候可以使用 JOIN 语句，以及 JOIN 语句是怎么的内部执行逻辑，这一节我们来看一下怎么优化 JOIN 语句。</p><h3 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h3><ul><li>表 t1 里，插入了 1000 行数据，每一行的 a&#x3D;1001-id 的值。也就是说，表 t1 中字段 a 是逆序的</li><li>表 t2 中插入了 100 万行数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">index</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t2 <span class="token operator">like</span> t1<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1001</span><span class="token operator">-</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Multi-Range-Read-（MRR）优化"><a href="#Multi-Range-Read-（MRR）优化" class="headerlink" title="Multi-Range Read （MRR）优化"></a>Multi-Range Read （MRR）优化</h3><p>什么是MRR优化</p><p>当回表的数据量比较多的时候，将需要回表的主键id先暂存到内存中，然后进行排序，将排序后的id在进行回表，此时id是顺序的，此时回表，近似于磁盘的顺序读。可以提高性能</p><p>MRR优化默认是关闭的，开启：set optimizer_switch&#x3D;”mrr_cost_based&#x3D;off”</p><p>如果使用了 order by 语句，MRR就不生效了</p><h3 id="Batched-Key-Access（BKA）"><a href="#Batched-Key-Access（BKA）" class="headerlink" title="Batched Key Access（BKA）"></a>Batched Key Access（BKA）</h3><p>BKA 算法，其实就是对 NLJ 算法的优化</p><h1 id="——————————"><a href="#——————————" class="headerlink" title="——————————-"></a>——————————-</h1><p>mysql</p><p>临时文件和临时表</p><p>临时表：为什么这里的临时表使用的引擎是memory？ A：tmp_table_size 这个配置限制了内存临时表的大小，默认值是 16M。如果临时表大小超过了 tmp_table_size，那么内存临时表就会转成磁盘临时表；磁盘临时表使用的引擎默认是 InnoDB，是由参数 internal_tmp_disk_storage_engine 控制的。而内存临时表使用的是memory引擎</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表t2，主键索引和字段a的普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t2<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 通过存储过程，初始化1000条记录</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表t1，主键索引和字段a的普通索引</span><span class="token comment">-- 初始化100条记录</span><span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token operator">like</span> t2<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么驱动表的字段a有索引，为啥不走索引呢？</p><ul><li>原因可能是因为没有过滤条件；</li></ul><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>    <span class="token number">50.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么驱动表的字段a有索引，而且添加了过滤条件，还是不走索引呢？</p><ul><li>因为是查询的 * ，即使走了索引 a，还是需要回表，优化器认为还不如直接走全表呢</li><li>因为过滤条件过滤的数据比较少，只过滤了50%，优化器认为全表扫描比走索引更快</li></ul><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> t1<span class="token punctuation">.</span>id <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>   <span class="token number">50</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref   <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span>              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动表的字段a有索引，而且添加了过滤条件，查询驱动表的主键id，会用到覆盖索引，不回表了，所以走了索引；</p><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref   <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动表的字段a有索引，而且添加了过滤条件，虽然查询的是所有字段，需要回表，但是因为过滤条件过滤90%的数据，优化器因为回表比全表扫描代价低</p><p>以上的情况适用于 t1 的单表查询也是一样的，所以总结下来 join查询其实就是多个单表查询，然后汇总在一起；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ALL</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span><span class="token comment">-- ALL</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment">-- range</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token comment">-- range</span><span class="token keyword">explain</span> <span class="token keyword">select</span> id <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql5</p><ul><li>Using where; Using join buffer (Block Nested Loop)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                               <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql8</p><ul><li>Using where; Using join buffer (hash join)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span><span class="token keyword">hash</span> <span class="token keyword">join</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用order by的话，就不会使用MRR了</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> optimizer_switch<span class="token operator">=</span><span class="token string">"mrr_cost_based=off"</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> a <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> a<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition<span class="token punctuation">;</span> <span class="token keyword">Using</span> MRR <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> a <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> a<span class="token operator">&lt;=</span><span class="token number">200</span> <span class="token keyword">order</span> <span class="token keyword">by</span> a <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql的临时表存放位置</p><p>在 5.6 以及之前的版本里，MySQL 会在临时文件目录下创建一个相同前缀、以.ibd 为后缀的文件，用来存放数据文件；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'tmpdir'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>                                           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token operator">|</span> tmpdir        <span class="token operator">|</span> C:\Windows\SERVIC<span class="token operator">~</span><span class="token number">1</span>\NETWOR<span class="token operator">~</span><span class="token number">1</span>\AppData\<span class="token keyword">Local</span>\<span class="token keyword">Temp</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中 C:\Windows\SERVIC<del>1\NETWOR</del>1\AppData\Local\Temp  就是临时文件目录，其中的 SERVIC<del>1\NETWOR</del>1 是啥意思，我不知道</li><li>我是win电脑，可以创建一个临时表，然后用everything搜一下，就能找到这个目录</li></ul><p>而从 5.7 版本开始，MySQL 引入了一个临时文件表空间，专门用来存放临时文件的数据。因此，我们就不需要再创建 ibd 文件了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'innodb_temp_data_file_path'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token operator">|</span> Variable_name              <span class="token operator">|</span> <span class="token keyword">Value</span>                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token operator">|</span> innodb_temp_data_file_path <span class="token operator">|</span> ibtmp1:<span class="token number">12</span>M:autoextend <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>innodb_temp_data_file_path：定义临时表空间的路径、文件名、初始化大小和最大上限。</li><li>其中<code>ibtmp1</code>就是临时文件表空间，它在windows下是一个文件，不是一个目录。</li></ul><p><img src="/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230105211938528.png" alt="image-20230105211938528"></p><h1 id="分区表的底层原理"><a href="#分区表的底层原理" class="headerlink" title="分区表的底层原理"></a>分区表的底层原理</h1><p>​分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引知识在各个底层表上各自加上一个完全相同的索引。从存储引擎的角度来看，底层表和普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分。</p><p>​分区表的操作按照以下的操作逻辑进行：</p><p>​<strong>select查询</strong></p><p>​当查询一个分区表的时候，分区层先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据</p><p>​<strong>insert操作</strong></p><p>​当写入一条记录的时候，分区层先打开并锁住所有的底层表，然后确定哪个分区接受这条记录，再将记录写入对应底层表</p><p>​<strong>delete操作</strong></p><p>​当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作</p><p>​<strong>update操作</strong></p><p>​当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录再哪个分区，然后取出数据并更新，再判断更新后的数据应该再哪个分区，最后对底层表进行写入操作，并对源数据所在的底层表进行删除操作</p><p>​有些操作时支持过滤的，例如，当删除一条记录时，MySQL需要先找到这条记录，如果where条件恰好和分区表达式匹配，就可以将所有不包含这条记录的分区都过滤掉，这对update同样有效。如果是insert操作，则本身就是只命中一个分区，其他分区都会被过滤掉。mysql先确定这条记录属于哪个分区，再将记录写入对应得曾分区表，无须对任何其他分区进行操作</p><p>​虽然每个操作都会“先打开并锁住所有的底层表”，但这并不是说分区表在处理过程中是锁住全表的，如果存储引擎能够自己实现行级锁，例如innodb，则会在分区层释放对应表锁。</p><h1 id="范围分区"><a href="#范围分区" class="headerlink" title="范围分区"></a>范围分区</h1><p>​范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用values less than运算符来定义。</p><p>​1、创建普通的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​2、创建带分区的表，下面建表的语句是按照store_id来进行分区的，指定了4个分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--在当前的建表语句中可以看到，store_id的值在1-5的在p0分区，6-10的在p1分区，11-15的在p3分区，16-20的在p4分区，但是如果插入超过20的值就会报错，因为mysql不知道将数据放在哪个分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​3、可以使用less than maxvalue来避免此种情况</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--maxvalue表示始终大于等于最大可能整数值的整数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​4、可以使用相同的方式根据员工的职务代码对表进行分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>job_code<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5、可以使用date类型进行分区：如虚妄根据每个员工离开公司的年份进行划分，如year(separated)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>separated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​6、可以使用函数根据range的值来对表进行分区，如timestampunix_timestamp()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--timestamp不允许使用任何其他涉及值的表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于时间间隔的分区方案，在mysql5.7中，可以基于范围或事件间隔实现分区方案，有两种选择</p><p>1、基于范围的分区，对于分区表达式，可以使用操作函数基于date、time、或者datatime列来返回一个整数值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1960</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、基于范围列的分区，使用date或者datatime列作为分区列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token keyword">COLUMNS</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1960-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1970-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1980-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1990-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="真实案例："><a href="#真实案例：" class="headerlink" title="真实案例："></a>真实案例：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#不分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> no_part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token punctuation">;</span><span class="token comment">#分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>d_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1998</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p10 <span class="token keyword">VALUES</span> LESS THAN maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#插入未分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> no_load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token comment">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> no_load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> no_part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'no'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> no_load_part<span class="token punctuation">;</span><span class="token comment">#插入分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'partition'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> load_part<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mysql临时表的xmind，&lt;a href=&quot;&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#### 临时表相关 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;17 | 如何正确地显示随机消息？ &lt;/li&gt;
&lt;li&gt;34 | 到底可不可以使用join？ &lt;/li&gt;
&lt;li&gt;35 | join语句怎么</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="join" scheme="https://zspcer.gitee.io/tags/join/"/>
    
    <category term="临时表" scheme="https://zspcer.gitee.io/tags/%E4%B8%B4%E6%97%B6%E8%A1%A8/"/>
    
    <category term="order by" scheme="https://zspcer.gitee.io/tags/order-by/"/>
    
    <category term="分区表" scheme="https://zspcer.gitee.io/tags/%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>mysql的SQL优化实战</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84SQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84SQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</id>
    <published>2023-03-15T04:24:10.502Z</published>
    <updated>2023-03-15T04:24:10.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的SQL优化实战"><a href="#mysql的SQL优化实战" class="headerlink" title="mysql的SQL优化实战"></a>mysql的SQL优化实战</h1><p>以下是公司实际业务上的SQL调优实战</p><h2 id="金铎项目"><a href="#金铎项目" class="headerlink" title="金铎项目"></a>金铎项目</h2><p>金铎项目是一个异常汇总平台，属于半路接手的项目，其中有很多sql都是比较复杂的，可读性差，维护性差，正好拿来练练手</p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>一下是涉及的相关表结构</p><h4 id="amp-event-log"><a href="#amp-event-log" class="headerlink" title="amp_event_log"></a>amp_event_log</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_event_log<span class="token punctuation">(</span>    id                         <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    event_id                   <span class="token keyword">bigint</span>                             <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件ID'</span><span class="token punctuation">,</span>    event_code                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件代码'</span><span class="token punctuation">,</span>    event_name                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件名称'</span><span class="token punctuation">,</span>    exception_subject          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常主体'</span><span class="token punctuation">,</span>    monitor_object_name        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'监控对象名称'</span><span class="token punctuation">,</span>    process_status             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理状态'</span><span class="token punctuation">,</span>    happen_time                <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'发生时间'</span><span class="token punctuation">,</span>    exception_level            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常等级'</span><span class="token punctuation">,</span>    event_detail               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件详情'</span><span class="token punctuation">,</span>    last_event_id              <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'上一级事件id'</span><span class="token punctuation">,</span>    timeout                    <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'超时时间'</span><span class="token punctuation">,</span>    version                    <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'版本'</span><span class="token punctuation">,</span>    push_user                  <span class="token keyword">text</span>                               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送对象'</span><span class="token punctuation">,</span>    is_push                    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否推送'</span><span class="token punctuation">,</span>    process_user               <span class="token keyword">text</span>                               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理对象'</span><span class="token punctuation">,</span>    actual_process_user        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'实际处理人'</span><span class="token punctuation">,</span>    feedback_duty_organization <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'反馈责任组织'</span><span class="token punctuation">,</span>    feedback_process_results   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'反馈处理结果'</span><span class="token punctuation">,</span>    feedback_note              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'具体原因'</span><span class="token punctuation">,</span>    start_process_time         <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'开始处理时间'</span><span class="token punctuation">,</span>    end_process_time           <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'结束处理时间'</span><span class="token punctuation">,</span>    reason                     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'原因'</span><span class="token punctuation">,</span>    create_time                <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    detail_url                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8mb4       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'明细路径'</span><span class="token punctuation">,</span>    is_transfer                <span class="token keyword">bigint</span>   <span class="token keyword">default</span> <span class="token number">0</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否转办 0：否 ，1：是'</span><span class="token punctuation">,</span>    transfer_user              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'转办人'</span><span class="token punctuation">,</span>    is_approve                 <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否审批 0:否 1:是'</span><span class="token punctuation">,</span>    process_opinion            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理意见'</span><span class="token punctuation">,</span>    evaluate                   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'评价'</span><span class="token punctuation">,</span>    approve_status             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人状态'</span><span class="token punctuation">,</span>    predict_improve_time       <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'预计改善时间'</span><span class="token punctuation">,</span>    approve_user               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人'</span><span class="token punctuation">,</span>    latest_improve_time        <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'最晚改善时间'</span><span class="token punctuation">,</span>    update_time                <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    actual_approve_user        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'实际审批人'</span><span class="token punctuation">,</span>    person_liable              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'责任人'</span><span class="token punctuation">,</span>    improve_plan               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'改善方案'</span><span class="token punctuation">,</span>    predict_improve_target     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'预计改善目标'</span><span class="token punctuation">,</span>    prov                       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'省'</span><span class="token punctuation">,</span>    city                       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'城市'</span><span class="token punctuation">,</span>    transfer_time              <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'转办时间'</span><span class="token punctuation">,</span>    feedback_process_images    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'现场处理图片'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'异常事件记录表'</span> <span class="token keyword">collate</span> <span class="token operator">=</span> utf8mb4_bin<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_actualuser_status <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>actual_process_user<span class="token punctuation">,</span> process_status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_approve_status_actual_approve_user <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>approve_status<span class="token punctuation">,</span> actual_approve_user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_city_happen_time <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>city<span class="token punctuation">,</span> happen_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_code <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>event_code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_id <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>event_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_exception_subject <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>exception_subject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_happendtime <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>happen_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="amp-site"><a href="#amp-site" class="headerlink" title="amp_site"></a>amp_site</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_site<span class="token punctuation">(</span>    id            <span class="token keyword">bigint</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点名字'</span><span class="token punctuation">,</span>    area          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    center_area   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    province      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属省'</span><span class="token punctuation">,</span>    business_area <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属的大区（浙北区）'</span><span class="token punctuation">,</span>    city          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属城市'</span><span class="token punctuation">,</span>    county        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属区'</span><span class="token punctuation">,</span>    sfcode        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'大网code'</span><span class="token punctuation">,</span>    sf_site       <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'1是0否'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> amp_site_name_index <span class="token keyword">on</span> amp_site <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="amp-event"><a href="#amp-event" class="headerlink" title="amp_event"></a>amp_event</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_event<span class="token punctuation">(</span>    id                   <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    updator              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'修改人'</span><span class="token punctuation">,</span>    update_time          <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>    create_time          <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    event_code           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常代码'</span><span class="token punctuation">,</span>    event_name           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'名字'</span><span class="token punctuation">,</span>    monitor_id           <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'监控对象id'</span><span class="token punctuation">,</span>    is_external          <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否外部渠道接入'</span><span class="token punctuation">,</span>    <span class="token keyword">rule</span>                 <span class="token keyword">text</span>                         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'触发规则'</span><span class="token punctuation">,</span>    message              <span class="token keyword">text</span>                         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'消息详情'</span><span class="token punctuation">,</span>    upgrade_rule         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'升级规则'</span><span class="token punctuation">,</span>    exception_level      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常等级'</span><span class="token punctuation">,</span>    reason               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'原因'</span><span class="token punctuation">,</span>    process_time         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理时效'</span><span class="token punctuation">,</span>    process_cycle        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理周期'</span><span class="token punctuation">,</span>    duty_organization_id <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'责任组织id'</span><span class="token punctuation">,</span>    deal_organization_id <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理组织id'</span><span class="token punctuation">,</span>    valid_time           <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'有效时间'</span><span class="token punctuation">,</span>    version              <span class="token keyword">bigint</span> <span class="token keyword">default</span> <span class="token number">1001</span>          <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'版本号'</span><span class="token punctuation">,</span>    is_history           <span class="token keyword">bigint</span> <span class="token keyword">default</span> <span class="token number">0</span>             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否历史版本:0否,1是'</span><span class="token punctuation">,</span>    detail_url           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8mb4 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'明细路径'</span><span class="token punctuation">,</span>    push_frequency       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送频率 天 ,周，双周，月'</span><span class="token punctuation">,</span>    push_day             <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送日期'</span><span class="token punctuation">,</span>    latest_improve_day   <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'最晚改善时间(天)'</span><span class="token punctuation">,</span>    is_approve           <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否审批 0:否 1:是'</span><span class="token punctuation">,</span>    approve_user         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人'</span><span class="token punctuation">,</span>    rule_explain         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3072</span><span class="token punctuation">)</span>                <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'规则说明'</span><span class="token punctuation">,</span>    push_job_id          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送岗位ID'</span><span class="token punctuation">,</span>    process_job_id       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理岗位id'</span><span class="token punctuation">,</span>    franchise_fee        <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'加盟商收入'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'异常事件表'</span> <span class="token keyword">collate</span> <span class="token operator">=</span> utf8mb4_bin<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_dealorganizationid <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>deal_organization_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_dutyorganizationid <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>duty_organization_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_code_version <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>event_code<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_monitorid <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>monitor_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化SQL一"><a href="#优化SQL一" class="headerlink" title="优化SQL一"></a>优化SQL一</h3><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>process_status <span class="token keyword">AS</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>       <span class="token function">count</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>id<span class="token punctuation">)</span>         cnt<span class="token keyword">FROM</span> amp_event_log t1<span class="token keyword">JOIN</span>     <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> amp_site <span class="token keyword">where</span> sf_site <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>     t3 <span class="token keyword">ON</span> t3<span class="token punctuation">.</span>NAME <span class="token operator">=</span> t1<span class="token punctuation">.</span>exception_subject<span class="token keyword">JOIN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> event_code<span class="token punctuation">,</span>deal_organization_id <span class="token keyword">FROM</span> amp_event <span class="token keyword">WHERE</span> is_history <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> deal_organization_id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">)</span>     t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>event_code <span class="token operator">=</span> t2<span class="token punctuation">.</span>event_code<span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>happen_time <span class="token operator">>=</span> <span class="token string">'2022-3-2 20:37:04'</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>happen_time <span class="token operator">&lt;=</span> <span class="token string">'2023-3-2 20:37:13'</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> process_status<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                                                   <span class="token operator">|</span> <span class="token keyword">key</span>            <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                            <span class="token operator">|</span> <span class="token keyword">rows</span>  <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> amp_event <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                                                   <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                           <span class="token operator">|</span>    <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1        <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_happendtime<span class="token punctuation">,</span>idx_actualuser_status<span class="token punctuation">,</span>idx_event_code<span class="token punctuation">,</span>idx_city_happen_time<span class="token punctuation">,</span>idx_exception_subject <span class="token operator">|</span> idx_event_code <span class="token operator">|</span> <span class="token number">1003</span>    <span class="token operator">|</span> fnsdmpsit<span class="token punctuation">.</span>amp_event<span class="token punctuation">.</span>event_code <span class="token operator">|</span>    <span class="token number">13</span> <span class="token operator">|</span>     <span class="token number">3.54</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                                    <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> amp_site  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> amp_site_name_index                                                                             <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                           <span class="token operator">|</span> <span class="token number">54023</span> <span class="token operator">|</span>     <span class="token number">1.00</span> <span class="token operator">|</span> Range checked <span class="token keyword">for</span> each record <span class="token punctuation">(</span><span class="token keyword">index</span> map: <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">warnings</span> <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析语句"><a href="#分析语句" class="headerlink" title="分析语句"></a>分析语句</h4><p>Using where; Using temporary; Using filesort</p><p>Using where </p><p>Range checked for each record (index map: 0x2)</p><ul><li><p>Using temporary</p><ul><li><code>group by</code> 语句一般会使用内部临时表，因为需要使用内部临时表存储数量；</li><li>一般情况下<code>group by</code>都是会使用临时表的，但是再<code>有些业务场景</code>下，也是可以优化成不用临时表的，所以效率会更高</li><li>【优化点一】：是否可以将这个 group by 语句取消使用内部临时表</li></ul></li><li><p>Using filesort</p><ul><li>group by 分组后默认自然顺序排序，如果不需要排序，可以改成：order by null；（8.0版本group by已经不会排序了）</li><li>所以可以根据具体的业务场景看，是否需要排序</li><li>【优化点二】：group by 语句是否可以不需要排序</li></ul></li><li><p>Using join buffer (Block Nested Loop)</p><ul><li><p>使用了join语句，而且是BNL算法，效率很低，首先看这个语句是否可以不用join</p></li><li><p>【优化点三】：是否可以避免join？从业务代码的角度进行优化？</p></li><li><p>如果join优化不了，是否可以将BNL算法优化成NLJ（BKA算法）</p></li><li><p>【优化点四】：是否可以将BNL算法优化成NLJ（BKA算法）</p></li><li><p>但是呢，即使使用了NLJ（BKA算法），效率还是不如hash-join（mysql8.0支持hash-join，效率高）</p></li><li><p>【优化点五】：是否可以通过业务代码实现hash-join</p></li></ul></li></ul><p>初次分析结论如上，先进行优化一波</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">select</span> log<span class="token punctuation">.</span>process_status <span class="token keyword">as</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>       <span class="token function">count</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>id<span class="token punctuation">)</span>         cnt<span class="token keyword">from</span> amp_event event <span class="token keyword">left</span> <span class="token keyword">join</span> amp_event_log log <span class="token keyword">on</span> event<span class="token punctuation">.</span>event_code<span class="token operator">=</span>log<span class="token punctuation">.</span>event_code<span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>  <span class="token operator">and</span> event<span class="token punctuation">.</span>is_history<span class="token operator">=</span><span class="token number">0</span>  <span class="token operator">and</span> event<span class="token punctuation">.</span>deal_organization_id<span class="token operator">=</span><span class="token number">1024</span>  <span class="token operator">and</span> log<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> log<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> log<span class="token punctuation">.</span>process_status <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                                          <span class="token operator">|</span> <span class="token keyword">key</span>            <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                        <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> event <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                                          <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                       <span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> log   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_actualuser_status<span class="token punctuation">,</span>idx_event_code<span class="token punctuation">,</span>amp_event_log_city_index<span class="token punctuation">,</span>amp_event_log_prov_index <span class="token operator">|</span> idx_event_code <span class="token operator">|</span> <span class="token number">1003</span>    <span class="token operator">|</span> fnsdmpsit<span class="token punctuation">.</span>event<span class="token punctuation">.</span>event_code <span class="token operator">|</span>   <span class="token number">13</span> <span class="token operator">|</span>    <span class="token number">12.43</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span>       t2<span class="token punctuation">.</span>event_name     <span class="token keyword">AS</span> name<span class="token punctuation">,</span>       t1<span class="token punctuation">.</span>process_status <span class="token keyword">AS</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>       t1<span class="token punctuation">.</span>cnt<span class="token keyword">FROM</span> <span class="token punctuation">(</span>         <span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span>                t<span class="token punctuation">.</span>process_status<span class="token punctuation">,</span>                t<span class="token punctuation">.</span>exception_subject<span class="token punctuation">,</span>                <span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>id<span class="token punctuation">)</span> cnt         <span class="token keyword">FROM</span> amp_event_log t                  <span class="token keyword">JOIN</span>              <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span>               <span class="token keyword">from</span> amp_site              <span class="token punctuation">)</span> t3              <span class="token keyword">ON</span> t3<span class="token punctuation">.</span>NAME <span class="token operator">=</span> t<span class="token punctuation">.</span>exception_subject         <span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>happen_time <span class="token operator">>=</span> <span class="token string">'2022-3-2 20:37:04'</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>happen_time <span class="token operator">&lt;=</span> <span class="token string">'2023-3-2 20:37:13'</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span>         <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> t<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span> t<span class="token punctuation">.</span>process_status     <span class="token punctuation">)</span> t1         <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> event_code<span class="token punctuation">,</span>           event_name<span class="token punctuation">,</span>           deal_organization_id    <span class="token keyword">FROM</span> amp_event    <span class="token keyword">WHERE</span> is_history <span class="token operator">=</span> <span class="token number">0</span>      <span class="token operator">AND</span> deal_organization_id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">)</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>event_code <span class="token operator">=</span> t2<span class="token punctuation">.</span>event_code<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>      <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                     <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span>  <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>     <span class="token operator">|</span> amp_event  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                     <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                                        <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>     <span class="token operator">|</span> <span class="token operator">&lt;</span>derived2<span class="token operator">></span> <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>                                                              <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">30879</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> DERIVED     <span class="token operator">|</span> t          <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_happendtime<span class="token punctuation">,</span>amp_event_log_city_index<span class="token punctuation">,</span>amp_event_log_prov_index <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">52</span> <span class="token operator">|</span>    <span class="token number">10.99</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> DERIVED     <span class="token operator">|</span> amp_site   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> amp_site_name_index                                               <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">54023</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> Range checked <span class="token keyword">for</span> each record <span class="token punctuation">(</span><span class="token keyword">index</span> map: <span class="token number">0x2</span><span class="token punctuation">)</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">warnings</span> <span class="token punctuation">(</span><span class="token number">1.18</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">select</span> t2<span class="token punctuation">.</span>event_code <span class="token keyword">as</span> event_code<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>event_name <span class="token keyword">as</span> name<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>process_status <span class="token keyword">as</span> <span class="token keyword">status</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> cnt<span class="token keyword">from</span> amp_event t1         <span class="token keyword">left</span> <span class="token keyword">join</span> amp_event_log t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>event_code <span class="token operator">=</span> t2<span class="token punctuation">.</span>event_code<span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>happen_time <span class="token operator">>=</span> <span class="token string">'2022-3-2 20:37:04'</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>happen_time <span class="token operator">&lt;=</span> <span class="token string">'2023-3-2 20:37:13'</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>is_history <span class="token operator">=</span> <span class="token number">0</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>deal_organization_id <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">group</span> <span class="token keyword">by</span> t2<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>process_status<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                                    <span class="token operator">|</span> <span class="token keyword">key</span>            <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                                    <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                    <span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_happendtime<span class="token punctuation">,</span>idx_event_code<span class="token punctuation">,</span>amp_event_log_city_index<span class="token punctuation">,</span>amp_event_log_prov_index <span class="token operator">|</span> idx_event_code <span class="token operator">|</span> <span class="token number">1003</span>    <span class="token operator">|</span> fnsdmpsit<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>event_code <span class="token operator">|</span>   <span class="token number">13</span> <span class="token operator">|</span>    <span class="token number">10.99</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的SQL优化实战&quot;&gt;&lt;a href=&quot;#mysql的SQL优化实战&quot; class=&quot;headerlink&quot; title=&quot;mysql的SQL优化实战&quot;&gt;&lt;/a&gt;mysql的SQL优化实战&lt;/h1&gt;&lt;p&gt;以下是公司实际业务上的SQL调优实战&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="SQL优化" scheme="https://zspcer.gitee.io/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
    <category term="性能调优" scheme="https://zspcer.gitee.io/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
    <category term="调优" scheme="https://zspcer.gitee.io/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>mysql的连接查询</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/MySql%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/MySql%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</id>
    <published>2023-03-15T04:24:10.501Z</published>
    <updated>2023-03-15T04:24:10.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql的连接查询"><a href="#mysql的连接查询" class="headerlink" title="mysql的连接查询"></a>mysql的连接查询</h2><h3 id="笛卡尔集"><a href="#笛卡尔集" class="headerlink" title="笛卡尔集"></a>笛卡尔集</h3><p>对于两张表的连接，会造成笛卡尔乘积现象：</p><p>假设表a有m行，表b有n行：则结果是m*n行。</p><img src="mysql的连接查询.assets/image-20220831204520815-16671893143504.png" alt="image-20220831204520815" style="zoom:80%;" /><p>对于上面的两张表，如果直接查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select name,boyName from beauty,boys; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则结果是：12 * 4 &#x3D; 48行</p><p>很显然不是我们想要的结果！</p><p>那么怎么解决笛卡尔集呢</p><p>通过添加连接条件，可以过滤掉笛卡尔集</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select name,boyName from beauty,boys where beauty.boyfriend_id &#x3D; boys.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="隐式内连接-等值连接"><a href="#隐式内连接-等值连接" class="headerlink" title="隐式内连接-等值连接"></a>隐式内连接-等值连接</h3><p>mysql的隐式内连接：在 SQL 语句中使用两个或多个表，通过 WHERE 条件筛选满足条件的行进行连接。此时，并没有使用 INNER JOIN 或 JOIN 等显式的连接操作符，因此也被称为隐式连接。虽然隐式连接在某些情况下可以简化 SQL 的编写，但是在实际使用中，建议使用显式连接方式，因为显式连接更加清晰易懂，同时对于复杂的连接查询有更好的可读性和可维护性。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 语法SELECT 字段1, 字段2... FROM 表1,表2... WHERE 表1.xxx &#x3D; 表2.xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理：</p><ul><li>先从表1中拿出第一行的数据,然后匹配表2中的每一行记录，进行WHERE后面的判断</li><li>满足判断：找到结果</li><li>不满足判断：过滤掉，继续下一个</li></ul><p>特点</p><ul><li>等值连接，可以进行分组</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>city <span class="token keyword">from</span> departments d<span class="token punctuation">,</span> location l <span class="token keyword">WHERE</span> d<span class="token punctuation">.</span>location_id <span class="token operator">=</span> l<span class="token punctuation">.</span>id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> city<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="隐式内连接-非等值连接"><a href="#隐式内连接-非等值连接" class="headerlink" title="隐式内连接-非等值连接"></a>隐式内连接-非等值连接</h3><p>mysql的隐式内连接：在 SQL 语句中使用两个或多个表，通过 WHERE 条件筛选满足条件的行进行连接。此时，并没有使用 INNER JOIN 或 JOIN 等显式的连接操作符，因此也被称为隐式连接。虽然隐式连接在某些情况下可以简化 SQL 的编写，但是在实际使用中，建议使用显式连接方式，因为显式连接更加清晰易懂，同时对于复杂的连接查询有更好的可读性和可维护性。</p><p>与等值连接的不同之处在于</p><ul><li><p>等值连接的WEHER中是使用 &#x3D; 进行判断</p></li><li><p>非等值连接，就是不使用 &#x3D; 进行判断，比如 xxx &gt; xxx，或者 xxx BETWEEN xxx and xxx</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 语法SELECT 字段1, 字段2 ... FROM 表1,表2... WHERE 判断条件-- 例子select 员工表.员工工资, 工资等级表.工资等级 from 员工表, 工资等级表 WHERE 员工表.员工工资 BETWEEN 工资等级表.最低工资 AND 工资等级表.最高工资;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原理：</p><ul><li>就是拿到员工表的中的每一个员工的工资，去工资登记表中进行判断，是否满足WHERE条件后的判断：</li><li>满足判断：找到结果</li><li>不满足判断：过滤掉，继续下一个</li></ul><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接，简单地说，就是一张表，自己与自己进行连接.</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT a.name AS &#39;部门名&#39;, b.name AS &#39;上级部门&#39; FROM sys_department a ,sys_department b WHERE a.parent_id &#x3D; b.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="外连接-左外连接-LEFT-JOIN"><a href="#外连接-左外连接-LEFT-JOIN" class="headerlink" title="外连接-左外连接(LEFT  JOIN)"></a>外连接-左外连接(LEFT  JOIN)</h3><ul><li>LEFT JOIN</li><li>LEFT OUTER JOIN</li><li>只有形式不一样。left join 是 left outer join 的简写，两者含义一样的。</li><li>左外连接 &#x3D; 左表全部记录 + 右表相关联记录</li></ul><h3 id="外连接-右外连接-RIGHT-JOIN"><a href="#外连接-右外连接-RIGHT-JOIN" class="headerlink" title="外连接-右外连接(RIGHT JOIN)"></a>外连接-右外连接(RIGHT JOIN)</h3><ul><li>RIGHT JOIN</li><li>RIGHT OUTER JOIN</li><li>有形式不一样。left join 是 left outer join 的简写，两者含义一样的。</li><li>右外连接 &#x3D; 右表全部记录 + 左表相关联记录</li></ul><h3 id="外连接-全外连接-不支持"><a href="#外连接-全外连接-不支持" class="headerlink" title="外连接-全外连接(不支持)"></a>外连接-全外连接(不支持)</h3><ul><li>mysql不支持全外连接。</li><li>全外连接 &#x3D; 【左有右没有的记录】 + 【右有左没有的记录】 + 【两张表的交集记录】</li></ul><h3 id="内连接-JOIN-x2F-INNER-JOIN"><a href="#内连接-JOIN-x2F-INNER-JOIN" class="headerlink" title="内连接(JOIN &#x2F; INNER JOIN)"></a>内连接(JOIN &#x2F; INNER JOIN)</h3><ul><li>JOIN</li><li>INNER JOIN</li><li>join 是 inner join 的缩写</li><li>内连接 &#x3D; 两张表的交集记录</li></ul><h3 id="交叉连接-CROSS-JOIN"><a href="#交叉连接-CROSS-JOIN" class="headerlink" title="交叉连接(CROSS JOIN)"></a>交叉连接(CROSS JOIN)</h3><ul><li>CROSS JOIN</li><li>交叉连接 &#x3D; 笛卡尔积</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="mysql的连接查询.assets/image-20220831210715528-16671893143505.png" alt="image-20220831210715528" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql的连接查询&quot;&gt;&lt;a href=&quot;#mysql的连接查询&quot; class=&quot;headerlink&quot; title=&quot;mysql的连接查询&quot;&gt;&lt;/a&gt;mysql的连接查询&lt;/h2&gt;&lt;h3 id=&quot;笛卡尔集&quot;&gt;&lt;a href=&quot;#笛卡尔集&quot; class=&quot;head</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="join" scheme="https://zspcer.gitee.io/tags/join/"/>
    
  </entry>
  
  <entry>
    <title>hexo+butterfly更新mermaid版本</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/hexo/hexo+butterfly%E6%9B%B4%E6%96%B0mermaid%E7%89%88%E6%9C%AC/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/hexo/hexo+butterfly%E6%9B%B4%E6%96%B0mermaid%E7%89%88%E6%9C%AC/</id>
    <published>2023-02-23T13:45:00.944Z</published>
    <updated>2023-02-23T13:45:00.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-butterfly更新mermaid版本"><a href="#hexo-butterfly更新mermaid版本" class="headerlink" title="hexo+butterfly更新mermaid版本"></a>hexo+butterfly更新mermaid版本</h1><p>怎么使用的mermaid，可以参考butterfly的官网：<a href="https://butterfly.js.org/posts/4aa8abbe/#mermaid">https://butterfly.js.org/posts/4aa8abbe/#mermaid</a></p><p>最近在本地重新编辑一篇文章之后，部署起来，发现有一个<code>mermaid</code>图表不支持了。</p><p>原因是因为：我的 <code>hexo</code> 引用的 <code>butterfly</code> 主题默认使用的 <code>mermaid</code> 版本是 <code>8.13.8</code></p><p>而我本地是使用 <code>typora</code> 编辑的，<code>typora</code> 版本是 <code>1.5.8</code>，引用的 mermaid 版本是 <code>9.2.0</code></p><p>所以我是用了 新版本的特性之后，在低版本中就无法渲染了。</p><img src="hexo+butterfly更新mermaid版本.assets/image-20230217231526333.png" alt="image-20230217231526333" style="zoom:50%;" /><p><strong>解决办法</strong></p><p>更新 hexo+butterfly 的 mermaid 版本</p><p>mermaid 版本是主题引入的，其实就是主题引入了一个js</p><p>我们找到这个 js ，给它升级了就完事了</p><p>找到主题目录</p><blockquote><p>…&#x2F;你的主题目录&#x2F;hexo-theme-butterfly&#x2F;layout&#x2F;includes&#x2F;footer.pug</p></blockquote><img src="hexo+butterfly更新mermaid版本.assets/image-20230217230355932.png" alt="image-20230217230355932" style="zoom:50%;" /><p>打开<code>footer.pug</code>文件，将引入的低版本mermaid直接升级就可以了</p><img src="hexo+butterfly更新mermaid版本.assets/image-20230217230516681.png" alt="image-20230217230516681" style="zoom: 33%;" /><p>然后重新部署一遍就可以了。</p><img src="hexo+butterfly更新mermaid版本.assets/image-20230217231546566.png" alt="image-20230217231546566" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-butterfly更新mermaid版本&quot;&gt;&lt;a href=&quot;#hexo-butterfly更新mermaid版本&quot; class=&quot;headerlink&quot; title=&quot;hexo+butterfly更新mermaid版本&quot;&gt;&lt;/a&gt;hexo+butter</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/categories/TOOLS/hexo/"/>
    
    
    <category term="hexo" scheme="https://zspcer.gitee.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://zspcer.gitee.io/tags/butterfly/"/>
    
    <category term="mermaid" scheme="https://zspcer.gitee.io/tags/mermaid/"/>
    
  </entry>
  
  <entry>
    <title>docker+hexo+gitee部署完美个人博客</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/hexo/docker+hexo+gitee%E9%83%A8%E7%BD%B2%E5%AE%8C%E7%BE%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/hexo/docker+hexo+gitee%E9%83%A8%E7%BD%B2%E5%AE%8C%E7%BE%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-02-23T13:45:00.939Z</published>
    <updated>2023-02-23T13:45:00.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>因为引用的文章在下面都说到了，可以先看看</p><p><a href="https://zhuanlan.zhihu.com/p/372398281">Docker + Git 部署Hexo发布</a></p><p><a href="https://www.cnblogs.com/moshuying/p/15801437.html">【hexo指南】hexo配置ER图流程图时序图插件</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本文仅适用：x86_64架构</strong></p><p>因为平时使用typora写文章，除了基本的MD语法之外，还使用了</p><ul><li>本地图片</li><li>mermaid</li></ul><p>就是上面两点，导致部署hexo比较麻烦，特别是第一点。</p><p>为什么呢？</p><p>hexo新版本不是支持了本地图片吗？</p><p>但是支持的前提是：图片的文件夹和MD文件名一致，像下面这样</p><ul><li>xxxxx.md （MD文件）</li><li>xxxxx （图片文件夹）</li></ul><p>而我的图片存储方式是：</p><ul><li>xxxxx.md（MD文件）</li><li>xxxxx.assets（图片文件夹）</li></ul><p>对应typora的设置就是：</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030220722156.png" alt="image-20221030220722156" style="zoom:50%;" /><p>所以hexo就不支持了，我就很难受</p><h2 id="第一步：准备hexo文件"><a href="#第一步：准备hexo文件" class="headerlink" title="第一步：准备hexo文件"></a>第一步：准备hexo文件</h2><p>你需要准备你的所有笔记文件：比如我的是放在gitee的，大致有下面这些笔记</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030220831563.png" alt="image-20221030220831563" style="zoom:50%;" /><p>然后需要准备一个hexo的主题，我推荐是 butterfly，把主题下载下来</p><p>然后需要准备hexo的配置文件_config.yml，配置好你所需要的所有内容</p><p>然后准备下面的脚本，命名为：hexo-img-move.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//note/xxx/xx.assets  2020/10/30/xxx/xx.assets</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">dir<span class="token punctuation">,</span>dest</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fs<span class="token punctuation">.</span><span class="token function">pathExists</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> exists</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历递归public文件夹，将</span><span class="token keyword">function</span> <span class="token function">readFileList</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> filesList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">itm<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> stat <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path <span class="token operator">+</span> itm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//递归读取文件</span>            <span class="token function">readFileList</span><span class="token punctuation">(</span>path <span class="token operator">+</span> itm <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">,</span> filesList<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个对象存放文件的路径和名字</span>            obj<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span><span class="token comment">//路径</span>            obj<span class="token punctuation">.</span>filename <span class="token operator">=</span> itm<span class="token comment">//名字</span>            filesList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> getFiles <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取文件夹下的所有文件</span>    <span class="token function-variable function">getFileList</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> filesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">readFileList</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> filesList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filesList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>getFiles<span class="token punctuation">.</span><span class="token function">getFileList</span><span class="token punctuation">(</span><span class="token string">'/var/www/hexo/public/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// console.log(obj.path);</span><span class="token comment">// var paths = obj.path.split('public/');</span><span class="token comment">// var dir_part = paths[1];</span><span class="token comment">// var dir_full = '/var/www/hexo/source/_posts/'+dir_part;</span><span class="token comment">// var dir = dir_full.substring(0,dir_full.length-1)+'.assets';</span><span class="token keyword">var</span> dir_part <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'note'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> dir_full <span class="token operator">=</span> <span class="token string">'/var/www/hexo/source/_posts/note'</span><span class="token operator">+</span>dir_part<span class="token punctuation">;</span><span class="token keyword">var</span> dir <span class="token operator">=</span> dir_full<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dir_full<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.assets'</span><span class="token punctuation">;</span><span class="token comment">//第一种：复制到 dir 的下一级目录下</span><span class="token keyword">var</span> dirs <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> aessets_name <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">var</span> dest1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token operator">+</span>aessets_name<span class="token punctuation">;</span><span class="token comment">// 第二种：复制到 dir 同级目录下</span><span class="token comment">// var dest2 = obj.path.substring(0,obj.path.length-1)+'.assets';</span><span class="token comment">//第三种：复制到 public 下</span><span class="token keyword">var</span> dirs <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> forder_name <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.assets'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> dest_full <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.assets'</span><span class="token punctuation">;</span><span class="token keyword">var</span> dests <span class="token operator">=</span> dest_full<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dest3 <span class="token operator">=</span> <span class="token string">'/var/www/hexo/public/'</span><span class="token operator">+</span>dests<span class="token punctuation">[</span>dests<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token comment">///var/www/hexo/public/2022/10/30/note/JAVA/数据库/MYSQL/mysql的日志从入门到入土/</span><span class="token comment">// console.log(dir)</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>dest1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>dest3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030221220970.png" alt="image-20221030221220970" style="zoom:80%;" /><h2 id="第二步：准备dockerfile"><a href="#第二步：准备dockerfile" class="headerlink" title="第二步：准备dockerfile"></a>第二步：准备dockerfile</h2><p>将下面的文件 命名为：Dockerfile  没有后缀名</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:14-alpine</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /var/www/hexo</span><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"Asia/Shanghai"</span> > /etc/timezone <span class="token operator">\</span>    &amp;&amp; echo <span class="token string">"https://mirrors.aliyun.com/alpine/v3.9/main/"</span> > /etc/apk/repositories  <span class="token operator">\</span>    &amp;&amp; npm config set registry https://registry.npm.taobao.org <span class="token operator">\</span>    &amp;&amp; apk add --no-cache git <span class="token operator">\</span>    &amp;&amp; apk add --no-cache openssh-client <span class="token operator">\</span>    &amp;&amp; npm install hexo-cli -g <span class="token operator">\</span>    &amp;&amp; hexo init <span class="token operator">\</span>    &amp;&amp; npm install hexo-renderer-swig <span class="token operator">\</span>    &amp;&amp; npm install <span class="token operator">\</span>    &amp;&amp; npm install fs-extra --save </span>    &amp;&amp; npm install hexo-deployer-git --save \    &amp;&amp; npm install hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save \    &amp;&amp; npm install hexo-filter-mermaid-diagrams --save \    &amp;&amp; npm install hexo-blog-encrypt --save \    &amp;&amp; npm install hexo-generator-search --save \    &amp;&amp; git config --global user.email "zhuansunpengcheng@qq.com" \    &amp;&amp; git config --global user.name "zhuansun" \    &amp;&amp; ssh-keygen -t RSA -C "zhuansunpengcheng@qq.com" -P "" -N "" -f /root/.ssh/id_rsa \    &amp;&amp; echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config \    &amp;&amp; cat /root/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们使用alpine作为基本镜像，因为够小，对于hexo来说，足够了</li><li>设置工作目录是 &#x2F;var&#x2F;www&#x2F;hexo</li><li>下面就是安装git，ssh，hexo</li><li>npm install fs-extra –save ：安装fs-extra的依赖，是为了我们的 hexo-img-move.js能正常运行</li><li>安装了一些hexo的插件<ul><li>hexo-deployer-git：让hexo支持直接部署到git上</li><li>hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive：这些是为了butterfly主题支持用的</li><li>hexo-filter-mermaid-diagrams：让hexo支持mermaid流程图（解决了我的第二个痛点）：<a href="https://www.cnblogs.com/moshuying/p/15801437.html">https://www.cnblogs.com/moshuying/p/15801437.html</a></li><li>hexo-blog-encrypt：加密文章，使用方法见github：<a href="https://github.com/rdou/hexo-blog-encrypt">https://github.com/rdou/hexo-blog-encrypt</a><ul><li>说明：在http环境下不支持加密，这是因为脚本中的使用的crypto对象，有一个subtle属性只能在https环境下获取到。</li><li><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221031001047545.png" alt="image-20221031001047545" style="zoom: 30%;float:left" /></li><li><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221031001405503.png" alt="image-20221031001405503" style="zoom:33%;float:left" /></li></ul></li></ul></li><li>hexo-generator-search：实现本地搜索，hexo本地搜索的实现原理是在 public 目录下，生成一个 search.xml 文件</li><li>设置git的邮箱和用户名，填自己的就行</li><li>设置ssh公钥，是为了让git提交的时候不用每次都输入密码，直接用公钥提交</li><li>echo “StrictHostKeyChecking no” &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;ssh_config \： 这一步很重要，是为了容器启动的时候，跳过ssh公钥的检查，避免手动输入yes</li><li>cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub：打印公钥</li></ul><h2 id="第三步：构建docker镜像"><a href="#第三步：构建docker镜像" class="headerlink" title="第三步：构建docker镜像"></a>第三步：构建docker镜像</h2><p>在Dockerfile的目录下，运行下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> zhuansun/hexo:v1.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-t：表示指定镜像的名字和标签</li><li>zhuansun&#x2F;hexo:v1.0 : 表示镜像的名字，v1.0是标签</li><li>. ：这个点，不知道啥意思，写上</li></ul><p>查看构建的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ash-4.3<span class="token comment"># docker image ls</span>REPOSITORY                                          TAG                       IMAGE ID       CREATED         SIZEzhuansun/hexo                                       v1.0                      71b6e1b7ea19   <span class="token number">4</span> minutes ago   249MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第四步：运行容器"><a href="#第四步：运行容器" class="headerlink" title="第四步：运行容器"></a>第四步：运行容器</h2><p>我用的是群辉的docker，挂载了四个目录，和一个端口</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222106418.png" alt="image-20221030222106418" style="zoom: 80%;" /><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222129007.png" alt="image-20221030222129007" style="zoom:50%;" /><p>其他的都是默认。然后启动</p><p>注意：</p><p>挂载的文件夹里面，要有内容哦。按照第一步，该放的都放好。</p><h2 id="第五步：启动容器"><a href="#第五步：启动容器" class="headerlink" title="第五步：启动容器"></a>第五步：启动容器</h2><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222250742.png" alt="image-20221030222250742" style="zoom:80%;" /><h2 id="第六步：使用容器"><a href="#第六步：使用容器" class="headerlink" title="第六步：使用容器"></a>第六步：使用容器</h2><p>先开启群辉的ssh，然后进入到容器里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> xxxxxxx <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进来之后，默认就是我们设置的：&#x2F;var&#x2F;www&#x2F;hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ash-4.3<span class="token comment"># docker exec -it fb29ef2559ef sh</span>/var/www/hexo <span class="token comment"># ls</span>_config.landscape.yml  db.json                package-lock.json      public                 shell                  themes_config.yml            node_modules           package.json           scaffolds              <span class="token builtin class-name">source</span>                 yarn.lock/var/www/hexo <span class="token comment"># hexo clean</span>INFO  Validating configINFO  Deleted database.INFO  Deleted public folder./var/www/hexo <span class="token comment"># hexo g</span>INFO  Validating configINFO  Start processingINFO  Generated: note/JAVA/数据库/MYSQL/mysql中的交集差集并集/index.htmlINFO  Generated: note/JAVA/GIT/git批量删除分支/index.htmlINFO  Generated: note/PROJECT/时效项目/index.htmlINFO  <span class="token number">73</span> files generated <span class="token keyword">in</span> <span class="token number">7.03</span> s/var/www/hexo <span class="token comment"># node shell/hexo-img-move.js </span>success<span class="token operator">!</span>success<span class="token operator">!</span>success<span class="token operator">!</span>/var/www/hexo <span class="token comment"># hexo server -d</span>INFO  Validating configINFO  <span class="token punctuation">[</span>Browsersync<span class="token punctuation">]</span> Access URLs: ----------------------------------          UI: http://localhost:3001 ---------------------------------- UI External: http://localhost:3001 ----------------------------------INFO  Start processingINFO  Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>说一下 node shell&#x2F;hexo-img-move.js  这一步，hexo生成静态文件之后，只有html，并没有图片的</li><li>如果你用的是图床，那么完全啥问题都没有</li><li>如果是本地图片，我们就需要把本地图片移动到指定的文件夹中</li><li>然后hexo server启动后，html才可以找到图片（具体怎么移动的可以看上面的代码）</li></ul><h2 id="第七步：本地验证hexo服务"><a href="#第七步：本地验证hexo服务" class="headerlink" title="第七步：本地验证hexo服务"></a>第七步：本地验证hexo服务</h2><p>图片可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222950902.png" alt="image-20221030222950902" style="zoom:80%;" /><p>代码可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223012143.png" alt="image-20221030223012143" style="zoom:80%;" /><p>时序图可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223026695.png" alt="image-20221030223026695" style="zoom:80%;" /><h2 id="第八步：部署到gitee"><a href="#第八步：部署到gitee" class="headerlink" title="第八步：部署到gitee"></a>第八步：部署到gitee</h2><p>首先需要配置上面的公钥到gitee上，百度很简单</p><p>然后再hexo中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/www/hexo <span class="token comment"># hexo d</span>INFO  Validating configINFO  Deploying: <span class="token function">git</span>INFO  Clearing .deploy_git folder<span class="token punctuation">..</span>.INFO  Copying files from public folder<span class="token punctuation">..</span>.INFO  Copying files from extend dirs<span class="token punctuation">..</span>.<span class="token punctuation">[</span>master c3fe339<span class="token punctuation">]</span> Site updated: <span class="token number">2022</span>-10-30 <span class="token number">14</span>:31:27Enumerating objects: <span class="token number">308</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">308</span>/308<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">4</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">247</span>/247<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">284</span>/284<span class="token punctuation">)</span>, <span class="token number">22.02</span> MiB <span class="token operator">|</span> <span class="token number">1.09</span> MiB/s, done.Total <span class="token number">284</span> <span class="token punctuation">(</span>delta <span class="token number">51</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">51</span>/51<span class="token punctuation">)</span>, completed with <span class="token number">3</span> <span class="token builtin class-name">local</span> objects.remote: Powered by GITEE.COM <span class="token punctuation">[</span>GNK-6.4<span class="token punctuation">]</span>To gitee.com:zhuansunpengcheng/zhuansunpengcheng.git   e4984bb<span class="token punctuation">..</span>c3fe339  HEAD -<span class="token operator">></span> masterBranch <span class="token string">'master'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'master'</span> from <span class="token string">'git@gitee.com:zhuansunpengcheng/zhuansunpengcheng.git'</span><span class="token builtin class-name">.</span>INFO  Deploy done: <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交成功之后，到gitee上，开始gitee page服务</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223331923.png" alt="image-20221030223331923" style="zoom:50%;" /><p>然后就可以使用了</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223426237.png" alt="image-20221030223426237" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;因为引用的文章在下面都说到了，可以先看看&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/3723</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/categories/TOOLS/hexo/"/>
    
    
    <category term="docker" scheme="https://zspcer.gitee.io/tags/docker/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/tags/hexo/"/>
    
    <category term="gitee" scheme="https://zspcer.gitee.io/tags/gitee/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/MYSELF/%E7%BE%A4%E8%BE%89%E9%85%8D%E7%BD%AE%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
    <id>https://zspcer.gitee.io/note/MYSELF/%E7%BE%A4%E8%BE%89%E9%85%8D%E7%BD%AE%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</id>
    <published>2023-02-23T13:45:00.914Z</published>
    <updated>2023-02-23T13:45:00.914Z</updated>
    
    <content type="html"><![CDATA[<p>firefox</p><p>直接把 .key 改成 pem 就行啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;firefox&lt;/p&gt;
&lt;p&gt;直接把 .key 改成 pem 就行啦&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kafka从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/KAFKA/kafka%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/KAFKA/kafka%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-02-23T13:45:00.914Z</published>
    <updated>2023-02-23T13:45:00.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka从入门到入土"><a href="#kafka从入门到入土" class="headerlink" title="kafka从入门到入土"></a>kafka从入门到入土</h1><hr><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="名词术语"><a href="#名词术语" class="headerlink" title="名词术语"></a>名词术语</h3><p>消息：<code>Record</code>。Kafka 是消息引擎嘛，这里的消息就是指 Kafka 处理的主要对象。</p><p>主题：<code>Topic</code>。Topic 是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。</p><p>分区：<code>Partition</code>。是一个物理概念，可以理解为一个有序不变的消息序列。每个 Topic 下可以有多个 Partition。</p><p>分区位移：<code>Offset</code>。表示 Partition 中每条消息的位置信息，这个值是存在消息中的，是一个单调递增且不变的值。</p><p>副本：<code>Replica</code>。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的<code>Replica</code>副本。<code>Replica</code>还分为<code>Leader Replica</code>和<code>Follower Replica</code>，各自有不同的角色划分。<code>Replica</code>是在<code>Partition</code>层级下的，即每个<code>Partition</code>可配置多个<code>Replica</code>实现高可用。</p><p>生产者：<code>Producer</code>。向<code>Topic</code>发布新消息的应用程序。</p><p>消费者：<code>Consumer</code>。从<code>Topic</code>订阅新消息的应用程序。</p><p>消费者位移：<code>Consumer Offset</code>。表示<code>Consumer</code>的消费进度，每个<code>Consumer</code>都有自己的<code>Consumer Offset</code>。</p><p>消费者组：<code>Consumer Group</code>。多个<code>Consumer</code>实例共同组成的一个组<code>Group</code>，同时消费多个<code>Partition</code>以实现高吞吐。</p><p>重平衡：<code>Rebalance</code>。<code>Consumer Group</code>内某个<code>Consumer</code>实例挂掉后，其他<code>Consumer</code>实例自动重新分配订阅<code>Topic Partiton</code>的过程。<code>Rebalance</code> 是 Kafka 消费端实现高可用的重要手段。</p><img src="kafka从入门到入土.assets/58c35d3ab0921bf0476e3ba14069d291.jpg" alt="img" style="zoom: 20%;" /><h3 id="三层消息架构"><a href="#三层消息架构" class="headerlink" title="三层消息架构"></a>三层消息架构</h3><ul><li>第一层：主题层<code>Topic</code><ul><li>每个<code>Topic</code>可以配置<code>M</code>的<code>Partition</code>，而每个<code>Partition</code>又可以配置<code>N</code>个<code>Replica</code></li></ul></li><li>第二层：分区层<code>Partition</code><ul><li>每个<code>Partition</code>下的<code>N</code>个<code>Replica</code>中，只能有一个充当<code>Leader Replica</code>，<code>Leader Replica</code>负责对外提供服务；</li><li>剩下的<code>N-1</code>个<code>Replica</code>，都是作为<code>Follower Replica</code>，<code>Follower Replica</code>只是作为数据冗余，不对外提供服务；</li></ul></li><li>第三层：消息层<ul><li>每个<code>Partition</code>中包含若干消息，每个消息的<code>Offset</code>（注意不是<code>Consumer Offset</code>）都是从0开始，依次递增；</li></ul></li></ul><h3 id="数据持久化（Log）"><a href="#数据持久化（Log）" class="headerlink" title="数据持久化（Log）"></a>数据持久化（Log）</h3><p><code>kafka</code>使用消息日志<code>Log</code>来保存数据，一个<code>Log</code>就是磁盘上一个只能追加写消息的物理文件。</p><p>一个<code>Log</code>包含了多个日志段<code>Log Segment</code>，消息其实是被追加写到最新的<code>Log Segment</code>中的；</p><p>当写满一个<code>Log Segment</code>的时候，会自动切分一个新的<code>Log Segment</code>中，老的<code>Log Segment</code>就会被封存；</p><p><code>kafka</code>会有一个定时任务，定期检查老的<code>Log Segment</code>是否能够被删除，从而释放磁盘空间；</p><h3 id="两种消息模型"><a href="#两种消息模型" class="headerlink" title="两种消息模型"></a>两种消息模型</h3><p>点对点<code>peer to peer</code></p><ul><li>同一个消息只能被下游的一个<code>Consumer</code>消费；</li><li>kafka实现点对点，用到的是<code>Consumer Group</code>的概念</li></ul><p>发布订阅模型<code>pub/sub</code></p><ul><li>我们常用到的其实就是这种发布订阅模型</li></ul><h2 id="发展历史和定位"><a href="#发展历史和定位" class="headerlink" title="发展历史和定位"></a>发展历史和定位</h2><p>kakka既是一个消息引擎系统，同时又是一个分布式流处理平台；</p><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><ul><li><p>是<code>Linkedln</code>公司内部的孵化项目。</p></li><li><p><code>Linkedln</code>一开始是有 数据强实时性处理方面的需求，用了<code>activeMq</code>，但不理想，所以准备自己搞一套。</p></li><li><p><code>Kafka</code> 自诞生伊始是以<strong>消息引擎系统</strong>的面目出现在大众视野中的。如果翻看 <code>0.10.0.0</code> 之前的官网说明，你会发现 <code>Kafka</code> 社区将其清晰地定位为一个分布式、分区化且带备份功能的提交日志<code>Commit Log</code>服务。</p></li><li><p><code>Kafka</code>在设计之初提供三个方面的特性：</p><ul><li>提供一套 API 实现<code>Producer</code>和<code>Consumer</code>；</li><li>降低网络传输和磁盘存储开销；</li><li>实现高伸缩性架构。</li></ul></li><li><p>后来用的人越来越多，<code>kafka</code>思考引入了流处理；</p></li><li><p><code>Kafka</code> 社区于 <code>0.10.0.0</code> 版本正式推出了流处理组件 <code>Kafka Streams</code>，也正是从这个版本开始，<code>Kafka</code> 正式“变身”为分布式的流处理平台，而不仅仅是消息引擎系统了。</p></li></ul><h3 id="与其他的流处理框架的优点"><a href="#与其他的流处理框架的优点" class="headerlink" title="与其他的流处理框架的优点"></a>与其他的流处理框架的优点</h3><ul><li>第一点是更容易实现端到端的正确性<code>Correctness</code></li><li><code>kafka</code>自己对于流式计算的定位</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul><li>消息引擎系统</li><li>流处理平台</li><li>分布式存储系统（很少）</li></ul><h2 id="kafka版本"><a href="#kafka版本" class="headerlink" title="kafka版本"></a>kafka版本</h2><h3 id="发行版本"><a href="#发行版本" class="headerlink" title="发行版本"></a>发行版本</h3><p><code>kafka</code>存在多个不同的发行版本，类似<code>linux</code>系统中的<code>centos</code>，<code>redhat</code>，<code>ununtu</code>等；</p><table><thead><tr><th>类型</th><th>描述</th><th>优点</th><th>缺点</th><th>选择</th></tr></thead><tbody><tr><td>apache kafka</td><td>Apache Kafka 是最“正宗”的 Kafka，是我们学习和使用 Kafka 的基础。</td><td>优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度</td><td>缺陷在于仅提供基础核心组件，缺失一些高级的特性。</td><td>如果你仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，那么我推荐你使用 Apache Kafka。</td></tr><tr><td>Confluent Kafka</td><td>Confluent 公司：2014 年，Kafka 的 3 个创始人 Jay Kreps、Naha Narkhede 和饶军离开 LinkedIn 创办了 Confluent 公司，专注于提供基于 Kafka 的企业级流处理解决方案。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。</td><td>优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；</td><td>缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。</td><td>如果你需要用到 Kafka 的一些高级特性，那么推荐你使用 Confluent Kafka。</td></tr><tr><td>CDH Kafka &#x2F; HDP Kafka</td><td>Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理，不管是 CDH 还是 HDP 里面都集成了 Apache Kafka，因此我把这两款产品中的 Kafka 称为 CDH Kafka 和 HDP Kafka。</td><td>操作简单，节省运维成本</td><td>把控度低，演进速度较慢。</td><td>如果你需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。</td></tr></tbody></table><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>在官网上下载 <code>Kafka</code> 时，会看到这样的版本：</p><img src="kafka从入门到入土.assets/c10df9e6f72126e9c721fba38e27ac23.png" alt="img" style="zoom:80%;" /><p>有些人会误将<code>Scala</code>版本看作是<code>Kafka</code>版本，那么就来解释一下这个版本号</p><ul><li><p><code>2.11/2.12</code>：代表着<code>Kafka</code>源代码的<code>Scala</code>编译器版本</p></li><li><p><code>2.3.0</code>：才是Kafka的版本号，<code>2</code>代表着大版本号；<code>3</code>代表着小版本号；<code>0</code>代表着修订版本号或补丁</p></li></ul><p>Kafka目前经历了7个大版本，0.7、0.8、0.9、0.10、0.11、1.0和2.0，其中小版本与Patch版本很多就不一一列举</p><p>在上面的7个大版本中，在哪个版本进行了重大的改进，来好好看一下</p><img src="kafka从入门到入土.assets/Kafka版本变迁.png" alt="img" style="zoom:80%;" /><h4 id="0-7版本"><a href="#0-7版本" class="headerlink" title="0.7版本"></a>0.7版本</h4><p>这是个“上古”版本，只提供了基础的消息队列功能，还没有提供副本机制</p><h4 id="0-8版本"><a href="#0-8版本" class="headerlink" title="0.8版本"></a>0.8版本</h4><p>正式引入了副本机制，能够比较好地做到消息无丢失，新版本Producer API不稳定</p><h4 id="0-9版本"><a href="#0-9版本" class="headerlink" title="0.9版本"></a>0.9版本</h4><p>添加了基础的安全认证&#x2F;权限；新版本Producer API在这个版本中算比较稳定，但是0.9版的Consumer API BUG超多，即使提到社区也不会有人管，所以千万别用！</p><h4 id="0-10版本"><a href="#0-10版本" class="headerlink" title="0.10版本"></a>0.10版本</h4><p>是里程碑式的大版本，因为该版本引入了Kafka Streams，但还不能生产大规模部署使用，自0.10.2.2版本起，新版本Consumer API算是比较稳定了</p><h4 id="0-11版本"><a href="#0-11版本" class="headerlink" title="0.11版本"></a>0.11版本</h4><p>引入了两个重量级的功能变更：一个是提供幂等性Producer API以及事务（Transaction） API；另一个是对Kafka消息格式做了重构</p><p>Producer实现幂等性以及支持事务都是Kafka实现流处理结果正确性的基石，由于刚推出，事务API有一些Bug，另外事务API主要是为Kafka Streams应用服务的，不建议用</p><p>这个版本中各个大功能组件都变得非常稳定了，国内该版本的用户也很多，应该算是目前最主流的版本之一了</p><p>如果你对1.0版本是否适用于线上环境依然感到困惑，那么至少将你的环境升级到0.11.0.3，因为这个版本的消息引擎功能已经非常完善了</p><h4 id="1-0-x2F-2-0版本"><a href="#1-0-x2F-2-0版本" class="headerlink" title="1.0&#x2F;2.0版本"></a>1.0&#x2F;2.0版本</h4><p>合并说下1.0和2.0版本吧，因为这两个大版本主要还是Kafka Streams的各种改进，在消息引擎方面并未引入太多的重大功能特性</p><p>Kafka Streams的确在这两个版本有着非常大的变化，也必须承认Kafka Streams目前依然还在积极地发展着，如果你是Kafka Streams的用户，至少选择2.0.0版本吧</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>不论你用的是哪个版本，都请尽量保持服务器端版本和客户端版本一致，否则你将损失很多Kafka为你提供的性能优化收益</p><h2 id="kafka生产集群部署"><a href="#kafka生产集群部署" class="headerlink" title="kafka生产集群部署"></a>kafka生产集群部署</h2><p>上面了解了kafka的基本概念之后，下面看一下kafka的生产部署，需要怎么部署</p><p>同时在本小节之后，我们会搭建一个简单的kafka集群，用于后续的学习</p><p>kafka的集群搭建需要考虑一下几个因素</p><table><thead><tr><th>因素</th><th>考量点</th><th>建议</th></tr></thead><tbody><tr><td>操作系统</td><td>操作系统的IO模型</td><td>将kafka部署在linux上</td></tr><tr><td>磁盘</td><td>磁盘的IO性能</td><td>普通环境使用机械硬盘，不需要搭建RAID</td></tr><tr><td>磁盘容量</td><td>根据消息数，留存时间预估磁盘容量</td><td>实际使用中磁盘预留20%~30%的空间</td></tr><tr><td>带宽</td><td>根据实际带宽资源和业务SLA预估服务器数量</td><td>对于千兆网络，建议每台服务器按照700Mbps来计算，避免大流量下的丢包</td></tr></tbody></table><h3 id="操作系统的选择"><a href="#操作系统的选择" class="headerlink" title="操作系统的选择"></a>操作系统的选择</h3><p>操作系统：Windows，Linux，MacOs</p><p>选择：Linux</p><p>为什么：</p><ul><li>IO模型的使用</li><li>网络传输效率</li><li>社区支持度</li></ul><h4 id="IO模型的使用"><a href="#IO模型的使用" class="headerlink" title="IO模型的使用"></a>IO模型的使用</h4><ul><li>阻塞IO</li><li>非阻塞IO</li><li>IO多路复用</li><li>信号驱动IO</li><li>异步IO</li></ul><p>每种IO都有自己的典型使用场景，比如：</p><ul><li>Java中的Socket对象的阻塞模式和非阻塞模式就是对应前两种</li><li>Linux系统的select函数就属于IO多路复用</li><li>大名鼎鼎的epoll介入第三种和第四种之间</li><li>第五种模型，目前很少有Linux支持，然而Windos却在操作系统中提供了叫IOCP线程模型属于第五种</li></ul><p>说完了IO模型，再来看kafka与IO模型的关系</p><ul><li>kafka的底层使用的是java的selector<ul><li>java的selector在linux上的实现机制是：epoll</li><li>而在windos上的实现机制是：select（IO多路复用）</li></ul></li><li>所以，将kafka部署在linux机器上，更有优势</li></ul><h4 id="网络传输效率"><a href="#网络传输效率" class="headerlink" title="网络传输效率"></a>网络传输效率</h4><p>kafka的消息是通过网络传输的，而消息又是保存在磁盘中的，所以kafka非常依赖网络和磁盘的性能；</p><p>而linux恰巧有零拷贝（Zero copy）技术，就是当数据在磁盘和网络进行传输的时候，避免昂贵的的内核态数据拷贝从而实现数据的高速传输；</p><p>而windos要到java8的60更新版本才有这个功能；</p><h4 id="社区的支持度"><a href="#社区的支持度" class="headerlink" title="社区的支持度"></a>社区的支持度</h4><p>社区对于windos版的bug不做承诺，基本不会修复；</p><h3 id="磁盘的选择"><a href="#磁盘的选择" class="headerlink" title="磁盘的选择"></a>磁盘的选择</h3><ul><li>选择机械磁盘：kafka多为顺序读写，规避了机械磁盘的弊端，替换成SSD，效益不大</li><li>不用组RAID：kafka在软件层面通过分区副本保证了高可用，基本不需要磁盘组RAID</li></ul><h3 id="磁盘容量的选择"><a href="#磁盘容量的选择" class="headerlink" title="磁盘容量的选择"></a>磁盘容量的选择</h3><ul><li><p>磁盘容量：kafka的日志有保留时间的概念，根据具体的业务量，消息大小，计算好容量；</p><ul><li><p>新增消息量</p></li><li><p>消息留存时间</p></li><li><p>平均消息大小</p></li><li><p>备份数</p></li><li><p>是否启用压缩（压缩比）</p></li></ul></li></ul><h3 id="带宽的选择"><a href="#带宽的选择" class="headerlink" title="带宽的选择"></a>带宽的选择</h3><p>目前公司普遍的带宽配置都是千兆网（每秒处理1G数据），财大气粗的公司会有万兆网（每秒处理10G数据）；</p><p>假设你公司的机房环境是千兆网络，即 1Gbps，现在你有个业务，其业务目标或 SLA 是在 1 小时内处理 1TB 的业务数据。那么问题来了，你到底需要多少台 Kafka 服务器来完成这个业务呢？</p><p>千兆网络下，单台机器，假设kafka占用70%的带宽（总要为其他进程保留一些资源），稍等，这只是它能使用的最大带宽资源，你不能让 Kafka 服务器常规性使用这么多资源，故通常要再额外预留出 2&#x2F;3 的资源，即单台服务器使用带宽 700Mb &#x2F; 3 ≈ 240Mbps。有了 240Mbps，我们就可以计算 1 小时内处理 1TB 数据所需的服务器数量了。根据这个目标，我们每秒需要处理 2336Mb 的数据，除以 240，约等于 10 台服务器。如果消息还需要额外复制两份，那么总的服务器台数还要乘以 3，即 30 台。</p><h2 id="重要的集群参数配置"><a href="#重要的集群参数配置" class="headerlink" title="重要的集群参数配置"></a>重要的集群参数配置</h2><p>参数配置分为四个方面：</p><ul><li>broker端参数配置</li><li>topic的参数配置</li><li>JVM的参数配置</li><li>操作系统的参数配置</li></ul><h3 id="broker端参数（静态参数）"><a href="#broker端参数（静态参数）" class="headerlink" title="broker端参数（静态参数）"></a>broker端参数（静态参数）</h3><p>静态参数是指修改后需要重启才能生效的参数；</p><p>是配置在 kafka安装的这个机器上的。通过静态的配置文件配置的。</p><h4 id="存储信息类参数"><a href="#存储信息类参数" class="headerlink" title="存储信息类参数"></a>存储信息类参数</h4><p>表示 Broker 使用哪些磁盘</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.dirs</td><td>【没有默认值的，必须手动指定】指定Broker需要使用的若干个文件目录路径，可配置多个</td></tr><tr><td>log.dir</td><td>【一般不用设置，新版本已经取消了】只能配置一个，用来补充上面参数的</td></tr></tbody></table><h4 id="与ZK相关的参数"><a href="#与ZK相关的参数" class="headerlink" title="与ZK相关的参数"></a>与ZK相关的参数</h4><p>ZK负责协调管理并保存 Kafka 集群的所有元数据信息，比如集群都有哪些 Broker 在运行、创建了哪些 Topic，每个 Topic 都有多少分区以及这些分区的 Leader 副本都在哪些机器上等信息</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>zookeeper.connect</td><td>负责协调管理并保存 Kafka 集群的所有元数据信息</td></tr></tbody></table><h4 id="broker连接相关的参数"><a href="#broker连接相关的参数" class="headerlink" title="broker连接相关的参数"></a>broker连接相关的参数</h4><p>表示客户端程序或其他 Broker 如何与该 Broker 进行通信的设置</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>listeners</td><td>告诉外部连接需要通过什么协议访问指定主机名和端口开放的kafka服务（用于内网访问）</td></tr><tr><td>Advertised.listeners</td><td>表明这组监听器是broker对外发布的（用于外网访问）</td></tr><tr><td>host.name&#x2F;port</td><td>这俩参数是过期参数，忘掉</td></tr></tbody></table><h4 id="topic管理的参数"><a href="#topic管理的参数" class="headerlink" title="topic管理的参数"></a>topic管理的参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>auto.create.topics.enable</td><td>是否允许自动创建topic，<br />建议设置成false；</td></tr><tr><td>unclean.leader.election.enable</td><td>是否允许Unclean Leader选举，<br />建议设置为false；<br />kafka的分区有多个副本，并不是所有的副本都有资格竞争Leader，只有保存数据比较多的才有资格；那如果保存数据比较多的副本全都挂了，那还要不要竞选Leader呢？ 就是这个参数控制的；<br />false表示不竞选，后果：分区不可用；<br />true表示竞选；后果：数据不一致；</td></tr><tr><td>auto.leader.rebalance.enable</td><td>是否允许定期进行Leader选举；true表示到达一定条件，kafka会自动把leader换了，注意是换掉，而不是选举；即使原来的leaderA运行的好好地，也会给换成leaderB；换leader的代价很大，建议设置为false；</td></tr></tbody></table><h4 id="数据留存方面的参数"><a href="#数据留存方面的参数" class="headerlink" title="数据留存方面的参数"></a>数据留存方面的参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.retention.{hour|minutes|ms}</td><td>控制一条消息被保留多长时间</td></tr><tr><td>log.retention.bytes</td><td>Broker为保留消息提供的磁盘容量的大小</td></tr><tr><td>message.max.bytes</td><td>控制Broker能够接收的最大的消息大小</td></tr></tbody></table><h3 id="Topic的参数配置"><a href="#Topic的参数配置" class="headerlink" title="Topic的参数配置"></a>Topic的参数配置</h3><p>topic端的参数配置会覆盖broker端的参数配置</p><p>Topic 端的参数是在创建Topic的时候，手动设置的。<a href="#%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9topic%E7%9A%84%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE">怎么修改topic的参数配置</a></p><h4 id="数据留存方面的参数-1"><a href="#数据留存方面的参数-1" class="headerlink" title="数据留存方面的参数"></a>数据留存方面的参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>retention.ms</td><td>规定了该topic下数据的保存时长，默认7天，如果配置了，就会覆盖broker端的配置</td></tr><tr><td>retention.bytes</td><td>规定了要为该topic预留多少磁盘容量空间</td></tr><tr><td>max.message.bytes</td><td>该参数跟 Broker 端的 message.max.bytes 参数的作用是一样的，只不过 max.message.bytes 是作用于某个 topic，而 message.max.bytes 是作用于全局。</td></tr></tbody></table><h4 id="怎么修改topic的参数配置"><a href="#怎么修改topic的参数配置" class="headerlink" title="怎么修改topic的参数配置"></a>怎么修改topic的参数配置</h4><ul><li><p>创建topic的时候设置</p><ul><li><blockquote><p>bin&#x2F;kafka-topics.sh –bootstrap-server localhost:9092 –create –topic transaction –partitions 1 –replication-factor 1 –config retention.ms&#x3D;15552000000 –config max.message.bytes&#x3D;5242880</p></blockquote></li></ul></li><li><p>修改topic的时候设置</p><ul><li><blockquote><p>bin&#x2F;kafka-configs.sh –zookeeper localhost:2181 –entity-type topics –entity-name transaction –alter –add-config max.message.bytes&#x3D;10485760</p></blockquote></li></ul></li></ul><h3 id="JVM的参数配置"><a href="#JVM的参数配置" class="headerlink" title="JVM的参数配置"></a>JVM的参数配置</h3><p>设置kafka的JVM参数，只需要设置环境变量就可以啦。<a href="#%E6%80%8E%E4%B9%88%E5%AF%B9kafka%E8%AE%BE%E7%BD%AEJVM%E5%8F%82%E6%95%B0">怎么对kafka设置JVM参数</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>KAFKA_HEAP_OPTS</td><td>JVM堆大小，建议设置为6GB，默认的1GB太小了</td></tr><tr><td>KAFKA_JVM_PERFORMANCE_OPTS</td><td>指定垃圾回收器<br>在java7下：cpu充足，就用CMS；否则使用ParallelGC<br>在java8下：选择G1</td></tr></tbody></table><h4 id="怎么对kafka设置JVM参数"><a href="#怎么对kafka设置JVM参数" class="headerlink" title="怎么对kafka设置JVM参数"></a>怎么对kafka设置JVM参数</h4><p>指定kafka的环境变量即可</p><ul><li>KAFKA_HEAP_OPTS：指定堆大小</li><li>KAFKA_JVM_PERFORMANCE_OPTS：指定垃圾回收器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span class="token operator">></span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span>--Xms6g  <span class="token parameter variable">--Xmx6g</span>$<span class="token operator">></span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_JVM_PERFORMANCE_OPTS</span><span class="token operator">=</span> <span class="token parameter variable">-server</span> <span class="token parameter variable">-XX:+UseG1GC</span> <span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">20</span> <span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span><span class="token operator">=</span><span class="token number">35</span> <span class="token parameter variable">-XX:+ExplicitGCInvokesConcurrent</span> <span class="token parameter variable">-Djava.awt.headless</span><span class="token operator">=</span>true$<span class="token operator">></span> bin/kafka-server-start.sh config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作系统的参数配置"><a href="#操作系统的参数配置" class="headerlink" title="操作系统的参数配置"></a>操作系统的参数配置</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>文件描述符限制</td><td>ulimit -n；其实设置这个参数不重要，但是不设置后果很严重，会看到too many open file 的报错；</td></tr><tr><td>文件系统类型</td><td>文件系统类型（ext3，ext4，XFS），XFS的性能强于ext4，ZFS的性能强于XFS（但技术比较新，使用很少）</td></tr><tr><td>Swappiness</td><td>网上很多文章都提到设置其为 0，将 swap 完全禁掉以防止 Kafka 进程使用 swap 空间。我个人反倒觉得还是不要设置成 0 比较好，我们可以设置成一个较小的值。为什么呢？因为一旦设置成 0，当物理内存耗尽时，操作系统会触发 OOM killer 这个组件，它会随机挑选一个进程然后 kill 掉，即根本不给用户任何的预警。但如果设置成一个比较小的值，当开始使用 swap 空间时，你至少能够观测到 Broker 性能开始出现急剧下降，从而给你进一步调优和诊断问题的时间。基于这个考虑，我个人建议将 swappniess 配置成一个接近 0 但不为 0 的值，比如 1。</td></tr><tr><td>提交时间（系统的刷盘时间）</td><td>提交时间或者说是 Flush 落盘时间。向 Kafka 发送数据并不是真要等数据被写入磁盘才会认为成功，而是只要数据被写入到操作系统的页缓存（Page Cache）上就可以了，随后操作系统根据 LRU 算法会定期将页缓存上的“脏”数据落盘到物理磁盘上。这个定期就是由提交时间来确定的，默认是 5 秒。一般情况下我们会认为这个时间太频繁了，可以适当地增加提交间隔来降低物理磁盘的写操作。当然你可能会有这样的疑问：如果在页缓存中的数据在写入到磁盘前机器宕机了，那岂不是数据就丢失了。的确，这种情况数据确实就丢失了，但鉴于 Kafka 在软件层面已经提供了多副本的冗余机制，因此这里稍微拉大提交间隔去换取性能还是一个合理的做法。</td></tr></tbody></table><h2 id="分区机制"><a href="#分区机制" class="headerlink" title="分区机制"></a>分区机制</h2><p>对于那种大批量机器组成的集群环境，每分钟产生的日志量都能以 GB 数，因此如何将这么大的数据量均匀地分配到 Kafka 的各个 Broker 上，就成为一个非常重要的问题。</p><p>我们知道 kafka 的数据，是以 Topic 为概念进行存储的，而<code>topic</code>是一个逻辑概念，真正存放数据的是<code>topic</code>下的<code>partition</code>；<code>partition</code>是物理概念；</p><p>一个消息只会保存在一个<code>topic</code>下的一个<code>partition</code>中，不会保存在多个<code>partition</code>中（<code>Replica</code>除外）</p><p>那么，为了保证大数据量的均匀分布，其实就是保证一个<code>topic</code>下的数据量均匀的分散在各个<code>partition</code>中；</p><p>那么问题来了？</p><h3 id="为什么要分区"><a href="#为什么要分区" class="headerlink" title="为什么要分区"></a>为什么要分区</h3><p>为什么要<code>Partiton</code>，为什么<code>kafka</code>不直接存储数据，而是要分区存储？为什么要使用<code>Partiton</code>，而不是直接使用<code>topic</code>？</p><p>分区的目的是为了<strong>负载均衡</strong>；或者说分区的目的是为了<strong>提高系统的可伸缩性</strong>；</p><ul><li>负载均衡<ul><li>如果没有分区，所有的请求全部在一个<code>topic</code>上，请求量大的时候，只对一个磁盘进行大量的读写（分钟<code>GB</code>级别的数据量），可能直接就崩了；</li></ul></li><li>可伸缩性<ul><li>顺丰的<code>kafka</code>一般是32分区，这样每一个<code>Partition</code>都可以有一个<code>consumer</code>，提升系统的吞吐量；当数据量增长的时候，可以扩<code>Partition</code>，32-&gt;64；提升系统的可伸缩性；</li><li>但是一般不建议直接扩<code>Partition</code>，在顺丰，一般是申请新的<code>topic</code>，然后将消息转发到不同的<code>topic</code>中，变相的实现扩<code>Partition</code>；</li><li>因为<code>Partition</code>过多，<code>kafka</code>管理起来很困难，没必要增加不必要的消耗；</li></ul></li><li><code>Partition</code>可以实现业务上的功能（消息的顺序问题）</li></ul><p>以上说了<code>Partiton</code>存在的必要性</p><p>那么既然存在<code>Partiton</code>，怎么保证每个<code>Partiton</code>的数据量的均匀呢，避免数据倾斜？这就涉及到分区的策略</p><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><p>分区策略：就是决定消息被发送到哪个分区</p><table><thead><tr><th>分区策略</th><th>描述</th></tr></thead><tbody><tr><td>轮训</td><td>没有指定<code>partitioner.class</code>这个配置的时候，在没有指定key的时候（消息键保留策略），轮训策略是兜底的</td></tr><tr><td>随机</td><td>使用的很少了，已经被废弃了</td></tr><tr><td>自定义</td><td>需要显示的配置<code>partitioner.class</code>这个配置，同时需要编写代码；</td></tr><tr><td>按消息键保留策略</td><td>按照key的顺序进行存放</td></tr></tbody></table><p>默认分区策略：如果指定了key，按照key分发；没有指定key，按照轮训；</p><h3 id="怎么设置分区策略"><a href="#怎么设置分区策略" class="headerlink" title="怎么设置分区策略"></a>怎么设置分区策略</h3><p><strong>轮训</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">不需要配置，默认的就是这个。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>随机</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">></span></span> partitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>partitions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>按消息键保序策略</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">></span></span> partitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> partitions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>自定义</strong></p><p>比如我想实现：根据 <code>Broker</code> 所在的 <code>IP</code> 地址判断是南方还是北方，实现定制化的分区策略</p><ul><li>编写一个具体的类实现<code>org.apache.kafka.clients.producer.Partitioner</code>接口</li><li>实现其中的两个方法：<code>partition()</code>和<code>close()</code></li><li>显式地配置生产者端的参数<code>partitioner.class</code>为你自己实现类的 <code>Full Qualified Name</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">></span></span> partitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> partitions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token function">isSouth</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">leader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PartitionInfo</span><span class="token operator">::</span><span class="token function">partition</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="消息压缩（消息格式）"><a href="#消息压缩（消息格式）" class="headerlink" title="消息压缩（消息格式）"></a>消息压缩（消息格式）</h2><h3 id="为什么要压缩？"><a href="#为什么要压缩？" class="headerlink" title="为什么要压缩？"></a>为什么要压缩？</h3><p>说起压缩<code>compression</code>，我相信你一定不会感到陌生。它秉承了用时间去换空间的经典 <code>trade-off</code> 思想，具体来说就是用 CPU 时间去换磁盘空间或网络 I&#x2F;O 传输量，希望以较小的 CPU 开销带来更少的磁盘占用或更少的网络 I&#x2F;O 传输。在 <code>Kafka</code> 中，压缩也是用来做这件事的。</p><h3 id="kafka的消息格式"><a href="#kafka的消息格式" class="headerlink" title="kafka的消息格式"></a>kafka的消息格式</h3><p>kafka有两大类消息格式，一类是在<code>0.11.0.0</code>版本之前的消息格式（称作V1版本），一个是<code>0.11.0.0</code>版本之后的格式（称作V2版本）；</p><p>不管是哪个版本，kafka消息层次都是分为两层：</p><table><thead><tr><th>V1版本</th><th>V2版本</th></tr></thead><tbody><tr><td>消息集合（message set） + 消息（message）</td><td>消息集合（record batch） + 消息（record）</td></tr></tbody></table><p>一个消息集合中包含若干个日志项<code>record item</code>，日志项<code>record item</code>才是真正封装消息的地方；（注意这里不要和日志段（<code>Log Segment</code>）混为一谈）</p><p>V2版本对V1版本进行了优化，将日志项<code>record item</code>中一些通用的字段抽出来，放在了消息集合中；</p><p>V2版本对V1版本还有一个关于压缩方面的优化</p><h3 id="怎么压缩"><a href="#怎么压缩" class="headerlink" title="怎么压缩"></a>怎么压缩</h3><p>V2 版本对 V1 版本还有一个关于压缩方面的优化</p><p>V1 版本：是把多条消息进行压缩，然后将压缩后的内容放在外层消息的消息体字段中； </p><p>V2 版本：是对整个消息集合进行压缩，显然V2版本的压缩效率应该更高；</p><p>压缩使用到的是压缩算法：<a href="#%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E7%9A%84%E9%80%89%E6%8B%A9">压缩算法的选择</a></p><h3 id="何时压缩"><a href="#何时压缩" class="headerlink" title="何时压缩"></a>何时压缩</h3><p>在 <code>kafka</code> 中，压缩可能发生在：<code>Producer</code>端和<code>Broker</code>端</p><ul><li><p><code>Producer</code>端【一般都是<code>Producer</code>端做压缩】</p><ul><li>在<code>Producer</code>程序中添加一个配置：<code>compression.type</code> 参数</li><li>compression.type&#x3D;gzip 表示开启gzip压缩</li></ul></li><li><p><code>Broker</code>端</p><ul><li>一般<code>Broker</code>端不会对<code>Producer</code>发出来的消息进行修改；</li><li>有两个例外情况，会让<code>Broker</code>对消息重新压缩<ul><li><code>Broker</code>端和<code>Producer</code>端指定的消息压缩算法不一致（不一致的时候，<code>broker</code>端会对<code>producer</code>端发出来的消息解压然后重新压缩）</li><li><code>Broker</code>端发生了消息格式转换：新老版本消息格式（V1版本和V2版本）兼容的问题</li></ul></li></ul></li></ul><h3 id="何时解压缩"><a href="#何时解压缩" class="headerlink" title="何时解压缩"></a>何时解压缩</h3><ul><li><code>consumer</code>端消费到消息的时候，进行解压缩<ul><li>解压缩的时候，压缩算法是在消息中，用一个字段标识的，所以<code>consumer</code>可以拿到消息之后在解压缩</li></ul></li><li><code>broker</code>端收到<code>producer</code>发出的消息之后，也会解压缩一次，进行消息的校验；</li></ul><h3 id="压缩的时机"><a href="#压缩的时机" class="headerlink" title="压缩的时机"></a>压缩的时机</h3><p>记住这句话：<code>Producer</code>端压缩，<code>Broker</code>端保持，<code>Consumer</code>端解压缩</p><h3 id="压缩算法的选择"><a href="#压缩算法的选择" class="headerlink" title="压缩算法的选择"></a>压缩算法的选择</h3><p>一般看两个指标：压缩比 和 压缩&#x2F;解压缩的吞吐量</p><p>GZIP</p><p>Snappy</p><p>LZ4</p><p>zstd</p><h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><p><code>kafka</code>只对 已提交成功 的消息做有限度的持久化保证；</p><h3 id="什么是消息丢失"><a href="#什么是消息丢失" class="headerlink" title="什么是消息丢失"></a>什么是消息丢失</h3><p>对于<code>Producer</code>来说：消息发不出去，就是丢失；</p><p>对于<code>Consumer</code>来说：消息消费不到，就是丢失；</p><p>对于<code>Broker</code>来说：不存在丢失，<code>Broker</code>会对 已提交成功 的消息，做有限度的持久化；</p><h3 id="什么时候会消息丢失"><a href="#什么时候会消息丢失" class="headerlink" title="什么时候会消息丢失"></a>什么时候会消息丢失</h3><ul><li><code>Producer</code>丢失消息<ul><li><code>producer.send(msg) </code>因为是异步，<code>fire and forget</code> 所以可能会丢消息</li><li>网络抖动、消息不合法被<code>broker</code>拒收（比如：消息体太大）等都会导致消息发送不成功</li></ul></li><li><code>Consumer</code>丢失消息<ul><li>消费的消息不存在了。一般只有先提交<code>offset</code>在消费的场景下会发生；</li><li>多线程处理消息的时候，某一个线程消费失败了，但是<code>offset</code>自动提交了；</li></ul></li></ul><h3 id="怎么保证消息不丢失"><a href="#怎么保证消息不丢失" class="headerlink" title="怎么保证消息不丢失"></a>怎么保证消息不丢失</h3><p>上面几种丢失消息的场景，怎么避免？</p><ul><li>【<code>Producer</code>端】：不要使用 <code>producer.send(msg)</code>，而要使用 <code>producer.send(msg, callback)</code>。一定要使用带有回调通知的 <code>send </code>方法。</li><li>【<code>Producer</code>端】：设置 <code>acks</code> &#x3D; <code>all</code>。是个动态值（如果原来有<code>3</code>个<code>Replica</code>，就要写入<code>3</code>个，如果有<code>1</code>个挂了，那就只需要写入<code>2</code>个），表明所有<code>Replica</code>都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。</li><li>【<code>Producer</code>端】：设置 <code>retries</code> 为一个较大的值。 表示<code>Producer </code>自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，这里开启自动重试，避免消息丢失。（重试会导致消息乱序吗：会）</li><li>【Broker端】：设置 <code>unclean.leader.election.enable</code> &#x3D; <code>false</code>。它控制的是哪些 <code>Replica </code>有资格竞选分区的 <code>Leader</code>。如果一个 <code>Replica </code> 落后原先的 <code>Leader </code>太多，就不要让它竞选，即不允许这种情况的发生。</li><li>【Broker端】：设置<code> replication.factor</code> &gt;&#x3D; <code>3</code>。表示某个分区的<code>Replica</code>总数，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余</li><li>【Broker端】：设置 <code>min.insync.replicas</code> &gt; 1。表示至少写入多少个<code>Replica</code>才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。</li><li>【Broker端】：确保<code> replication.factor</code> &gt; <code>min.insync.replicas</code>。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 <code>replication.factor</code> &#x3D; <code>min.insync.replicas</code> + <code>1</code>。</li><li>【<code>Consumer</code>端】：设置<code>enable.auto.commit</code>&#x3D; <code>false</code>，采用手动提交位移的方式。就像前面说的，这对于单 <code>Consumer </code>多线程处理的场景而言是至关重要的。</li></ul><p>举个例子：</p><p>比如<code>Replica</code>&#x3D;<code>3</code>，设置<code>min.insync.replicas</code>&#x3D;<code>2</code>，<code>acks</code>&#x3D;<code>all</code></p><p>如果<code>Replica</code>都正常工作：此时<code>acks</code>&#x3D;<code>all</code>的约束就是写入<code>3</code>个<code>Replica</code>，才算提交成功，此时满足<code>min.insync.replicas</code>&#x3D;<code>2</code>约束。</p><p>如果<code>Replica</code>挂了<code>1</code>个，此时<code>acks</code>&#x3D;<code>all</code>的约束就是写入<code>2</code>个<code>Replica</code>即可，此时满足<code>min.insync.replicas</code>&#x3D;<code>2</code>约束。</p><p>如果<code>Replica</code>挂了<code>2</code>个，此时<code>acks</code>&#x3D;<code>all</code>的约束就是写入<code>1</code>个<code>Replica</code>即可，此时不满足<code>min.insync.replicas</code>&#x3D;<code>2</code>这个下限约束，写入失败。</p><p>补充：</p><blockquote><p>设置 ack &#x3D; all，其实就是需要保证 ISR 集合中所有的 Replica 都写入成功才能返回</p></blockquote><p>公司的生产者的设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">KafkaProducer24</span><span class="token punctuation">(</span><span class="token class-name">String</span> brokers<span class="token punctuation">,</span> <span class="token class-name">ProduceOptionalConfig</span> extraConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>extraConfig <span class="token operator">=</span> extraConfig <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ProduceOptionalConfig</span><span class="token punctuation">.</span>defaultConfig <span class="token operator">:</span> extraConfig<span class="token punctuation">;</span>    <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> brokers<span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.ByteArraySerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span> <span class="token string">"默认是Leader Replica收到就行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request.timeout.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是30000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"compression.type"</span><span class="token punctuation">,</span> <span class="token string">"snappy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"batch.size"</span><span class="token punctuation">,</span> <span class="token string">"默认是16384"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"linger.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>Kafka 拦截器自<code> 0.10.0.0</code> 版本被引入后并未得到太多的实际应用，我也从未在任何 Kafka 技术峰会上看到有公司分享其使用拦截器的成功案例。</p><p>拦截器是一个小众功能。</p><p>Kafka 拦截器分为生产者拦截器和消费者拦截器</p><h3 id="生产者拦截器"><a href="#生产者拦截器" class="headerlink" title="生产者拦截器"></a>生产者拦截器</h3><p>开发：实现<code>org.apache.kafka.clients.producer.ProducerInterceptor</code>这个接口，这个接口有俩方法</p><ul><li><code>onSend</code>：消息真正发给broker之前</li><li><code>onAcknowledgement</code>：消息提交成功之后，在<code>callback</code>之前</li></ul><h3 id="消费者拦截器"><a href="#消费者拦截器" class="headerlink" title="消费者拦截器"></a>消费者拦截器</h3><p>开发：实现<code>org.apache.kafka.clients.consumer.ConsumerInterceptor</code>这个接口，这个接口有俩方法</p><ul><li><code>onConsume</code>：在消费者真正处理消息之前</li><li><code>onCommit</code>：消费者处理完消息，提交offset之后</li></ul><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>拦截器开发完成了，怎么让它生效呢？</p><p>当前 Kafka 拦截器的设置方法是通过参数配置完成的</p><p>生产者和消费者两端有一个相同的参数，名字叫 interceptor.classes，它指定的是一组类的列表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"com.yourcompany.kafkaproject.interceptors.AddTimestampInterceptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截器1</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"com.yourcompany.kafkaproject.interceptors.UpdateCounterInterceptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截器2</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">INTERCEPTOR_CLASSES_CONFIG</span><span class="token punctuation">,</span> interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生产者与TCP连接"><a href="#生产者与TCP连接" class="headerlink" title="生产者与TCP连接"></a>生产者与TCP连接</h2><h3 id="为什么采用TCP作为底层传输协议"><a href="#为什么采用TCP作为底层传输协议" class="headerlink" title="为什么采用TCP作为底层传输协议"></a>为什么采用TCP作为底层传输协议</h3><p>TCP 拥有一些高级功能，如多路复用请求和同时轮询多个连接的能力。</p><p>多路复用请求：multiplexing request，是将两个或多个数据合并到底层—物理连接中的过程。TCP 的多路复用请求会在一条物理连接上创建若干个虚拟连接，每个虚拟连接负责流转各自对应的数据流。严格讲：TCP 并不能多路复用，只是提供可靠的消息交付语义保证，如自动重传丢失的报文。</p><h3 id="生产者是什么时候创建TCP连接的"><a href="#生产者是什么时候创建TCP连接的" class="headerlink" title="生产者是什么时候创建TCP连接的"></a>生产者是什么时候创建TCP连接的</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“参数<span class="token number">1</span>”<span class="token punctuation">,</span> “参数<span class="token number">1</span>的值”<span class="token punctuation">)</span>；props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“参数<span class="token number">2</span>”<span class="token punctuation">,</span> “参数<span class="token number">2</span>的值”<span class="token punctuation">)</span>；……<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Producer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>……<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  ……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对上面的代码，能创建TCP连接的只有两个地方，一是 Producer 实例化的时候；一是 producer.send 的时候；</p><ul><li><strong>Kafka 是在 Producer 实例化的时候与 Broker 建立的 TCP 连接</strong></li><li>所以，当 producer.send 的时候，其实已经有TCP连接了</li></ul><p>扩展：除了在 Producer 实例化的时候与 Broker 建立的 TCP 连接之外，还有没有其他情况？</p><ul><li>有，有两个情况，也会创建TCP连接</li><li><strong>元数据更新时，会与元数据中没有连接的 Broker 建立 TCP 连接；</strong><ul><li>每隔5分钟， Producer 会定期从 Broker 中获取元数据信息</li><li>Producer 尝试给一个不存在的 Topic 发送消息时，Broker 会说这个 Topic 不存在，然后 Producer 会请求 Broker 更新元数据信息</li></ul></li><li><strong>在消息发送时，如果 Producer 发现与要发送消息的 Topic 所在的 Broker 没有 TCP 连接，就会创建连接；</strong></li></ul><h3 id="是怎么创建TCP连接的"><a href="#是怎么创建TCP连接的" class="headerlink" title="是怎么创建TCP连接的"></a>是怎么创建TCP连接的</h3><p>在创建 KafkaProducer 实例时，生产者应用会在后台创建并启动一个名为 Sender 的线程，该 Sender 线程开始运行时首先会创建与 Broker 的TCP连接。</p><p>Broker有1000个，bootstrap.servers 要配置1000个嘛？ 不需要，因为 Producer 一旦连接到集群中的任一台 Broker，就能拿到整个集群的 Broker 信息。</p><h3 id="TCP连接是什么时候被关闭的"><a href="#TCP连接是什么时候被关闭的" class="headerlink" title="TCP连接是什么时候被关闭的"></a>TCP连接是什么时候被关闭的</h3><ul><li>用户主动关闭，调用 producer.close</li><li>Kafka自动关闭（虽然是producer端设置的参数，但实际上，是broker关闭的TCP连接）：与 Producer 端参数 connections.max.idle.ms 的值有关。默认情况下该参数值是 9 分钟，即如果在 9 分钟内没有任何请求“流过”某个 TCP 连接，那么 Kafka 会主动帮你把该 TCP 连接关闭。用户可以在 Producer 端设置 connections.max.idle.ms&#x3D;-1 禁掉这种机制。一旦被设置成 -1，TCP 连接将成为永久长连接。</li></ul><h3 id="会存在的一些问题"><a href="#会存在的一些问题" class="headerlink" title="会存在的一些问题"></a>会存在的一些问题</h3><ul><li>producer每5分钟获取一些元数据，然后与元数据中没有连接的broker建立TCP连接，然后9分钟后，broker会中断空闲的连接，然后5分钟后，在此建立连接；9分钟后，再次中断连接；</li></ul><h2 id="消费者与TCP连接"><a href="#消费者与TCP连接" class="headerlink" title="消费者与TCP连接"></a>消费者与TCP连接</h2><h3 id="消费者是什么时候创建TCP连接的"><a href="#消费者是什么时候创建TCP连接的" class="headerlink" title="消费者是什么时候创建TCP连接的"></a>消费者是什么时候创建TCP连接的</h3><ul><li>生产者是在new KakfaProducer的时候，后台开启一个Sender的线程用来创建TCP连接的；</li><li>消费者<strong>不是</strong>在实例化的时候创建的，而是在开始消费消息的时候（consumer.poll）才主动创建TCP连接，准确的说有三个时机<ul><li>发起 FindCoordinator 请求时（连接的brokerId是-1，因为不知道连哪一个）</li><li>连接协调者的时候（连接的brokerId是 <code>Interger.Max - 协调者所在broker的Id号</code> ，为什么这么设计，为了防止连接重用）</li><li>真正消费消息的时候（连接某个topic的某个分区的leader副本所在的broker）</li></ul></li></ul><h3 id="创建多少个TCP连接"><a href="#创建多少个TCP连接" class="headerlink" title="创建多少个TCP连接"></a>创建多少个TCP连接</h3><p>会创建三类TCP连接</p><ul><li>FindCoordinator 请求与任意一个 Broker 的 TCP 连接</li><li>与 Coordinator 的连接，此时消费者才能真正的开始工作</li><li>与 Partition 所在leader副本的TCP连接，拉取消息，真正开始处理</li></ul><p>其中第一类（FIndCoordinator请求与任意一个Broker的连接）会在消费者真正开始处理消息的时候，也就是后面两类TCP连接建立好之后，第一类连接会被关闭掉；</p><h3 id="消费者是什么时候关闭TCP连接的"><a href="#消费者是什么时候关闭TCP连接的" class="headerlink" title="消费者是什么时候关闭TCP连接的"></a>消费者是什么时候关闭TCP连接的</h3><p>上面说的三类连接，其中第一类连接会在二，三类连接创建好之后，被关闭掉；</p><p>二，三类连接的关闭场景有两种：</p><ul><li>主动关闭，这个不说了</li><li>kafka自动关闭，由 消费者端参数connection.max.idle.ms控制。当超过指定时间，该消费者没有消息消费时，就会被关闭连接（但是如果我们的消费逻辑是while循环的情况，则永远不会被关闭，因为一直与broker保持通信，实现了“长链接”的效果）</li></ul><h3 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h3><p>第一类 TCP 连接仅仅是为了首次获取元数据而创建的，后面就会被废弃掉。最根本的原因是，消费者在启动时还不知道 Kafka 集群的信息，只能使用“-1” 去注册，即使消费者获取了真实的 Broker ID，它依旧无法区分这个“-1”对应的是哪台 Broker，因此也就无法重用这个 Socket 连接，只能再重新创建一个新的连接。</p><p>为什么会出现这种情况呢？主要是因为目前 Kafka 仅仅使用 ID 这一个维度的数据来表征 Socket 连接信息。这点信息明显不足以确定连接的是哪台 Broker，也许在未来，社区应该考虑使用 &lt; 主机名、端口、ID&gt; 三元组的方式来定位 Socket 资源，这样或许能够让消费者程序少创建一些 TCP 连接。</p><p>也许你会问，反正 Kafka 有定时关闭机制，这算多大点事呢？其实，在实际场景中，我见过很多将 connection.max.idle.ms 设置成 -1，即禁用定时关闭的案例，如果是这样的话，这些 TCP 连接将不会被定期清除，只会成为永久的“僵尸”连接。基于这个原因，社区应该考虑更好的解决方案。</p><h2 id="幂等和事务生产者"><a href="#幂等和事务生产者" class="headerlink" title="幂等和事务生产者"></a>幂等和事务生产者</h2><h3 id="消息交付可靠性"><a href="#消息交付可靠性" class="headerlink" title="消息交付可靠性"></a>消息交付可靠性</h3><p>所谓的消息交付可靠性，是指<code>kafka</code>对<code>Producer</code>和<code>Consumer</code>要处理的消息，提供什么样的承诺：</p><ul><li><p><code>最多一次</code>：消息只会被发送一次，可能会丢失，绝不会重复</p></li><li><p><code>至少一次</code>（默认）：发送消息的时候，至少要有一次broker明确告知已经提交的callback，消息可能重复，但不会丢失</p></li><li><p><code>精确一次</code>：消息不会丢失，也不会重复</p></li></ul><h3 id="幂等和事务的概念"><a href="#幂等和事务的概念" class="headerlink" title="幂等和事务的概念"></a>幂等和事务的概念</h3><p>略</p><h3 id="幂等生产者"><a href="#幂等生产者" class="headerlink" title="幂等生产者"></a>幂等生产者</h3><p>在 Kafka 中，<code>Producer </code>默认不是幂等性的，但我们可以创建幂等性 <code>Producer</code>。</p><p>在没有幂等之前，<code>Producer</code>向一个<code>Partition</code>发送消息，可能会出现同一条消息被多次发送的情况，导致消息重复</p><p>在有了幂等之后，<code>Producer</code>向一个<code>Partition</code>发送消息，发送一次和发送多次，由于幂等存在，在当前这一个<code>Partition</code>内消息不会重复</p><h4 id="幂等生产者的使用方式"><a href="#幂等生产者的使用方式" class="headerlink" title="幂等生产者的使用方式"></a>幂等生产者的使用方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“enable<span class="token punctuation">.</span>idempotence”<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>或props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ENABLE_IDEMPOTENCE_CONFIG</span>， <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置 <code>enable.idempotence = true</code> 后，<code>Producer </code>自动升级成幂等性 <code>Producer</code></p><p>如果把 <code>enable.idempotence = true</code> ，则一定要设置<code>ack = all</code>，否则会报错：Must set acks to all in order to use the idempotent producer. Otherwise we cannot guarantee idempotence</p><p>其他所有的代码逻辑都不需要改变。</p><p>Kafka 自动做消息的重复去重</p><p>公司并没有使用幂等生产者，以下是公司的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">KafkaProducer24</span><span class="token punctuation">(</span><span class="token class-name">String</span> brokers<span class="token punctuation">,</span> <span class="token class-name">ProduceOptionalConfig</span> extraConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>extraConfig <span class="token operator">=</span> extraConfig <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ProduceOptionalConfig</span><span class="token punctuation">.</span>defaultConfig <span class="token operator">:</span> extraConfig<span class="token punctuation">;</span>    <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> brokers<span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.ByteArraySerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span> <span class="token string">"默认是Leader Replica收到就行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request.timeout.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是30000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"compression.type"</span><span class="token punctuation">,</span> <span class="token string">"snappy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"batch.size"</span><span class="token punctuation">,</span> <span class="token string">"默认是16384"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"linger.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="幂等生产者的实现原理"><a href="#幂等生产者的实现原理" class="headerlink" title="幂等生产者的实现原理"></a>幂等生产者的实现原理</h4><ul><li>Producer 在每次启动后，都会向 Broker 申请一个全局一个唯一的 pid ，用来标识本次会话</li><li>V2版本的消息格式增加了 sequence number 字段， producer 每发一批消息， seq 就加1</li><li>broker 在内存中会维护 &lt;pid, topic, partition, seq&gt; 映射，收到消息后检查 seq ，如果：<ul><li>new_seq &#x3D; old_seq + 1 ：正常消息</li><li>new_seq &lt;&#x3D; old_seq ：重复消息</li><li>new_seq &gt; old_seq + 1 ： 消息丢失</li></ul></li></ul><h4 id="幂等生产者的作用范围"><a href="#幂等生产者的作用范围" class="headerlink" title="幂等生产者的作用范围"></a>幂等生产者的作用范围</h4><p>只能实现单Session上的幂等性</p><ul><li>因为<code>Producer</code>的每次重启，都会向<code>Broker</code>申请一个新的全局唯一的<code>pid</code>，用来标识本次会话</li><li><code>Producer</code>在不同<code>Session</code>上的<code>pid</code>不一样，是幂等不能跨<code>Session</code>的主要原因。</li></ul><p>只能保证单分区上的幂等性</p><ul><li>因为<code>Broker</code>端维护的映射是<code>Partiton</code>粒度的，所以只能保证单分区上的幂等性</li></ul><p>那么你可能会问，如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。</p><h3 id="事务生产者"><a href="#事务生产者" class="headerlink" title="事务生产者"></a>事务生产者</h3><p>如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。</p><p>这也是幂等性 Producer 和事务型 Producer 的最大区别！</p><p>在 Kafka 中，<code>Producer </code>默认不是幂等性的，同时默认也不是事务的。</p><p>Kafka 自 0.11 版本开始也提供了对事务的支持，它能保证多条消息原子性地写入到目标分区，同时也能保证 Consumer 只能看到事务成功提交的消息。</p><h4 id="事务生产者的使用方式"><a href="#事务生产者的使用方式" class="headerlink" title="事务生产者的使用方式"></a>事务生产者的使用方式</h4><p>要想使用kafka的事务，需要同时设置<code>Producer</code>和<code>Consumer</code></p><p><strong>设置Producer</strong></p><p>设置事务型 Producer 的方法也很简单，满足两个要求即可：</p><ul><li>和幂等性 Producer 一样，开启 <code>enable.idempotence = true</code></li><li>设置 Producer 端参数<code> transactional.id</code>。最好为其设置一个有意义的名字。</li><li>在发送消息的时候，需要显示的开启<code>beginTransaction</code>和提交<code>commitTransaction</code>事务</li><li>消息1和消息2，要么全部成功，要么全部失败</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建事务生产者</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“enable<span class="token punctuation">.</span>idempotence”<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“transactional<span class="token punctuation">.</span>id”<span class="token punctuation">,</span> <span class="token string">"my-transcation-id-zs"</span><span class="token punctuation">)</span>producer<span class="token punctuation">.</span><span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化事务</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    producer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启事务</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送消息1</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送消息2</span>    producer<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交事务</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KafkaException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    producer<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止事务</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置Consumer</strong></p><ul><li>为什么要设置，因为事务型<code>Producer</code>即使发送失败了，也会写到kakfa日志中，会被<code>Consumer</code>消费到；</li><li>设置<code>Consumer</code>的 <code>isolation.level</code>参数<ul><li><code>read_uncommitted</code>：读未提交，这是默认值，表明 Consumer 能够读取到 Kafka 写入的任何消息，不论事务型 Producer 提交事务还是终止事务，其写入的消息都可以读取。</li><li><code>read_committed</code>：读已提交，表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看到非事务型 Producer 写入的所有消息。</li></ul></li></ul><h4 id="事务生产者的实现原理"><a href="#事务生产者的实现原理" class="headerlink" title="事务生产者的实现原理"></a>事务生产者的实现原理</h4><p>待补充</p><h2 id="消费者组和独立消费者"><a href="#消费者组和独立消费者" class="headerlink" title="消费者组和独立消费者"></a>消费者组和独立消费者</h2><p>Kafka 为了实现点对点（同一个消息只能被下游的一个 Consumer 消费），使用了<code>Consumer Group</code>的概念；</p><p>那么什么是<code>Consumer Group</code>呢，我们具体看一下</p><p><code>Consumer Group</code>：多个 Consumer 实例组成一组消费某一个 Topic，这个 Topic 下的一条消息只能被组中的一个 Consumer 实例消费；</p><h3 id="什么是消费者组"><a href="#什么是消费者组" class="headerlink" title="什么是消费者组"></a>什么是消费者组</h3><p><code>Consumer Group</code> 是 Kafka 提供的可扩展且具有容错性的消费者机制。</p><p>组内有多个消费者实例（Consumer Instance），它们共享一个公共的 Group ID。</p><p>组内的所有消费者实例（Consumer Instance）一起消费订阅的主题（Subscribed Topics）的所有分区（Partition）。</p><p>当然，该 Topic 的每个 Partition 只能由同一个消费者组内的一个 Consumer 实例来消费。</p><h3 id="为什么要引入消费者组"><a href="#为什么要引入消费者组" class="headerlink" title="为什么要引入消费者组"></a>为什么要引入消费者组</h3><p>为了提升吞吐量，假设 Topic 的消息的生产速率不变，增加消费者实例，就可以提升吞吐量；</p><h3 id="消费者的重平衡"><a href="#消费者的重平衡" class="headerlink" title="消费者的重平衡"></a>消费者的重平衡</h3><p>当组内的某一个消费者实例挂了，kafka会自动重平衡；将这个死亡的消费者实例原先消费的分区，转移给存活的消费者实例；</p><p>后面会详细介绍：<a href="#%E9%87%8D%E5%B9%B3%E8%A1%A1">重平衡</a></p><h3 id="消费者组的特性是什么"><a href="#消费者组的特性是什么" class="headerlink" title="消费者组的特性是什么"></a>消费者组的特性是什么</h3><ul><li><code>Consumer Group</code> 下可以有一个或多个 Consumer 实例。这里的实例可以是一个单独的进程，也可以是同一进程下的线程。在实际场景中，使用进程更为常见一些。</li><li><code>Group ID</code> 是一个字符串，在一个 Kafka 集群中，它标识唯一的一个 Consumer Group。</li><li><code>Consumer Group</code>所订阅的 Topic ，该 Topic 下的某<strong>一个</strong> Partition ，只能分配给组内的某<strong>一个</strong> Consumer 实例消费。当然，这个 Partition 也可以被其他的 Group 消费。</li></ul><h3 id="传统的消息引擎模型"><a href="#传统的消息引擎模型" class="headerlink" title="传统的消息引擎模型"></a>传统的消息引擎模型</h3><ul><li>点对点：一个消息只能被一个消费者消费到</li><li>发布订阅：一个 Topic 下的消息，可以被订阅该 Topic 的所有消费者都消费到</li><li>kafka使用消费者组，实现了两种消息引擎模型； <ul><li>如果所有的消费者属于一个消费者组，那就是点对点</li><li>如果所有的消费者属于不同的消费者组，那就是发布订阅</li></ul></li></ul><h3 id="消费者组的使用方式"><a href="#消费者组的使用方式" class="headerlink" title="消费者组的使用方式"></a>消费者组的使用方式</h3><p>待补充，补充一个代码</p><h3 id="消费者组是如何维护offset的"><a href="#消费者组是如何维护offset的" class="headerlink" title="消费者组是如何维护offset的"></a>消费者组是如何维护offset的</h3><p>对于一个单独的消费者来说，offset就是一个数值；</p><p>但是对于一个消费者组来说，因为组内有多个消费者，那么消费者组维护offset是通过一个map来维护的，这个map简单的可以理解为是：Map&lt;TopicPartition,Long&gt;</p><p>对于老版本的kafka来说，offset是保存在zk中的，但是后来kafka的开发者发现，offset的更新太过于频繁，频繁的封信会拖慢zk的性能，所以在新版本的kafka中，offset是保存在broker内部的一个特殊的topic中的(__consumer_offset)。</p><p>下面我们来看看这个特殊的 Topic：位移主题（__consumer_offset）</p><h3 id="独立消费者"><a href="#独立消费者" class="headerlink" title="独立消费者"></a>独立消费者</h3><p>在 Kafka 中，消费消息除了使用 消费者组 Consumer Group 外，还有一种消费者会被使用，但是在业务场景中，使用的不多，一般是从在 Kafka 的流处理中。</p><p>它是：独立消费者 Standalone Consumer</p><p>1、请问Standalone Consumer 的独立消费者一般什么情况会用到 </p><ul><li>很多流处理框架的Kafka connector都没有使用consumer group，而是直接使用standalone consumer，因为group机制不好把控</li></ul><p>2、Standalone Consumer 的独立消费者 使用跟普通消费者组有什么区别的。</p><ul><li>standalone consumer没有rebalance，也没有group提供的负载均衡，你需要自己实现。其他方面（比如位移提交）和group没有太大的不同</li></ul><p>3、如果使用 Standalone Consumer，是不是也不会发生 rebalance 了？</p><ul><li>standalone consumer就没有rebalance一说了。 它的特点主要是灵活。虽然社区一直在改进rebalance的性能，但大数据量下consumer group机制依然有很多弊病（比如rebalance太慢等），所以很多大数据框架(Spark &#x2F;Flink)的kafka connector并不使用group机制，而是使用standalone consumer</li></ul><h2 id="位移和位移主题"><a href="#位移和位移主题" class="headerlink" title="位移和位移主题"></a>位移和位移主题</h2><p>位移在 Kafka 中是一个很重要的概念，分为：消费者位移（Consumer Offset）和分区位移（Offset）：<a href="#%E5%90%8D%E8%AF%8D%E6%9C%AF%E8%AF%AD">名词术语</a></p><h3 id="消费者位移和分区位移"><a href="#消费者位移和分区位移" class="headerlink" title="消费者位移和分区位移"></a>消费者位移和分区位移</h3><p>消费者位移（Consumer Offset）：消费者位移是随时变化的，毕竟它是消费者消费进度的指示器嘛。</p><p>分区位移（Offset）：表示的是分区内的消息位置，它是不变的，即一旦消息被成功写入到一个分区上，它的位移值就是固定的了。</p><p>举个例子：</p><p>一个消息发送到kafka集群，kafka就会给这个消息并一个编号，这个编号就是“分区位移”；而且这个“分区位移”是固定不变的；</p><p>当有消费者消费的时候，消费者会记录我自己消费到了哪里，这个就是消费者位移；（消息者位移其实并不是记录在消费者端的，而是记录在zk或者kafka中的）；</p><p>分区位移是一个常量，在消息写入到 Partition 中之后，就不变了。所以分区位移没什么好研究的。</p><p>我们主要看一看：消费者位移</p><h3 id="消费者位移"><a href="#消费者位移" class="headerlink" title="消费者位移"></a>消费者位移</h3><p>之前介绍过，消费者组是怎么维护 消费者位移（Consumer Offset） 的，在低版本中，Consumer Offset 是维护在 ZK 中的，在后续版本中，是记录在 Broker 中的一个特殊的 Topic 中，这个 Topic 叫做：位移主题（__consumer_offset）</p><p>__consumer_offsets 在 Kafka 源码中有个更为正式的名字，叫位移主题，即 Offsets Topic。</p><h3 id="位移主题"><a href="#位移主题" class="headerlink" title="位移主题"></a>位移主题</h3><h4 id="为什么会有位移主题"><a href="#为什么会有位移主题" class="headerlink" title="为什么会有位移主题"></a>为什么会有位移主题</h4><p>对于老版本的 Kafka 来说，Consumer Offset 是保存在 ZK 中的，但是后来 Kafka 的开发者发现，Consumer Offset 的更新太过于频繁，频繁的更新会拖慢 ZK 的性能，所以在新版本的 Kafka 中，Consumer Offset 是保存在 Broker 内部的一个特殊的 Topic 中的：__consumer_offset</p><h4 id="位移主题是什么"><a href="#位移主题是什么" class="headerlink" title="位移主题是什么"></a>位移主题是什么</h4><p>是 Kafka 中的一个内部 Topic</p><p>这个 Topic 的主要作用是用来管理 Consumer Offset</p><p>Consumer Offset 管理机制其实很简单，就是将 Consumer 的位移数据作为一条条普通的 Kafka 消息，发送到 __consumer_offsets 中。</p><p>可以这么说，__consumer_offsets 的主要作用是保存 Kafka 消费者的位移信息。</p><h4 id="位移主题什么时候创建"><a href="#位移主题什么时候创建" class="headerlink" title="位移主题什么时候创建"></a>位移主题什么时候创建</h4><p>当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题。</p><h4 id="位移主题的分区和副本"><a href="#位移主题的分区和副本" class="headerlink" title="位移主题的分区和副本"></a>位移主题的分区和副本</h4><p>我们知道 __consumer_offset 虽然是内部 Topic，但是它仍然是一个 Topic ，既然是 Topic ，那么它的分区数和副本是多少呢？</p><ul><li>分区数：50；由Broker 端参数 offsets.topic.num.partitions指定</li><li>副本数：3；由Broker 端参数 offsets.topic.replication.factor指定</li></ul><h4 id="位移主题中存了什么"><a href="#位移主题中存了什么" class="headerlink" title="位移主题中存了什么"></a>位移主题中存了什么</h4><p>存了三类消息</p><ul><li>位移消息：表示当前消费者组消费的位移信息</li><li>用于保存 Consumer Group 信息的消息：比较神秘，几乎无法在搜索引擎中搜到。不过，你只需要记住它是用来注册 Consumer Group 的就可以了。</li><li>用于删除 Group 过期位移甚至是删除 Group 的消息：tombstone 消息，即墓碑消息，也称 delete mark</li></ul><p><strong>位移消息</strong></p><p>之前说过，Kafka 中有两种消息格式，<a href="#kafka%E7%9A%84%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F">kafka的消息格式</a>，那么位移主题的消息格式，其实是 Kafka 自定义的特殊消息格式。</p><p>既然是自定义的消息格式，也就说明：开发者不能随意的向这个主题发送消息，因为一旦你写入的消息不满足 Kafka 规定的格式，那么 Kafka 内部无法成功解析，就会造成 Broker 的崩溃。</p><p>那么这个主题存的到底是什么格式的消息呢？</p><p>事实上， Kafka 自定义的位移主题消息格式，其实是一个 KV 结构</p><p>K：保存 3 部分内容：&lt;Group ID，主题名，分区号&gt;  （即使是单个消费者（Standalone Consumer），也是会有groupid的）</p><p>V：Offset</p><p><strong>墓碑消息</strong></p><p>墓碑消息只出现在源码中而不暴露给你。</p><p>它的主要特点是它的消息体是 null，即空消息体。</p><p>那么，何时会写入这类消息呢？</p><p>一旦某个 Consumer Group 下的所有 Consumer 实例都停止了，而且它们的 Consumer Offset 数据都已被删除时，Kafka 会向位移主题的对应分区写入 tombstone 消息，表明要彻底删除这个 Consumer Group 的信息。</p><h4 id="怎么提交offset到位移主题"><a href="#怎么提交offset到位移主题" class="headerlink" title="怎么提交offset到位移主题"></a>怎么提交offset到位移主题</h4><p>Kafka Consumer 提交 Offset 时会写入  __consumer_offset 这个 Topic</p><p>那 Consumer 是怎么提交位移的呢？</p><p>目前 Kafka Consumer 提交位移的方式有两种：自动提交位移和手动提交位移。</p><h5 id="自动提交位移"><a href="#自动提交位移" class="headerlink" title="自动提交位移"></a>自动提交位移</h5><ul><li>设置 Consumer 端参数：enable.auto.commit</li><li>设置 Consumer 端参数：auto.commit.interval.ms</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"auto.commit.interval.ms"</span><span class="token punctuation">,</span> <span class="token string">"2000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>     consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"offset = %d, key = %s, value = %s%n"</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="手动提交位移"><a href="#手动提交位移" class="headerlink" title="手动提交位移"></a>手动提交位移</h5><ul><li>设置 Consumer 端参数：enable.auto.commit</li><li>然后我们就需要手动提交位移了，手动提交位移，Kafka提供了两种方式：同步提交方式和异步提交方式</li></ul><h6 id="同步提交方式"><a href="#同步提交方式" class="headerlink" title="同步提交方式"></a>同步提交方式</h6><ul><li>KafkaConsumer#commitSync()</li><li>提交失败了，会自动重试，再次提交，所以会影响消费性能</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理消息</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CommitFailedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理提交失败异常</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="异步提交方式"><a href="#异步提交方式" class="headerlink" title="异步提交方式"></a>异步提交方式</h6><ul><li>KafkaConsumer#commitAsync()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理消息</span>    consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>offsets<span class="token punctuation">,</span> exception<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">handle</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="同步提交方式-异步提交方式"><a href="#同步提交方式-异步提交方式" class="headerlink" title="同步提交方式+异步提交方式"></a>同步提交方式+异步提交方式</h6><ul><li>同步会出现的问题：是阻塞的，会降低 Consumer 的 TPS ；好处是会自动重试，提交不成功的话，不会拉取新的消息；</li><li>异步会出现的问题：提交异常的话，不会重试；会导致消息重复消费</li><li>怎么办呢？结合两者，先使用异步提交一次，如果失败了，finally里使用同步方式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">process</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理消息</span>        <span class="token function">commitAysnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用异步提交规避阻塞</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">handle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理异常</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后一次提交使用同步阻塞式提交</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="公司内部使用"><a href="#公司内部使用" class="headerlink" title="公司内部使用"></a>公司内部使用</h5><p>在公司内部默认是使用：手动提交位移</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>optionalConfig<span class="token punctuation">.</span><span class="token function">isTransactional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumeOptionalConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//....</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> transactional <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然公司内部使用的手动提交，那么在哪里提交的位移呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">commitInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//公司是为：每一个Consumer开了一个线程，后台手动提交位移</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commitOffsetThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionalConsumer<span class="token punctuation">.</span>CommitOffsetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commitOffsetThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这是线程真正提交位移的方式，提交到 ZK 的</span><span class="token keyword">long</span> nextOffset <span class="token operator">=</span> currentOffset <span class="token operator">+</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ZookeeperConsumerConnector</span><span class="token punctuation">)</span><span class="token class-name">TransactionalConsumer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>connector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitOffsetToZooKeeper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicAndPartition</span><span class="token punctuation">(</span><span class="token class-name">TransactionalConsumer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">)</span><span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"commit offset: topic:%s, partition:%d, nextOffset: %s"</span><span class="token punctuation">,</span> <span class="token class-name">TransactionalConsumer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Offset提交导致的问题"><a href="#Offset提交导致的问题" class="headerlink" title="Offset提交导致的问题"></a>Offset提交导致的问题</h5><p>上面说了 Offset 的提交，有两种方式：自动提交和手动提交，手动提交又分为：同步提交和异步提交</p><p>那么它们会导致什么问题呢？会不会导致消息的丢失消费和消息的重复消费？</p><p><strong>自动提交</strong></p><ul><li>自动提交会导致消息的丢失</li><li>自动提交会导致消息的重复消费</li></ul><p>为什么会导致丢失？是因为消息消费的流程是：Concumer 先 Pull 一部分消息到内存中，然后开始消费，但是需要提交给 Broker 的 Offset 是Pull下来的最大的Offset，由于提交 Offset 是自动的，有可能 Pull 下来的消息还没有消费完，Offset 已经提交了；然后如果从内存中消费出现了问题，那么会导致内存中剩余没消费就永远不会在消费了。</p><p>为什么会导致重复？是因为自动提交，默认周期是5秒，如果在第3秒的时候，Broker发生了 Rebalance，那么 Offset 就提交不上去，当 Rebalance 完成之后，这部分数据，还会被在消费一次。</p><p><strong>手动提交</strong></p><ul><li>手动提交方式，可以解决消息的重复消费和丢失问题，因为我消费一个，提交一次Offset</li><li>同步提交方式，会影响消费端的性能</li><li>异步提交方式，解决了性能问题，但是消费成功之后，位移提交失败，不会自动重试提交，如果我们在 callback 中手动重试，又有可能导致提交上去的是一个老的 Offset</li><li>异步+同步方式：每次提交Offset都是异步的，然后在 finally 中同步提交一次，可以完美避免以上问题</li></ul><p>怎么避免的呢？消费者 poll 方法内部有维护一个不可见的指针，commitAysnc 方法异步提交不管是否成功，poll 仍然能根据自己维护的指针位移消费数据，最后在finally内用同步方法， 同步最新的 Offset。 这样提交上去的就不是老的 Offset</p><p>如果你选择的是自动提交位移，那么就可能存在一个问题：只要 Consumer 一直启动着，它就会无限期地向位移主题写入消息。导致磁盘爆满；因为自动提交位移是后台定时提交的（auto.commit.interval.ms默认是5s）；</p><p>那么满了怎么办？满了就删除，怎么删除呢？</p><h4 id="位移主题中的过期数据（过期位移）"><a href="#位移主题中的过期数据（过期位移）" class="headerlink" title="位移主题中的过期数据（过期位移）"></a>位移主题中的过期数据（过期位移）</h4><p>我们知道所有的位移数据都是保存在 位移主题 中的，如果不删除的话，位移主题就会无限的膨胀</p><p>为了避免该主题无限期膨胀。Kafka 会定期的清理位移主题中的数据。</p><p><strong>那么什么样的数据被称为过期数据呢？</strong></p><p>我们知道位移主题中存了三类消息，这里以 位移消息 为例；</p><p>位移消息的消息格式是Map格式，key是 groupid+topic+partition ；value是位移数据</p><p>举个例子说：</p><p>一个消费者组（假设groupid为：consumer_group_1），这个消费者组消费一个 Topic（假设消费：topic_a）；然后这个 Topic 有3个 Partition；</p><p>生产者 源源不断的向 Topic 中写数据，消费者组不停地消费数据，消费一个数据，就向 位移主题 中发一个位移消息；</p><p>那么这里的位移消息可能就是下面这样的：</p><p>consumer_group_1+topic_a+partition_1  ：  2345</p><p>consumer_group_1+topic_a+partition_1  ：  2346</p><p>consumer_group_1+topic_a+partition_1  ：  2347</p><p>。。。。。</p><p>最终，我们就会发现，同一个key就会存在很多数据，而且只有最后一条数据，才是有效的。那么之前的数据，都<strong>被称为过期数据</strong>；</p><p>再次之外，还有一种情况：</p><p>在 Broker 端有一个参数：<code>offsets.retention.minutes</code>,这个参数表明了 offset 的保留时间，什么意思呢？</p><p>就是说：我们提交到 位移主题 中的消息，并不会永远的保存，在超过了这个配置时间后，Kafka后台有一个线程，就会把这个Offset删掉</p><p>这个值一般是 7 天。</p><p>也就是说：如果你的消费者7天都没有上线了，或者7天都没有提交 offset 了，Kafka就会把这个消费者组的 位移数据 判定为过期数据。并删除</p><h4 id="位移主题中的过期数据（过期位移）清理"><a href="#位移主题中的过期数据（过期位移）清理" class="headerlink" title="位移主题中的过期数据（过期位移）清理"></a>位移主题中的过期数据（过期位移）清理</h4><p>在上面我们知道了 位移主题 中的过期数据有两类：</p><ul><li>一类是：同一个<code>key</code>的过期数据</li><li>一类是：超过了<code>offsets.retention.minutes</code>的过期数据</li></ul><p><strong>第一类过期数据，Kafka是怎么清理的呢？</strong></p><p>答案就是 Compaction。</p><p>国内很多文献都将其翻译成压缩，我个人是有一点保留意见的。</p><p>在英语中，压缩的专有术语是 Compression，它的原理和 Compaction 很不相同，我更倾向于翻译成压实，或干脆采用 JVM 垃圾回收中的术语：整理。</p><p>它的原理很简单：就是将：同一个 &lt;Group ID，主题名，分区号&gt; 的 Offset 进行压实整理，只保留最新的</p><img src="kafka从入门到入土.assets/image-20220828155424662.png" alt="image-20220828155424662" style="zoom: 50%;" /><p>图中位移为 0、2 和 3 的消息的 Key 都是 K1。Compact 之后，分区只需要保存位移为 3 的消息，因为它是最新发送的。</p><p>Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可压缩数据。这个后台线程叫 Log Cleaner。</p><p><strong>第二类过期数据，Kafka是怎么清理的呢？</strong></p><p>上面说到，Kafka有一个后台线程：Log Cleaner。</p><p>这个线程除了会清理第一类过期数据之外，还会清理第二类过期数据。</p><p>很多实际生产环境中都出现过位移主题无限膨胀占用过多磁盘空间的问题，如果你的环境中也有这个问题，我建议你去检查一下 Log Cleaner 线程的状态，通常都是这个线程挂掉了导致的。</p><p>Kafka 定期自动删除过期位移的条件就是，组要处于 Empty 状态（消费者组的状态机）。因此，如果你的消费者组停掉了很长时间（超过 7 天），那么 Kafka 很可能就把该组的位移数据删除了</p><h4 id="位移提交失败怎么办"><a href="#位移提交失败怎么办" class="headerlink" title="位移提交失败怎么办"></a>位移提交失败怎么办</h4><p>一般的失败，API会自动重试；</p><p>但是有一个异常叫做 CommitFailedException，这个异常抛出，说明位移的提交出现了大问题，需要人工介入了</p><p>那么这个异常是啥意思呢？什么时候会产生呢？产生了之后要怎么处理呢？</p><p><strong>什么是 CommitFailedException</strong></p><blockquote><p>Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. </p><p>This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. </p><p>You can address this either by increasing max.poll.interval.ms or by reducing the maximum size of batches returned in poll() with max.poll.records.</p></blockquote><p>翻译过来就是：</p><blockquote><p>本次提交位移失败了，原因是消费者组已经开启了 Rebalance 过程，并且将要提交位移的分区分配给了另一个消费者实例。</p><p>出现这个情况的原因是：你的消费者实例连续两次调用 poll 方法的时间间隔超过了期望的 max.poll.interval.ms 参数值。这通常表明，你的消费者实例花费了太长的时间进行消息处理，耽误了调用 poll 方法。</p><p>你可以通过：增加期望的时间间隔 max.poll.interval.ms 参数值 或者 减少 poll 方法一次性返回的消息数量，即减少 max.poll.records 参数值。</p></blockquote><p><strong>那么什么时候会抛出这个异常呢？</strong></p><p>从源代码方面来说，CommitFailedException 异常通常发生在手动提交位移时，即用户显式调用 KafkaConsumer.commitSync() 方法时。</p><p>从使用场景来说，有两种典型的场景可能遭遇该异常。</p><p>场景一</p><ul><li><p>当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。</p></li><li><p>模拟异常产生：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">…<span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>…props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"max.poll.interval.ms"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"test-topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span>     consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用Thread.sleep模拟真实的消息处理逻辑</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>场景二</p><ul><li>消费者组 Consumer Group  和 独立消费者 Standalone Consumer 拥有了相同的 group.id，当独立消费者程序手动提交位移时，Kafka 就会立即抛出 CommitFailedException 异常，因为 Kafka 无法识别这个具有相同 group.id 的消费者实例，于是就向它返回一个错误，表明它不是消费者组内合法的成员。</li><li>这种情况一般出现在很多部门消费同一个 Kafka 集群导致的，各个部门的消费者命名重复了，导致相同的 group.id</li></ul><p><strong>当前当异常出现了，我们应该怎么办呢？</strong></p><p>怎么解决问题，要先知道问题是怎么出现的。</p><p>比如在 场景一 中，我们知道产生问题的原因是：两次 poll() 方法调用的间隔超过了 max.poll.interval.ms</p><p>那么就简单了，针对 场景一 ，我们可以：</p><ul><li><strong>调大 max.poll.interval.ms 这个间隔时间</strong>，默认时间是 5分钟</li><li><strong>减少每次 poll() 拉取的消息数量</strong>：我们知道一次 poll() 方法，默认拉 500 条，因为拉取的太多了，消费的慢，所以导致两次 poll() 时间间隔太长</li><li>接第二条，‘消费的慢’，那我们就提到消息速率，<strong>优化代码，减少每条消息的处理时间</strong>，提高TPS</li><li>除了优化代码，提交消费速度，还可以<strong>使用多线程，提高消费速度</strong>，但是要注意多线程下的位移提交问题</li></ul><p>针对场景二呢，上面四个办法就不能用了，不过一般大公司下，消费者都是需要申请的，如果重复了，一般是申请不了的。</p><h2 id="多线程消费"><a href="#多线程消费" class="headerlink" title="多线程消费"></a>多线程消费</h2><h3 id="Kafka-Java-Consumer-的单线程设计"><a href="#Kafka-Java-Consumer-的单线程设计" class="headerlink" title="Kafka Java Consumer 的单线程设计"></a>Kafka Java Consumer 的单线程设计</h3><p>为什么 Kafka Java Consumer 要设计成单线程，看一下发展历史就明白了了</p><p>在目前的 KafkaConsumer 的API出现之前，有一个 Scala 版本的 Consumer 的API，这组 Scale 的API 被称为老版本 Consumer</p><p>在老版本 Consumer 中，Consumer 的设计是多线程的架构：</p><ul><li>每个 Consumer 实例在内部为所有订阅的 Topic 分区，创建对应的消息获取线程（就是一个分区一个线程），称为 Fetcher 线程</li><li>老版本的 Consumer 同时也是阻塞的，Consumer 实例启动后，内部会创建阻塞式的消息获取迭代器</li></ul><p>那么为什么后来变成单线程的了呢？</p><ul><li>主要是因为老版本的 Consumer 是阻塞的</li><li>而在大部分业务场景下，比如对数据的过滤，连接，分组，就不能是阻塞式的。</li><li>所以在新版的 Consumer 下，Kafka 设计了 单线程+轮训 的机制</li></ul><p>采用单线程还有另外一个考虑</p><ul><li>就是单线程可以简化 Consumer 的设计，在任何编程语言中，单线程都比多线程更方便维护</li></ul><p>不过，虽然 Consumer 的设计是单线程的，但是并不意味着我们就不能多线程了。</p><p>虽然 KafkaConsumer 的类的设计是单线程的，而且<strong>不是线程安全</strong>的。但是只是说明 拉取消息 的逻辑是单线程的</p><p>但是消息拉取之后，怎么处理消息，完全是由开发者决定的，此时可以<strong>手动开发多线程</strong>进行消费</p><h3 id="多线程方案"><a href="#多线程方案" class="headerlink" title="多线程方案"></a>多线程方案</h3><p>总体来说有两种方案。</p><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a><strong>方案一</strong></h4><p>消费者程序启动多个线程，每个线程维护专属的 KafkaConsumer 实例，负责完整的消息获取、消息处理流程。</p><p>简单地说：一个线程负责一个分区</p><img src="kafka从入门到入土.assets/image-20230214112054515.png" alt="image-20230214112054515" style="zoom: 33%;" /><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a><strong>方案二</strong></h4><p>消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑</p><p>简单的说：一个或多个线程负责拉取消息，多个线程负责处理消息</p><img src="kafka从入门到入土.assets/image-20230214112223276.png" alt="image-20230214112223276" style="zoom:33%;" /><h4 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a><strong>方案对比</strong></h4><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>方案一</td><td>方便实现</td><td>占用更多的系统资源</td></tr><tr><td>方案一</td><td>速度快，没有线程间的交互开销</td><td>线程数受限于 Topic 的分区数（最多一个分区一个线程），扩展性差</td></tr><tr><td>方案一</td><td>易于维护分区间的消息顺序</td><td>线程自己拉取消息，自己处理消息，可能导致超时，引发Rebalance</td></tr><tr><td>方案二</td><td>可独立扩展获取消息线程数和处理消息线程数</td><td>实现难度高</td></tr><tr><td>方案二</td><td>伸缩性好</td><td>难以维护分区内的消息消费顺序</td></tr><tr><td>方案二</td><td></td><td>处理链路长，不利于 Offset 的提交管理</td></tr></tbody></table><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h4><p>方案一</p><ul><li>这段代码创建了一个 Runnable 类，表示执行消费获取和消费处理的逻辑。每个 KafkaConsumerRunner 类都会创建一个专属的 KafkaConsumer 实例。在实际应用中，你可以创建多个 KafkaConsumerRunner 实例，并依次执行启动它们，以实现方案 1 的多线程架构。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> closed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaConsumer</span> consumer<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ConsumerRecords</span> records <span class="token operator">=</span>         consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//  执行消息处理逻辑</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WakeupException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// Ignore exception if closing</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> e<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>             consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// Shutdown hook which can be called from a separate thread</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         consumer<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案二</p><ul><li>这段代码最重要的地方是最后一行：当 Consumer 的 poll 方法返回消息后，由专门的线程池来负责处理具体的消息。调用 poll 方法的主线程不负责消息处理逻辑，这样就实现了方案 2 的多线程架构。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executors<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">int</span> workerNum <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>executors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>  workerNum<span class="token punctuation">,</span> workerNum<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span>     consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConsumerRecord</span> record <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    executors<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重平衡与协调者"><a href="#重平衡与协调者" class="headerlink" title="重平衡与协调者"></a>重平衡与协调者</h2><h3 id="什么是重平衡"><a href="#什么是重平衡" class="headerlink" title="什么是重平衡"></a>什么是重平衡</h3><p>Rebalance 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区。</p><p>比如某个 Group 下有 20 个 Consumer 实例，它订阅了一个具有 100 个分区的 Topic。正常情况下，Kafka 平均会为每个 Consumer 分配 5 个分区。这个分配的过程就叫 Rebalance。</p><h3 id="什么时候会重平衡"><a href="#什么时候会重平衡" class="headerlink" title="什么时候会重平衡"></a>什么时候会重平衡</h3><ul><li>Consumer Group 内 Consumer实例 数量发生变化（新增或减少）；</li><li>Consumer Group 订阅的 Topic 数发生变化；</li><li>Consumer Group 订阅的 Topic 的 Partition 数量发生变化</li></ul><h3 id="重平衡策略"><a href="#重平衡策略" class="headerlink" title="重平衡策略"></a>重平衡策略</h3><ul><li>举例：比如组内有2个消费者，这个组消费 TopicA 和 TopicB ,其中 Consumer-1 消费 TopicA，Consumer-2 消费 TopicB，当该 Consumer Group 新订阅一个 TopicC 的时候，会不会 Consumer-1 消费到 TopicB，Consumer-2 消费到 TopicA</li></ul><p>Kafka 有三种策略保证重平衡后的公平</p><p><strong>Rnage 分配策略</strong></p><p>Range分配策略是面向每个 Topic 的，首先会对同一个 Topic 里面的 Partition 按照序号进行排序，并把消费者线程按照字母顺序进行排序。然后用分区数除以消费者线程数量来判断每个消费者线程消费几个分区。如果除不尽，那么前面几个消费者线程将会多消费一个分区。 </p><p><strong>RoundRobin策略</strong></p><p>RoundRobin策略的原理是将 Consumer Group 内所有 Consumer 以及订阅的所有 Topic 的 Partition 按照字典序排序，然后通过轮询算法逐个将分区以此分配给每个消费者。 使用RoundRobin分配策略时会出现两种情况： </p><ul><li><p>如果同一消费组内，所有的消费者订阅的消息都是相同的，那么 RoundRobin 策略的分区分配会是均匀的。</p></li><li><p>如果同一消费者组内，所订阅的消息是不相同的，那么在执行分区分配的时候，就不是完全的轮询分配，有可能会导致分区分配的不均匀。如果某个消费者没有订阅消费组内的某个 topic，那么在分配分区的时候，此消费者将不会分配到这个 topic 的任何分区。</p></li></ul><p><strong>Sticky分配策略</strong></p><p>Sticky分配策略，这种分配策略是在 Kafka 的 0.11.X 版本才开始引入的，是目前最复杂也是最优秀的分配策略。 Sticky分配策略的原理比较复杂，它的设计主要实现了两个目的： </p><ul><li><p>分区的分配要尽可能的均匀；</p></li><li><p>分区的分配尽可能的与上次分配的保持相同。 如果这两个目的发生了冲突，优先实现第一个目的。</p></li></ul><h3 id="什么是协调者Coordinator"><a href="#什么是协调者Coordinator" class="headerlink" title="什么是协调者Coordinator"></a>什么是协调者Coordinator</h3><p>所谓协调者，在 Kafka 中对应的术语是 Coordinator，它专门为 Consumer Group 服务，负责为 Group 执行 Rebalance 以及提供位移管理和组成员管理等。</p><ul><li><p>协调者 coordinators 是协调管理 Consumer Group 的一个程序，运行在broker上的</p></li><li><p>每一个broker在启动时都会启动 coordinator 组件（coordinator程序），也就是说每个 Broker 都有具备称为 Coordinator 的能力</p></li></ul><p>具体来讲，Consumer 端应用程序在提交位移时，其实是向 Coordinator 所在的 Broker 提交位移。</p><p>同样地，当 Consumer 应用启动时，也是向 Coordinator 所在的 Broker 发送各种请求，然后由 Coordinator 负责执行消费者组的注册、成员管理记录等元数据管理操作。</p><h3 id="消费者组是怎么找到自己的coordinator的"><a href="#消费者组是怎么找到自己的coordinator的" class="headerlink" title="消费者组是怎么找到自己的coordinator的"></a>消费者组是怎么找到自己的coordinator的</h3><p>既然 Coordinator 是运行在 Broker上 的一个程序，那么一个消费者组，是怎么找到自己的 Coordinator 的呢？</p><p>在<a href="#%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8ETCP%E8%BF%9E%E6%8E%A5">消费者与TCP连接</a>这一节中，我们知道消费者在启动的时候，会创建三类 TCP 连接</p><ul><li>第一类：与负载最小的 Broker 创建连接，发送 FIndCoordinator 请求，希望该 Broker 告诉自己谁是我的协调者；</li><li>第二类：与 Coordinator 创建TCP连接，加入组，分配方案，位移获取和提交等</li><li>第三类：与 要消费的分区的副本所在 Broker 创建 TCP 连接，真正开始消费数据</li></ul><p>所以，消费者组找到自己的 Coordinator 是在第一类 TCP 请求中找到的</p><p>那么 具体是怎么找到的呢？是通过之前说过的 __consumer_offset 这个主题来找的</p><p>分为两步</p><ul><li>获取当前 Consumer Group 的 groupid，然后hash得到hash值；</li><li>获取__consumer_offset 的分区数，默认是50</li><li>计算 ：abs ( hash % 50 ) &#x3D; 分区号</li><li>然后，找到这个分区号的 leader 副本所在的 broker ；这个broker就是这个消费者的coordinator</li></ul><h3 id="重平衡的缺点"><a href="#重平衡的缺点" class="headerlink" title="重平衡的缺点"></a>重平衡的缺点</h3><ul><li>会STW（stop the world）：消费者会全部停止消费</li><li>时间太慢了，几百个消费者重平衡一次，要几个小时</li><li>Rebalance 的设计是要求所有 Consumer 实例共同参与，全部重新分配所有分区</li><li>在 Rebalance 过程中，所有 Consumer 实例都要参与，所以在整个过程中都不能消费任何消息，因此它对 Consumer 的 TPS 影响很大</li></ul><h3 id="避免消费者组重平衡"><a href="#避免消费者组重平衡" class="headerlink" title="避免消费者组重平衡"></a>避免消费者组重平衡</h3><p>首先，明确一个概念，目前Rebalance的弊端（慢，STW）这2个弊端，社区是没有办法解决的；</p><p>针对Rebalance的效率低的情况，社区采用了StickyAssignor策略来提升性能；</p><p>既然无法解决，那我们只能尽量避免，怎么避免呢？就要从导致Rebalance发生的三种情况来看</p><ul><li>组成员数量发生变化（99%的Rebalance都是这个原因）</li><li>订阅主题数量发生变化（一般是程序开发者主动操作，无法避免）</li><li>订阅主题的分区数发生变化（一般是程序开发者主动操作，无法避免）</li></ul><p>组成员数量发生变化，变化分为两种，一种是增加，一种是减少</p><ul><li>增加：一般都是程序开发者主动操作，比如为了提升topic的消费速率，无法避免</li><li>减少：如果是主动停掉的，那自不必说，无法避免；</li><li>减少：不是主动停掉的，是被 Coordinator 错误地认为“已停止”从而被“踢出”Group。如果是这个原因导致的 Rebalance，我们就不能不管了。</li></ul><p><strong>什么时候coordinator会认为consumer实例已停止</strong></p><ul><li>Coordinator 没有收到 Consumer 的心跳，就会让 Consumer 离组，重新 Rebalance<ul><li>Consumer 端有个参数，叫 session.timeout.ms，默认10秒；</li><li>Coordinator 在10s内没有收到 Consumer 的心跳，就Rebalance</li><li>心跳是consumer主动给coordinator的，那么多久一次呢？是由参数：heartbeat.interval.ms控制的；</li><li>推荐配置：session.timeout.ms&#x3D;6s，heartbeat.interval.ms&#x3D;2s：要保证 Consumer 实例在被判定为“dead”之前，能够发送至少 3 轮的心跳请求</li></ul></li><li>Consumer 实例在一定时间内消费不完已经 pull() 下来的消息，就会主动离组，重新Rebalance<ul><li>Consumer 端有个参数，max.poll.interval.ms 参数，默认5分钟</li><li>一个consumer在5分钟内，没有消费完拉取的数据，就Rebalance</li></ul></li><li>consumer端的GC情况</li></ul><p>standalone consumer 就没有 rebalance 一说了。 它的特点主要是灵活。</p><p>虽然社区一直在改进rebalance的性能，但大数据量下consumer group机制依然有很多弊病（比如rebalance太慢等）</p><p>所以很多大数据框架(Spark &#x2F;Flink)的kafka connector并不使用group机制，而是使用standalone consumer</p><h3 id="怎么排查生产是否重平衡过多"><a href="#怎么排查生产是否重平衡过多" class="headerlink" title="怎么排查生产是否重平衡过多"></a>怎么排查生产是否重平衡过多</h3><p>主动去排查：去找Coordinator所在的broker日志，如果经常发生rebalance，会有类似于”(Re)join group” 之类的日志</p><p>被动排查：一般 Rebalance 过多，会降低消费者能力，间接的就会出现消息堵，可以配置相关告警</p><h3 id="重平衡核心全流程"><a href="#重平衡核心全流程" class="headerlink" title="重平衡核心全流程"></a>重平衡核心全流程</h3><p>重平衡是怎么做到的？</p><p>在 Kafka 中，每个 Consumer 都会通过<strong>心跳线程</strong>，定期的向 Coordinator 汇报自己的状态；</p><p>同时 Coordinator 也会通过<strong>心跳线程</strong>，告诉 Consumer ：我收到了你的汇报；</p><p>如果 Consumer 超时没有汇报；说明这个 Cnnsumer 有问题了，此时 Coordinator 就会开启重平衡</p><p>Coordinator 会通过<strong>心跳线程</strong>，向这个 Consumner 所在的 Group 下的所有 Consumer，发送消息：<strong>REBALANCE_IN_PROGRESS</strong></p><p>当 Consumer 收到这种消息之后，就知道要开启重平衡了</p><p>而 Coordinator 具体是怎么实现重平衡的呢？</p><p>其实是通过控制 Consumer Group 的状态来完成重平衡的。这是<strong>理解重平衡的基础</strong>。</p><p>下面我们就来看看 消费者组的状态机，这是<strong>理解重平衡的基础</strong>；</p><h4 id="消费者组的状态机"><a href="#消费者组的状态机" class="headerlink" title="消费者组的状态机"></a>消费者组的状态机</h4><p>消费者组的状态主要有以下 五个：</p><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>Empty</td><td>组内没有任何成员，但消费者可能存在已经提交的数据，并且未过期：<a href="#%E4%BD%8D%E7%A7%BB%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84%E8%BF%87%E6%9C%9F%E6%95%B0%E6%8D%AE%EF%BC%88%E8%BF%87%E6%9C%9F%E4%BD%8D%E7%A7%BB%EF%BC%89">位移主题中的过期数据（过期位移）</a></td></tr><tr><td>Dead</td><td>组内没有任何成员，Coordinator 已经把这个消费者组的元数据信息删除了</td></tr><tr><td>PreparingRebalance</td><td>消费者组准备开启重平衡，此时所有成员都要重新申请加入组</td></tr><tr><td>CompletingRebalance</td><td>消费者组下的所有成员都已经加入，等待Leader分配方案，老版本中这个状态叫：AwatingSync</td></tr><tr><td>Stable</td><td>消费者组的稳定状态，表示重平衡已经完成，可以正常开启消费了</td></tr></tbody></table><pre class="mermaid">stateDiagram    direction LR    Empty-->Dead: 组信息过期被删除    Empty-->PreparingRebalance:准备开启rebalance    PreparingRebalance-->Dead:位移主题分区Leader发生变化    PreparingRebalance-->Empty:组内所有成员离组    PreparingRebalance-->CompletingRebalance:有成员入组    CompletingRebalance-->Dead:位移主题分区Leader发生变化    CompletingRebalance-->PreparingRebalance:成员加入或离开    CompletingRebalance-->Stable:Leader完成分配    Stable-->Dead:位移主题分区Leader发生变化    Stable-->PreparingRebalance:心跳过期/成员离组/新成员加入        %% 给状态添加样式    classDef badBadEvent fill:green,color:white,font-weight:bold,stroke-width:2px,stroke:yellow    class Empty badBadEvent    class PreparingRebalance badBadEvent    class CompletingRebalance badBadEvent    class Stable badBadEvent    class Dead badBadEvent</pre><p>一个消费者组最开始是 Empty 状态</p><p>当重平衡过程开启后，它会被置于 PreparingRebalance 状态等待成员加入</p><p>之后变更到 CompletingRebalance 状态等待分配方案</p><p>最后流转到 Stable 状态完成重平衡</p><p>当有新成员加入或已有成员退出时，消费者组的状态从 Stable 直接跳到 PreparingRebalance 状态，此时，所有现存成员就必须重新申请加入组。</p><p>当所有成员都退出组后，消费者组状态变更为 Empty</p><h4 id="重平衡流程"><a href="#重平衡流程" class="headerlink" title="重平衡流程"></a>重平衡流程</h4><h5 id="场景一：新成员入组"><a href="#场景一：新成员入组" class="headerlink" title="场景一：新成员入组"></a>场景一：新成员入组</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 B    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员1->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 A    协调者-->>成员2: joinGroup响应：你好成员2，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员1->主题A，成员2->主题B}    协调者-->>成员1: joinGroup响应：你好成员1，你已成功入组，当前组的Leader是成员2，请等待分配方案    成员1->>协调者: syncGroup请求：你好协调者，我是成员1，等待分配方案    成员2->>协调者: syncGroup请求：你好协调者，我是成员2，也是这个组的Leader<br/>以下是我的分配方案：{成员1->主题A分区0，成员2->主题B分区0}    协调者-->>成员1: syncGroup响应：你好成员1，你负责消费主题A的0分区    协调者-->>成员2: syncGroup响应：你好成员2，你负责消费主题B的0分区    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到</pre><h5 id="场景二：组成员主动离组"><a href="#场景二：组成员主动离组" class="headerlink" title="场景二：组成员主动离组"></a>场景二：组成员主动离组</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到    成员1->>协调者: leaveGroup请求：你好协调者，我是组内的成员1，申请主动离组    协调者-->>成员1: leaveGroup响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员2->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 B    协调者-->>成员2: joinGroup响应：你好成员2，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员2->主题B}    成员2->>协调者: syncGroup请求：你好协调者，我是成员2，也是这个组的Leader<br/>以下是我的分配方案：{成员2->主题B分区0}    协调者-->>成员2: syncGroup响应：你好成员2，你负责消费主题B的0分区    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到</pre><h5 id="场景三：组成员崩溃离组"><a href="#场景三：组成员崩溃离组" class="headerlink" title="场景三：组成员崩溃离组"></a>场景三：组成员崩溃离组</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到    note left of 成员2: 成员2此时已离线    协调者->>协调者: 发现成员2已经很长时间没有汇报了    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员1->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 A    协调者-->>成员1: joinGroup响应：你好成员1，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员1->主题A}    成员1->>协调者: syncGroup请求：你好协调者，我是成员1，也是这个组的Leader<br/>以下是我的分配方案：{成员1->主题A分区0}    协调者-->>成员1: syncGroup响应：你好成员1，你负责消费主题A的0分区    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到</pre><h5 id="场景四：重平衡时协调者对组内成员提交位移的处理"><a href="#场景四：重平衡时协调者对组内成员提交位移的处理" class="headerlink" title="场景四：重平衡时协调者对组内成员提交位移的处理"></a>场景四：重平衡时协调者对组内成员提交位移的处理</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着      协调者-->>成员1: 心跳响应：你好成员1，已收到      协调者->>协调者: 此时发现需要重平衡    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员1->>成员1: 必须赶在超时时间内提交位移    note right of 成员1 : 赶在超时时间内提交位移    成员1->>协调者: 提交位移请求：你好协调者，我要提交的位移是：{....}    协调者->>成员1: 提交位移响应：你好成员1，位移数据已收到    note right of 成员1 : 如果提交失败了，这部分数据在重平衡之后就会被重新消费</pre><h4 id="重平衡的一些问题"><a href="#重平衡的一些问题" class="headerlink" title="重平衡的一些问题"></a>重平衡的一些问题</h4><p>joingroup时等待所有消费者上报订阅信息，协调者通过什么判断所有消费者都已经上报了？</p><ul><li>join group时也是有一个总的超时时间的（取所有member最大的rebalance超时时间），靠这个作为判断是否进入到下一阶段的阈值。</li><li>如果在这次 Rebalance 期间，有 消费者 超时没有上报信息，那么这个消费者会被排除在这轮 Rebalance 之外</li></ul><p>如果在超时时间之后，排除在外的 消费者 此时上报了信息，怎么办？</p><ul><li>相当于 新成员入组，重新 Rebalance</li></ul><h2 id="副本机制"><a href="#副本机制" class="headerlink" title="副本机制"></a>副本机制</h2><p>我们之前谈到过，Kafka 是有 Topic 概念的，而每个 Topic 又进一步划分成若干个 Partition。</p><p>每个 Partition 配置有若干个 Replica，Replica 的概念实际上是在 Partition 层级下定义的</p><h3 id="什么是副本"><a href="#什么是副本" class="headerlink" title="什么是副本"></a>什么是副本</h3><p>所谓副本（Replica），本质就是一个只能追加写消息的提交日志。</p><p>同一个 Partition 下的所有 Replica 保存有相同的消息序列，这些 Replica 分散保存在不同的 Broker 上，从而能够对抗部分 Broker 宕机带来的数据不可用。</p><p>在实际生产环境中，每台 Broker 都可能保存有各个 Topic 下不同 Partition 的不同 Replica，因此，单个 Broker 上存有成百上千个 Replica 的现象是非常正常的。</p><p>下图展示的是一个有 3 台 Broker 的 Kafka 集群上的副本分布情况。</p><p>从这张图中，我们可以看到，主题 1 分区 0 的 3 个副本分散在 3 台 Broker 上，其他主题分区的副本也都散落在不同的 Broker 上，从而实现数据冗余。</p><img src="kafka从入门到入土.assets/image-20230214160607518.png" alt="image-20230214160607518" style="zoom:33%;" /><h3 id="副本之间数据是怎么同步的"><a href="#副本之间数据是怎么同步的" class="headerlink" title="副本之间数据是怎么同步的"></a>副本之间数据是怎么同步的</h3><p>我们知道 Replica 是用来冗余数据的，同一个 Partiton 下的所有 Replica 的数据都应该是一模一样的，顺序都是一样的</p><p>那么这么多的 Replica，是怎么进行 Replica 之间的数据同步的呢？</p><p>Kafka使用的解决方案：就是采用<strong>基于领导者（Leader-based）的副本机制</strong></p><img src="kafka从入门到入土.assets/image-20230214161048286.png" alt="image-20230214161048286" style="zoom:33%;" /><ul><li>在 Kafka 中，副本分成两类：领导者副本（Leader Replica）和追随者副本（Follower Replica）。每个分区在创建时都要选举一个 Leader Replica，剩余的是 Follower Replica</li><li>Kafka 的副本机制比其他分布式系统要更严格一些。在 Kafka 中，Follower Replica 是不对外提供服务的。所有的读写请求都必须由 Leader Replica所在的 Broker负责处理。而 Follower 的任务只有一个：就是从 Leader 异步拉取消息，并写入到自己的提交日志中，从而实现与 Leader 的同步。</li><li>当 Leader Replica 挂掉了，或者说 Leader Replica 所在的 Broker 宕机时，Kafka 依托于 ZK 进行新的 Leader Replica 的选举</li></ul><p>你一定要特别注意上面的第二点，即追随者副本是不对外提供服务的。</p><p>原因归咎于两点：方便 Read-your-writes ，同时方便实现单调读（Monotonic Reads）</p><h3 id="Follower不提供服务的优点"><a href="#Follower不提供服务的优点" class="headerlink" title="Follower不提供服务的优点"></a>Follower不提供服务的优点</h3><p>有两个好处</p><h4 id="方便实现“Read-your-writes”"><a href="#方便实现“Read-your-writes”" class="headerlink" title="方便实现“Read-your-writes”"></a>方便实现“Read-your-writes”</h4><p>所谓 Read-your-writes，顾名思义就是，当你使用生产者 API 向 Kafka 成功写入消息后，马上使用消费者 API 去读取刚才生产的消息。</p><p>举个例子，比如你平时发微博时，你发完一条微博，肯定是希望能立即看到的，这就是典型的 Read-your-writes 场景。如果允许追随者副本对外提供服务，由于副本同步是异步的，因此有可能出现追随者副本还没有从领导者副本那里拉取到最新的消息，从而使得客户端看不到最新写入的消息。</p><h4 id="方便实现单调读（Monotonic-Reads）"><a href="#方便实现单调读（Monotonic-Reads）" class="headerlink" title="方便实现单调读（Monotonic Reads）"></a>方便实现单调读（Monotonic Reads）</h4><p>什么是单调读呢？就是对于一个消费者用户而言，在多次消费消息时，它不会看到某条消息一会儿存在一会儿不存在。</p><p>如果允许追随者副本提供读服务，那么假设当前有 2 个追随者副本 F1 和 F2，它们异步地拉取领导者副本数据。倘若 F1 拉取了 Leader 的最新消息而 F2 还未及时拉取，那么，此时如果有一个消费者先从 F1 读取消息之后又从 F2 拉取消息，它可能会看到这样的现象：第一次消费时看到的最新消息在第二次消费时不见了，这就不是单调读一致性。但是，如果所有的读请求都是由 Leader 来处理，那么 Kafka 就很容易实现单调读一致性。</p><p>现在我们知道了 Replica 的同步机制，和 Follower Replica 不对外提供服务的原因，接下来还有两个问题，我们一一来看：</p><p>Kafka 是怎么保证 Replica 的数据一致性的</p><p>当 Leader Replica 挂掉之后，Kafka 是怎么进行选举新的 Leader Replica 的</p><h3 id="怎么保证-副本数据一致性"><a href="#怎么保证-副本数据一致性" class="headerlink" title="怎么保证 副本数据一致性"></a>怎么保证 副本数据一致性</h3><p>我们知道 Kafka 的 Partition 有很多个 Replica</p><p>Replica 分为 Leader Replica 和 Follower Replica</p><p>Leader Replica 对外提供读写服务，Follower Replica 只是从 Leader Replica 异步同步数据，不对外提供任何服务；</p><p>那么，Kakfa是怎么保证这些 Replica 内的数据是一致的呢？</p><h4 id="In-Sync-Replicas（ISR）"><a href="#In-Sync-Replicas（ISR）" class="headerlink" title="In-Sync Replicas（ISR）"></a><strong>In-Sync Replicas（ISR）</strong></h4><p>既然 Follower Replica 是异步的方式，从Leader Replica 同步数据的，那么就一定会存在延迟；</p><p>就像 Mysql 的主从一样，主要涉及到数据同步，就一定会有延迟，无外乎：延迟的大小是多少。</p><p>Kafka 知道这个延迟是无法避免的，所以，Kafka 维护了一个集合，这个集合中保存的是：与Leader同步的Follower；</p><p>什么是与Leader同步的Follower？有同步的Follower，难道还有不同步的Follower？</p><ul><li>是的，有同步的，就有不同步的。</li><li>Kafka 有自己一套判定条件，只要 Follower Replica 满足了这个判定条件，Kafka 就认为这个 Follower 是同步的。就会放进 ISR 集合；</li><li>这个条件就是：replica.lag.time.max.ms，表示 Follower 副本能够落后 Leader 副本的最长时间间隔，默认是10S</li><li>也就是说：当 Follower 与 Leader 的同步时间差，在10秒内，Kafka就认为这个 Follower 是同步的。否则就是不同步的</li><li>ISR 集合有什么用的，主要是用来选举新的 Leader Replica 的，后面会说</li></ul><p>ISR 是一个动态调整的集合，当 Follower 落后于 Leader ，并且落后时间大于<code>replica.lag.time.max.ms</code>，Kafka 就会将这个 Follower 踢出 ISR；</p><p>同样的，当一个落后的 Follower 最终追上了 Leader ，Kafka 会将这个 Follower 在加入 ISR；</p><h4 id="ISR是怎么变化的"><a href="#ISR是怎么变化的" class="headerlink" title="ISR是怎么变化的"></a>ISR是怎么变化的</h4><p>Kafka 在启动的时候会开启两个任务</p><p>一个任务用来定期地检查是否需要调整 ISR 集合，这个周期是replica.lag.time.max.ms的一半，默认5秒；</p><p>当检测到 ISR 集合中有失效副本时，就会收缩 ISR 集合，当检查到有 Follower 的 HighWatermark （高水位）追赶上 Leader 时，就会扩充ISR。 </p><p>除此之外，当 ISR 集合发生变更的时候。还会将变更后的记录缓存到 isrChangeSet 中</p><p>另一个任务会周期性地检查 isrChangeSet，如果发现这个 isrChangeSet 有新的变更记录，那么它会在 ZK 中持久化一个节点。</p><p>然后因为 Controller（Kafka 控制器） 在这个 ZK 节点的路径上注册了一个Watcher，所以它就能够感知到 ISR 的变化，并向它所管理的broker发送更新元数据的请求。最后删除该ZK节点。 </p><p>Leader 副本天然就在 ISR 中</p><p>极端的情况：ISR 包含全部的 Replica，也有可能 ISR 中一个 Replica 都没有，如果一个都没有的话，说明 Leader 都挂了，此时就需要选举新的 Leader了。</p><h3 id="怎么进行选举新的-Leader-Replica"><a href="#怎么进行选举新的-Leader-Replica" class="headerlink" title="怎么进行选举新的 Leader Replica"></a>怎么进行选举新的 Leader Replica</h3><p>选举的时候，是通过 Controller（Kafka控制器）来处理的。 Coordinator（协调者）只是消费者组用来重平衡的；这两个不是一个概念；</p><p>当 ISR 不为空的时候，则选择其中一个作为新Leader，新的ISR则包含当前 ISR 中所有幸存的 Replica。</p><p>当 ISR 为空的时候，此时幸存的 Replica 都是非同步副本，也就是说：都是和 老的 Leader Replica 差距比较大的 Replica，如果此时从这些 非同步副本 中选举一个作为 Leader 的话，就会有消息丢失的风险；如果不选举，那就是 Kafka 服务不可用了。</p><p>当 ISR 为空的时候，如果进行选举，则这个选举叫做： Unclean 领导者选举，Broker 端参数 unclean.leader.election.enable 控制是否允许 Unclean 领导者选举</p><p>如果开启了  Unclean 领导者选举 ，相当于选择了可用性，牺牲了一致性；如果不选举，相当于选择了一致性，牺牲了可用性</p><p>建议不要开启，毕竟我们还可以通过其他的方式来提升高可用性。如果为了这点儿高可用性的改善，牺牲了数据一致性，那就非常不值当了。</p><h2 id="请求是怎么被处理的"><a href="#请求是怎么被处理的" class="headerlink" title="请求是怎么被处理的"></a>请求是怎么被处理的</h2><h3 id="kafka的请求分类"><a href="#kafka的请求分类" class="headerlink" title="kafka的请求分类"></a>kafka的请求分类</h3><p>之前，我们了解到 Kafka 是使用 TCP 进行通信，在TCP的基础上，Kafka定义了属于自己的请求协议：</p><p>比如常见的 PRODUCE 请求是用于生产消息的，FETCH 请求是用于消费消息的，METADATA 请求是用于请求 Kafka 集群元数据信息的等等</p><p>截止到 2.3 版本，总共有 45 种，在这 45 种请求中，可以分为两类：</p><p><strong>数据类请求</strong>：Kafka 社区把 PRODUCE 和 FETCH 这类请求称为数据类请求。</p><p><strong>控制类请求</strong>：Kafka 社区把 LeaderAndIsr、StopReplica 这类请求称为控制类请求。</p><h3 id="处理请求的方式"><a href="#处理请求的方式" class="headerlink" title="处理请求的方式"></a>处理请求的方式</h3><p>在传统的开发设计中，对一个请求的处理，很自然的就可以想到下面两种方式</p><h4 id="同步处理"><a href="#同步处理" class="headerlink" title="同步处理"></a>同步处理</h4><p>服务端收到一个消息，立即开始处理，处理完成后返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//伪代码</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法实现简单，但是有个致命的缺陷，那就是吞吐量太差。由于只能顺序处理每个请求，因此，每个请求都必须等待前一个请求处理完毕才能得到处理。这种方式只适用于请求发送非常不频繁的系统。</p><h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p>既然同步的方式效率差， 那就用异步的方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//伪代码</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Request</span> <span class="token operator">=</span> request <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法反其道而行之，完全采用异步的方式。系统会为每个入站请求都创建单独的线程来处理。这个方法的好处是，它是完全异步的，每个请求的处理都不会阻塞下一个请求。但缺陷也同样明显。为每个请求都创建线程的做法开销极大，在某些场景下甚至会压垮整个服务。</p><h3 id="Kafka-是如何处理请求的"><a href="#Kafka-是如何处理请求的" class="headerlink" title="Kafka 是如何处理请求的"></a>Kafka 是如何处理请求的</h3><p>Kafka 使用 Reactor 模式来处理请求</p><h4 id="什么是Reactor模式"><a href="#什么是Reactor模式" class="headerlink" title="什么是Reactor模式"></a>什么是Reactor模式</h4><p>Reactor 模式是 JUC 包的作者 Doug Lea 的作品，真不愧是大神。</p><p>简单来说，Reactor 模式是事件驱动架构的一种实现方式，特别适合应用于处理多个客户端并发向服务器端发送请求的场景。</p><p>Reactor 模式的架构如下图所示，图来自 Doug Lea 的PPT：<a href="#https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf">https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf</a>：</p><img src="kafka从入门到入土.assets/image-20230215172615962.png" alt="image-20230215172615962" style="zoom: 33%;" /><p>多个 Client 客户端会发送请求给到 Reactor。</p><p>Reactor 有个请求分发线程 Dispatcher ，也就是图中的 Acceptor 线程，它会将不同的请求下发到多个工作线程中处理。</p><p>Dispatcher 是 Reactor 模式的一个概念，它的实现是：Acceptor 线程，所以它俩是指同一个东西。</p><p>Acceptor 线程只是用于请求分发，不涉及具体的逻辑处理，非常得轻量级，因此有很高的吞吐量表现。</p><p>而工作线程可以根据实际业务处理需要任意增减，从而动态调节系统负载能力。</p><h4 id="Kafka-的Reactor模式"><a href="#Kafka-的Reactor模式" class="headerlink" title="Kafka 的Reactor模式"></a>Kafka 的Reactor模式</h4><img src="kafka从入门到入土.assets/image-20230215173456675.png" alt="image-20230215173456675" style="zoom:33%;" /><p>Kafka 的 Broker 端有个 SocketServer 组件，类似于 Reactor 模式中的 Dispatcher。</p><p>它也有对应的 Acceptor 线程和一个工作线程池，只不过在 Kafka 中，这个工作线程池有个专属的名字，叫网络线程池。</p><p>Kafka 提供了 Broker 端参数 num.network.threads，用于调整该网络线程池的线程数。</p><p>num.network.threads 的默认值是 3，表示每台 Broker 启动时会创建 3 个网络线程，专门处理客户端发送的请求。</p><h5 id="在Reactor模式下怎么处理请求"><a href="#在Reactor模式下怎么处理请求" class="headerlink" title="在Reactor模式下怎么处理请求"></a>在Reactor模式下怎么处理请求</h5><img src="kafka从入门到入土.assets/image-20230215192742666.png" alt="image-20230215192742666" style="zoom:50%;" /><p>上图，其中 1-7 步骤是处理请求， 7-10 是响应请求</p><p>1、客户端或者其他Broker发起请求，这里的请求可能是 数据类请求，也可能是 控制类请求</p><p>2、请求发送到 Broker，会由 SocketServer 组件开始处理</p><p>3、SocketServer 组件（Acceptor线程）开始处理</p><p>4、SocketServer 组件（Acceptor线程）会将请求分发到网络线程池，这是一个很轻量级的工作</p><p>5、网络线程池中的某个线程接收到请求，但是这个线程并不会开始处理，而是将当前请求发送到共享请求队列</p><p>6、Broker 端还有一个IO线程池，会不停的从共享请求队列中获取请求，这才是真正的开始处理请求</p><ul><li>Broker 端参数 num.io.threads 控制了这个线程池中的线程数。</li><li>目前该参数默认值是 8，表示每台 Broker 启动后自动创建 8 个 IO 线程处理请求</li><li>你可以根据实际硬件条件设置此线程池的个数</li></ul><p>7、这个请求如果是 PRODUCE 请求，就写入日志；如果是 FETCH 请求，就从磁盘或者页缓存中读取数据</p><h5 id="在Reactor模式下怎么响应请求"><a href="#在Reactor模式下怎么响应请求" class="headerlink" title="在Reactor模式下怎么响应请求"></a>在Reactor模式下怎么响应请求</h5><img src="kafka从入门到入土.assets/image-20230215192742666.png" alt="image-20230215192742666" style="zoom:50%;" /><p>上图，其中 1-7 步骤是处理请求， 7-10 是响应请求</p><p>7、这个请求如果是 PRODUCE 请求，就写入日志；如果是 FETCH 请求，就从磁盘或者页缓存中读取数据</p><p>8、如果当前这个请求<strong>可以直接返回</strong>，就会找到当时发送这个请求的线程，然后返回到这个线程的响应队列中</p><ul><li><p>什么是可以直接返回的请求？ </p></li><li><blockquote><p>再讲什么是可以直接返回的请求之前，先了解一个什么是不可以直接返回的请求？</p><p>不可以直接返回的请求，比如设置了 acks&#x3D;all 的 PRODUCE 请求</p><p>一旦设置了 acks&#x3D;all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回</p><p>此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果</p><p>这就是不能直接返回的请求。</p><p>相反的，就是可以直接返回的请求</p></blockquote></li><li><p>响应队列是网络线程池中每个线程专属的吗？</p></li><li><blockquote><p>是的。</p><p>请求队列是所有网络线程共享的，而响应队列则是每个网络线程专属的。</p><p>这么设计的原因就在于，Dispatcher 只是用于请求分发而不负责响应回传，因此只能让每个网络线程自己发送 Response 给客户端，所以这些 Response 也就没必要放在一个公共的地方。</p></blockquote></li><li><p>怎么找到当时发送这个请求的线程呢？</p></li><li><blockquote><p>在源码中，有这部分代码逻辑：RequestChannel 类的 sendResponse 方法</p><p>&#x2F;&#x2F; 找出response对应的Processor线程，即request当初是由哪个Processor线程处理的 </p><p>val processor &#x3D; processors.get(response.processor) </p><p>&#x2F;&#x2F; 将response对象放置到对应Processor线程的Response队列中 </p><p>if (processor !&#x3D; null) { </p><p>  processor.enqueueResponse(response) </p><p>}</p></blockquote></li></ul><p>8、如果当前这个请求是<strong>不可以直接返回的</strong>，就会将当前这个请求暂存到 Purgatory</p><ul><li><p>什么是不可以直接返回的请求？ </p></li><li><blockquote><p>不可以直接返回的请求，比如设置了 acks&#x3D;all 的 PRODUCE 请求</p><p>一旦设置了 acks&#x3D;all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回</p><p>此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果</p><p>这就是不能直接返回的请求。</p><p>相反的，就是可以直接返回的请求</p></blockquote></li><li><p>Purgatory 是什么？</p></li><li><blockquote><p>Purgatory 的组件，这是 Kafka 中著名的“炼狱”组件。</p><p>它是用来缓存延时请求（Delayed Request）的。</p><p>所谓延时请求，就是那些一时未满足条件，不能立刻处理的请求。</p></blockquote></li></ul><p>9、等 Purgatory 中暂存的请求，可以返回的时候，会找到当时发送这个请求的线程，返回到这个线程的响应队列中</p><ul><li><p>怎么知道是可以返回的时候？</p></li><li><blockquote><p>举个例子：比如设置了 acks&#x3D;all 的 PRODUCE 请求</p><p>一旦设置了 acks&#x3D;all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回</p><p>此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果</p><p>此时才可以返回</p></blockquote></li></ul><p>10、网络线程池的线程，会将自己响应队列中的响应数据，通过网络传输回去。</p><h3 id="控制类和数据类请求分离"><a href="#控制类和数据类请求分离" class="headerlink" title="控制类和数据类请求分离"></a>控制类和数据类请求分离</h3><p>在本小节开头，就介绍过：Kafka 的请求分类两类</p><p><strong>数据类请求</strong>：Kafka 社区把 PRODUCE 和 FETCH 这类请求称为数据类请求。</p><p><strong>控制类请求</strong>：Kafka 社区把 LeaderAndIsr、StopReplica 这类请求称为控制类请求。</p><p>在了解了 Kafka 是怎么处理请求的流程之后，思考这么一个问题：</p><p>如果当前 共享请求队列 中，已经积压了很多的数据，IO线程正在马不停蹄的处理，此时我们发送一个请求：要求一个 Replica 下线。</p><p>此时：这个要求 Replica 下线的请求是优先处理，还是顺序处理？</p><p>如果是优先处理，那共享请求队列中积压的数据，怎么办？</p><p>如果是顺序处理，如果等待的时间很长很长，Replica 一直无法下线怎么办？</p><p>所以我们需要把 控制类请求 和 数据类请求 <strong>分开处理</strong>。</p><p>这就是 控制类和数据类请求分离</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>举一个具体的场景：</p><p>假设我们有个主题只有 1 个分区，该分区配置了 2 个副本</p><p>其中 Leader 副本保存在 Broker 0 上，Follower 副本保存在 Broker 1 上</p><p>假设 Broker 0 这台机器积压了很多的 PRODUCE 请求</p><p>此时你如果使用 Kafka 命令强制将该主题分区的 Leader、Follower 角色互换</p><p>那么 Kafka 内部的控制器组件（Controller）会发送 LeaderAndIsr 请求给 Broker 0，显式地告诉它，当前它不再是 Leader，而是 Follower 了</p><p>而 Broker 1 上的 Follower 副本因为被选为新的 Leader，因此停止向 Broker 0 拉取消息</p><h4 id="不分离的现象"><a href="#不分离的现象" class="headerlink" title="不分离的现象"></a>不分离的现象</h4><p>如果 控制类请求 和 数据类请求 不分离</p><p>LeaderAndIsr 请求（ Leader、Follower 角色互换）就会放在 共享请求队列 的后面</p><p>如果 共享请求队列 积压了很多，我们就要等很长很长时间，才能处理到这个 控制类请求</p><p>很显然，这不是我们想要的结果</p><h4 id="分离的现象"><a href="#分离的现象" class="headerlink" title="分离的现象"></a>分离的现象</h4><p>如果 控制类请求 和 数据类请求 分离</p><p>那么在 LeaderAndIsr 发送之前积压的 PRODUCE 请求就都无法正常完成了。</p><p>这是我们想要的结果吗？</p><p>我不知道这是不是我们想要的结果，但这是目前 Kafka 的处理方式</p><p>Kafka 会优先处理 LeaderAndIsr 请求，Broker 0 就会立刻抛出 NOT_LEADER_FOR_PARTITION 异常，快速地标识这些积压 PRODUCE 请求已失败</p><h4 id="怎么设计分离"><a href="#怎么设计分离" class="headerlink" title="怎么设计分离"></a>怎么设计分离</h4><p>现在我们知道 Kafka 会优先处理 控制类请求，如果是你来设计，你会怎么让 Kafka 优先处理 控制类请求呢？</p><p>方案一：</p><p>在 Broker 中实现一个优先级队列，并赋予控制类请求更高的优先级。</p><p>这是很自然的想法，所以我本以为社区也会这么实现的，但后来我这个方案被清晰地记录在“已拒绝方案”列表中。</p><p>拒绝的原因在于，它无法处理请求队列已满的情形。当请求队列已经无法容纳任何新的请求时，纵然有优先级之分，它也无法处理新的控制类请求了</p><p>方案二：</p><p>直接将 控制类请求 替换 共享请求队列中 的最前面的数据，这样就可以优先处理控制类请求了，处理完控制类请求，再将这个数据类请求插队到队头；</p><p>这个方案是网友分享的，当然，Kafka 社区也没有采用这个方案</p><p>那么 Kafka 是怎么做的呢？</p><h4 id="Kafka是怎么分离的"><a href="#Kafka是怎么分离的" class="headerlink" title="Kafka是怎么分离的"></a>Kafka是怎么分离的</h4><p>那么，社区是如何解决的呢？</p><p>很简单，Kafka 社区实现了两套一模一样的 Reactor模型</p><p>一个用来处理 数据类型请求，一个用来处理 控制类请求；实现了两类请求的分离。</p><p>也就是说，Kafka Broker 启动后，会在后台分别创建两套网络线程池和 IO 线程池的组合，它们分别处理数据类请求和控制类请求。</p><p>至于所用的 Socket 端口，自然是使用不同的端口了，你需要提供不同的 listeners 配置，显式地指定哪套端口用于处理哪类请求。</p><h2 id="kafka控制器"><a href="#kafka控制器" class="headerlink" title="kafka控制器"></a>kafka控制器</h2><h3 id="什么是控制器组件"><a href="#什么是控制器组件" class="headerlink" title="什么是控制器组件"></a>什么是控制器组件</h3><p>控制器组件（Controller），是 Apache Kafka 的核心组件</p><p>它的主要作用是在 ZK 的帮助下管理和协调整个 Kafka 集群</p><p>集群中任意一台 Broker 都能充当控制器的角色，只能有一个 Broker 成为控制器</p><p>每个正常运转的 Kafka 集群，在任意时刻都有且只有一个控制器</p><p>控制器是重度依赖 ZK 的，因此，我们有必要花一些时间学习下 ZK 是做什么的。</p><h3 id="Kafka依赖ZK"><a href="#Kafka依赖ZK" class="headerlink" title="Kafka依赖ZK"></a>Kafka依赖ZK</h3><h4 id="什么是ZK"><a href="#什么是ZK" class="headerlink" title="什么是ZK"></a>什么是ZK</h4><p>ZK 是一个分布式协调服务框架，它使用的数据模型类似于文件系统的树形结构，根目录也是以“&#x2F;”开始</p><p>ZK结构上的每个节点被称为 znode，用来保存一些元数据协调信息，可分为持久性 znode 和临时 znode</p><ul><li><p>持久性 znode 不会因为 ZooKeeper 集群重启而消失</p></li><li><p>临时 znode 则与创建该 znode 的 ZooKeeper 会话绑定，一旦会话结束，该节点会被自动删除</p></li></ul><p>ZK 赋予客户端监控 znode 变更的能力，即所谓的 Watch 通知功能。</p><ul><li>一旦 znode 节点被创建、删除，子节点数量发生变化，或是 znode 所存的数据本身变更</li><li>ZK 会通过节点变更监听器 (ChangeHandler) 的方式显式通知客户端。</li></ul><h4 id="Kafka使用ZK做了什么"><a href="#Kafka使用ZK做了什么" class="headerlink" title="Kafka使用ZK做了什么"></a>Kafka使用ZK做了什么</h4><p>Kafka 大量使用了 ZK 的 Watch 机制对集群进行管理，如下图</p><p>不用了解每个 znode 的作用，但可以大致体会下 Kafka 对 ZooKeeper 的依赖。</p><pre class="mermaid">graph LR;     Kafka的ZK节点 --> /consumers     /consumers --> consumer_group_name     consumer_group_name --> offsets     consumer_group_name --> ids     consumer_group_name --> owners    Kafka的ZK节点 --> /controller_epoch    Kafka的ZK节点 --> /brokers/ids    Kafka的ZK节点 --> /controller    Kafka的ZK节点 --> /admin/delete_topics    Kafka的ZK节点 --> /admin/preferred_replica_election    Kafka的ZK节点 --> /brokers/seqid    Kafka的ZK节点 --> /isr_change_notifaction    Kafka的ZK节点 --> /config    /config --> clients    /config --> changes    /config --> topics    Kafka的ZK节点 --> /config/changes    Kafka的ZK节点 --> /brokers/topics    Kafka的ZK节点 --> /admin/reassign_partitions    Kafka的ZK节点 --> /admin    /admin --> delete_topics</pre><p>在之前我们说过，每个 Broker 都有成为 控制器（Controller）的能力，但是控制器有且只有一个，那么控制器是怎么被选出来的</p><h3 id="控制器是怎么选出来的"><a href="#控制器是怎么选出来的" class="headerlink" title="控制器是怎么选出来的"></a>控制器是怎么选出来的</h3><p>在之前我们说过，每个 Broker 都有成为 控制器（Controller）的能力</p><p>但是控制器有且只有一个，那么控制器是怎么被选出来的</p><p>实际上，Broker 在启动时，会尝试去 ZK 中创建 &#x2F;controller 节点</p><p>Kafka 当前选举控制器的规则是：第一个成功创建 &#x2F;controller 节点的 Broker 会被指定为控制器。</p><h3 id="控制器用来做什么的"><a href="#控制器用来做什么的" class="headerlink" title="控制器用来做什么的"></a>控制器用来做什么的</h3><p>之前说过，控制器（Controller）起到了管理整个集群的作用，那么它具体都做了什么呢？</p><pre class="mermaid">graph LR;    Kafka控制器 --> 主题管理    Kafka控制器 --> 分区重分配    Kafka控制器 --> Preferred领导者选举    Kafka控制器 --> 集群成员管理    Kafka控制器 --> 数据服务</pre><h3 id="控制器中存了什么数据"><a href="#控制器中存了什么数据" class="headerlink" title="控制器中存了什么数据"></a>控制器中存了什么数据</h3><p>接下来，我们就详细看看，控制器中到底保存了哪些数据</p><p>控制器既然作为整个 Kafka 集群的管理者，里面主要存了三部分数据</p><ul><li>所有 Topic 信息<ul><li>某个 Topic 下的所有副本</li><li>某个 Topic 的所有分区</li><li>所有的 Topic 列表</li><li>移除某个 Topic 的所有信息</li></ul></li><li>所有 Broker 信息<ul><li>该 Broker 下的所有分区</li><li>某组 Broker 的所有副本</li><li>正在关闭的 Broker 列表</li><li>当前存活的 Broker 列表</li></ul></li><li>所有涉及运维的 Partiton 信息<ul><li>当前存活的所有 Partiton 副本</li><li>正在进行重分配的 Partiton 列表</li><li>某组 Partiton 下的所有副本</li><li>正在进行 preferred leader 选举的Partition</li><li>分配给每个 Partition 的副本列表</li><li>每个 Partition 的 Leader 和 ISR 信息</li></ul></li></ul><pre class="mermaid">graph LR;    控制器数据 --> 所有Topic信息    所有Topic信息 --> 某个Topic下的所有副本    所有Topic信息 --> 某个Topic的所有分区    所有Topic信息 --> 所有的Topic列表    所有Topic信息 --> 移除某个Topic的所有信息    控制器数据 --> 所有Broker信息    所有Broker信息 --> 该Broker下的所有分区    所有Broker信息 --> 某组Broker的所有副本    所有Broker信息 --> 正在关闭的Broker列表    所有Broker信息 --> 当前存活的Broker列表    控制器数据 --> 所有涉及运维的Partiton信息    所有涉及运维的Partiton信息 --> 当前存活的所有Partiton副本    所有涉及运维的Partiton信息 --> 正在进行重分配的Partiton列表    所有涉及运维的Partiton信息 --> 某组Partiton下的所有副本    所有涉及运维的Partiton信息 --> 正在进行preferredleader选举的Partition    所有涉及运维的Partiton信息 --> 分配给每个Partition的副本列表    所有涉及运维的Partiton信息 --> 每个Partition的Leader和ISR信息</pre><p>值得注意的是，这些数据其实在 ZooKeeper 中也保存了一份</p><p>每当控制器初始化时，它都会从 ZooKeeper 上读取对应的元数据并填充到自己的缓存中</p><h3 id="控制器故障转移"><a href="#控制器故障转移" class="headerlink" title="控制器故障转移"></a>控制器故障转移</h3><p>我们在前面强调过，在 Kafka 集群运行过程中，只能有一台 Broker 充当控制器的角色</p><p>那么这就存在单点失效（Single Point of Failure）的风险</p><p>Kafka 是如何应对单点失效的呢？</p><p>当运行中的控制器突然宕机或意外终止时，Kafka 能够快速地感知到，并立即启用备用控制器来代替之前失败的控制器</p><img src="kafka从入门到入土.assets/image-20230218120514451.png" alt="image-20230218120514451" style="zoom: 23%;" /><p>最开始时，Broker 0 是控制器。</p><p>当 Broker 0 宕机后，此时 ZK 就会通过 Watch 机制感知到并删除了 &#x2F;controller 临时节点。</p><p>之后所有存活的 Broker 就会收到通知，此时所有存活的 Broker 开始竞选新的控制器身份。</p><p>Broker 3 最终赢得了选举，成功地在 ZK 上重建了 &#x2F;controller 节点。</p><p>之后，Broker 3 会从 ZK 中读取集群元数据信息，并初始化到自己的缓存中。</p><p>至此，控制器的 Failover 完成，可以行使正常的工作职责了。</p><h3 id="控制器内部设计原理"><a href="#控制器内部设计原理" class="headerlink" title="控制器内部设计原理"></a>控制器内部设计原理</h3><p><font color='red'><strong>这部分只是根据部分文章，自己总结出来的，有些逻辑点说不通，后续还需要通过看 Kafka 的源码再补充完善这部分</strong></font></p><p><font color='red'><strong>这部分只是根据部分文章，自己总结出来的，有些逻辑点说不通，后续还需要通过看 Kafka 的源码再补充完善这部分</strong></font></p><p><font color='red'><strong>这部分只是根据部分文章，自己总结出来的，有些逻辑点说不通，后续还需要通过看 Kafka 的源码再补充完善这部分</strong></font></p><h4 id="老版本多线程设计"><a href="#老版本多线程设计" class="headerlink" title="老版本多线程设计"></a>老版本多线程设计</h4><p>在 Kafka 0.11 版本之前，Kafka 控制器是一个<strong>模拟状态机的多线程控制器</strong>。 </p><img src="kafka从入门到入土.assets/image-20230219143821049.png" alt="image-20230219143821049" style="zoom:50%;" /><p>它以下列方式工作：</p><p>既然是模拟状态机，那么都有哪些状态呢？</p><p><strong>需要维持的状态</strong>：这些状态是存储在 <font color='purple'><strong>Controller Context</strong></font> 中的</p><ul><li>每台机器上的分区副本。</li><li>分区的领导者。</li></ul><p><strong>什么会导致这些状态变化呢（状态变化源）</strong></p><ul><li><font color='#FFF2CC'>注册到 Zookeeper 的监听器线程。</font><ul><li><font color='#FFF2CC'>AddPartitionsListener</font>&gt;</li><li><font color='#FFF2CC'>BrokerChangeListener</font></li><li><font color='#FFF2CC'>DeleteTopicListener</font></li><li><font color='#FFF2CC'>PartitionReassignedListener（admin）</font></li><li><font color='#FFF2CC'>PreferredReplicaElectionListener（admin）</font></li><li><font color='#FFF2CC'>ReassignedPartitionsIsrChangeListener</font></li><li><font color='#FFF2CC'>TopicChangeListener</font></li></ul></li><li><font color='#FFF2CC'>controller与broker之间的socket连接 (controlled shutdown)</font></li><li><font color='#FFE6CC'>内部定时任务 <strong>Schedule Task</strong>线程（比如：preferred leader 选举）</font></li></ul><p><strong>状态是怎么变化的呢</strong></p><ul><li>ZK的监听线程，Kafka的API线程，内部定时任务的线程 都会<strong>同时</strong>改变状态</li><li>就是这些线程会同时修改 <font color='purple'><strong>Controller Context</strong></font></li></ul><p><strong>状态是怎么传播的</strong></p><ul><li>通过controller与broker之间的socket连接，进行状态的传输</li><li>通过controller与broker之间的消息队列</li><li>发送给broker的异步消息</li><li>不需要回调的消息（主题删除的除外）</li></ul><p><strong>故障转移</strong></p><ul><li>基于 Zookeeper 的领导者选举</li><li>Zookeeper 作为容错的持久状态存储。</li></ul><p><strong>这个设计的缺陷</strong></p><p>控制器是多线程的设计，会在内部创建很多个线程。比如：</p><ul><li>控制器需要为每个 Broker 都创建一个对应的 Socket 连接</li><li>控制器向这些 Broker 发送特定请求，会创建专属的列表</li><li>控制器连接 ZooKeeper 的会话，也会创建单独的线程来处理 Watch 机制的通知回调</li><li>控制器还会为主题删除创建额外的 I&#x2F;O 线程</li><li>多线程访问共享可变数据（控制器缓存）是维持线程安全最大的难题</li><li>为了保护数据安全性，控制器不得不在代码中大量使用 ReentrantLock 同步机制，这就进一步拖慢了整个控制器的处理速度</li></ul><h4 id="新版本单线程加时间队列设计"><a href="#新版本单线程加时间队列设计" class="headerlink" title="新版本单线程加时间队列设计"></a>新版本单线程加时间队列设计</h4><p>kafka 设计原文：<a href="https://cwiki.apache.org/confluence/display/kafka/kafka+controller+redesign">https://cwiki.apache.org/confluence/display/kafka/kafka+controller+redesign</a></p><p>鉴于这些原因，社区于 0.11 版本重构了控制器的底层设计，主要改进了两点</p><ul><li>把多线程的方案改成了单线程加事件队列的方案。</li><li>将 Broker 与 Zookeeper 的连接从同步改成了异步</li></ul><img src="kafka从入门到入土.assets/image-20230219144633226.png" alt="image-20230219144633226" style="zoom:35%;" /><p>将之前的 <strong>状态变化源</strong> 所涉及到的线程，抽象成 一个一个的<strong>事件 Event</strong></p><p>之前状态的变化，是通过线程直接操作控制器缓存</p><p>现在状态发生了变化，会将这个变化抽象成事件，放在事件队列中</p><p>由一个 <font color='green'>Event Execotor Thread</font> 单独处理，并操作 <font color='purple'><strong>Controller Context</strong></font> </p><p>此时的 zk 线程只负责 <font color='purple'><strong>Controller Context</strong></font> 更新而不负责事件 Event 执行。</p><p>针对控制器的第二个改进就是，将之前同步操作 ZooKeeper 全部改为异步操作。</p><p>ZooKeeper 本身的 API 提供了同步写和异步写两种方式。</p><p>之前控制器操作 ZooKeeper 使用的是同步的 API，性能很差，集中表现为，当有大量主题分区发生变更时，ZooKeeper 容易成为系统的瓶颈。</p><p>新版本 Kafka 修改了这部分设计，完全摒弃了之前的同步 API 调用，转而采用异步 API 写入 ZooKeeper，性能有了很大的提升。</p><p>根据社区的测试，改成异步之后，ZooKeeper 写入提升了 10 倍！</p><h3 id="如何处理脑裂"><a href="#如何处理脑裂" class="headerlink" title="如何处理脑裂"></a>如何处理脑裂</h3><p>如果 Controller 挂掉了，Kafka集群必须找到可以替代的 controller，否则集群将不能正常运转。</p><p>这里面存在一个问题，很难确定 Broker 是挂掉了，还是仅仅只是短暂性的故障。</p><p>但是，不管是哪种情况，集群为了正常运转，必须选出新的controller。</p><p>但是如果老的 controller 又正常了，他并不知道自己已经被取代了，那么此时集群中会出现两台controller。</p><h4 id="什么是脑裂"><a href="#什么是脑裂" class="headerlink" title="什么是脑裂"></a>什么是脑裂</h4><p>比如，某个 controlle r由于 GC 时间比较久，而被认为已经挂掉，并选择了一个新的controller。</p><p>在 GC 的情况下，在老的 Controller眼中，并没有改变任何东西，该 Broker 甚至不知道它已经暂停了。</p><p>因此，它将继续充当当前 Controller，但是此时系统中已经选择了另外一个新的 Controller</p><p>对于当前 Kafka 集群来说，就有了两个 Controller，有了两个大脑，就是脑裂了。</p><p>这是分布式系统中的常见情况，称为脑裂。</p><h4 id="如何解决脑裂"><a href="#如何解决脑裂" class="headerlink" title="如何解决脑裂"></a>如何解决脑裂</h4><p>Kafka是通过使用<strong>epoch number</strong>（纪元编号，也称为隔离令牌）来完成的。</p><p>epoch number只是单调递增的数字，第一次选出Controller时，epoch number值为1</p><p>如果再次选出新的Controller，则epoch number将为2，依次单调递增</p><p>简单的说，就是老的 controller 复活之后，它的 epoch 还是老的值，它所下发的命令携带的 epoch 还是老的值</p><p>当它的命令到达 broker 端之后，broker 发现有另一个 controller 发来的消息的epoch是新的值</p><p>就不会执行老的 controller 的命令。</p><h2 id="关于高水位和Leader-Epoch的讨论"><a href="#关于高水位和Leader-Epoch的讨论" class="headerlink" title="关于高水位和Leader Epoch的讨论"></a>关于高水位和Leader Epoch的讨论</h2><p>高水位和低水位分别是什么</p><p>HW</p><p>LEO（Log End Offet）</p><p>LSO（Log Stable Offset）：事务生产者</p><p>每个 Replica 都有自己的 HW 和 LEO；</p><p>Partiton 的 HW 就是 Leader Replica 的HW；</p><p>Leader Replica 所在的 Broker 除了保存当前 Replica 的 HW 和 LEO 之外，还保存了 它的 Follower Replica 的 HW 和 LEO</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>为什么kafka不像mysql那样允许追随者副本（follower replica）对外提供只读服务？</p><p>kafka是怎么做到 提供一套 API 实现生产者和消费者？</p><p>kafka是怎么做到 降低网络传输和磁盘存储开销；</p><p>kafka是怎么做到 实现高伸缩性架构。</p><p>kafka为什么快，为什么高吞吐？</p><ul><li>消息日志（Log）只能追加写，避免了随机IO，改成了顺序IO，大大提高了写能力；</li></ul><p>你觉得 Kafka 未来的演进路线是怎么样的？如果你是 Kafka 社区的“掌舵人”，你准备带领整个社区奔向什么方向呢？</p><p>想你是一家创业公司的架构师，公司最近准备改造现有系统，引入 Kafka 作为消息中间件衔接上下游业务。作为架构师的你会怎么选择合适的 Kafka 发行版呢</p><p>kafka每天 1 亿条 1KB 大小的消息，保存两份且留存两周的时间，需要多大的磁盘空间？</p><p>如果需要kafka1小时内处理1TB的业务数据，在千兆网络下，需要多少台kafka机器？</p><p>kafka怎么实现的故障转移？</p><p>kafka是怎么保障大数据量均匀的分布在各个Broker上的？</p><p>kafka的零拷贝技术是什么？</p><ul><li><a href="https://blog.csdn.net/ljheee/article/details/99652448">https://blog.csdn.net/ljheee/article/details/99652448</a></li><li><a href="https://www.jianshu.com/p/835ec2d4c170">https://www.jianshu.com/p/835ec2d4c170</a></li></ul><p>broker端收到消息也会解压缩，进行消息校验，那么零拷贝还有用嘛？</p><p>consumer可以先提交offset，在处理消息嘛？</p><p>kafka的producer是在producer实例化的时候，创建的TCP连接，那么这个时候，producer都不知道要往那个topic发消息，那么就不知道要连接到哪个broker？kafka是怎么做的呢？</p><p>kafka在建立TCP连接的步骤中，有没有可以优化的地方，目前社区做的不好的地方？</p><p>丰网的kafka的消费者重复注册是怎么做的？是同一个消费者实例的多个线程，还是同一个消费者类，注册了多个bean；</p><p>重试机制会导致消息乱序吗？</p><ul><li>重试机制不会重新计算Partition信息</li><li>重试机制会导致消息乱序，但是可以通过 max.in.flight.requests.per.connection&#x3D;1 来避免，但是会导致吞吐量下降</li><li>max.in.flight.requests.per.connection：表示限制客户端在单个连接上能够发送的未响应请求的个数；</li><li>设置为 1 表示：broker收到一个请求之后，在响应之前，是不会接收别的请求的</li></ul><p>消息的分区位移是什么时候写入的？</p><p>如果一个消息写入失败了，Producer 有重试，它的Offset是新的，还是老的？</p><p>Consumer设置自动提交位移，有一个提交频率，具体的流程是怎么提交的，如果消费到了Producer重试的消息，Offset会怎么样？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kafka从入门到入土&quot;&gt;&lt;a href=&quot;#kafka从入门到入土&quot; class=&quot;headerlink&quot; title=&quot;kafka从入门到入土&quot;&gt;&lt;/a&gt;kafka从入门到入土&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; cl</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="消息中间件" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="KAFKA" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/KAFKA/"/>
    
    
    <category term="kafka" scheme="https://zspcer.gitee.io/tags/kafka/"/>
    
    <category term="生产者" scheme="https://zspcer.gitee.io/tags/%E7%94%9F%E4%BA%A7%E8%80%85/"/>
    
    <category term="消费者" scheme="https://zspcer.gitee.io/tags/%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    
    <category term="消息" scheme="https://zspcer.gitee.io/tags/%E6%B6%88%E6%81%AF/"/>
    
    <category term="中间件" scheme="https://zspcer.gitee.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>spring注解AOP开发和源码解读及实践</title>
    <link href="https://zspcer.gitee.io/note/JAVA/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6/%E3%80%90spring%E3%80%91spring%E6%B3%A8%E8%A7%A3AOP%E5%BC%80%E5%8F%91%E5%92%8C%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%8F%8A%E5%AE%9E%E8%B7%B5/"/>
    <id>https://zspcer.gitee.io/note/JAVA/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6/%E3%80%90spring%E3%80%91spring%E6%B3%A8%E8%A7%A3AOP%E5%BC%80%E5%8F%91%E5%92%8C%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%8F%8A%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-02-23T13:45:00.880Z</published>
    <updated>2023-02-23T13:45:00.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring注解AOP开发和源码解读及实践"><a href="#spring注解AOP开发和源码解读及实践" class="headerlink" title="spring注解AOP开发和源码解读及实践"></a>spring注解AOP开发和源码解读及实践</h1><p>本文主要介绍spring的aop，基于注解和XML的简单使用和源码解读, 本文涉及的所有图片，如果不清晰，可以下载PDF文件进行查看：</p><h2 id="AOP的使用"><a href="#AOP的使用" class="headerlink" title="AOP的使用"></a>AOP的使用</h2><p>在了解使用之前，我们需要先了解一下：execution表达式</p><h3 id="execution表达式"><a href="#execution表达式" class="headerlink" title="execution表达式"></a>execution表达式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 任意公共方法的执行：</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//任何一个以“set”开始的方法的执行：</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> set<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//AccountService 接口的任意方法的执行：</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>AccountService</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//定义在service包里的任意方法的执行：</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//定义在service包和所有子包里的任意类的任意方法的执行：</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行：</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>pointcutexp<span class="token punctuation">.</span><span class="token punctuation">.</span>JoinPointObjP2<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于注解的使用"><a href="#基于注解的使用" class="headerlink" title="基于注解的使用"></a>基于注解的使用</h3><p>目前最火的使用方式就是基于注解的使用方式，避免了大量的配置文件，而且易于管理和维护。简单明了，推荐使用。</p><h4 id="导入aop所必须的最小maven依赖"><a href="#导入aop所必须的最小maven依赖" class="headerlink" title="导入aop所必须的最小maven依赖"></a>导入aop所必须的最小maven依赖</h4><ul><li><p>1.spring的aop依赖于spring的ioc容器，所以需要导入spring-context,同时spirng-context中已经引入了spring-aop，所以就不需要单独的引入spring-aop了。</p></li><li><p>2.spring的aop依赖于强大的AspectJ，所以需要引入aspectjweaver的依赖，但是spring-aspects已经加入了这个依赖，所以，只需要再引入spring-aspects就可以了。</p></li><li><p>3.关于为什么只引入这两个依赖，请移步：<a href="#spring-aop%E5%92%8CaspectJ%E7%9A%84%E5%85%B3%E7%B3%BB">spring-aop和aspectJ的关系</a></p></li><li><p>4.最后，我们自己会编写了一些测试方法，所以需要引入Junit的依赖。</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222163808764.png" alt="image-20221222163808764" style="zoom:80%;" /><h4 id="实现业务逻辑类"><a href="#实现业务逻辑类" class="headerlink" title="实现业务逻辑类"></a>实现业务逻辑类</h4><ul><li><p>在这个实例中，具体的业务逻辑类是： com.zspc.core.spring.aop.service.Calculator</p></li><li><p>我们想要的目的是：在业务逻辑运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常，等等等）</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 计算两个数的除法     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始计算-->除数:"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">",被除数:"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现具体的日志切面类"><a href="#实现具体的日志切面类" class="headerlink" title="实现具体的日志切面类"></a>实现具体的日志切面类</h4><ul><li><p>之前说到，我们的目的是：在业务逻辑类运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常，等等等）</p></li><li><p>所以我们需要一个切面类，切面类里面的方法需要动态感知Calculator.div(int,int)方法运行到哪里然后执行通知方法；</p></li><li><p>环绕通知：目标方法运行前后都运行，需要手动运行joinPoint.proceed()，才能推进目标方法的执行，对应切面类中的logAround()</p></li><li><p>前置通知：目标方法运行之前运行，对应切面类中的logStart()</p></li><li><p>后置通知：目标方法运行之后，结束之前（无论方法正常结束(return)还是异常结束(exception)）运行，对应切面类中的logAfter()</p></li><li><p>返回通知：目标方法返回之后运行，对应切面类中logReturn()</p></li><li><p>异常通知：目标方法发生异常的时候运行，该异常运行后，返回通知不会运行，对应切面类中的logException()</p></li><li><p>执行流程：环绕通知开始–&gt;前置通知–&gt;环绕通知joinPoint.proceed()–&gt;环绕通知结束–&gt;后置通知–&gt;返回通知&#x2F;异常通知</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logStart</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logEnd</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logReturn</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">logAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对切面类的方法添加注解，标注执行时机"><a href="#对切面类的方法添加注解，标注执行时机" class="headerlink" title="对切面类的方法添加注解，标注执行时机"></a>对切面类的方法添加注解，标注执行时机</h4><ul><li><p>对切面类添加注解,并指定切面</p><ul><li><p>@Around</p></li><li><p>@Before</p></li><li><p>@After</p></li><li><p>@AfterReturning</p></li><li><p>@AfterThrowing</p></li></ul></li><li><p>指定切面有两种方法</p><ul><li><p>定义一个公共的切面方法，@Pointcut(“execution (xxxxx)”)，并在切面类注解中引入</p></li><li><p>直接在切面类注解中指定切面：@Before(“com.xxx.xxx.xxx()”)</p></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//抽取公共的切入点表达式</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.zspc.core.spring.aop.service.Calculator.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logStart</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logEnd</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logReturn</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//....</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"exception"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">logAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="告诉spring哪个类是切面类"><a href="#告诉spring哪个类是切面类" class="headerlink" title="告诉spring哪个类是切面类"></a>告诉spring哪个类是切面类</h4><ul><li>就是给切面类加上 @Aspect 注解，让spirng容器知道这是一个切面类。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//....省略...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将切面类和业务逻辑类纳入spirng管理"><a href="#将切面类和业务逻辑类纳入spirng管理" class="headerlink" title="将切面类和业务逻辑类纳入spirng管理"></a>将切面类和业务逻辑类纳入spirng管理</h4><ul><li>就是在配置类中添加@Bean</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token variable">@Configuration</span><span class="token keyword">public</span> class MainConfig &#123;    <span class="token variable">@Bean</span>    <span class="token keyword">public</span> LogAspect logAspect<span class="token punctuation">(</span><span class="token punctuation">)</span> &#123;        <span class="token keyword">return</span> new LogAspect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    &#125;    <span class="token variable">@Bean</span>    <span class="token keyword">public</span> Calculator calculator<span class="token punctuation">(</span><span class="token punctuation">)</span> &#123;        <span class="token keyword">return</span> new Calculator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启基于注解的aop模式"><a href="#开启基于注解的aop模式" class="headerlink" title="开启基于注解的aop模式"></a>开启基于注解的aop模式</h4><ul><li>给配置类添加@EnableAspectJAutoProxy,，这样spring才能识别所有的aop注解。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">LogAspect</span> <span class="token function">logAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Calculator</span> <span class="token function">calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最后一步，编写测试类，进行测试"><a href="#最后一步，编写测试类，进行测试" class="headerlink" title="最后一步，编写测试类，进行测试"></a>最后一步，编写测试类，进行测试</h4><ul><li>测试类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AOPTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">MainConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Calculator</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> div <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试结果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">环绕通知开始前置通知运行。。。参数列表是：<span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>开始计算<span class="token operator">--</span><span class="token operator">></span>除数<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>被除数<span class="token operator">:</span><span class="token number">5.</span>环绕通知结束后置通知运行。。。<span class="token annotation punctuation">@After</span>返回通知运行。。。<span class="token annotation punctuation">@AfterReturning</span><span class="token operator">:</span>运行结果：<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于XML的使用"><a href="#基于XML的使用" class="headerlink" title="基于XML的使用"></a>基于XML的使用</h3><h4 id="略"><a href="#略" class="headerlink" title="略"></a>略</h4><p>这个就不说了，和上面差不多</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zspc.core.spring.aop.config.LogAspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>calculator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zspc.core.spring.aop.service.Calculator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution (* com.zspc.core.spring.aop.service.Calculator.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logStart<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logReturn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logException<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!--&lt;aop:after pointcut-ref="pointCut" method="doAfter"/>--></span>            <span class="token comment">&lt;!--&lt;aop:around pointcut-ref="pointCut" method="doAround"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP的源码流程分析"><a href="#AOP的源码流程分析" class="headerlink" title="AOP的源码流程分析"></a>AOP的源码流程分析</h2><p>对于任何的源码分析，都做到三步分析，就可以非常明确了：</p><ul><li><p>看给容器中注入了什么组件</p></li><li><p>这个组件什么时候工作</p></li><li><p>这个组件的功能是什么</p></li></ul><p>从 <code>@EnableAspectJAutoProxy </code> 开始</p><h3 id="EnableAspectJAutoProxy-是什么，干啥用的"><a href="#EnableAspectJAutoProxy-是什么，干啥用的" class="headerlink" title="@EnableAspectJAutoProxy 是什么，干啥用的"></a>@EnableAspectJAutoProxy 是什么，干啥用的</h3><p>结论先行：<code>@EnableAspectJAutoProxy</code>的作用就是为了给我们的容器中注入一个：<code>AnnotationAwareAspectJAutoProxyCreator</code></p><p>先看看这个注解类<code>EnableAspectJAutoProxy.java</code>的源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">AspectJAutoProxyRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAspectJAutoProxy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">proxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">exposeProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>EnableAspectJAutoProxy.java</code>类上有一个注解： <code>@Import(&#123;AspectJAutoProxyRegistrar.class&#125;)</code>： </p><ul><li><code>@Import</code>这个注解给容器中导入了一个组件 <code>AspectJAutoProxyRegistrar</code></li></ul></li><li><p><code>AspectJAutoProxyRegistrar</code>这个组件是干嘛呢？ 我们点进去看他的继承关系，源码如下：</p><ul><li><p>&#96;&#96;&#96;java<br>  package org.springframework.context.annotation;</p><p>  import org.springframework.aop.config.AopConfigUtils;<br>  import org.springframework.beans.factory.support.BeanDefinitionRegistry;<br>  import org.springframework.core.annotation.AnnotationAttributes;<br>  import org.springframework.core.type.AnnotationMetadata;</p><p>  class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar {<br>  AspectJAutoProxyRegistrar() {<br>  }<br><br>  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {<br>      AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);<br>      AnnotationAttributes enableAspectJAutoProxy &#x3D; AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);<br>      if (enableAspectJAutoProxy !&#x3D; null) {<br>          if (enableAspectJAutoProxy.getBoolean(“proxyTargetClass”)) {<br>              AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);<br>          }<br><br>          if (enableAspectJAutoProxy.getBoolean(“exposeProxy”)) {<br>              AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);<br>          }<br>      }<br>  }<br>  }</p>  <pre class="line-numbers language-none"><code class="language-none">    - &#96;class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar &#96; 这个类继承自 &#96;ImportBeanDefinitionRegistrar&#96;    - 我们发现他是一个 &#96;ImportBeanDefinitionRegistrar &#96;，通过之前的学习，我们知道&#96;ImportBeanDefinitionRegistrar&#96;的作用是：        - 使用&#96;@Import&#96;的时候，可以指定&#96;ImportBeanDefinationRegitrar.&#96;        - 自定义一个类实现&#96;ImportBeanDefinationRegistrar&#96;接口,并实现&#96;resisterBeanDefinatons&#96;方法，在这个方法里面，可以指定需要注册的组件。        - 使用&#96;ImportBeanDefinationRegistrar&#96;,可以指定bean名，以及作用域之类的，比之前两种方式拥有更多的定制性        - 关于这些作用，看不懂，没关系，可以参考：    - 所以，我们要看看&#96;AspectJAutoProxyRegistrar&#96;这个到底给我们容器中注入了什么东西？        - &#96;AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);&#96; 通过这行代码，我们看到他给我们注册了一个&#96;AspectJAnnotationAutoProxyCreator&#96;如果需要的话。        - 一直点进去这个方法，最后会看到给我们的容器中注入了一个bean：        - 注入的bean的名字叫做：&#96;org.springframework.aop.config.internalAutoProxyCreator&#96;        - 注入的bena的实际对象是：&#96;org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator&#96;简单的说就是：EnableAspectJAutoProxy 使用了 @Import，@Import导入了一个AspectJAutoProxyRegistrar ，这个Register继承自ImportBeanDefinitionRegister，并实现了registerBeanDifinitions方法，向容器中注册了一个：AnnotationAwareAspectJAutoProxyCreator总结：&#96;@EnableAspectJAutoProxy&#96;的作用就是为了给我们的容器中注入一个：&#96;AnnotationAwareAspectJAutoProxyCreator&#96;以下是示意图（图中也有步骤说明）&lt;img src&#x3D;&quot;【spring】spring注解AOP开发和源码解读及实践.assets&#x2F;image-20221222170945180.png&quot; alt&#x3D;&quot;image-20221222170945180&quot; style&#x3D;&quot;zoom: 33%;&quot; &#x2F;&gt;### AnnotationAwareAspectJAutoProxyCreator 是什么？干啥用的？- 我们看看这个类&#96;AnnotationAwareAspectJAutoProxyCreator.java&#96;的继承关系：    - class AnnotationAwareAspectJAutoProxyCreator extends AspectJAwareAdvisorAutoProxyCreator    - class AspectJAwareAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator    - class AbstractAdvisorAutoProxyCreator extends AbstractAutoProxyCreator    - class AbstractAutoProxyCreator extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware    - 到这里就到底了，我们发现了两个重要的接口：        - &#96;SmartInstantiationAwareBeanPostProcessor&#96;：是一个后置处理器xxxxBeanPostProcessor，我们知道在spirng中，后置处理器是一个非常重要的概念，他会在bean的初始化前后做一些工作。所以，我们要看这个&#96;SmartInstantiationAwareBeanPostProcessor&#96;到底做了什么，实现了我们的aop的强大功能        - &#96;BeanFactoryAware&#96;：实现了这个接口的bean，可以直接访问 Spring 容器，该bean被容器创建以后，它会拥有一个指向 Spring 容器（也就是BeanFactory）的引用，可以利用该bean根据传入参数动态获取被spring工厂加载的其他的所有的bean。 eg：这部分是IOC的内容，我们不扯那么多&lt;img src&#x3D;&quot;【spring】spring注解AOP开发和源码解读及实践.assets&#x2F;znInKzNU3RP5vLmcaq7ij3QsxgXDADDfgxV76ZhS-58.png&quot; alt&#x3D;&quot;znInKzNU3RP5vLmcaq7ij3QsxgXDADDfgxV76ZhS-58&quot; style&#x3D;&quot;zoom: 25%;&quot; &#x2F;&gt;- AnnotationAwareAspectJAutoProxyCreator 作为 xxxBeanPostProcessor 做了什么工作- AnnotationAwareAspectJAutoProxyCreator 作为 BeanFactoryAware 做了什么工作- 在分析上面两个问题之前，我们先来看看AnnotationAwareAspectJAutoProxyCreator是什么时候被创建的。- 在之前，我们知道@EnableAspectJAutoProxy的给我们的容器中注入一个：AnnotationAwareAspectJAutoProxyCreator- 同时，我们知道AnnotationAwareAspectJAutoProxyCreator的作用主要是作为一个后置处理器，在bean的创建前后做一些工作，以及实现了BeanFactoryAware接口，可以直接与spring容器进行操作。- 那么，AnnotationAwareAspectJAutoProxyCreator是什么时候被创建的呢？### AnnotationAwareAspectJAutoProxyCreator 是什么时候被创建的- 从程序的入口开始看，这里的入口是指我们的测试类，也就是下面这段代码&#96;&#96;&#96;javapublic class AOPTest &#123;    @Test    public void testAop() &#123;        ApplicationContext applicationContext &#x3D; new AnnotationConfigApplicationContext(MainConfig.class);        Calculator calculator &#x3D; (Calculator) applicationContext.getBean(&quot;calculator&quot;);        int div &#x3D; calculator.div(2, 1);        System.out.println(div);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>new AnnotationConfigApplicationContext(MainConfig.class)： 传入配置类，创建Spring容器</p></li><li><p>点击进去构造方法，在创建容器的时候，有一个非常重要的方法叫做：refresh();</p></li><li><p>refresh()方式是整个IOC容器创建的关键，对于他的解释，看下面的说明，关于refresh()方法，在本文中不是重点，可以略过…</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span>      <span class="token comment">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span>      <span class="token comment">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-> beanDefinition 的 map)</span>      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span>      <span class="token comment">// 这块待会会展开说</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span>         <span class="token comment">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span>         <span class="token comment">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span>         <span class="token comment">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span>         <span class="token comment">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span>         <span class="token comment">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span>         <span class="token comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 重点，重点，重点</span>         <span class="token comment">// 初始化所有的 singleton beans</span>         <span class="token comment">//（lazy-init 的除外）</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 最后，广播事件，ApplicationContext 初始化完成</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 把异常往外抛</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在refresh()方法中，调用了registerBeanPostProcessors(beanFactory);用来注册xxxBeanPostProcessor后置处理器。</p></li><li><p>正如我们的标题：AnnotationAwareAspectJAutoProxyCreator类，他其实就是一个继承了SmartInstantiationAwareBeanPostProcessor的一个后置处理器。</p></li><li><p>所以这个方法里面，其实就创建了我们的AnnotationAwareAspectJAutoProxyCreator类。</p><ul><li><p>作者注：registerBeanPostProcessors(beanFactory)是用来注册xxxBeanPostProcessor的，但是我们的AnnotationAwareAspectJAutoProxyCreator不是以BeanPostProcessor结尾的，能创建它吗？</p></li><li><p>作者注：当然是能的，在这里，一开始没转过弯，我们要知道我们的AnnotationAwareAspectJAutoProxyCreator虽然不是BeanPostProcessor结尾的，但是他可是继承了xxxBeanPostProcessor的，所以他也是一个BeanPostProcessor。</p></li></ul></li><li><p>知道了registerBeanPostProcessors(beanFactory)是用来注册xxxBeanPostProcessor，所以我们知道我们的AnnotationAwareAspectJAutoProxyCreator类也是在这里创建的，那么我们进去看看。</p></li><li><p>首先获取所有等待注册的xxxBeanPostProcessor的定义，注意这里只是定义！并不是真正的bean。：String[] postProcessorNames &#x3D; beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);</p></li><li><p>怎么理解这里所说的“定义”呢？</p><ul><li><p>就相当于我出门买东西，要买牙刷，牙膏，洗衣液，衣架. 我列了一个清单。</p></li><li><p>这个清单，是所有要买的东西的定义，但是它不是真正的东西！</p></li></ul></li><li><p>下一步，对所有的xxxBeanPostProcessor进行归类，并且按类分别生成Bean,这里就是生成真正的Bean了。</p></li><li><p>归类，共分为三类：继承了PriorityOrdered的为一类，继承了Ordered的为一类，剩下的为一类。</p></li><li><p>然后对这三类，分别进行注册。</p><ul><li><p>优先注册实现了PriorityOrdered接口的BeanPostProcessor； </p></li><li><p>再给容器中注册实现了Ordered接口的BeanPostProcessor；</p></li><li><p>最后注册没实现优先级接口的BeanPostProcessor；</p></li></ul></li><li><p>所谓的注册，实际上就是创建BeanPostProcessor的具体Bean实例，放在容器里。</p></li><li><p>现在，我们知道了，所谓的注册，实际上就是创建BeanPostProcessor的具体Bean实例，并且我们知道了在哪里注册我们的BeanPostProcessor。下面我们具体看看怎么注册的。</p></li><li><p>在看怎么注册的之前，明确一点：在spring启动的时候，会注册很多xxxBeanPostProcessor，我们现在先不需要关注其他的，我们关注的是</p></li><li><p>bean 的定义为：InternalAutoProxyCreator</p></li><li><p>创建的bean实例为：AnnonationAwareAspectJAutoProxyCreator</p></li><li><p>主要是关注这个，其他的我们先不看</p></li><li><p>之前我们说了，在refresh()方法中，会注册BeanPostProcessor，而且是按照分类进行注册的。</p></li><li><p>下面这个图，是上面这部分逻辑的图示（图中有说明）</p></li></ul><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222174926824.png" alt="image-20221222174926824" style="zoom: 67%;" /><ul><li>我们的关注点：AnnontationAwareAspectJAutpProxyCreator是实现了了Ordered接口的，所以我们关注怎么注册实现了Ordered的接口的BeanPostProcessor</li><li>主要是在源码：BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class); 这一行，通过我们的bean定义和要获取的bean实例类型–&gt;来获取我们的bean实例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Next, register the BeanPostProcessors that implement Ordered.</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BeanPostProcessor</span> pp <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token keyword">instanceof</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        internalPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getBean() –调用了–&gt; doGetBean()，doGetBean的主要逻辑如下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试从缓存中获取我们的目标Bean对象</span>    <span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取到了，直接拿到目标bean对象</span>        bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 缓存中获取不到，那么就去生成</span>        <span class="token comment">// 生成之前会做一些检查</span>            <span class="token comment">// Create bean instance. 开始生成目标bean</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//目标类是单例</span>                sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">//异常</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//目标类是多例--省略了</span>                bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//其他</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 检查并返回--省略了</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>我们是第一次运行，缓存中肯定没有，所以肯定会去生成createBean()，我们进去createBean()看一下，createBean里面 –调用了–&gt; doCreateBean()</p></li><li><p>创建bean实例，都是在 doCreateBean() 中完成的，doCreateBean()主要完成了下面几个工作</p><ul><li><p>创建bean实例，但是没有任何属性： instanceWrapper &#x3D; createBeanInstance(beanName, mbd, args);</p></li><li><p>对bean进行属性复制：populateBean(beanName, mbd, instanceWrapper); </p></li><li><p>初始化bean：exposedObject &#x3D; initializeBean(beanName, exposedObject, mbd); 这个初始化，才是重点中的重点</p></li></ul></li><li><p>返回初始化之后的bean，就是真真正正的bean了，也就是我们苦思冥想的：AnnotationAwareAspectJAutoProxyCreator的实例。</p></li><li><p><strong>初始化bean：exposedObject &#x3D; initializeBean(beanName, exposedObject, mbd); 这个初始化，才是重点中的重点</strong></p></li><li><p>我们来单独看看这部分重点内容，初始化bean里面会在bean的初始化之前和之后分别执行BeanPostProcessor</p></li><li><p>处理Aware接口的方法回调：invokeAwareMethods(beanName, bean);</p></li><li><p>只有实现了Aware接口的bean才会调用</p></li><li><p>这里主要是做了一步：就是把BeanFactory交给当前的bean，换句话说：就是当前bean里面保存了一个对beanFactory的一个引用。</p></li><li><p>应用后置处理器的postProcessBeforeInitialization（）：wrappedBean &#x3D; applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</p></li><li><p>执行自定义的初始化方法：invokeInitMethods(beanName, wrappedBean, mbd);</p></li><li><p>这里所说的自定义的初始化方法，是我们自己配置的 init 方法，会在这里执行</p><ul><li>什么是自己配置的init方法，就是下面这种，指定的 initMethod </li><li><blockquote><p>@Bean(initMethod&#x3D;””,destoryMethod&#x3D;””)</p></blockquote></li><li><blockquote><p>&lt;bean id&#x3D;””, class&#x3D;””, init-method&#x3D;””, destory-method&#x3D;””&gt;</p></blockquote></li></ul></li><li><p>执行后置处理器的postProcessAfterInitialization（）：wrappedBean &#x3D; applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</p></li><li><p>返回wrappedBean，就是我们的目标结果了。</p></li></ul><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222175654720.png" alt="image-20221222175654720" style="zoom: 50%;" /><ul><li><p>最后创建完之后，会将我们的BeanPostProcessor放在BeanFoctory中。beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext))</p><ul><li>作者注：BeanPostProcessor也是一个Bean，既然是Bean，就要满足Bean的生成步骤，每一个Bean的生成都会判断是否有对应的BeanPostProcessor需要执行！这也是为什么我们的 AnnotationAwareAspectJAutoProxyCreator明明是一个BeanPostProcessor，为什么还要执行applyBeanPostProcessorsBeforeInitialization和applyBeanPostProcessorsAfterInitialization</li></ul></li><li><p>总结：至此，我们本小节的标题：AnnotationAwareAspectJAutoProxyCreator 是什么时候被创建的呢？就已经完成了。我们总体回顾一下</p><ul><li>首先是，我们知道@EnableAspectJAutoProxy的给我们的容器中注入一个：AnnotationAwareAspectJAutoProxyCreator</li><li>同时，我们知道AnnotationAwareAspectJAutoProxyCreator的作用主要是作为一个后置处理器，在bean的创建前后做一些工作，以及实现了BeanFactoryAware接口，可以直接与spring容器进行操作。</li><li>那么，我们现在又知道了AnnotationAwareAspectJAutoProxyCreator的是什么时候被创建的，怎么被创建的，以及创建完之后是加入到了BeanFacory中。</li></ul></li><li><p>下面，我们就要看看，这个 AnnotationAwareAspectJAutoProxyCreator 是怎么具体影响我们的业务的，是怎么把aop功能添加进来的。</p></li><li><p>在看这个问题之前，我们要先看一下，我们具体的业务类是怎么创建的。包括：MainConfig, LogAspect, Calculator这三个类</p></li><li><p>MainConfig是一个配置类</p></li><li><p>LogAspect是一个切面类</p></li><li><p>Calculator是一个普通类</p></li></ul><h3 id="具体的业务类-MainConfig-LogAspect-Calculator-是怎么创建的"><a href="#具体的业务类-MainConfig-LogAspect-Calculator-是怎么创建的" class="headerlink" title="具体的业务类(MainConfig, LogAspect, Calculator)是怎么创建的"></a>具体的业务类(MainConfig, LogAspect, Calculator)是怎么创建的</h3><ul><li><p>首先我们明确一点，在spirng中，所有bean的生成走的代码都是同一个，只不过根据接口的不同，走的逻辑不同</p></li><li><p>对于这三个类bean的生成，因为三个类所代表的含义都是不同的，所以他们分别生成的逻辑是不同的。</p></li><li><p>在区分这三个类的生成逻辑之前，我们总体看一下，bean的通用生成规则：</p></li><li><p>对于一个Bean来说，不管这个Bean是BeanPostProcessor，还是config类，还是切面类，或者是普通类，在spirng中，都是通过getBean()作为统一入口</p></li><li><p>比如对于前面说的BeanPostProcessor，他的创建入口在：</p><ul><li>开始：refresh() </li><li>紧接着：registerBeanPostProcessors(beanFactory);</li><li>紧接着：registerBeanPostProcessors(beanFactory, this);</li><li>这一行调用了getBean()：BeanPostProcessor pp &#x3D; beanFactory.getBean(ppName, BeanPostProcessor.class);</li></ul></li><li><p>比如我们的普通Bean 的创建</p><ul><li>开始：refresh() </li><li>紧接着：finishBeanFactoryInitialization(beanFactory);</li><li>紧接着：beanFactory.preInstantiateSingletons();</li><li>最后调用了 getBean()：getBean(beanName);</li></ul></li><li><p>所以，我们从getBean开始，看一下spring是怎么创建Bean的，以及怎么兼容所有的bean类型的（BeanPostProcessor，Config，切面类等）</p></li><li><p>下面的代码是getBean的主要逻辑流程，我是把所有的逻辑汇总在了一起，实际的代码中，是涉及到多个类的多个方法，比较复杂。我们只看主逻辑。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历所有的bean定义</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> 所有的<span class="token class-name">BeanName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 尝试从缓存中获取我们的目标Bean对象</span>            <span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取到了，直接拿到目标bean对象</span>                bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 缓存中获取不到，那么就去生成</span>                <span class="token comment">// 生成之前会做一些检查</span>                <span class="token comment">// Create bean instance. 开始生成目标bean</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//生成单例bean</span>                    <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>                        <span class="token comment">// 给 BeanPostProcessors 一个机会：返回代理类替代目标类(这里的代理类并不是说从缓存中取出代理类，而是用另一种方式生成代理类)</span>                        <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token number">1.</span><span class="token function">applyBeanPostProcessorsBeforeInstantiation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                        <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                            <span class="token comment">//我们可以看到，这里也有创建代理的逻辑，以至于很多人会搞错。</span>                                            <span class="token comment">//确实，这里是有可能创建代理的，但前提是对于相应的 bean 我们有自定义的 TargetSource 实现，</span>                                            <span class="token comment">//进到 getCustomTargetSource(...) 方法就清楚了，我们需要配置一个 customTargetSourceCreators，它是一个 TargetSourceCreator 数组。</span>                                            <span class="token comment">//这里就不再展开说 TargetSource 了</span>                                        <span class="token punctuation">&#125;</span>                                    <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token number">2.</span>如果before返回的bean是个<span class="token keyword">null</span>，after不会执行                            <span class="token number">3.</span><span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    postProcessAfterInitialization                                    <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">//开始创建Bean</span>                        <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token comment">//生成bean对象</span>                                <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//给bean对象赋属性值</span>                                <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//初始化bean对象</span>                                <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                    <span class="token comment">//执行后置处理器</span>                                    <span class="token number">1.</span><span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                        postProcessBeforeInitialization                                    <span class="token punctuation">&#125;</span>                                    <span class="token number">2.</span>invokeInitMethods                                    <span class="token number">3.</span><span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                        <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                            <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                                <span class="token comment">//Create proxy if we have advice.</span>                                                <span class="token comment">//如果有切面的话，就创建代理</span>                                                <span class="token comment">//Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span>                                                <span class="token function">createProxy</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token punctuation">&#125;</span>                                        <span class="token punctuation">&#125;</span>                                    <span class="token punctuation">&#125;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//生成多例bean--省略了</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//其他--省略</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 检查并返回--省略了</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>要想把上面那部分代码看懂，至少需要debug调试十几遍，反正我是不知道调试了几十遍，才看懂的。现在对上面的代码几个注意点说下：</p></li><li><p>applyBeanPostProcessorsBeforeInstantiation 和 applyBeanPostProcessorsBeforeInitialization 这是两个不一样的方法,一定不要看错，否则会很迷惑</p><ul><li>一个结尾是：Instantiation（实例化）</li><li>一个结尾是：Initialization（初始）</li></ul></li><li><p>下面我们就来看一下，我们关注的三个类的具体创建步骤，结合上面的代码流程，通过三个具体类的创建，来温故知新一下。</p></li></ul><h4 id="MainConfig"><a href="#MainConfig" class="headerlink" title="MainConfig"></a>MainConfig</h4><ul><li>我们从refresh()–&gt;finishBeanFactoryInitialization()–&gt;preInstantiateSingletons()–&gt;这些就不说了，我们从遍历Bean定义开始</li></ul><img src="【spring】spring注解AOP开发和源码解读及实践.assets/hNUBsLKhDYiqy_0t9sgVmMs6XhnbS9UO2ETVGIxlHBE.png" alt="hNUBsLKhDYiqy_0t9sgVmMs6XhnbS9UO2ETVGIxlHBE" style="zoom: 50%;" /><h4 id="LogAspect"><a href="#LogAspect" class="headerlink" title="LogAspect"></a>LogAspect</h4><img src="【spring】spring注解AOP开发和源码解读及实践.assets/n64jjFWSA8kCbc9AgoYEMtaVPtku_Nu8LSTDjyp8QsU.png" alt="n64jjFWSA8kCbc9AgoYEMtaVPtku_Nu8LSTDjyp8QsU" style="zoom: 80%;" /><h4 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h4><img src="【spring】spring注解AOP开发和源码解读及实践.assets/WkX2HY8q-7QE94zE6_AGpMWC9AxxIOOW0M6DZ3mCDCA.png" alt="WkX2HY8q-7QE94zE6_AGpMWC9AxxIOOW0M6DZ3mCDCA" style="zoom:80%;" /><ul><li><p>总结：通过以上的分析，我们收获了什么呢？</p></li><li><p>我们知道了BeanPostProcessor有两种，一种是在创建Bean之前给一个机会返回代理，一种是在创建bean之后进行一些操作。</p></li><li><p>前者是继承了SmartInstantiationAwareBeanPostProcessor的才有的功能。后者是所有的BeanPostProcessor都有的功能（包括SmartInstantiationAwareBeanPostProcessor）。</p></li><li><p>同时，我们知道了三个类的具体创建流程：mainConfig，LogAspect，Calculator的创建流程。</p></li><li><p>最后，我们仍然有一个疑问：</p></li><li><p>@EnableAspectJAutoProxy给我们的容器中注入一个：AnnotationAwareAspectJAutoProxyCreator</p></li><li><p>AnnotationAwareAspectJAutoProxyCreator是一个SmartInstantiationAwareBeanPostProcessor，我们目前只知道他是在bean创建之前给一个返回代理的机会。</p></li><li><p>但是同时我们知道，我们生成的所有这些类（仅限于当前这个demo里的所有类），貌似都没有把握这个机会，在bean创建之前生成了代理。</p></li><li><p>那么，这么AnnotationAwareAspectJAutoProxyCreator到底是有什么作用呢？？我还不知道！！！</p></li><li><p>除了上面那个问题，我们不知道之外，接下来，再来具体看看我们的代理对象，就是Calculator代理对象具体是怎么生成！</p></li></ul><h3 id="Calculator代理对象具体是怎么生成的？"><a href="#Calculator代理对象具体是怎么生成的？" class="headerlink" title="Calculator代理对象具体是怎么生成的？"></a>Calculator代理对象具体是怎么生成的？</h3><ul><li><p>话接上回，我们知道了spinrg的aop会对需要增强的bean的创建代理对象。在这里，被切的Calculator类就是一个增强的类，所以spirng会对他创建代理。</p></li><li><p>同样的，我们知道，spring在对切面增强类创建代理，是在wrapIfNessary()这个方法里面创建代理的。那么我们就来看看是什么创建的，切面方法是怎么注入进来的。</p></li><li><p>首先是获取当前bean可用的所有通知方法，Object[] specificInterceptors</p></li><li><p>找到候选的所有的增强器（找哪些通知方法是需要切入当前bean方法的）</p></li><li><p>获取到能在bean使用的增强器。</p></li><li><p>给增强器排序</p></li><li><p>这个获取当前类的所有通知方法的代码，就不看了，我们只需要知道运行完这个方法之后，就会拿到当前类的所有通知方法就可以啦。</p></li><li><p>然后，当我们获取到当前类的所有通知方法之后，保存当前bean在advisedBeans中，并设置为true，表示它是一个增强bean</p></li><li><p>紧接着就是创建代理：Object proxy &#x3D; createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</p></li><li><p>将代理保存到proxyFactory，然后创建代理对象：代理有两种，有Spring自动决定创建哪一个代理</p></li><li><p>JdkDynamicAopProxy(config);jdk动态代理；</p></li><li><p>ObjenesisCglibAopProxy(config);cglib的动态代理；</p></li><li><p>代理创建成功后，给容器中返回当前组件使用cglib增强了的代理对象；</p></li><li><p>以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法。</p></li><li><p>这部分我们不深究究竟是怎么获取通知方法的，已经具体是怎么选择创建什么代理的，以及代理最终是怎么创建的。所以这里就不贴图了。</p></li><li><p>总结：</p></li><li><p>我们知道spring的aop会对需要增强的bean的创建代理对象</p></li><li><p>需要增强的bean会被保存在advisedBeans中，创建后的代理对象也会保存在proxyFactory中，最终创建的proxy代理对象会返回，并保存在IOC容器中，供以后使用。</p></li><li><p>那么，接下来，我们就看看，当我们调用目标方法的时候，代理对象是怎么具体执行的？</p></li></ul><h3 id="调用目标方法，代理对象是怎么执行的？"><a href="#调用目标方法，代理对象是怎么执行的？" class="headerlink" title="调用目标方法，代理对象是怎么执行的？"></a>调用目标方法，代理对象是怎么执行的？</h3><ul><li><p>通过以上所有的步骤，我们现在终于走到了最后一步，在开始执行目标方法之前，我们先来简单的整体回顾一下。</p></li><li><p>@EnableAspectJAutoProxy 开启AOP功能，并给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator</p></li><li><p>AnnotationAwareAspectJAutoProxyCreator这个组件通过refresh()中的registerBeanPostProcessors(beanFactory);这个方法被注册进来</p></li><li><p>然后开始生成所有的bean（包括我们的mainConfig，LogAspect, Calculator）等的创建，在这类的创建步骤中，之前注册的组件：AnnotationAwareAspectJAutoProxyCreator会产生作用</p></li><li><p>什么作用呢？就是在bean的创建之前执行BeanPostProcessor，在before中给一个返回代理对象的机会。</p></li><li><p>如果没有返回代理对象，那么就创建bean，创建bean之后，会再次执行BeanPostProcessor，在after中会判断是否是增强bean，会是需要创建代理</p></li><li><p>如果不需要创建代理，那么就直接返回bean（比如MainConfig，LogAspect这两个就不需要创建代理）</p></li><li><p>如果需要创建代理，那么就获取所有的通知方法，然后spirng决定创建cglib代理还是jdk代理，并返回代理对象。</p></li><li><p>最后，就到了我们这一小节的主题：代理对象是怎么替代目标方法执行的？</p></li><li><p>代理对象创建成功之后，执行目标方法，其实就是通过代理对象来执行目标方法了。</p></li><li><p>执行目标的方法的入口是在我们的测试类中</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AOPTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">MainConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Calculator</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里是是入口</span>        <span class="token keyword">int</span> div <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>意思就是当我们执行int div &#x3D; calculator.div(2, 1);，实际上就是我们的代理对象执行的。所以他会进入到代理对象的执行流程里。</p></li><li><p>下一步，就是进入到代理对象的执行，执行目标方法进入了CglibAopProxy.intercept()方法中</p></li><li><p>intercept()方法的作用就是在目标方法执行前后进行拦截，这也是我们aop代理对象的核心，就是通过拦截器执行切面。</p></li><li><p>在intercept()方法中主要做了两件事：</p></li><li><p>getInterceptorsAndDynamicInterceptionAdvice() 获取所有的拦截器链</p></li><li><p>proceed() 执行拦截器链</p></li><li><p>当拦截器链执行完之后，所有的切面也就执行完了。同时会进行返回 return retVal;这个retVal就是我们目标方法的返回值。</p></li><li><p>这就是调用目标方法，代理对象的大致执行流程。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//一些变量的定义</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取拦截器链</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 对拦截器链进行检查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果拦截器链为空，就直接执行目标方法</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 否则就执行拦截器链</span>            retVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> methodProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后得到返回值，进行返回</span>        retVal <span class="token operator">=</span> <span class="token function">processReturnType</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> retVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//一些处理</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>总结：我们知道了代理对象执行的大致流程，无非是两个关键的步骤：</p></li><li><p>拦截器链的获取</p></li><li><p>拦截器链的执行</p></li></ul><h3 id="目标方法执行之拦截器链的获取"><a href="#目标方法执行之拦截器链的获取" class="headerlink" title="目标方法执行之拦截器链的获取"></a>目标方法执行之拦截器链的获取</h3><ul><li><p>通过上面我们知道，目标方法的执行，其实就是代理对象的执行。代理对象在之前之前， 会获取到所有的拦截器（这里的拦截器，实际上就是我们之前说的通知方法，也叫切面方法）</p></li><li><p>那么，现在我们来看一看，拦截器链是怎么获取的。</p></li><li><p>首先，进入拦截器链的获取方法中： List chain &#x3D; this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</p></li><li><p>会先从缓存中拿一下，缓存中没有的话，再去获取拦截器链。会将获取的结果放在缓存中，以便于下次可以直接使用</p></li><li><p>获取拦截器链：this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(this, method, targetClass)</p></li><li><p>获取拦截器链的步骤比较简单，我们直接通过简化后的代码进行查看（省略了很多代码，建议跟着源码看）</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个List，从来存放所有的拦截器链：看看人家List的定义，会传入list的大小，不浪费一点内存空间，真好！</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> interceptorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历所有的Advisors，Advisors里面都是我们的通知方式，通过断点我们看到。包含一个系统默认的通知方法和我们定义的所有拦截方法</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Advisor</span> advisor <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//会根据不同的类型，分别走不同的逻辑，但是都会调用同一个方法，就是getInterceptors()</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从advisor中获取MInterceptor</span>            <span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//最后返回所有的拦截器</span>    <span class="token keyword">return</span> interceptorList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>明白了拦截器链的获取流程之后，我们在进入看看怎么从从advisor中获取MInterceptor，这部分代码更简单，直接贴上源码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token class-name">Advisor</span> advisor<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownAdviceTypeException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建list用于保存</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">></span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取具体的通知方法，advice其实就是我们具体的通知方法。 </span>    <span class="token comment">//advice和advisor的作用是：advisor是一个大集合，里面包含了很多很多东西，advice就是advisor包含的内容之一，就是具体的通知方法</span>    <span class="token class-name">Advice</span> advice <span class="token operator">=</span> advisor<span class="token punctuation">.</span><span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//然后对通知方法进行判断，我们知道通知方法有很多种：前置通知，后置通知等等</span>    <span class="token comment">//如果当前通知方法是MethodInterceptor类型的，就直接放进去</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>advice <span class="token keyword">instanceof</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果不是MethodInterceptor类型的，就会通过一个适配器，将通知方法转换成MethodInterceptor类型的。 </span>    <span class="token comment">//可以进去看看这个适配器，其实就是装饰模式，进行了一次包装，包装成MethodInterceotor</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AdvisorAdapter</span> adapter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adapters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">supportsAdvice</span><span class="token punctuation">(</span>advice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">getInterceptor</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//最后进行一下校验，然后返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownAdviceTypeException</span><span class="token punctuation">(</span>advisor<span class="token punctuation">.</span><span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> interceptors<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span>interceptors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行完以上的步骤，我们就获取到了当前目标类的所有的拦截器。下一步就是执行拦截器了。</li></ul><h3 id="目标方法执行之拦截器链的执行"><a href="#目标方法执行之拦截器链的执行" class="headerlink" title="目标方法执行之拦截器链的执行"></a>目标方法执行之拦截器链的执行</h3><ul><li><p>到这一步，才是我们切面的真真正正的执行，前面做的都是准备。什么是真真正正的执行呢？就是我们可以在控制台，看到输出。</p></li><li><p>明确一个概念：所谓的spring的aop，就是一个代理类，这个代理类内有很多拦截器，在真正的方法执行前后，会执行这些拦截器，这就是aop的本质。</p></li><li><p>好了，下面我们看看拦截器链的执行吧。这是重点！！</p></li><li><p>retVal &#x3D; new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</p></li><li><p>其中proceed()方法是重点，他是一个递归调用的方法。</p></li><li><p>在方法的一开始，保存了一个变量，这个变量从-1开始，每一次process()的执行，都会++，直到所有的拦截器都执行完了，才会开始返回。</p></li><li><p>我们直接看源码，这个方法并不是很长。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//    这个变量从-1开始执行，直到所有的拦截器全都执行完</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//变量每次执行++</span>    <span class="token class-name">Object</span> interceptorOrInterceptionAdvice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptorOrInterceptionAdvice <span class="token keyword">instanceof</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Evaluate dynamic method matcher here: static part will already have</span>        <span class="token comment">// been evaluated and found to match.</span>        <span class="token class-name">InterceptorAndDynamicMethodMatcher</span> dm <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dm<span class="token punctuation">.</span>methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> dm<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Dynamic matching failed.</span>            <span class="token comment">// Skip this interceptor and invoke the next in the chain.</span>            <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// It's an interceptor, so we just invoke it: The pointcut will have</span>        <span class="token comment">// been evaluated statically before this object was constructed.</span>        <span class="token comment">//这里是拦截器链的递归调用，注意传入的是this，也就是当前的MethodInvocation，因为invoke()方法中会用到</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//拦截器链，在invoke的时候，会进入到这个方法</span>    <span class="token comment">//注意注意注意，每一次invoke的时候，其实进入的是不一样的方法。 注意自己打断点看一下，所以，我这里把其他的都删掉了。</span>    <span class="token comment">//只留了一个mi.proceed()方法，因为每次进入的都是不同的类的invoke()方法，但是都会调用proceed()</span>    <span class="token comment">//也可以看看，我提供的方法调用栈信息图</span>    <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>我之前说，proceed()是递归调用，其实是不对的！他其实不能算作递归调用。</p></li><li><p>因为他是一个MethodInvocation，内部包含了其他的MethodInvocation，内部的MethodInvocation又包含了其他的MethodInvocation。</p></li><li><p>MethodInvocation调用proceed()，并不断压栈，直到所有的MethodInvocation调用完了。</p></li><li><p>然后从最最内部的MethodInvocation开始，一个一个返回。直到返回到最上层的MethonInvocation。</p></li><li><p>proceed调用栈图</p></li></ul><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222183003694.png" alt="image-20221222183003694" style="zoom:80%;" /><ul><li><p>一些注意点：</p></li><li><p>注意点1：around拦截器的执行时机，要了解，是在压栈之后，立即执行，然后我们知道around里面，调用了proceed，然后会再次将around进行压栈。这个一会再说！</p></li><li><p>注意点2：压栈的顺序，这个一会和注意点1一起说。</p></li><li><p>注意点3：每一个拦截器，分别都执行了什么，比如前置通知压栈后，直接开始调用，然后前置通知调用玩，直接调用目标方法。比如后置通知里有一个finally，表示不管是否发生异常，后置通知都执行。比如返回通知，会直接throw异常，throw异常之后，返回通知就不在执行，交给异常通知了。等等之类的。</p></li><li><p>我们来总体看一下调用流程。并解决注意点1和2</p></li></ul><img src="【spring】spring注解AOP开发和源码解读及实践.assets/4OTL2oICo5fo_CqT86SyAdIp1Txk-x__mt7r3e0KDto.png" alt="4OTL2oICo5fo_CqT86SyAdIp1Txk-x__mt7r3e0KDto" style="zoom:80%;" /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><pre><code>1）、@EnableAspectJAutoProxy 开启AOP功能</code></pre></li><li><pre><code>2）、@EnableAspectJAutoProxy 会给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator</code></pre></li><li><pre><code>3）、AnnotationAwareAspectJAutoProxyCreator是一个后置处理器；</code></pre></li><li><pre><code>4）、容器的创建流程：*     1）、registerBeanPostProcessors（）注册后置处理器；创建AnnotationAwareAspectJAutoProxyCreator对象*     2）、finishBeanFactoryInitialization（）初始化剩下的单实例bean      *     1）、创建业务逻辑组件和切面组件      *     2）、AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程      *     3）、组件创建完之后，判断组件是否需要增强            *     是：切面的通知方法，包装成增强器（Advisor）;给业务逻辑组件创建一个代理对象（cglib）；</code></pre></li><li><pre><code>5）、执行目标方法：*     1）、代理对象执行目标方法*     2）、CglibAopProxy.intercept()；      *     1）、得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）      *     2）、利用拦截器的链式机制，依次进入每一个拦截器进行执行；      *     3）、效果：            *     正常执行：环绕通知开始-》前置通知-》目标方法-》环绕通知结束-》后置通知-》返回通知-》结束            *     出现异常：环绕通知开始-》前置通知-》目标方法-》环绕通知结束-》后置通知-》异常通知-》结束</code></pre></li></ul><h2 id="记录一次AOP不生效的排查心路"><a href="#记录一次AOP不生效的排查心路" class="headerlink" title="记录一次AOP不生效的排查心路"></a>记录一次AOP不生效的排查心路</h2><p>结论先行：</p><ul><li>AOP生效的条件就是，当调用<code>目标类</code>的<code>目标方法</code>的时候，实际上是由<code>目标类的代理对象</code>调用<code>目标方法</code>的，切面会生效</li><li>在一个类内部方法调用的时候，切面是不生效的。</li></ul><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>要给客户展示出各个维度的指标数据，计算的方法都是一样的，只是源数据的结构不一样，所以</p><ul><li>计算的方法统一抽象到抽象父类中</li><li>不同的指标针对不同的源数据，处理成统一结构，然后调用父类中的计算方法统一返回</li><li>很显然，这是策略模式</li></ul><p>假设我们有指标A，指标B要展示给客户；</p><p>因为在测试环境数据不好造，所以我想到了使用AOP进行MOCK</p><p>具体的代码见下面</p><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223144223033.png" alt="image-20221223144223033" style="zoom:80%;" /><h4 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h4><h5 id="抽象父类：AbstractIndicatorStrategy"><a href="#抽象父类：AbstractIndicatorStrategy" class="headerlink" title="抽象父类：AbstractIndicatorStrategy"></a>抽象父类：AbstractIndicatorStrategy</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractIndicatorStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">calculate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token operator">+</span><span class="token string">" = 666"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="策略类A：IndicatorAStrategyImpl"><a href="#策略类A：IndicatorAStrategyImpl" class="headerlink" title="策略类A：IndicatorAStrategyImpl"></a>策略类A：IndicatorAStrategyImpl</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndicatorAStrategyImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractIndicatorStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_A"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"indicator_a_data"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="策略类B：IndicatorBStrategyImpl"><a href="#策略类B：IndicatorBStrategyImpl" class="headerlink" title="策略类B：IndicatorBStrategyImpl"></a>策略类B：IndicatorBStrategyImpl</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndicatorBStrategyImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractIndicatorStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_B"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"indicator_b_data"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="策略管理类：IndicatorStrategyManager"><a href="#策略管理类：IndicatorStrategyManager" class="headerlink" title="策略管理类：IndicatorStrategyManager"></a>策略管理类：IndicatorStrategyManager</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndicatorStrategyManager</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AbstractIndicatorStrategy</span><span class="token punctuation">></span></span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> strategyCode<span class="token punctuation">,</span> <span class="token class-name">AbstractIndicatorStrategy</span> metricStrategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>strategyCode<span class="token punctuation">,</span> metricStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AbstractIndicatorStrategy</span> <span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token class-name">String</span> strategyCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> maps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strategyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试策略A</span><span class="token class-name">String</span> indicatorAResult <span class="token operator">=</span> <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试策略B</span><span class="token class-name">String</span> indicatorBResult <span class="token operator">=</span> <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上是业务部分的相关代码，那么AOP是在哪里使用的呢，看下面</p><h4 id="AOP代码"><a href="#AOP代码" class="headerlink" title="AOP代码"></a>AOP代码</h4><p>上面提到到，我希望通过切面的方式，mock掉<code>calculate</code>这个方法</p><p>所以我创建了一个切面类；添加了<code>@Aspect</code>注解，并且在springboot的启动类上添加了<code>@EnableAspectJAutoProxy</code>注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;remote.mock.indicator:CLOSE&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mockOpen<span class="token punctuation">;</span>    <span class="token comment">/**     * mock calculate     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.sf.fw.nas.manager.strategy.base.AbstractIndicatorStrategy.calculate(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算指标     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"calculate()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundCalculate</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OPEN"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mockOpen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> data <span class="token operator">+</span> <span class="token string">" = mock_data"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span><span class="token string">"com.xxx.remote"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.xxx.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">DruidDataSourceAutoConfigure</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppApplication</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">AppApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不生效的场景"><a href="#不生效的场景" class="headerlink" title="不生效的场景"></a>不生效的场景</h3><p>最后我们运行代码，发现，我们的切面，压根没有进来</p><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223143934745.png" alt="image-20221223143934745" style="zoom:80%;" /><h3 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h3><h4 id="第一次排查：解决了切面没有切对方法的问题（其实不是）"><a href="#第一次排查：解决了切面没有切对方法的问题（其实不是）" class="headerlink" title="第一次排查：解决了切面没有切对方法的问题（其实不是）"></a>第一次排查：解决了切面没有切对方法的问题（其实不是）</h4><p>在这一次的排查过程中，我以为是因为我的切面切得是抽象父类的方法，但是我实际调用的是策略子类，方法可能切不到。</p><p>所以我修改了一下切面的 execution 表达式；</p><p>由原来的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.sf.fw.nas.manager.strategy.base.AbstractIndicatorStrategy.calculate(..))"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改成了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.sf.fw.nas.manager.strategy.*.*.calculate(..))"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>含义是：切在<code>com.sf.fw.nas.manager.strategy</code>包和所有子包里的任意类的<code>calculate</code>方法的执行</p><p>如果看不懂这个表达式的，可以看看：<a href="#execution%E8%A1%A8%E8%BE%BE%E5%BC%8F">execution表达式</a></p><p>结论：</p><p>切面依旧没有生效。所以说：不是这个问题导致的。</p><p>题外话：其实不是 这个问题，最终经过所有的排查思路之后，找到问题并解决之后，发现，即使切的是父类的方法，还是能进去切面的。 </p><h4 id="第二次排查：解决了调用类不是代理类的问题（关键）"><a href="#第二次排查：解决了调用类不是代理类的问题（关键）" class="headerlink" title="第二次排查：解决了调用类不是代理类的问题（关键）"></a>第二次排查：解决了调用类不是代理类的问题（关键）</h4><p>然后我又复习了一遍，AOP到底是什么原理。 <a href="#AOP%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E5%A4%A7%E8%87%B4%E5%88%86%E6%9E%90">AOP源码流程大致分析</a></p><p>了解到：</p><p>AOP的实现原理，其实就是动态代理，spring会对切面切到的目标类，生成代理类。</p><p>然后执行目标类的目标方法的时候，其实是由代理类来执行的。</p><p>这就是AOP的原理。</p><p>了解了上面的步骤之后，我们来验证一下，看看调用目标方法的类是不是代理类呢？</p><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223150216763.png" alt="image-20221223150216763" style="zoom:80%;" /><p>果不其然，调用目标方法的类，竟然不是代理类；这样AOP肯定是不会生效的。</p><p>那么问题来了？</p><p>为什么不是代理类呢？</p><ul><li>是我的切面配置有错误吗？<code>@Aspect</code>和@<code>EnableAspectJAutoProxy</code> 这两注解没生效吗？</li><li>还是其他的配置有问题呢？</li><li>还是别的什么问题呢？</li></ul><p>我现在有点迷。</p><p>于是我又复习了一下AOP的原理，我要看一下，这个代理类是怎么生成的？为什么我的类不是代理类。<a href="#Calculator%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E5%85%B7%E4%BD%93%E6%98%AF%E6%80%8E%E4%B9%88%E7%94%9F%E6%88%90%E7%9A%84%EF%BC%9F">Calculator代理对象具体是怎么生成的？</a></p><p>经过复习，了解到，在spring中，java类分为几种：</p><ul><li>有BeanPostProcessor，是一个很重要的概念，用来实现spring的很多强大的功能</li><li>有普通的类：这里所说的普通的类包括：切面类，Config类，业务类，其实都算是普通类</li></ul><p>那么这些类是怎么生成的？</p><ul><li>在spring的refresh方法中，有两个方法叫做：<ul><li>registerBeanPostProcessors：这个是用来注册 BeanPostProcessor 的</li><li>finishBeanFactoryInitialization：这个就是用来创建生成普通类的。</li></ul></li><li>所以我们的代理对象，正常应该在 finishBeanFactoryInitialization 这个方法中被生成。</li></ul><p>然后我们继续了解 finishBeanFactoryInitialization 这个方法</p><ul><li>preInstantiateSingletons：开始实例化单例bean，调用 getBean</li><li>getBean：获取bean，调用 doGetBean</li><li>doGetBean：获取bean，会先从缓存拿，拿不到就调用：createBean</li><li>createBean：创建bean，调用 doCreateBean</li><li>doCreateBean：开始真正的创建bean，会调用：createBeanInstance，populateBean，initializeBean</li><li>createBeanInstance 创建bean，populateBean 给bean赋值，initializeBean 初始化bean， 会调用 applyBeanPostProcessorsAfterInitialization</li><li>applyBeanPostProcessorsAfterInitialization：应用BeanPostProcessor增强bean</li><li>postProcessAfterInitialization：会找到很多BeanPostProcessor，循环调用BeanPostProcessor的这个方法进行增强</li><li>AbstractAutoProxyCreator：AbstractAutoProxyCreator是AOP用来增强类的，进入到这个类的postProcessAfterInitialization方法中，会调用：wrapIfNecessary</li><li>wrapIfNecessary：开始对类进行代理</li><li>createProxy：真正的创建代理类</li></ul><p>好了，了解了以上的流程之后，我们进入到spring的源码中，打上断点，验证：我们的类到底有没有生成代理类？</p><p>打上断点，开始验证：</p><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223152614060.png" alt="image-20221223152614060" style="zoom:80%;" /><p>然后发现，断点进来了，而且生成了代理类，说明配置是没有问题的。</p><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223152838510.png" alt="image-20221223152838510" style="zoom:80%;" /><p>既然配置没有问题，那就说明我们的代码有问题。</p><p>代理类生成了，但是我们没有获取到代理类，然后我们思考，获取策略类的时候，是从<code>IndicatorStrategyManager</code>中获取的。</p><p>也就是说，从<code>IndicatorStrategyManager</code>中获取的类不是代理类。那么为什么呢？</p><p>这个时候去看我们的代码，发现我们在往<code>IndicatorStrategyManager</code>注册bean的时候，用的是下面这种方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_A"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们往策略管理类中注册的是<code>this</code></p><ul><li>this 是什么，this是当前这个bean，不是从spring容器中拿到的bean</li><li>所以，它当然不是 代理对象啦。</li></ul><p>既然找到了问题，就好解决了。我们把 this 改成 从spring容器中获取bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndicatorAStrategyImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractIndicatorStrategy</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_A"</span><span class="token punctuation">,</span>            <span class="token class-name">ApplicationContextProvider</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">IndicatorAStrategyImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"indicator_a_data"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中使用到的<code>ApplicationContextProvider</code>这个类是自己写的一个工具类。代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextProvider</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 上下文对象实例     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContextProvider</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取applicationContext     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过class获取Bean.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过name,以及Clazz返回指定的Bean     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，至此，我们在测试一波：</p><p>喜大普奔，现在我们获取到的对象就是我们的代理类啦。</p><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223154857074.png" alt="image-20221223154857074" style="zoom:80%;" /><p>但是很不幸的是，切面仍然没有生效。</p><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223155053663.png" alt="image-20221223155053663" style="zoom:80%;" /><p>我又迷惑了，为什么呢？ 接着往下看</p><h4 id="第三次排查：找到了cglib内部调用的问题（未解决）"><a href="#第三次排查：找到了cglib内部调用的问题（未解决）" class="headerlink" title="第三次排查：找到了cglib内部调用的问题（未解决）"></a>第三次排查：找到了cglib内部调用的问题（未解决）</h4><p>到这里，我已经有点晕了，为什么我的AOP还是不生效呢？</p><p>再次回想：AOP生效的条件就是，当调用<code>目标类</code>的<code>目标方法</code>的时候，实际上是由<code>目标类的代理对象</code>调用<code>目标方法</code>的。</p><p>这句话里面有几个关键词：</p><ul><li>目标类：当然了，就是我们的策略类A（IndicatorAStrategyImpl）和B（IndicatorBStrategyImpl）这两个东东啦。</li><li>目标方法：当然啦，目标方法是我们希望被切面切到的<code>calculate</code>方法啦</li><li>目标类的代理对象：当然啦，是我们之前看到的 <code>IndicatorAStrategyImpl$$EnhancerBySpringCGLIB$$c1fb478</code> 这个东东啦</li><li>调用目标方法：就是调用 <code>calculate</code>方法。</li></ul><p>好，重复一遍最后一句：调用目标方法：就是调用 <code>calculate</code>方法。</p><p>那么我们看看代码，我们的代理类调用的是谁？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> indicatorAResult <span class="token operator">=</span> <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> indicatorBResult <span class="token operator">=</span> <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是的，没错，我们的代理类调用的是<code>process</code>方法，不是<code>calculate</code>方法。</p><p>那么接下来，就有两个问题了</p><ul><li>直接用代理类调用calculate方法，AOP真的会生效吗？我已经有点怀疑自己了。</li><li>为什么代理类调用process方法，然后process方法调用目标方法calculate的时候，切面不生效呢？</li></ul><p><strong>直接用代理类调用calculate方法，AOP真的会生效吗</strong></p><p>我们调整一下代码：把调用process的方法改成调用calculate</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> indicatorAResult <span class="token operator">=</span> <span class="token class-name">IndicatorStrategyManager</span><span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token string">"INDICATOR_A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String indicatorAResult = IndicatorStrategyManager.getStrategy("INDICATOR_A").process();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现：切面生效了。</p><img src="【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223160347614.png" alt="image-20221223160347614" style="zoom:80%;" /><p><strong>为什么代理类调用process方法，然后process方法调用目标方法calculate的时候，切面不生效呢？</strong></p><p>因为当代理类调用了<code>process</code>方法之后，就已经进入了<code>process</code>方法内部了；</p><p>在<code>process</code>方法内部调用<code>calculate</code>，其实相当于：<code>this.calculate</code>的调用方式；</p><p>又是<code>this</code>，所以它就已经不是代理类了，所以切面自然也不会生效。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ul><li><p>感谢尚硅谷《spring源码分析》视频教程:<a href="https://www.bilibili.com/video/av32102436">https://www.bilibili.com/video/av32102436</a></p></li><li><p>感谢《Spring AOP 源码解析》一文：<a href="https://javadoop.com/post/spring-aop-source">https://javadoop.com/post/spring-aop-source</a></p></li></ul><hr><p>spring-aop和aspectJ的关系</p><p>ImportBeanDefinitionRegistrar的作用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring注解AOP开发和源码解读及实践&quot;&gt;&lt;a href=&quot;#spring注解AOP开发和源码解读及实践&quot; class=&quot;headerlink&quot; title=&quot;spring注解AOP开发和源码解读及实践&quot;&gt;&lt;/a&gt;spring注解AOP开发和源码解读及实践&lt;/</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="SSM三大框架" scheme="https://zspcer.gitee.io/categories/JAVA/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="spring" scheme="https://zspcer.gitee.io/tags/spring/"/>
    
    <category term="源码解读" scheme="https://zspcer.gitee.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
    <category term="AOP" scheme="https://zspcer.gitee.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox安装CentOS7</title>
    <link href="https://zspcer.gitee.io/note/LINUX/CENTOS/VirtualBox%E5%AE%89%E8%A3%85CentOS7/"/>
    <id>https://zspcer.gitee.io/note/LINUX/CENTOS/VirtualBox%E5%AE%89%E8%A3%85CentOS7/</id>
    <published>2023-02-17T14:32:14.310Z</published>
    <updated>2023-02-17T14:32:14.310Z</updated>
    
    <content type="html"><![CDATA[<p>安装前准备</p><p>安装VirtualBox：自行百度安装</p><p>准备镜像：可以用 <a href="https://www.centos.org/">CentOS官网</a>，<a href="http://centos.p2hp.com/">CentOS中文官网</a> 下载CentOS镜像</p><p>我这里下载的是 CentOS 7：<a href="http://mirrors.nju.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">http://mirrors.nju.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso</a></p><p>CentOS 7提供了三种ISO镜像文件：<br><strong>DVD ISO</strong> 标准安装版，桌面版<br><strong>Everything ISO</strong> 标准安装版的补充，增加了大量的应用软件<br><strong>Minimal ISO</strong> 精简版，自带的应用软件最少，生产环境推荐使用</p><p>Minimal版本优点：</p><ul><li>节省系统资源，磁盘空间占用小</li><li>自带软件少，系统纯净运行更稳定</li><li>需要的软件包可以自行安装</li></ul><p>创建虚拟机</p><p>1：点击新建</p><p>2：输入名称：centos7；文件夹：是保存虚拟机系统的文件；类型：选择Linux；版本：选择Other Linux(64-bit)</p><p>3：选择虚拟机的内存大小：根据自己需求选择，我这里选择了2G</p><p>4：创建虚拟机的硬盘：根据自己需求选择，可以稍后创建，现在创建，我选择了：现在创建</p><p>5：选择虚拟机硬盘的类型：根据自己需求选择，我选择了默认的VDI类型</p><p>6：选择虚拟机硬盘的大小：根据自己需求选择，我选择了动态分配</p><p>7：选择虚拟机硬盘的位置：根据自己需求选择，我选择了虚拟硬盘放在D盘</p><p>8：选择虚拟机硬盘的大小：根据自己需求选择，我选择了硬盘大小最大为20GB</p><p>9：创建完成后，可以选中当前虚拟机</p><p>10：点击设置</p><p>11：可以对创建好的虚拟机再次调整参数，比如我这里将虚拟机的CPU调整为了2核</p><img src="VirtualBox安装CentOS7.assets/image-20230215105959953.png" alt="image-20230215105959953" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110204977.png" alt="image-20230215110204977" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110229245.png" alt="image-20230215110229245" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110308994.png" alt="image-20230215110308994" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110325528.png" alt="image-20230215110325528" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110400735.png" alt="image-20230215110400735" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110904381.png" alt="image-20230215110904381" style="zoom:80%;" /><p>启动虚拟机</p><p>1：选中虚拟机</p><p>2：点击启动，点击之后，稍等片刻，会弹出虚拟机启动窗口</p><p>3：在虚拟机窗口，选择启动镜像，点击文件夹图标</p><p>4：选择 注册</p><p>5：找到我们之前下载的 CentOS7 的镜像，开启启动</p><p>6：通过键盘，移动上下左右箭头，选择 Install CentOS 7，回车</p><p>7：选择中文，继续</p><p>8：选择安装位置</p><p>9：将安装位置选中为我们创建的虚拟硬盘</p><p>10：完成</p><p>11：开始安装</p><p>12：创建root密码，我这里将root设置为：root</p><p>13：创建用户，根据自己的需求选择是否创建本地用户，我这里就不创建了，不创建的话，默认就只有一个root用户</p><p>14：安装完成，开始重启，重启之后，就可以登录了。</p><img src="VirtualBox安装CentOS7.assets/image-20230215111205370.png" alt="image-20230215111205370" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215111944905.png" alt="image-20230215111944905" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112021017.png" alt="image-20230215112021017" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112159337.png" alt="image-20230215112159337" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112256613.png" alt="image-20230215112256613" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112320332.png" alt="image-20230215112320332" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112345724.png" alt="image-20230215112345724" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112447552.png" alt="image-20230215112447552" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215115027821.png" alt="image-20230215115027821" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215115129320.png" alt="image-20230215115129320" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装前准备&lt;/p&gt;
&lt;p&gt;安装VirtualBox：自行百度安装&lt;/p&gt;
&lt;p&gt;准备镜像：可以用 &lt;a href=&quot;https://www.centos.org/&quot;&gt;CentOS官网&lt;/a&gt;，&lt;a href=&quot;http://centos.p2hp.com/&quot;&gt;CentOS中</summary>
      
    
    
    
    <category term="LINUX" scheme="https://zspcer.gitee.io/categories/LINUX/"/>
    
    <category term="CENTOS" scheme="https://zspcer.gitee.io/categories/LINUX/CENTOS/"/>
    
    
    <category term="centos" scheme="https://zspcer.gitee.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%B8%B8%E7%94%A8%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%B8%B8%E7%94%A8%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2023-02-17T14:32:14.287Z</published>
    <updated>2023-02-17T14:32:14.287Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>elasticsearch7.6.2 <span class="token punctuation">\</span> <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\</span> <span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/data:/usr/share/elasticsearch/data <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/logs:/usr/share/elasticsearch/logs <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\</span>  elasticsearch:7.6.2<span class="token function">docker</span> logs elasticsearch7.6.2<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--user</span> root elasticsearch7.6.2 /bin/bash<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--cpus</span> <span class="token number">2</span> <span class="token parameter variable">-m</span> 4GB <span class="token parameter variable">--name</span> mysql5.7.19 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/logs:/var/log/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/data:/var/lib/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis5.0.7 <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/redis5.0.7/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/redis5.0.7/data:/data <span class="token punctuation">\</span> <span class="token parameter variable">-d</span> redis:5.0.7 redis-server /etc/redis/redis.conf <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis5.0.7 /bin/bash<span class="token comment"># -p 6379:6379:把容器内的6379端口映射到宿主机6379端口</span><span class="token comment"># -v /root/docker/redis/redis.conf:/etc/redis/redis.conf：把宿主机配置好的redis.conf放到容器内的这个位置中</span><span class="token comment"># -v /root/docker/redis/data:/data：把redis持久化的数据在宿主机内显示，做数据备份</span><span class="token comment"># redis-server /etc/redis/redis.conf：这个是关键配置，让redis不是无配置启动，而是按照这个redis.conf的配置启动</span><span class="token comment"># -appendonly yes：redis启动后数据持久化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>通过docker安装mysql5.7.19并解决中文乱码问题的方法</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%AE%89%E8%A3%85mysql5719%E5%B9%B6%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%AE%89%E8%A3%85mysql5719%E5%B9%B6%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</id>
    <published>2023-02-05T14:28:54.000Z</published>
    <updated>2023-02-17T14:32:14.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过docker安装mysql5-7-19并解决中文乱码问题的方法"><a href="#通过docker安装mysql5-7-19并解决中文乱码问题的方法" class="headerlink" title="通过docker安装mysql5.7.19并解决中文乱码问题的方法"></a>通过docker安装mysql5.7.19并解决中文乱码问题的方法</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>首先安装docker；</p><h2 id="安装mysql5-7-19"><a href="#安装mysql5-7-19" class="headerlink" title="安装mysql5.7.19"></a>安装mysql5.7.19</h2><p>从dokcer仓库下载5.7.19版本的数据，如果不指定版本的话，下载的就是最新的版本，为什么选择5.7.19，因为公司使用的数据库是这个版本，所以就选择这个了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载好之后，如果有docker desktop的话，就可以看到了，没有desktop也可以使用命令查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zhuansun@MacBook-Pro ~ % <span class="token function">docker</span> image listREPOSITORY  TAG    IMAGE ID    CREATED    SIZEmysql     <span class="token number">5.7</span>.19   3e3878acd190  <span class="token number">3</span> years ago  412MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者docker desktop</p><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901193908153.png" alt="image-20220901193908153" style="zoom: 50%;" /><h2 id="启动mysql5-7-19"><a href="#启动mysql5-7-19" class="headerlink" title="启动mysql5.7.19"></a>启动mysql5.7.19</h2><p>然后就是启动docker容器了：</p><p>同样的，有两种方式：一种是通过图形化工具docker-desktop；一种是通过命令；</p><h3 id="命令行简单启动"><a href="#命令行简单启动" class="headerlink" title="命令行简单启动"></a>命令行简单启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql5.7.19 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解释一下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker run</td><td>没什么说的</td></tr><tr><td>-p 3306:3306</td><td>指定mysql的端口，前面是本机端口，后面是容器端口；如果容器已经起了一个3306的mysql，你想在启动一个mysql，就得把后面的端口改了。</td></tr><tr><td>–name mysql5.7.19</td><td>容器启动后的名字，只是个名字</td></tr><tr><td>-e MYSQL_ROOT_PASSWORD&#x3D;123456</td><td>docker启动mysql必须要设置密码的，这里是直接设置了root密码，也可以通过其他命令指定新的用户名和密码。网上搜就有</td></tr><tr><td>-d mysql:5.7.19</td><td>使用mysql:5.7.19这个版本的镜像</td></tr></tbody></table><h3 id="docker-desktop简单启动"><a href="#docker-desktop简单启动" class="headerlink" title="docker-desktop简单启动"></a>docker-desktop简单启动</h3><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195130908.png" alt="image-20220901195130908" style="zoom: 50%;" /><ul><li><p>和命令行方式比较一下，就知道啥意思了。但是docker-desktop没找到哪里设置用户名和密码。所以我最终选择是使用命令行方式；</p></li><li><p>但是我们注意到dokcer-desktop下面有一个Volume卷的设置，命令行没有，它是什么意思呢？</p></li><li><p>它表示可以把容器中的数据和本地的数据进行互通；</p></li><li><p>我们知道容器一旦被关闭，或者重启，所有的数据都会丢失；所以我们要把容器中的数据映射到本地磁盘，就是这个意思。</p></li><li><p>不过，上面说了，我们使用命令行的方式启动mysql，那么命令行怎么映射呢？</p></li></ul><h3 id="命令行完整启动"><a href="#命令行完整启动" class="headerlink" title="命令行完整启动"></a>命令行完整启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--cpus</span> <span class="token number">2</span> <span class="token parameter variable">-m</span> 4GB <span class="token parameter variable">--name</span> mysql5.7.19 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/logs:/var/log/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/data:/var/lib/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释一下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>-v</td><td>-v表示将本地的一个文件夹挂载到容器中，容器每次启动的时候，本地的文件都会覆盖到容器中；容器中产生的文件，也会写到本地中。这样保证了数据的持久化</td></tr><tr><td>–cpus</td><td>配置cpu，有时候mysql跑的太快，cpu直接就满了，这里可以配置cpu，后面跟的数据，是cpu的核数</td></tr><tr><td>-m</td><td>配置内存，默认内存是2G，可以通过 docker stats 查看</td></tr></tbody></table><ul><li>然后在docker-desktop中也可以看到启动后的app</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195155480.png" alt="image-20220901195155480" style="zoom:50%;" /><h2 id="datagrip连接mysql"><a href="#datagrip连接mysql" class="headerlink" title="datagrip连接mysql"></a>datagrip连接mysql</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">localhost<span class="token number">3306</span>root<span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>datagrip也可以连接成功</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195211507.png" alt="image-20220901195211507" style="zoom:50%;" /><h2 id="中文乱码问题的发现"><a href="#中文乱码问题的发现" class="headerlink" title="中文乱码问题的发现"></a>中文乱码问题的发现</h2><ul><li><p>我以为到这儿就结束了，其实不是的。</p></li><li><p>因为我在mysql中创建了一个数据库，然后创建了一个表，通过代码插入一条记录之后，发现，妈的，乱码了。</p></li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195229189.png" alt="image-20220901195229189" style="zoom:50%;" /><ul><li><p>然后排查为什么会乱码：</p></li><li><p>这是因为我们的mysql通过docker启动之后，默认的编码其实并不是utf8，而是latin1；这就导致了中文乱码的原因。</p></li><li><p>通过</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;%char%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以验证这个问题</p><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195253309.png" alt="image-20220901195253309" style="zoom:50%;" /><h2 id="中文乱码问题的排查思路"><a href="#中文乱码问题的排查思路" class="headerlink" title="中文乱码问题的排查思路"></a>中文乱码问题的排查思路</h2><ul><li><p>那么怎么办呢？就需要修改mysql的配置文件了。</p></li><li><p>这里必须要吐槽一下百度，搜出来的东西，他娘的，都是狗屎；</p></li><li><p>搜索关键字：mac mysql 5.7.19 中文乱码</p></li><li><p>然后百度建议：修改etc下的my.cnf；他娘的，根本没有这个文件好不好。</p></li><li><p>最后还是搜索了好久好久，一直折腾到大半夜，才找到原因</p></li><li><p>在mysql5.7.18版本之前，在etc下会有一个my-default.cnf的文件（网上搜的，没有验证），然后我们安装好mysql之后，把这个文件改个名字就可以了。作为全局配置，但是后续版本，mysql把他删掉了。所以我使用的5.7.19是没有的。</p></li><li><p>那么5.7.19的配置文件在哪里呢？</p></li><li><p>应该是在etc&#x2F;mysql&#x2F;这个文件夹下面，但是我登录我的容器一看：这个文件夹下面是空的？卧槽？</p></li><li><p>后续排查发现，因为我们使用了</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>所以我们本地的文件覆盖了容器中的内容；本地的文件夹是空的，所以容器里面技术空了。</p></li><li><p>那么没办法了，我又重新启动了一个mysql-dokcer叫做 mysql5.7.19-1，然后没有指定-v,同时还得修改端口，要不然端口就冲突了；</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3307 <span class="token parameter variable">--name</span> mysql5.7.19-1 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>这样我们创建了一个新的mysql容器，登录进去看看：</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195552187.png" alt="image-20220901195552187" style="zoom:50%;" /><ul><li>通过docker-desktop登录进去看看：</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195603660.png" alt="image-20220901195603660" style="zoom:50%;" /><ul><li>进入到容器中，我们可以看到其实 etc&#x2F;mysql下面是有配置文件的。</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195615455.png" alt="image-20220901195615455" style="zoom:50%;" /><ul><li><p>这样就验证了我们之前的猜测，就是本地的空文件夹把mysql里的配置文件给覆盖掉了。</p></li><li><p>那么怎么办呢？ 我得改配置文件啊。得想办法把配置文件放在本地文件夹中，然后再次重启容器，配置文件就可以加载进去了。</p></li><li><p>怎么把配置文件复制到本地呢？</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> cp:mysql5.7.19-1:/etc/mysql /Users/zhuansun/workspace/docker/mysql5.7.19/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>好了，用上面的命令就可以解决了，但是复制下来之后，发现，我草？这么多文件不知道改哪一个，而且怎么还有一个 连接 文件。</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195651594.png" alt="image-20220901195651594" style="zoom:50%;" /><ul><li>继续百度吧，又被恶心到了一圈。最终决定还是靠自己，但是还是搜到一些有用的东西的。关于这个链接文件是什么？</li><li>其实并不是所有的配置文件都在etc下面的，mysql配置文件分为全局配置，和用户配置；是放在不同的地方的，但是<strong>会通过一个链接文件，链接过来</strong>；</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195658976.png" alt="image-20220901195658976" style="zoom:50%;" /><ul><li>所以按照这个思路，我们去 mysql5.7.19-1 中去看看，链接文件都连接到哪里啦。</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195805841.png" alt="image-20220901195805841" style="zoom:50%;" /><ul><li>打开这两个文件，看看</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195823380.png" alt="image-20220901195823380" style="zoom:50%;" /><ul><li><p>打开之后可以看到一个文件是用来配置 mysql 的一个文件是用来配置mysqld的，</p></li><li><p>到这里就比较明确的，我们把设置编码的命令设置进来。像下面这个样子。注意要在本地的文件夹中修改哦：只需要修改mysqld.cnf就行了，因为它是全局的</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.</span><span class="token comment">#</span><span class="token comment"># This program is free software; you can redistribute it and/or modify</span><span class="token comment"># it under the terms of the GNU General Public License as published by</span><span class="token comment"># the Free Software Foundation; version 2 of the License.</span><span class="token comment">#</span><span class="token comment"># This program is distributed in the hope that it will be useful,</span><span class="token comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span><span class="token comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><span class="token comment"># GNU General Public License for more details.</span><span class="token comment">#</span><span class="token comment"># You should have received a copy of the GNU General Public License</span><span class="token comment"># along with this program; if not, write to the Free Software</span><span class="token comment"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span>​<span class="token comment">#</span><span class="token comment"># The MySQL  Server configuration file.</span><span class="token comment">#</span><span class="token comment"># For explanations see</span><span class="token comment"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span>​<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8collation<span class="token operator">-</span>server<span class="token operator">=</span>utf8_general_cipid<span class="token operator">-</span><span class="token keyword">file</span>    <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>pidsocket      <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>sockdatadir     <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token comment">#log-error  = /var/log/mysql/error.log</span><span class="token comment"># By default we only accept connections from localhost</span><span class="token comment">#bind-address   = 127.0.0.1</span><span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic<span class="token operator">-</span>links<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token keyword">default</span><span class="token operator">-</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200508795.png" alt="image-20220901200508795" style="zoom:50%;" /><ul><li><p>然后重启docker容器；欣喜若狂</p></li><li><p>结果发现中文还是插入不进来。卧槽？而且查看编码，仍然是拉丁。奇怪了。</p></li><li><p>最后仔细看了一下，发现是拉丁的参数是database级别的。</p></li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200533956.png" alt="image-20220901200533956" style="zoom:50%;" /><ul><li><p>然后想到，创建数据库之后，数据库是有编码的，因为这个数据库是在修改编码之前创建的，所以他的编码是不会变的。</p></li><li><p>重新创建一个数据库再次测试，发现新的数据库的编码是正确的。</p></li><li><p>至此，中文乱码问题解决。</p></li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200554433.png" alt="image-20220901200554433" style="zoom:50%;" /><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200614121.png" alt="image-20220901200614121" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过docker安装mysql5-7-19并解决中文乱码问题的方法&quot;&gt;&lt;a href=&quot;#通过docker安装mysql5-7-19并解决中文乱码问题的方法&quot; class=&quot;headerlink&quot; title=&quot;通过docker安装mysql5.7.19并解决中文</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="部署与容器" scheme="https://zspcer.gitee.io/categories/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/"/>
    
    <category term="DOCKER" scheme="https://zspcer.gitee.io/categories/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/"/>
    
    
    <category term="docker" scheme="https://zspcer.gitee.io/tags/docker/"/>
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="乱码" scheme="https://zspcer.gitee.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>mermaid</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/markdown/mermaid/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/markdown/mermaid/</id>
    <published>2023-01-12T09:36:46.516Z</published>
    <updated>2023-01-12T09:36:46.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h1><h2 id="关于-Mermaid"><a href="#关于-Mermaid" class="headerlink" title="关于 Mermaid"></a>关于 Mermaid</h2><p><a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>下面是一些可以使用 Mermaid 创建的图表示例。点击 <a href="https://mermaid-js.github.io/mermaid/#/n00b-syntaxReference">语法</a> 查看详情。</strong></p><table><!-- <Flowchart> --><h3 id="流程图-文档"><a href="#流程图-文档" class="headerlink" title="流程图 [文档 ]"></a>流程图 [<a href="https://mermaid-js.github.io/mermaid/#/flowchart">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">flowchart LRA[Hard] --&gt;|Text| B(Round)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result 1]C --&gt;|Two| E[Result 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]</pre><h3 id="时序图-文档"><a href="#时序图-文档" class="headerlink" title="时序图 [文档 ]"></a>时序图 [<a href="https://mermaid-js.github.io/mermaid/#/sequenceDiagram">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">sequenceDiagramAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts!John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!</pre><h3 id="甘特图-文档"><a href="#甘特图-文档" class="headerlink" title="甘特图 [文档 ]"></a>甘特图 [<a href="https://mermaid-js.github.io/mermaid/#/gantt">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d</pre><h3 id="类图-文档"><a href="#类图-文档" class="headerlink" title="类图 [文档 ]"></a>类图 [<a href="https://mermaid-js.github.io/mermaid/#/classDiagram">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">classDiagramClass01 &lt;|-- AveryLongClass : Cool&lt;&lt;Interface&gt;&gt; Class01Class09 --&gt; C2 : Where am I?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 &#123;  &lt;&lt;service&gt;&gt;  int id  size()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}</pre><h3 id="状态图-文档"><a href="#状态图-文档" class="headerlink" title="状态图 [文档]"></a>状态图 [<a href="https://mermaid-js.github.io/mermaid/#/stateDiagram">文档</a>]</h3><pre class="line-numbers language-none"><code class="language-none">stateDiagram-v2[*] --&gt; StillStill --&gt; [*]Still --&gt; MovingMoving --&gt; StillMoving --&gt; CrashCrash --&gt; [*]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]</pre><h3 id="饼图-文档"><a href="#饼图-文档" class="headerlink" title="饼图 [文档 ]"></a>饼图 [<a href="https://mermaid-js.github.io/mermaid/#/pie">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">pie&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">pie"Dogs" : 386"Cats" : 85"Rats" : 15</pre><h3 id="Git-图-实验特性"><a href="#Git-图-实验特性" class="headerlink" title="Git 图 [实验特性 ]"></a>Git 图 [实验特性 ]</h3><h3 id="用户体验旅程图-文档"><a href="#用户体验旅程图-文档" class="headerlink" title="用户体验旅程图 [文档 ]"></a>用户体验旅程图 [<a href="https://mermaid-js.github.io/mermaid/#/user-journey">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">journey  title My working day  section Go to work    Make tea: 5: Me    Go upstairs: 3: Me    Do work: 1: Me, Cat  section Go home    Go downstairs: 5: Me    Sit down: 3: Me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">  journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me</pre><h3 id="C4-图-文档"><a href="#C4-图-文档" class="headerlink" title="C4 图 [文档]"></a>C4 图 [<a href="https://mermaid-js.github.io/mermaid/#/c4c">文档</a>]</h3><pre class="line-numbers language-none"><code class="language-none">C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, &quot;Banking Customer A&quot;, &quot;A customer of the bank, with personal bank accounts.&quot;)Person(customerB, &quot;Banking Customer B&quot;)Person_Ext(customerC, &quot;Banking Customer C&quot;)System(SystemAA, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)Person(customerD, &quot;Banking Customer D&quot;, &quot;A customer of the bank, &lt;br&#x2F;&gt; with personal bank accounts.&quot;)Enterprise_Boundary(b1, &quot;BankBoundary&quot;) &#123;  SystemDb_Ext(SystemE, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)  System_Boundary(b2, &quot;BankBoundary2&quot;) &#123;    System(SystemA, &quot;Banking System A&quot;)    System(SystemB, &quot;Banking System B&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)  &#125;  System_Ext(SystemC, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)  SystemDb(SystemD, &quot;Banking System D Database&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)  Boundary(b3, &quot;BankBoundary3&quot;, &quot;boundary&quot;) &#123;    SystemQueue(SystemF, &quot;Banking System F Queue&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)    SystemQueue_Ext(SystemG, &quot;Banking System G Queue&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)  &#125;&#125;BiRel(customerA, SystemAA, &quot;Uses&quot;)BiRel(SystemAA, SystemE, &quot;Uses&quot;)Rel(SystemAA, SystemC, &quot;Sends e-mails&quot;, &quot;SMTP&quot;)Rel(SystemC, customerA, &quot;Sends e-mails to&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")Person(customerB, "Banking Customer B")Person_Ext(customerC, "Banking Customer C")System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")Enterprise_Boundary(b1, "BankBoundary") {  SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")  System_Boundary(b2, "BankBoundary2") {    System(SystemA, "Banking System A")    System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts.")  }  System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")  SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")  Boundary(b3, "BankBoundary3", "boundary") {    SystemQueue(SystemF, "Banking System F Queue", "A system of the bank, with personal bank accounts.")    SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")  }}BiRel(customerA, SystemAA, "Uses")BiRel(SystemAA, SystemE, "Uses")Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")Rel(SystemC, customerA, "Sends e-mails to")</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mermaid&quot;&gt;&lt;a href=&quot;#mermaid&quot; class=&quot;headerlink&quot; title=&quot;mermaid&quot;&gt;&lt;/a&gt;mermaid&lt;/h1&gt;&lt;h2 id=&quot;关于-Mermaid&quot;&gt;&lt;a href=&quot;#关于-Mermaid&quot; class=&quot;head</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="MARKDOWN" scheme="https://zspcer.gitee.io/categories/TOOLS/MARKDOWN/"/>
    
    
    <category term="mermaid" scheme="https://zspcer.gitee.io/tags/mermaid/"/>
    
    <category term="markdown" scheme="https://zspcer.gitee.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>mysql的问题汇总</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2023-01-12T09:36:46.514Z</published>
    <updated>2023-01-12T09:36:46.514Z</updated>
    
    <content type="html"><![CDATA[<p>准备从45将的评论区找问题，汇总一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;准备从45将的评论区找问题，汇总一下&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
  </entry>
  
</feed>
