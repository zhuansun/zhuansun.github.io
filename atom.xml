<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CCWorld</title>
  
  
  <link href="https://zhuansun.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhuansun.github.io/"/>
  <updated>2023-06-01T10:14:17.898Z</updated>
  <id>https://zhuansun.github.io/</id>
  
  <author>
    <name>张三</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://zhuansun.github.io/note/JAVA/%E9%9D%A2%E8%AF%95/%E5%84%92%E7%8C%BF%E9%9D%A2%E7%BB%8F/%E5%84%92%E7%8C%BF%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E9%9D%A2%E8%AF%95/%E5%84%92%E7%8C%BF%E9%9D%A2%E7%BB%8F/%E5%84%92%E7%8C%BF%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</id>
    <published>2023-06-01T10:14:17.898Z</published>
    <updated>2023-06-01T10:14:17.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面经汇总-x2F-儒猿面经广告鸡汤-x2F-广深中小厂面经验"><a href="#面经汇总-x2F-儒猿面经广告鸡汤-x2F-广深中小厂面经验" class="headerlink" title="面经汇总&#x2F;儒猿面经广告鸡汤&#x2F;广深中小厂面经验"></a><a href="https://github.com/huangfeiyuCoder/JavaMianShi/tree/main/%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB">面经汇总</a>&#x2F;<a href="https://github.com/huangfeiyuCoder/JavaMianShi/tree/main/%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/%E5%84%92%E7%8C%BF%E9%9D%A2%E7%BB%8F%E5%B9%BF%E5%91%8A%E9%B8%A1%E6%B1%A4">儒猿面经广告鸡汤</a>&#x2F;<strong>广深中小厂面经验</strong></h2><table><thead><tr><th></th><th>顺丰-1面：</th></tr></thead><tbody><tr><td></td><td>1项目中有什么难点？</td></tr><tr><td></td><td>2Redis用来做了些什么？</td></tr><tr><td></td><td>3Redis的做布隆过滤器是怎么玩的？</td></tr><tr><td></td><td>4使用Redis时，怎么考虑用哪种类型？</td></tr><tr><td></td><td>5Redis为什么快？</td></tr><tr><td></td><td>6Redis内部实现的大致原理是什么？</td></tr><tr><td></td><td>7Redis的高可用怎么保证？</td></tr><tr><td></td><td>8怎么保证MQ消费幂等性？</td></tr><tr><td></td><td>9怎么实现消息的有序性？</td></tr><tr><td></td><td>10怎么保证MQ的可靠性投递？</td></tr><tr><td></td><td>11怎么解决MQ的积压问题？ （在消费者不扩容的前提下怎么解决？）</td></tr><tr><td></td><td>12A系统同时给B系统分别发送2个请求（先insert请求后update请求），B有部署两个节点，你怎么保证在B系统的两个节点上执行是有序的？</td></tr><tr><td></td><td>13讲讲Java中的集合，并发，Queue队列相关的东西。</td></tr><tr><td></td><td>14Spring中的生命周期？</td></tr><tr><td></td><td>15SPring中是怎么实现事务的？</td></tr><tr><td></td><td>16如果要对线上某个表的一个字段长度扩容，你会考虑什么？</td></tr><tr><td></td><td>17QPS1万+的查询接口你怎么设计？</td></tr><tr><td></td><td>18QPS1万+的有状态接口你怎么设计？</td></tr><tr><td></td><td>。。。其他的忘了，反正都是一些常见的问题</td></tr><tr><td></td><td></td></tr><tr><td></td><td>顺丰-2面：</td></tr><tr><td></td><td>1介绍项目业务？</td></tr><tr><td></td><td>2怎么保证上下游系统间数据的一致性?</td></tr><tr><td></td><td>3怎么保证数据的幂等性？ 如何利用tokenID来实现幂等？</td></tr><tr><td></td><td>4你们用Redis干些什么？</td></tr><tr><td></td><td>5如果Redis挂了，怎么办？（从降级，限流，快速恢复角度去答）</td></tr><tr><td></td><td>6Redis脑裂咋办？</td></tr><tr><td></td><td>7如果Redis集群中一个节点挂了，怎么保证高可用？ （问题有点模糊）</td></tr><tr><td></td><td>8Redis的分配一致性哈希算法？怎么解决的数据倾斜问题？</td></tr><tr><td></td><td>9JDK里面有哪些引用关系？（强，软，弱引用，以及使用场景上回答）</td></tr><tr><td></td><td>10FullGC和OOM溢出有啥关系？</td></tr><tr><td></td><td>11有遇到过OOM嘛？怎么解决的？</td></tr><tr><td></td><td>12讲讲JVM哪些区域里会发生OOM，在代码中应该如何避免？</td></tr><tr><td></td><td>13高并发下对MySQL的表结构设计，好操作时，要注意些什么？</td></tr><tr><td></td><td>14（我主要是从事务粒度，锁粒度，扫描行数，是否走索引来回答）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>顺丰HR-3面：</td></tr><tr><td></td><td>反正就是一些常见没有意义的题</td></tr><tr><td></td><td>问期望工资</td></tr><tr><td></td><td>优缺点</td></tr><tr><td></td><td>沟通情况等等</td></tr><tr><td></td><td></td></tr><tr><td></td><td>YY直播-1面：</td></tr><tr><td></td><td>1Netty 的粘包拆包方法有哪些？</td></tr><tr><td></td><td>2Kafak的 broker是什么？</td></tr><tr><td></td><td>3Redis分布式锁，怎么实现可重入锁？</td></tr><tr><td></td><td>4Redis，Hash，List，Set分别对应的底层数据结构？</td></tr><tr><td></td><td>5了解意向锁嘛？</td></tr><tr><td></td><td>6什么是覆盖索引，什么是索引下推？</td></tr><tr><td></td><td>7什么是redoLog日志？</td></tr><tr><td></td><td>8说说RedoLog日志和Binlog日志的怎么使用?</td></tr><tr><td></td><td>9什么是MVCC机制？</td></tr><tr><td></td><td>10讲讲红黑二叉树？</td></tr><tr><td></td><td>11怎么排查线上实例CPU飙高的问题？</td></tr><tr><td></td><td>12JVM参数配置需要注意一些什么？</td></tr><tr><td></td><td>13为什么堆大堆小内存要设置一样？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>YY直播-2面：</td></tr><tr><td></td><td>1.你们布隆过滤器怎么实现的？</td></tr><tr><td></td><td>2.怎么在BitMap上解决哈希冲突问题的？</td></tr><tr><td></td><td>3.为什么不直接用Order作为Key，直接以KV形式存储在Redis里面？（占内存）</td></tr><tr><td></td><td>4.Redis用的什么集群？Redis有做读写分离吗？</td></tr><tr><td></td><td>5.怎么利用Redis做的MQ幂等性？</td></tr><tr><td></td><td>6.怎么利用Redis来设计每日热搜排行榜？</td></tr><tr><td></td><td>7.Redis分布式锁有几种实现方式？</td></tr><tr><td></td><td>8.Redission底层是怎么实现分布式锁的？</td></tr><tr><td></td><td>9.Java中Syncroinze锁和ReenTrantLock有什么区别，底层怎么实现的？</td></tr><tr><td></td><td>10.问几个Linux命令：（都没答上来）</td></tr><tr><td></td><td>怎么查询IO磁盘占用了多少？</td></tr><tr><td></td><td>怎么查询内存占用多少？</td></tr><tr><td></td><td>怎么查询CPU占用？</td></tr><tr><td></td><td>怎么查询网络连接占用多少？</td></tr><tr><td></td><td>11.怎么利用MySQL实现分布式锁？</td></tr><tr><td></td><td>12.MySQL建表的时候，你要考虑一些什么？</td></tr><tr><td></td><td>（字段类型，长度，索引设计，null值，编码等去聊）</td></tr><tr><td></td><td>13.设计题：有20个群，大概每个群1万人，需要在15-16点的时候，会在群里的右下角展示一个图片，图片中🈶投票按钮，和显示 “已投人数”，投完票后显示本群已投票的人名榜，按住投票先后排序。 这个你怎么设计？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>。。。。二面后挂了：面试评价：Java基础较好，但是Linux知识比较差，因此知识面不广。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>富途-1面：</td></tr><tr><td></td><td>1浏览器发起请求后经历了哪些过程？</td></tr><tr><td></td><td>2HTTP由哪些部分组成？</td></tr><tr><td></td><td>3三次握手四次挥手分别传递了什么信息？</td></tr><tr><td></td><td>4HTTPS协议的区别？ 对称加密先做了非对称加密？</td></tr><tr><td></td><td>5一个SQL查询题？</td></tr><tr><td></td><td>6一个SQL表设计题？</td></tr><tr><td></td><td>7一个场景提？</td></tr><tr><td></td><td>8一个字符串解析题，需要用到递归去实现。</td></tr><tr><td></td><td>9一个级联关系的JSON，怎么解析，据说在什么加密算法里有使用到？</td></tr><tr><td></td><td>。。。其他的忘了，反正前前后后面了一个小时</td></tr><tr><td></td><td></td></tr><tr><td></td><td>富途-2面：</td></tr><tr><td></td><td>1.有AB两个数组，判断B是否为A的子集。（编码题）</td></tr><tr><td></td><td>2.一副扑克牌，没有大小王一共52张，从里面随机抽2张，问抽到颜色相等的概率是多少。（算术，思维题）</td></tr><tr><td></td><td>3.一堆桃子分给一群猴子，如果每个猴子分3个，还剩59个；如果每个猴子分5个，那么最后一个猴子分得的桃子不够3个，你能求出有几只猴子，几个桃子吗？（思维题）</td></tr><tr><td></td><td>4.事务的四个特性？分别解释一下四个特性</td></tr><tr><td></td><td>5.事务怎么实现的？Spring里面又是怎么实现的？</td></tr><tr><td></td><td>6.TCP协议的三次握手</td></tr><tr><td></td><td>7.TCP以及握手中发送了什么信息</td></tr><tr><td></td><td>8.如果利用第三次握手后如果没有返回服务端，会发生什么？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>。。。面完后挂了：算法写出来了，数学题没做出来。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>朴朴买菜-1面：</td></tr><tr><td></td><td>1熟悉线程、线程池的参数使用以及原生线程池的一些问题</td></tr><tr><td></td><td>2了解synchronized，了解锁优化，了解voliate，lock的底层原理</td></tr><tr><td></td><td>3了解jvm的原理，对jvm做的调优，比如导致数据场景，调大新生代，避免对象今早进入老年代</td></tr><tr><td></td><td>4使用过工具分析过dump文件</td></tr><tr><td></td><td>5了解数据库索引结构、知道聚集索引，非聚集索引，了解索引下推，b+树结构等</td></tr><tr><td></td><td>6会使用explain分析慢sql，遇到过隐式转换导致索引失效</td></tr><tr><td></td><td>7redis这块用过分布式锁，用过sortedset（主要拿来排序，场景是延时队列，不是常见的redis延时队列方案），使用过bitmap，配合lua脚本实现限流</td></tr><tr><td></td><td>8mq使用简单了解，知道消费不丢，了解顺序消费，了解幂等消费方案。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>朴朴买菜-2面：</td></tr><tr><td></td><td>1如何解决系统调用时数据的一致性问题。</td></tr><tr><td></td><td>2刷数据问题：要求使用time_update更新，避免漏数据。刚好在分页节点，多条记录time_update 一样的时候，使用id排序做游标, 包括深分页的优化。</td></tr><tr><td></td><td>3上述业务有无其他方案，能想到消息的方式，但是觉得过度设计，宁愿这种耦合。</td></tr><tr><td></td><td>4对DDD、领域事件有基本了解</td></tr><tr><td></td><td>5接口优化，线程池、事物粒度等角度讲。</td></tr><tr><td></td><td>6有个特别的设计：开票二维码的code，有自定义的规则判断是否有效，避免无效请求。</td></tr><tr><td></td><td>7按照场景提前加载缓存。穿透问题有考虑，方案只是使用了单机线程池，流控方面比较缺少</td></tr><tr><td></td><td>8固定窗口、滑动窗口等方案了解，面试过程能细的讲滑动窗口的自定义实现（数据结构不优）</td></tr><tr><td></td><td>9压测方案怎么指定？解读和场景方面缺少。</td></tr><tr><td></td><td>。。。其他的忘了，反正前前后后面了一个小时</td></tr><tr><td></td><td></td></tr><tr><td></td><td>朴朴买菜-HR面：</td></tr><tr><td></td><td>问为啥离职，介绍深圳计算团队，是做供应链的，人数就几十个人，然后直接</td></tr><tr><td></td><td>谈工资，谈期权。（社保低，公积金高）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>玄武科技-1面：</td></tr><tr><td></td><td>1聊聊JVM虚拟机</td></tr><tr><td></td><td>2聊聊JVM内存模型，GC，对象回收算法。</td></tr><tr><td></td><td>3聊聊Java中的多线程要考虑的问题？（原子性，隔离性，有序性，从这三方面去切入）</td></tr><tr><td></td><td>4聊聊java中为了解决线程安全的东西，锁，队列，volatile，安全容器，原子变量等等。</td></tr><tr><td></td><td>5聊聊Jvm的类加载，对象创建，Javac,类加载器，双亲委派，JavaAgent动态代理，cglib动态代理从这些去聊）</td></tr><tr><td></td><td>6聊聊Java中的IO模型，AIO，BIO，NIO。这些。</td></tr><tr><td></td><td>7了解Netty底层的实现吗?聊聊多路复用，React模型，select，poll,epoll模型。</td></tr><tr><td></td><td>8聊聊Spring中的东西，IOC,DI,AOP这些。</td></tr><tr><td></td><td>9聊聊SpringBoot里面是怎么设计的，SPI机制，start怎么实现的，那一堆吧。</td></tr><tr><td></td><td>10聊聊SpringBoot中内嵌的Tomcat，和Jetty有什么区别？</td></tr><tr><td></td><td>11聊聊Innodb中的索引结构。</td></tr><tr><td></td><td>12聊聊SQL优化时，和建表时需要注意哪些。（建表时，select查询时，修改插入时， 从这几方面切入）</td></tr><tr><td></td><td>13CodeReview时，你会注意哪些方面？（可读性，拓展性，性能 从这三面去总结）</td></tr><tr><td></td><td>14聊聊你知道哪些设计原则，开发时是怎么体现的？：（单一，开闭，里氏替换原则）</td></tr><tr><td></td><td>15聊聊TCP为啥时可靠性传输？</td></tr><tr><td></td><td>16为啥TCP连接时要三次握手，断开时需要四次握手?</td></tr><tr><td></td><td></td></tr><tr><td></td><td>玄武科技-2面：</td></tr><tr><td></td><td>1问了一下项目业务？</td></tr><tr><td></td><td>2有哪些难点？</td></tr><tr><td></td><td>3介绍一下分库分表过程是怎么实现的？</td></tr><tr><td></td><td>4讲讲你做了哪些技术方案？</td></tr><tr><td></td><td>5讲讲GetWay的原理？</td></tr><tr><td></td><td>6如何设计一个高并发的系统？</td></tr><tr><td></td><td>7RocketMQ的底层实现？</td></tr><tr><td></td><td>8。。。反正正常是面过了，但是面试官的结论，基础好，深度意识可以，就是缺少高并发的场景。</td></tr><tr><td></td><td>玄武科技HR-3面</td></tr><tr><td></td><td>期望薪资？</td></tr><tr><td></td><td>为什么想来广州？</td></tr><tr><td></td><td>自己擅长什么？</td></tr><tr><td></td><td>基本上就是闲聊？</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>奇虎360-1面：</td></tr><tr><td></td><td>1synchronized的底层原理</td></tr><tr><td></td><td>2什么是内存逃逸分析？</td></tr><tr><td></td><td>3volatile的底层原理</td></tr><tr><td></td><td>4AQS底层原理</td></tr><tr><td></td><td>5用了哪些NoSQL数据库，为啥要用Mongodb不用MySQL。</td></tr><tr><td></td><td>6你们CodeReview会注意哪些？</td></tr><tr><td></td><td>7你们采用敏捷开发模式，是怎么去推动？</td></tr><tr><td></td><td>8有没有遇到过那种迭代穿插进行的时候？</td></tr><tr><td></td><td>9你们Excel导入是怎么优化的？</td></tr><tr><td></td><td>10Redis怎么实现的项目重启保证幂等性问题？</td></tr><tr><td></td><td>11有哪些JVM调优的经历？</td></tr><tr><td></td><td>12JVM调优有哪些参考指标？</td></tr><tr><td></td><td>13G1和CMS回收器有什么不同？</td></tr><tr><td></td><td>14你们那边网络安全是怎么保证的？</td></tr><tr><td></td><td>15你知道哪些网络安全漏洞？</td></tr><tr><td></td><td>16对下一个公司有什么期盼？</td></tr><tr><td></td><td>17有干了哪些开源的事情？</td></tr><tr><td></td><td>。。。面过了，后面问我现在的工资和期盼，我拒绝，没告诉他，感觉他不是leader，只是处于好奇问的。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>奇虎360-2面：</td></tr><tr><td></td><td>上次Log4J的安全问题有了解吗？是怎么实现的线程不安全？</td></tr><tr><td></td><td>还有个什么场景题？我给忘了？</td></tr><tr><td></td><td>介绍了一下项目</td></tr><tr><td></td><td>怎么保证请求的有序性？</td></tr><tr><td></td><td>其他：</td></tr><tr><td></td><td>据说第一面评价说技术OK，所以就没多问技术方面的问题了，介绍了他们公司的情况。</td></tr><tr><td></td><td>据说这个他们项目组是去年被360收购的公司，组织架构现在是360集团，行政福利都一样，只是现在还没搬到广州总部一起办公，属于游离状态。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>奇虎360-3面：</td></tr><tr><td></td><td>目前还没约面，Boss特意给我打了个电话，因为Boss在深圳被隔离起来，无法现场面对面交流。</td></tr><tr><td></td><td>Boss说后面有时间再约我，感觉他们也不着急的样子。而且他们技术团队只有二十多人，是去年新收购的，目前还没有和360总部的在一起办公，目前是属于自己管自己，但是组织架构和福利待遇和360总部保持一致。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>致景科技-1面：</td></tr><tr><td></td><td>1SQL调优有哪些？</td></tr><tr><td></td><td>2讲讲并发线程安全？（多节点线程安全&amp;单系统中的线程安全）</td></tr><tr><td></td><td>3讲讲负责的系统业务？</td></tr><tr><td></td><td>4讲讲分布式锁的实现？如果获取锁失败怎么办？</td></tr><tr><td></td><td>5讲讲Redis限流怎么实现的？（固定窗口+弊端）</td></tr><tr><td></td><td>6分库分表你们是怎么做的？（调研+方案+上线+数据迁移+测试）</td></tr><tr><td></td><td>7对未来的规划？</td></tr><tr><td></td><td>致景科技-2面：</td></tr><tr><td></td><td>要我去线下面试，放他鸽子了。。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>三七互娱-1面：</td></tr><tr><td></td><td>问了一下大数据相关的东西，什么数据建模之类的，基本上都是经验输出，没有问太多八股文</td></tr><tr><td></td><td>基本上是问的一些开发思想，规约，建设，感觉面试官不是做Java开发的</td></tr><tr><td></td><td></td></tr><tr><td></td><td>三七互娱-2面：</td></tr><tr><td></td><td>1你们的迭代是怎么跑的？</td></tr><tr><td></td><td>2怎么JVM调优？</td></tr><tr><td></td><td>3OOM问题，你们是怎么解决的，有考虑过这个NIO框架里为啥会OOM嘛？</td></tr><tr><td></td><td>4File文件压缩工具怎么做优化？用到了NIO中的哪个特性？</td></tr><tr><td></td><td>5什么是零拷贝？</td></tr><tr><td></td><td>6你们为什么要重构？怎么做重构的？怎么保证重构后的新老服务无缝对接？</td></tr><tr><td></td><td>7针对一些C端APP，不改变接口的情况下，如何切换新老服务？（反向代理，网关，IP切换等）</td></tr><tr><td></td><td>8如何实现重构后的AB（灰度发布）发布？</td></tr><tr><td></td><td>9你们是如何管理开发，测试，线上不同环境的？</td></tr><tr><td></td><td>10如何管理代码分分支的？（Gitflow？）</td></tr><tr><td></td><td>11系统部署环境是你们整的嘛？ （用的Jenkins,脚本是运维写的）</td></tr><tr><td></td><td>12为何要自己搭一套FastDFS？</td></tr><tr><td></td><td>13讲讲线上SQL事故，为啥要弄Soar工具，有啥好处，比Expain分析工具好在哪里?</td></tr><tr><td></td><td>14最近做的一次技术分享是什么？</td></tr><tr><td></td><td>15为啥要用ES替代ADS？ （成本，场景）</td></tr><tr><td></td><td>16有做过大数据或者用户画像方面的系统吗？</td></tr><tr><td></td><td>17你们一般有哪些技术OKR？</td></tr><tr><td></td><td>18对加班有什么看法？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>广州三七互娱HR-3面：</td></tr><tr><td></td><td>给了定级P5，年包34万左右，HR说1，2，4加班到九点</td></tr><tr><td></td><td>做的是斗罗大陆，等游戏后台的营销，支付，等一个游戏平台部门，</td></tr><tr><td></td><td>工作内容：对接和开发占比 3：7， 平时可能回写写SDK之类的</td></tr><tr><td></td><td>听做游戏开发的朋友说，三七互娱很卷，劝退。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>格力电器-1面：</td></tr><tr><td></td><td>1说说HashMap的底层数据结构？</td></tr><tr><td></td><td>2HashMap的扩容实现？</td></tr><tr><td></td><td>3HashMap出现线程不安全的原因？</td></tr><tr><td></td><td>4讲讲 并发包里熟悉哪些类？</td></tr><tr><td></td><td>5知道ReentrantLock底层是怎么实现的嘛？介绍一下里面的CHL队列？</td></tr><tr><td></td><td>6讲讲NIO，BIO，AIO的区别？</td></tr><tr><td></td><td>7讲讲BIO是在哪个阶段发生了阻塞？ 用户空间-内核空间的哪个阶段阻塞？</td></tr><tr><td></td><td>8讲讲NIO的多路复用模型？</td></tr><tr><td></td><td>9Poll，epoll的区别？ （轮询，通知，水平触发，边缘触发）</td></tr><tr><td></td><td>10讲讲Redis和Nginx中的NIO实现嘛？（equeue,Event事件驱动等，多路复用模型等）</td></tr><tr><td></td><td>11你们Redis用的是什么集群？</td></tr><tr><td></td><td>12Redis Cluster集群部署时，Redis多主节点，是把Key落到Hash槽位中前，这个Hash值是在客户端算出来的还是在服务端算出来的？</td></tr><tr><td></td><td>13Redis多节点要扩容时，是怎么实现的？</td></tr><tr><td></td><td>14讲讲Hash一致性算法？</td></tr><tr><td></td><td>15一个API接口出现卡顿，你如何排查问题？ （监控判断瓶颈位置，如网关，第三方接口调用，慢SQL，锁超时等。JVM进程层面：判断是否发生了FullGC，是否有线程池配置不够等。Linux层面查看CPU占用，内存占用，网络阻塞情况等。）</td></tr><tr><td></td><td>16讲讲为啥用来Nginx还要用Getway网关，有啥区别？</td></tr><tr><td></td><td>17GetWay出现了断言清空问题？你怎么排查？ （GetWay的自身Bug，他们遇到过）</td></tr><tr><td></td><td>18Nginx怎么实现高可用？ （LVS前置负载均衡，SLB ，Nginx层层代理，但是有20%的性能损耗等）</td></tr><tr><td></td><td>19为啥要使用Nginx，为啥不直接挂Tomcat，这样就课没损耗了？</td></tr><tr><td></td><td>20讲讲设计一个API接口，要注意哪些问题？</td></tr><tr><td></td><td>21怎么保证前端表单不会出现重复提交？ （表单不会被抓包抓到重复发送数据请求过去？）</td></tr><tr><td></td><td>22你们有哪些场景案例提升了接口的QPS？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>格力电器-2面：</td></tr><tr><td></td><td>1讲讲JVM？</td></tr><tr><td></td><td>2你们JVM参数有哪些？为啥要这么设置？</td></tr><tr><td></td><td>3讲讲有哪些GC回收器？分别怎么用的？</td></tr><tr><td></td><td>4有哪些垃圾回收算法？</td></tr><tr><td></td><td>5JVM参数模板上可以指定用哪种算法吗？</td></tr><tr><td></td><td>6做过哪些JVM调优？</td></tr><tr><td></td><td>7用过哪些OOM排查工具，怎么排查的？</td></tr><tr><td></td><td>8用的阿里那套微服务框架嘛？ 对那个东西熟？</td></tr><tr><td></td><td>9了解GetWay网关吗？</td></tr><tr><td></td><td>10做过哪些QPS提升的东西？</td></tr><tr><td></td><td>11做过压力测试吗？</td></tr><tr><td></td><td>12了解多少Redis？用的什么集群？</td></tr><tr><td></td><td>13知道Proxy集群模式吗？实现Redis代理的？</td></tr><tr><td></td><td>14MySQL的行级锁是怎么实现的？</td></tr><tr><td></td><td>15MySQL的事务是怎么实现的？</td></tr><tr><td></td><td>16BinLog日志有哪几种模式？statement模式，rows, statement+row结合</td></tr><tr><td></td><td>17Cancel有了解吗？ 他是用的哪种模式做的数据采集？</td></tr><tr><td></td><td>。。。挂了，面试官是公司同事的朋友，不配来应聘他们的高级，他们要的能解决问题的能力，线上排查问题的能力，而不是单纯写业务，背八股文的。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>格力电器-HR面：</td></tr><tr><td></td><td>1为什么离职？</td></tr><tr><td></td><td>2对下个公司有什么期盼？</td></tr><tr><td></td><td>3你在当前公司的职责是什么？</td></tr><tr><td></td><td>4你的身高体重，是否结婚？</td></tr><tr><td></td><td>5期望薪资</td></tr><tr><td></td><td>6格力 电子商务公司 数字化互联网 转型，</td></tr><tr><td></td><td>7深圳：150人左右，开发事，电商，物流，仓储。</td></tr><tr><td></td><td>8非深户 2档 ， 1万技术的10%公积金，合同主题 深圳艾维普公司，9-6点下半年</td></tr><tr><td></td><td>后面有了想去的offer，就没面了。。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>小鹏汽车-1面：</td></tr><tr><td></td><td>1没问啥技术、都是问思想，开发意识等等</td></tr><tr><td></td><td>2基本上问你对项目的了解？</td></tr><tr><td></td><td>3部门的一些职责，规约，比较一些技术难点，和技术方案。</td></tr><tr><td></td><td>小鹏汽车-2面：</td></tr><tr><td></td><td>1和一面问的差不多，简单问了几个技术点，和算法设计</td></tr><tr><td></td><td>2什么是BitMap的假阳性？</td></tr><tr><td></td><td>3通用的导入导出方案是怎么玩的？</td></tr><tr><td></td><td>4有哪些不错的方案设计？对产品的熟悉度？</td></tr><tr><td></td><td>5怎么划分迭代的？未来的规划？</td></tr><tr><td></td><td>6平时怎么学习？</td></tr><tr><td></td><td>7在技术方面有什么优势？</td></tr><tr><td></td><td>小鹏汽车HR-3面：</td></tr><tr><td></td><td>1为啥离职？</td></tr><tr><td></td><td>2上一家公司为啥要回深圳？</td></tr><tr><td></td><td>3个人兴趣爱好等？</td></tr><tr><td></td><td>4个人学习情况等？</td></tr><tr><td></td><td>5讲解公司的待遇情况：</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>欢聚集团-1面：</td></tr><tr><td></td><td>1Java基础？</td></tr><tr><td></td><td>2Lua脚本使用固定窗口限流的算法？</td></tr><tr><td></td><td>3令牌桶算法，漏桶算法，滑动窗口算法？</td></tr><tr><td></td><td>4@Transiational事务注解的实现？</td></tr><tr><td></td><td>5JVM垃圾回收机制，线上排查经验？</td></tr><tr><td></td><td>6系统复杂度情况，有无异常应对场景？</td></tr><tr><td></td><td>7分布式ID生成方案，但对雪花算法的时间回拨问题没有解决方案</td></tr><tr><td></td><td>。。。缺少电商，物流，等复杂系统的开发经验。面试的供应链部门</td></tr><tr><td></td><td>欢聚ShopLine-1面：</td></tr><tr><td></td><td>1没有自我介绍，直接先介绍项目？（感觉面试官一天面了很多人，部门专场面试）</td></tr><tr><td></td><td>2项目里面怎么保证数据的一致性？</td></tr><tr><td></td><td>3怎么保证订单消费的幂等性？</td></tr><tr><td></td><td>4Redis里用BitMap做订单存储，可以修改吗？</td></tr><tr><td></td><td>5怎么保证Redis里面的数据和MySQL里面的一致性？</td></tr><tr><td></td><td>6利用每晚定时任务去维护BitMap里Order信息的完整性，如果在维护之前就有操作怎么办？</td></tr><tr><td></td><td>7如果Redis挂了，还会不会去重新维护一个BitMap结构？</td></tr><tr><td></td><td>8Redis+Lua脚本限流是怎么实现的？为啥要用这个实现？ （固定窗口算法）</td></tr><tr><td></td><td>9Excel数据导入导出工具优化怎么实现的？</td></tr><tr><td></td><td>10兑换码是怎么生成的？ （海明码，增加逻辑校验，减少无效请求）</td></tr><tr><td></td><td>11项目里面还有用到什么技术难点？</td></tr><tr><td></td><td>12为什么采用双写的数据迁移？不用Canal去监控BinLog日志去迁移？</td></tr><tr><td></td><td>13如果双写时，遇到有老数据的修改你们是怎么解决的？</td></tr><tr><td></td><td>14新老库双写时，有没有遇到事务问题？</td></tr><tr><td></td><td>15会记录错误日志，存储在哪里？</td></tr><tr><td></td><td>16还有什么想问的吗？</td></tr><tr><td></td><td>。。。。基本上抓着项目上，和简历上的东西问，所以对简历上写的东西一定要准备好。</td></tr><tr><td></td><td>部门专场招聘，感觉面试官一天面了不少人，自我介绍，客套话都省略了。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>欢聚ShopeLine-2面：</td></tr><tr><td></td><td>1.自我介绍</td></tr><tr><td></td><td>2.介绍项目，</td></tr><tr><td></td><td>3.分析系统的分层，架构、</td></tr><tr><td></td><td>4.系统之间是怎么调用的？</td></tr><tr><td></td><td>5.你们系统之间的边界</td></tr><tr><td></td><td>6.为啥要把B端C端的流量放一个系统上？有什么好办法把它区分开？</td></tr><tr><td></td><td>7.如果分开部署，那怎么保证系统的公共业务是通用的呢？</td></tr><tr><td></td><td>8.为啥不建议一个应用挂两个数据源？</td></tr><tr><td></td><td>10.什么是中台？什么是平台？</td></tr><tr><td></td><td>基本没问技术八卦文，就是讨论系统设计的知识，相互讨论，相互互怼，有时候我反问他，问他们是怎么做的，他说他们也不是这样干的，只是为了讨论而已。。。。MMP。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>网易OA-1面：</td></tr><tr><td></td><td>1线程池配置的参数？（CPU密集，IO密集，不同配置）</td></tr><tr><td></td><td>2线程池内部创建线程的原理，以及引发OOM问题？</td></tr><tr><td></td><td>3G1的垃圾回收的特征？ 用的什么回收算法？ （复制，说成了标记整理，答错了）</td></tr><tr><td></td><td>4Map为啥要用红黑二叉树的特征？</td></tr><tr><td></td><td>5Spring框架中有用了哪些设计模式？用在哪个地方？</td></tr><tr><td></td><td>6怎么解决Bean的循环依赖问题的？</td></tr><tr><td></td><td>7AOP切面的底层实现原理？</td></tr><tr><td></td><td>8在一个Bean内调用添加事务的方法，事务是否会生效？</td></tr><tr><td></td><td>9Redis有哪些数据类型？</td></tr><tr><td></td><td>10Redis有哪几种日志持久化方式？</td></tr><tr><td></td><td>11Redis底层有哪些数据结构？</td></tr><tr><td></td><td>12SortSet底层什么时候是压缩列表，什么时候用跳表？</td></tr><tr><td></td><td>13什么是跳表？数据结构是怎么样的？</td></tr><tr><td></td><td>14Redis有哪些集群模式？</td></tr><tr><td></td><td>15Redis的分布式锁是怎么实现的？</td></tr><tr><td></td><td>16还有哪些分布式锁实现的方式？</td></tr><tr><td></td><td>17ZK的高可用机制是怎么保证的？ （paxos算法？不知道）</td></tr><tr><td></td><td>18ZK实现分布式锁是怎么实现的？</td></tr><tr><td></td><td>19SpringCloud中的Eureka是多点集群的吗？</td></tr><tr><td></td><td>20内部高可用的机制是怎么实现的？ （不知道）</td></tr><tr><td></td><td>21如果Eureka挂了，客户端之间还能调用吗？</td></tr><tr><td></td><td>22Nginx有哪些负载均衡算法？ （随机，轮询，Hash,权重）</td></tr><tr><td></td><td>23如果请求采用Hash算法？但是后面新添加了节点，怎么解决扩容问题？ （转移到 一致性Hash算法上？）</td></tr><tr><td></td><td>24一致性Hash算法是怎么实现的？</td></tr><tr><td></td><td>25你用项目里面用了哪些设计模式？怎么用的？</td></tr><tr><td></td><td>26单例模式有哪几种？</td></tr><tr><td></td><td>27怎么解决并发时的单例情况？（双重锁？序列化反序列对象创建bean）</td></tr><tr><td></td><td>28项目中是怎么用工厂模式去做对三方请求的？ （我描述的可能不太清楚）</td></tr><tr><td></td><td>29Kafka了解吗？ （不太了解）</td></tr><tr><td></td><td>30和传统MQ的区别？</td></tr><tr><td></td><td>31Borken,Topic,Patiion..(分区) 之间的关系？</td></tr><tr><td></td><td>32一个Topic是单节点还是多节点的？ 忘了，不了解 。。</td></tr><tr><td></td><td>33慢SQL怎么排查？ （Explian）</td></tr><tr><td></td><td>34Like 会使用索引吗？</td></tr><tr><td></td><td>35等于号两边使用函数，会用索引吗？</td></tr><tr><td></td><td>。。。。挂了。。。</td></tr><tr><td></td><td></td></tr><tr><td></td><td>唯品会-1面：</td></tr><tr><td></td><td>1自我介绍，讲讲项目？</td></tr><tr><td></td><td>2Redis存一些什么?</td></tr><tr><td></td><td>3Redis做分布式锁遇到过哪些坑？ （死锁，锁占用？）</td></tr><tr><td></td><td>4Redis缓存失效，有大量请求怼在MySQL上有什么问题？ （其实就是缓存雪崩的场景）</td></tr><tr><td></td><td>5Redis的RDB文件过大，怎么解决？</td></tr><tr><td></td><td>6Redis分布式集群最大支持多少实例？</td></tr><tr><td></td><td>7Redis主节点挂了，如何快速恢复？</td></tr><tr><td></td><td>8影响Redis恢复速度的情况可能有哪些？</td></tr><tr><td></td><td>9MySQL什么时候会使用间隙锁？</td></tr><tr><td></td><td>10你们的表最大数据量有多少？ （4000W+）</td></tr><tr><td></td><td>11你们大表做了哪些优化？ （索引，业务上表分层，ShardJdbc分库分表）</td></tr><tr><td></td><td>12分库分表情况下有哪些汇总计算的方式？（异步汇总缓存，查询内存汇总，Hive和MapReduce）</td></tr><tr><td></td><td>13新应用上线，JVM参数模板怎么配置？（默认模板，压测，GC日志，堆占用，调节）</td></tr><tr><td></td><td>14JVM频繁发生YGC和FullGC，你怎么去定位问题和解决？ （GC日志，动态规划，担保机制）</td></tr><tr><td></td><td>15你们用了有大数据的Hadoop，Hive这些东西吗？ （说没有用到，但自己学过，就没下文了）</td></tr><tr><td></td><td>16问到这里没了，有什么想问的嘛？</td></tr><tr><td></td><td>反问面试官：</td></tr><tr><td></td><td>Redis你们遇到过节点挂了的情况吗？ 你们怎么快速恢复的？ （结果就TM的主从切换，他们数据迁移的时候有考虑过）</td></tr><tr><td></td><td>前端后端大数据都要会点？（且大量操作Redis）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>唯品会-2面：</td></tr><tr><td></td><td>(面试时录音了，所以把每一个问题都记录了下来。面了50分钟左右)</td></tr><tr><td></td><td>1介绍一下自己项目？（数据走向分析）你们的系统分层？为什么要这么分层？</td></tr><tr><td></td><td>2你了解什么是DDD驱动领域模型吗？ 了解DDD有哪几种模型？（充血，贫血）</td></tr><tr><td></td><td>3为什么要在系统中用MQ？ （解耦，异步，削峰）讲讲MQ中的解耦，和异步有什么区别？</td></tr><tr><td></td><td>4下单的时候扣库存有什么问题？ 下完单后扣减库存又有什么问题？</td></tr><tr><td></td><td>5下单同步扣减库存和下单异步扣减库存有什么区别？会出现什么问题？</td></tr><tr><td></td><td>6怎么解决库存多卖问题吗？ （分布式锁，Redis原子Incr命令）</td></tr><tr><td></td><td>7分布式锁保证扣库存，会存在什么问题？ （串行，效率低）</td></tr><tr><td></td><td>8Redis扣减库存后怎么最终会持久化到MySQL中？ （相等与缓存一致性的解决方案）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>9RocketMQ的技术架构你了解过吗？ （下面几个直接说不了解）</td></tr><tr><td></td><td>10RocketMQ的Topic是怎么管理的？</td></tr><tr><td></td><td>11RocketMQ的服务器（节点）是怎么管理的？）</td></tr><tr><td></td><td>12RocketMQ的日志文件是怎么管理的？</td></tr><tr><td></td><td>13RocketMQ的推拉模式是怎么实现的？</td></tr><tr><td></td><td>14RocketMQ支持什么样的事务？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>15RocketMQ发消息存在哪些不可靠的点？</td></tr><tr><td></td><td>16MQ发送失败怎么 办？</td></tr><tr><td></td><td>17本地消息表记录发送状态，那么如果这个状态如果没有修改成功，那么判断是否发送成功的点哪？他有没有发送成功的可能性？</td></tr><tr><td></td><td>18发送的消息有个唯一标识，唯一标识是选择自己生成的还是用MQ系统的生成的？</td></tr><tr><td></td><td>19如果第一次发送成功了，第二次又发了，在MQ服务端收到两条相同消息，MQ会怎么处理？</td></tr><tr><td></td><td>20RocketMQ是从哪些方面解决性能问题的？</td></tr><tr><td></td><td>21RocketMQ是在哪一块用的零拷贝？</td></tr><tr><td></td><td>22MQ客户端什么情况下需要做幂等？</td></tr><tr><td></td><td>23消费者端做幂等的话，需不需要做Try&#x2F;Catch ？</td></tr><tr><td></td><td>24你们会用MQ的重试功能嘛？</td></tr><tr><td></td><td>25MQ如果没有消费成功会重复消费吗？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>26Redis底层有哪几种数据结构？（跳表，压缩列表，SDS，数组）</td></tr><tr><td></td><td>27Redis除了上面这些还有什么数据结构吗？ （BitMap? RedisObject可自定义类型？）</td></tr><tr><td></td><td>28SDS为什么交动态字符串？ 那SDS会动态换吗？</td></tr><tr><td></td><td>29Hash和List底层数据结构是哪几种？ 怎么选择的？</td></tr><tr><td></td><td></td></tr><tr><td></td><td>30Redis集群之间的通信协议原理你知道吗？ （二进制Gossip）</td></tr><tr><td></td><td>31为什么Redis官方说建议最多1000台部署？</td></tr><tr><td></td><td>32Redis的热Key怎么解决？</td></tr><tr><td></td><td>（我说没理解啥是热Key，他问的意思是高频使用的Key，有可能在集群中有部分节点出现了CPU飙高的问题，你怎么去解决怎么去查？ 我从 数据倾斜，BigKey两方面去定位分析 ）</td></tr><tr><td></td><td>33为啥大Key会打满CPU？ （fork持久化线程时，和遍历时间复杂度 去分析的）</td></tr><tr><td></td><td>34Redis的布隆过滤器去重的范围是多大？ （没有固定，需要根据BitMap长度和hash函数个数去分析）</td></tr><tr><td></td><td>35HIVE本身的原理是什么？他是怎么工作的？ （HDFS，MySQL存元数据，底层MapReduce）</td></tr><tr><td></td><td>36Hive和MapReduce有什么关系？ （底层计算是用的MR）</td></tr><tr><td></td><td>37什么是Map什么是Reduce？</td></tr><tr><td></td><td>38MapReduce会存在数据亲些的问题吗？ 怎么解决？ （不知道）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>39CopyOnWriteArrayList 什么情况下使用它会合适？</td></tr><tr><td></td><td>40Synchronized 和 volatile 有什么区别？ 也可以讲讲底层实现怎么实现的？</td></tr><tr><td></td><td>41单处理器（单核）存在并发问题吗？</td></tr><tr><td></td><td>反问面试官：</td></tr><tr><td></td><td>你们做什么业务的？运营中台，MPD，活动提报系统 图文系统，用户画像系统，超微系统？ 反正他们组是和用户相关的，面试官是做超微系统的，进去之后也不一定是做超微系统。</td></tr><tr><td></td><td>你们Redis有多少实例？ （300台，大促下会有600台 ）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>唯品会-3面：</td></tr><tr><td></td><td>（录音了，所以问题记录的比较多，面了1个小时多点。）</td></tr><tr><td></td><td>1为什么想离职？</td></tr><tr><td></td><td>2你在项目组里面是什么角色？</td></tr><tr><td></td><td>3重点讲一下系统中遇到了些什么问题？有什么难点？用了什么方案去解决的？ （BitMap去重，海明码）</td></tr><tr><td></td><td>4你的项目质量是怎么保证的？ （我从三个维度分析：代码质量，系统稳定质量，数据准确性质量）</td></tr><tr><td></td><td>5讲一下你们怎么做CodeReview的？</td></tr><tr><td></td><td>（从两个维度去分析：</td></tr><tr><td></td><td>方案设计维度上： 体现API接口，和表设计和字段选型；</td></tr><tr><td></td><td>代码维度上：需要从时间，空间复杂度，池化配置，SQL效率，工具选型，代码可读性上去Review）</td></tr><tr><td></td><td>6开发完后你们的单元测试怎么做的？ （没做，不了解）</td></tr><tr><td></td><td>7项目开发完后发版，你们怎么保证系统的稳定？ （灰度，回滚机制，DDL语句）</td></tr><tr><td></td><td>8你们用Redis除了做布隆过滤器还做了啥？ （延时队列，固定窗口限流，缓存）</td></tr><tr><td></td><td>9讲一下Redis的Hash底层实现是怎么样的？</td></tr><tr><td></td><td>（我讲了 压缩列表，跳表 的特征，以及内部怎么抉择的使用哪种数据结构的）</td></tr><tr><td></td><td>10Redis或DB的连接池怎么选择去配置的？ （我从两方面：Java客户端业务场景，DB服务端的瓶颈）</td></tr><tr><td></td><td>11本地缓存有用吗？ （反问是不是说的是Ecache那种缓存？）</td></tr><tr><td></td><td>12堆内和堆外的缓存有什么不一样？</td></tr><tr><td></td><td>13堆外和堆内内存是否对GC有影响？</td></tr><tr><td></td><td>14Linux的内核有没有研究过？ 有没有做Linux内核方面的调优？ （没有）</td></tr><tr><td></td><td>15你一般怎么去分析GC日志的？ （jstact -gc 1000 1000 ）</td></tr><tr><td></td><td>16JVM参数中的GC参数你怎么配的？有什么依据？ （从GC间隔时间，存活率，GC时长去分析）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>17你怎么设计一个秒杀系统？ （从 持久层，交互，系统稳定性三方面去考虑）</td></tr><tr><td></td><td>18在秒杀系统中 你用Redis是做持久层还是缓存？</td></tr><tr><td></td><td>19怎么把Redis上的库存信息同步到MySQL？</td></tr><tr><td></td><td>20如果你服务发版，把过期时间为15天的缓存给删了，你怎么把缓存恢复到Redis？（有点像预热的场景）</td></tr><tr><td></td><td>21Redis节点挂了怎么恢复？</td></tr><tr><td></td><td>22Redis主节点为什么不能开启持久化方式？</td></tr><tr><td></td><td>（主从快速恢复，fork拷贝内存耗时，利用丛丛去级联同步日志）</td></tr><tr><td></td><td>23Redis主不开启持久化，从开启持久化机制，如果主节点挂了从当选为新的主节点来使用,此时从是配置了持久化的，那岂不是性能有影响？ （没办法，异常情况只能快速恢复）</td></tr><tr><td></td><td>24怎么监控系统？ （我从三方面回答，系统日志层面，服务器实例监控，分布式链路监控）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>25问我对新公司的期盼？ （对技术有追求，有学习成长）</td></tr><tr><td></td><td>26问我们现在公司上班的情况，加不加班（我说七八点下班，2周一个迭代的那种）</td></tr><tr><td></td><td>27你了解那些互联网电商公司的加班情况吗？</td></tr><tr><td></td><td>介绍他们组，做的是VIP用户下的交易系统，QPS上万，几十万的那种，要实时响应变化，经常需要发版。</td></tr><tr><td></td><td>所以需求多，加班多，一般是晚上10点左右才能下班，项目比较具有挑战性。</td></tr><tr><td></td><td>项目紧偶尔也会周六加班，面试官意思是如果能力好做的快，9点干完了，为了考虑整体团队情况也得10点下班的那种。比我现在的工作强度大很多，但是互联网电商项目比较具有挑战性，适合我们这种小年轻。</td></tr><tr><td></td><td>反问面试官：</td></tr><tr><td></td><td>你们Redis的主节点开启了了持久化机制吗？（不开启）</td></tr><tr><td></td><td>你们Redis的节点能到多少QPS？</td></tr><tr><td></td><td>（比我说的理论值10万QPS远远要小，只有6万左右的，让我感兴趣自己去试试。）</td></tr><tr><td></td><td></td></tr><tr><td></td><td>其他面过的公司：</td></tr><tr><td></td><td>SHEIN，金蝶信科，明源云，中国平安，万科下的万物云 ，用友，亚信，Oppo下的叶子，有车以后，乐信，等等</td></tr><tr><td></td><td></td></tr><tr><td></td><td>这几个公司，面试难度中等偏下，基本上都是八股文+开发经验的问题，没有卷算法，正常发挥就行。</td></tr><tr><td></td><td>•JUC的并发包下的Automic类，已经底层的实现</td></tr><tr><td></td><td>•CAS问题</td></tr><tr><td></td><td>•多线程下实现代码的顺序执行</td></tr><tr><td></td><td>•List 的两种线程安全模式？</td></tr><tr><td></td><td>•HashMap的Put过程，以及扩容过程</td></tr><tr><td></td><td>•Mybatis的插件式编程</td></tr><tr><td></td><td>•MySQL的Join过程，</td></tr><tr><td></td><td>•如何设计5000千万个用户发放6位数（字母+数字）的兑换码？</td></tr><tr><td></td><td>•Redis 什么时候用Set，List</td></tr><tr><td></td><td>•缓存一致性？</td></tr><tr><td></td><td>•数据一致性？</td></tr><tr><td></td><td>•分库分表？</td></tr><tr><td></td><td>•分布式锁等？</td></tr><tr><td></td><td>•自增主键等？</td></tr><tr><td></td><td>•CodeReview等等</td></tr><tr><td></td><td>•线程池原理等？</td></tr><tr><td></td><td>•Bean的生命周期等，</td></tr><tr><td></td><td>•IOC，AOP底层实现等。</td></tr><tr><td></td><td>•MQ保证消息不丢失，保证幂等性，保证可靠性消息投递，保证消费顺序问题等等。</td></tr><tr><td></td><td>•基本上，redoLog, undoLog, MySQL常见的优化，B+数据结构，索引优化，回表，聚簇索引，线程池，以及配置池子的时候需要注意的问题</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>对撞时候 顺序</p><p>触发攻击前buff 步骤</p><p>添加对撞 步骤</p><p>计算对撞伤害</p><p>触发攻击时 受击时buff</p><p>受到伤害时</p><p>结算对撞步骤 信息 4</p><p>触发吸血不为零的时候buff</p><p>攻击后buff</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;面经汇总-x2F-儒猿面经广告鸡汤-x2F-广深中小厂面经验&quot;&gt;&lt;a href=&quot;#面经汇总-x2F-儒猿面经广告鸡汤-x2F-广深中小厂面经验&quot; class=&quot;headerlink&quot; title=&quot;面经汇总&amp;#x2F;儒猿面经广告鸡汤&amp;#x2F;广深中小厂面经验</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql的主备从入门到入土</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%BB%E5%A4%87%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%BB%E5%A4%87%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-06-01T10:14:17.864Z</published>
    <updated>2023-06-01T10:14:17.864Z</updated>
    
    <content type="html"><![CDATA[<p>本文有xmind，配合观看，效果更佳：<a href="mysql%E7%9A%84%E4%B8%BB%E5%A4%87%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/Mysql%E4%B8%BB%E5%A4%87%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.xmind">Mysql主备从入门到入土.xmind</a></p><p>binlog 可以用来归档，也可以用来做主备同步，那么具体是怎么做主备同步的呢？为什么备库执行了 binlog 就可以跟主库保持一致了呢？</p><h2 id="什么是主备"><a href="#什么是主备" class="headerlink" title="什么是主备"></a>什么是主备</h2><p>传统的单机架构在目前的应用场景中不足以应对，后来才衍生出高可用，解决单点问题。mysql也不例外</p><h2 id="主备同步（主备一致）的流程"><a href="#主备同步（主备一致）的流程" class="headerlink" title="主备同步（主备一致）的流程"></a>主备同步（主备一致）的流程</h2><pre class="mermaid">flowchart LR开始((开始))-->undologmem[undolog<br/>mem]subgraph masterAundologmem-->datamem[data<br/>mem]datamem-->redologprepare[redolog<br/>prepare]redologprepare-->binlog[binlog]binlog-->redologcommit[redolog<br/>commit]binlog-->dump_thread[<font color='red'>dump_thread</font>]bg_thread[bg_thread]-->undologdisk[undolog<br/>disk]undologdisk-->datadisk[data<br/>disk]endredologcommit-->ack((ack))subgraph masterBdump_thread-->io_thread[<font color='red'>io_thread</font>]io_thread-->relaylog[relaylog]relaylog-->sql_thread[<font color='red'>sql_thread</font>]sql_thread-->data[data]end</pre><p>上图是主备切换的大致流程图，包括undolog，redolog，和binlog的大致流程（复习一下redolog和binlog的二阶段提交）。</p><p>从左到右的流程是：</p><ul><li>masterA主库接收到Client过来的更新请求，先记录undolog，然后写data缓存，记录redolog和binlog。</li><li>当binlog记录成功之后，在masterA主库中有一个线程dump_thread，这个dump_thread线程是用来维护和masterB备库的长链接。</li><li>在masterB备库中，也有一个io_thread线程，负责与主库建立长链接</li><li>masterB备库会向masterA主库请求同步binlog，备库会告诉主库需要同步的位置</li><li>masterA主库会按照masterB备库传过来的位置，读取binlog，发送给masterB备库</li><li>masterB备库，接收到masterA主库传过来的binlog，先暂存到本地文件，称为中转日志 relaylog</li><li>在备库B中有一个线程sql_thread，会负责解析中转日志relaylog，并执行</li></ul><h3 id="两种主备架构"><a href="#两种主备架构" class="headerlink" title="两种主备架构"></a>两种主备架构</h3><p>主备架构有两种，并且两种不同的架构，主备同步的流程有一些区别</p><h3 id="M-S结构的主备同步流程"><a href="#M-S结构的主备同步流程" class="headerlink" title="M-S结构的主备同步流程"></a>M-S结构的主备同步流程</h3><pre class="mermaid">flowchart TDclient-->mysqlAmysqlA-->mysqlB\nreadonly</pre><p>M-S结构如图所示，mysqlB是只读的，作为A的备库。</p><p>在主备切换的时候，会把client的请求转发到B</p><p>同时将mysqlA设置为readonly，设置为mysqlB的备库（修改主备关系）</p><p>当然在主备切换的时候，会有问题，比如把client的请求转发到B，但是此时B是readonly的，写不进去数据怎么办？</p><ul><li>其实这是主备切换必须要面对的问题，后面会介绍到：可用性优先切换，和可靠性优先切换 两个方案。</li><li>点此查看：<a href="#%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BC%98%E5%85%88%E7%AD%96%E7%95%A5">可靠性优先切换策略</a></li><li>点此查看：<a href="#%E5%8F%AF%E7%94%A8%E6%80%A7%E4%BC%98%E5%85%88%E7%AD%96%E7%95%A5">可用性优先切换策略</a></li></ul><h3 id="双M结构的主备同步流程"><a href="#双M结构的主备同步流程" class="headerlink" title="双M结构的主备同步流程"></a>双M结构的主备同步流程</h3><pre class="mermaid">flowchart TDclient-->mysqlAmysqlA-->mysqlB\nreadonlymysqlB\nreadonly-->mysqlA</pre><p>双 M 结构和 M-S 结构，其实区别只是多了一条线，即：mysql A 和 mysql B 之间总是互为主备关系。这样在切换的时候就不用再修改主备关系。</p><h4 id="循环复制问题"><a href="#循环复制问题" class="headerlink" title="循环复制问题"></a>循环复制问题</h4><p>但是双M结构会有一个问题，就是主备同步的时候：</p><ul><li>mysqlA把binlog发给mysqlB，mysqlB执行完binlog之后，又会生成binlog（通过参数log_slave_updates控制执行relaylog执行后是否产生binlog）</li><li>mysqlB再把binlog发给mysqlA，mysqlA又会执行…这就是双M结构的循环复制问题</li></ul><p>解决这个问题，也很简单，思考一下：</p><ul><li>方案一：在mysqlB执行完之后，不生成binlog不就完事了。</li><li>方案二：在mysqlB执行完之后，生成了binlog，但是不发给mysqlA不就完事了。</li><li>方案三：在mysqlB执行完之后，生成了binlog，发给mysqlA，但是mysqlA不执行不就完事了。</li></ul><p>在上面三个方案，其实都可以解决循环复制的问题，</p><ul><li>对于方案一，可以通过<code>log_slave_updates</code>这个参数控制relaylog执行后是否产生binlog，但是呢，我们建议打开备库的binlog。</li><li>对于方案二，mysql没采用这个方法，不知道为什么。</li><li>对于方案三，mysql采用的这个方式，mysql具体是怎么实现的呢？</li></ul><p>方案三的实现：</p><p>在mysql的binlog中，记录了一个叫做server id 的东西，如下是在ROW格式下的binlog（截取了部分）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>bin<span class="token operator">></span>mysqlbinlog.exe  <span class="token parameter variable">-vv</span> <span class="token string">"C:\ProgramData\MySQL\MySQL Server 8.0\Data\xxxxx-bin.000002"</span> --start-position<span class="token operator">=</span><span class="token number">5043</span> --stop-position<span class="token operator">=</span><span class="token number">5300</span><span class="token comment"># at 5043</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5122 CRC32 0x72f668e7         Anonymous_GTID  last_committed=17       sequence_number=18      rbr_only=yes    original_committed_timestamp=1667287271257812   immediate_commit_timestamp=1667287271257812  transaction_length=287</span>SET @@<span class="token environment constant">SESSION</span>.GTID_NEXT<span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，是有 <code>server id 1 </code>这个内容的，就表示当前这个binlog是在server&#x3D;1这个库上产生的。</p><p><code>server id</code>在mysql主备中，不同的实例必须是唯一的，如果它们相同，那么它们不能构成主备关系。</p><p>ROW格式的是有serverid的，那么statement格式的有吗？当然也有。也得用mysqlbinlog工具查看才行，都可以看到<code>server id</code>这个字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqlbinlog.exe  -vv &quot;C:\ProgramData\MySQL\MySQL Server 8.0\Data\xxxxx-bin.000002&quot; --start-position&#x3D;7829 --stop-position&#x3D;8126<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体的binlog的格式可以参考：<code>mysql的日志从入门到入库-&gt;重要的日志模块(redolog和binlog)-&gt;binlog的结构</code> 这一篇文章</p><ul><li>规定两个库的 server id 必须不同，如果相同，则它们之间不能设定为主备关系；</li><li>一个备库接到 binlog 并在重放的过程中，生成与原 binlog 的 server id 相同的新的 binlog；</li><li>每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。</li></ul><h3 id="公司生产使用的是M-S结构"><a href="#公司生产使用的是M-S结构" class="headerlink" title="公司生产使用的是M-S结构"></a>公司生产使用的是M-S结构</h3><img src="mysql的主备从入门到入土.assets/image-20221108181935875.png" alt="image-20221108181935875" style="zoom:80%;" /><p>上面两个是生产环境（prod）的主节点和从节点；下面两个是容灾环境（dr）的主节点和从节点。</p><h2 id="主备延迟和产生和避免"><a href="#主备延迟和产生和避免" class="headerlink" title="主备延迟和产生和避免"></a>主备延迟和产生和避免</h2><p>从主备同步可以看出来，备库从主库同步binlog，会有网络的问题，主库和备库机器性能问题等，都会导致备库执行binlog的速度比主库生成的速度慢，这就会导致主备延迟。</p><p>但是呢，只要主库生成的binlog都被备库正常接收了，并且正确执行了，那么主库和备库之间，数据就会保持：最终一致性。</p><p>但是仅仅有最终一致性，是不满足高可用的，因为还有之前说的主备延迟的问题。考虑这么一个场景：主库突然出问题了，要进行主备切换，然后现在备库还没有执行完主库的binlog，强行切换到备库，就会导致数据不一致的问题。</p><h3 id="什么是主备延迟"><a href="#什么是主备延迟" class="headerlink" title="什么是主备延迟"></a>什么是主备延迟</h3><p>备库从主库同步binlog，会有网络的问题，主库和备库机器性能问题等，都会导致备库执行binlog的速度比主库生成的速度慢，这就会导致主备延迟。</p><pre class="mermaid">flowchart LR主库A的binlog生成完成-T1-->备库B接收到binlog-T2-->备库B执行完成binlog-T3</pre><p>上面三个时间点，分别记为：T1，T2，T3，那么T3-T1就是主备延迟的时间。</p><p>在mysql中，可以通过在备库上执行<code>show slave status</code>命令，在执行结果中有一个<code>seconds_behind_master</code>字段，表示备库落后于主库多少秒。</p><h3 id="为什么会产生主备延迟"><a href="#为什么会产生主备延迟" class="headerlink" title="为什么会产生主备延迟"></a>为什么会产生主备延迟</h3><ul><li><p>备库的机器性能比主库差</p></li><li><p>备库压力大</p><ul><li>我们一般把备库设置为readonly，并提供一些只读的查询，这些只读的查询，一般会比较复杂，会对数据库造成压力</li><li>解决：可以采用一主多从的架构，分担读压力；还可以将数据分散到外部系统，比如大数据。</li></ul></li><li><p>大事务</p><ul><li>因为主库上必须等事务执行完成才会写入 binlog，再传给备库。所以，如果一个主库上的语句执行 10 分钟，那这个事务很可能就会导致从库延迟 10 分钟。</li><li>常见的大事务有哪些？<ul><li>大量DML：一次性地用 delete 语句删除太多数据。解决办法就是，少量多次删除。</li><li>大表DDL：使用gh-ost方案。</li></ul></li></ul></li><li><p>主库的事务是并发的，而备库是sql_thread单线程同步的</p><ul><li>备库的并行复制能力</li></ul></li></ul><h3 id="备库的并行复制能力"><a href="#备库的并行复制能力" class="headerlink" title="备库的并行复制能力"></a>备库的并行复制能力</h3><p>通过以上产生主备延迟的原因，基本都有对应的解决办法，都是mysql也为了减少主备延迟的时间，做了很多努力。</p><p>为什么要有多线程复制呢？这是因为单线程复制的能力全面低于多线程复制，对于更新压力较大的主库，备库是可能一直追不上主库的。从现象上看就是，备库上 seconds_behind_master 的值越来越大。</p><p>都做了什么努力呢？我们再来回顾主备同步的步骤。</p><pre class="mermaid">flowchart LR开始((开始))-->undologmem[undolog<br/>mem]subgraph masterAundologmem-->datamem[data<br/>mem]datamem-->redologprepare[redolog<br/>prepare]redologprepare-->binlog[binlog]binlog-->redologcommit[redolog<br/>commit]binlog-->dump_thread[dump_thread]bg_thread[bg_thread]-->undologdisk[undolog<br/>disk]undologdisk-->datadisk[data<br/>disk]endredologcommit-->ack((ack))subgraph masterBdump_thread-->io_thread[io_thread]io_thread-->relaylog[relaylog]relaylog-->sql_thread[sql_thread]sql_thread==>data[data]end</pre><p>这个图，可文章开始的图有一点点细微的差别，这个细微的差别，在于最后一步：sql_thread-&gt;data 这一步的线，比之前的图，粗了一点点。为什么呢？</p><p>因为mysql对这一步骤做了优化，在通过sql_thread执行relaylog的时候，是通过多线程执行的。</p><p>使用了多线程，就可以提高备库的能力。减少主备延迟的时间。</p><h4 id="并行复制的基本原理"><a href="#并行复制的基本原理" class="headerlink" title="并行复制的基本原理"></a>并行复制的基本原理</h4><p>从单线程复制到最新版本的多线程复制，中间的演化经历了好几个版本。接下来，我就跟你说说 MySQL 多线程复制的演进过程。</p><p>其实说到底，所有的多线程复制机制，都是要把上图中只有一个线程的 sql_thread，拆成多个线程：</p><pre class="mermaid">flowchart LRrelaylog-->coordinatorsubgraph sql_threadcoordinator-->worker-1coordinator-->worker-2coordinator-->worker-3coordinator-->点点点[..........]coordinator-->worker-nendworker-1-->dataworker-2-->dataworker-3-->data点点点-->dataworker-n-->data</pre><p>其中的<code>coordinator</code>和<code>worker</code>就是原来的<code>sql_thread</code>;</p><ul><li><code>coordinator</code>复制读取和分发<code>relaylog</code></li><li><code>worker</code>线程是真正来执行<code>relaylog</code>的</li></ul><p>worker线程有多少个？</p><ul><li>是通过<code>slave_parallel_workers</code>参数控制的，一般32C的机器，建议设置为8-16之间，要留一些用于读查询</li><li>对于单机的mysql，默认是0</li><li>公司的生产环境配置的是 16</li></ul><h4 id="并行复制面临的问题"><a href="#并行复制面临的问题" class="headerlink" title="并行复制面临的问题"></a>并行复制面临的问题</h4><p>了解了并行复制的基本原理，接下来思考几个问题？</p><p><strong><code>coordinator</code>是怎么分发<code>relaylog</code>给worker线程的？能不能按照轮训的方式，也就是事务1的日志分为worker1，事务2的日志分给worker2？</strong></p><ul><li>不能</li><li>因为不同的事务可能会操作同一行，由于CPU的调度问题，很有可能导致事务2的日志先执行，事务1的日志后执行，导致数据不一致的问题。</li></ul><p><strong><code>coordinator</code>能不能把一个事务的不同的更新语句的binlog分给多个worker执行？</strong></p><ul><li>不能</li><li>一个事务的binlog是完整的，分开执行，很有可能也会出现数据不一致的情况。</li></ul><p>所以，对<code>coordinator</code>的分发，就提出了两个最基本的要求</p><ul><li>要求更新同一行的不同事务的binlog，必须被分发到同一个 worker 中。</li><li>要求同一个事务的binlog不能被分开，必须被分发到同一个 worker 中。</li></ul><h4 id="MySQL-5-5-版本的并行复制策略（不支持）"><a href="#MySQL-5-5-版本的并行复制策略（不支持）" class="headerlink" title="MySQL 5.5 版本的并行复制策略（不支持）"></a>MySQL 5.5 版本的并行复制策略（不支持）</h4><p>官方 MySQL 5.5 版本是不支持并行复制的。</p><p>但是，在 2012 年的时候，我自己服务的业务出现了严重的主备延迟，原因就是备库只有单线程复制。</p><p>然后，我就先后写了两个版本的并行策略。即按表分发策略和按行分发策略，以帮助你理解 MySQL 官方版本并行复制策略的迭代。</p><h5 id="按表分发策略"><a href="#按表分发策略" class="headerlink" title="按表分发策略"></a>按表分发策略</h5><p><strong>基本原理</strong>：如果两个事务操作的是不同的表，那么这两个事务就可以并行处理；如果一个事务中操作了多张表，那么把这些表当做一张表。</p><p><strong>实现细节</strong>：</p><ul><li>每一个worker线程，维护一个hashmap，key是【库名+表名】，value是待执行的事务日志的个数<ul><li>当<code>coordinator</code>把一个事务分给worker执行的时候，value+1</li><li>当worker把某一个事务执行完成的时候，value-1</li></ul></li><li>当coordinator读取下一个事务的日志之后，先获取到这个事务所操作的【库名+表名】（可能是一张表，也可能是多张表）</li><li>如果是一张表<ul><li>遍历所有的worker</li><li>判断当前worker中的hashmap的key，是不是包含这张表</li><li>如果包含：则把这个事务，交给这个worker执行</li><li>如果不包含，继续遍历下一个worker</li><li>如果所有的worker都不包含，则把这个事务交给负载最低的worker执行，并将当前的【库名+表名】添加到这个worker的hashmap中</li></ul></li><li>如果是多张表<ul><li>遍历所有的worker</li><li>如果这多张表，是由一个worker执行的，则把这个事务，交给这个worker执行</li><li>如果这多张表，目前没有worker执行，则把这个事务，交给负载最低的worker执行</li><li>如果这多张表，是由多个woker执行的，则<code>coordinator</code>进入等待，并且不停的进行遍历worker进行判断</li></ul></li></ul><p><strong>缺点</strong>：这个按表分发的方案，在多个表负载均匀的场景里应用效果很好。但是，如果碰到热点表，比如所有的更新事务都会涉及到某一个表的时候，所有事务都会被分配到同一个 worker 中，就变成单线程复制了。</p><h5 id="按行分发策略"><a href="#按行分发策略" class="headerlink" title="按行分发策略"></a>按行分发策略</h5><p>要解决热点表的并行复制问题，就需要一个按行并行复制的方案。</p><p><strong>基本原理</strong>：如果两个事务没有更新相同的行，它们在备库上可以并行执行。显然，这个模式要求 binlog 格式必须是 row。因为statement记录的是sql语句，无法判断更新了哪一行？</p><p>实现细节：</p><ul><li>每一个worker线程，维护一个hashmap，key是【库名+表名+主键值+唯一索引的值】，value是待执行的事务日志的个数</li><li>剩下的步骤，同<strong>按表分发策略</strong></li></ul><p><strong>缺点</strong>：对比按表分发和按行分发这两个方案的话，按行分发策略的并行度更高。不过，如果是要操作很多行的大事务的话，按行分发的策略有两个问题：</p><ul><li>耗费内存。比如一个语句要删除 100 万行数据，这时候 hash 表就要记录 100 万个项。</li><li>耗费 CPU。解析 binlog，然后计算 hash 值，对于大事务，这个成本还是很高的。</li></ul><p><strong>退化</strong>：因为缺点的存在，所以在实现这个策略的时候会设置一个阈值，单个事务如果超过设置的行数阈值（比如，如果单个事务更新的行数超过 10 万行），就暂时退化为单线程模式，退化过程的逻辑大概是这样的：</p><ul><li>coordinator 暂时先 hold 住这个事务；</li><li>等待所有 worker 都执行完成，变成空队列；</li><li>coordinator 直接执行这个事务；</li><li>恢复并行模式。</li></ul><h4 id="MySQL-5-6-版本的并行复制策略"><a href="#MySQL-5-6-版本的并行复制策略" class="headerlink" title="MySQL 5.6 版本的并行复制策略"></a>MySQL 5.6 版本的并行复制策略</h4><p>官方 MySQL5.6 版本，支持了并行复制，只是支持的粒度是<strong>按库并行</strong>。</p><p>具体的实现方案和按表分发以及按行分拨的是一样的，只不过hashmap中的key是库名了。</p><h4 id="MariaDB-的并行复制策略"><a href="#MariaDB-的并行复制策略" class="headerlink" title="MariaDB 的并行复制策略"></a>MariaDB 的并行复制策略</h4><p><strong>基本原理</strong>：利用了组提交的特性</p><ul><li>能在同一个组中提交的事务，一定不会更新同一行（因为innodb在更新某一行的时候，会先获取行锁，上一个事务还没有commit的时候，行锁是不会释放的）</li><li>主库能并行执行的，备库一定也可以并行执行。</li></ul><p><strong>实现细节</strong>：</p><ul><li>在一组里面提交的事务，有一个共同的commit_id</li><li>coordinator每次从relaylog中获取一批事务（具有相同的commit_id）</li><li>然后把这一批直接分给worker并发执行</li><li>等待worker执行完之后，coordinator在获取下一批事务</li></ul><p><strong>缺点</strong>：虽然是并发了，但是并发度不够，不够在哪里呢？思考一下，在主库上，一组事务的binlog在commit的时候，下一组binlog可能已经开始write了，主库的效率是很高的。而在备库上，coordinator获取一批事务，必须等待这一批执行完，才能执行下一批。效率相比较于主库，就比较慢了。</p><h4 id="MySQL-5-7-的并行复制策略"><a href="#MySQL-5-7-的并行复制策略" class="headerlink" title="MySQL 5.7 的并行复制策略"></a>MySQL 5.7 的并行复制策略</h4><p>在MariaDB 的并行复制策略出现之后，mysql5.7也出了一个类似的，但是呢，也并没有舍弃mysql5.6中的按库分发策略。mysql5.7提供了一个参数</p><ul><li>slave-parallel-type</li><li>配置为 DATABASE，表示使用 MySQL 5.6 版本的按库并行策略；</li><li>配置为 LOGICAL_CLOCK，表示的就是类似 MariaDB 的策略（不过是mysql优化后的）。</li></ul><p><strong>mysql对 MariaDB 的策略进行了优化，优化了什么呢？</strong></p><p>在回顾一下MariaDB的并行复制策略的核心是：所有commit的事务，可以并行执行。因为commit的事务一定是不会有锁冲突的。</p><p>那么在思考一下mysql的更新流程：</p><pre class="mermaid">flowchart LR开始((开始))-->undologmem[undolog<br/>mem]undologmem-->datamem[data<br/>mem]datamem-->redologprepare[redolog<br/>prepare]redologprepare-->binlog[binlog]binlog-->redologcommit[redolog<br/>commit]</pre><p>可以发现，其实在记录redolog（prepare）的时候，就已经通过了锁校验。具体的关于锁，可以看：mysql的锁从入门到入土</p><p>优化点：只要是通过了redolog（prepare）阶段后的一组事务的binlog（组提交），传到备库的时候，这组事务都是可以并行执行的</p><h4 id="MySQL-5-7-22-的并行复制策略"><a href="#MySQL-5-7-22-的并行复制策略" class="headerlink" title="MySQL 5.7.22 的并行复制策略"></a>MySQL 5.7.22 的并行复制策略</h4><p>公司生产用的是mysql版本是5.7.19</p><p>在 2018 年 4 月份发布的 MySQL 5.7.22 版本里，MySQL 增加了一个新的并行复制策略，基于 WRITESET 的并行复制。</p><p>相应地，新增了一个参数 <code>binlog-transaction-dependency-tracking</code>，用来控制是否启用这个新策略。这个参数的可选值有以下三种。</p><ul><li><code>COMMIT_ORDER</code>表示的就是前面介绍的，根据同时进入 prepare 和 commit 来判断是否可以并行的策略。</li><li><code>WRITESET</code>表示的是对于事务涉及更新的每一行，计算出这一行的 hash 值，组成集合 writeset。如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行。</li><li><code>WRITESET_SESSION</code>是在 WRITESET 的基础上多了一个约束，即在主库上同一个线程先后执行的两个事务，在备库执行的时候，要保证相同的先后顺序。</li></ul><p><strong>实现细节</strong>：</p><ul><li>msyql对于事务涉及更新的每一行，计算出这一行的 hash 值（是通过“库名 + 表名 + 索引名 + 值”计算出来的），组成集合 writeset。</li><li>把这个writeset集合写到binlog中（写在binlog哪里的，不知道，怎么从binlog中获取的，也不知道，这里没扣细节）</li><li>备库执行的时候，直接获取一批事务，获取这一批事务的writeset，和当前正在执行的事务的writeset，判断是否有交集。</li><li>没有交集，就可以并行。</li></ul><p><strong>优点</strong>：</p><ul><li>获取writeset的时候，不需要计算，也不需要解析binlog，就可以直接拿到，省CPU</li><li>不需要把整个事务的 binlog 都扫一遍才能决定分发到哪个 worker，更省内存；</li><li>由于备库的分发策略不依赖于 binlog 内容，所以 binlog 是 statement 格式也是可以的。</li></ul><p><strong>缺点</strong>：</p><ul><li>对于“表上没主键”和“外键约束”的场景，WRITESET 策略也是没法并行的，也会暂时退化为单线程模型。</li></ul><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><p>如果主库都是单线程压力模式，在从库追主库的过程中，binlog-transaction-dependency-tracking 应该选用什么参数？</p><ul><li><p>首先binlog-transaction-dependency-tracking能选哪些参数？</p><ul><li>ORDER_COMMIT</li><li>WRITE_SET</li><li>WRITE_SET_SESSION</li></ul></li><li><p>其次看这三个参数分别对应了什么？</p><ul><li>ORDER_COMMIT：主要是处于redolog（prepare）状态之后的，组提交的事务，可以并行复制；</li><li>WRITE_SET_SESSION：同一个会话中的事务的writeset，即使没有交集，也要顺序执行</li><li>WRITE_SET：同一个会话中的事务的writeset，只要没有交集，就可以并行</li></ul></li><li><p>在分析题目</p><ul><li>单线程：所以就没有组提交了，因为都是一个一个提交的。</li><li>单线程：所以是一个会话</li></ul></li><li><p>结合来看：</p><ul><li>没有组提交，就不能用ORDER_COMMIT，备库会单线程复制。</li><li>是一个会话，所以就不能用WRITE_SET_SESSION，因为也会顺序执行，顺序执行，就成了单线程复制。</li></ul></li></ul><h2 id="主备切换（高可用）"><a href="#主备切换（高可用）" class="headerlink" title="主备切换（高可用）"></a>主备切换（高可用）</h2><h3 id="为什么要进行主备切换"><a href="#为什么要进行主备切换" class="headerlink" title="为什么要进行主备切换"></a>为什么要进行主备切换</h3><p>主备切换有两种场景，一种是主动切换，一种是被动切换。</p><ul><li>主动切换：人为的发起</li><li>被动切换：一般是因为主库出问题了，由 HA 系统发起的。</li></ul><p>这也就引出了我们今天要讨论的问题：怎么判断一个主库出问题了？</p><h3 id="怎么判断库有问题"><a href="#怎么判断库有问题" class="headerlink" title="怎么判断库有问题"></a>怎么判断库有问题</h3><h4 id="select-1"><a href="#select-1" class="headerlink" title="select 1"></a>select 1</h4><ul><li><p>只能判断mysql的进程是否存在，无法判断数据库是否可用</p></li><li><p>验证</p><ul><li><p>设置<code>innodb_thread_concurrency=3</code>,然后开启4个session，执行下面的语句</p></li><li><table><thead><tr><th>session-1</th><th>session-2</th><th>session-3</th><th>session-4</th></tr></thead><tbody><tr><td>select sleep(1000) from t;</td><td>select sleep(1000) from t;</td><td>select sleep(1000) from t;</td><td></td></tr><tr><td></td><td></td><td></td><td>select 1; (Query OK)<br/>select * from t;(<font color='red'>blocked</font>)</td></tr></tbody></table></li><li><p>可以看到select 1会成功，但是查询表会阻塞；</p></li></ul></li><li><p><code>innodb_thread_concurrency</code>表示限制innoDB的并发执行线程数，是指通知运行的线程有多少个。</p></li><li><p>并发连接数对系统的运行没有多大的影响，有影响的是并发执行数，才会大量占用CPU；具体的可以看：mysql的性能调优从入门到入土</p></li></ul><h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><p>既然<code>select 1</code>不行，那我用查询语句总可以吧。</p><ul><li>新建一张表，比如叫：health_check；</li><li>定期执行：select * from health_check;</li><li>能执行成功，说明数据库正常</li><li>执行不成功，或者超时没返回结果，数据库不正常</li></ul><p>但是这个方案，也是不行的，因为当<strong>数据库磁盘满了</strong>的时候，此时数据库不能写入，但是可以正常提供读服务；</p><h4 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h4><p>既然查询语句，那我用更新语句总可以吧。</p><p>常用的做法是：</p><ul><li>新建一张表，比如叫：health_check</li><li>定期执行：update health_check set check_time&#x3D; now();</li></ul><p>这么一看，似乎问题不大，但是注意：主库定期检测了，备库也需要定期检测呀，但是由于主备同步的存在，会导致数据检测有问题，所以要优化一下</p><ul><li>在health_check表中，加一列，表示当前数据库的server id;</li><li>每次检查的时候，只更新自己的server id，就没问题了(因为主备的server id是不同的)</li><li>update health_check set check_time&#x3D;now() where server_id &#x3D; ‘xxxx’;</li></ul><p>但是呢，这个方案，也是不行的，当数据库的磁盘IO性能瓶颈的时候，比如IO使用率已经100%了，注意IO使用率100%并不是说系统不可用，因为此时IO还在继续工作呢，只不过IO使用率100%了，会导致后续过来的更新操作，排队等待而已，对client来说，就是我的sql执行的好慢呀。</p><p>那么IO使用率100%了，对于我们的检测语句来说，因为检测语句占用的IO资源非常非常小，所以系统可能会安排执行，这样的话，我们的检测语句正常返回了。但是此时数据库已经达到瓶颈了。</p><h4 id="外部判断的弊端"><a href="#外部判断的弊端" class="headerlink" title="外部判断的弊端"></a>外部判断的弊端</h4><p>以上三种判断方法都是外部判断的方式，以上的三种检测方法都有各自的使用场景，但是他们具备同样的一个弊端：</p><ul><li>判断慢</li></ul><p>什么是判断慢，就是系统已经出问题了，但是我们的检测不及时，如果定时检查是10分钟一次，那就要等10分钟之后才能发现问题，而且上面三种方式，还不一定能够覆盖所有的异常场景，所以外部检测的方式，一般只是用来辅助，并不能完全靠它。</p><h4 id="内部判断"><a href="#内部判断" class="headerlink" title="内部判断"></a>内部判断</h4><p>MySQL 5.6 版本以后提供的 performance_schema 库，里面记录了很多数据库运行时候的详细统计信息。</p><p>在mysql性能调优从土门到入土中，也介绍过 performance_schema库</p><p>具体的这里不介绍了，只需要知道这个库中记录的很多超级详细的内容，完全可以实时的检测mysql的运行状态。</p><p>但是还是有需要注意的地方</p><ul><li>如果打开所有的 performance_schema 项，性能大概会下降 10% 左右。所以，我建议你只打开自己需要的项进行统计。</li></ul><h3 id="两种主备架构-1"><a href="#两种主备架构-1" class="headerlink" title="两种主备架构"></a>两种主备架构</h3><pre class="mermaid">flowchart TDsubgraph M-S结构clientms[client]-->mysqlAms[mysqlA]mysqlAms-->mysqlBms[mysqlB<br/>readonly]endsubgraph 双M结构clientmm[client]-->mysqlAmm[mysqlA]mysqlAmm-->mysqlBmm[mysqlB<br/>readonly]mysqlBmm-->mysqlAmmend</pre><p>由于主备延迟的存在，所以在主备切换的时候，就相应的有不同的策略。</p><h3 id="可靠性优先切换策略"><a href="#可靠性优先切换策略" class="headerlink" title="可靠性优先切换策略"></a>可靠性优先切换策略</h3><p>下面的切换流程，是在<code>双M结构</code>的流程下进行的操作，和<code>M-S结构</code>的区别在于：不用修改主备关系了。</p><ul><li>1、判断备库B上的seconds_behind_master，如果小于某个值（比如5秒），继续下一步，否则继续当前步骤</li><li>2、将主库A设置为readonly</li><li>3、判断备库B上的seconds_behind_master，直到它变为0为止</li><li>4、将备库B设置为可读写</li><li>5、将业务请求转发到备库B</li></ul><p>在上面的步骤中，我们看到，系统是有不可用时间的。此时主库A和备库B都处于只读状态。</p><h3 id="可用性优先切换策略"><a href="#可用性优先切换策略" class="headerlink" title="可用性优先切换策略"></a>可用性优先切换策略</h3><p>下面的切换流程，是在<code>双M结构</code>的流程下进行的操作，和<code>M-S结构</code>的区别在于：不用修改主备关系了。</p><ul><li>1、将备库B设置为可读写</li><li>2、将业务请求转发到备库B，此时原来的主库A就不会有业务请求了</li><li>3、判断备库B上的seconds_behind_master，直到它变为0为止</li><li>4、将主库A设置为readonly</li></ul><p>在上面的步骤中，系统可能会出现数据不一致的情况的，就是A产生的binlog，B还没有执行的时候，就接收到了新的请求，然后主库A的binlog此时传到了备库B上，B在执行binlog，就会导致数据不一致的场景。</p><h3 id="公司生产使用的是可靠性优先策略"><a href="#公司生产使用的是可靠性优先策略" class="headerlink" title="公司生产使用的是可靠性优先策略"></a>公司生产使用的是可靠性优先策略</h3><p>公司使用的是M-S结构，并且使用的是可靠性优先切换策略。</p><p>之前进行过主备切换，DBA通知需要停应用才行的。</p><img src="mysql的主备从入门到入土.assets/image-20221110201120695.png" alt="image-20221110201120695" style="zoom:67%;" /><p>而且主备切换，一般是由专门的HA系统操作的，不用人为的介入，以下的公司的ha系统</p><img src="mysql的主备从入门到入土.assets/image-20221110195355203.png" alt="image-20221110195355203" style="zoom: 80%;" /><h2 id="主从切换"><a href="#主从切换" class="headerlink" title="主从切换"></a>主从切换</h2><h3 id="什么是一主多从"><a href="#什么是一主多从" class="headerlink" title="什么是一主多从"></a>什么是一主多从</h3><pre class="mermaid">flowchart TDclient-->|write|mysqlAmysqlA-.->mysqlA1mysqlA1-.->mysqlAclient-->|read|mysqlBclient-->|read|mysqlCclient-->|read|mysqlDmysqlA-.->mysqlBmysqlA-.->mysqlCmysqlA-.->mysqlD</pre><p>mysqlA是主库</p><p>mysqlA1是备库（双M结构）</p><p>mysqlB，C，D是从库，从主库mysqlA进行同步，并且B，C，D提供只读能力</p><p>以上的架构就是一主多从架构。</p><h3 id="一主多从有什么问题"><a href="#一主多从有什么问题" class="headerlink" title="一主多从有什么问题"></a>一主多从有什么问题</h3><p>在系统正常运行的时候，没什么问题，主要考虑异常的情况：</p><ul><li>当主库mysqlA突然宕机了，或者无法提供服务了，怎么办？</li><li>那肯定要进行主备切换了，将主库切换到备库mysqlA1（关于主备切换，上面说过了，这种被动切换的场景，就没法保证数据可靠性了，只能强制切换到备库上）</li><li>但是主备切换完成之后，还有从库呢？怎么办呢？</li><li>之前从库是从<code>主库mysqlA</code>进行同步的，现在从库必须要连接<code>新主库mysqlA1</code>了。（而这一步，就是主从切换的难点）</li></ul><h3 id="一主多从的切换策略"><a href="#一主多从的切换策略" class="headerlink" title="一主多从的切换策略"></a>一主多从的切换策略</h3><p>一起看看一个切换系统会怎么完成一主多从的主备切换过程。</p><p>一主多从一般有两种切换办法</p><ul><li>基于位点的同步</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span>$host_name MASTER_PORT<span class="token operator">=</span>$port MASTER_USER<span class="token operator">=</span>$user_name MASTER_PASSWORD<span class="token operator">=</span>$password MASTER_LOG_FILE<span class="token operator">=</span>$master_log_name MASTER_LOG_POS<span class="token operator">=</span>$master_log_pos  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基于GTID的切换</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span>$host_name MASTER_PORT<span class="token operator">=</span>$port MASTER_USER<span class="token operator">=</span>$user_name MASTER_PASSWORD<span class="token operator">=</span>$password master_auto_position<span class="token operator">=</span><span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数解释</li></ul><table><thead><tr><th>字段</th><th>解释</th><th>备注</th></tr></thead><tbody><tr><td>MASTER_HOST</td><td>新主库的ip</td><td></td></tr><tr><td>MASTER_PORT</td><td>新主库的端口</td><td></td></tr><tr><td>MASTER_USER</td><td>新主库的用户名</td><td></td></tr><tr><td>MASTER_PASSWORD</td><td>新主库的密码</td><td></td></tr><tr><td>MASTER_LOG_FILE</td><td>指定从哪个binlog文件进行同步</td><td>基于位点的同步才有</td></tr><tr><td>MASTER_LOG_POS</td><td>指定从这个binlog文件的哪个位置开始同步</td><td>基于位点的同步才有</td></tr><tr><td>master_auto_position</td><td>表示使用GTID协议，使用GTID进行同步</td><td>基于GTID的同步才有，表示使用GTID协议</td></tr></tbody></table><h4 id="基于位点的切换"><a href="#基于位点的切换" class="headerlink" title="基于位点的切换"></a>基于位点的切换</h4><h5 id="什么是位点"><a href="#什么是位点" class="headerlink" title="什么是位点"></a>什么是位点</h5><p>简单地说，就是一条sql语句在binlog中的位置，叫做位点。</p><p>在《mysql日志从入门到入土》一文中，介绍了三种格式的binlog，每一种格式的binlog都会有一个Pos的列，下面以row格式的binlog为例，看一下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxx-bin.000002'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> Log_name       <span class="token operator">|</span> Pos  <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5043</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5122</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span> <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5122</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5203</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5203</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5251</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> <span class="token punctuation">(</span>zs<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                 <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5251</span> <span class="token operator">|</span> Delete_rows    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5299</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> flags: STMT_END_F      <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5299</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5330</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=1924 */</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token number">74</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中Pos就是位点。</p><h5 id="基于位点的同步"><a href="#基于位点的同步" class="headerlink" title="基于位点的同步"></a>基于位点的同步</h5><p>上面已经列出了，使用位点同步的命令，这里在展示一遍</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span>$host_name MASTER_PORT<span class="token operator">=</span>$port MASTER_USER<span class="token operator">=</span>$user_name MASTER_PASSWORD<span class="token operator">=</span>$password MASTER_LOG_FILE<span class="token operator">=</span>$master_log_name MASTER_LOG_POS<span class="token operator">=</span>$master_log_pos  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>MASTER_LOG_FILE</code>指定从哪个binlog文件进行同步，<code>MASTER_LOG_POS</code>指定从这个binlog文件的哪个位置开始同步</p><h5 id="怎么获取位点"><a href="#怎么获取位点" class="headerlink" title="怎么获取位点"></a>怎么获取位点</h5><p>那么在主从切换的时候，怎么获取位点呢？</p><p>考虑到切换过程中不能丢数据，所以我们找位点的时候，总是要找一个“<strong>稍微往前</strong>”的，然后再通过判断跳过那些在从库 B 上已经执行过的事务</p><ul><li><p>在新主库A1上：等待新主库A1把系统中的relay log全部执行完，为什么新主库A1还会有relay log?(因为新主库之前只是老主库A的一个备库，所以也有relay log)</p></li><li><p>在新主库A1上：执行 show master status 得到当前 新主库A1上最新的 binlog File 和 binlog Position；</p><ul><li>&#96;&#96;&#96;sql<br>mysql&gt; show master status;<br>+—————–+———-+————–+——————+——————-+<br>| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+—————–+———-+————–+——————+——————-+<br>| xxxx-bin.000002 |     8156 |              |                  |                   |<br>+—————–+———-+————–+——————+——————-+<br>1 row in set (0.00 sec)<pre class="line-numbers language-none"><code class="language-none">- 取老主库A故障的时刻 T；- 用 mysqlbinlog 工具解析 新主库A1 的 binlog File，得到 T 时刻的位点。  - &#96;&#96;&#96;sql    mysqlbinlog File --start-datetime&#x3D;T --stop-datetime&#x3D;T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>假设我的崩溃时间是：2022-11-08 17:42:33</p><ul><li>&#96;&#96;&#96;sql<br>C:\Program Files\MySQL\MySQL Server 8.0\bin&gt;mysqlbinlog.exe  -vv “C:\ProgramData\MySQL\MySQL Server 8.0\Data\xxxx-bin.000002” –start-datetime&#x3D;”2022-11-08 17:42:33” –stop-datetime&#x3D;”2022-11-08 17:42:33”<h1 id="The-proper-term-is-pseudo-replica-mode-but-we-use-this-compatibility-alias"><a href="#The-proper-term-is-pseudo-replica-mode-but-we-use-this-compatibility-alias" class="headerlink" title="The proper term is pseudo_replica_mode, but we use this compatibility alias"></a>The proper term is pseudo_replica_mode, but we use this compatibility alias</h1><h1 id="to-make-the-statement-usable-on-server-versions-8-0-24-and-older"><a href="#to-make-the-statement-usable-on-server-versions-8-0-24-and-older" class="headerlink" title="to make the statement usable on server versions 8.0.24 and older."></a>to make the statement usable on server versions 8.0.24 and older.</h1>&#x2F;<em>!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;1</em>&#x2F;;<br>&#x2F;<em>!50003 SET @OLD_COMPLETION_TYPE&#x3D;@@COMPLETION_TYPE,COMPLETION_TYPE&#x3D;0</em>&#x2F;;<br>DELIMITER &#x2F;<em>!</em>&#x2F;;<h1 id="at-4"><a href="#at-4" class="headerlink" title="at 4"></a>at 4</h1>#221101 14:12:06 server id 1  end_log_pos 125 CRC32 0xe443eab6  Start: binlog v 4, server v 8.0.26 created 221101 14:12:06 at startup<h1 id="Warning-this-binlog-is-either-in-use-or-was-not-closed-properly"><a href="#Warning-this-binlog-is-either-in-use-or-was-not-closed-properly" class="headerlink" title="Warning: this binlog is either in use or was not closed properly."></a>Warning: this binlog is either in use or was not closed properly.</h1>ROLLBACK&#x2F;<em>!</em>&#x2F;;<br>BINLOG ‘<br>trhgYw8BAAAAeQAAAH0AAAABAAQAOC4wLjI2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br>AAAAAAAAAAAAAAAAAAC2uGBjEwANAAgAAAAABAAEAAAAYQAEGggAAAAICAgCAAAACgoKKioAEjQA<br>CigBtupD5A&#x3D;&#x3D;<br>‘&#x2F;<em>!</em>&#x2F;;<br>SET @@SESSION.GTID_NEXT&#x3D; ‘AUTOMATIC’ &#x2F;* added by mysqlbinlog <em>&#x2F; &#x2F;</em>!*&#x2F;;<br>DELIMITER ;<h1 id="End-of-log-file"><a href="#End-of-log-file" class="headerlink" title="End of log file"></a>End of log file</h1>&#x2F;<em>!50003 SET COMPLETION_TYPE&#x3D;@OLD_COMPLETION_TYPE</em>&#x2F;;<br>&#x2F;<em>!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;0</em>&#x2F;;<pre class="line-numbers language-none"><code class="language-none">- 其中&#96;end_log_pos 125&#96;这个125就是时刻T崩溃时候的写入的位点。我们使用这个位点就可以了- 那么最终，就可以确定我们从库的同步命令就是下面这样  - &#96;&#96;&#96;sql    CHANGE MASTER TO     MASTER_HOST&#x3D;$host_name     MASTER_PORT&#x3D;$port     MASTER_USER&#x3D;$user_name     MASTER_PASSWORD&#x3D;$password     MASTER_LOG_FILE&#x3D;xxxx-bin.000002    MASTER_LOG_POS&#x3D;125<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="基于位点同步的问题"><a href="#基于位点同步的问题" class="headerlink" title="基于位点同步的问题"></a>基于位点同步的问题</h5><p>但是我们通过 mysqlbinlog 这个命令获取到的 位点 这个值，并不准确。</p><p>为什么呢？当老主库A在崩溃前，insert了一条语句，并把这个语句的binlog发给了新主库A1和某一个从库C，然后崩溃了，此时从库C上是有这条记录的，但是我们获取新主库A1的同步位点的时候，获取的位点肯定是在这个insert语句之前的。因为其他从库还需要同步这个insert记录呢。</p><p>但是我们的从库C，已经有这条记录的，在同步一次，就会报错：主键冲突。</p><p>所以，基于位点的同步一般需要在从库上跳过错误：</p><ul><li><p>一种做法是：跳过一个事务。跳过命令的写法是：</p><ul><li>&#96;&#96;&#96;sql<br>set global sql_slave_skip_counter&#x3D;1;<br>start slave;<pre class="line-numbers language-none"><code class="language-none">- 另外一种方式是：通过设置 slave_skip_errors 参数，忽略指定的错误。#### 基于 GTID 的切换##### 什么是GTID？GTID 的全称是 Global Transaction Identifier，也就是全局事务 ID，是一个事务在**提交**的时候生成的，是这个事务的唯一标识。它由两部分组成，格式是：&#96;&#96;&#96;sqlGTID&#x3D;server_uuid:gno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>其中：</p><ul><li>server_uuid 是一个实例第一次启动时<strong>自动生成</strong>的，是一个全局唯一的值；不是server_id哦</li><li>gno 是一个整数，初始值是 1，每次提交事务的时候分配给这个事务，并加 1。</li><li>在官网上：GTID&#x3D;source_id:transaction_id；这里只是为了更容易理解，才写成了：server_uuid:gno</li></ul><h5 id="启动GTID模式"><a href="#启动GTID模式" class="headerlink" title="启动GTID模式"></a>启动GTID模式</h5><p>GTID模式默认是关闭的，在公司的环境中，是开启GTID模式的</p><p>在mysql还没有启动的时候</p><ul><li>在启动mysql实例的时候，手动设置：<code>gtid_mode=on</code>和<code>enforce_gtid_consistency=on</code></li></ul><p>在mysql已经启动的时候</p><ul><li>设置：<code>gtid_mode=on</code></li><li>设置：<code>enforce_gtid_consistency=on</code></li><li>下面展示了具体的开启步骤</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'gtid_mode'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> gtid_mode     <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'enforce_gtid_consistency'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token operator">|</span> enforce_gtid_consistency <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> gtid_mode <span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span>ERROR <span class="token number">1229</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Variable <span class="token string">'gtid_mode'</span> <span class="token operator">is</span> a <span class="token keyword">GLOBAL</span> variable <span class="token operator">and</span> should be <span class="token keyword">set</span> <span class="token keyword">with</span> <span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> gtid_mode<span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span>ERROR <span class="token number">1788</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: The <span class="token keyword">value</span> <span class="token keyword">of</span> @<span class="token variable">@GLOBAL.GTID_MODE</span> can only be changed one step at a <span class="token keyword">time</span>: <span class="token keyword">OFF</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">></span> OFF_PERMISSIVE <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">></span> ON_PERMISSIVE <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">ON</span><span class="token punctuation">.</span> Also note that this <span class="token keyword">value</span> must be stepped up <span class="token operator">or</span> down simultaneously <span class="token keyword">on</span> <span class="token keyword">all</span> servers<span class="token punctuation">.</span> See the Manual <span class="token keyword">for</span> instructions<span class="token punctuation">.</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> gtid_mode<span class="token operator">=</span><span class="token string">'OFF_PERMISSIVE'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.11</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> gtid_mode<span class="token operator">=</span><span class="token string">'ON_PERMISSIVE'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> gtid_mode<span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span>ERROR <span class="token number">3111</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: <span class="token keyword">SET</span> @<span class="token variable">@GLOBAL.GTID_MODE</span> <span class="token operator">=</span> <span class="token keyword">ON</span> <span class="token operator">is</span> <span class="token operator">not</span> allowed because ENFORCE_GTID_CONSISTENCY <span class="token operator">is</span> <span class="token operator">not</span> <span class="token keyword">ON</span><span class="token punctuation">.</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> enforce_gtid_consistency<span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> gtid_mode<span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'gtid_mode'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> gtid_mode     <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'enforce_gtid_consistency'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token operator">|</span> enforce_gtid_consistency <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="怎么查看GTID"><a href="#怎么查看GTID" class="headerlink" title="怎么查看GTID"></a>怎么查看GTID</h5><p>GTID是存在binlog中的，所以怎么查看binlog的，就怎么查看GTID</p><p>我们知道GTID默认是关闭的，所以下面展示，在关闭GTID模式下，和开启GTID模式下，分别是什么样的</p><p>关闭GTID模式下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxx-bin.000002'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> Log_name       <span class="token operator">|</span> Pos  <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5043</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5122</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span> <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5122</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5203</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5203</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5251</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> <span class="token punctuation">(</span>zs<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                 <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5251</span> <span class="token operator">|</span> Delete_rows    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5299</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> flags: STMT_END_F      <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5299</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5330</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=1924 */</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token number">74</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启GTID模式下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxx-bin.000005'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+</span><span class="token operator">|</span> Log_name       <span class="token operator">|</span> Pos <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>   <span class="token number">4</span> <span class="token operator">|</span> Format_desc    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">125</span> <span class="token operator">|</span> Server ver: <span class="token number">8.0</span><span class="token number">.26</span><span class="token punctuation">,</span> Binlog ver: <span class="token number">4</span>                                 <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span> <span class="token number">125</span> <span class="token operator">|</span> Previous_gtids <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">156</span> <span class="token operator">|</span>                                                                   <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span> <span class="token number">156</span> <span class="token operator">|</span> Gtid           <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">235</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'13b96d6b-59ac-11ed-88d6-8c8caa828ba8:1'</span> <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span> <span class="token number">235</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">317</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                             <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span> <span class="token number">317</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">365</span> <span class="token operator">|</span> table_id: <span class="token number">170</span> <span class="token punctuation">(</span>zs<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                                              <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span> <span class="token number">365</span> <span class="token operator">|</span> Update_rows    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">427</span> <span class="token operator">|</span> table_id: <span class="token number">170</span> flags: STMT_END_F                                   <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span> <span class="token number">427</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">458</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=2224 */</span>                                             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+</span><span class="token number">7</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>SET @@SESSION.GTID_NEXT=</code>后面跟的值，就是GTID的值，那么为啥这俩不一样呢，GTID是怎么生成的呢？下面介绍</p><h5 id="GTID是如何生成的"><a href="#GTID是如何生成的" class="headerlink" title="GTID是如何生成的"></a>GTID是如何生成的</h5><p>在没有开启GTID模式下，GTID的值，永远都是：<code>ANONYMOUS</code>，这个单词的意思是：匿名的;不知姓名的;名字不公开的;不具名的;没有特色的</p><p>在 开启GTID 模式下，每个事务都会跟一个 GTID 一一对应。这个时候， GTID 有两种生成方式，而使用哪种方式取决于 session 变量 gtid_next 的值。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'gtid_next'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> gtid_next     <span class="token operator">|</span> AUTOMATIC <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gtid_next 是session级别的变量，不是全局global的变量，怎么验证呢，可以用下面的命令</p><blockquote><p>show variables like ‘gtid_next’;       &lt;&#x3D;&#x3D;等价于&#x3D;&#x3D;&gt;    select @@gtid_next</p></blockquote><p>使用 select 命令，也可以查看变量的值，并且还可以验证当前变量是否是全局变量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> @<span class="token variable">@gtid_next</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token operator">|</span> @<span class="token variable">@gtid_next</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token operator">|</span> AUTOMATIC   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> @<span class="token variable">@global.gtid_next</span><span class="token punctuation">;</span>ERROR <span class="token number">1238</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Variable <span class="token string">'gtid_next'</span> <span class="token operator">is</span> a <span class="token keyword">SESSION</span> variable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么<code>gtid_next</code>都有哪些取值呢？</p><ul><li><code>AUTOMATIC</code>：当设置为AUTOMATIC时(默认值)时，系统会自动分配一个GTID，如果事务回滚或者没有写入到binlog文件时则不会分配</li><li><code>具体的GTID值</code>：可以设置该变量为一个具体的有效的GTID，这时服务器会将该GTID分配给下一个事务，就算该事务没有被写入binlog日志或者为空事务，该GTID也会被分配</li></ul><h5 id="GTID集合"><a href="#GTID集合" class="headerlink" title="GTID集合"></a>GTID集合</h5><p>在每一个mysql的实例上，都有两个关于GTID的集合：</p><ul><li><code>gtid_executed</code>：是在当前服务器上执行成功的事务的GTID集合</li><li><code>gtid_purged</code>：是那些已经在当前服务器上提交的，但已经不存在于binlog文件中了（可能是人工删的，也可能是系统自动删的，这里不展开说了）</li></ul><p>GTID集合的格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> @<span class="token variable">@gtid_executed</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------------------------------+</span><span class="token operator">|</span> @<span class="token variable">@gtid_executed</span>                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------------------------+</span><span class="token operator">|</span> <span class="token number">13</span>b96d6b<span class="token operator">-</span><span class="token number">59</span>ac<span class="token operator">-</span><span class="token number">11</span>ed<span class="token operator">-</span><span class="token number">88</span>d6<span class="token operator">-</span><span class="token number">8</span>c8caa828ba8:<span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="GTID-的基本用法"><a href="#GTID-的基本用法" class="headerlink" title="GTID 的基本用法"></a>GTID 的基本用法</h5><p>用一个例子，来描述GTID的基本用法</p><p>要先开启GTID模式哦，并且设置：<code>gtid_next=AUTOMATIC</code></p><p>在实例 X 中创建一个表 t，并初始化一条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完之后，这条insert语句，就会记录一个binlog，并且有GTID</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+--------------------------------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>             <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+--------------------------------------------+</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>     <span class="token number">1349</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span> <span class="token number">13</span>b96d6b<span class="token operator">-</span><span class="token number">59</span>ac<span class="token operator">-</span><span class="token number">11</span>ed<span class="token operator">-</span><span class="token number">88</span>d6<span class="token operator">-</span><span class="token number">8</span>c8caa828ba8:<span class="token number">1</span><span class="token operator">-</span><span class="token number">8</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+--------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxxxx-bin.000005'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+</span><span class="token operator">|</span> Log_name         <span class="token operator">|</span> Pos  <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>    <span class="token number">4</span> <span class="token operator">|</span> Format_desc    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">125</span> <span class="token operator">|</span> Server ver: <span class="token number">8.0</span><span class="token number">.26</span><span class="token punctuation">,</span> Binlog ver: <span class="token number">4</span>                                 <span class="token operator">|</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>  <span class="token number">125</span> <span class="token operator">|</span> Previous_gtids <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">156</span> <span class="token operator">|</span>                                                                   <span class="token operator">|</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>  <span class="token number">156</span> <span class="token operator">|</span> Gtid           <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">235</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'13b96d6b-59ac-11ed-88d6-8c8caa828ba8:8'</span> <span class="token operator">|</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>  <span class="token number">235</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">317</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                             <span class="token operator">|</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>  <span class="token number">317</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">365</span> <span class="token operator">|</span> table_id: <span class="token number">170</span> <span class="token punctuation">(</span>zs<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                                              <span class="token operator">|</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>  <span class="token number">365</span> <span class="token operator">|</span> Update_rows    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">427</span> <span class="token operator">|</span> table_id: <span class="token number">170</span> flags: STMT_END_F                                   <span class="token operator">|</span><span class="token operator">|</span> xxxxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000005</span> <span class="token operator">|</span>  <span class="token number">427</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>         <span class="token number">458</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=2224 */</span>                                             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+</span><span class="token number">7</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设，现在这个实例 X 是另外一个实例 A 的从库，并且此时在实例 A 上执行了下面这条插入语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且，这条语句在实例 A 上的 GTID 是 <code>aaa-bbb-ccc-ddd-eee:10</code></p><p>那么，实例 X 作为 A 的从库，就要同步这个事务过来执行，显然会出现主键冲突，导致实例 X 的同步线程停止。这时，我们应该怎么处理呢？</p><p>处理方法就是，DBA手动执行下面的这个语句序列：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> gtid_next<span class="token operator">=</span><span class="token string">'aaa-bbb-ccc-ddd-eee:10'</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">set</span> gtid_next<span class="token operator">=</span>automatic<span class="token punctuation">;</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，前三条语句的作用，是通过提交一个空事务，把这个 GTID 加到实例 X 的 GTID 集合中。</p><p>这样，在次在实例 X 上执行<code>start slave</code>开始同步的时候（因为之前主键冲突，实例X上的同步线程停止了），就会跳过这个<code>aaa-bbb-ccc-ddd-eee:10</code>了，避免了主键冲突。</p><p>在上面的这个语句序列中，start slave 命令之前还有一句 set gtid_next&#x3D;automatic。这句话的作用是“恢复 GTID 的默认分配行为”，也就是说如果之后有新的事务再执行，就还是按照原来的分配方式。</p><h5 id="基于GTID的同步"><a href="#基于GTID的同步" class="headerlink" title="基于GTID的同步"></a>基于GTID的同步</h5><p>了解了GTID，再来看一下基于GTID的切换，是什么样的？</p><p>上面已经列出了 基于 GTID同步的语句，这里在展示一下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span>$host_name MASTER_PORT<span class="token operator">=</span>$port MASTER_USER<span class="token operator">=</span>$user_name MASTER_PASSWORD<span class="token operator">=</span>$password master_auto_position<span class="token operator">=</span><span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用GTID进行同步的话，就比较简单了，只需要指定<code>master_auto_position=1 </code>就可以了。表示这个主备关系使用的是 GTID 协议。</p><p>当主库A挂掉后，此时假设，新主库 A1的 GTID 集合（gtid_executed）记为 set_a1，从库 B 的 GTID 集合（gtid_executed）记为 set_b。接下来，我们就看看现在的主备切换逻辑。</p><ul><li>实例 B 指定主库 A1，基于主备协议建立连接</li><li>实例 B 把 set_b 发给主库 A1</li><li>实例 A1算出 set_a 与 set_b 的差集，也就是所有存在于 set_a，但是不存在于 set_b 的 GTID 的集合</li><li>实例A1判断这个差集需要的所有 binlog 事务在A1中的binlog是否全都存在（可能人为删除了，可能系统自动删除了，这里不展示说）<ul><li>不全都存在：直接返回错误（在基于 GTID 的主备关系里，系统认为只要建立主备关系，就必须保证主库发给备库的日志是完整的。）</li><li>全都存在：A1 从自己的 binlog 文件里面，找出第一个不在 set_b 的事务，发给 B</li></ul></li><li>之后就从这个事务开始，往后读文件，按顺序取 binlog 发给 B 去执行。</li></ul><p>之后这个系统就由新主库 A1写入，主库 A1的自己生成的 binlog 中的 GTID 集合格式是：<code>server_uuid_of_A1:1-M</code></p><p>因为之前从库 B 的主库是A，所以之前B的 GTID 集合格式是 <code>server_uuid_of_A:1-N</code></p><p>那么把主库切换到从库A1之后 GTID 集合的格式就变成了 <code>server_uuid_of_A:1-N, server_uuid_of_A1:1-M</code></p><p>当然，主库 A1之前也是 A 的备库，因此主库 A1和从库 B 的 GTID 集合是一样的。这就达到了我们预期。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> @<span class="token variable">@gtid_executed</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------------------------------------+</span><span class="token operator">|</span> @<span class="token variable">@gtid_executed</span>                             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------------------------+</span><span class="token operator">|</span> server_uuid_of_A:<span class="token number">1</span><span class="token operator">-</span>N<span class="token punctuation">,</span> server_uuid_of_A1:<span class="token number">1</span><span class="token operator">-</span>M <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对比位点和GTID同步"><a href="#对比位点和GTID同步" class="headerlink" title="对比位点和GTID同步"></a>对比位点和GTID同步</h4><table><thead><tr><th>基于位点的同步</th><th>基于GTID的同步</th></tr></thead><tbody><tr><td>-</td><td>需要开启GTID模式</td></tr><tr><td>需要从库去主库找位点，而且不准确</td><td>使用GTID集合，由<strong>主库</strong>内部判断，很准确</td></tr><tr><td>操作复杂，change master还需要指定binlog文件和位点</td><td>change master只需要指向新主库即可</td></tr><tr><td>不做日志的完整性判断，基于位点的协议，是由备库决定的，备库指定哪个位点，主库就发哪个位点，不做日志的完整性判断。</td><td>做日志的完整性判断。在基于 GTID 的主备关系里，系统认为只要建立主备关系，就必须保证主库发给备库的日志是完整的。因此，如果实例 B 需要的日志已经不存在，A’就拒绝把日志发给 B。</td></tr></tbody></table><h2 id="读写分离（一主多从的应用场景）"><a href="#读写分离（一主多从的应用场景）" class="headerlink" title="读写分离（一主多从的应用场景）"></a>读写分离（一主多从的应用场景）</h2><h3 id="什么是读写分离"><a href="#什么是读写分离" class="headerlink" title="什么是读写分离"></a>什么是读写分离</h3><p>在写少读多的场景下，写入一般是有主库负责，然后在主库上有很多从库，从库提供只读功能，供业务查询</p><h3 id="读写分离的架构"><a href="#读写分离的架构" class="headerlink" title="读写分离的架构"></a>读写分离的架构</h3><h4 id="直连架构"><a href="#直连架构" class="headerlink" title="直连架构"></a>直连架构</h4><p>客户端（client）主动做负载均衡，这种模式下一般会把数据库的连接信息放在客户端的连接层。也就是说，由客户端来选择后端数据库进行查询。</p><pre class="mermaid">flowchart TDclient-->|write|mysqlAmysqlA-.->mysqlA1mysqlA1-.->mysqlAclient-->|read|mysqlBclient-->|read|mysqlCclient-->|read|mysqlDmysqlA-.->mysqlBmysqlA-.->mysqlCmysqlA-.->mysqlD</pre><h4 id="proxy架构"><a href="#proxy架构" class="headerlink" title="proxy架构"></a>proxy架构</h4><p>在 MySQL 和客户端之间有一个中间代理层 proxy，客户端只连接 proxy， 由 proxy 根据请求类型和上下文决定请求的分发路由。</p><pre class="mermaid">flowchart TDclient-->proxyproxy-->|write|mysqlAmysqlA-.->mysqlA1mysqlA1-.->mysqlAproxy-->|read|mysqlBproxy-->|read|mysqlCproxy-->|read|mysqlDmysqlA-.->mysqlBmysqlA-.->mysqlCmysqlA-.->mysqlD</pre><table><thead><tr><th>直连结构</th><th>proxy结构</th></tr></thead><tbody><tr><td>少了一层 proxy 转发，所以查询性能稍微好一点儿</td><td>对客户端比较友好</td></tr><tr><td>架构简单，排查问题方便</td><td>架构复杂，因为还需要维护proxy的高可用</td></tr><tr><td>高可用查，在出现主备切换、库迁移等操作的时候，客户端都会感知到，并且需要调整数据库连接信息</td><td></td></tr></tbody></table><h3 id="读写分离的缺点（过期读）"><a href="#读写分离的缺点（过期读）" class="headerlink" title="读写分离的缺点（过期读）"></a>读写分离的缺点（过期读）</h3><p>不论使用哪种架构，你都会碰到我们今天要讨论的问题：由于主从可能存在延迟，客户端执行完一个更新事务后马上发起查询，如果查询选择的是从库的话，就有可能读到刚刚的事务更新之前的状态。</p><p>过期读的产生原因是因为：<strong>主备延迟</strong>。</p><ul><li>可以通过上文介绍的方法，来避免主备延迟：<a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E4%BA%A7%E7%94%9F%E4%B8%BB%E5%A4%87%E5%BB%B6%E8%BF%9F">为什么会产生主备延迟</a><ul><li>复习：为什么会产生主备延迟：备库机器差，大事务，备库压力大（有读业务），并行复制能力</li></ul></li><li>但是呢，主备延迟，并不能100%的避免</li></ul><p>主备延迟不能100%的避免，那怎么解决过期读呢？</p><h3 id="过期读的解决方案"><a href="#过期读的解决方案" class="headerlink" title="过期读的解决方案"></a>过期读的解决方案</h3><ul><li>强制走主库方案</li><li>sleep方案</li><li>判断主备无延迟方案（配合semi-sync方案）</li><li>等主库位点方案</li><li>等GTID方案</li></ul><h4 id="强制走主库方案"><a href="#强制走主库方案" class="headerlink" title="强制走主库方案"></a>强制走主库方案</h4><p>将请求分为两类：</p><ul><li>一类是：必须要拿到最新结果的请求</li><li>一类是：可以读到旧数据的请求</li><li>对于第一类，强制将其发到主库上。对于第二类，将其发到从库上。</li></ul><h4 id="sleep方案"><a href="#sleep方案" class="headerlink" title="sleep方案"></a>sleep方案</h4><p>在更新成功，客户端发起查询请求的时候，对这个请求sleep一下，等待主备同步完成，在查询。这样就可以返回最新的结果了。</p><ul><li>存在的问题：sleep多少是一个问题？</li><li>如果sleep短了，去查询，仍然会有过期读；sleep多了，对用户的体验就很不好，感觉接口调用很慢</li></ul><h4 id="判断主备无延迟方案（配合semi-sync）"><a href="#判断主备无延迟方案（配合semi-sync）" class="headerlink" title="判断主备无延迟方案（配合semi-sync）"></a>判断主备无延迟方案（配合semi-sync）</h4><p>解决的思路是：主要主备没有延迟了，说明主备上的数据都是一样的了。</p><p>那么怎么确定主备无延迟了呢？</p><ul><li><p>通过 <code>show slave status</code>命令，以下是截取 <code>show slave status</code> 结果的部分截图。</p></li><li><p>&#96;&#96;&#96;sql</p><blockquote><p>show slave status<br>*************************** 1. row ***************************<br>           Slave_IO_State: Waiting for master to send event<br>              Master_Host: sh-dba-mysql-009<br>              Master_User: repl<br>              Master_Port: 3306<br>            Connect_Retry: 10<br>          Master_Log_File: mysql-bin.000001<br>      Read_Master_Log_Pos: 525<br>           Relay_Log_File: relay.000002<br>            Relay_Log_Pos: 738<br>    Relay_Master_Log_File: mysql-bin.000001<br>    ………………<br>      Exec_Master_Log_Pos: 525<br>    ………………<br>    Seconds_Behind_Master: 0<br>    ………………<br>       Retrieved_Gtid_Set: 456f3e13-6000-11e8-8bda-002272a443bb:1-2<br>        Executed_Gtid_Set: 456f3e13-6000-11e8-8bda-002272a443bb:1-2<br>            Auto_Position: 1<br>    ………………<br>1 row in set (0.00 sec)</p></blockquote><pre class="line-numbers language-none"><code class="language-none">- 有三种方法判断主备无延迟  - 第一种：通过&#96;Seconds_Behind_Master&#96;,但是它的单位是秒，如果你觉得精度不够的话，还有下面两个方案  - 第二种：通过对比位点的方式    - &#96;Master_Log_File&#96;和&#96;Read_Master_Log_Pos&#96;，表示的是读到的主库的最新位点；    - &#96;Relay_Master_Log_File&#96;和&#96;Exec_Master_Log_Pos&#96;，表示的是备库执行的最新位点。    - 如果上面两组值完全相同，说明主备无延迟。  - 第三种：通过对比GTID的方式    - &#96;Auto_Position&#x3D;1&#96; ，表示这对主备关系使用了 GTID 协议。    - &#96;Retrieved_Gtid_Set&#96;，是备库收到的所有日志的 GTID 集合；    - &#96;Executed_Gtid_Set&#96;，是备库所有已经执行完成的 GTID 集合。    - 如果这两个集合相同，说明主备无延迟。存在的问题：复习一下主备同步的流程：主库--&gt;binlog----(网络)---&gt;备库---&gt;relaylog---&gt;备库执行，主库产生的binlog要通过网络传给备库的，如果在传输的过程中，有一个查询过来了，通过这个方案，判断备库是没有延迟的，但是查出来的数据，仍然是过期读。**配合 semi-sync**要解决上面的问题，就要引入半同步复制，也就是 semi-sync replication：- 主库生成binlog，传给从库- 从库收到binlog之后，给主库一个ack- 主库收到ack之后，才给客户端返回“事务完成”的确认也就是说，如果启用了 semi-sync，就表示所有给客户端发送过确认的事务，都确保了备库已经收到了这个日志。这样，&#96;semi-sync&#96; 配合前面&#96;判断主备无延迟方案&#96;,就能够确定在从库上执行的查询请求，可以避免过期读。但是，&#96;semi-sync&#96;+&#96;判断主备无延迟方案&#96;只能适用于一主一备的场景。为什么呢？- 在一主多从的场景，主库只会受到一个从库返回的ack，就会给客户端返回事务提交确认了。- 当然，我们也可以设置为收到所有从库返回ack，但是这样，一个sql执行的代价就太大了。这样**如果查询落在了其他的从库上，还是避免不了过期读**。还有另一个问题，在业务高峰期，更新频率很快，&#96;判断主备无延迟&#96;可能一直不能成功，就会导致落在从库的查询，一直无法响应。还有一个问题，事务A在时刻A提交，事务B在时刻B提交，事务C在时刻C提交，由于事务一直在不停的产生和主备同步，这个时候，如果客户端来查询事务A的结果，此时，事务A早就已经完成了，但是由于&#96;主备无延迟&#96;判断不通过，事务A的结果一直无法返回。**问题：**- 一主多从的时候，在某些从库执行查询请求会存在过期读的现象；- 在更新频繁，持续延迟的情况下，主备延迟判断不通过，可能出现过度等待的问题。#### 等主库位点方案需要使用下面这个sql命令&#96;&#96;&#96;sqlselect master_pos_wait(file, pos, timeout);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>流程</p><ul><li>客户端发起查询请求，落在任意一个从库上，假设是<code>从库-C</code></li><li>在<code>从库-C</code>执行查询请求之前，先执行<code>show master status</code>得到当前主库执行到的 File 和 Position；</li><li>然后在当前<code>从库-C</code>上执行：<code>select master_pos_wait(file, pos, timeout);</code><ul><li>file：是第二步获取到的file</li><li>pos：是第二步获取到的Position</li><li>timeout：超时时间，单位秒，这个命令在超时时间内没返回，就返回-1</li></ul></li><li>在<code>从库-C</code>上的这个命令会返回一个值<ul><li>NULL：表示备库在同步执行期间，备库同步线程发生异常</li><li>-1：超时了，会返回-1</li><li>大于等于0的正整数：表示这个命令执行的时候，<code>从库-C</code>已经把主库上的这个日志同步完成了。</li></ul></li><li>如果返回值是 &gt;&#x3D;0 的正整数，则在这个从库执行查询语句；</li><li>否则，到主库执行查询语句。</li></ul><p>如果所有的从库都延迟超过 1 秒了，那查询压力不就都跑到主库上了吗？确实是这样。所以就需要业务开发同学做好限流策略了。</p><h4 id="等GTID-方案"><a href="#等GTID-方案" class="headerlink" title="等GTID 方案"></a>等GTID 方案</h4><p>需要使用下面这个sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> wait_for_executed_gtid_set<span class="token punctuation">(</span>gtid_set<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>流程：</p><ul><li>客户端发起查询请求，落在任意一个从库上，假设是<code>从库-C</code></li><li>在<code>从库-C</code>执行查询请求之前，先执行<code>select wait_for_executed_gtid_set(gtid_set, timeout);</code><ul><li>gtid_set：在前面等位点的方案中，是主动去主库执行 show master status。而5.7.6 版本开始，会把这个事务的 GTID 返回给客户端（需要设置<code>session_track_gtids</code>），这样等 GTID 的方案就可以减少一次查询。</li><li>timeout：超时时间，单位秒，这个命令在超时时间内没返回，就返回 1</li></ul></li><li>在<code>从库-C</code>上的这个命令会返回一个值<ul><li>等待，直到这个库执行的事务中包含传入的 gtid_set，返回 0</li><li>超时返回 1</li></ul></li><li>如果返回值是 0，则在这个从库执行查询语句；</li><li>否则，到主库执行查询语句。</li></ul><p>跟等主库位点的方案一样，等待超时后是否直接到主库查询，需要业务开发同学来做限流考虑。</p><h4 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h4><p>如果使用 GTID 等位点的方案做读写分离，在对大表做 DDL 的时候会怎么样。</p><ul><li>主库做DDL，典型的大事务，如果持续十分钟，那么从库就是延迟10分钟</li><li>在这10分钟内的所有请求，都会全部打到主库上</li><li>而主库正在做DDL，更加加重了主库的负担。</li></ul><p>解决：</p><ul><li>业务低峰期操作</li><li>使用gh-ots</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文有xmind，配合观看，效果更佳：&lt;a href=&quot;mysql%E7%9A%84%E4%B8%BB%E5%A4%87%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/Mysql%E4%B8%BB%</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="读写分离" scheme="https://zhuansun.github.io/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
    <category term="主备一致" scheme="https://zhuansun.github.io/tags/%E4%B8%BB%E5%A4%87%E4%B8%80%E8%87%B4/"/>
    
    <category term="高可用" scheme="https://zhuansun.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    <category term="主备切换" scheme="https://zhuansun.github.io/tags/%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2/"/>
    
    <category term="主备延迟" scheme="https://zhuansun.github.io/tags/%E4%B8%BB%E5%A4%87%E5%BB%B6%E8%BF%9F/"/>
    
    <category term="GTID" scheme="https://zhuansun.github.io/tags/GTID/"/>
    
    <category term="binlog" scheme="https://zhuansun.github.io/tags/binlog/"/>
    
  </entry>
  
  <entry>
    <title>mysql的临时表从入门到入土</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-06-01T10:14:17.860Z</published>
    <updated>2023-06-01T10:14:17.860Z</updated>
    
    <content type="html"><![CDATA[<p>mysql临时表的xmind，<a href="">点击下载</a></p><p>#### 临时表相关 </p><ul><li>17 | 如何正确地显示随机消息？ </li><li>34 | 到底可不可以使用join？ </li><li>35 | join语句怎么优化？ </li><li>36 | 为什么临时表可以重名？</li><li>37 | 什么时候会使用内部临时表？</li><li>43 | 要不要使用分区表？</li></ul><hr><p>本文的内容，是mysql中关于sql优化，比较重要的一部分内容，涉及到：</p><ul><li>mysql的排序：就是我们日常sql语句中经常写的 order by</li></ul><p>还涉及到：</p><ul><li>临时文件，为什么会涉及临时文件，因为：排序的时候会有内部排序和外部排序</li><li>排序的记录比较多的时候，就会用到外部排序，外部排序就会用到临时文件，使用归并排序算法</li></ul><p>还涉及到：</p><ul><li>JOIN 语句的优化：就是我们日常开发中 a left join b 等等</li><li>临时表，因为涉及到JOIN的优化</li></ul><p>这些都是很日常的开发工作中，就会用到的部分，所以这篇文章要好好掌握以下，对实战的能力提升很大</p><h2 id="mysql的排序"><a href="#mysql的排序" class="headerlink" title="mysql的排序"></a>mysql的排序</h2><p>这部分在 Mysql的索引从入门到入土 已经介绍过了，这里我再总结一下</p><img src="mysql的临时表从入门到入土.assets/image-20230307144252828.png" alt="image-20230307144252828" style="zoom:80%;" /><p>在日常的开发过程中，经常会使用<code>order by</code>语句，那么排序的原理是什么呢？</p><p>排序分为两种情况</p><ul><li>排序的字段有索引</li><li>排序的字段没有索引</li></ul><p>有索引的排序，会直接使用索引，因为索引是有序的，所以没啥可说的。性能很高</p><p>主要讨论没有索引的排序：没有索引的排序，相对来说复杂一下。</p><p>一个语句是否使用了排序，可以通过：<code>explain</code>命令查看，结果中有 Using filesort ，说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</p><p>MySQL 会给每个线程分配一块<code>内存</code>用于排序，称为<code> sort_buffer</code>。</p><p>sort_buffer既然是内存区域，就不可能无限的扩大，是可以通过参数<code>sort_buffer_size</code>控制的</p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><p>如果要排序的数据量小于 <code>sort_buffer_size</code>，排序就在内存中完成。 </p><p>这叫做：<code>内部排序</code>，有两种算法：快排和优先队列排序(也叫堆排序)</p><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3><p>如果要排序的数据量 大于 <code>sort_buffer_size</code>，内存放不下，则不得不利用磁盘临时文件辅助排序。</p><p>这叫做：<code>外部排序</code>，算法是归并排序</p><h3 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h3><p>是指将 <strong>排序的字段和要返回的字段</strong>，全部放入内存，这样排序完之后，就不需要回表了。性能比较高</p><p>比如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>city<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果内存放得下，就将：name，city，age 全都放入内存，在内存中使用 name 排好序，直接返回。避免了回表</p><h3 id="rowId排序"><a href="#rowId排序" class="headerlink" title="rowId排序"></a>rowId排序</h3><p>如果 MySQL 认为排序的单行长度太大（通过参数：max_length_for_sort_data），就不能将 <strong>排序的字段和要返回的字段</strong> 都放在内存中了</p><p>只能将 <strong>排序的字段和要返回的字段所在记录的id</strong> 放在内存中进行排序</p><p>排序完之后，在通过：<strong>要返回的字段所在记录的id</strong> 进行回表，取出：<strong>要返回的字段</strong></p><p>比如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>prov<span class="token punctuation">,</span>city<span class="token punctuation">,</span>address<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要返回的字段：name,prov,city,address,age 太大了，内存放不下，就会将 id 和 name 放在内存中，然后通过name排序</p><p>排序完成之后，在通过 id 回表查找 name,prov,city,address,age 返回给客户端</p><h3 id="全字段排序-VS-rowid-排序"><a href="#全字段排序-VS-rowid-排序" class="headerlink" title="全字段排序 VS rowid 排序"></a>全字段排序 VS rowid 排序</h3><ul><li>MySQL 如果觉得排序内存太小，会影响排序效率，会采用 rowid 排序算法，这样排序过程中一次可以排序更多行，但是需要回表</li><li>MySQL 认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，可以减少回表</li></ul><h3 id="排序算法的选择"><a href="#排序算法的选择" class="headerlink" title="排序算法的选择"></a>排序算法的选择</h3><p>判断排序的单行字段大小</p><ul><li>如果 单行长度大小 &lt; max_length_for_sort_data ：全字段排序</li><li>如果 单行长度大小 &gt; max_length_for_sort_data ：rowid排序</li></ul><p>不管是全字段排序，还是rowid排序都受限制于：sort_buffer 的大小</p><ul><li>如果：要排序的总数据量 &lt; sort_buffer_size ： 内部排序，使用快速排序算法</li><li>如果 ：要排序的总数据量 &gt; sort_buffer_size：<ul><li>继续判断结果量级，结果量级大，比如：order by xx limit 10000：外部排序，使用归并排序算法</li><li>结果量级小，比如：order by xx limit 3：内部排序，使用 优化队列算法（堆排序）</li></ul></li></ul><p>表的存储引擎</p><ul><li>要排序的表是InnoDB的： 优先选择：全字段排序，rowid 排序会要求回表多造成磁盘读，因此不会被优先选择</li><li>要排序的是内存的(比如memory)： 优先选择：rowid排序，因为是内存表，不涉及磁盘读，使用rowid可以一次性排更多的数据</li></ul><p>上面我们说过，当排序的记录数比较多，sort_buffer 内存放不下，会使用临时文件辅助排序</p><p>接下老我们就看看：Mysql 中的临时文件</p><h2 id="Mysql的临时文件"><a href="#Mysql的临时文件" class="headerlink" title="Mysql的临时文件"></a>Mysql的临时文件</h2><p>临时文件和临时表是不一样的东西！</p><p>临时文件，一般是在排序过程中，内存放不下，会将数据存在磁盘中，这时，存在磁盘中的文件就是临时文件。排序完成之后，就删除了。</p><p>关于临时文件，这里不过多的解释。</p><p>我们来看看临时表吧</p><h2 id="Mysql的临时表"><a href="#Mysql的临时表" class="headerlink" title="Mysql的临时表"></a>Mysql的临时表</h2><h3 id="什么是临时表"><a href="#什么是临时表" class="headerlink" title="什么是临时表"></a>什么是临时表</h3><p>有的人可能会认为，临时表就是内存表。</p><p>但是，这两个概念可是完全不同的。</p><p>内存表，指的是使用 Memory 引擎的表，建表语法是 create table … engine&#x3D;memory。这种表的数据都保存在内存里，系统重启的时候会被清空，但是表结构还在。除了这两个特性看上去比较“奇怪”外，从其他的特征上看，它就是一个正常的表。</p><p>临时表，可以使用各种引擎类型 。如果是使用 InnoDB 引擎或者 MyISAM 引擎的临时表，写数据的时候是写到磁盘上的。当然，临时表也可以使用 Memory 引擎。</p><h3 id="临时表的特性"><a href="#临时表的特性" class="headerlink" title="临时表的特性"></a>临时表的特性</h3><p>通过一个实例，来了解临时表的特性</p><table><thead><tr><th>session A</th><th>session B</th></tr></thead><tbody><tr><td>create temporary table t (c int) engine&#x3D;myisam;</td><td></td></tr><tr><td></td><td>show create table t;<br/><font color='red'>(Table ‘t’ doesn’t exist)</font></td></tr><tr><td>create table t (id int primary key) engine&#x3D;innodb;</td><td></td></tr><tr><td>show create table t;<br/><font color='green'>&#x2F;&#x2F;create temporary table t (c int) engine&#x3D;myisam;</font></td><td></td></tr><tr><td>show tables;<br/><font color='green'>&#x2F;&#x2F;只显示普通表t</font></td><td></td></tr><tr><td></td><td>insert into t value (1);<br/>select * from t;<br/>&#x2F;&#x2F;返回1</td></tr><tr><td>select * from t;<br/>&#x2F;&#x2F;Empty Set</td><td></td></tr></tbody></table><p>临时表在使用上有以下几个特点：</p><ul><li>建表语法是 create temporary table …</li><li>一个临时表只能被创建它的 session 访问，对其他线程不可见。所以，图中 session A 创建的临时表 t，对于 session B 就是不可见的。</li><li>临时表可以与普通表同名。</li><li>session A 内有同名的临时表和普通表的时候，show create 语句，以及增删改查语句访问的是临时表。</li><li>show tables 命令不显示临时表。</li></ul><img src="mysql的临时表从入门到入土.assets/image-20230307150000571.png" alt="image-20230307150000571" /><h3 id="哪里会用到临时表"><a href="#哪里会用到临时表" class="headerlink" title="哪里会用到临时表"></a>哪里会用到临时表</h3><img src="mysql的临时表从入门到入土.assets/image-20230307145644973.png" alt="image-20230307145644973"  /><h3 id="怎么创建临时表"><a href="#怎么创建临时表" class="headerlink" title="怎么创建临时表"></a>怎么创建临时表</h3><img src="mysql的临时表从入门到入土.assets/image-20230307145631925.png" alt="image-20230307145631925" style="zoom:80%;" /><h3 id="临时表的分类"><a href="#临时表的分类" class="headerlink" title="临时表的分类"></a>临时表的分类</h3><img src="mysql的临时表从入门到入土.assets/image-20230307165554003.png" alt="image-20230307165554003" /><h3 id="临时表的日志"><a href="#临时表的日志" class="headerlink" title="临时表的日志"></a>临时表的日志</h3><img src="mysql的临时表从入门到入土.assets/image-20230307165507644.png" alt="image-20230307165507644" /><h2 id="JOIN语句"><a href="#JOIN语句" class="headerlink" title="JOIN语句"></a>JOIN语句</h2><h3 id="JOIN的基本概念"><a href="#JOIN的基本概念" class="headerlink" title="JOIN的基本概念"></a>JOIN的基本概念</h3><ul><li>笛卡尔积</li><li>隐式内连接<ul><li>等值连接</li><li>非等值连接</li></ul></li><li>自连接</li><li>外连接<ul><li>左外连接</li><li>右外连接</li><li>全外连接</li></ul></li><li>内连接</li><li>交叉连接</li></ul><p>可以参考：mysql的连接查询.md 一文，这里不再赘述</p><h3 id="JOIN语句的分类"><a href="#JOIN语句的分类" class="headerlink" title="JOIN语句的分类"></a>JOIN语句的分类</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><ul><li>准备 表t1：有索引a，100条记录</li><li>准备 表t2：有索引a，1000条记录</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t2<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token operator">like</span> t2<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Index-Nested-Loop-Join（NLJ）"><a href="#Index-Nested-Loop-Join（NLJ）" class="headerlink" title="Index Nested-Loop Join（NLJ）"></a>Index Nested-Loop Join（NLJ）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行过程</p><ul><li>从表 t1 中读入一行数据 R；</li><li>从数据行 R 中，取出 a 字段到表 t2 里去查找；</li><li>取出表 t2 中满足条件的行，跟 R 组成一行，作为结果集的一部分；</li><li>重复执行步骤 1 到 3，直到表 t1 的末尾循环结束。</li></ul><p>这个过程是先遍历表 t1，然后根据从表 t1 中取出的每行数据中的 a 值，去表 t2 中查找满足条件的记录。并且可以用上表t2的索引，所以我们称之为“Index Nested-Loop Join”，简称 NLJ。</p><h4 id="Simple-Nested-Loop-Join（SNL）"><a href="#Simple-Nested-Loop-Join（SNL）" class="headerlink" title="Simple Nested-Loop Join（SNL）"></a>Simple Nested-Loop Join（SNL）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                               <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于表 t2 的字段 b 上没有索引，因此再用图 2 的执行流程时，每次到 t2 去匹配的时候，就要做一次全表扫描。</p><p>你可以先设想一下这个问题，继续使用图 2 的算法，是不是可以得到正确的结果呢？如果只看结果的话，这个算法是正确的，而且这个算法也有一个名字，叫做“Simple Nested-Loop Join”。</p><p>但是，这样算来，这个 SQL 请求就要扫描表 t2 多达 100 次，总共扫描 100*1000&#x3D;10 万行。</p><p>效率极低。</p><p>但是mysql并没有使用这种算法，因为这种算法效率极低，通过执行计划也可以看到：Using where; Using join buffer (Block Nested Loop) </p><p>mysql使用的是 Block Nested Loop</p><h4 id="Block-Nested-Loop-Join（BNL）"><a href="#Block-Nested-Loop-Join（BNL）" class="headerlink" title="Block Nested Loop Join（BNL）"></a>Block Nested Loop Join（BNL）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                               <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>被驱动表</code>无法使用索引的时候，算法的流程是这样的：</p><ul><li><p>把表 t1 的数据读入线程内存 join_buffer 中，由于我们这个语句中写的是 select *，因此是把整个表 t1 放入了内存；</p></li><li><p>扫描表 t2，把表 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回。</p></li></ul><p><strong>如果驱动表的数据太多，join_buffer放不下怎么办？</strong></p><p>join_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。</p><p>如果放不下表 t1 的所有数据话，策略很简单，就是分段放。</p><p>执行过程就变成了：</p><ul><li>扫描表 t1，顺序读取数据行放入 join_buffer 中，放完第 88 行 join_buffer 满了，继续第 2 步；</li><li>扫描表 t2，把 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回；</li><li>清空 join_buffer；</li><li>继续扫描表 t1，顺序读取第 88 行之后的12 行数据放入 join_buffer 中，继续执行第 2 步。</li></ul><p>这个流程才体现出了这个算法名字中“Block”的由来，表示“分块去 join”</p><h4 id="hash-join（mysql-8-0-）"><a href="#hash-join（mysql-8-0-）" class="headerlink" title="hash join（mysql 8.0 ）"></a>hash join（mysql 8.0 ）</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>a<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span><span class="token keyword">hash</span> <span class="token keyword">join</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的语句，在mysql8.0版本中，就不是使用 BNL了，而是使用 hash join</p><p>hash join 是mysql 8 的优化，在8之前这种语句使用的是：BNL，在8之后是 hash join</p><p>hash join 和 BNL 思路上是一致的</p><ul><li>将 驱动表 加载到内存<ul><li>BNL：所需的字段放在join_buffer中</li><li>hash join： 在 join_buffer中存的是一个hash表，key是将连接字段（join的字段）hash后的结果；value是所需的字段</li></ul></li><li>join_buffer不够用的时候<ul><li>BNL：分块加载</li><li>hash join：存到磁盘上</li></ul></li><li>读取 被驱动表 中记录与内存中的驱动表作比较<ul><li>BNL：遍历内存中的驱动表，时间复杂度是 O(n)</li><li>hash join：被驱动表的记录先hash，然后去内存中的hash表查找，时间复杂度是 O(1)</li></ul></li><li>返回结果集</li></ul><p>个人理解：主要是匹配的过程中，hash比BNL时间复杂度更好，所以更快</p><h4 id="它们之间的区别和联系"><a href="#它们之间的区别和联系" class="headerlink" title="它们之间的区别和联系"></a>它们之间的区别和联系</h4><img src="mysql的临时表从入门到入土.assets/image-20230307214104063.png" alt="image-20230307214104063"  /><h3 id="是否可以使用JOIN语句"><a href="#是否可以使用JOIN语句" class="headerlink" title="是否可以使用JOIN语句"></a>是否可以使用JOIN语句</h3><p>能不能使用 join 语句？</p><ul><li><p>如果可以使用 Index Nested-Loop Join 算法，也就是说可以用上被驱动表上的索引，其实是没问题的；</p></li><li><p>如果使用 Block Nested-Loop Join 算法，扫描行数就会过多。尤其是在大表上的 join 操作，这样可能要扫描被驱动表很多次，会占用大量的系统资源（比较次数多，CPU也会升高）。所以这种 join 尽量不要用。</p></li></ul><p>所以你在判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。</p><h3 id="驱动表应该怎么选"><a href="#驱动表应该怎么选" class="headerlink" title="驱动表应该怎么选"></a>驱动表应该怎么选</h3><p>先说结论：应该选择小表作为驱动表</p><h4 id="在-NLJ-的情况下"><a href="#在-NLJ-的情况下" class="headerlink" title="在 NLJ 的情况下"></a>在 NLJ 的情况下</h4><p>在 NLJ 的情况下，<code>驱动表</code>走全表扫描，<code>被驱动表</code>走索引树搜索</p><p>假设<code>被驱动表</code>的行数是 M，每次在<code>驱动表</code>查一行数据，要先搜索索引 a，在搜索主键索引。</p><p>每次搜索一棵树近似复杂度是 以2为底的M的对数，记为： log2M</p><p>所以在<code>被驱动表</code>上查一行数据的时间复杂度就是： 2 * log2M（因为走了2次索引，一次普通索引，一次主键索引）</p><p>假设<code>驱动表</code>的行数是 N，执行过程就要扫描驱动表的 N 行，然后对于每一行，都去<code>被驱动表</code>上匹配一次。</p><p>因此整个执行过程，近似复杂度为：N + N * 2 * log2M</p><p>显然，N 对扫描行数的影响更大，因此应该让小表来做驱动表。</p><blockquote><p> 如果你没觉得这个影响有那么“显然”， 可以这么理解：</p><p>N 扩大 1000 倍的话，扫描行数就会扩大 1000 倍；</p><p>而 M 扩大 1000 倍，扫描行数扩大不到 10 倍。</p></blockquote><p>总结：在 NLJ 的情况下，需要选择小表作为驱动表。</p><h4 id="在-BNL-的情况下"><a href="#在-BNL-的情况下" class="headerlink" title="在 BNL 的情况下"></a>在 BNL 的情况下</h4><p>在 BNL 的情况下，<code>驱动表</code>走全表扫描，<code>被驱动表</code>也是走全表扫描</p><p>假设小表的行数是 N，大表的行数是 M</p><p>在 BNL 算法，会首先把 <code>驱动表</code>加载到内存中，然后扫描<code>被驱动表</code>，扫描一行，就和内存中的<code>驱动表</code>做一次匹配，所以是：</p><ul><li>两次全表扫描：M + N</li><li>内存中的判断次数是 M * N</li></ul><p>可以看到，调换这两个算式中的 M 和 N 没差别，因此这时候无论选择哪个表做驱动表，执行耗时是一样的。</p><p><strong>但是！！！</strong>如果驱动表的数据比较多，我们知道此时需要分块join</p><p>此时假设，<code>驱动表</code>的数据行数是 N，需要分 K 段才能完成算法流程，<code>被驱动表</code>的数据行数是 M</p><p>注意，这里的 K 不是常数，N 越大 K 就会越大</p><p>所以：对驱动表的扫描次数是N； 对被驱动表的扫描次数是：K * M，此时：</p><ul><li>总的扫描次数是：N + K * M</li><li>总的内存判断次数是： N * M</li></ul><p>显然，内存判断次数是不受选择哪个表作为驱动表影响的。而考虑到扫描行数，在 M 和 N 大小确定的情况下，K 小一些，也就是分段小一些，整个算式的结果会更小。</p><p>为了让分段更小，有两个办法：</p><ul><li>选择小表作为驱动表</li><li>增大 join_buffer_size</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果要使用 join，应该选择大表做驱动表还是选择小表做驱动表？</p><ul><li>如果是 Index Nested-Loop Join 算法，应该选择小表做驱动表；</li><li>如果是 Block Nested-Loop Join 算法：<ul><li>在 join_buffer_size 足够大的时候，是一样的；</li><li>在 join_buffer_size 不够大的时候（这种情况更常见），应该选择小表做驱动表。</li></ul></li></ul><p>所以，这个问题的结论就是，总是应该使用小表做驱动表。</p><h4 id="什么是小表"><a href="#什么是小表" class="headerlink" title="什么是小表"></a>什么是小表</h4><p>这里所说的小表，并不是说表的数据量是多还是少；</p><p>而是作为 join 的数据量的大小。</p><p>比如下面两个语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 straight_join t1 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两个语句使用 b 字段进行 join，所以都用不上索引。</p><p>但如果是用第二个语句的话，join_buffer 只需要放入 t2 的前 50 行，显然是更好的。所以这里，“t2 的前 50 行”是那个相对小的表，也就是“小表”。</p><p>继续看另一个例子</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>b<span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>  t1  straight_join t2 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">select</span> t1<span class="token punctuation">.</span>b<span class="token punctuation">,</span>t2<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>  t2  straight_join t1 <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>t2<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两个语句都是使用 b 字段进行 join，所以都用不上索引。并且 表t1 和 表t2 的数据量都是100行。</p><p>但是，这两条语句每次查询放入 join_buffer 中的数据是不一样的：</p><ul><li>表 t1 只查字段 b，因此如果把 t1 放到 join_buffer 中，则 join_buffer 中只需要放入 b 的值；</li><li>表 t2 需要查所有的字段，因此如果把表 t2 放到 join_buffer 中的话，就需要放入三个字段 id、a 和 b。</li></ul><p>所以这里，我们应该选择表 t1 作为驱动表。也就是说在这个例子里，“只需要一列参与 join 的表 t1”是那个相对小的表。</p><h2 id="JOIN语句的优化"><a href="#JOIN语句的优化" class="headerlink" title="JOIN语句的优化"></a>JOIN语句的优化</h2><p>在上文，我们知道了什么时候可以使用 JOIN 语句，以及 JOIN 语句是怎么的内部执行逻辑，这一节我们来看一下怎么优化 JOIN 语句。</p><h3 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h3><ul><li>表 t1 里，插入了 1000 行数据，每一行的 a&#x3D;1001-id 的值。也就是说，表 t1 中字段 a 是逆序的</li><li>表 t2 中插入了 100 万行数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">index</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t2 <span class="token operator">like</span> t1<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1001</span><span class="token operator">-</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Multi-Range-Read-（MRR）优化"><a href="#Multi-Range-Read-（MRR）优化" class="headerlink" title="Multi-Range Read （MRR）优化"></a>Multi-Range Read （MRR）优化</h3><p>什么是MRR优化</p><p>当回表的数据量比较多的时候，将需要回表的主键id先暂存到内存中，然后进行排序，将排序后的id在进行回表，此时id是顺序的，此时回表，近似于磁盘的顺序读。可以提高性能</p><p>MRR优化默认是关闭的，开启：set optimizer_switch&#x3D;”mrr_cost_based&#x3D;off”</p><p>如果使用了 order by 语句，MRR就不生效了</p><h3 id="Batched-Key-Access（BKA）"><a href="#Batched-Key-Access（BKA）" class="headerlink" title="Batched Key Access（BKA）"></a>Batched Key Access（BKA）</h3><p>BKA 算法，其实就是对 NLJ 算法的优化</p><h1 id="——————————"><a href="#——————————" class="headerlink" title="——————————-"></a>——————————-</h1><p>mysql</p><p>临时文件和临时表</p><p>临时表：为什么这里的临时表使用的引擎是memory？ A：tmp_table_size 这个配置限制了内存临时表的大小，默认值是 16M。如果临时表大小超过了 tmp_table_size，那么内存临时表就会转成磁盘临时表；磁盘临时表使用的引擎默认是 InnoDB，是由参数 internal_tmp_disk_storage_engine 控制的。而内存临时表使用的是memory引擎</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表t2，主键索引和字段a的普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t2<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 通过存储过程，初始化1000条记录</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表t1，主键索引和字段a的普通索引</span><span class="token comment">-- 初始化100条记录</span><span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token operator">like</span> t2<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么驱动表的字段a有索引，为啥不走索引呢？</p><ul><li>原因可能是因为没有过滤条件；</li></ul><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>    <span class="token number">50.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么驱动表的字段a有索引，而且添加了过滤条件，还是不走索引呢？</p><ul><li>因为是查询的 * ，即使走了索引 a，还是需要回表，优化器认为还不如直接走全表呢</li><li>因为过滤条件过滤的数据比较少，只过滤了50%，优化器认为全表扫描比走索引更快</li></ul><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> t1<span class="token punctuation">.</span>id <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>   <span class="token number">50</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref   <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span>              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动表的字段a有索引，而且添加了过滤条件，查询驱动表的主键id，会用到覆盖索引，不回表了，所以走了索引；</p><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref   <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动表的字段a有索引，而且添加了过滤条件，虽然查询的是所有字段，需要回表，但是因为过滤条件过滤90%的数据，优化器因为回表比全表扫描代价低</p><p>以上的情况适用于 t1 的单表查询也是一样的，所以总结下来 join查询其实就是多个单表查询，然后汇总在一起；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ALL</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span><span class="token comment">-- ALL</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment">-- range</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token comment">-- range</span><span class="token keyword">explain</span> <span class="token keyword">select</span> id <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql5</p><ul><li>Using where; Using join buffer (Block Nested Loop)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                               <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql8</p><ul><li>Using where; Using join buffer (hash join)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span><span class="token keyword">hash</span> <span class="token keyword">join</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用order by的话，就不会使用MRR了</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> optimizer_switch<span class="token operator">=</span><span class="token string">"mrr_cost_based=off"</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> a <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> a<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition<span class="token punctuation">;</span> <span class="token keyword">Using</span> MRR <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> a <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> a<span class="token operator">&lt;=</span><span class="token number">200</span> <span class="token keyword">order</span> <span class="token keyword">by</span> a <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql的临时表存放位置</p><p>在 5.6 以及之前的版本里，MySQL 会在临时文件目录下创建一个相同前缀、以.ibd 为后缀的文件，用来存放数据文件；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'tmpdir'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>                                           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token operator">|</span> tmpdir        <span class="token operator">|</span> C:\Windows\SERVIC<span class="token operator">~</span><span class="token number">1</span>\NETWOR<span class="token operator">~</span><span class="token number">1</span>\AppData\<span class="token keyword">Local</span>\<span class="token keyword">Temp</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中 C:\Windows\SERVIC<del>1\NETWOR</del>1\AppData\Local\Temp  就是临时文件目录，其中的 SERVIC<del>1\NETWOR</del>1 是啥意思，我不知道</li><li>我是win电脑，可以创建一个临时表，然后用everything搜一下，就能找到这个目录</li></ul><p>而从 5.7 版本开始，MySQL 引入了一个临时文件表空间，专门用来存放临时文件的数据。因此，我们就不需要再创建 ibd 文件了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'innodb_temp_data_file_path'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token operator">|</span> Variable_name              <span class="token operator">|</span> <span class="token keyword">Value</span>                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token operator">|</span> innodb_temp_data_file_path <span class="token operator">|</span> ibtmp1:<span class="token number">12</span>M:autoextend <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>innodb_temp_data_file_path：定义临时表空间的路径、文件名、初始化大小和最大上限。</li><li>其中<code>ibtmp1</code>就是临时文件表空间，它在windows下是一个文件，不是一个目录。</li></ul><p><img src="/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230105211938528.png" alt="image-20230105211938528"></p><h1 id="分区表的底层原理"><a href="#分区表的底层原理" class="headerlink" title="分区表的底层原理"></a>分区表的底层原理</h1><p>​分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引知识在各个底层表上各自加上一个完全相同的索引。从存储引擎的角度来看，底层表和普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分。</p><p>​分区表的操作按照以下的操作逻辑进行：</p><p>​<strong>select查询</strong></p><p>​当查询一个分区表的时候，分区层先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据</p><p>​<strong>insert操作</strong></p><p>​当写入一条记录的时候，分区层先打开并锁住所有的底层表，然后确定哪个分区接受这条记录，再将记录写入对应底层表</p><p>​<strong>delete操作</strong></p><p>​当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作</p><p>​<strong>update操作</strong></p><p>​当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录再哪个分区，然后取出数据并更新，再判断更新后的数据应该再哪个分区，最后对底层表进行写入操作，并对源数据所在的底层表进行删除操作</p><p>​有些操作时支持过滤的，例如，当删除一条记录时，MySQL需要先找到这条记录，如果where条件恰好和分区表达式匹配，就可以将所有不包含这条记录的分区都过滤掉，这对update同样有效。如果是insert操作，则本身就是只命中一个分区，其他分区都会被过滤掉。mysql先确定这条记录属于哪个分区，再将记录写入对应得曾分区表，无须对任何其他分区进行操作</p><p>​虽然每个操作都会“先打开并锁住所有的底层表”，但这并不是说分区表在处理过程中是锁住全表的，如果存储引擎能够自己实现行级锁，例如innodb，则会在分区层释放对应表锁。</p><h1 id="范围分区"><a href="#范围分区" class="headerlink" title="范围分区"></a>范围分区</h1><p>​范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用values less than运算符来定义。</p><p>​1、创建普通的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​2、创建带分区的表，下面建表的语句是按照store_id来进行分区的，指定了4个分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--在当前的建表语句中可以看到，store_id的值在1-5的在p0分区，6-10的在p1分区，11-15的在p3分区，16-20的在p4分区，但是如果插入超过20的值就会报错，因为mysql不知道将数据放在哪个分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​3、可以使用less than maxvalue来避免此种情况</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--maxvalue表示始终大于等于最大可能整数值的整数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​4、可以使用相同的方式根据员工的职务代码对表进行分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>job_code<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5、可以使用date类型进行分区：如虚妄根据每个员工离开公司的年份进行划分，如year(separated)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>separated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​6、可以使用函数根据range的值来对表进行分区，如timestampunix_timestamp()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--timestamp不允许使用任何其他涉及值的表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于时间间隔的分区方案，在mysql5.7中，可以基于范围或事件间隔实现分区方案，有两种选择</p><p>1、基于范围的分区，对于分区表达式，可以使用操作函数基于date、time、或者datatime列来返回一个整数值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1960</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、基于范围列的分区，使用date或者datatime列作为分区列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token keyword">COLUMNS</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1960-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1970-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1980-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1990-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="真实案例："><a href="#真实案例：" class="headerlink" title="真实案例："></a>真实案例：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#不分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> no_part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token punctuation">;</span><span class="token comment">#分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>d_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1998</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p10 <span class="token keyword">VALUES</span> LESS THAN maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#插入未分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> no_load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token comment">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> no_load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> no_part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'no'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> no_load_part<span class="token punctuation">;</span><span class="token comment">#插入分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'partition'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> load_part<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mysql临时表的xmind，&lt;a href=&quot;&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#### 临时表相关 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;17 | 如何正确地显示随机消息？ &lt;/li&gt;
&lt;li&gt;34 | 到底可不可以使用join？ &lt;/li&gt;
&lt;li&gt;35 | join语句怎么</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="临时表" scheme="https://zhuansun.github.io/tags/%E4%B8%B4%E6%97%B6%E8%A1%A8/"/>
    
    <category term="order by" scheme="https://zhuansun.github.io/tags/order-by/"/>
    
    <category term="join" scheme="https://zhuansun.github.io/tags/join/"/>
    
    <category term="分区表" scheme="https://zhuansun.github.io/tags/%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>mysql的性能调优从入门到入土</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-06-01T10:14:17.824Z</published>
    <updated>2023-06-01T10:14:17.824Z</updated>
    
    <content type="html"><![CDATA[<hr><p>资料：打开</p><h2 id="7-MySQL中-in-和-exists-的区别？"><a href="#7-MySQL中-in-和-exists-的区别？" class="headerlink" title="7.MySQL中 in 和 exists 的区别？"></a>7.MySQL中 in 和 exists 的区别？</h2><p>MySQL中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。我们可能认为exists比in语句的效率要高，这种说法其实是不准确的，要区分情景：</p><p>1、如果查询的两个表大小相当，那么用in和exists差别不大。</p><p>2、如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。</p><p>3、not in 和not exists：如果查询语句使用了not in，那么内外表都进行全表扫描，没有用到索引；而not extsts的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。</p><p>mysql的索引优化，联合索引使用的时候，时间+站点+code， 通过时间筛选之后，数据还比较多，此时效率很低。可以把所以改成：站点+时间+code，这样通过站点筛选之后的数据，就剩下很少了，此时效率很高。</p><p>事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能</p><p>减少大事务，可以减少主备延迟，可以降低锁的时间，减少死锁的产生，减少死锁检测的性能消耗。</p><p>减少并发量（减少对于同一行更新的并发量），可以减少死锁的产生，可以减少死锁检测的性能消耗</p><p>在删除数据的时候尽量加 limit。这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</p><p>在出现IO瓶颈的时候，可以将sync_binglog设置为100-1000内的值，表示累计多少个事务之后才会刷盘，默认是1表示每一个事务都会刷盘写binlog；</p><p>在出现IO瓶颈的时候，可以设置binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count，表示提升binlog的组提交的效果，但是会增加sql的响应时间</p><p>写多读少的场景，由于 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑普通索引。</p><p>mysql要调优，就要知道它为什么慢，哪里慢</p><p>在低版本：show profiles</p><p>在高版本：performance schema</p><p>以上有什么用？</p><ul><li>比如在实际环境中，有一个sql，非常慢</li><li>sql本身没有问题，看执行计划也比较慢，这个时候就可以用到上面的</li><li>可以更加详细的看到，这个sql到底是哪里慢</li></ul><p>process list 可以查看mysql的连接数量，顺丰云上的回话连接是不是？</p><p>不过一般有druid，不用太关注这个。但是呢，druid是什么，要去看看github上面的官网了。了解一下它的优点</p><p>MRR优化，将主键ID回表的随机读，改成主键ID的顺序读，但是默认是关闭的，优化器不倾向于使用MRR，不知道为啥；MRR 能够提升性能的核心在于，这条查询语句在索引 a 上做的是一个范围查询（也就是说，这是一个多值查询），可以得到足够多的主键 id。这样通过排序以后，再去主键索引查数据，才能体现出“顺序性”的优势。</p><p>字符集和字符编码的区别</p><p>大表拆分，将不常用的数据从表里拆出去，表小了之后，每个数据页存的数据就会多，查询的时候，就会减少磁盘IO</p><p>优化：</p><ul><li>不同的数据选择对应的mysql自建数据类型，比如数字就用数字类型，不要用字符串，时间就用时间类型，不要用字符串；用错了数据类型，对业务可能没影响，但是对mysql来说，内部多了一层转换，sql执行会比较慢</li><li>事件类型，建议用date，而不是timestamp，date类型</li></ul><p>大事务不仅会影响到主库，也是造成备库复制延迟的主要原因之一。因此，在平时的开发工作中，我建议你尽量减少大事务操作，把大事务拆成小事务。</p><p>show processlist</p><ul><li><p>看到的只是当前的并发连接数，如果你的系统动不动就成千上百个连接，其实都没关系，只是占用一些内存而已</p></li><li><p>&#96;&#96;&#96;sql<br>mysql&gt; show processlist;<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>| Id | User            | Host            | db   | Command | Time   | State                  | Info             |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>|  5 | event_scheduler | localhost       | NULL | Daemon  | 865562 | Waiting on empty queue | NULL             |<br>| 23 | root            | localhost:60179 | NULL | Query   |      0 | init                   | show processlist |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>2 rows in set (0.00 sec)</p><pre class="line-numbers language-none"><code class="language-none">- 真正需要关注的是并发执行数，也就是并发执行的线程，因为连接存在，这个连接不一定在执行。- innodb的并发执行数，通过&#96;innodb_thread_concurrency&#96;这个参数来控制的，默认是0表示不限制。- &#96;innodb_thread_concurrency&#96;的计算规则是：正在执行的线程+1，如果一个线程在执行过程中，遇到了锁，需要等待，线程-1---# IN 查询优化这个名字还真不是我起的，今天要讲的知识点就叫**索引潜水（Index dive）**。先要从一件怪事说起：我先造点数据复现一下问题，创建一张用户表：&#96;&#96;&#96;sqlCREATE TABLE &#96;user&#96; (  &#96;id&#96; bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键ID&#39;,  &#96;name&#96; varchar(100) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;姓名&#39;,  &#96;age&#96; int(11) NOT NULL DEFAULT 0 COMMENT &#39;年龄&#39;,  PRIMARY KEY (&#96;id&#96;),  KEY &#96;idx_age&#96; (&#96;age&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>通过一批用户年龄，查询该年龄的用户信息，并查看一下SQL执行计划：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="mysql的性能调优从入门到入土.assets/image-20230209164837331.png" alt="image-20230209164837331" style="zoom:60%;" /><p>where条件中有9个参数，重点关注一下执行计划中的预估扫描行数为279行。</p><p>到这里没什么问题，预估的非常准，实际就是279行。</p><img src="mysql的性能调优从入门到入土.assets/image-20230209164853902.png" alt="image-20230209164853902" /><p>但是，问题来了，当我们在where条件中，再加一个参数，变成了10个参数，预估扫描行数本应该增加，结果却大大减少了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="mysql的性能调优从入门到入土.assets/image-20230209164903103.png" alt="image-20230209164903103" /><p>一下子减少到了30行，可是实际行数是多少呢？</p><img src="mysql的性能调优从入门到入土.assets/image-20230209164911034.png" alt="image-20230209164911034" /><p>实际是310行，预估扫描行数是30行，真是错到姥姥家了。</p><p><strong>MySQL咋回事啊，到底还能不能预估？</strong></p><p><strong>不能预估的话，换其他人！</strong></p><p>大家肯定也是满脸疑惑，直到我去官网上看到了一个词语，<strong>索引潜水（Index dive）</strong>。</p><p>跟这个词语相关的，还有一个配置参数 <strong>eq_range_index_dive_limit</strong>。</p><p><strong>MySQL5.7.3</strong>之前的版本，这个值默认是10，之后的版本，这个值默认是200。</p><p>可以使用命令查看一下这个值的大小：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%eq_range_index_dive_limit%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="mysql的性能调优从入门到入土.assets/image-20230209164922082.png" alt="image-20230209164922082" /><p>当然，我们也可以手动修改这个值的大小：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> eq_range_index_dive_limit<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 <strong>eq_range_index_dive_limit</strong> 配置的作用就是：</p><p>当where语句in条件中参数个数小于这个值的时候，MySQL就采用<strong>索引潜水（Index dive）</strong>的方式预估扫描行数，非常准确。</p><p>当where语句in条件中参数个数大于等于这个值的时候，MySQL就采用另一种方式<strong>索引统计（Index statistics）</strong>预估扫描行数，误差较大。</p><p><strong>MySQL为什么要这么做呢？</strong></p><p>都用<strong>索引潜水（Index dive）</strong>的方式预估扫描行数，不好吗？</p><p>其实这是基于成本的考虑，<strong>索引潜水</strong>估算成本较高，适合小数据量。<strong>索引统计</strong>估算成本较低，适合大数据量。</p><p>一般情况下，我们的where语句的in条件的参数不会太多，适合使用<strong>索引潜水</strong>预估扫描行数。</p><p>建议还在使用<strong>MySQL5.7.3</strong>之前版本的同学们，手动修改一下<strong>索引潜水</strong>的配置参数，改成合适的数值。</p><p>如果你们项目中in条件最多有500个参数，就把配置参数改成501。</p><p>这样MySQL预估扫描行数更准确，可以选择更合适的索引。</p><hr><h2 id="performance-schema详解"><a href="#performance-schema详解" class="headerlink" title="performance schema详解"></a>performance schema详解</h2><h3 id="performance-schema的介绍"><a href="#performance-schema的介绍" class="headerlink" title="performance_schema的介绍"></a>performance_schema的介绍</h3><p>MySQL的performance schema 用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源等待等情况。</p><p>特点如下：</p><ul><li><p>提供了一种在数据库运行时实时检查server的内部执行情况的方法</p><ul><li><p>performance_schema 数据库中的表使用PERFORMANCE_SCHEMA存储引擎。</p></li><li><p>performance_schema 数据库主要关注数据库运行过程中的性能相关的数据</p></li><li><p>information_schema 数据库主要关注server运行过程中的元数据信息</p></li></ul></li><li><p>performance_schema 通过监视server的事件来实现监视server内部运行情况，</p><ul><li><p>“事件”：就是server内部活动中所做的任何事情以及对应的时间消耗（比如函数调用、操作系统的等待、SQL语句执行的阶段）</p></li><li><p>performance_schema中的事件与binlog中的记录的事件不同</p><ul><li>binlog中的事件是：描述数据修改的events</li><li>performance_schema中的事件是：计划调度程序（这是一种存储程序）的事件</li></ul></li><li><p>performance_schema中的事件记录的是：server执行某些活动对某些资源的消耗、耗时、这些活动执行的次数等情况。</p></li><li><p>performance_schema中的事件只记录在本地server的performance_schema中，不会被写入binlog中，也不会被复制到其他server中。</p></li><li><p>performance_schema的表中的数据不会持久化存储在磁盘中，而是保存在内存中，一旦服务器重启，这些数据会丢失</p></li></ul></li></ul><h3 id="performance-schema入门"><a href="#performance-schema入门" class="headerlink" title="performance schema入门"></a>performance schema入门</h3><p>在mysql的5.7版本中，性能模式是默认开启的，如果想要显式的关闭的话需要修改配置文件，不能直接进行修改，会报错Variable ‘performance_schema’ is a read only variable。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看performance_schema的属性</span>mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'performance_schema'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> Variable_name      <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token comment">-- 在配置文件中修改performance_schema的属性值，on表示开启，off表示关闭</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>performance_schema<span class="token operator">=</span><span class="token keyword">ON</span><span class="token comment">-- 切换数据库</span><span class="token keyword">use</span> performance_schema<span class="token punctuation">;</span><span class="token comment">-- 查看当前数据库下的所有表,会看到有很多表存储着相关的信息</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">-- 可以通过show create table tablename来查看创建表的时候的表结构</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> setup_consumers<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> <span class="token keyword">Table</span>           <span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Table</span>                    <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> setup_consumers <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>setup_consumers<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                        <span class="token identifier"><span class="token punctuation">`</span>ENABLED<span class="token punctuation">`</span></span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'YES'</span><span class="token punctuation">,</span><span class="token string">'NO'</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>               <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>PERFORMANCE_SCHEMA <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>想要搞明白后续的内容，同学们需要理解两个基本概念：</p><ul><li>instruments: 生产者，用于采集mysql中各种各样的操作产生的事件信息，对应配置表中的配置项我们可以称为监控采集配置项。</li><li>consumers: 消费者，对应的消费者表用于存储来自instruments采集的数据，对应配置表中的配置项我们可以称为消费存储配置项。</li></ul><h3 id="performance-schema表的分类"><a href="#performance-schema表的分类" class="headerlink" title="performance_schema表的分类"></a>performance_schema表的分类</h3><p>performance_schema库下的表可以按照监视纬度的不同进行分组。</p><h4 id="语句事件记录表"><a href="#语句事件记录表" class="headerlink" title="语句事件记录表"></a>语句事件记录表</h4><p>语句事件记录表，这些表记录了语句事件信息，当前语句事件表events_statements_current、历史语句事件表events_statements_history和长语句历史事件表events_statements_history_long、以及聚合后的摘要表summary，其中，summary表还可以根据帐号(account)，主机(host)，程序(program)，线程(thread)，用户(user)和全局(global)再进行细分)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%statement%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="等待事件记录表"><a href="#等待事件记录表" class="headerlink" title="等待事件记录表"></a>等待事件记录表</h4><p>等待事件记录表，与语句事件类型的相关记录表类似：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="阶段事件记录表"><a href="#阶段事件记录表" class="headerlink" title="阶段事件记录表"></a>阶段事件记录表</h4><p>阶段事件记录表，记录语句执行的阶段事件的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%stage%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="事务事件记录表"><a href="#事务事件记录表" class="headerlink" title="事务事件记录表"></a>事务事件记录表</h4><p>事务事件记录表，记录事务相关的事件的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%transaction%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="监控文件系统层调用的表"><a href="#监控文件系统层调用的表" class="headerlink" title="监控文件系统层调用的表"></a>监控文件系统层调用的表</h4><p>监控文件系统层调用的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%file%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="监视内存使用的表"><a href="#监视内存使用的表" class="headerlink" title="监视内存使用的表"></a>监视内存使用的表</h4><p>监视内存使用的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%memory%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置表"><a href="#配置表" class="headerlink" title="配置表"></a>配置表</h4><p>动态对performance_schema进行配置的配置表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%setup%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="performance-schema的简单配置与使用"><a href="#performance-schema的简单配置与使用" class="headerlink" title="performance_schema的简单配置与使用"></a>performance_schema的简单配置与使用</h3><p>数据库刚刚初始化并启动时，并非所有instruments(事件采集项，在采集项的配置表中每一项都有一个开关字段，或为YES，或为NO)和consumers(与采集项类似，也有一个对应的事件类型保存表配置项，为YES就表示对应的表保存性能数据，为NO就表示对应的表不保存性能数据)都启用了，所以默认不会收集所有的事件，可能你需要检测的事件并没有打开，需要进行设置，可以使用如下两个语句打开对应的instruments和consumers（行计数可能会因MySQL版本而异)。</p><h4 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 打开等待事件的采集器配置项开关，需要修改setup_instruments配置表中对应的采集器配置项</span><span class="token keyword">UPDATE</span> setup_instruments <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token punctuation">,</span> TIMED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'wait%'</span><span class="token punctuation">;</span><span class="token comment">-- 打开等待事件的保存表配置开关，修改setup_consumers配置表中对应的配置项</span><span class="token keyword">UPDATE</span> setup_consumers <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看当前server正在做什么"><a href="#查看当前server正在做什么" class="headerlink" title="查看当前server正在做什么"></a>查看当前server正在做什么</h4><p>当配置完成之后可以查看当前server正在做什么，可以通过查询events_waits_current表来得知，该表中每个线程只包含一行数据，用于显示每个线程的最新监视事件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> events_waits_current\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>            THREAD_ID: <span class="token number">11</span>             EVENT_ID: <span class="token number">570</span>         END_EVENT_ID: <span class="token number">570</span>           EVENT_NAME: wait<span class="token operator">/</span>synch<span class="token operator">/</span>mutex<span class="token operator">/</span><span class="token keyword">innodb</span><span class="token operator">/</span>buf_dblwr_mutex               SOURCE:           TIMER_START: <span class="token number">4508505105239280</span>            TIMER_END: <span class="token number">4508505105270160</span>           TIMER_WAIT: <span class="token number">30880</span>                SPINS: <span class="token boolean">NULL</span>        OBJECT_SCHEMA: <span class="token boolean">NULL</span>          OBJECT_NAME: <span class="token boolean">NULL</span>           INDEX_NAME: <span class="token boolean">NULL</span>          OBJECT_TYPE: <span class="token boolean">NULL</span>OBJECT_INSTANCE_BEGIN: <span class="token number">67918392</span>     NESTING_EVENT_ID: <span class="token boolean">NULL</span>   NESTING_EVENT_TYPE: <span class="token boolean">NULL</span>            OPERATION: <span class="token keyword">lock</span>      NUMBER_OF_BYTES: <span class="token boolean">NULL</span>                FLAGS: <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该信息表示线程id为11的线程正在等待buf_dblwr_mutex锁，等待事件为30880<br>属性说明：</p><ul><li>id:事件来自哪个线程，事件编号是多少</li><li>event_name:表示检测到的具体的内容</li><li>source:表示这个检测代码在哪个源文件中以及行号</li><li>timer_start:表示该事件的开始时间</li><li>timer_end:表示该事件的结束时间</li><li>timer_wait:表示该事件总的花费时间</li></ul><p>注意：_current表中每个线程只保留一条记录，一旦线程完成工作，该表中不会再记录该线程的事件信息</p><h4 id="查看每个线程已经执行完成的事件信息"><a href="#查看每个线程已经执行完成的事件信息" class="headerlink" title="查看每个线程已经执行完成的事件信息"></a>查看每个线程已经执行完成的事件信息</h4><p>_history表中记录每个线程应该执行完成的事件信息，但每个线程的事件信息只会记录10条，再多就会被覆盖，*_history_long表中记录所有线程的事件信息，但总记录数量是10000，超过就会被覆盖掉</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> thread_id<span class="token punctuation">,</span>event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>timer_wait <span class="token keyword">from</span> events_waits_history <span class="token keyword">order</span> <span class="token keyword">by</span> thread_id <span class="token keyword">limit</span> <span class="token number">21</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看事件的汇总信息"><a href="#查看事件的汇总信息" class="headerlink" title="查看事件的汇总信息"></a>查看事件的汇总信息</h4><p>summary表提供所有事件的汇总信息，该组中的表以不同的方式汇总事件数据（如：按用户，按主机，按线程等等）。例如：要查看哪些instruments占用最多的时间，可以通过对events_waits_summary_global_by_event_name表的COUNT_STAR或SUM_TIMER_WAIT列进行查询（这两列是对事件的记录数执行COUNT（*）、事件记录的TIMER_WAIT列执行SUM（TIMER_WAIT）统计而来）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看被检测的对象"><a href="#查看被检测的对象" class="headerlink" title="查看被检测的对象"></a>查看被检测的对象</h4><p>instance表记录了哪些类型的对象会被检测。这些对象在被server使用时，在该表中将会产生一条事件记录，例如，file_instances表列出了文件I&#x2F;O操作及其关联文件名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> file_instances <span class="token keyword">limit</span> <span class="token number">20</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用配置项的参数说明"><a href="#常用配置项的参数说明" class="headerlink" title="常用配置项的参数说明"></a>常用配置项的参数说明</h3><h4 id="启动选项"><a href="#启动选项" class="headerlink" title="启动选项"></a>启动选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>performance_schema_consumer_events_statements_current&#x3D;TRUE</td><td>是否在mysql server启动时就开启events_statements_current表的记录功能(该表记录当前的语句事件信息)，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新setup_consumers配置表中的events_statements_current配置项，默认值为TRUE</td></tr><tr><td>performance_schema_consumer_events_statements_history&#x3D;TRUE</td><td>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件短历史信息，默认为TRUE</td></tr><tr><td>performance_schema_consumer_events_stages_history_long&#x3D;FALSE</td><td>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件长历史信息，默认为FALSE</td></tr><tr><td>*</td><td>除了statement(语句)事件之外，还支持：wait(等待)事件、state(阶段)事件、transaction(事务)事件，他们与statement事件一样都有三个启动项分别进行配置，但这些等待事件默认未启用，如果需要在MySQL Server启动时一同启动，则通常需要写进my.cnf配置文件中</td></tr><tr><td>performance_schema_consumer_global_instrumentation&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启全局表（如：mutex_instances、rwlock_instances、cond_instances、file_instances、users、hostsaccounts、socket_summary_by_event_name、file_summary_by_instance等大部分的全局对象计数统计和事件汇总统计信息表 ）的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新全局配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_consumer_statements_digest&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启events_statements_summary_by_digest 表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新digest配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_consumer_thread_instrumentation&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启events_xxx_summary_by_yyy_by_event_name表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新线程配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_instrument[&#x3D;name]</td><td>是否在MySQL Server启动时就启用某些采集器，由于instruments配置项多达数千个，所以该配置项支持key-value模式，还支持%号进行通配等</td></tr></tbody></table><p>注意，这些启动选项要生效的前提是，需要设置performance_schema&#x3D;ON。另外，这些启动选项虽然无法使用show variables语句查看，但我们可以通过setup_instruments和setup_consumers表查询这些选项指定的值。</p><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%performance_schema%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重要的属性解释</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>performance_schema&#x3D;ON</td><td>控制performance_schema功能的开关，要使用MySQL的performance_schema，需要在mysqld启动时启用，以启用事件收集功能<br/>该参数在5.7.x之前支持performance_schema的版本中默认关闭，5.7.x版本开始默认开启<br/>注意：如果mysqld在初始化performance_schema时发现无法分配任何相关的内部缓冲区，则performance_schema将自动禁用，并将performance_schema设置为OFF</td></tr><tr><td>performance_schema_digests_size&#x3D;10000</td><td>控制events_statements_summary_by_digest表中的最大行数。如果产生的语句摘要信息超过此最大值，便无法继续存入该表，此时performance_schema会增加状态变量</td></tr><tr><td>performance_schema_events_statements_history_long_size&#x3D;10000</td><td>控制events_statements_history_long表中的最大行数，该参数控制所有会话在events_statements_history_long表中能够存放的总事件记录数，超过这个限制之后，最早的记录将被覆盖</td></tr><tr><td>performance_schema_events_statements_history_size&#x3D;10</td><td>控制events_statements_history表中单个线程（会话）的最大行数，该参数控制单个会话在events_statements_history表中能够存放的事件记录数，超过这个限制之后，单个会话最早的记录将被覆盖</td></tr><tr><td>performance_schema_max_digest_length&#x3D;1024</td><td>用于控制标准化形式的SQL语句文本在存入performance_schema时的限制长度，该变量与max_digest_length变量相关(max_digest_length变量含义请自行查阅相关资料)<br/>全局变量，只读变量，默认值1024字节，整型值，取值范围0~1048576</td></tr><tr><td>performance_schema_max_sql_text_length&#x3D;1024</td><td>控制存入events_statements_current，events_statements_history和events_statements_history_long语句事件表中的SQL_TEXT列的最大SQL长度字节数。 超出系统变量performance_schema_max_sql_text_length的部分将被丢弃，不会记录，一般情况下不需要调整该参数，除非被截断的部分与其他SQL比起来有很大差异<br/>全局变量，只读变量，整型值，默认值为1024字节，取值范围为0~1048576，5.7.6版本引入<br/>降低系统变量performance_schema_max_sql_text_length值可以减少内存使用，但如果汇总的SQL中，被截断部分有较大差异，会导致没有办法再对这些有较大差异的SQL进行区分。 增加该系统变量值会增加内存使用，但对于汇总SQL来讲可以更精准地区分不同的部分。</td></tr></tbody></table><h3 id="重要配置表的相关说明"><a href="#重要配置表的相关说明" class="headerlink" title="重要配置表的相关说明"></a>重要配置表的相关说明</h3><p>配置表之间存在相互关联关系</p><h4 id="performance-timers表"><a href="#performance-timers表" class="headerlink" title="performance_timers表"></a>performance_timers表</h4><p>performance_timers表中记录了server中有哪些可用的事件计时器</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> performance_timers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>timer_name</td><td>表示可用计时器名称，CYCLE是基于CPU周期计数器的定时器</td></tr><tr><td>timer_frequency</td><td>表示每秒钟对应的计时器单位的数量,CYCLE计时器的换算值与CPU的频率相关</td></tr><tr><td>timer_resolution</td><td>计时器精度值，表示在每个计时器被调用时额外增加的值</td></tr><tr><td>timer_overhead</td><td>表示在使用定时器获取事件时开销的最小周期值</td></tr></tbody></table><h4 id="setup-timers表"><a href="#setup-timers表" class="headerlink" title="setup_timers表"></a>setup_timers表</h4><p>setup_timers表中记录当前使用的事件计时器信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_timers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>计时器类型，对应某个事件类别</td></tr><tr><td>timer_name</td><td>计时器类型名称</td></tr></tbody></table><h4 id="setup-consumers表"><a href="#setup-consumers表" class="headerlink" title="setup_consumers表"></a>setup_consumers表</h4><p>setup_consumers表中列出了consumers可配置列表项</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_consumers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>NAME</td><td>consumers配置名称</td></tr><tr><td>ENABLED</td><td>consumers是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。</td></tr></tbody></table><h4 id="setup-instruments-表"><a href="#setup-instruments-表" class="headerlink" title="setup_instruments 表"></a>setup_instruments 表</h4><p>setup_instruments 表列出了instruments 列表配置项，即代表了哪些事件支持被收集：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_instruments<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>NAME</td><td>instruments名称，instruments名称可能具有多个部分并形成层次结构</td></tr><tr><td>ENABLED</td><td>instrumetns是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。如果设置为NO，则这个instruments不会被执行，不会产生任何的事件信息</td></tr><tr><td>TIMED</td><td>instruments是否收集时间信息，有效值为YES或NO，此列可以使用UPDATE语句修改，如果设置为NO，则这个instruments不会收集时间信息</td></tr></tbody></table><h4 id="setup-actors表"><a href="#setup-actors表" class="headerlink" title="setup_actors表"></a>setup_actors表</h4><p>setup_actors表的初始内容是匹配任何用户和主机，因此对于所有前台线程，默认情况下启用监视和历史事件收集功能</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_actors<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>HOST</td><td>与grant语句类似的主机名，一个具体的字符串名字，或使用“％”表示“任何主机”</td></tr><tr><td>USER</td><td>一个具体的字符串名称，或使用“％”表示“任何用户”</td></tr><tr><td>ROLE</td><td>当前未使用，MySQL 8.0中才启用角色功能</td></tr><tr><td>ENABLED</td><td>是否启用与HOST，USER，ROLE匹配的前台线程的监控功能，有效值为：YES或NO</td></tr><tr><td>HISTORY</td><td>是否启用与HOST， USER，ROLE匹配的前台线程的历史事件记录功能，有效值为：YES或NO</td></tr></tbody></table><h4 id="setup-objects表"><a href="#setup-objects表" class="headerlink" title="setup_objects表"></a>setup_objects表</h4><p>setup_objects表控制performance_schema是否监视特定对象。默认情况下，此表的最大行数为100行。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_objects<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>OBJECT_TYPE</td><td>instruments类型，有效值为：“EVENT”（事件调度器事件）、“FUNCTION”（存储函数）、“PROCEDURE”（存储过程）、“TABLE”（基表）、“TRIGGER”（触发器），TABLE对象类型的配置会影响表I&#x2F;O事件（wait&#x2F;io&#x2F;table&#x2F;sql&#x2F;handler instrument）和表锁事件（wait&#x2F;lock&#x2F;table&#x2F;sql&#x2F;handler instrument）的收集</td></tr><tr><td>OBJECT_SCHEMA</td><td>某个监视类型对象涵盖的数据库名称，一个字符串名称，或“％”(表示“任何数据库”)</td></tr><tr><td>OBJECT_NAME</td><td>某个监视类型对象涵盖的表名，一个字符串名称，或“％”(表示“任何数据库内的对象”)</td></tr><tr><td>ENABLED</td><td>是否开启对某个类型对象的监视功能，有效值为：YES或NO。此列可以修改</td></tr><tr><td>TIMED</td><td></td></tr></tbody></table><h4 id="threads表"><a href="#threads表" class="headerlink" title="threads表"></a>threads表</h4><p>threads表对于每个server线程生成一行包含线程相关的信息，</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> threads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>THREAD_ID</td><td>线程的唯一标识符（ID）</td></tr><tr><td>NAME</td><td>与server中的线程检测代码相关联的名称(注意，这里不是instruments名称)</td></tr><tr><td>TYPE</td><td>线程类型，有效值为：FOREGROUND、BACKGROUND。分别表示前台线程和后台线程</td></tr><tr><td>PROCESSLIST_ID</td><td>对应INFORMATION_SCHEMA.PROCESSLIST表中的ID列</td></tr><tr><td>PROCESSLIST_USER</td><td>与前台线程相关联的用户名，对于后台线程为NULL</td></tr><tr><td>PROCESSLIST_HOST</td><td>与前台线程关联的客户端的主机名，对于后台线程为NULL</td></tr><tr><td>PROCESSLIST_DB</td><td>线程的默认数据库，如果没有，则为NULL</td></tr><tr><td>PROCESSLIST_COMMAND</td><td>对于前台线程，该值代表着当前客户端正在执行的command类型，如果是sleep则表示当前会话处于空闲状态</td></tr><tr><td>PROCESSLIST_TIME</td><td>当前线程已处于当前线程状态的持续时间（秒）</td></tr><tr><td>PROCESSLIST_STATE</td><td>表示线程正在做什么事情</td></tr><tr><td>PROCESSLIST_INFO</td><td>线程正在执行的语句，如果没有执行任何语句，则为NULL</td></tr><tr><td>PARENT_THREAD_ID</td><td>如果这个线程是一个子线程（由另一个线程生成），那么该字段显示其父线程ID</td></tr><tr><td>ROLE</td><td>暂未使用</td></tr><tr><td>INSTRUMENTED</td><td>线程执行的事件是否被检测。有效值：YES、NO</td></tr><tr><td>HISTORY</td><td>是否记录线程的历史事件。有效值：YES、NO</td></tr><tr><td>THREAD_OS_ID</td><td>由操作系统层定义的线程或任务标识符（ID）</td></tr></tbody></table><p>注意：在performance_schema库中还包含了很多其他的库和表，能对数据库的性能做完整的监控，大家需要参考官网详细了解。</p><h3 id="performance-schema实践操作"><a href="#performance-schema实践操作" class="headerlink" title="performance_schema实践操作"></a>performance_schema实践操作</h3><p>基本了解了表的相关信息之后，可以通过这些表进行实际的查询操作来进行实际的分析。</p><h4 id="哪类的SQL执行最多？"><a href="#哪类的SQL执行最多？" class="headerlink" title="哪类的SQL执行最多？"></a>哪类的SQL执行最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>FIRST_SEEN<span class="token punctuation">,</span>LAST_SEEN <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL的平均响应时间最多？"><a href="#哪类SQL的平均响应时间最多？" class="headerlink" title="哪类SQL的平均响应时间最多？"></a>哪类SQL的平均响应时间最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL排序记录数最多？"><a href="#哪类SQL排序记录数最多？" class="headerlink" title="哪类SQL排序记录数最多？"></a>哪类SQL排序记录数最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_SORT_ROWS <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL扫描记录数最多？"><a href="#哪类SQL扫描记录数最多？" class="headerlink" title="哪类SQL扫描记录数最多？"></a>哪类SQL扫描记录数最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_EXAMINED <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL使用临时表最多？"><a href="#哪类SQL使用临时表最多？" class="headerlink" title="哪类SQL使用临时表最多？"></a>哪类SQL使用临时表最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_CREATED_TMP_TABLES<span class="token punctuation">,</span>SUM_CREATED_TMP_DISK_TABLES <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL返回结果集最多？"><a href="#哪类SQL返回结果集最多？" class="headerlink" title="哪类SQL返回结果集最多？"></a>哪类SQL返回结果集最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_SENT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪个表物理IO最多？"><a href="#哪个表物理IO最多？" class="headerlink" title="哪个表物理IO最多？"></a>哪个表物理IO最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> file_name<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_READ<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">FROM</span> file_summary_by_instance <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_NUMBER_OF_BYTES_READ <span class="token operator">+</span> SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪个表逻辑IO最多？"><a href="#哪个表逻辑IO最多？" class="headerlink" title="哪个表逻辑IO最多？"></a>哪个表逻辑IO最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> object_name<span class="token punctuation">,</span>COUNT_READ<span class="token punctuation">,</span>COUNT_WRITE<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>SUM_TIMER_WAIT <span class="token keyword">FROM</span> table_io_waits_summary_by_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sum_timer_wait <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个索引访问最多？"><a href="#哪个索引访问最多？" class="headerlink" title="哪个索引访问最多？"></a>哪个索引访问最多？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>COUNT_INSERT<span class="token punctuation">,</span>COUNT_UPDATE<span class="token punctuation">,</span>COUNT_DELETE <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个索引从来没有用过？"><a href="#哪个索引从来没有用过？" class="headerlink" title="哪个索引从来没有用过？"></a>哪个索引从来没有用过？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">WHERE</span> INDEX_NAME <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> COUNT_STAR <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> OBJECT_SCHEMA <span class="token operator">&lt;></span> <span class="token string">'mysql'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个等待事件消耗时间最多？"><a href="#哪个等待事件消耗时间最多？" class="headerlink" title="哪个等待事件消耗时间最多？"></a>哪个等待事件消耗时间最多？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>SUM_TIMER_WAIT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name <span class="token keyword">WHERE</span> event_name <span class="token operator">!=</span> <span class="token string">'idle'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息"><a href="#剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息" class="headerlink" title="剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息"></a>剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_ID<span class="token punctuation">,</span>sql_text <span class="token keyword">FROM</span> events_statements_history <span class="token keyword">WHERE</span> sql_text <span class="token operator">LIKE</span> <span class="token string">'%count(*)%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看每个阶段的时间消耗"><a href="#查看每个阶段的时间消耗" class="headerlink" title="查看每个阶段的时间消耗"></a>查看每个阶段的时间消耗</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>EVENT_NAME<span class="token punctuation">,</span>SOURCE<span class="token punctuation">,</span>TIMER_END <span class="token operator">-</span> TIMER_START <span class="token keyword">FROM</span> events_stages_history_long <span class="token keyword">WHERE</span> NESTING_EVENT_ID <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看每个阶段的锁等待情况"><a href="#查看每个阶段的锁等待情况" class="headerlink" title="查看每个阶段的锁等待情况"></a>查看每个阶段的锁等待情况</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>source<span class="token punctuation">,</span>timer_wait<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>nesting_event_id <span class="token keyword">FROM</span> events_waits_history_long <span class="token keyword">WHERE</span> nesting_event_id <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="看懂mysql执行计划"><a href="#看懂mysql执行计划" class="headerlink" title="看懂mysql执行计划"></a>看懂mysql执行计划</h2><p>​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。</p><p>​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。</p><p>​   官网地址： <a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html">https://dev.mysql.com/doc/refman/5.5/en/explain-output.html</a> </p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*Navicat MySQL Data TransferSource Server         : mybatisSource Server Version : 50722Source Host           : localhost:3306Source Database       : dempTarget Server Type    : MYSQLTarget Server Version : 50722File Encoding         : 65001Date: 2020-02-11 20:05:02*/</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for dept</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DNAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>LOC<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of dept</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'ACCOUNTING'</span><span class="token punctuation">,</span> <span class="token string">'NEW YORK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'RESEARCH'</span><span class="token punctuation">,</span> <span class="token string">'DALLAS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'SALES'</span><span class="token punctuation">,</span> <span class="token string">'CHICAGO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'40'</span><span class="token punctuation">,</span> <span class="token string">'OPERATIONS'</span><span class="token punctuation">,</span> <span class="token string">'BOSTON'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for emp</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>ENAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>JOB<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>MGR<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>HIREDATE<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>SAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>COMM<span class="token punctuation">`</span></span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of emp</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7369'</span><span class="token punctuation">,</span> <span class="token string">'SMITH'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7902'</span><span class="token punctuation">,</span> <span class="token string">'1980-12-17'</span><span class="token punctuation">,</span> <span class="token string">'800.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7499'</span><span class="token punctuation">,</span> <span class="token string">'ALLEN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-20'</span><span class="token punctuation">,</span> <span class="token string">'1600.00'</span><span class="token punctuation">,</span> <span class="token string">'300.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7521'</span><span class="token punctuation">,</span> <span class="token string">'WARD'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-22'</span><span class="token punctuation">,</span> <span class="token string">'1250.00'</span><span class="token punctuation">,</span> <span class="token string">'500.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7566'</span><span class="token punctuation">,</span> <span class="token string">'JONES'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-02'</span><span class="token punctuation">,</span> <span class="token string">'2975.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7654'</span><span class="token punctuation">,</span> <span class="token string">'MARTIN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-28'</span><span class="token punctuation">,</span> <span class="token string">'1250.00'</span><span class="token punctuation">,</span> <span class="token string">'1400.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'BLAKE'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2850.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7782'</span><span class="token punctuation">,</span> <span class="token string">'CLARK'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-06'</span><span class="token punctuation">,</span> <span class="token string">'2450.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'KING'</span><span class="token punctuation">,</span> <span class="token string">'PRESIDENT'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'1981-11-17'</span><span class="token punctuation">,</span> <span class="token string">'5000.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7844'</span><span class="token punctuation">,</span> <span class="token string">'TURNER'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-08'</span><span class="token punctuation">,</span> <span class="token string">'1500.00'</span><span class="token punctuation">,</span> <span class="token string">'0.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7900'</span><span class="token punctuation">,</span> <span class="token string">'JAMES'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-12-03'</span><span class="token punctuation">,</span> <span class="token string">'950.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7902'</span><span class="token punctuation">,</span> <span class="token string">'FORD'</span><span class="token punctuation">,</span> <span class="token string">'ANALYST'</span><span class="token punctuation">,</span> <span class="token string">'7566'</span><span class="token punctuation">,</span> <span class="token string">'1981-12-03'</span><span class="token punctuation">,</span> <span class="token string">'3000.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7934'</span><span class="token punctuation">,</span> <span class="token string">'MILLER'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7782'</span><span class="token punctuation">,</span> <span class="token string">'1982-01-23'</span><span class="token punctuation">,</span> <span class="token string">'1300.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for salgrade</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>GRADE<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>LOSAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>HISAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>GRADE<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of salgrade</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'700'</span><span class="token punctuation">,</span> <span class="token string">'1200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'1201'</span><span class="token punctuation">,</span> <span class="token string">'1400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'1401'</span><span class="token punctuation">,</span> <span class="token string">'2000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'2001'</span><span class="token punctuation">,</span> <span class="token string">'3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'3001'</span><span class="token punctuation">,</span> <span class="token string">'9999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行计划中包含的信息"><a href="#执行计划中包含的信息" class="headerlink" title="执行计划中包含的信息"></a>执行计划中包含的信息</h3><table><thead><tr><th align="center">列</th><th>含义</th></tr></thead><tbody><tr><td align="center">id</td><td>select查询的序列号</td></tr><tr><td align="center">select_type</td><td>查询的类型，是普通查询还是联合查询还是子查询</td></tr><tr><td align="center">table</td><td>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</td></tr><tr><td align="center">partitions</td><td>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</td></tr><tr><td align="center">type</td><td>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描</td></tr><tr><td align="center">possible_keys</td><td>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</td></tr><tr><td align="center">key</td><td>实际使用的索引，如果为null，则没有使用索引</td></tr><tr><td align="center">key_len</td><td>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好</td></tr><tr><td align="center">ref</td><td>显示索引的哪一列被使用了，如果可能的话，是一个常数</td></tr><tr><td align="center">rows</td><td>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数</td></tr><tr><td align="center">filtered</td><td>某个表经过搜索条件过滤后剩余记录条数的百分比，rows 乘以 filtered 的结果表示要与下表连接的行数</td></tr><tr><td align="center">extra</td><td>额外的信息</td></tr></tbody></table><h4 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h4><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><ul><li>如果id相同，那么执行顺序从上到下</li><li>如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>同时存在id相同和不同的：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</li></ul><h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><strong>select_type</strong></h4><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><ul><li><code>sample</code>：简单的查询，不包含子查询和union</li><li><code>primary</code>：查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</li><li><code>union</code>：若第二个select出现在union之后，则被标记为union</li><li><code>dependent union</code> ： 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</li><li><code>union result</code>：从union表获取结果的select</li><li><code>subquery</code>：在select或者where列表中包含子查询</li><li><code>dependent subquery</code>：subquery的子查询要受到外部表查询的影响</li><li><code>derived</code>：from子句中出现的子查询</li><li><code>uncacheable subquery</code>：表示使用子查询的结果不能被缓存</li><li><code>uncacheable union</code>：表示union的查询结果不能被缓存：sql语句未验证</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- sample:简单的查询，不包含子查询和union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">-- union:若第二个select出现在union之后，则被标记为union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">-- dependent union : 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>empno  <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment">-- union result:从union表获取结果的select</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">-- subquery:在select或者where列表中包含子查询</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">-- dependent subquery:subquery的子查询要受到外部表查询的影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- DERIVED: from子句中出现的子查询，也叫做派生类，</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">-- UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span>@<span class="token variable">@sort_buffer_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h4><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</p><ul><li>如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</li><li>表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</li><li>当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</li></ul><h4 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a><strong>partitions</strong></h4><p>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h4><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p><ul><li><code>system</code>：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</li><li><code>const</code>：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候是这种情况</li><li><code>eq_ref</code>：使用唯一性索引进行数据查找</li><li><code>ref</code>：使用了非唯一性索引进行数据的查找</li><li><code>fulltext</code></li><li><code>ref_or_null</code>：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</li><li><code>index_merge</code>：在查询过程中需要多个索引组合使用</li><li><code>unique_subquery</code>：该连接类型类似与index_subquery,使用的是唯一索引</li><li><code>index_subquery</code>：利用索引来关联子查询，不再扫描全表</li><li><code>range</code>：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描</li><li><code>index</code>：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，或者是使用了索引进行排序，这样就避免数据的重排序</li><li><code>all</code>：全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</li></ul><p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, &lt;>, >, >=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">between</span> <span class="token number">7000</span> <span class="token operator">and</span> <span class="token number">7500</span><span class="token punctuation">;</span><span class="token comment">-- index_subquery：利用索引来关联子查询，不再扫描全表</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> t_job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span><span class="token comment">-- ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> mgr <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> mgr<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment">-- ref：使用了非唯一性索引进行数据的查找</span> <span class="token keyword">create</span> <span class="token keyword">index</span> idx_3 <span class="token keyword">on</span> emp<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e<span class="token punctuation">,</span>dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span>d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">-- eq_ref ：使用唯一性索引进行数据查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>emp2 <span class="token keyword">where</span> emp<span class="token punctuation">.</span>empno <span class="token operator">=</span> emp2<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token comment">-- const：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候会有这个type</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span> <span class="token comment">-- system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a><strong>possible_keys</strong></h4><p>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h4><p>实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h4><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h4><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a><strong>rows</strong></h4><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a><strong>filtered</strong></h4><p>某个表经过搜索条件<code>过滤后剩余记录条数</code>的百分比，这个<code>过滤后剩余记录条数</code>，是需要用来对下一张表进行连接的行数。什么意思呢？</p><ul><li>对于单表查询来说，这个filtered列的值没什么意义。</li><li>对于多表联合查询，假设表1扫描的rows是10000行，filteres是20%，那么表示要与表2进行连接的行数是：10000 x 20% &#x3D; 2000条记录。</li></ul><h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a><strong>extra</strong></h4><p>包含额外的信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- using filesort :说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span><span class="token comment">-- using temporary:需要使用临时表来保存中间结果，查询完成之后把临时表删除</span><span class="token keyword">explain</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> ename<span class="token punctuation">;</span><span class="token comment">-- using index: 这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- using where:使用where进行条件过滤</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- using join buffer :使用连接缓存，情况没有模拟出来</span><span class="token comment">-- impossible where：where语句的结果总是false</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7469</span><span class="token punctuation">;</span><span class="token comment">-- using MRR：使用了Multi-Range Read 优化 (MRR)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;资料：打开&lt;/p&gt;
&lt;h2 id=&quot;7-MySQL中-in-和-exists-的区别？&quot;&gt;&lt;a href=&quot;#7-MySQL中-in-和-exists-的区别？&quot; class=&quot;headerlink&quot; title=&quot;7.MySQL中 in 和 exists 的区别</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="性能调优" scheme="https://zhuansun.github.io/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
    <category term="调优" scheme="https://zhuansun.github.io/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>oracle查询表的字段名类型注释</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/ORACLE/oracle%E6%9F%A5%E8%AF%A2%E8%A1%A8%E7%9A%84%E5%AD%97%E6%AE%B5%E5%90%8D%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/ORACLE/oracle%E6%9F%A5%E8%AF%A2%E8%A1%A8%E7%9A%84%E5%AD%97%E6%AE%B5%E5%90%8D%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A/</id>
    <published>2023-06-01T10:14:17.806Z</published>
    <updated>2023-06-01T10:14:17.806Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">.</span>COLUMN_ID<span class="token punctuation">,</span> a<span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span> a<span class="token punctuation">.</span>COLUMN_NAME<span class="token punctuation">,</span> a<span class="token punctuation">.</span>DATA_TYPE<span class="token punctuation">,</span> a<span class="token punctuation">.</span>DATA_LENGTH<span class="token punctuation">,</span> a<span class="token punctuation">.</span>NULLABLE<span class="token punctuation">,</span>b<span class="token punctuation">.</span>COMMENTS <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> COLUMN_ID<span class="token punctuation">,</span> TABLE_NAME<span class="token punctuation">,</span> COLUMN_NAME<span class="token punctuation">,</span> DATA_TYPE<span class="token punctuation">,</span> DATA_LENGTH<span class="token punctuation">,</span> NULLABLE  <span class="token keyword">FROM</span> ALL_TAB_COLUMNS <span class="token keyword">WHERE</span> TABLE_NAME <span class="token operator">=</span> <span class="token string">'这里改成表名'</span><span class="token punctuation">)</span> a <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> TABLE_NAME<span class="token punctuation">,</span>COLUMN_NAME<span class="token punctuation">,</span>COMMENTS<span class="token keyword">from</span> user_col_comments<span class="token keyword">where</span> Table_Name<span class="token operator">=</span><span class="token string">'这里改成表名'</span><span class="token punctuation">)</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">=</span> b<span class="token punctuation">.</span>COLUMN_NAME <span class="token keyword">order</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>COLUMN_ID <span class="token keyword">asc</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; a&lt;span class</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="ORACLE" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/ORACLE/"/>
    
    
    <category term="oracle" scheme="https://zhuansun.github.io/tags/oracle/"/>
    
    <category term="表结构" scheme="https://zhuansun.github.io/tags/%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>mysql的问题汇总</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2023-06-01T10:14:17.785Z</published>
    <updated>2023-06-01T10:14:17.785Z</updated>
    
    <content type="html"><![CDATA[<p>准备从45将的评论区找问题，汇总一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;准备从45将的评论区找问题，汇总一下&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql排序字段相同导致结果不一致</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E6%8E%92%E5%BA%8F%E5%AD%97%E6%AE%B5%E7%9B%B8%E5%90%8C%E5%AF%BC%E8%87%B4%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E6%8E%92%E5%BA%8F%E5%AD%97%E6%AE%B5%E7%9B%B8%E5%90%8C%E5%AF%BC%E8%87%B4%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4/</id>
    <published>2023-06-01T10:14:17.715Z</published>
    <updated>2023-06-01T10:14:17.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql排序字段相同导致结果不一致"><a href="#mysql排序字段相同导致结果不一致" class="headerlink" title="mysql排序字段相同导致结果不一致"></a>mysql排序字段相同导致结果不一致</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近公司业务有这么一个功能：对5000条数据进行批量导入，然后通过表格的形式展示在前端，需要根据创建时间进行排序。</p><p>所以，很简单的我们会想到</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ORDER BY gmt_create DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是在实际的使用中，我发现一个问题，就是当时间相同的时候，这个排序是不确定的，是随机的。</p><p>我们看一个例子：</p><ul><li>首先这两条sql语句是一样的，只不过一个查询 <code>*</code> 一个只查询<code>id</code>。那么理所当然的：他们的结果应该是一样的。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM customer WHERE employee_id&#x3D;39 AND assigned&#x3D;1 and status&#x3D;0 ORDER BY gmt_last_transfer DESC ;SELECT id FROM customer WHERE employee_id&#x3D;39 AND assigned&#x3D;1 and status&#x3D;0 ORDER BY gmt_last_transfer DESC ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="mysql排序字段相同导致结果不一致.assets/image-20220831203859308.png" alt="image-20220831203859308" style="zoom:50%;" /><img src="mysql排序字段相同导致结果不一致.assets/image-20220831203918310.png" alt="image-20220831203918310" style="zoom:50%;" /><p>我们可以看到两次的查询结果是不一样的。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h3 id="为什么结果不一样"><a href="#为什么结果不一样" class="headerlink" title="为什么结果不一样"></a>为什么结果不一样</h3><p>查阅了Goole和相关资料，大概总结了这种情况的原因。其实发生这种现象是“故意”设计的。</p><p>如果没有指定ORDER BY语句，则SQL Server（或任何RDBMS）不保证以特定顺序返回结果。</p><p>有些人认为，如果没有指定order by子句，行总是以聚簇索引顺序或物理磁盘顺序返回。</p><p>然而，这是不正确的，因为在查询处理期间可以改变行顺序的许多因素，例如并行的HASH连接是更改行顺序的操作符的一个很好的例子。</p><p>如果指定ORDER BY语句，SQL Server将对行进行排序，并按请求的顺序返回。</p><p>但是，如果该顺序不是确定性的，即可能有重复的值，则在每个具有相同值的组中，由于与上述相同的原因，该顺序是“随机的”。</p><h3 id="那么怎么保证顺序唯一呢？"><a href="#那么怎么保证顺序唯一呢？" class="headerlink" title="那么怎么保证顺序唯一呢？"></a>那么怎么保证顺序唯一呢？</h3><ul><li><p>不使用可能重复的字段进行排序，即不用时间排序，而使用主键进行排序。</p></li><li><p>但是在某些必须使用时间排序，应该怎么办呢？</p></li><li><p>这个时候就需要使用多字段排序的功能。</p></li><li><p>所谓的多字段排序，其实也很简单。</p></li></ul><p>mysql多个字段排序：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table order by id desc,name desc;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多字字段排序只需要添加多个排序条件，并且每个排序的条件之前用逗号分开。</p><blockquote><p>order by id desc,name desc; </p></blockquote><p>表示先按照id降序排序，再按照name降序排序。</p><p>同理：</p><blockquote><p>order by id desc,name asc;</p></blockquote><p> 表示先按照id降序排序，再按照name升序排序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql排序字段相同导致结果不一致&quot;&gt;&lt;a href=&quot;#mysql排序字段相同导致结果不一致&quot; class=&quot;headerlink&quot; title=&quot;mysql排序字段相同导致结果不一致&quot;&gt;&lt;/a&gt;mysql排序字段相同导致结果不一致&lt;/h2&gt;&lt;h3 id=&quot;前</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql的事务从入门到入土</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-06-01T10:14:17.698Z</published>
    <updated>2023-06-01T10:14:17.698Z</updated>
    
    <content type="html"><![CDATA[<p>#### 事务相关 * </p><p>03 | 事务隔离：为什么你改了我还看不见？ * </p><p>08 | 事务到底是隔离的还是不隔离的？ * </p><p>20 | 幻读是什么，幻读有什么问题？</p><p>undo log</p><p>undolog只会记录 insert delete update 的语句，DDL不会记录undo log；这个和undo log 的作用有关</p><p>以下摘录自官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-undo-logs.html">14.6.7 Undo Logs</a></p><pre class="line-numbers language-none"><code class="language-none">A transaction is assigned up to four undo logs, one for each of the following operation types:INSERT operations on user-defined tablesUPDATE and DELETE operations on user-defined tablesINSERT operations on user-defined temporary tablesUPDATE and DELETE operations on user-defined temporary tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#### 事务相关 * &lt;/p&gt;
&lt;p&gt;03 | 事务隔离：为什么你改了我还看不见？ * &lt;/p&gt;
&lt;p&gt;08 | 事务到底是隔离的还是不隔离的？ * &lt;/p&gt;
&lt;p&gt;20 | 幻读是什么，幻读有什么问题？&lt;/p&gt;
&lt;p&gt;undo log&lt;/p&gt;
&lt;p&gt;undolog只会记</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="事务" scheme="https://zhuansun.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="MVCC" scheme="https://zhuansun.github.io/tags/MVCC/"/>
    
    <category term="幻读" scheme="https://zhuansun.github.io/tags/%E5%B9%BB%E8%AF%BB/"/>
    
    <category term="隔离级别" scheme="https://zhuansun.github.io/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>mysql建表的utf8和utf8mb4有什么区别</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E5%BB%BA%E8%A1%A8%E7%9A%84utf8%E5%92%8Cutf8mb4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E5%BB%BA%E8%A1%A8%E7%9A%84utf8%E5%92%8Cutf8mb4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</id>
    <published>2023-06-01T10:14:17.687Z</published>
    <updated>2023-06-01T10:14:17.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql建表的utf8和utf8mb4有什么区别"><a href="#mysql建表的utf8和utf8mb4有什么区别" class="headerlink" title="mysql建表的utf8和utf8mb4有什么区别"></a>mysql建表的utf8和utf8mb4有什么区别</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近自己搞了一个项目，买了一套腾讯云的数据库，很便宜。但是配置也很低。勉强够用吧。</p><p>然后在创建数据库的过程中，观察到了一个现象，mysql内置的编码集包含了utf8和utf8mb4，于是做了一下比较。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>可以简单的理解 utf8mb4 是目前最大的一个字符编码,支持任意文字.</p><h3 id="为什么会有UTF8MB4？"><a href="#为什么会有UTF8MB4？" class="headerlink" title="为什么会有UTF8MB4？"></a>为什么会有UTF8MB4？</h3><p>既然utf8应付日常使用完全没有问题，那为什么还要使用utf8mb4呢?低版本的MySQL支持的utf8编码，最大字符长度为 3 字节，如果遇到 4字节的字符就会出现错误了。三个字节的 UTF-8 最大能编码的 Unicode 字符是0xFFFF，也就是Unicode中的基本多文平面（BMP）。也就是说，任何不在基本多文平面的 Unicode字符，都无法使用MySQL原有的 utf8字符集存储。这些不在BMP中的字符包括哪些呢？最常见的就是Emoji 表情（Emoji 是一种特殊的 Unicode 编码，常见于 ios 和 android手机上），和一些不常用的汉字，以及任何新增的 Unicode 字符等等。</p><h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><p>理论上讲， UTF-8 格式使用一至六个字节，最大能编码 31 位字符。最新的 UTF-8规范只使用一到四个字节，最大能编码21位，正好能够表示所有的 17个 Unicode平面。关于UTF编码，请阅读《常见编码总结》一文。</p><p>而utf8 则是 Mysql 早期版本中支持的一种字符集，只支持最长三个字节的UTF-8字符，也就是 Unicode 中的基本多文本平面。这可能是因为在MySQL发布初期，基本多文种平面之外的字符确实很少用到。而在MySQL5.5.3版本后，要在 Mysql 中保存 4 字节长度的 UTF-8 字符，就可以使用utf8mb4字符集了。例如可以用utf8mb4字符编码直接存储emoj表情，而不是存表情的替换字符。为了获取更好的兼容性，应该总是使用 utf8mb4 而非 utf8，事实上，最新版的phpmyadmin默认字符集就是utf8mb4。诚然，对于 CHAR类型数据，使用utf8mb4 存储会多消耗一些空间。</p><h3 id="那么utf8mb4比utf8多了什么的呢"><a href="#那么utf8mb4比utf8多了什么的呢" class="headerlink" title="那么utf8mb4比utf8多了什么的呢?"></a>那么utf8mb4比utf8多了什么的呢?</h3><p>多了emoji编码支持.</p><p>如果实际用途上来看,可以给要用到emoji的库或者说表,设置utf8mb4.</p><p>比如评论要支持emoji可以用到.</p><p>建议普通表使用utf8 如果这个表需要支持emoji就使用utf8mb4</p><ul><li><p>新建mysql库或者表的时候还有一个排序规则</p></li><li><p>utf8_unicode_ci比较准确</p></li><li><p>utf8_general_ci速度比较快。</p></li></ul><p>通常情况下 utf8_general_ci的准确性就够我们用的了，在我看过很多程序源码后，发现它们大多数也用的是utf8_general_ci，所以新建数据库时一般选用utf8_general_ci就可以了如果是utf8mb4那么对应的就是 utf8mb4_general_ci，utf8mb4_unicode_ci</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql建表的utf8和utf8mb4有什么区别&quot;&gt;&lt;a href=&quot;#mysql建表的utf8和utf8mb4有什么区别&quot; class=&quot;headerlink&quot; title=&quot;mysql建表的utf8和utf8mb4有什么区别&quot;&gt;&lt;/a&gt;mysql建表的utf</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="utf8" scheme="https://zhuansun.github.io/tags/utf8/"/>
    
    <category term="utf8mb4" scheme="https://zhuansun.github.io/tags/utf8mb4/"/>
    
  </entry>
  
  <entry>
    <title>mysql中的交集差集并集</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E4%B8%AD%E7%9A%84%E4%BA%A4%E9%9B%86%E5%B7%AE%E9%9B%86%E5%B9%B6%E9%9B%86/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E4%B8%AD%E7%9A%84%E4%BA%A4%E9%9B%86%E5%B7%AE%E9%9B%86%E5%B9%B6%E9%9B%86/</id>
    <published>2023-06-01T10:14:17.684Z</published>
    <updated>2023-06-01T10:14:17.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql中的交集差集并集"><a href="#mysql中的交集差集并集" class="headerlink" title="mysql中的交集差集并集"></a>mysql中的交集差集并集</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要知道，mysql并不直接支持。</p><p>也就是没有什么 INTERSECT，EXCEPT等等等等（oracle中有）。</p><p>那么mysql怎么取交集并集和差集呢？</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>那么mysql怎么取交集并集和差集呢？</p><p>注意： mysql仅仅支持 UNION 和 UNION ALL 这两个操作。</p><p>所以，我们只能通过其他的手段对两个结果进行取交集差集和并集。</p><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><p>可以直接使用 UNION 和 UNION ALL 这两个操作。</p><p>UNION 和 UNION ALL 运算：将查询的返回组合成一个结果</p><ul><li>UNION  合并结果并且将重复的内容取唯一</li><li>UNION ALL  合并结果并且没有过滤重复内容，速度更快</li></ul><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><p>使用 UNION ALL 配合 GROUP BY 和 HAVING 进行查询</p><ul><li>两个集合的结构要一致,对应的字段数,字段类型</li><li>将两个集合用 UNION ALL 关键字合并,这里的结果是有重复的所有集</li><li>将上面的所有集 GROUP BY id</li><li>最后 HAVING COUNT(id)&#x3D;1,等于1的意思是只出现了一次,所以这个是差集,如果等于2,那么就是交集</li></ul><p>使用方法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT a.* FROM ((结果集1) UNION ALL (结果集2)) a GROUP BY xxx HAVING COUNT(xxx) &#x3D; 2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一个方法，就是使用 IN ， 这个方法应该都可以理解。就不过多解释了。</p><p>(结果集1) WHERE xxx IN (结果集2) ;</p><p>注意：使用 IN 当数据量很大的时候，效率比较差</p><p>可以参考： <a href="https://blog.csdn.net/mine_song/article/details/70184072">https://blog.csdn.net/mine_song/article/details/70184072</a></p><h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><p>使用 UNION ALL 配合 GROUP BY 和 HAVING 进行查询</p><ul><li>两个集合的结构要一致,对应的字段数,字段类型</li><li>将两个集合用 UNION ALL 关键字合并,这里的结果是有重复的所有集</li><li>将上面的所有集 GROUP BY id</li><li>最后 HAVING COUNT(id)&#x3D;1,等于1的意思是只出现了一次,所以这个是差集,如果等于2,那么就是交集</li></ul><p>使用方法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT a.* FROM ((结果集1) UNION ALL (结果集2)) a GROUP BY xxx HAVING COUNT(xxx) &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一个方法，就是使用 NOT IN ，</p><p>(结果集1) WHERE xxx NOT IN (结果集2) ;</p><p>注意：使用 NOT IN 当数据量很大的时候，效率比较差</p><p>这个方法应该都可以理解。就不过多解释了。可以参考： <a href="https://blog.csdn.net/mine_song/article/details/70184072">https://blog.csdn.net/mine_song/article/details/70184072</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql中的交集差集并集&quot;&gt;&lt;a href=&quot;#mysql中的交集差集并集&quot; class=&quot;headerlink&quot; title=&quot;mysql中的交集差集并集&quot;&gt;&lt;/a&gt;mysql中的交集差集并集&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="交集" scheme="https://zhuansun.github.io/tags/%E4%BA%A4%E9%9B%86/"/>
    
    <category term="并集" scheme="https://zhuansun.github.io/tags/%E5%B9%B6%E9%9B%86/"/>
    
    <category term="差集" scheme="https://zhuansun.github.io/tags/%E5%B7%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>mysql的SQL优化实战</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84SQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84SQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</id>
    <published>2023-06-01T10:14:17.681Z</published>
    <updated>2023-06-01T10:14:17.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的SQL优化实战"><a href="#mysql的SQL优化实战" class="headerlink" title="mysql的SQL优化实战"></a>mysql的SQL优化实战</h1><p>以下是公司实际业务上的SQL调优实战</p><h2 id="金铎项目"><a href="#金铎项目" class="headerlink" title="金铎项目"></a>金铎项目</h2><p>金铎项目是一个异常汇总平台，属于半路接手的项目，其中有很多sql都是比较复杂的，可读性差，维护性差，正好拿来练练手</p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>一下是涉及的相关表结构</p><h4 id="amp-event-log"><a href="#amp-event-log" class="headerlink" title="amp_event_log"></a>amp_event_log</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_event_log<span class="token punctuation">(</span>    id                         <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    event_id                   <span class="token keyword">bigint</span>                             <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件ID'</span><span class="token punctuation">,</span>    event_code                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件代码'</span><span class="token punctuation">,</span>    event_name                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件名称'</span><span class="token punctuation">,</span>    exception_subject          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常主体'</span><span class="token punctuation">,</span>    monitor_object_name        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'监控对象名称'</span><span class="token punctuation">,</span>    process_status             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理状态'</span><span class="token punctuation">,</span>    happen_time                <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'发生时间'</span><span class="token punctuation">,</span>    exception_level            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常等级'</span><span class="token punctuation">,</span>    event_detail               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件详情'</span><span class="token punctuation">,</span>    last_event_id              <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'上一级事件id'</span><span class="token punctuation">,</span>    timeout                    <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'超时时间'</span><span class="token punctuation">,</span>    version                    <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'版本'</span><span class="token punctuation">,</span>    push_user                  <span class="token keyword">text</span>                               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送对象'</span><span class="token punctuation">,</span>    is_push                    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否推送'</span><span class="token punctuation">,</span>    process_user               <span class="token keyword">text</span>                               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理对象'</span><span class="token punctuation">,</span>    actual_process_user        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'实际处理人'</span><span class="token punctuation">,</span>    feedback_duty_organization <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'反馈责任组织'</span><span class="token punctuation">,</span>    feedback_process_results   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'反馈处理结果'</span><span class="token punctuation">,</span>    feedback_note              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'具体原因'</span><span class="token punctuation">,</span>    start_process_time         <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'开始处理时间'</span><span class="token punctuation">,</span>    end_process_time           <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'结束处理时间'</span><span class="token punctuation">,</span>    reason                     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'原因'</span><span class="token punctuation">,</span>    create_time                <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    detail_url                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8mb4       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'明细路径'</span><span class="token punctuation">,</span>    is_transfer                <span class="token keyword">bigint</span>   <span class="token keyword">default</span> <span class="token number">0</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否转办 0：否 ，1：是'</span><span class="token punctuation">,</span>    transfer_user              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'转办人'</span><span class="token punctuation">,</span>    is_approve                 <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否审批 0:否 1:是'</span><span class="token punctuation">,</span>    process_opinion            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理意见'</span><span class="token punctuation">,</span>    evaluate                   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'评价'</span><span class="token punctuation">,</span>    approve_status             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人状态'</span><span class="token punctuation">,</span>    predict_improve_time       <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'预计改善时间'</span><span class="token punctuation">,</span>    approve_user               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人'</span><span class="token punctuation">,</span>    latest_improve_time        <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'最晚改善时间'</span><span class="token punctuation">,</span>    update_time                <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    actual_approve_user        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'实际审批人'</span><span class="token punctuation">,</span>    person_liable              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'责任人'</span><span class="token punctuation">,</span>    improve_plan               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'改善方案'</span><span class="token punctuation">,</span>    predict_improve_target     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'预计改善目标'</span><span class="token punctuation">,</span>    prov                       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'省'</span><span class="token punctuation">,</span>    city                       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'城市'</span><span class="token punctuation">,</span>    transfer_time              <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'转办时间'</span><span class="token punctuation">,</span>    feedback_process_images    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'现场处理图片'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'异常事件记录表'</span> <span class="token keyword">collate</span> <span class="token operator">=</span> utf8mb4_bin<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_actualuser_status <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>actual_process_user<span class="token punctuation">,</span> process_status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_approve_status_actual_approve_user <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>approve_status<span class="token punctuation">,</span> actual_approve_user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_city_happen_time <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>city<span class="token punctuation">,</span> happen_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_code <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>event_code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_id <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>event_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_exception_subject <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>exception_subject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_happendtime <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>happen_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="amp-site"><a href="#amp-site" class="headerlink" title="amp_site"></a>amp_site</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_site<span class="token punctuation">(</span>    id            <span class="token keyword">bigint</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点名字'</span><span class="token punctuation">,</span>    area          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    center_area   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    province      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属省'</span><span class="token punctuation">,</span>    business_area <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属的大区（浙北区）'</span><span class="token punctuation">,</span>    city          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属城市'</span><span class="token punctuation">,</span>    county        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属区'</span><span class="token punctuation">,</span>    sfcode        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'大网code'</span><span class="token punctuation">,</span>    sf_site       <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'1是0否'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> amp_site_name_index <span class="token keyword">on</span> amp_site <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="amp-event"><a href="#amp-event" class="headerlink" title="amp_event"></a>amp_event</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_event<span class="token punctuation">(</span>    id                   <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    updator              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'修改人'</span><span class="token punctuation">,</span>    update_time          <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>    create_time          <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    event_code           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常代码'</span><span class="token punctuation">,</span>    event_name           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'名字'</span><span class="token punctuation">,</span>    monitor_id           <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'监控对象id'</span><span class="token punctuation">,</span>    is_external          <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否外部渠道接入'</span><span class="token punctuation">,</span>    <span class="token keyword">rule</span>                 <span class="token keyword">text</span>                         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'触发规则'</span><span class="token punctuation">,</span>    message              <span class="token keyword">text</span>                         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'消息详情'</span><span class="token punctuation">,</span>    upgrade_rule         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'升级规则'</span><span class="token punctuation">,</span>    exception_level      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常等级'</span><span class="token punctuation">,</span>    reason               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'原因'</span><span class="token punctuation">,</span>    process_time         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理时效'</span><span class="token punctuation">,</span>    process_cycle        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理周期'</span><span class="token punctuation">,</span>    duty_organization_id <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'责任组织id'</span><span class="token punctuation">,</span>    deal_organization_id <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理组织id'</span><span class="token punctuation">,</span>    valid_time           <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'有效时间'</span><span class="token punctuation">,</span>    version              <span class="token keyword">bigint</span> <span class="token keyword">default</span> <span class="token number">1001</span>          <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'版本号'</span><span class="token punctuation">,</span>    is_history           <span class="token keyword">bigint</span> <span class="token keyword">default</span> <span class="token number">0</span>             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否历史版本:0否,1是'</span><span class="token punctuation">,</span>    detail_url           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8mb4 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'明细路径'</span><span class="token punctuation">,</span>    push_frequency       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送频率 天 ,周，双周，月'</span><span class="token punctuation">,</span>    push_day             <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送日期'</span><span class="token punctuation">,</span>    latest_improve_day   <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'最晚改善时间(天)'</span><span class="token punctuation">,</span>    is_approve           <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否审批 0:否 1:是'</span><span class="token punctuation">,</span>    approve_user         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人'</span><span class="token punctuation">,</span>    rule_explain         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3072</span><span class="token punctuation">)</span>                <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'规则说明'</span><span class="token punctuation">,</span>    push_job_id          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送岗位ID'</span><span class="token punctuation">,</span>    process_job_id       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理岗位id'</span><span class="token punctuation">,</span>    franchise_fee        <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'加盟商收入'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'异常事件表'</span> <span class="token keyword">collate</span> <span class="token operator">=</span> utf8mb4_bin<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_dealorganizationid <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>deal_organization_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_dutyorganizationid <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>duty_organization_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_code_version <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>event_code<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_monitorid <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>monitor_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化SQL一"><a href="#优化SQL一" class="headerlink" title="优化SQL一"></a>优化SQL一</h3><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>process_status <span class="token keyword">AS</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>       <span class="token function">count</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>id<span class="token punctuation">)</span>         cnt<span class="token keyword">FROM</span> amp_event_log t1<span class="token keyword">JOIN</span>     <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> amp_site <span class="token keyword">where</span> sf_site <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>     t3 <span class="token keyword">ON</span> t3<span class="token punctuation">.</span>NAME <span class="token operator">=</span> t1<span class="token punctuation">.</span>exception_subject<span class="token keyword">JOIN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> event_code<span class="token punctuation">,</span>deal_organization_id <span class="token keyword">FROM</span> amp_event <span class="token keyword">WHERE</span> is_history <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> deal_organization_id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">)</span>     t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>event_code <span class="token operator">=</span> t2<span class="token punctuation">.</span>event_code<span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>happen_time <span class="token operator">>=</span> <span class="token string">'2022-3-2 20:37:04'</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>happen_time <span class="token operator">&lt;=</span> <span class="token string">'2023-3-2 20:37:13'</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> process_status<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                                                   <span class="token operator">|</span> <span class="token keyword">key</span>            <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                            <span class="token operator">|</span> <span class="token keyword">rows</span>  <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> amp_event <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                                                   <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                           <span class="token operator">|</span>    <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1        <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_happendtime<span class="token punctuation">,</span>idx_actualuser_status<span class="token punctuation">,</span>idx_event_code<span class="token punctuation">,</span>idx_city_happen_time<span class="token punctuation">,</span>idx_exception_subject <span class="token operator">|</span> idx_event_code <span class="token operator">|</span> <span class="token number">1003</span>    <span class="token operator">|</span> fnsdmpsit<span class="token punctuation">.</span>amp_event<span class="token punctuation">.</span>event_code <span class="token operator">|</span>    <span class="token number">13</span> <span class="token operator">|</span>     <span class="token number">3.54</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                                    <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> amp_site  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> amp_site_name_index                                                                             <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                           <span class="token operator">|</span> <span class="token number">54023</span> <span class="token operator">|</span>     <span class="token number">1.00</span> <span class="token operator">|</span> Range checked <span class="token keyword">for</span> each record <span class="token punctuation">(</span><span class="token keyword">index</span> map: <span class="token number">0x2</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">warnings</span> <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析语句"><a href="#分析语句" class="headerlink" title="分析语句"></a>分析语句</h4><p>Using where; Using temporary; Using filesort</p><p>Using where </p><p>Range checked for each record (index map: 0x2)</p><ul><li><p>Using temporary</p><ul><li><code>group by</code> 语句一般会使用内部临时表，因为需要使用内部临时表存储数量；</li><li>一般情况下<code>group by</code>都是会使用临时表的，但是再<code>有些业务场景</code>下，也是可以优化成不用临时表的，所以效率会更高</li><li>【优化点一】：是否可以将这个 group by 语句取消使用内部临时表</li></ul></li><li><p>Using filesort</p><ul><li>group by 分组后默认自然顺序排序，如果不需要排序，可以改成：order by null；（8.0版本group by已经不会排序了）</li><li>所以可以根据具体的业务场景看，是否需要排序</li><li>【优化点二】：group by 语句是否可以不需要排序</li></ul></li><li><p>Using join buffer (Block Nested Loop)</p><ul><li><p>使用了join语句，而且是BNL算法，效率很低，首先看这个语句是否可以不用join</p></li><li><p>【优化点三】：是否可以避免join？从业务代码的角度进行优化？</p></li><li><p>如果join优化不了，是否可以将BNL算法优化成NLJ（BKA算法）</p></li><li><p>【优化点四】：是否可以将BNL算法优化成NLJ（BKA算法）</p></li><li><p>但是呢，即使使用了NLJ（BKA算法），效率还是不如hash-join（mysql8.0支持hash-join，效率高）</p></li><li><p>【优化点五】：是否可以通过业务代码实现hash-join</p></li></ul></li></ul><p>初次分析结论如上，先进行优化一波</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">select</span> log<span class="token punctuation">.</span>process_status <span class="token keyword">as</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>       <span class="token function">count</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>id<span class="token punctuation">)</span>         cnt<span class="token keyword">from</span> amp_event event <span class="token keyword">left</span> <span class="token keyword">join</span> amp_event_log log <span class="token keyword">on</span> event<span class="token punctuation">.</span>event_code<span class="token operator">=</span>log<span class="token punctuation">.</span>event_code<span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>  <span class="token operator">and</span> event<span class="token punctuation">.</span>is_history<span class="token operator">=</span><span class="token number">0</span>  <span class="token operator">and</span> event<span class="token punctuation">.</span>deal_organization_id<span class="token operator">=</span><span class="token number">1024</span>  <span class="token operator">and</span> log<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> log<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> log<span class="token punctuation">.</span>process_status <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                                          <span class="token operator">|</span> <span class="token keyword">key</span>            <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                        <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> event <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                                          <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                       <span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> log   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_actualuser_status<span class="token punctuation">,</span>idx_event_code<span class="token punctuation">,</span>amp_event_log_city_index<span class="token punctuation">,</span>amp_event_log_prov_index <span class="token operator">|</span> idx_event_code <span class="token operator">|</span> <span class="token number">1003</span>    <span class="token operator">|</span> fnsdmpsit<span class="token punctuation">.</span>event<span class="token punctuation">.</span>event_code <span class="token operator">|</span>   <span class="token number">13</span> <span class="token operator">|</span>    <span class="token number">12.43</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span>       t2<span class="token punctuation">.</span>event_name     <span class="token keyword">AS</span> name<span class="token punctuation">,</span>       t1<span class="token punctuation">.</span>process_status <span class="token keyword">AS</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>       t1<span class="token punctuation">.</span>cnt<span class="token keyword">FROM</span> <span class="token punctuation">(</span>         <span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span>                t<span class="token punctuation">.</span>process_status<span class="token punctuation">,</span>                t<span class="token punctuation">.</span>exception_subject<span class="token punctuation">,</span>                <span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>id<span class="token punctuation">)</span> cnt         <span class="token keyword">FROM</span> amp_event_log t                  <span class="token keyword">JOIN</span>              <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span>               <span class="token keyword">from</span> amp_site              <span class="token punctuation">)</span> t3              <span class="token keyword">ON</span> t3<span class="token punctuation">.</span>NAME <span class="token operator">=</span> t<span class="token punctuation">.</span>exception_subject         <span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>happen_time <span class="token operator">>=</span> <span class="token string">'2022-3-2 20:37:04'</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>happen_time <span class="token operator">&lt;=</span> <span class="token string">'2023-3-2 20:37:13'</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>           <span class="token operator">and</span> t<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span>         <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> t<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span> t<span class="token punctuation">.</span>process_status     <span class="token punctuation">)</span> t1         <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> event_code<span class="token punctuation">,</span>           event_name<span class="token punctuation">,</span>           deal_organization_id    <span class="token keyword">FROM</span> amp_event    <span class="token keyword">WHERE</span> is_history <span class="token operator">=</span> <span class="token number">0</span>      <span class="token operator">AND</span> deal_organization_id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">)</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>event_code <span class="token operator">=</span> t2<span class="token punctuation">.</span>event_code<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>      <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                     <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span>  <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>     <span class="token operator">|</span> amp_event  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                     <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                                        <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>     <span class="token operator">|</span> <span class="token operator">&lt;</span>derived2<span class="token operator">></span> <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>                                                              <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">30879</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> DERIVED     <span class="token operator">|</span> t          <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_happendtime<span class="token punctuation">,</span>amp_event_log_city_index<span class="token punctuation">,</span>amp_event_log_prov_index <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">52</span> <span class="token operator">|</span>    <span class="token number">10.99</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> DERIVED     <span class="token operator">|</span> amp_site   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> amp_site_name_index                                               <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">54023</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> Range checked <span class="token keyword">for</span> each record <span class="token punctuation">(</span><span class="token keyword">index</span> map: <span class="token number">0x2</span><span class="token punctuation">)</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">warnings</span> <span class="token punctuation">(</span><span class="token number">1.18</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span><span class="token keyword">select</span> t2<span class="token punctuation">.</span>event_code <span class="token keyword">as</span> event_code<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>event_name <span class="token keyword">as</span> name<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>process_status <span class="token keyword">as</span> <span class="token keyword">status</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> cnt<span class="token keyword">from</span> amp_event t1         <span class="token keyword">left</span> <span class="token keyword">join</span> amp_event_log t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>event_code <span class="token operator">=</span> t2<span class="token punctuation">.</span>event_code<span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>happen_time <span class="token operator">>=</span> <span class="token string">'2022-3-2 20:37:04'</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>happen_time <span class="token operator">&lt;=</span> <span class="token string">'2023-3-2 20:37:13'</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>prov <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span> <span class="token string">'广东省'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> t2<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span> <span class="token string">'深圳市'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>is_history <span class="token operator">=</span> <span class="token number">0</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>deal_organization_id <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">group</span> <span class="token keyword">by</span> t2<span class="token punctuation">.</span>event_code<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>process_status<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                                    <span class="token operator">|</span> <span class="token keyword">key</span>            <span class="token operator">|</span> key_len <span class="token operator">|</span> ref                     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                                    <span class="token operator">|</span> <span class="token boolean">NULL</span>           <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>                    <span class="token operator">|</span>   <span class="token number">15</span> <span class="token operator">|</span>     <span class="token number">8.67</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_happendtime<span class="token punctuation">,</span>idx_event_code<span class="token punctuation">,</span>amp_event_log_city_index<span class="token punctuation">,</span>amp_event_log_prov_index <span class="token operator">|</span> idx_event_code <span class="token operator">|</span> <span class="token number">1003</span>    <span class="token operator">|</span> fnsdmpsit<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>event_code <span class="token operator">|</span>   <span class="token number">13</span> <span class="token operator">|</span>    <span class="token number">10.99</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的SQL优化实战&quot;&gt;&lt;a href=&quot;#mysql的SQL优化实战&quot; class=&quot;headerlink&quot; title=&quot;mysql的SQL优化实战&quot;&gt;&lt;/a&gt;mysql的SQL优化实战&lt;/h1&gt;&lt;p&gt;以下是公司实际业务上的SQL调优实战&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="SQL优化" scheme="https://zhuansun.github.io/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
    <category term="性能调优" scheme="https://zhuansun.github.io/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
    <category term="调优" scheme="https://zhuansun.github.io/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>+号在java中作用</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E4%B8%AD+%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E4%B8%AD+%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2023-06-01T10:14:17.678Z</published>
    <updated>2023-06-01T10:14:17.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="号在java中作用"><a href="#号在java中作用" class="headerlink" title="+号在java中作用"></a>+号在java中作用</h2><ul><li><p>作为运算符，当作用于数值型的时候，是运算符</p></li><li><p>作为连接符，当作用于字符串的时候，是连接符</p></li></ul><h2 id="号在mysql中的作用"><a href="#号在mysql中的作用" class="headerlink" title="+号在mysql中的作用"></a>+号在mysql中的作用</h2><h3 id="不能作为连接符"><a href="#不能作为连接符" class="headerlink" title="不能作为连接符"></a>不能作为连接符</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select first_name+last_name from user order by id desc;期望的结果：-------------颛孙鹏程张三李四实际的结果-------------000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会这样呢？ 看下面就知道了。</p><h3 id="只能作为运算符"><a href="#只能作为运算符" class="headerlink" title="只能作为运算符"></a>只能作为运算符</h3><h4 id="两个操作数都为数值型"><a href="#两个操作数都为数值型" class="headerlink" title="两个操作数都为数值型"></a>两个操作数都为数值型</h4><p>当两个操作数都为数值型的时候，做加法运算。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 100+20;结果-----------120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一个操作数为数值型，另一个是字符型"><a href="#一个操作数为数值型，另一个是字符型" class="headerlink" title="一个操作数为数值型，另一个是字符型"></a>一个操作数为数值型，另一个是字符型</h4><p>当一个操作数为数值型，另一个是字符型的时候，会试图将字符型转换成数值型：</p><ul><li><p>如果转换成功，然后在做加法运算。</p></li><li><p>如果转换失败，会默认转换成0，然后在做加法运算。</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select &#39;zhuansun&#39;+20;结果-----------20select &#39;120&#39;+20;结果-----------140<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两个操作数都是字符型"><a href="#两个操作数都是字符型" class="headerlink" title="两个操作数都是字符型"></a>两个操作数都是字符型</h4><p>当两个操作数都是字符型的时候，会将字符型默认转换成0，然后在做加法运算。这也就解释了我们之前说的：为什么不能作为连接符。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select &#39;zhuansun&#39;+&#39;wenqing&#39;;结果-----------0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一个操作数为null，另一个操作数为字符型或者数值型。"><a href="#一个操作数为null，另一个操作数为字符型或者数值型。" class="headerlink" title="一个操作数为null，另一个操作数为字符型或者数值型。"></a>一个操作数为null，另一个操作数为字符型或者数值型。</h4><p>当两个操作数任意一方为null的时候，不管另一个是什么，结果都是NULL。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select null+20;结果-----------NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NULL值与任何值连接，结果都是NULL</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select null+100;结果：--------NULL# 假设score可能为nullselect CONCAT(first_name,&#39;,&#39;,last_name,&#39;,&#39;,socre) from user order by id desc;结果----------颛孙,鹏程,98张,三,90null李,四,87nullnull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么在第二个查询语句结果中出现null的原因是因为score是null，然后与 first_name 和 last_name 进行连接，不管这两个值有没有值，结果都是null。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;号在java中作用&quot;&gt;&lt;a href=&quot;#号在java中作用&quot; class=&quot;headerlink&quot; title=&quot;+号在java中作用&quot;&gt;&lt;/a&gt;+号在java中作用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作为运算符，当作用于数值型的时候，是运算符&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zhuansun.github.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zhuansun.github.io/tags/mysql/"/>
    
    <category term="连接符" scheme="https://zhuansun.github.io/tags/%E8%BF%9E%E6%8E%A5%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zhuansun.github.io/note/SYSTEM/IO/IO%E7%B2%BE%E8%AE%B2/"/>
    <id>https://zhuansun.github.io/note/SYSTEM/IO/IO%E7%B2%BE%E8%AE%B2/</id>
    <published>2023-06-01T10:14:17.671Z</published>
    <updated>2023-06-01T10:14:17.671Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><p>一切且文件</p><p>虚拟文件系统</p><p>任何文件都有 0 1 2 三个文件描述符：标准输入，标准输出，错误输出</p><p>文件描述符</p><blockquote><p>cd &#x2F;proc&#x2F;$$&#x2F;fd</p></blockquote><p>两个程序可以打开同一个文件，但是对于两个程序来说，分别是不同的fd，也就是不同的指针</p><p>&#x2F;proc</p><p>关机之后看硬盘，里面是啥都没有的。只有在系统运行的时候，一些进程会被映射成文件，放在这里。</p><p>$$</p><p>是一个特殊的环境变量，表示当前bash的pid</p><p>lsof -op $$</p><p>当前bash的pid的一些详细数据</p><p>重定向：不是命令，而是一种机制</p><p>pstree：查看的进程的父子关系</p><p>socket</p><p>pipline：管道两边分别是两个子进程，一个子进程在写，一个子进程再读，进程与进程之间是隔离的，通过管道可以实现进程间的通信</p><p>int 0x80 </p><ul><li>int：是cpu的一个指令</li><li>0x80：对应二进制 1000 0000 ；是对应 中断描述符表 中的128这个位置的callback方法。</li></ul><p>在程序和物理内存之间，会有一个虚拟地址的概念，程序以为我是独占所有内存的。</p><p>汇通一个MMU单元进行管理，会将程序的虚拟地址映射到物理内存的地址上。</p><p>在虚拟地址上，程序认为申请的内存都是连续的。但是在物理内存上，可能是不连续的。</p><p>应用程序在运行的时候，所需要的内存并不是一次性全部分配的，是在运行过程中，需要多少，就申请多少</p><p>每次申请至少是4k，因为分配的最小粒度是PageCache，一个PageCache的大小是4k；</p><blockquote><p>pcstat  &#x2F;bin&#x2F;bash</p><p>pcstat 文件</p></blockquote><p>pcstat 就是查看pageCache的状态</p><p><img src="/IO%E7%B2%BE%E8%AE%B2.assets/image-20230530145156763.png" alt="image-20230530145156763"></p><p>这个图的意思就是说：bin&#x2F;bash 这个程序（它是一个程序哦），在操作系统中它的大小是：903336字节，换算一下就是882.16KB；我们知道一个PageCache是4K，所以它占用的pages就是221个，但是目前加载的PageCache只有194个，并不是所有的都加载进来了。</p><p>我们要学习的IO知识，是依赖与PageCache的</p><blockquote><p>sysctl -a</p></blockquote><p>查看当前系统中的所有配置项</p><p>其中有一个脏页的概念</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>appdeploy@pangu-site-dev1-7ddf994d6f-zxjxc deploy<span class="token punctuation">]</span><span class="token variable">$sysctl</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> dirtyvm.dirty_background_bytes <span class="token operator">=</span> <span class="token number">0</span>vm.dirty_background_ratio <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment"># 表示当后台进程在运行时可以存在多少个脏页（这些脏页占用的内存占总内存的百分比）而不需要回写到磁盘上</span>vm.dirty_bytes <span class="token operator">=</span> <span class="token number">0</span>vm.dirty_expire_centisecs <span class="token operator">=</span> <span class="token number">3000</span>vm.dirty_ratio <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 用户的进程不停的申请内存申请内存，当系统内存使用量达到总内存的多少百分比时开始回写脏页到硬盘上</span>vm.dirty_writeback_centisecs <span class="token operator">=</span> <span class="token number">500</span>vm.dirtytime_expire_seconds <span class="token operator">=</span> <span class="token number">43200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么修改</p><blockquote><p>vi &#x2F;etc&#x2F;sysctl.conf</p></blockquote><p>这两个参数具体的实践</p><ul><li>在Redis刷RDB和AOF（RDB是手动或者定时触发bgsave生成的），而AOF是有一个配置的：no，always，everysec</li><li>在Mysql中redolog和binlong的刷盘也是有配置的。</li><li>它们之所以提供配置，就是因为内核并不是保证实时刷盘的。</li></ul><p>想写的时候，compact一下</p><p>想读的时候，flip一下</p><p>数据库会用DirectIO</p><p><img src="/IO%E7%B2%BE%E8%AE%B2.assets/image-20230530190036881.png" alt="image-20230530190036881"></p><p>IO的种类有很多种</p><ul><li>磁盘IO</li><li>socket IO</li><li>网络IO</li></ul><p>都是IO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;一切且文件&lt;/p&gt;
&lt;p&gt;虚拟文件系统&lt;/p&gt;
&lt;p&gt;任何文件都有 0 1 2 三个文件描述符：标准输入，标准输出，错误输出&lt;/p&gt;
&lt;p&gt;文件描述符&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cd &amp;#x2F;proc&amp;#x2F;$$&amp;#x2F;fd&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在页面上一键部署hexo</title>
    <link href="https://zhuansun.github.io/note/TOOLS/HEXO/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2hexo/"/>
    <id>https://zhuansun.github.io/note/TOOLS/HEXO/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2hexo/</id>
    <published>2023-06-01T10:14:17.548Z</published>
    <updated>2023-06-01T10:14:17.548Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/msoap/shell2http">https://github.com/msoap/shell2http</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/msoap/shell2http&quot;&gt;https://github.com/msoap/shell2http&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zhuansun.github.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zhuansun.github.io/categories/TOOLS/hexo/"/>
    
    
    <category term="hexo" scheme="https://zhuansun.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo+butterfly更新mermaid版本</title>
    <link href="https://zhuansun.github.io/note/TOOLS/HEXO/hexo+butterfly%E6%9B%B4%E6%96%B0mermaid%E7%89%88%E6%9C%AC/"/>
    <id>https://zhuansun.github.io/note/TOOLS/HEXO/hexo+butterfly%E6%9B%B4%E6%96%B0mermaid%E7%89%88%E6%9C%AC/</id>
    <published>2023-06-01T10:14:17.545Z</published>
    <updated>2023-06-01T10:14:17.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-butterfly更新mermaid版本"><a href="#hexo-butterfly更新mermaid版本" class="headerlink" title="hexo+butterfly更新mermaid版本"></a>hexo+butterfly更新mermaid版本</h1><p>怎么使用的mermaid，可以参考butterfly的官网：<a href="https://butterfly.js.org/posts/4aa8abbe/#mermaid">https://butterfly.js.org/posts/4aa8abbe/#mermaid</a></p><p>最近在本地重新编辑一篇文章之后，部署起来，发现有一个<code>mermaid</code>图表不支持了。</p><p>原因是因为：我的 <code>hexo</code> 引用的 <code>butterfly</code> 主题默认使用的 <code>mermaid</code> 版本是 <code>8.13.8</code></p><p>而我本地是使用 <code>typora</code> 编辑的，<code>typora</code> 版本是 <code>1.5.8</code>，引用的 mermaid 版本是 <code>9.2.0</code></p><p>所以我是用了 新版本的特性之后，在低版本中就无法渲染了。</p><img src="hexo+butterfly更新mermaid版本.assets/image-20230217231526333.png" alt="image-20230217231526333" style="zoom:50%;" /><p><strong>解决办法</strong></p><p>更新 hexo+butterfly 的 mermaid 版本</p><p>mermaid 版本是主题引入的，其实就是主题引入了一个js</p><p>我们找到这个 js ，给它升级了就完事了</p><p>找到主题目录</p><blockquote><p>…&#x2F;你的主题目录&#x2F;hexo-theme-butterfly&#x2F;layout&#x2F;includes&#x2F;footer.pug</p></blockquote><img src="hexo+butterfly更新mermaid版本.assets/image-20230217230355932.png" alt="image-20230217230355932" style="zoom:50%;" /><p>打开<code>footer.pug</code>文件，将引入的低版本mermaid直接升级就可以了</p><img src="hexo+butterfly更新mermaid版本.assets/image-20230217230516681.png" alt="image-20230217230516681" style="zoom: 33%;" /><p>然后重新部署一遍就可以了。</p><img src="hexo+butterfly更新mermaid版本.assets/image-20230217231546566.png" alt="image-20230217231546566" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-butterfly更新mermaid版本&quot;&gt;&lt;a href=&quot;#hexo-butterfly更新mermaid版本&quot; class=&quot;headerlink&quot; title=&quot;hexo+butterfly更新mermaid版本&quot;&gt;&lt;/a&gt;hexo+butter</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zhuansun.github.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zhuansun.github.io/categories/TOOLS/hexo/"/>
    
    
    <category term="hexo" scheme="https://zhuansun.github.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://zhuansun.github.io/tags/butterfly/"/>
    
    <category term="mermaid" scheme="https://zhuansun.github.io/tags/mermaid/"/>
    
  </entry>
  
  <entry>
    <title>docker+hexo+gitee部署完美个人博客</title>
    <link href="https://zhuansun.github.io/note/TOOLS/HEXO/docker+hexo+gitee%E9%83%A8%E7%BD%B2%E5%AE%8C%E7%BE%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zhuansun.github.io/note/TOOLS/HEXO/docker+hexo+gitee%E9%83%A8%E7%BD%B2%E5%AE%8C%E7%BE%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-06-01T10:14:17.542Z</published>
    <updated>2023-06-01T10:14:17.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>因为引用的文章在下面都说到了，可以先看看</p><p><a href="https://zhuanlan.zhihu.com/p/372398281">Docker + Git 部署Hexo发布</a></p><p><a href="https://www.cnblogs.com/moshuying/p/15801437.html">【hexo指南】hexo配置ER图流程图时序图插件</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本文仅适用：x86_64架构</strong></p><p>因为平时使用typora写文章，除了基本的MD语法之外，还使用了</p><ul><li>本地图片</li><li>mermaid</li></ul><p>就是上面两点，导致部署hexo比较麻烦，特别是第一点。</p><p>为什么呢？</p><p>hexo新版本不是支持了本地图片吗？</p><p>但是支持的前提是：图片的文件夹和MD文件名一致，像下面这样</p><ul><li>xxxxx.md （MD文件）</li><li>xxxxx （图片文件夹）</li></ul><p>而我的图片存储方式是：</p><ul><li>xxxxx.md（MD文件）</li><li>xxxxx.assets（图片文件夹）</li></ul><p>对应typora的设置就是：</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030220722156.png" alt="image-20221030220722156" style="zoom:50%;" /><p>所以hexo就不支持了，我就很难受</p><h2 id="第一步：准备hexo文件"><a href="#第一步：准备hexo文件" class="headerlink" title="第一步：准备hexo文件"></a>第一步：准备hexo文件</h2><p>你需要准备你的所有笔记文件：比如我的是放在gitee的，大致有下面这些笔记</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030220831563.png" alt="image-20221030220831563" style="zoom:50%;" /><p>然后需要准备一个hexo的主题，我推荐是 butterfly，把主题下载下来</p><p>然后需要准备hexo的配置文件_config.yml，配置好你所需要的所有内容</p><p>然后准备下面的脚本，命名为：hexo-img-move.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//note/xxx/xx.assets  2020/10/30/xxx/xx.assets</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">dir<span class="token punctuation">,</span>dest</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fs<span class="token punctuation">.</span><span class="token function">pathExists</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> exists</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历递归public文件夹，将</span><span class="token keyword">function</span> <span class="token function">readFileList</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> filesList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">itm<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> stat <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path <span class="token operator">+</span> itm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//递归读取文件</span>            <span class="token function">readFileList</span><span class="token punctuation">(</span>path <span class="token operator">+</span> itm <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">,</span> filesList<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个对象存放文件的路径和名字</span>            obj<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span><span class="token comment">//路径</span>            obj<span class="token punctuation">.</span>filename <span class="token operator">=</span> itm<span class="token comment">//名字</span>            filesList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> getFiles <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取文件夹下的所有文件</span>    <span class="token function-variable function">getFileList</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> filesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">readFileList</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> filesList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filesList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>getFiles<span class="token punctuation">.</span><span class="token function">getFileList</span><span class="token punctuation">(</span><span class="token string">'/var/www/hexo/public/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// console.log(obj.path);</span><span class="token comment">// var paths = obj.path.split('public/');</span><span class="token comment">// var dir_part = paths[1];</span><span class="token comment">// var dir_full = '/var/www/hexo/source/_posts/'+dir_part;</span><span class="token comment">// var dir = dir_full.substring(0,dir_full.length-1)+'.assets';</span><span class="token keyword">var</span> dir_part <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'note'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> dir_full <span class="token operator">=</span> <span class="token string">'/var/www/hexo/source/_posts/note'</span><span class="token operator">+</span>dir_part<span class="token punctuation">;</span><span class="token keyword">var</span> dir <span class="token operator">=</span> dir_full<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dir_full<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.assets'</span><span class="token punctuation">;</span><span class="token comment">//第一种：复制到 dir 的下一级目录下</span><span class="token keyword">var</span> dirs <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> aessets_name <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">var</span> dest1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token operator">+</span>aessets_name<span class="token punctuation">;</span><span class="token comment">// 第二种：复制到 dir 同级目录下</span><span class="token comment">// var dest2 = obj.path.substring(0,obj.path.length-1)+'.assets';</span><span class="token comment">//第三种：复制到 public 下</span><span class="token keyword">var</span> dirs <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> forder_name <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.assets'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> dest_full <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.assets'</span><span class="token punctuation">;</span><span class="token keyword">var</span> dests <span class="token operator">=</span> dest_full<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dest3 <span class="token operator">=</span> <span class="token string">'/var/www/hexo/public/'</span><span class="token operator">+</span>dests<span class="token punctuation">[</span>dests<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token comment">///var/www/hexo/public/2022/10/30/note/JAVA/数据库/MYSQL/mysql的日志从入门到入土/</span><span class="token comment">// console.log(dir)</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>dest1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>dest3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030221220970.png" alt="image-20221030221220970" style="zoom:80%;" /><h2 id="第二步：准备dockerfile"><a href="#第二步：准备dockerfile" class="headerlink" title="第二步：准备dockerfile"></a>第二步：准备dockerfile</h2><p>将下面的文件 命名为：Dockerfile  没有后缀名</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:14-alpine</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /var/www/hexo</span><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"Asia/Shanghai"</span> > /etc/timezone <span class="token operator">\</span>    &amp;&amp; echo <span class="token string">"https://mirrors.aliyun.com/alpine/v3.9/main/"</span> > /etc/apk/repositories  <span class="token operator">\</span>    &amp;&amp; npm config set registry https://registry.npm.taobao.org <span class="token operator">\</span>    &amp;&amp; apk add --no-cache git <span class="token operator">\</span>    &amp;&amp; apk add --no-cache openssh-client <span class="token operator">\</span>    &amp;&amp; npm install hexo-cli -g <span class="token operator">\</span>    &amp;&amp; hexo init <span class="token operator">\</span>    &amp;&amp; npm install hexo-renderer-swig <span class="token operator">\</span>    &amp;&amp; npm install <span class="token operator">\</span>    &amp;&amp; npm install fs-extra --save </span>    &amp;&amp; npm install hexo-deployer-git --save \    &amp;&amp; npm install hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save \    &amp;&amp; npm install hexo-filter-mermaid-diagrams --save \    &amp;&amp; npm install hexo-blog-encrypt --save \    &amp;&amp; npm install hexo-generator-search --save \    &amp;&amp; git config --global user.email "zhuansunpengcheng@qq.com" \    &amp;&amp; git config --global user.name "zhuansun" \    &amp;&amp; ssh-keygen -t RSA -C "zhuansunpengcheng@qq.com" -P "" -N "" -f /root/.ssh/id_rsa \    &amp;&amp; echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config \    &amp;&amp; cat /root/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们使用alpine作为基本镜像，因为够小，对于hexo来说，足够了</li><li>设置工作目录是 &#x2F;var&#x2F;www&#x2F;hexo</li><li>下面就是安装git，ssh，hexo</li><li>npm install fs-extra –save ：安装fs-extra的依赖，是为了我们的 hexo-img-move.js能正常运行</li><li>安装了一些hexo的插件<ul><li>hexo-deployer-git：让hexo支持直接部署到git上</li><li>hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive：这些是为了butterfly主题支持用的</li><li>hexo-filter-mermaid-diagrams：让hexo支持mermaid流程图（解决了我的第二个痛点）：<a href="https://www.cnblogs.com/moshuying/p/15801437.html">https://www.cnblogs.com/moshuying/p/15801437.html</a></li><li>hexo-blog-encrypt：加密文章，使用方法见github：<a href="https://github.com/rdou/hexo-blog-encrypt">https://github.com/rdou/hexo-blog-encrypt</a><ul><li>说明：在http环境下不支持加密，这是因为脚本中的使用的crypto对象，有一个subtle属性只能在https环境下获取到。</li><li><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221031001047545.png" alt="image-20221031001047545" style="zoom: 30%;float:left" /></li><li><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221031001405503.png" alt="image-20221031001405503" style="zoom:33%;float:left" /></li></ul></li></ul></li><li>hexo-generator-search：实现本地搜索，hexo本地搜索的实现原理是在 public 目录下，生成一个 search.xml 文件</li><li>设置git的邮箱和用户名，填自己的就行</li><li>设置ssh公钥，是为了让git提交的时候不用每次都输入密码，直接用公钥提交</li><li>echo “StrictHostKeyChecking no” &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;ssh_config \： 这一步很重要，是为了容器启动的时候，跳过ssh公钥的检查，避免手动输入yes</li><li>cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub：打印公钥</li></ul><h2 id="第三步：构建docker镜像"><a href="#第三步：构建docker镜像" class="headerlink" title="第三步：构建docker镜像"></a>第三步：构建docker镜像</h2><p>在Dockerfile的目录下，运行下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> zhuansun/hexo:v1.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-t：表示指定镜像的名字和标签</li><li>zhuansun&#x2F;hexo:v1.0 : 表示镜像的名字，v1.0是标签</li><li>. ：这个点，不知道啥意思，写上</li></ul><p>查看构建的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ash-4.3<span class="token comment"># docker image ls</span>REPOSITORY                                          TAG                       IMAGE ID       CREATED         SIZEzhuansun/hexo                                       v1.0                      71b6e1b7ea19   <span class="token number">4</span> minutes ago   249MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第四步：运行容器"><a href="#第四步：运行容器" class="headerlink" title="第四步：运行容器"></a>第四步：运行容器</h2><p>我用的是群辉的docker，挂载了四个目录，和一个端口</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222106418.png" alt="image-20221030222106418" style="zoom: 80%;" /><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222129007.png" alt="image-20221030222129007" style="zoom:50%;" /><p>其他的都是默认。然后启动</p><p>注意：</p><p>挂载的文件夹里面，要有内容哦。按照第一步，该放的都放好。</p><h2 id="第五步：启动容器"><a href="#第五步：启动容器" class="headerlink" title="第五步：启动容器"></a>第五步：启动容器</h2><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222250742.png" alt="image-20221030222250742" style="zoom:80%;" /><h2 id="第六步：使用容器"><a href="#第六步：使用容器" class="headerlink" title="第六步：使用容器"></a>第六步：使用容器</h2><p>先开启群辉的ssh，然后进入到容器里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> xxxxxxx <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进来之后，默认就是我们设置的：&#x2F;var&#x2F;www&#x2F;hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ash-4.3<span class="token comment"># docker exec -it fb29ef2559ef sh</span>/var/www/hexo <span class="token comment"># ls</span>_config.landscape.yml  db.json                package-lock.json      public                 shell                  themes_config.yml            node_modules           package.json           scaffolds              <span class="token builtin class-name">source</span>                 yarn.lock/var/www/hexo <span class="token comment"># hexo clean</span>INFO  Validating configINFO  Deleted database.INFO  Deleted public folder./var/www/hexo <span class="token comment"># hexo g</span>INFO  Validating configINFO  Start processingINFO  Generated: note/JAVA/数据库/MYSQL/mysql中的交集差集并集/index.htmlINFO  Generated: note/JAVA/GIT/git批量删除分支/index.htmlINFO  Generated: note/PROJECT/时效项目/index.htmlINFO  <span class="token number">73</span> files generated <span class="token keyword">in</span> <span class="token number">7.03</span> s/var/www/hexo <span class="token comment"># node shell/hexo-img-move.js </span>success<span class="token operator">!</span>success<span class="token operator">!</span>success<span class="token operator">!</span>/var/www/hexo <span class="token comment"># hexo server -d</span>INFO  Validating configINFO  <span class="token punctuation">[</span>Browsersync<span class="token punctuation">]</span> Access URLs: ----------------------------------          UI: http://localhost:3001 ---------------------------------- UI External: http://localhost:3001 ----------------------------------INFO  Start processingINFO  Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>说一下 node shell&#x2F;hexo-img-move.js  这一步，hexo生成静态文件之后，只有html，并没有图片的</li><li>如果你用的是图床，那么完全啥问题都没有</li><li>如果是本地图片，我们就需要把本地图片移动到指定的文件夹中</li><li>然后hexo server启动后，html才可以找到图片（具体怎么移动的可以看上面的代码）</li></ul><h2 id="第七步：本地验证hexo服务"><a href="#第七步：本地验证hexo服务" class="headerlink" title="第七步：本地验证hexo服务"></a>第七步：本地验证hexo服务</h2><p>图片可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222950902.png" alt="image-20221030222950902" style="zoom:80%;" /><p>代码可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223012143.png" alt="image-20221030223012143" style="zoom:80%;" /><p>时序图可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223026695.png" alt="image-20221030223026695" style="zoom:80%;" /><h2 id="第八步：部署到gitee"><a href="#第八步：部署到gitee" class="headerlink" title="第八步：部署到gitee"></a>第八步：部署到gitee</h2><p>首先需要配置上面的公钥到gitee上，百度很简单</p><p>然后再hexo中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/www/hexo <span class="token comment"># hexo d</span>INFO  Validating configINFO  Deploying: <span class="token function">git</span>INFO  Clearing .deploy_git folder<span class="token punctuation">..</span>.INFO  Copying files from public folder<span class="token punctuation">..</span>.INFO  Copying files from extend dirs<span class="token punctuation">..</span>.<span class="token punctuation">[</span>master c3fe339<span class="token punctuation">]</span> Site updated: <span class="token number">2022</span>-10-30 <span class="token number">14</span>:31:27Enumerating objects: <span class="token number">308</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">308</span>/308<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">4</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">247</span>/247<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">284</span>/284<span class="token punctuation">)</span>, <span class="token number">22.02</span> MiB <span class="token operator">|</span> <span class="token number">1.09</span> MiB/s, done.Total <span class="token number">284</span> <span class="token punctuation">(</span>delta <span class="token number">51</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">51</span>/51<span class="token punctuation">)</span>, completed with <span class="token number">3</span> <span class="token builtin class-name">local</span> objects.remote: Powered by GITEE.COM <span class="token punctuation">[</span>GNK-6.4<span class="token punctuation">]</span>To gitee.com:zhuansunpengcheng/zhuansunpengcheng.git   e4984bb<span class="token punctuation">..</span>c3fe339  HEAD -<span class="token operator">></span> masterBranch <span class="token string">'master'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'master'</span> from <span class="token string">'git@gitee.com:zhuansunpengcheng/zhuansunpengcheng.git'</span><span class="token builtin class-name">.</span>INFO  Deploy done: <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交成功之后，到gitee上，开始gitee page服务</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223331923.png" alt="image-20221030223331923" style="zoom:50%;" /><p>然后就可以使用了</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223426237.png" alt="image-20221030223426237" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;因为引用的文章在下面都说到了，可以先看看&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/3723</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zhuansun.github.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zhuansun.github.io/categories/TOOLS/hexo/"/>
    
    
    <category term="hexo" scheme="https://zhuansun.github.io/tags/hexo/"/>
    
    <category term="docker" scheme="https://zhuansun.github.io/tags/docker/"/>
    
    <category term="gitee" scheme="https://zhuansun.github.io/tags/gitee/"/>
    
  </entry>
  
  <entry>
    <title>黑群晖使用DNSPod设置外网访问</title>
    <link href="https://zhuansun.github.io/note/TOOLS/DSM/%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8DNSPod%E8%AE%BE%E7%BD%AE%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
    <id>https://zhuansun.github.io/note/TOOLS/DSM/%E9%BB%91%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8DNSPod%E8%AE%BE%E7%BD%AE%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</id>
    <published>2023-06-01T10:14:17.539Z</published>
    <updated>2023-06-01T10:14:17.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑群晖使用DNSPod设置外网访问"><a href="#黑群晖使用DNSPod设置外网访问" class="headerlink" title="黑群晖使用DNSPod设置外网访问"></a>黑群晖使用DNSPod设置外网访问</h1><p>我折腾群辉的 DDNS 已经很久了，之前使用的是花生壳，虽然能用，但是我觉得并不好用，所以使用了腾讯云的 DSNPod 做 DDNS</p><h2 id="步骤1-注册域名"><a href="#步骤1-注册域名" class="headerlink" title="步骤1:  注册域名"></a><strong>步骤1:  注册域名</strong></h2><ol><li><p>登录 <a href="https://console.dnspod.cn/"><strong>DNSPod 管理控制台</strong></a>，进行购买</p></li><li><p>完成购买后，即可进入 <a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a> 管理页面查看您注册的域名。</p></li></ol><h2 id="步骤2：启用-DDNS"><a href="#步骤2：启用-DDNS" class="headerlink" title="步骤2：启用 DDNS"></a><strong>步骤2：启用 DDNS</strong></h2><ol><li><p>在 “<a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a>” 管理页面，单击您已注册的域名，即可进入【记录管理】页面。</p></li><li><p>单击【添加记录】，添加一条主机记录为 @，记录值为 0.0.0.0  的 A 记录。如下图所示：</p></li></ol><p>注意：记录值可以填写为任意IP地址，完成操作步骤后将会自动更新为您的公网IP地址。此处以 0.0.0.0记录值为例。</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223171928275.png" alt="image-20230223171928275" style="zoom: 67%;" /><ol start="3"><li>进入 <a href="https://console.dnspod.cn/account/token"><strong>密钥管理</strong></a> 页面，单击【创建密钥】，输入自定义的密钥名称后并单击【确定】。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172005486.png" alt="image-20230223172005486" style="zoom:80%;" /><ol start="4"><li>请妥善保管对话框中的 ID 与 Token。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172030142.png" alt="image-20230223172030142" style="zoom:80%;" /><ol start="5"><li>请使用具有管理员权限的账号登录您的群晖（Synology） NAS，依次单击【控制面板】&gt;【外部访问】。如下图所示</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172051836.png" alt="image-20230223172051836" style="zoom:80%;" /><ol start="6"><li>在【DDNS】页签中，单击【新增】。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172118673.png" alt="image-20230223172118673" style="zoom:80%;" /><ol start="7"><li>在弹出的对话框中的【服务供应商】选单内下拉选择【DNSPod.cn】,并填写相关信息。如下图所示：</li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172142806.png" alt="image-20230223172142806" style="zoom:80%;" /><ul><li><strong>主机名称：</strong>填写您购买的域名。</li><li><strong>用户名&#x2F;电子邮箱：</strong>填写您获取到的DNSPod ID。</li><li><strong>密码&#x2F;密钥：</strong>填写您获取到的密钥。</li></ul><p>注意：您可单击【测试联机】，测试是否能成功联机。状态栏显示为正常，即代表成功联机。</p><ol start="8"><li><p>单击【确定】。</p></li><li><p>单击【立即更新】，确认状态栏显示正常。如下图所示：</p></li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172238586.png" alt="image-20230223172238586" style="zoom:80%;" /><ol start="10"><li>返回 <a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a> 管理页面，查看记录值的是否已变更为您的公网 IP 地址，已变更为设置成功。未变更，请进行相关排查。</li></ol><p><strong>完成以上步骤，我们的DDNS就搭建好啦！</strong></p><h2 id="步骤3：配置外网访问"><a href="#步骤3：配置外网访问" class="headerlink" title="步骤3：配置外网访问"></a>步骤3：配置外网访问</h2><p>一般家庭网络，公网ip都是禁用80端口和443端口的，所以要想配置外网访问，只能修改端口</p><p>1.打开群辉的设置，选择【网络】，然后选择【DSM设置】，设置 http 端口和 https 端口</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223172711400.png" alt="image-20230223172711400" style="zoom:80%;" /><p>2.配置路由器端口转发</p><p>我用的是小米路由器，在【高级设置】中【端口转发】，将内网的要转发的端口转发出去</p><p>比如我这里的设置的就是：当从公网访问 1337 端口后，会转发到内网的 1337 端口上</p><p>注意：这里我只配置了 https 的端口，因为我绑定了证书，可以使用 https 访问，更加安全；如果没有https，可以使用http</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223173032070.png" alt="image-20230223173032070" style="zoom: 67%;" /><p>3.这样，你就可以通过公网访问了。</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223173158744.png" alt="image-20230223173158744" style="zoom:67%;" /><h2 id="步骤4：配置https安全访问"><a href="#步骤4：配置https安全访问" class="headerlink" title="步骤4：配置https安全访问"></a>步骤4：配置https安全访问</h2><p>要想配置 https 访问，首先必须要有 证书，证书可以直接取 DNSPod 控制台免费申请，一个账号可以免费申请 20本 证书，足够用了</p><p>这里的步骤，简单的描述就是：</p><ul><li>申请证书</li><li>把证书导入到群辉</li><li>将证书设置为默认证书</li><li>搞定</li></ul><p>具体的步骤可以直接参考DNSPod的官方文档：<a href="#https://cloud.tencent.com/document/product/302/79821">群晖（Synology）NAS 安装免费 SSL 证书</a></p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223203835651.png" alt="image-20230223203835651" style="zoom:80%;" /><p>至此，HTTPS 安全访问就可以了，也就意味着，你可以通过公网，使用https访问你的群辉了。</p><p>注意在路由器中，将你的 https 服务对应的端口号转发出去哦</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223173158744.png" alt="image-20230223173158744" style="zoom:67%;" /><h2 id="步骤5：配置其他服务的HTTPS访问"><a href="#步骤5：配置其他服务的HTTPS访问" class="headerlink" title="步骤5：配置其他服务的HTTPS访问"></a>步骤5：配置其他服务的HTTPS访问</h2><p>经过上面的配置，我们的群辉已经可以通过外网安全访问了。</p><p>使用我们的域名：xxxx.xxx</p><p>使用我们配置的https的端口：1337</p><p>就可以在外网通过  xxxx.xxx:1337  愉快的访问群辉了。</p><p>下面我们来看看：在群辉中，我有一个内网服务，怎么把这个内网服务映射到外网中。</p><p>我以 firefox 为例子；配置一个可以外网访问的 firefox 浏览器，可以在外网访问家里内网的各种服务</p><p>通过域名：firefox.xxxx.xxx:1337 访问内网的firefox浏览器，就像下面这样：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204238222.png" alt="image-20230223204238222" style="zoom:80%;" /><p><strong>在 docker 中安装 firefox</strong></p><p>在 docker 中搜索 firefox，并安装：</p><p>docker 镜像：<a href="https://registry.hub.docker.com/r/jlesage/firefox/">https://registry.hub.docker.com/r/jlesage/firefox/</a></p><p>github网站：<a href="https://github.com/jlesage/docker-firefox">GitHub - jlesage&#x2F;docker-firefox: Docker container for Firefox</a></p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204413138.png" alt="image-20230223204413138" style="zoom:80%;" /> <p>安装教程和相关文档，作者已经说得很清楚了。我这里再简单的描述一下</p><p>本地新建一个文件夹：&#x2F;docker&#x2F;firefo&#x2F;data</p><p>然后配置docker</p><p><strong>端口配置</strong>：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204644619.png" alt="image-20230223204644619" style="zoom:80%;" /><p><strong>存储空间配置</strong>：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204702767.png" alt="image-20230223204702767" style="zoom:80%;" /><p><strong>环境变量配置</strong>：</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223204955490.png" alt="image-20230223204955490" style="zoom:80%;" /><p>然后启动docker</p><p>因为字体包比较大， 所以启动的时间会比较慢，等，，我等了15分钟左右</p><p>启动之后，在本地就可以通过 192.168.x.x:5888 端口访问 firefox 了；</p><p><strong>配置外网访问</strong></p><p>因为上面我们对群辉配置了 https 安全访问，所以 firefox 也要设置https安全访问</p><p>通过作者的文档可以看到，firefox是支持https访问的</p><p>只需要将配置项：SECURE_CONNECTION 设置为 1 就可以了</p><p>设置为 1 之后，会自动生成 证书文件， 放在 config&#x2F;certs 文件夹下面</p><p><strong>但是呢</strong></p><p>上面的方法，我亲身验证，其实并不需要这么做。 所以我们不需要设置：SECURE_CONNECTION ，让它保持默认值 0 就可以啦。</p><p>那怎么配置呢？</p><p>打开群辉，【设置】【Synology应用程序门户】【反向代理服务器】【新增】一个反向代理配置</p><p>配置入图</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223205555072.png" alt="image-20230223205555072" style="zoom:80%;" /><p>到这里，群辉的配置就结束了。</p><p>但是别忘了，要想使用 https 安全的访问firefox还需要什么？ 对头，还需要证书！</p><p>所以我们要为我们的二级域名，也就是 ：firefox.xxxx.xxx 去单独申请一个证书。</p><p><strong>申请二级域名证书</strong></p><ol><li><p>在 “<a href="https://console.dnspod.cn/dns/list"><strong>我的域名</strong></a>” 管理页面，单击您已注册的域名，即可进入【记录管理】页面。</p></li><li><p>单击【添加记录】，添加一条主机记录为 firefox，记录值为 xxxx.xxx(这里是指你的域名)  的 CNAME 解析记录。如下图所示：</p></li></ol><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223205841510.png" alt="image-20230223205841510" style="zoom:80%;" /><p>然后在这个记录后面，去申请 SSL 证书，申请方法和上面讲的一样，这里不再赘述；</p><p>证书申请下来之后</p><p>按照DNSPod的官方文档：<a href="#https://cloud.tencent.com/document/product/302/79821">群晖（Synology）NAS 安装免费 SSL 证书</a>，导入到群辉中，<strong>注意，只是导入进来， 不需要任何配置</strong></p><p>也就是说，步骤是：</p><ul><li>申请证书</li><li>把证书导入到群辉</li><li><del>将证书设置为默认证书（<strong>这一步可千万不要做如果你做了，就在改回来</strong>，）</del></li><li>搞定</li></ul><p>搞定之后，我们来到群辉中，打开【设置】【安全性】【证书】在进行接下来的配置</p><p>按照图片上的内容，进行如下的配置</p><img src="黑群晖使用DNSPod设置外网访问.assets/image-20230223210520238.png" alt="image-20230223210520238" style="zoom:80%;" /><p>等你配置完之后，就完结撒花了。</p><p>在浏览器中，就可以通过 <a href="https://firefox.xxx.xx:1337/">https://firefox.xxx.xx:1337</a> 访问你的firefox火狐浏览器啦。</p><p>举一反三：其他任何的内网服务，都可以通过这样的步骤，暴露到公网中。 </p><p>所以，每一个二级域名，都要单独申请一本证书，还是挺麻烦的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;黑群晖使用DNSPod设置外网访问&quot;&gt;&lt;a href=&quot;#黑群晖使用DNSPod设置外网访问&quot; class=&quot;headerlink&quot; title=&quot;黑群晖使用DNSPod设置外网访问&quot;&gt;&lt;/a&gt;黑群晖使用DNSPod设置外网访问&lt;/h1&gt;&lt;p&gt;我折腾群辉的 DDN</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zhuansun.github.io/categories/TOOLS/"/>
    
    <category term="DSM" scheme="https://zhuansun.github.io/categories/TOOLS/DSM/"/>
    
    
    <category term="dsm" scheme="https://zhuansun.github.io/tags/dsm/"/>
    
    <category term="群辉" scheme="https://zhuansun.github.io/tags/%E7%BE%A4%E8%BE%89/"/>
    
    <category term="ddns" scheme="https://zhuansun.github.io/tags/ddns/"/>
    
  </entry>
  
  <entry>
    <title>群辉记录</title>
    <link href="https://zhuansun.github.io/note/TOOLS/DSM/%E7%BE%A4%E8%BE%89%E8%AE%B0%E5%BD%95/"/>
    <id>https://zhuansun.github.io/note/TOOLS/DSM/%E7%BE%A4%E8%BE%89%E8%AE%B0%E5%BD%95/</id>
    <published>2023-06-01T10:14:17.536Z</published>
    <updated>2023-06-01T10:14:17.536Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bffe1a6643b39bba32f9ef72f5c98f568e596eb78deec8f8d76fcc5737592cd8">8c00d3d27fb3c22fd589b44480636208283bc4f252b9d9a315fe285b7e6fdd7f930a20fa3f69a5692dc74a7bfb3323d7e419308d04e4d1b2c69d6ce874d15309d9b162fc742adecea1031d6df21b4970298cac3e5f2c75a9773931a94ddbd44d82b561c49a1b41237030cec8a279f390d19b6c0e8e9445c6208e1dd88fdd5bd073919cb914a7302022c8b7134022ff8d8ffd9e17841462ef970cc3a330c9ed4b9e221ce8a1c472a795238e964e6a9bd39568d3ffb023b9bc150a23e5b94b3e472d35e981d51e9b1572cc8b2fab654670b4de33ec8ac492d501ec51ea8df2ef5b5d2b46cd2510351b4efc93ef1de3567119a316f11dcb488fa3435ec0ef7e5640f22a0c234b5d23a03246e045960a49c8405be82177305068354452b4a0d6f757f0ab3f5293a708f2683055c48382288dc61763ed5116eeba89374b81210b6b7ae891fd510f624f99bdd10a28537060f6125b9435738e1ee43ce46a3dd608f1399e987f29eaef971c0369b9a0e2d671b2f141f106b2859fe1ba00bd3c55b9a7105aa9e57910b314839c2cf1948d54e7fe780e0d241387ea446e6fd6d2b726e91ed597fecdbb6f1baf9a80192119a71c0dfe57c2df5c97bbe8ee2c1571eab5d01a959c014a389864b18142644f8b4001184c72a99a440e4999187b84c10abb308fe1ad28847c8ae2ab26b8f5223d5a0737b643702de328933a40909629e7f5ef4003634de8a5796156940b8482e36827fe015f2e4e18edc63feb5fa45f0da7061b528d9aac93f910d48642a7d44df5be7c5ea847f539e60d63bd94d4b326c6d4aaad071d97c9b7ae3d6e75327c0833b6bc65b3f3439d2028c282d965576dc54a920f12f65c925b620d711d6442656fbbc1c8b0aa800d6cce48c90fbe2f9146bfcdb7fe2522b1d649ee7541233c45b620be3122aa7b80e15989b0887cc138e48b554263b16418bc28fbaf7aee0f8bb2a099472d1ccbeda82a0cb9b9f952543b80ce1209711544edf3b424e13a05a8c9f861753a4a1abb91cfb990fd15c13ab5693c81a8039739c10b3f7e0e2238916438e076903d4e17d2604d9f8b5667365ea504132f978b4fadfe8fd7cc637e3cfb20d848f9d366e3c5c49e2fda6b3bc59e4c8597f04633a3bfb4b003478d10de34d71bce4e7c98acc3154282ed33978560af91e9a491721dd49b76ace914a02257f7228e4d32c069e4306b79922090d7c186329c4ce2b4614c6a566a460c3216d7843eb69502e48a4a73e93ae53ae1a0c94da59d2b98185c29d16cc4896e76aed4aff0eca87328264d6b2f6dbd5038c8d6e337e7310bef42fa631cb81a5a1c864e7189a66adf9cd4833ba5e03808ec64ebd8f38d37316ed966981b860ef1b19b39364289e5a1034720d431bd2c02c278c568e361d27ecb8a810f98d094cd597410496aadad4de0207ac9064df4ea30dac7598e6f775d0c300897896e7d03f8b099cca6cf8ac620b7c1d8c1ebd74b12a4b7b1f99f48227b6574bf083be1cd8224aac90d0fac1569f9167ddfbd7cfc2c2dc415ef0ec8000dcbf2c539905dff1511afe7bccd6a3e6068dd636023c8c3049459f26c03d1205f778ce1c5eaf0476a1141bb483507b6c116ec5c02c8ce34f617e3bf47378d16dbb67e68f15f6b3fbb462971274b331734c9282517fdff18aff2bf507241227addb1683de910b73901fc504f3740a20cc3cd9429a1b13c8a33d62b15cce10a6934ff2fae09f6114d33e3a0eb30287f90983eef390e7e5f518e14a7f0c3eee3aba526f5e0ad2f7f11f64f83c4bd46ca329cc1c4f83860357aeac8592abfb91a2641fbb658c70af3c35adc6881b0f2c555bd4b455e71697d6ea2cec415cc33e9c3ca342ad55acf9673386135e5aab37073a0cfc4b8d0d6e6ddbb2333dc04cdd405452ac24f3dfdd27397b5bee7452f81e5e4fedd64766cb7c93fc0558c3be7b7055337118d4788733d07431af069e197dc0a553bcc7de6040285d13b6de7b3d47f0357177b219c8e8f0bba18b51b1f6fc0c6a241105962ada7d073dcba14bdc7c12c139213b1c3220cb7de7b09c06f1671c28e2e305fc349c4818cf80da481d2fa027734b6f7b7791cb3e491ccb6577b547fc714dd7c69c8fd9d71c2e392476a7cccae531999389406f8cb6e6af05b2352c86daccaa81b225f9594de590690381b9e619e610bb9b569269d0cc249e05107d8062208cfa00b17a72606022284c4eb014dd890c99bf71318bad8b57c764a365b12cdec4129b4ffa1eaf6d42e3ac7fa2623c252d8d96e15793b729ac859e1f0d8a8061ee6d22bc99ff41e8dc2ef856a985f52db4ca52def47ec049f29eb0e40aee30657b753208a33a6af51a631ab0cf5843a087d5aa30d9ef2f08174f19b4a3db7bf17615a0909b04a43becd568358feff90a51248106344b986020b252aa76da3b2e4373fd9033f47cf748300a3b5ee153456bbd1413459b5e5599a1abd86e69096942ddf05e8856b16d311c106a966e3f646bc5debef3f05113dc9c9ccce07e885daa23bea6523d0b3e86a1673f1826b66ec620b5303c0886b00fba19db4eac10d70ae9706b3b81fbcb590565ac2ee94415d4fb3ddb512a3648ccab6d950ec48d2e4f8e0397537cb4dbbb02b2d95268c3d359fcf452ec7e2e641cdd07a4e76fbe80fa2decbbb23172af58f1c6273339804b85e17a0aa2132e3578aecc52e0e7f4260b73037b7a95594136715a7bf67315633b1656dfe4afaffd8c1ded14fc5437cc5172218441f74c44914060f4a72c56280cf1044157946e73e3832ac2d8fc16e965b19051d695f9975728c83df76e1b3590b895d5ffc3a6da76d6cfaf1445a3da2ca6877e7c6741c5ea1f70428876d0936a2c6f0fafc91743761c2f656f664144d718bfe51bd32d0d746029323b0983a020adb83da353b0ce18c68e62a2b68c03f0b9946207afd253b980733f9ead05cf94ca64cde1c8afd7d11a6bb9475037d01110b4643c8ffd292101651f58f3695b3442e1b6ac92ebab6cbba46bcabf4852fd38edad3ecbb54eba9434df5498deb7d6ffebe27f5334170b4e4990dd04d6a90ec86882f5e3b020302f2b8aec1bd69a19bd139253ca82c8e8b8edffcdbeb5b21079ea4bea0d94cc1ba59864c680c8fcf30d1b0a68b2d0be59786b51e058d3e3647ddb44d7dea1bc7424282a5a1d3407c653bc10dbc42aa8729773d6bfe78c5c1000c8759f24826a70ad1d27a9eeac69efe733992c9be675b6abacbca8b2e6e54a65895ad4187377bb85437eabff7c65e36aa3cdc889e4f64ebeb77b601e757394a432d27082653c338b9f9fa22846851bc7c56a8bfdc2d828be353a9ef500f28aac669df02952b670957dac09054dd5ed71f636312b558561e215e1ee58575c5fb0d40c5053332648a05b85593085ef7d57dc6059c2a5867fc072d2e87fcb21bdbb026f31b66a830dc03d0788665396ef4f10346b4cdf441f80a22d36646dae760b12f09d8bf07a6ee3966ae91d49059c8e5abd67a26a4c87c3cddca31ae704ab6ca808b4b5db808889885a5b43354c8a8befd092c71f68a3d1496cff53434f9d649214f55d8bafc186206f5761c4872466b3dc4e92192e769eb2ae597d98b2d38eaa327891b55a834467cc875fbcb60bf6e15cdc4376e7710070804c7f31a573d15dd6b847ae5e48cd4264b8f958fd1aec44d1315c2e08dd5c47823c2b7a2301a10784a1b1529441cb7db2274e5df2afb0977f7007255d23a2731f9207bb5ff23035f1cf963c6185ae48c8dd84149893608df3e49a8b66adf32c8ed639feff940f30096350dd5f1690a2677be13df4970e981da10c228a05ddcd00db2d9c1603dd7342f3392176994639f6b6099da49dc00bbe1400143f2a3cc7c52e4b140d996b0701b4599d25608d8c3a72aa44bc368088c666b8b863829de5704f7aad687cddd5620798d5bb3f3a5a80303e514c792e4b129c44ed3ecbc98c20aa9742b1d9562ee8fbf470628f51b7913d830e8ab3611f0f34a9d92e17076ff958b49a886c50c80ba0ed88f70104e892b609d3abc81d0bbb85a2fbd50b1b675c0e3d8d5dd07de7ad494f02da2c7fde06839121f35abd73b552702aa73e7a1d91620829b8e2d6c1b89a5d77dac97c9f46315dbfc1c7118f13aaceb17fbc3c7d4b3ff6f7a4c7941efe076bd7899bae9fe0e66212f8e2b2ce3d28518af6daa242dc214c49568aa4b818a9de8a8147995998d1211b5367b3920089c7310f50861ba1c1f270a1e2d6c4e21f81fc7538f8f1c8ae378378a50f9111892b99f4216bbc9f43ce9b8a237f6acc737203a90494e5b8725b607d955c94d57a19772603f8815f58fef3387ed1a40678f16808a570d30af33e775461c8b3f02c96d9ac61b2cc73dde6d303f87d1792563153202ea29a6edfc3612d5b1e3c0b98f46bf1e4b5d15c8808a5b60e9919a20035a67b7699de8a0dbb4c4e260b982ec7116565bdb1a3caae4b0bb61a90b2f734595326b5aa16a5c8c3a27a73e0c99742cba018167b8e6a5bca3474e1ff15333d11ccb65e41920e4de516d10edea4b1f9eda767a822c7c31cbcf9625113295a478885737ac</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="TOOLS" scheme="https://zhuansun.github.io/categories/TOOLS/"/>
    
    <category term="DSM" scheme="https://zhuansun.github.io/categories/TOOLS/DSM/"/>
    
    
    <category term="个人账号" scheme="https://zhuansun.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>promethues如何添加配置</title>
    <link href="https://zhuansun.github.io/note/JAVA/%E7%9B%91%E6%8E%A7/promethues%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE/"/>
    <id>https://zhuansun.github.io/note/JAVA/%E7%9B%91%E6%8E%A7/promethues%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE/</id>
    <published>2023-06-01T10:14:17.533Z</published>
    <updated>2023-06-01T10:14:17.533Z</updated>
    
    <content type="html"><![CDATA[<p>修改promethues.yml文件</p><img src="promethues如何添加配置.assets/image-20220902160951197.png" alt="image-20220902160951197"  /><p>比如我要添加一个kafka的监控，使用kafka-expoter: 进行如下配置：</p><img src="promethues如何添加配置.assets/image-20220902161001220.png" alt="image-20220902161001220" style="zoom:80%;" /><p>首次启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ./prometheus <span class="token parameter variable">--config.file</span><span class="token operator">=</span>prometheus.yml <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>热部署</p><ul><li>只加载配置文件，不重启promethues的进程</li><li>找到promethues的进程ID： lsof -i:9090</li><li>kill -HUP pid</li><li>观察日志，或者刷新promethus的页面，可以看到新的配置被加载</li></ul><img src="promethues如何添加配置.assets/image-20220902161056730.png" alt="image-20220902161056730" style="zoom:80%;" /><img src="promethues如何添加配置.assets/image-20220902161108613.png" alt="image-20220902161108613" style="zoom:80%;" /><p>使用kafka-expoter指定端口号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ./kafka_exporter <span class="token parameter variable">--kafka.server</span><span class="token operator">=</span><span class="token number">10.13</span>.70.4:9092 --web.listen-address<span class="token operator">=</span>:9309 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;修改promethues.yml文件&lt;/p&gt;
&lt;img src=&quot;promethues如何添加配置.assets/image-20220902160951197.png&quot; alt=&quot;image-20220902160951197&quot;  /&gt;



&lt;p&gt;比如我要添加一个kaf</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="监控" scheme="https://zhuansun.github.io/categories/JAVA/%E7%9B%91%E6%8E%A7/"/>
    
    
    <category term="promethues" scheme="https://zhuansun.github.io/tags/promethues/"/>
    
  </entry>
  
  <entry>
    <title>【mybatis】解决mybatis-plus的分页问题</title>
    <link href="https://zhuansun.github.io/note/JAVA/SSM/%E3%80%90mybatis%E3%80%91%E8%A7%A3%E5%86%B3mybatis-plus%E7%9A%84%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/"/>
    <id>https://zhuansun.github.io/note/JAVA/SSM/%E3%80%90mybatis%E3%80%91%E8%A7%A3%E5%86%B3mybatis-plus%E7%9A%84%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/</id>
    <published>2023-06-01T10:14:17.524Z</published>
    <updated>2023-06-01T10:14:17.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>mybatis-plus的分页插件：</p><ul><li>默认只支持一页500条；</li><li>但凡是在代码中指定分页大于500的，统一当做500处理；</li></ul><h2 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token keyword">extends</span> <span class="token class-name">MybatisPlusBaseConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PaginationInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PaginationInterceptor</span> paginationInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span>        paginationInterceptor<span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token number">50000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paginationInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在顺丰的框架中（sf-boot）：直接按照上面这样配置，会报错:</p><ul><li>因为<code>com.sf.boot.base.config.MybatisPlusBaseConfig</code>已经把这个分页插件注册进来了，我们自己在注册一遍，就会出现问题；</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Error</span> starting <span class="token class-name">ApplicationContext<span class="token punctuation">.</span> To</span> display the conditions report re<span class="token operator">-</span>run your application <span class="token keyword">with</span> <span class="token char">'debug'</span> enabled<span class="token punctuation">.</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span><span class="token constant">T19</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">41.054</span><span class="token operator">+</span><span class="token number">0800</span><span class="token operator">|</span><span class="token constant">ERROR</span><span class="token operator">|</span>main<span class="token operator">|</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>diagnostics<span class="token punctuation">.</span></span>LoggingFailureAnalysisReporter</span><span class="token operator">||</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token constant">APPLICATION</span> <span class="token constant">FAILED</span> <span class="token constant">TO</span> <span class="token constant">START</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Description</span><span class="token operator">:</span><span class="token class-name">The</span> bean 'performanceInterceptor'<span class="token punctuation">,</span> defined in <span class="token keyword">class</span> path resource <span class="token punctuation">[</span>com<span class="token operator">/</span>sf<span class="token operator">/</span>boot<span class="token operator">/</span>base<span class="token operator">/</span>config<span class="token operator">/</span><span class="token class-name">MybatisPlusBaseConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span> could not be <span class="token class-name"><span class="token namespace">registered<span class="token punctuation">.</span></span> A</span> bean <span class="token keyword">with</span> <span class="token namespace">that</span> name has already been defined in <span class="token keyword">class</span> path resource <span class="token punctuation">[</span>com<span class="token operator">/</span>sf<span class="token operator">/</span>fns<span class="token operator">/</span>nas<span class="token operator">/</span>amp<span class="token operator">/</span>config<span class="token operator">/</span><span class="token class-name">MybatisPlusConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">]</span> and overriding is <span class="token class-name"><span class="token namespace">disabled<span class="token punctuation">.</span></span>Action</span><span class="token operator">:</span><span class="token class-name">Consider</span> renaming one of the beans or enabling overriding by setting spring<span class="token punctuation">.</span>main<span class="token punctuation">.</span>allow<span class="token operator">-</span>bean<span class="token operator">-</span>definition<span class="token operator">-</span>overriding<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么解决呢？</p><ul><li>方法一：开启spirng的bean重写配置<ul><li>不太靠谱，因为两个地方同时定义了一个bean ，使用bean的覆盖重写其实在某种情况下是很可能出事的。</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">spring.main.allow-bean-definition-overriding&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>【目前我采用的】方法二：启动类中排除<code>com.sf.boot.base.config.MybatisPlusBaseConfig</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.xx.xxx.xxx"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.xx.xx.xx.xx.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">MybatisPlusBaseConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">AppApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码原因"><a href="#源码原因" class="headerlink" title="源码原因"></a>源码原因</h2><img src="【mybatis】解决mybatis-plus的分页问题.assets/image-20220825111404053.png" alt="image-20220825111404053" style="zoom:80%;" /><img src="【mybatis】解决mybatis-plus的分页问题.assets/image-20220825111444219.png" alt="image-20220825111444219" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;mybatis-plus的分页插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认只支持一页500条；&lt;/li&gt;
&lt;li&gt;但凡是在代码中指定分页大于500</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zhuansun.github.io/categories/JAVA/"/>
    
    <category term="SSM" scheme="https://zhuansun.github.io/categories/JAVA/SSM/"/>
    
    
    <category term="mybatis-plus" scheme="https://zhuansun.github.io/tags/mybatis-plus/"/>
    
    <category term="分页" scheme="https://zhuansun.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
</feed>
