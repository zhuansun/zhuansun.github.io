<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张三的个人电脑</title>
  
  
  <link href="https://zspcer.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://zspcer.gitee.io/"/>
  <updated>2022-12-18T12:19:26.102Z</updated>
  <id>https://zspcer.gitee.io/</id>
  
  <author>
    <name>zs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea单测的覆盖率</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/idea/idea%E5%8D%95%E6%B5%8B%E7%9A%84%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/idea/idea%E5%8D%95%E6%B5%8B%E7%9A%84%E8%A6%86%E7%9B%96%E7%8E%87/</id>
    <published>2022-12-18T12:19:26.102Z</published>
    <updated>2022-12-18T12:19:26.102Z</updated>
    
    <content type="html"><![CDATA[<hr><p>最近公司让写单测，写好了一个类的单测，运行之后，发现：怎么没有覆盖率呀？</p><img src="idea单测的覆盖率.assets/image-20221122213020377.png" alt="image-20221122213020377"  /><p>原因<br>由于test类文件的包名<code>com.sf.fw.aging.test.core.rule.RuleExecuteTest</code>和被测试的类的包名<code>com.sf.fw.aging.eagle.core.RuleExecutor</code>不同，引起的。</p><p>解决办法</p><p>将测试类和被测试类，放在同一个包名下。简单的操作就是：</p><p>在被测试类上，alt + enter 生成测试类，就可以了。</p><img src="idea单测的覆盖率.assets/image-20221122213324957.png" alt="image-20221122213324957" style="zoom:80%;" /><p>正常</p><img src="idea单测的覆盖率.assets/image-20221122213708490.png" alt="image-20221122213708490" style="zoom:80%;" /><p>可以设置单测覆盖率的统计路径</p><img src="idea单测的覆盖率.assets/image-20221125161420585.png" alt="image-20221125161420585"  />]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;最近公司让写单测，写好了一个类的单测，运行之后，发现：怎么没有覆盖率呀？&lt;/p&gt;
&lt;img src=&quot;idea单测的覆盖率.assets/image-20221122213020377.png&quot; alt=&quot;image-20221122213020377&quot;  /&gt;
</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="idea" scheme="https://zspcer.gitee.io/categories/TOOLS/idea/"/>
    
    
    <category term="idea" scheme="https://zspcer.gitee.io/tags/idea/"/>
    
    <category term="单测" scheme="https://zspcer.gitee.io/tags/%E5%8D%95%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>mysql的日志从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2022-12-18T12:19:26.096Z</published>
    <updated>2022-12-18T12:19:26.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的日志从入门到入土"><a href="#mysql的日志从入门到入土" class="headerlink" title="mysql的日志从入门到入土"></a>mysql的日志从入门到入土</h1><hr><p>本文有xmind，配合xmind查看更加友好哦</p><blockquote><p>点击下载：<a href="mysql%E7%9A%84%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.xmind">mysql日志从入门到入土.xmind</a></p></blockquote><h2 id="一条更新语句的执行流程是什么（引入redolog和binlog）"><a href="#一条更新语句的执行流程是什么（引入redolog和binlog）" class="headerlink" title="一条更新语句的执行流程是什么（引入redolog和binlog）"></a>一条更新语句的执行流程是什么（引入redolog和binlog）</h2><blockquote><p>update T set c&#x3D;c+1 where ID&#x3D;2;</p></blockquote><p>mysql的更新流程和SQL语句的基本执行链路是一样的：连接器-&gt;分析器-&gt;优化器-&gt;执行器-&gt;存储引擎</p><img src="mysql的日志从入门到入土.assets/image-20221012203451881.png" alt="image-20221012203451881" style="zoom: 80%;" /><p>通过连接器，先连接数据库。</p><p>清空查询缓存：在一个表上有更新的时候，跟这个表有关的查询缓存会失效。这也就是我们一般不建议使用查询缓存的原因（在mysql8.0中，已经把查询缓存整个模块都删掉了）。</p><p>分析器会通过词法和语法解析知道这是一条更新语句。</p><p>优化器决定要使用哪个索引。</p><p>执行器负责具体执行，找到这一行，然后更新。</p><h2 id="重要的日志模块（redolog和binlog）"><a href="#重要的日志模块（redolog和binlog）" class="headerlink" title="重要的日志模块（redolog和binlog）"></a>重要的日志模块（redolog和binlog）</h2><p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）</p><h3 id="什么是redolog"><a href="#什么是redolog" class="headerlink" title="什么是redolog"></a>什么是redolog</h3><p>作者举了《孔乙己》中一个赊账的例子，孔乙己来到酒店喝酒，老板会先把孔乙己的酒钱记录在一个粉板上，然后等不忙的时候，在累加到账本上。</p><p>这里的粉板就是redolog，账本就是磁盘；</p><p>考虑这个场景，当很多很多的人来喝酒的时候，老板一般有两种方式记账（当数据库更新一条记录的时候，一般有两种方式）：</p><ul><li>直接掏出账本，在账本上加加减减。（直接操作磁盘的数据，进行更新）</li><li>另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算（先记录到redolog，等mysql空闲的时候，刷到磁盘）。</li></ul><p>在酒店生意红火的时候，老板一定选择后者，因为前者操作实在是太麻烦了。</p><ul><li>首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找。（磁盘的随机IO读）</li><li>找到之后再拿出算盘计算，最后再将结果写回到账本上（磁盘的随机写）</li></ul><p>粉板（redolog）就完美的解决了这两个问题：</p><ul><li>首先说找记录：mysql的所有记录都是从数据页中查的，如果要更新的数据所在的数据页在内存中，可以直接找到，如果不在内存中，会先从磁盘把这个数据库加载到内存中。（这个步骤没法省，redolog优化的地方并不在于这里，这里会有<strong>changebuffer</strong>优化（后面说））</li><li>找到记录之后，然后说更新记录：更新的结果是写到redolog中，而不是写到磁盘中，就避免了磁盘的随机IO，虽然redolog也是写到磁盘中的，但是由于组提交的存在，一次磁盘的写入是大量的顺序IO；（redolog是顺序写，并且可以组提交，还有别的一些优化，收益最大是是这两个因素；）</li></ul><h3 id="redo-log有什么用"><a href="#redo-log有什么用" class="headerlink" title="redo log有什么用"></a>redo log有什么用</h3><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 <strong>crash-safe</strong>。</p><h3 id="为什么要引入redolog"><a href="#为什么要引入redolog" class="headerlink" title="为什么要引入redolog"></a>为什么要引入redolog</h3><p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，<strong>binlog</strong> 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p><p>mysql要保证数据的持久性，保证持久性就需要将数据写到磁盘，但是写到磁盘的话，涉及到</p><ul><li>刷页，因为mysql所有的操作是针对数据页操作的，而一个简单的更新，可能就要刷整整一个数据页</li><li>随机IO，一个事务所更新的涉及到的数据页可能不止一个，而且数据页可能不相连，就涉及到随机IO</li></ul><p>这俩问题，咋办呢？就引入了redolog，一个更新不刷页（先记录到redolog日志中），这样就避免了上面两个问题</p><ul><li>redolog将随机IO改成了顺序IO，而且避免了每次更新都刷盘（刷盘也是要刷的，但是是组提交）</li></ul><h3 id="redolog的结构"><a href="#redolog的结构" class="headerlink" title="redolog的结构"></a>redolog的结构</h3><p>redolog是循环写的文件，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p><img src="mysql的日志从入门到入土.assets/image-20221027161923607.png" alt="image-20221027161923607" style="zoom: 50%;" /><p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos 和 checkpoint 之间的是还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><h3 id="redolog一般设置多大"><a href="#redolog一般设置多大" class="headerlink" title="redolog一般设置多大"></a>redolog一般设置多大</h3><p>redo log 太小的话，会导致很快就被写满，然后不得不强行刷 redo log，这样 WAL 机制的能力就发挥不出来了。所以，如果是现在常见的几个 TB 的磁盘的话，就不要太小气了，直接将 redo log 设置为 4 个文件、每个文件 1GB 吧。</p><ul><li>innodb_log_file_size：该参数指定了每个redo日志文件的大小，在MySQL 5.7.21这个版本中的默认值为48MB，</li><li>innodb_log_files_in_group：该参数指定redo日志文件的个数，默认值为2，最大值为100。</li></ul><h3 id="binlog是什么"><a href="#binlog是什么" class="headerlink" title="binlog是什么"></a>binlog是什么</h3><p>我们知道mysql是由两部分组成，server层和引擎层，上面介绍的redolog就是innodb引擎独有的日志，而MySQL的server层也有自己的日志，叫做binlog；</p><p>为什么要有两个日志呢</p><p>因为mysql在5.5版本之前，默认的存储引擎是MyISAM，但是MyISAM并没有<strong>Crash-Safe</strong>的能力，而server层自带的binlog又只有归档的能力，也不具备<strong>Crash-Safe</strong>的能力，所以才会有后来的innodb以插件的形式引入mysql中，作为mysql的引擎，并使用了redo log，实现了Crash-Safe的能力</p><p>除了以上的原因，binlog和redolog还有其他的区别，解释了为什么存在两个日志</p><ul><li>这两个日志的使用方不一样：redolog是innodb引擎所特有的，只有innodb才能用；而binlog是mysql的server层有的，所有的引擎都可以使用；</li><li>这两个日志记录的内容不一样：redolog是物理日志，记录的是在某个数据页上做了什么修改；而binlog是逻辑日志，简单的说就是sql语句。</li><li>这两个日志的记录方式不一样：redolog是循环写，redolog文件写满了，会从头重新写；binlog是追加写；binlog文件写满了，会切割，在新文件中继续写</li></ul><h3 id="binlog有什么用"><a href="#binlog有什么用" class="headerlink" title="binlog有什么用"></a>binlog有什么用</h3><p>主要是归档（归档之后可以用于数据恢复）和主从同步</p><h3 id="binlog的结构"><a href="#binlog的结构" class="headerlink" title="binlog的结构"></a>binlog的结构</h3><h4 id="binlog的存储目录"><a href="#binlog的存储目录" class="headerlink" title="binlog的存储目录"></a>binlog的存储目录</h4><p>在磁盘的上的结构，binlog默认是存放在<strong>MySQL服务器的数据目录</strong>下，（可以修改binlog的存放路径和binlog的文件名），如果你不知道数据目录是哪个，可以通过这个命令查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%datadir%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+---------------------------------------------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>                                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+---------------------------------------------+</span><span class="token operator">|</span> datadir       <span class="token operator">|</span> C:\ProgramData\MySQL\MySQL Server <span class="token number">8.0</span>\<span class="token keyword">Data</span>\ <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+---------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据目录下，你就可以看到binlog的文件，就像是这样，binlog是二进制文件，就像它的全名一样：binary log，所以是不能直接打开的：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000001</span>xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000003</span>xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000004</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了真正存储binlog日志的文件外，MySQL服务器还会在相同的路径下生成一个关于binlog的索引文件，它的名称就是：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token keyword">index</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个索引文件是一个文本文件，我们可以直接打开：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">shell&gt; cat xxx-bin.index.&#x2F;xxx-bin.000001.&#x2F;xxx-bin.000001.&#x2F;xxx-bin.000001.&#x2F;xxx-bin.000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个索引文件只是简单的将各个binlog文件的路径存储了起来而已。</p><h4 id="怎么查看binlog的格式"><a href="#怎么查看binlog的格式" class="headerlink" title="怎么查看binlog的格式"></a>怎么查看binlog的格式</h4><p>下面的三种查看方式，前两个是一样的，都表示查看当前session的binlog格式；最后一个表示查看全局的binlog格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">session</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="怎么设置binlog的格式"><a href="#怎么设置binlog的格式" class="headerlink" title="怎么设置binlog的格式"></a>怎么设置binlog的格式</h4><p>下面展示三种设置binlog的方式，前两个是一样的，设置当前session的binlog格式，重启后就失效了。最后一个表示设置全局的binlog格式，需要重启后才生效。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> binlog_format <span class="token operator">=</span> <span class="token string">'statement'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token keyword">session</span> binlog_format <span class="token operator">=</span> <span class="token string">'statement'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token keyword">global</span> binlog_format <span class="token operator">=</span> <span class="token string">'statement'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="binlog的三种格式"><a href="#binlog的三种格式" class="headerlink" title="binlog的三种格式"></a>binlog的三种格式</h4><p>binlog 有两种格式，一种是 statement，一种是 row。可能你在其他资料上还会看到有第三种格式，叫作 mixed，其实它就是前两种格式的混合。</p><p>下面看一下三种格式分别记录了什么？</p><p>准备以下数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2018-11-13'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2018-11-12'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'2018-11-11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'2018-11-10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'2018-11-09'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="statement"><a href="#statement" class="headerlink" title="statement"></a><strong>statement</strong></h6><p>按照上面的方式，查看当前binlog的格式，并将当前会话的binlog的格式设置为：statement</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> STATEMENT <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> a<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">and</span> t_modified<span class="token operator">&lt;=</span><span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在查看binlog的内容之前，首先查看当前binlog写在了哪个文件上，因为binlog有很多个</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>           <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span>     <span class="token number">7829</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后查看binlog的内容（binlog很大，这里只截取了一部分）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxx-bin.000002'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+</span><span class="token operator">|</span> Log_name       <span class="token operator">|</span> Pos  <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7489</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7568</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>                                      <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7568</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7654</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                                     <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7654</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7798</span> <span class="token operator">|</span> <span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>zs<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t   <span class="token keyword">where</span> a<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">and</span> t_modified<span class="token operator">&lt;=</span><span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7798</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7829</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=1840 */</span>                                                     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+</span><span class="token number">56</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容解释</p><table><thead><tr><th>行</th><th>含义</th></tr></thead><tbody><tr><td>第一行：SET @@SESSION.GTID_NEXT&#x3D; ‘ANONYMOUS’</td><td>主备切换用的，见《mysql主备从入门到入土》</td></tr><tr><td>第二行：BEGIN</td><td>跟第四行的 commit 对应，表示中间是一个事务</td></tr><tr><td>第三行</td><td>是真实执行的语句了。可以看到，在真实执行的 delete 命令之前，还有一个“use ‘zs’”命令。这条命令是 MySQL 根据当前要操作的表所在的数据库，自行添加的。这样做可以保证日志传到备库去执行的时候，不论当前的工作线程在哪个库里，都能够正确地更新到 test 库的表 t。use ‘zs’命令之后的 delete 语句，就是我们输入的 SQL 原文了。</td></tr><tr><td>第四行：COMMIT &#x2F;* xid&#x3D;1840 *&#x2F;</td><td>你可以看到里面写着 xid&#x3D;1840,xid是崩溃恢复的时候，和redolog关联，用来校验binlog完整性的</td></tr></tbody></table><ul><li>使用mysqlbinlog工具，可以查看到更加具体的内容</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">C:\Program Files\MySQL\MySQL Server 8.0\bin&gt;mysqlbinlog.exe  -vv &quot;C:\ProgramData\MySQL\MySQL Server 8.0\Data\SF0001408876LA-bin.000002&quot; --start-position&#x3D;7829 --stop-position&#x3D;8126# The proper term is pseudo_replica_mode, but we use this compatibility alias# to make the statement usable on server versions 8.0.24 and older.&#x2F;*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;1*&#x2F;;&#x2F;*!50003 SET @OLD_COMPLETION_TYPE&#x3D;@@COMPLETION_TYPE,COMPLETION_TYPE&#x3D;0*&#x2F;;DELIMITER &#x2F;*!*&#x2F;;# at 156#221101 14:12:06 server id 1  end_log_pos 125 CRC32 0xe443eab6  Start: binlog v 4, server v 8.0.26 created 221101 14:12:06 at startup# Warning: this binlog is either in use or was not closed properly.ROLLBACK&#x2F;*!*&#x2F;;BINLOG &#39;trhgYw8BAAAAeQAAAH0AAAABAAQAOC4wLjI2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2uGBjEwANAAgAAAAABAAEAAAAYQAEGggAAAAICAgCAAAACgoKKioAEjQACigBtupD5A&#x3D;&#x3D;&#39;&#x2F;*!*&#x2F;;# at 7829#221108 17:42:32 server id 1  end_log_pos 7908 CRC32 0x816102e0         Anonymous_GTID  last_committed&#x3D;26       sequence_number&#x3D;27      rbr_only&#x3D;no     original_committed_timestamp&#x3D;1667900553012960   immediate_commit_timestamp&#x3D;1667900553012960  transaction_length&#x3D;327# original_commit_timestamp&#x3D;1667900553012960 (2022-11-08 17:42:33.012960 中国标准时间)# immediate_commit_timestamp&#x3D;1667900553012960 (2022-11-08 17:42:33.012960 中国标准时间)&#x2F;*!80001 SET @@session.original_commit_timestamp&#x3D;1667900553012960*&#x2F;&#x2F;*!*&#x2F;;&#x2F;*!80014 SET @@session.original_server_version&#x3D;80026*&#x2F;&#x2F;*!*&#x2F;;&#x2F;*!80014 SET @@session.immediate_server_version&#x3D;80026*&#x2F;&#x2F;*!*&#x2F;;SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;&#x2F;*!*&#x2F;;# at 7908#221108 17:42:32 server id 1  end_log_pos 7986 CRC32 0x08dd3003         Query   thread_id&#x3D;18    exec_time&#x3D;1     error_code&#x3D;0SET TIMESTAMP&#x3D;1667900552&#x2F;*!*&#x2F;;SET @@session.pseudo_thread_id&#x3D;18&#x2F;*!*&#x2F;;SET @@session.foreign_key_checks&#x3D;1, @@session.sql_auto_is_null&#x3D;0, @@session.unique_checks&#x3D;1, @@session.autocommit&#x3D;1&#x2F;*!*&#x2F;;SET @@session.sql_mode&#x3D;1075838976&#x2F;*!*&#x2F;;SET @@session.auto_increment_increment&#x3D;1, @@session.auto_increment_offset&#x3D;1&#x2F;*!*&#x2F;;&#x2F;*!\C utf8mb4 *&#x2F;&#x2F;*!*&#x2F;;SET @@session.character_set_client&#x3D;255,@@session.collation_connection&#x3D;255,@@session.collation_server&#x3D;255&#x2F;*!*&#x2F;;SET @@session.lc_time_names&#x3D;0&#x2F;*!*&#x2F;;SET @@session.collation_database&#x3D;DEFAULT&#x2F;*!*&#x2F;;&#x2F;*!80011 SET @@session.default_collation_for_utf8mb4&#x3D;255*&#x2F;&#x2F;*!*&#x2F;;BEGIN&#x2F;*!*&#x2F;;# at 7986#221108 17:42:32 server id 1  end_log_pos 8125 CRC32 0x8d364776         Query   thread_id&#x3D;18    exec_time&#x3D;1     error_code&#x3D;0use &#96;zs&#96;&#x2F;*!*&#x2F;;SET TIMESTAMP&#x3D;1667900552&#x2F;*!*&#x2F;;&#x2F;* ApplicationName&#x3D;DataGrip 2021.1.2 *&#x2F; delete from t where id &#x3D; 3&#x2F;*!*&#x2F;;# at 8125#221108 17:42:32 server id 1  end_log_pos 8156 CRC32 0x9959b790         Xid &#x3D; 2011COMMIT&#x2F;*!*&#x2F;;SET @@SESSION.GTID_NEXT&#x3D; &#39;AUTOMATIC&#39; &#x2F;* added by mysqlbinlog *&#x2F; &#x2F;*!*&#x2F;;DELIMITER ;# End of log file&#x2F;*!50003 SET COMPLETION_TYPE&#x3D;@OLD_COMPLETION_TYPE*&#x2F;;&#x2F;*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;0*&#x2F;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="row"><a href="#row" class="headerlink" title="row"></a><strong>row</strong></h6><p>先将测试数据复原，重新导入</p><p>按照上面的方式，查看当前binlog的格式，并将当前会话的binlog的格式设置为：row</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> a<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">and</span> t_modified<span class="token operator">&lt;=</span><span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在查看binlog的内容之前，首先查看当前binlog写在了哪个文件上，因为binlog有很多个</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>           <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span>     <span class="token number">7829</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后查看binlog的内容（binlog很大，这里只截取了一部分）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxx-bin.000002'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> Log_name       <span class="token operator">|</span> Pos  <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5043</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5122</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span> <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5122</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5203</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5203</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5251</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> <span class="token punctuation">(</span>zs<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                 <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5251</span> <span class="token operator">|</span> Delete_rows    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5299</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> flags: STMT_END_F      <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5299</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5330</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=1924 */</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token number">74</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容解释</p><table><thead><tr><th>行</th><th>含义</th></tr></thead><tbody><tr><td>第一行：SET @@SESSION.GTID_NEXT&#x3D; ‘ANONYMOUS’</td><td>主备切换用的，见《mysql主备从入门到入土》</td></tr><tr><td>第二行：BEGIN</td><td>跟第五行的 commit 对应，表示中间是一个事务</td></tr><tr><td>第三行：</td><td>在statement格式中，记录的是sql原文，在row格式下，记录的是两个event：Table_map和Delete_rows这两个动作</td></tr><tr><td>第四行：</td><td>Table_map表示要操作哪个数据库的那张表； Delete_rows表示删除一行，具体的内容，这里看不到，需要借助mysqlbinlog工具来看</td></tr><tr><td>第五行：COMMIT &#x2F;* xid&#x3D;1924 *&#x2F;</td><td>你可以看到里面写着 xid&#x3D;1924 ,xid是崩溃恢复的时候，和redolog关联，用来校验binlog完整性的</td></tr></tbody></table><p>在第四行中，我们看不到具体的内容，所以需要通过mysqlbinlog工具来看</p><p>mysqlbinlog是啥，就是一个可以执行的工具，在windows系统下，这个工具在mysql的安装目录下，叫：mysqlbinlog.exe</p><p>因为我现在用的windows，所以就用windows来展示了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token operator">></span>cd C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>binC:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>bin<span class="token operator">></span>dir 驱动器 C 中的卷是 系统 卷的序列号是 0003-57E7 C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>bin 的目录<span class="token number">2022</span>/11/01  <span class="token number">14</span>:10    <span class="token operator">&lt;</span>DIR<span class="token operator">></span>          <span class="token builtin class-name">.</span><span class="token number">2022</span>/11/01  <span class="token number">14</span>:10    <span class="token operator">&lt;</span>DIR<span class="token operator">></span>          <span class="token punctuation">..</span><span class="token number">2021</span>/07/01  02:12         xxxxxxxxx xxxxxxxx（因为文件太多了，所以我这里就是省略了）<span class="token number">2021</span>/07/01  02:12         <span class="token number">6,960</span>,408 mysql.exe<span class="token number">2021</span>/07/01  02:12         <span class="token number">6,854</span>,952 mysqladmin.exe<span class="token number">2021</span>/07/01  02:12         <span class="token number">7,168</span>,808 mysqlbinlog.exe              <span class="token number">48</span> 个文件    <span class="token number">270,259</span>,595 字节               <span class="token number">2</span> 个目录 <span class="token number">24,862</span>,003,200 可用字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在bin目录下，有一个工具叫做：mysqlbinlog.exe</p><p>然后我们在<code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code>这个目录下运行下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqlbinlog.exe  <span class="token parameter variable">-vv</span> <span class="token string">"C:\ProgramData\MySQL\MySQL Server 8.0\Data\SF0001408876LA-bin.000002"</span> --start-position<span class="token operator">=</span><span class="token number">5043</span> --stop-position<span class="token operator">=</span><span class="token number">5300</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-vv</code>表示verbose，啰嗦模式，为了把内容都解析出来，所以从结果里面可以看到各个字段的值（比如，@1&#x3D;4、 @2&#x3D;4 这些值）。</li><li><code>--start-position</code>表示binlog的开始位置，值哪里来的，来自于<code>show binlog events in &#39;xxx-bin.000002&#39;</code>结果的pos字段</li><li><code>--stop-position</code>表示binlog的结束位置，值哪里来的，来自于<code>show binlog events in &#39;xxx-bin.000002&#39;</code>结果的pos字段，写大一点，要不然不包括进来（比如我的pos&#x3D;5299，但是我这里写的是5300）</li></ul><p>运行结果如下（结果还挺长的，删掉了一些，只列出比较重要的几个内容）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>bin<span class="token operator">></span>mysqlbinlog.exe  <span class="token parameter variable">-vv</span> <span class="token string">"C:\ProgramData\MySQL\MySQL Server 8.0\Data\SF0001408876LA-bin.000002"</span> --start-position<span class="token operator">=</span><span class="token number">5043</span> --stop-position<span class="token operator">=</span><span class="token number">5300</span><span class="token comment"># at 5043</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5122 CRC32 0x72f668e7         Anonymous_GTID  last_committed=17       sequence_number=18      rbr_only=yes    original_committed_timestamp=1667287271257812   immediate_commit_timestamp=1667287271257812  transaction_length=287</span>SET @@<span class="token environment constant">SESSION</span>.GTID_NEXT<span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment"># at 5122</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5203 CRC32 0xe3288066         Query   thread_id=11    exec_time=0     error_code=0</span>SET <span class="token assign-left variable">TIMESTAMP</span><span class="token operator">=</span><span class="token number">1667287271</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>SET @@session.pseudo_thread_id<span class="token operator">=</span><span class="token number">11</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>SET @@session.sql_mode<span class="token operator">=</span><span class="token number">1075838976</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>BEGIN/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment"># at 5203</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5251 CRC32 0x613f3131         Table_map: `zs`.`t` mapped to number 169</span><span class="token comment"># at 5251</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5299 CRC32 0x75141201         Delete_rows: table id 169 flags: STMT_END_F</span>BINLOG <span class="token string">'58hgYxMBAAAAMAAAAIMUAAAAAKkAAAAAAAEAAnpzAAF0AAMDAxEBAAIBAQAxMT9h58hgYyABAAAAMAAAALMUAAAAAKkAAAAAAAEAAgAD/wAEAAAABAAAAFvlrwABEhR1'</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment">### DELETE FROM `zs`.`t`</span><span class="token comment">### WHERE</span><span class="token comment">###   @1=4 /* INT meta=0 nullable=0 is_null=0 */</span><span class="token comment">###   @2=4 /* INT meta=0 nullable=1 is_null=0 */</span><span class="token comment">###   @3=1541779200 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */</span><span class="token comment"># at 5299</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5330 CRC32 0xc30d2901         Xid = 1924</span>COMMIT/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>SET @@<span class="token environment constant">SESSION</span>.GTID_NEXT<span class="token operator">=</span> <span class="token string">'AUTOMATIC'</span> /* added by mysqlbinlog */ /*<span class="token operator">!</span>*/<span class="token punctuation">;</span>DELIMITER <span class="token punctuation">;</span><span class="token comment"># End of log file</span>/*<span class="token operator">!</span><span class="token number">50003</span> SET <span class="token assign-left variable">COMPLETION_TYPE</span><span class="token operator">=</span>@OLD_COMPLETION_TYPE*/<span class="token punctuation">;</span>/*<span class="token operator">!</span><span class="token number">50530</span> SET @@<span class="token environment constant">SESSION</span>.PSEUDO_SLAVE_MODE<span class="token operator">=</span><span class="token number">0</span>*/<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>server id 1</code>表示这个事务是在 server_id&#x3D;1 的这个库上执行的。</p></li><li><p><code>CRC32 0xc30d2901</code>每个 event 都有 CRC32 的值，这是因为我把参数 binlog_checksum 设置成了 CRC32。</p><ul><li>可以通过<code>show variables like &#39;%binlog_checksum%&#39;;</code> 查看binlog_checksum 的值</li></ul></li><li><p><code>SET TIMESTAMP=1667287271/*!*/;</code>当前sql执行的时间戳，在主备同步的时候，如果有延迟，而sql中又使用了日期函数的话，容易导致主备不一致，所以mysql在binlog中，保存了每个sql执行的时间，这样主备同步的时候，日期函数就不会出问题了。</p></li><li><p><code>@1=4 /* INT meta=0 nullable=0 is_null=0 */</code></p></li><li><p><code>@2=4 /* INT meta=0 nullable=1 is_null=0 */</code></p></li><li><p><code>@3=1541779200 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */</code></p></li><li><p>上面这三行，表示被删掉的这条记录的原始的值。为什么会记录的这么详细？因为我们开启了记录全部信息</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_row_image%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token operator">|</span> binlog_row_image <span class="token operator">|</span> <span class="token keyword">FULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果把<code>binlog_row_image</code>设置为：MINIMAL，就不会记录的这么详细的，只会记录一个id而已。</li><li>最后的 Xid event，用于表示事务被正确地提交了。</li></ul><h6 id="mix"><a href="#mix" class="headerlink" title="mix"></a><strong>mix</strong></h6><p>mix格式的binlog其实就是statement和row格式的结合。</p><p>对于statement来说，容易导致主备同步不一致的问题，比如主备上索引选择不一致的话，就会导致主备不一致；</p><p>对于row来说，如果删除的数据很多，row会把删掉的每一条记录都记下来，占用磁盘IO，浪费空间。</p><p>所以就诞生了mix格式</p><p>在binlog_format&#x3D;mix格式下，mysql会自己判断，如果当前语句存在数据不一致的风险，就会采用row格式，否则采用statement格式；</p><p>但是mix格式下，因为是mysql自己判断的，这些判断逻辑在实际环境中，可能会出现不可预知的问题。</p><p>所以：一般都是直接使用 ROW 格式</p><p>在公司的生产环境，使用的binlog格式是：ROW</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看binlog的格式</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'binlog_format'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="mysql的WAL机制"><a href="#mysql的WAL机制" class="headerlink" title="mysql的WAL机制"></a>mysql的WAL机制</h2><p>WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。</p><p>WAL 机制是减少磁盘写，可是每次提交事务都要写 redo log 和 binlog，这磁盘读写次数也没变少呀？</p><p>现在你就能理解了，WAL 机制主要得益于两个方面：</p><ul><li>redo log 和 binlog 都是顺序写，磁盘的顺序写比随机写速度要快；</li><li>组提交机制，可以大幅度降低磁盘的 IOPS 消耗。怎么降低的呢？<a href="#%E7%BB%84%E6%8F%90%E4%BA%A4%EF%BC%88%E5%8F%8C1%E9%85%8D%E7%BD%AE%EF%BC%8CLSN%EF%BC%89">点我去看：组提交（双1配置，LSN）</a></li></ul><h2 id="日志的写入流程（二阶段提交）"><a href="#日志的写入流程（二阶段提交）" class="headerlink" title="日志的写入流程（二阶段提交）"></a>日志的写入流程（二阶段提交）</h2><h3 id="redolog和binlog的整体写入流程（二阶段提交）"><a href="#redolog和binlog的整体写入流程（二阶段提交）" class="headerlink" title="redolog和binlog的整体写入流程（二阶段提交）"></a>redolog和binlog的整体写入流程（二阶段提交）</h3><pre class="mermaid">sequenceDiagramclient->>server:更新ID=2这一行server->>innodb:获取ID=2这一行innodb->>innodb:ID=2这一行是否在内存页中innodb->>server:在内存中，直接返回ID=2的行数据innodb->>disk:不在内存中<br/>从磁盘中加载ID=2这一行的数据页disk->>innodb:返回ID=2所在的数据页innodb->>server:返回ID=2的行数据server->>server:对ID=2的数据，进行更新操作server->>innodb:写入更新后的数据innodb->>innodb:更新内存innodb->>innodb:记录redolog，处于prepare状态innodb->>server:更新成功server->>server:记录binlogserver->>innodb:提交事务innodb->>innodb:redolog提交，处于commit状态innodb->>server:更新完成server->>client:更新完成</pre><h4 id="为什么要有两阶段提交（反证法）"><a href="#为什么要有两阶段提交（反证法）" class="headerlink" title="为什么要有两阶段提交（反证法）"></a>为什么要有两阶段提交（反证法）</h4><p>为什么必须要有两阶段提交呢？我们知道两阶段提交是为了保证分布式事务的数据一致性的， 那么mysql是要保证什么数据的一致性。</p><p>很显然：是为了保证redolog和binlog的数据一致性</p><p>那么为什么要保证redolog和binlog的数据一致性呢？这就涉及到redolog和binlog的作用是什么呢？对！是为了崩溃恢复。</p><p>那么我们看看没有两阶段提交会怎么样？</p><p>1、<strong>先写redolog后写binlog</strong>。假设redolog写完了，binlog没写完，mysql崩了。重启之后，因为redolog完整，数据恢复；但是binlog不完整， binlog 里面就没有记录这个语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库恢复出来数据与原库的值不同。 另外主备一致也是通过binlog同步的，binlog不完整，备库的数据就不对了。</p><p>2、<strong>先写binlog后写redolog</strong>。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以数据不变。但是 binlog 里面已经记录了数据变更的日志。所以，在之后用 binlog 来恢复的时候数据与原库的值不同。</p><h3 id="redolog的写入流程"><a href="#redolog的写入流程" class="headerlink" title="redolog的写入流程"></a>redolog的写入流程</h3><pre class="mermaid">sequenceDiagraminnodb->>innodb:dml成功\n更新内存\n开始记录redologinnodb->>redologbuffer:redolog记录到内存中redologbuffer->>pagecache:写入到文件系统的pagecache中(write)pagecache->>disk:持久化到磁盘文件(fsync)</pre><p>我们看到redolog写盘是有三步的，先写redologbuffer，在write到pagecache中，在fsync到disk中；</p><p>那么问题来了，这三步，对于mysql来说，究竟哪一步才算做redolog写入成功了呢？</p><p>是写到redologbuffer就行了，还是必须要fsync之后才行呢？</p><p>其实这是通过一个参数配置的：innodb_flush_log_at_trx_commit</p><ul><li>当innodb_flush_log_at_trx_commit&#x3D;0的时候，表示每次事务提交都只留在redologbuffer中；</li><li>当innodb_flush_log_at_trx_commit&#x3D;1的时候，表示每次事务提交都会fsync持久化到磁盘中；</li><li>当innodb_flush_log_at_trx_commit&#x3D;2的时候，表示每次事务提交都只是write到文件系统的pagecache中；</li></ul><p>公司的生产环境，配置的是：innodb_flush_log_at_trx_commit &#x3D; 1</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- redolog的刷盘配置</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'innodb_flush_log_at_trx_commit'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>redologbuffer有多大？超过了怎么办呢？</p><ul><li>redologbuffer有多大是通过innodb_log_buffer_size来控制的。show viriables like ‘innodb_log_buffer_size’</li><li>超过了怎么办？不会超过的，为什么呢？<ul><li>当redologbuffer中存的内容超过innodb_log_buffer_size一半的时候，就会触发write到文件系统的pagecache中</li><li>所以不会超过的。</li></ul></li></ul><h3 id="binlog的写入流程"><a href="#binlog的写入流程" class="headerlink" title="binlog的写入流程"></a>binlog的写入流程</h3><pre class="mermaid">sequenceDiagraminnodb->>server:当dml成功\n此时redolog处于prepare状态server->>server:开始记录binlogserver->>binlogcache:将binlog记录到binlogcache中binlogcache->>binlogcache:binlog cache\n是在内存中的\n每个线程私有的binlogcache->>pagecache:将binlog写入到操作系统的pagecache中（write）pagecache->>disk:数据持久化到磁盘（fsync）\n这一步占用IOPS</pre><p>我们看到binlog写盘是有三步的，先写binlogcache，在write到pagecache中，在fsync到disk中；</p><p>那么问题来了，这三步，对于mysql来说，究竟哪一步才算做binlog写入成功了呢？</p><p>是写到binlogcache就行了，还是必须要fsync之后才行呢？</p><p>其实这是通过一个参数配置的：sync_binlog</p><ul><li>sync_binlog&#x3D;0的时候，表示每次事务提交都只write，不fsync</li><li>sync_binlog&#x3D;1的时候，表示每次事务提交都会执行fsync</li><li>sync_binlog&#x3D;N（N&gt;1）的时候，表示累计到N个事务之后，才fsync</li></ul><p>公司的生产环境，配置的是：sync_binlog &#x3D; 1</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- binlog的刷盘配置</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'sync_binlog'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>binlogcache有多大呢？超过了怎么办呢？</p><ul><li>show viriables like ‘binlog_cache_size’；表示单个线程内 binlog cache 所占内存的大小</li><li>超过了会刷盘，但是并不是写到binlog文件中，而是暂存到磁盘中，写在临时文件中；</li></ul><p>为什么binlogcache是线程私有的？</p><ul><li>因为一个线程是一个事务，我们要保证一个事务的binlog是完整的，中间不能插入其他的binlog，所以binlogcache是线程私有的</li></ul><h3 id="redolog和binlog的刷盘时机"><a href="#redolog和binlog的刷盘时机" class="headerlink" title="redolog和binlog的刷盘时机"></a>redolog和binlog的刷盘时机</h3><p><strong>redolog的刷盘时机</strong></p><p>考虑一个极端的情况，当我们把innodb_flash_log_at_trx_commit设置为0的时候，此时redolog只会写到redologbuffer（redologbuffer是在mysql的内存中的），那么什么时候刷盘呢？</p><ul><li>刷盘时机1：InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。</li><li>刷盘时机2：当redologbuffer中的内容占用超过redolog_buffer_size大小的一半时候，后台线程会主动写盘</li><li>刷盘时机3：当并行的其他事务提交的时候，会将redologbuffer中的所有内容都刷盘；<ul><li>对于时机3：不能将innodb_flash_log_at_trx_commit配置设置为0，因为这个时候，事务提交的时候不会刷盘</li><li>对于时机3：可能会把进行汇总的事务的redolog进行刷盘，会有问题吗？<ul><li>不会，这个和崩溃恢复的流程有关。此时redolog是prepare阶段的，要想恢复的话，还得去找binlog呢。</li></ul></li></ul></li></ul><p><strong>binlog的刷盘时机</strong></p><p>binlog会有刷盘时机吗？sync_binlog不管设置成多少，都至少保证了binlog会写到文件系统的pagecache中，接下来就是操作系统的范畴了。</p><p>详细的说，binlog的刷盘是在 “二阶段三步骤” 的第二步骤 sync state 中</p><h3 id="在两阶段提交的不同时刻，MySQL-异常重启会出现什么现象。"><a href="#在两阶段提交的不同时刻，MySQL-异常重启会出现什么现象。" class="headerlink" title="在两阶段提交的不同时刻，MySQL 异常重启会出现什么现象。"></a>在两阶段提交的不同时刻，MySQL 异常重启会出现什么现象。</h3><p>在讨论这个问题的时候，简化一下二阶段提交，只看最基本的情况。</p><pre class="mermaid">graph TD;id1([写入binlog处于prepare阶段])--时刻A-->id2([写binlog]);id2--时刻B-->id3([提交事务处于comit阶段])</pre><p><strong>时刻A</strong></p><p>就是写入 redo log 处于 prepare 阶段之后、写 binlog 之前，发生了崩溃（crash）由于此时 binlog 还没写，redo log 也还没提交，所以崩溃恢复的时候，这个事务会回滚。这时候，binlog 还没写，所以也不会传到备库。到这里，大家都可以理解。</p><p><strong>时刻B</strong></p><p>就是 binlog 写完，redo log 还没 commit 前发生 crash，那崩溃恢复的时候 MySQL 会怎么处理呢？</p><ul><li>如果 redo log 里面的事务是完整的，也就是已经有了 commit 标识，则直接提交；</li><li>如果 redo log 里面的事务只有完整的 prepare，则判断对应的事务 binlog 是否存在并完整：<ul><li>a. 如果是，则提交事务；</li><li>b. 否则，回滚事务。</li></ul></li></ul><h2 id="组提交（双1配置，LSN）"><a href="#组提交（双1配置，LSN）" class="headerlink" title="组提交（双1配置，LSN）"></a>组提交（双1配置，LSN）</h2><p>mysql5.7关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/5.7/sql/binlog.cc">点我跳转到github</a></p><p>mysql8.0关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc">点我跳转到github</a></p><p>关于组提交，这篇文章是我见过讲的最好的一篇：<a href="https://zhuanlan.zhihu.com/p/567154450">https://zhuanlan.zhihu.com/p/567154450</a></p><p>这篇文章里面有一些图，可以帮助更好的理解：<a href="https://blog.51cto.com/u_15080021/2642167">https://blog.51cto.com/u_15080021/2642167</a></p><p>还有这一篇，也挺不错的：<a href="https://segmentfault.com/a/1190000014810628">mysql - MySQL 2PC &amp; Group Commit</a></p><h3 id="双1配置"><a href="#双1配置" class="headerlink" title="双1配置"></a>双1配置</h3><p>我们看到mysql默认会把innodb_flash_log_at_trx_commit设置为1，sync_binlog设置为1，这就是通常我们所说的 MySQL 的<strong>“ 双 1 ”配置</strong>。</p><p>也就是说，一个事务完整提交前，需要等待两次刷盘，一次是 redo log（prepare 阶段），一次是 binlog。</p><p>那么问题来了，如果mysql的TPS是2万，也就意味着每秒要写4万次磁盘，但是单独测试磁盘的IOPS，也就在2万左右，怎么能承受住mysql的2万的TPS呢？</p><p>这个时候就用到了组提交（group commit）</p><h3 id="日志逻辑序列号（LSN）"><a href="#日志逻辑序列号（LSN）" class="headerlink" title="日志逻辑序列号（LSN）"></a>日志逻辑序列号（LSN）</h3><p>在介绍组提交之前，需要先了解日志逻辑序列号（log sequence number）LSN</p><h4 id="什么是LSN"><a href="#什么是LSN" class="headerlink" title="什么是LSN"></a>什么是LSN</h4><ul><li>每一个redolog的生成，都伴随着LSN的生成</li><li>LSN是单调递增的</li><li>LSN是用来对应redolog的一个一个的写入点（write pos）</li><li>每当写入长度为length的redolog，LSN的值就会加上length</li></ul><h4 id="flushed-to-disk-lsn"><a href="#flushed-to-disk-lsn" class="headerlink" title="flushed_to_disk_lsn"></a>flushed_to_disk_lsn</h4><p>已经刷到磁盘的LSN</p><p>系统第一次启动时，该变量的值和初始的<code>lsn</code>值是相同的。随着系统的运行，<code>redo</code>日志被不断写入<code>log buffer</code>，但是并不会立即刷新到磁盘，<code>lsn</code>的值就和<code>flushed_to_disk_lsn</code>的值拉开了差距。</p><p>如果两者的值相同时，说明log buffer中的所有redo日志都已经刷新到磁盘中了。</p><h4 id="current-flush-lsn"><a href="#current-flush-lsn" class="headerlink" title="current_flush_lsn"></a>current_flush_lsn</h4><p>当前正在刷的LSN</p><h4 id="LSN有什么用"><a href="#LSN有什么用" class="headerlink" title="LSN有什么用"></a>LSN有什么用</h4><ul><li>减少redolog组提交时候的刷盘次数，减少磁盘IO（看后面的组提交有详细的说明）</li></ul><h3 id="组提交"><a href="#组提交" class="headerlink" title="组提交"></a>组提交</h3><p>简单的记忆就是：两个阶段，三个步骤</p><p>经过 5.6&#x2F;5.7&#x2F;8.0 的逐步优化，两阶段提交的逻辑优化为：</p><ul><li>Prepare 阶段：只是将<code>redolog</code>写入<code>pagecache</code>（并不刷盘）。</li><li>Commit 阶段按步骤做流水线批处理，拆为三个步骤：<ul><li>flush stage：<code>redo log</code> 刷盘（多个事务 <code>redo log</code>合并刷盘），按事务进入的顺序将 <code>binlog</code>  写入<code>pagecache</code>（并不刷盘）。</li><li>sync stage：对 binlog 刷盘（多个事务的 binlog 合并刷盘）。</li><li>commit stage：各个线程按顺序做 InnoDB commit 操作。</li></ul></li></ul><p>三个步骤（stage）中，每个 stage 一个队列，第一个进入该队列的线程成为 leader，后续进入的线程会作为follower，并且一直阻塞直至leader完成提交（sql语句会阻塞）。leader 线程会领导队列中的所有线程执行该 stage 的任务，并带领所有 follower 进入到下一个 stage 去执行，当遇到下一个 stage 队列不为空的时候，leader 会变成 follower 注册到此队列中。</p><pre class="mermaid">sequenceDiagramserver->>innodb:更新数据note left of innodb:第一阶段innodb->>innodb:记录redologinnodb->>pagecache:redolog write 事务处于preparepagecache->>innodb:write 成功innodb->>server:redolog prepare 成功note left of innodb:第二阶段第一步骤pagecache->>disk:redolog刷盘(【组提交】)server->>server:记录binlogserver->>pagecache:binlog写到文件系统的cachepagecache->>server:binlog 成功note left of disk:第二阶段第二步骤pagecache->>disk:binlog刷盘（【组提交】）note left of innodb:第二阶段第三步骤server->>innodb:提交事务innodb->>innodb:事务处于commitinnodb->>server:更新完成</pre><h4 id="第二阶段的第一步骤中，是先写binlog还是先刷redolog？"><a href="#第二阶段的第一步骤中，是先写binlog还是先刷redolog？" class="headerlink" title="第二阶段的第一步骤中，是先写binlog还是先刷redolog？"></a>第二阶段的第一步骤中，是先写binlog还是先刷redolog？</h4><p>我看了mysql5.7的源码，其实是先刷的redolog，但是mysql45讲说的是先写binlog，在刷redolog。（老师讲错了）</p><p>mysql5.7关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/5.7/sql/binlog.cc">点我跳转到github</a></p><p>mysql8.0关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc">点我跳转到github</a></p><p>第二步骤的第一阶段（就是FLASH_STAGE）的代码如下（mysql5.7）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**  Execute the flush stage.  @param total_bytes_var Pointer to variable that will be set to total  number of bytes flushed, or NULL.  @param rotate_var Pointer to variable that will be set to true if  binlog rotation should be performed after releasing locks. If rotate  is not necessary, the variable will not be touched.  @return Error code on error, zero on success */</span><span class="token keyword">int</span>MYSQL_BIN_LOG<span class="token operator">::</span><span class="token function">process_flush_stage_queue</span><span class="token punctuation">(</span><span class="token class-name">my_off_t</span> <span class="token operator">*</span>total_bytes_var<span class="token punctuation">,</span>                                         bool <span class="token operator">*</span>rotate_var<span class="token punctuation">,</span>                                         THD <span class="token operator">*</span><span class="token operator">*</span>out_queue_var<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">DBUG_ENTER</span><span class="token punctuation">(</span><span class="token string">"MYSQL_BIN_LOG::process_flush_stage_queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>  <span class="token comment">// number of flushes per group.</span>  <span class="token keyword">int</span> no_flushes<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token function">assert</span><span class="token punctuation">(</span>total_bytes_var <span class="token operator">&amp;&amp;</span> rotate_var <span class="token operator">&amp;&amp;</span> out_queue_var<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">my_off_t</span> total_bytes<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> flush_error<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">mysql_mutex_assert_owner</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LOCK_log<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*    Fetch the entire flush queue and empty it, so that the next batch    has a leader. We must do this before invoking ha_flush_logs(...)    for guaranteeing to flush prepared records of transactions before    flushing them to binary log, which is required by crash recovery.  */</span>  THD <span class="token operator">*</span>first_seen<span class="token operator">=</span> stage_manager<span class="token punctuation">.</span><span class="token function">fetch_queue_for</span><span class="token punctuation">(</span>Stage_manager<span class="token operator">::</span>FLUSH_STAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span><span class="token punctuation">(</span>first_seen <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*    We flush prepared records of transactions to the log of storage    engine (for example, InnoDB redo log) in a group right before    flushing them to binary log.     这段注释表示，在写binlog之前需要先把redolog刷盘    ha_flush_logs(NULL, true);这个方法就是对redolog刷盘  */</span>  <span class="token function">ha_flush_logs</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">DBUG_EXECUTE_IF</span><span class="token punctuation">(</span><span class="token string">"crash_after_flush_engine_log"</span><span class="token punctuation">,</span> <span class="token function">DBUG_SUICIDE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assign_automatic_gtids_to_flush_group</span><span class="token punctuation">(</span>first_seen<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*   Flush thread caches to binary log.   这段注释表示，开始 write binlog【这里不明白的是，为什么也叫flush？】  */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>THD <span class="token operator">*</span>head<span class="token operator">=</span> first_seen <span class="token punctuation">;</span> head <span class="token punctuation">;</span> head <span class="token operator">=</span> head<span class="token operator">-></span>next_to_commit<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token class-name">my_off_t</span><span class="token operator">></span> result<span class="token operator">=</span> <span class="token function">flush_thread_caches</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    total_bytes<span class="token operator">+=</span> result<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flush_error <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>      flush_error<span class="token operator">=</span> result<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>    no_flushes<span class="token operator">++</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>out_queue_var<span class="token operator">=</span> first_seen<span class="token punctuation">;</span>  <span class="token operator">*</span>total_bytes_var<span class="token operator">=</span> total_bytes<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>total_bytes <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">my_b_tell</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>log_file<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token class-name">my_off_t</span><span class="token punctuation">)</span> max_size<span class="token punctuation">)</span>    <span class="token operator">*</span>rotate_var<span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>  <span class="token function">DBUG_PRINT</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"no_flushes:= %d"</span><span class="token punctuation">,</span> no_flushes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  no_flushes<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>flush_error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组提交“组”在了哪里"><a href="#组提交“组”在了哪里" class="headerlink" title="组提交“组”在了哪里"></a>组提交“组”在了哪里</h4><p>在第二阶段的第一步骤中，redolog进行了组提交刷盘</p><p>在第二阶段的第二步骤中，binlog进行组提交刷盘</p><p>那么具体是怎么“<code>组</code>”提交的呢？</p><p>1、在第一阶段，事务线程不停地，刷刷刷的进来，写redolog，此时只写到pagecache中；</p><p>2、在第二阶段的第一步骤中，有一个队列，假设叫【队列-1】，</p><ul><li>当前线程会先把【队列-1】清空，以便下一批有一个leader</li><li>当前线程中直接对redolog进行刷盘。ha_flush_logs(NULL, true);</li><li>第一个进来的线程作为leader，后续的线程作为follower，进入【队列-1】（也就是说队列-1和刷redolog并没有啥关系）</li></ul><p>3、redolog刷盘完成之后，leader对【队列-1】中的事务线程，进行循环，write binlog</p><p>4、write bin完成之后，【队列-1】的leader进入第二阶段的第二步骤，会进入到【队列-2】</p><p>5、在第二阶段的第二步骤中，【队列-2】的leader会等待（受<strong>binlog_group_commit_sync_delay</strong> 和 <strong>binlog_group_commit_sync_no_delay_count</strong>控制）</p><p>6、等待之后，【队列-2】的leader开始对binlog进行刷盘（因为等待了一段时间，所以binlog这里也是组提交）</p><p>7、fsync binlog之后，【队列-2】的leader进入第二阶段的第三步骤，会进入到【队列-3】</p><p>8、【队列-3】的leader会按照串行化的方式，循环，一个一个的对事务线程进行COMMIT</p><h4 id="组提交和LSN有啥关系"><a href="#组提交和LSN有啥关系" class="headerlink" title="组提交和LSN有啥关系"></a>组提交和LSN有啥关系</h4><p>首先明确：</p><ul><li>在innodb中，每条redolog都有自己的LSN，这是一个单调递增的值。</li><li>每个事务的更新操作都会包含一条或者<strong>多条</strong>redo log</li><li>各个事务在将redo log写入 redo log buffer (通过log_mutex保护)时，都会获取<strong>当前事务</strong>最大的LSN。</li></ul><p>在组提交的第二阶段的第一步骤中，redolog会被组提交刷盘，组提交刷盘的时候，会有下面的流程</p><p>那么假设三个事务 tx1, tx2, tx3的最大LSN分别为 100 , 200 , 300  时，他们同时进行提交，如果tx3获取到了 log_mutex 互斥锁, 那么他会将小于 300 之前的redo log一起落盘，同时记录  <strong>flushed_to_disk_lsn</strong>&#x3D;300， 这样 tx1, tx2不用再次请求磁盘io。</p><p>同时，如果存在 tx0 的 LSN0 &lt; 300，LSN0 也会落盘，即使tx0还没有提交。然后当tx0的事务开始提交的时候，发现redolog已经刷盘了（ flushed_to_disk_lsn &gt;&#x3D; lsn），就直接返回了，节省了时间。</p><ol><li>获取 log mutex互斥锁</li><li>如果 flushed_to_disk_lsn &gt;&#x3D; lsn, 表示日志已经被刷盘，跳转 5 后进入等待状态</li><li>如果 current_flush_lsn &gt;&#x3D; lsn, 表示日志正在刷盘中，跳转 5 后进入等待状态</li><li>将小于 lsn 的日志刷盘 (sync)</li><li>释放 log_mutex互斥锁</li></ol><h2 id="mysql的崩溃恢复Crash-Safe能力（重要作用）"><a href="#mysql的崩溃恢复Crash-Safe能力（重要作用）" class="headerlink" title="mysql的崩溃恢复Crash-Safe能力（重要作用）"></a>mysql的崩溃恢复Crash-Safe能力（重要作用）</h2><h3 id="崩溃恢复的具体步骤"><a href="#崩溃恢复的具体步骤" class="headerlink" title="崩溃恢复的具体步骤"></a>崩溃恢复的具体步骤</h3><p>1、mysql崩溃重启后，进行恢复</p><p>2、判断redolog的状态，如果redolog&#x3D;commit，直接提交事务</p><p>3、如果redolog&#x3D;prepare，则通过xid去找binlog</p><p>4、binlog存在，并且binlog是完整的，提交事务</p><p>5、binlog不存在，或者binlog存在，但是不完整，回滚事务</p><h3 id="MySQL-怎么知道-binlog-是完整的"><a href="#MySQL-怎么知道-binlog-是完整的" class="headerlink" title="MySQL 怎么知道 binlog 是完整的"></a>MySQL 怎么知道 binlog 是完整的</h3><p>回答：一个事务的 binlog 是有完整格式的：</p><ul><li>statement 格式的 binlog，最后会有 COMMIT；</li><li>row 格式的 binlog，最后会有一个 XID event。</li></ul><p>另外，在 MySQL 5.6.2 版本以后，还引入了 binlog-checksum 参数，用来验证 binlog 内容的正确性。对于 binlog 日志由于磁盘原因，可能会在日志中间出错的情况，MySQL 可以通过校验 checksum 的结果来发现。所以，MySQL 还是有办法验证事务 binlog 的完整性的。</p><p>可以通过下面的命令查看<code>binlog-checksum</code>的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_checksum%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+-------+</span><span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-------+</span><span class="token operator">|</span> binlog_checksum <span class="token operator">|</span> CRC32 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是<code>mysql 8.0</code>版本的默认值，就是CRC32，它有什么用呢，在ROW格式下的binlog，通过<code>mysqlbinlog</code>工具可以看到具体的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>省略<span class="token comment"># at 5299</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5330 CRC32 0xc30d2901         Xid = 1824</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个<code>CRC32 0xc30d2901</code>内容就是CRC32的值，用来校验binlog的完整性。</p><h3 id="redo-log-和-binlog-是怎么关联起来的"><a href="#redo-log-和-binlog-是怎么关联起来的" class="headerlink" title="redo log 和 binlog 是怎么关联起来的"></a>redo log 和 binlog 是怎么关联起来的</h3><p>它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：</p><ul><li>如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；</li><li>如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。</li></ul><h3 id="如果只有binlog可以Crash-Safe吗？"><a href="#如果只有binlog可以Crash-Safe吗？" class="headerlink" title="如果只有binlog可以Crash-Safe吗？"></a>如果只有binlog可以Crash-Safe吗？</h3><p>不行，因为binlog是逻辑日志，binlog写完了，并不保证数据一定在磁盘中。</p><p>在崩溃恢复的时候，顺序扫描binlog，发现日志是完整的，那么此时要执行这个binlog吗？</p><ul><li>执行：如果数据已经写到了磁盘，又执行一遍，那数据就不对了呀。</li><li>不执行：如果数据没写到磁盘，不执行，数据就少了呀。</li></ul><p>综上，只用binlog是不可以的。</p><h3 id="如果只有redolog可以Crash-Safe吗？"><a href="#如果只有redolog可以Crash-Safe吗？" class="headerlink" title="如果只有redolog可以Crash-Safe吗？"></a>如果只有redolog可以Crash-Safe吗？</h3><p>如果只从崩溃恢复的角度来讲是可以的。你可以把 binlog 关掉，这样就没有两阶段提交了，但系统依然是 crash-safe 的。</p><p>但是呢，redolog是循环写的，所以只用redolog，mysql虽然可以crash-safe，但是不具备归档的能力了。</p><h2 id="刷脏页"><a href="#刷脏页" class="headerlink" title="刷脏页"></a>刷脏页</h2><h3 id="正常运行中的实例，数据写入后的最终落盘，是从-redo-log-更新过来的还是从-buffer-pool-更新过来的呢？"><a href="#正常运行中的实例，数据写入后的最终落盘，是从-redo-log-更新过来的还是从-buffer-pool-更新过来的呢？" class="headerlink" title="正常运行中的实例，数据写入后的最终落盘，是从 redo log 更新过来的还是从 buffer pool 更新过来的呢？"></a>正常运行中的实例，数据写入后的最终落盘，是从 redo log 更新过来的还是从 buffer pool 更新过来的呢？</h3><p>这里涉及到了，“redo log 里面到底是什么”的问题。</p><p>实际上，redo log 并没有记录数据页的完整数据，所以它并没有能力自己去更新磁盘数据页，也就不存在“数据最终落盘，是由 redo log 更新过去”的情况。</p><ul><li>如果是正常运行的实例的话，数据页被修改以后，跟磁盘的数据页不一致，称为脏页。最终数据落盘，就是把内存中的数据页写盘。这个过程，甚至与 redo log 毫无关系。</li><li>在崩溃恢复场景中，InnoDB 如果判断到一个数据页可能在崩溃恢复的时候丢失了更新，就会将这个数据页加载到内存中，然后让 redo log 更新内存中的数据页内容。更新完成后，内存页变成脏页，就回到了第一种情况的状态。</li></ul><h2 id="changebuffer（对更新的优化，对比redolog）"><a href="#changebuffer（对更新的优化，对比redolog）" class="headerlink" title="changebuffer（对更新的优化，对比redolog）"></a>changebuffer（对更新的优化，对比redolog）</h2><h3 id="changebuffer的更新流程"><a href="#changebuffer的更新流程" class="headerlink" title="changebuffer的更新流程"></a>changebuffer的更新流程</h3><p>每一次更新都必须从内存中（不在内存中，就要从磁盘中load）获取到要更新的这一行吗？</p><ul><li>不是的；</li><li>在mysql5.5之前，changebuffer叫做insert buffer，仅支持插入，在5.5之后，叫change buffer，支持了更新和删除；</li><li>changebuffer只有普通索引才能用到，因为唯一索引要判定记录是否存在，所以查询一定要的</li></ul><pre class="mermaid">sequenceDiagramclient->>server:执行dml语句server->>innodb:要执行dml语句innodb->>innodb:判断要执行的语句\n是否在内存中innodb->>cache:在内存中，直接操作内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成innodb->>changebuffer:不在内存中，记录到change bufferchangebuffer->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成note over client,disk:记录到缓存中，什么时候刷到磁盘呢？changebuffer->>disk:后台线程定时刷changebuffer->>disk:changebuffer不足时changebuffer->>disk:数据库正常关闭时changebuffer->>disk:redolog写满时\n（此时数据库不可用）note over client,disk:记录在缓存中，查询的时候怎么办client->>server:请求查询某一条记录server->>innodb:查询某一条记录innodb->>innodb:判断要查询的语句\n是否在内存中cache->>innodb:在内存中，直接返回innodb->>server:操作完成，返回server->>client:操作完成disk->>cache:不在内存中，从disk加载到内存中cache->>innodb:获取内存中的这一条记录innodb->>innodb:判断这一条记录是否有更新innodb->>server:没有更新\n操作完成，返回changebuffer->>innodb:有更新，应用changebuffer的更新\n这一步叫mergeinnodb->>cache:将更新后的记录先记录到内存页中innodb->>server:操作完成，返回server->>client:操作完成</pre><h3 id="普通索引和唯一索引的更新流程"><a href="#普通索引和唯一索引的更新流程" class="headerlink" title="普通索引和唯一索引的更新流程"></a>普通索引和唯一索引的更新流程</h3><p>在普通索引的更新流程（可以用changebuffer）</p><pre class="mermaid">sequenceDiagramclient->server:执行dml语句server->>innodb:要执行dml语句innodb->>innodb:判断要执行的语句\n是否在内存中innodb->>cache:在内存中，直接操作内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成innodb->>changebuffer:不在内存中，记录到change bufferchangebuffer->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成</pre><p>在唯一索引的更新流程（不可以用changebuffer）</p><pre class="mermaid">sequenceDiagramclient->server:执行dml语句server->>innodb:要执行dml语句innodb->>innodb:判断要执行的语句\n是否在内存中innodb->>cache:在内存中，直接操作内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成innodb->>disk:不在内存中，从磁盘中加载到内存disk->>cache:从磁盘中加载到内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成</pre><h3 id="change-buffer-和-redo-log"><a href="#change-buffer-和-redo-log" class="headerlink" title="change buffer 和 redo log"></a>change buffer 和 redo log</h3><p>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</p><h2 id="一些简单的问题"><a href="#一些简单的问题" class="headerlink" title="一些简单的问题"></a>一些简单的问题</h2><p>执行一个 update 语句以后，我再去执行 hexdump 命令直接查看 ibd 文件内容，为什么没有看到数据有改变呢？</p><p>为什么 binlog cache 是线程私有的，而 redo log buffer 是全局共用的？</p><p>事务执行期间，还没到提交阶段，如果发生 crash 的话，redo log 肯定丢了，这会不会导致主备不一致呢？</p><p>如果 binlog 写完盘以后发生 crash，这时候还没给客户端答复就重启了。等客户端再重连进来，发现事务已经提交成功了，这是不是 bug？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的日志从入门到入土&quot;&gt;&lt;a href=&quot;#mysql的日志从入门到入土&quot; class=&quot;headerlink&quot; title=&quot;mysql的日志从入门到入土&quot;&gt;&lt;/a&gt;mysql的日志从入门到入土&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;本文有xmind，配合xmind查</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="binlog" scheme="https://zspcer.gitee.io/tags/binlog/"/>
    
    <category term="redolog" scheme="https://zspcer.gitee.io/tags/redolog/"/>
    
  </entry>
  
  <entry>
    <title>mysql的性能调优从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2022-12-18T12:19:26.093Z</published>
    <updated>2022-12-18T12:19:26.093Z</updated>
    
    <content type="html"><![CDATA[<hr><p>资料：打开</p><p>事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能</p><p>减少大事务，可以减少主备延迟，可以降低锁的时间，减少死锁的产生，减少死锁检测的性能消耗。</p><p>减少并发量（减少对于同一行更新的并发量），可以减少死锁的产生，可以减少死锁检测的性能消耗</p><p>在删除数据的时候尽量加 limit。这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</p><p>在出现IO瓶颈的时候，可以将sync_binglog设置为100-1000内的值，表示累计多少个事务之后才会刷盘，默认是1表示每一个事务都会刷盘写binlog；</p><p>在出现IO瓶颈的时候，可以设置binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count，表示提升binlog的组提交的效果，但是会增加sql的响应时间</p><p>写多读少的场景，由于 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑普通索引。</p><p>mysql要调优，就要知道它为什么慢，哪里慢</p><p>在低版本：show profiles</p><p>在高版本：performance schema</p><p>以上有什么用？</p><ul><li>比如在实际环境中，有一个sql，非常慢</li><li>sql本身没有问题，看执行计划也比较慢，这个时候就可以用到上面的</li><li>可以更加详细的看到，这个sql到底是哪里慢</li></ul><p>process list 可以查看mysql的连接数量，顺丰云上的回话连接是不是？</p><p>不过一般有druid，不用太关注这个。但是呢，druid是什么，要去看看github上面的官网了。了解一下它的优点</p><p>字符集和字符编码的区别</p><p>大表拆分，将不常用的数据从表里拆出去，表小了之后，每个数据页存的数据就会多，查询的时候，就会减少磁盘IO</p><p>优化：</p><ul><li>不同的数据选择对应的mysql自建数据类型，比如数字就用数字类型，不要用字符串，时间就用时间类型，不要用字符串；用错了数据类型，对业务可能没影响，但是对mysql来说，内部多了一层转换，sql执行会比较慢</li><li>事件类型，建议用date，而不是timestamp，date类型</li></ul><p>大事务不仅会影响到主库，也是造成备库复制延迟的主要原因之一。因此，在平时的开发工作中，我建议你尽量减少大事务操作，把大事务拆成小事务。</p><p>show processlist</p><ul><li><p>看到的只是当前的并发连接数，如果你的系统动不动就成千上百个连接，其实都没关系，只是占用一些内存而已</p></li><li><p>&#96;&#96;&#96;sql<br>mysql&gt; show processlist;<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>| Id | User            | Host            | db   | Command | Time   | State                  | Info             |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>|  5 | event_scheduler | localhost       | NULL | Daemon  | 865562 | Waiting on empty queue | NULL             |<br>| 23 | root            | localhost:60179 | NULL | Query   |      0 | init                   | show processlist |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>2 rows in set (0.00 sec)</p><pre class="line-numbers language-none"><code class="language-none">- 真正需要关注的是并发执行数，也就是并发执行的线程，因为连接存在，这个连接不一定在执行。- innodb的并发执行数，通过&#96;innodb_thread_concurrency&#96;这个参数来控制的，默认是0表示不限制。- &#96;innodb_thread_concurrency&#96;的计算规则是：正在执行的线程+1，如果一个线程在执行过程中，遇到了锁，需要等待，线程-1---## 看懂mysql执行计划​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。​   官网地址： https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.5&#x2F;en&#x2F;explain-output.html ### 准备数据&#96;&#96;&#96;sql&#x2F;*Navicat MySQL Data TransferSource Server         : mybatisSource Server Version : 50722Source Host           : localhost:3306Source Database       : dempTarget Server Type    : MYSQLTarget Server Version : 50722File Encoding         : 65001Date: 2020-02-11 20:05:02*&#x2F;SET FOREIGN_KEY_CHECKS&#x3D;0;-- ------------------------------ Table structure for dept-- ----------------------------DROP TABLE IF EXISTS &#96;dept&#96;;CREATE TABLE &#96;dept&#96; (  &#96;DEPTNO&#96; int(4) NOT NULL,  &#96;DNAME&#96; varchar(14) DEFAULT NULL,  &#96;LOC&#96; varchar(13) DEFAULT NULL,  PRIMARY KEY (&#96;DEPTNO&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Records of dept-- ----------------------------INSERT INTO &#96;dept&#96; VALUES (&#39;10&#39;, &#39;ACCOUNTING&#39;, &#39;NEW YORK&#39;);INSERT INTO &#96;dept&#96; VALUES (&#39;20&#39;, &#39;RESEARCH&#39;, &#39;DALLAS&#39;);INSERT INTO &#96;dept&#96; VALUES (&#39;30&#39;, &#39;SALES&#39;, &#39;CHICAGO&#39;);INSERT INTO &#96;dept&#96; VALUES (&#39;40&#39;, &#39;OPERATIONS&#39;, &#39;BOSTON&#39;);-- ------------------------------ Table structure for emp-- ----------------------------DROP TABLE IF EXISTS &#96;emp&#96;;CREATE TABLE &#96;emp&#96; (  &#96;EMPNO&#96; int(4) NOT NULL,  &#96;ENAME&#96; varchar(10) DEFAULT NULL,  &#96;JOB&#96; varchar(9) DEFAULT NULL,  &#96;MGR&#96; int(4) DEFAULT NULL,  &#96;HIREDATE&#96; date DEFAULT NULL,  &#96;SAL&#96; double(7,2) DEFAULT NULL,  &#96;COMM&#96; double(7,2) DEFAULT NULL,  &#96;DEPTNO&#96; int(4) DEFAULT NULL,  PRIMARY KEY (&#96;EMPNO&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Records of emp-- ----------------------------INSERT INTO &#96;emp&#96; VALUES (&#39;7369&#39;, &#39;SMITH&#39;, &#39;CLERK&#39;, &#39;7902&#39;, &#39;1980-12-17&#39;, &#39;800.00&#39;, null, &#39;20&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7499&#39;, &#39;ALLEN&#39;, &#39;SALESMAN&#39;, &#39;7698&#39;, &#39;1981-02-20&#39;, &#39;1600.00&#39;, &#39;300.00&#39;, &#39;30&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7521&#39;, &#39;WARD&#39;, &#39;SALESMAN&#39;, &#39;7698&#39;, &#39;1981-02-22&#39;, &#39;1250.00&#39;, &#39;500.00&#39;, &#39;30&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7566&#39;, &#39;JONES&#39;, &#39;MANAGER&#39;, &#39;7839&#39;, &#39;1981-02-02&#39;, &#39;2975.00&#39;, null, &#39;20&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7654&#39;, &#39;MARTIN&#39;, &#39;SALESMAN&#39;, &#39;7698&#39;, &#39;1981-09-28&#39;, &#39;1250.00&#39;, &#39;1400.00&#39;, &#39;30&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7698&#39;, &#39;BLAKE&#39;, &#39;MANAGER&#39;, &#39;7839&#39;, &#39;1981-01-05&#39;, &#39;2850.00&#39;, null, &#39;30&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7782&#39;, &#39;CLARK&#39;, &#39;MANAGER&#39;, &#39;7839&#39;, &#39;1981-09-06&#39;, &#39;2450.00&#39;, null, &#39;10&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7839&#39;, &#39;KING&#39;, &#39;PRESIDENT&#39;, null, &#39;1981-11-17&#39;, &#39;5000.00&#39;, null, &#39;10&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7844&#39;, &#39;TURNER&#39;, &#39;SALESMAN&#39;, &#39;7698&#39;, &#39;1981-09-08&#39;, &#39;1500.00&#39;, &#39;0.00&#39;, &#39;30&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7900&#39;, &#39;JAMES&#39;, &#39;CLERK&#39;, &#39;7698&#39;, &#39;1981-12-03&#39;, &#39;950.00&#39;, null, &#39;30&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7902&#39;, &#39;FORD&#39;, &#39;ANALYST&#39;, &#39;7566&#39;, &#39;1981-12-03&#39;, &#39;3000.00&#39;, null, &#39;20&#39;);INSERT INTO &#96;emp&#96; VALUES (&#39;7934&#39;, &#39;MILLER&#39;, &#39;CLERK&#39;, &#39;7782&#39;, &#39;1982-01-23&#39;, &#39;1300.00&#39;, null, &#39;10&#39;);-- ------------------------------ Table structure for salgrade-- ----------------------------DROP TABLE IF EXISTS &#96;salgrade&#96;;CREATE TABLE &#96;salgrade&#96; (  &#96;GRADE&#96; int(11) NOT NULL,  &#96;LOSAL&#96; double DEFAULT NULL,  &#96;HISAL&#96; double DEFAULT NULL,  PRIMARY KEY (&#96;GRADE&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Records of salgrade-- ----------------------------INSERT INTO &#96;salgrade&#96; VALUES (&#39;1&#39;, &#39;700&#39;, &#39;1200&#39;);INSERT INTO &#96;salgrade&#96; VALUES (&#39;2&#39;, &#39;1201&#39;, &#39;1400&#39;);INSERT INTO &#96;salgrade&#96; VALUES (&#39;3&#39;, &#39;1401&#39;, &#39;2000&#39;);INSERT INTO &#96;salgrade&#96; VALUES (&#39;4&#39;, &#39;2001&#39;, &#39;3000&#39;);INSERT INTO &#96;salgrade&#96; VALUES (&#39;5&#39;, &#39;3001&#39;, &#39;9999&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="执行计划中包含的信息"><a href="#执行计划中包含的信息" class="headerlink" title="执行计划中包含的信息"></a>执行计划中包含的信息</h3><table><thead><tr><th align="center">列</th><th>含义</th></tr></thead><tbody><tr><td align="center">id</td><td>select查询的序列号</td></tr><tr><td align="center">select_type</td><td>查询的类型，是普通查询还是联合查询还是子查询</td></tr><tr><td align="center">table</td><td>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</td></tr><tr><td align="center">partitions</td><td>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</td></tr><tr><td align="center">type</td><td>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描</td></tr><tr><td align="center">possible_keys</td><td>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</td></tr><tr><td align="center">key</td><td>实际使用的索引，如果为null，则没有使用索引</td></tr><tr><td align="center">key_len</td><td>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好</td></tr><tr><td align="center">ref</td><td>显示索引的哪一列被使用了，如果可能的话，是一个常数</td></tr><tr><td align="center">rows</td><td>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数</td></tr><tr><td align="center">filtered</td><td>某个表经过搜索条件过滤后剩余记录条数的百分比，rows 乘以 filtered 的结果表示要与下表连接的行数</td></tr><tr><td align="center">extra</td><td>额外的信息</td></tr></tbody></table><h4 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h4><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><ul><li>如果id相同，那么执行顺序从上到下</li><li>如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>同时存在id相同和不同的：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</li></ul><h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><strong>select_type</strong></h4><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><ul><li><code>sample</code>：简单的查询，不包含子查询和union</li><li><code>primary</code>：查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</li><li><code>union</code>：若第二个select出现在union之后，则被标记为union</li><li><code>dependent union</code> ： 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</li><li><code>union result</code>：从union表获取结果的select</li><li><code>subquery</code>：在select或者where列表中包含子查询</li><li><code>dependent subquery</code>：subquery的子查询要受到外部表查询的影响</li><li><code>derived</code>：from子句中出现的子查询</li><li><code>uncacheable subquery</code>：表示使用子查询的结果不能被缓存</li><li><code>uncacheable union</code>：表示union的查询结果不能被缓存：sql语句未验证</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--sample:简单的查询，不包含子查询和union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">--primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">--union:若第二个select出现在union之后，则被标记为union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">--dependent union : 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>empno  <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment">--union result:从union表获取结果的select</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">--subquery:在select或者where列表中包含子查询</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">--dependent subquery:subquery的子查询要受到外部表查询的影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--DERIVED: from子句中出现的子查询，也叫做派生类，</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">--UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span>@<span class="token variable">@sort_buffer_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h4><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</p><ul><li>如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</li><li>表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</li><li>当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</li></ul><h4 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a><strong>partitions</strong></h4><p>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h4><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p><ul><li><code>system</code>：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</li><li><code>const</code>：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候是这种情况</li><li><code>eq_ref</code>：使用唯一性索引进行数据查找</li><li><code>ref</code>：使用了非唯一性索引进行数据的查找</li><li><code>fulltext</code></li><li><code>ref_or_null</code>：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</li><li><code>index_merge</code>：在查询过程中需要多个索引组合使用</li><li><code>unique_subquery</code>：该连接类型类似与index_subquery,使用的是唯一索引</li><li><code>index_subquery</code>：利用索引来关联子查询，不再扫描全表</li><li><code>range</code>：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描</li><li><code>index</code>：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，或者是使用了索引进行排序，这样就避免数据的重排序</li><li><code>all</code>：全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</li></ul><p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">--index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">--range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, &lt;>, >, >=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">between</span> <span class="token number">7000</span> <span class="token operator">and</span> <span class="token number">7500</span><span class="token punctuation">;</span><span class="token comment">--index_subquery：利用索引来关联子查询，不再扫描全表</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> t_job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span><span class="token comment">--ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> mgr <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> mgr<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment">--ref：使用了非唯一性索引进行数据的查找</span> <span class="token keyword">create</span> <span class="token keyword">index</span> idx_3 <span class="token keyword">on</span> emp<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e<span class="token punctuation">,</span>dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span>d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">--eq_ref ：使用唯一性索引进行数据查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>emp2 <span class="token keyword">where</span> emp<span class="token punctuation">.</span>empno <span class="token operator">=</span> emp2<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token comment">--const：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候会有这个type</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span> <span class="token comment">--system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a><strong>possible_keys</strong></h4><p>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h4><p>实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h4><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h4><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a><strong>rows</strong></h4><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a><strong>filtered</strong></h4><p>某个表经过搜索条件<code>过滤后剩余记录条数</code>的百分比，这个<code>过滤后剩余记录条数</code>，是需要用来对下一张表进行连接的行数。什么意思呢？</p><ul><li>对于单表查询来说，这个filtered列的值没什么意义。</li><li>对于多表联合查询，假设表1扫描的rows是10000行，filteres是20%，那么表示要与表2进行连接的行数是：10000 x 20% &#x3D; 2000条记录。</li></ul><h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a><strong>extra</strong></h4><p>包含额外的信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--using filesort :说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span><span class="token comment">--using temporary:建立临时表来保存中间结果，查询完成之后把临时表删除</span><span class="token keyword">explain</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> ename<span class="token punctuation">;</span><span class="token comment">--using index: 这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">--using where:使用where进行条件过滤</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">--using join buffer:使用连接缓存，情况没有模拟出来</span><span class="token comment">--impossible where：where语句的结果总是false</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7469</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;资料：打开&lt;/p&gt;
&lt;p&gt;事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能&lt;/p&gt;
&lt;p&gt;减少大事务，可以减少主备延迟，可</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="性能" scheme="https://zspcer.gitee.io/tags/%E6%80%A7%E8%83%BD/"/>
    
    <category term="调优" scheme="https://zspcer.gitee.io/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E8%8C%83%E5%9B%B4%E5%88%86%E5%8C%BA/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E8%8C%83%E5%9B%B4%E5%88%86%E5%8C%BA/</id>
    <published>2022-12-18T12:19:26.092Z</published>
    <updated>2022-12-18T12:19:26.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="范围分区"><a href="#范围分区" class="headerlink" title="范围分区"></a>范围分区</h1><p>​范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用values less than运算符来定义。</p><p>​1、创建普通的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​2、创建带分区的表，下面建表的语句是按照store_id来进行分区的，指定了4个分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--在当前的建表语句中可以看到，store_id的值在1-5的在p0分区，6-10的在p1分区，11-15的在p3分区，16-20的在p4分区，但是如果插入超过20的值就会报错，因为mysql不知道将数据放在哪个分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​3、可以使用less than maxvalue来避免此种情况</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--maxvalue表示始终大于等于最大可能整数值的整数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​4、可以使用相同的方式根据员工的职务代码对表进行分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>job_code<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5、可以使用date类型进行分区：如虚妄根据每个员工离开公司的年份进行划分，如year(separated)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>separated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​6、可以使用函数根据range的值来对表进行分区，如timestampunix_timestamp()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--timestamp不允许使用任何其他涉及值的表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于时间间隔的分区方案，在mysql5.7中，可以基于范围或事件间隔实现分区方案，有两种选择</p><p>1、基于范围的分区，对于分区表达式，可以使用操作函数基于date、time、或者datatime列来返回一个整数值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1960</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、基于范围列的分区，使用date或者datatime列作为分区列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token keyword">COLUMNS</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1960-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1970-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1980-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1990-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="真实案例："><a href="#真实案例：" class="headerlink" title="真实案例："></a>真实案例：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#不分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> no_part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token punctuation">;</span><span class="token comment">#分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>d_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1998</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p10 <span class="token keyword">VALUES</span> LESS THAN maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#插入未分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> no_load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token comment">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> no_load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> no_part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'no'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> no_load_part<span class="token punctuation">;</span><span class="token comment">#插入分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'partition'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> load_part<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;范围分区&quot;&gt;&lt;a href=&quot;#范围分区&quot; class=&quot;headerlink&quot; title=&quot;范围分区&quot;&gt;&lt;/a&gt;范围分区&lt;/h1&gt;&lt;p&gt;​		范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用v</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/</id>
    <published>2022-12-18T12:19:26.092Z</published>
    <updated>2022-12-18T12:19:26.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h1><p>1、当发起一个被索引覆盖的查询时，在explain的extra列可以看到using index的信息，此时就使用了覆盖索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> store_id<span class="token punctuation">,</span>film_id <span class="token keyword">from</span> inventory\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>           id: <span class="token number">1</span>  select_type: <span class="token keyword">SIMPLE</span>        <span class="token keyword">table</span>: inventory   partitions: <span class="token boolean">NULL</span>         <span class="token keyword">type</span>: <span class="token keyword">index</span>possible_keys: <span class="token boolean">NULL</span>          <span class="token keyword">key</span>: idx_store_id_film_id      key_len: <span class="token number">3</span>          ref: <span class="token boolean">NULL</span>         <span class="token keyword">rows</span>: <span class="token number">4581</span>     filtered: <span class="token number">100.00</span>        Extra: <span class="token keyword">Using</span> <span class="token keyword">index</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在大多数存储引擎中，覆盖索引只能覆盖那些只访问索引中部分列的查询。不过，可以进一步的进行优化，可以使用innodb的二级索引来覆盖查询。</p><p>例如：actor使用innodb存储引擎，并在last_name字段又二级索引，虽然该索引的列不包括主键actor_id，但也能够用于对actor_id做覆盖查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> actor_id<span class="token punctuation">,</span>last_name <span class="token keyword">from</span> actor <span class="token keyword">where</span> last_name<span class="token operator">=</span><span class="token string">'HOPPER'</span>\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>           id: <span class="token number">1</span>  select_type: <span class="token keyword">SIMPLE</span>        <span class="token keyword">table</span>: actor   partitions: <span class="token boolean">NULL</span>         <span class="token keyword">type</span>: refpossible_keys: idx_actor_last_name          <span class="token keyword">key</span>: idx_actor_last_name      key_len: <span class="token number">137</span>          ref: const         <span class="token keyword">rows</span>: <span class="token number">2</span>     filtered: <span class="token number">100.00</span>        Extra: <span class="token keyword">Using</span> <span class="token keyword">index</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;覆盖索引&quot;&gt;&lt;a href=&quot;#覆盖索引&quot; class=&quot;headerlink&quot; title=&quot;覆盖索引&quot;&gt;&lt;/a&gt;覆盖索引&lt;/h1&gt;&lt;p&gt;1、当发起一个被索引覆盖的查询时，在explain的extra列可以看到using index的信息，此时就使用了覆盖索引&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95%E5%AE%9E%E4%BE%8B%E8%AF%B4%E6%98%8E/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95%E5%AE%9E%E4%BE%8B%E8%AF%B4%E6%98%8E/</id>
    <published>2022-12-18T12:19:26.074Z</published>
    <updated>2022-12-18T12:19:26.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀索引实例说明"><a href="#前缀索引实例说明" class="headerlink" title="前缀索引实例说明"></a>前缀索引实例说明</h1><p>​有时候需要索引很长的字符串，这会让索引变的大且慢，通常情况下可以使用某个列开始的部分字符串，这样大大的节约索引空间，从而提高索引效率，但这会降低索引的选择性，索引的选择性是指不重复的索引值和数据表记录总数的比值，范围从1&#x2F;#T到1之间。索引的选择性越高则查询效率越高，因为选择性更高的索引可以让mysql在查找的时候过滤掉更多的行。</p><p>​一般情况下某个列前缀的选择性也是足够高的，足以满足查询的性能，但是对应BLOB,TEXT,VARCHAR类型的列，必须要使用前缀索引，因为mysql不允许索引这些列的完整长度，使用该方法的诀窍在于要选择足够长的前缀以保证较高的选择性，通过又不能太长。</p><p>案例演示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建数据表</span><span class="token keyword">create</span> <span class="token keyword">table</span> citydemo<span class="token punctuation">(</span>city <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> citydemo<span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token keyword">select</span> city <span class="token keyword">from</span> city<span class="token punctuation">;</span><span class="token comment">--重复执行5次下面的sql语句</span><span class="token keyword">insert</span> <span class="token keyword">into</span> citydemo<span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token keyword">select</span> city <span class="token keyword">from</span> citydemo<span class="token punctuation">;</span><span class="token comment">--更新城市表的名称</span><span class="token keyword">update</span> citydemo <span class="token keyword">set</span> city<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> city <span class="token keyword">from</span> city <span class="token keyword">order</span> <span class="token keyword">by</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--查找最常见的城市列表，发现每个值都出现45-65次，</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cnt<span class="token punctuation">,</span>city <span class="token keyword">from</span> citydemo <span class="token keyword">group</span> <span class="token keyword">by</span> city <span class="token keyword">order</span> <span class="token keyword">by</span> cnt <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">--查找最频繁出现的城市前缀，先从3个前缀字母开始，发现比原来出现的次数更多，可以分别截取多个字符查看城市出现的次数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cnt<span class="token punctuation">,</span><span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pref <span class="token keyword">from</span> citydemo <span class="token keyword">group</span> <span class="token keyword">by</span> pref <span class="token keyword">order</span> <span class="token keyword">by</span> cnt <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cnt<span class="token punctuation">,</span><span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pref <span class="token keyword">from</span> citydemo <span class="token keyword">group</span> <span class="token keyword">by</span> pref <span class="token keyword">order</span> <span class="token keyword">by</span> cnt <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">--此时前缀的选择性接近于完整列的选择性</span><span class="token comment">--还可以通过另外一种方式来计算完整列的选择性，可以看到当前缀长度到达7之后，再增加前缀长度，选择性提升的幅度已经很小了</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel3<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel4<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel5<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel6<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel7<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel8 <span class="token keyword">from</span> citydemo<span class="token punctuation">;</span><span class="token comment">--计算完成之后可以创建前缀索引</span><span class="token keyword">alter</span> <span class="token keyword">table</span> citydemo <span class="token keyword">add</span> <span class="token keyword">key</span><span class="token punctuation">(</span>city<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--注意：前缀索引是一种能使索引更小更快的有效方法，但是也包含缺点：mysql无法使用前缀索引做order by 和 group by。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前缀索引实例说明&quot;&gt;&lt;a href=&quot;#前缀索引实例说明&quot; class=&quot;headerlink&quot; title=&quot;前缀索引实例说明&quot;&gt;&lt;/a&gt;前缀索引实例说明&lt;/h1&gt;&lt;p&gt;​		有时候需要索引很长的字符串，这会让索引变的大且慢，通常情况下可以使用某个列开始的部分字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</id>
    <published>2022-12-18T12:19:26.074Z</published>
    <updated>2022-12-18T12:19:26.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引优化分析案例"><a href="#索引优化分析案例" class="headerlink" title="索引优化分析案例"></a>索引优化分析案例</h1><p>预先准备好数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>itdragon_order_list<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>itdragon_order_list<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键id，默认自增长'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'交易号'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>gross<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'毛收入(RMB)'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>net<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'净收入(RMB)'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>stock_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'发货仓库'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>order_status<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>descript<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'客服备注'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>finance_descript<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'财务备注'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建类型'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>order_level<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单级别'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>input_user<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'录入人'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>input_date<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'录入时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">10003</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> itdragon_order_list <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10000'</span><span class="token punctuation">,</span> <span class="token string">'81X97310V32236260E'</span><span class="token punctuation">,</span> <span class="token string">'6.6'</span><span class="token punctuation">,</span> <span class="token string">'6.13'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'itdragon'</span><span class="token punctuation">,</span> <span class="token string">'2017-08-28 17:01:49'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> itdragon_order_list <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10001'</span><span class="token punctuation">,</span> <span class="token string">'61525478BB371361Q'</span><span class="token punctuation">,</span> <span class="token string">'18.88'</span><span class="token punctuation">,</span> <span class="token string">'18.79'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'itdragon'</span><span class="token punctuation">,</span> <span class="token string">'2017-08-18 17:01:50'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> itdragon_order_list <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10002'</span><span class="token punctuation">,</span> <span class="token string">'5RT64180WE555861V'</span><span class="token punctuation">,</span> <span class="token string">'20.18'</span><span class="token punctuation">,</span> <span class="token string">'20.17'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'itdragon'</span><span class="token punctuation">,</span> <span class="token string">'2017-09-08 17:01:49'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逐步开始进行优化：</p><p>第一个案例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itdragon_order_list <span class="token keyword">where</span> transaction_id <span class="token operator">=</span> <span class="token string">"81X97310V32236260E"</span><span class="token punctuation">;</span><span class="token comment">--通过查看执行计划发现type=all,需要进行全表扫描</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itdragon_order_list <span class="token keyword">where</span> transaction_id <span class="token operator">=</span> <span class="token string">"81X97310V32236260E"</span><span class="token punctuation">;</span><span class="token comment">--优化一、为transaction_id创建唯一索引</span> <span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> idx_order_transaID <span class="token keyword">on</span> itdragon_order_list <span class="token punctuation">(</span>transaction_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--当创建索引之后，唯一索引对应的type是const，通过索引一次就可以找到结果，普通索引对应的type是ref，表示非唯一性索引赛秒，找到值还要进行扫描，直到将索引文件扫描完为止，显而易见，const的性能要高于ref</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itdragon_order_list <span class="token keyword">where</span> transaction_id <span class="token operator">=</span> <span class="token string">"81X97310V32236260E"</span><span class="token punctuation">;</span>  <span class="token comment">--优化二、使用覆盖索引，查询的结果变成 transaction_id,当extra出现using index,表示使用了覆盖索引</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> transaction_id <span class="token keyword">from</span> itdragon_order_list <span class="token keyword">where</span> transaction_id <span class="token operator">=</span> <span class="token string">"81X97310V32236260E"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个案例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建复合索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_order_levelDate <span class="token keyword">on</span> itdragon_order_list <span class="token punctuation">(</span>order_level<span class="token punctuation">,</span>input_date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--创建索引之后发现跟没有创建索引一样，都是全表扫描，都是文件排序</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itdragon_order_list <span class="token keyword">order</span> <span class="token keyword">by</span> order_level<span class="token punctuation">,</span>input_date<span class="token punctuation">;</span><span class="token comment">--可以使用force index强制指定索引</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itdragon_order_list <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_order_levelDate<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> order_level<span class="token punctuation">,</span>input_date<span class="token punctuation">;</span><span class="token comment">--其实给订单排序意义不大，给订单级别添加索引意义也不大，因此可以先确定order_level的值，然后再给input_date排序</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itdragon_order_list <span class="token keyword">where</span> order_level<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> input_date<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;索引优化分析案例&quot;&gt;&lt;a href=&quot;#索引优化分析案例&quot; class=&quot;headerlink&quot; title=&quot;索引优化分析案例&quot;&gt;&lt;/a&gt;索引优化分析案例&lt;/h1&gt;&lt;p&gt;预先准备好数据&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/sakila%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%B4%E6%98%8E/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/sakila%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%B4%E6%98%8E/</id>
    <published>2022-12-18T12:19:26.073Z</published>
    <updated>2022-12-18T12:19:26.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sakila数据库说明"><a href="#sakila数据库说明" class="headerlink" title="sakila数据库说明"></a>sakila数据库说明</h1><p>ZIP格式：<a href="http://downloads.mysql.com/docs/sakila-db.zip">http://downloads.mysql.com/docs/sakila-db.zip</a></p><p>tar格式 <a href="http://downloads.mysql.com/docs/sakila-db.tar.gz">http://downloads.mysql.com/docs/sakila-db.tar.gz</a></p><p>官方文档 <a href="https://dev.mysql.com/doc/sakila/en/index.html">http://dev.mysql.com/doc/sakila/en/index.html</a></p><p>解压后得到三个文件：</p><ol><li><p>sakila-schema.sql 文件包含创建Sakila数据库的结构：表、视图、存储过程和触发器</p></li><li><p>sakila-data.sql文件包含：使用 INSERT语句填充数据及在初始数据加载后，必须创建的触发器的定义</p></li><li><p>sakila.mwb文件是一个MySQL Workbench数据模型，可以在MySQL的工作台打开查看数据库结构。</p></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--登录mysql</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456<span class="token comment">--导入表的结构数据</span>source <span class="token operator">/</span>root<span class="token operator">/</span>sakila<span class="token operator">-</span><span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token comment">--导入表的数据</span>source <span class="token operator">/</span>root<span class="token operator">/</span>sakila<span class="token operator">-</span><span class="token keyword">data</span><span class="token punctuation">.</span><span class="token keyword">sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="梳理各个表的名称和字段名称"><a href="#梳理各个表的名称和字段名称" class="headerlink" title="梳理各个表的名称和字段名称"></a>梳理各个表的名称和字段名称</h5><p>1、actor：演员表，演员表列出了所有演员的信息。演员表和电影表之间是多对多的关系，通过film_actor表建立关系</p><p>​actor_id:代理主键，用于唯一标识表中的每个演员</p><p>​first_name: 演员的名字</p><p>​last_name: 演员的姓氏</p><p>​last_update: 该行已创建或最近更新的时间</p><p>2、address:地址表，地址表包含客户、员工和商店的地址信息。地址表的主键出现在顾客、 员工、和存储表的外键 </p><p>​address_id: 代理主键用于唯一标识表中的每个地址</p><p>​address: 地址的第一行</p><p>​address2: 一个可选的第二行地址</p><p>​district: 该地区的所属地区，这可以是国家，省，县等</p><p>​city_id: 指向城市表的外键</p><p>​postal_code: 邮政编码</p><p>​phone: 地址的电话号码</p><p>​last_update: 该行已创建或最近更新的时间</p><p>3、category：分类表，类别表列出了可以分配到一个电影类别。分类和电影是多对多的关系，通过表film_category建立关系</p><p>​category_id: 代理主键用于唯一标识表中的每个类别</p><p>​name: 类别名称</p><p>​last_update: 该行已创建或最近更新的时间</p><p>4、city:城市表，城市表包含的城市名单。城市表使用外键来标示国家；在地址表中被作为外键来使用。</p><p>​city_id: 代理主键用于唯一标识表中的每个城市</p><p>​city: 城市的名字</p><p>​country_id: 外键，用于标示城市所属的国家</p><p>​last_update: 该行已创建或最近更新的时间</p><p>5、country：国家表，国家表中包含的国家名单。国家表是指在城市表的外键 。</p><p>​country_id: 代理主键用于唯一标识表中的每个国家</p><p>​country: 国家的名称</p><p>​last_update: 该行已创建或最近更新的时间</p><p>6、customer：客户表，客户表包含了所有客户的列表 。 客户表在支付表和租金表被作为外键使用；客户表使用外键来表示地址和存储。</p><p>​customer_id: 代理主键用于唯一标识表中的每个客户</p><p>​store_id: 一个外键，确定客户所属的store。</p><p>​first_name: 客户的名字</p><p>​last_name: 客户的姓氏</p><p>​email: 客户的电子邮件地址</p><p>​address_id: 使用在地址 表的外键来确定客户的地址</p><p>​active: 表示客户是否是活跃的客户</p><p>​create_date: 顾客被添加到系统中的日期。使用 INSERT 触发器自动设置。</p><p>​last_update: 该行已创建或最近更新的时间</p><p>7、film:电影表，电影表是一个可能在商店库存的所有影片名单。每部影片的拷贝的实际库存信息保存在库存表。电影表指使用外键来标示语言表；在film_category、film_actor和库存表中作为外键使用。</p><p>​film_id: 代理主键用于唯一标识表中的每个电影</p><p>​title: 影片的标题</p><p>​description: 一个简短的描述或电影的情节摘要</p><p>​release_year: 电影发行的年份</p><p>​language_id: 使用外键来标示语言</p><p>​original_language_id: 电影的原始语音。使用外键来标示语言</p><p>​rental_duration: 租赁期限的长短，以天作为单位</p><p>​rental_rate: 指定的期限内电影的租金</p><p>​length: 影片的长度，以分钟为单位。</p><p>​replacement_cost: 如果电影未被归还或损坏状态向客户收取的款项</p><p>​rating: 分配给电影评级。可以是 G， PG，PG - 13 ， R 或NC - 17</p><p>​special_features: 包括DVD上常见的特殊功能的列表</p><p>​last_update: 该行已创建或最近更新的时间</p><p>8、film_actor:电影演员表，film_actor表是用来支持许多电影和演员之间的多对多关系 。对于每一个给定的电影演员，将有film_actor表中列出的演员和电影中的一个行 。</p><p>​actor_id: 用于识别演员的外键</p><p>​film_id: 用于识别电影的外键</p><p>​last_update: 该行已创建或最近更新的时间</p><p>9、film_category:电影类别表，film_category表是用来支持许多电影和类别之间的多对多关系 。应用于电影的每个类别中，将有film_category表中列出的类别和电影中的一个行。</p><p>​film_id: 用于识别电影的外键</p><p>​category_id: 用于识别类别的外键</p><p>​last_update: 该行已创建或最近更新的时间</p><p>10、film_text:电影信息表，film_text表是Sakila样例数据库唯一使用MyISAM存储引擎的表。MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快。此表提供允许全文搜索电影表中列出的影片的标题和描述。film_text表包含的film_id，标题和描述的列电影表，保存的内容与电影表上的内容同步（指电影表的插入、更新和删除操作）</p><p>​film_id: 代理主键用于唯一标识表中的每个电影</p><p>​title: 影片的标题</p><p>​description: 一个简短的描述或电影的情节摘要</p><p>11、inventory:库存表，库存表的一行为存放在一个给定的商店里的一个给定的电影的copy副本。库存表是使用外键来识别电影和存储；在出租表中使用外键来识别库存。</p><p>​inventory_id: 理主键用于唯一标识每个项目在库存</p><p>​film_id: 使用外键来识别电影</p><p>​store_id: 使用外键来识别物品所在的商店</p><p>​last_update: 该行已创建或最近更新的时间</p><p>12、language:语言表，语言表是一个查找表，列出可能使用的语言，电影可以有自己的语言和原始语言值 。</p><p>语言表在电压表中被作为外键来使用。</p><p>​language_id: 代理主键用于唯一标识每一种语言</p><p>​name: 语言的英文名称</p><p>​last_update: 该行已创建或最近更新的时间</p><p>13、payment：付款表，付款表记录每个客户的付款，如支付的金额和租金的资料。</p><p>付款表使用外键来表示客户、出租、和工作人员。</p><p>​payment_id: 代理主键用于唯一标识每个付款</p><p>​customer_id: 使用外键来标识付款的客户</p><p>​staff_id: 工作人员，负责处理支付 。使用外键来标识</p><p>​rental_id: 租借ID, 外键，参照rental表</p><p>​amount: 付款金额</p><p>​payment_date: 处理付款的日期</p><p>​last_update: 该行已创建或最近更新的时间</p><p>14 、rental：租金表，租借表的一行表示每个inventory的租借客户、租借时间、归还时间</p><p>租借表是使用外键来标识库存 ，顾客 和工作人员；在支付表中使用了外键来标识租金 。</p><p>​rental_id: 代理主键唯一标识的租金</p><p>​rental_date: 该项目租用的日期和时间</p><p>​inventory_id: 该项目被租用</p><p>​customer_id: 租用该项目的客户</p><p>​return_date: 归还日期</p><p>​staff_id: 处理该项业务的工作人员</p><p>​last_update: 该行已创建或最近更新的时间</p><p>15、staff：工作人员表，工作人员表列出了所有的工作人员，包括电子邮件地址，登录信息和图片信息 。</p><p>工作人员表是指使用外键来标识存储和地址表；在出租、支付和商店表中作为外键。</p><p>​staff_id: 代理主键唯一标识的工作人员</p><p>​first_name: 工作人员的名字</p><p>​last_name: 工作人员的姓氏</p><p>​address_id: 工作人员的地址在地址表的外键</p><p>​picture: 工作人员的照片，使用了 BLOB属性</p><p>​email: 工作人员的电子邮件地址</p><p>​store_id: 工作人员所在的商店，用外键标识</p><p>​active: 是否是活跃的工作人员。</p><p>​username: 用户名，由工作人员用来访问租赁系统</p><p>​password: 工作人员访问租赁系统所使用的密码。使用了 SHA1 函数</p><p>​last_update: 该行已创建或最近更新的时间</p><p>​active: 是否有效，删除时设置为False</p><p>16、store：商店表，store表列出了系统中的所有商店 。</p><p>store使用外键来标识工作人员和地址；在员工、客户、库存表被作为外键使用。</p><p>​store_id: 代理主键唯一标识的商店</p><p>​manager_staff_id: 使用外键来标识这家商店的经理</p><p>​address_id: 使用外键来确定这家店的地址</p><p>​last_update: 该行已创建或最近更新的时间</p><h5 id="视图表"><a href="#视图表" class="headerlink" title="视图表"></a>视图表</h5><p>1、actor_info视图提供了所有演员的列表及所演的电影, 电影按category分组.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>a<span class="token punctuation">.</span>actor_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>GROUP_CONCAT<span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> CONCAT<span class="token punctuation">(</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ‘: ‘<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>f<span class="token punctuation">.</span>title <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> f<span class="token punctuation">.</span>title SEPARATOR ‘<span class="token punctuation">,</span> ‘<span class="token punctuation">)</span>                    <span class="token keyword">FROM</span> sakila<span class="token punctuation">.</span>film f                    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> sakila<span class="token punctuation">.</span>film_category fc                      <span class="token keyword">ON</span> f<span class="token punctuation">.</span>film_id <span class="token operator">=</span> fc<span class="token punctuation">.</span>film_id                    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> sakila<span class="token punctuation">.</span>film_actor fa                      <span class="token keyword">ON</span> f<span class="token punctuation">.</span>film_id <span class="token operator">=</span> fa<span class="token punctuation">.</span>film_id                    <span class="token keyword">WHERE</span> fc<span class="token punctuation">.</span>category_id <span class="token operator">=</span> c<span class="token punctuation">.</span>category_id                    <span class="token operator">AND</span> fa<span class="token punctuation">.</span>actor_id <span class="token operator">=</span> a<span class="token punctuation">.</span>actor_id                 <span class="token punctuation">)</span>             <span class="token punctuation">)</span>             <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>name SEPARATOR ‘<span class="token punctuation">;</span> ‘<span class="token punctuation">)</span><span class="token keyword">AS</span> film_info<span class="token keyword">FROM</span> sakila<span class="token punctuation">.</span>actor a<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> sakila<span class="token punctuation">.</span>film_actor fa  <span class="token keyword">ON</span> a<span class="token punctuation">.</span>actor_id <span class="token operator">=</span> fa<span class="token punctuation">.</span>actor_id<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> sakila<span class="token punctuation">.</span>film_category fc  <span class="token keyword">ON</span> fa<span class="token punctuation">.</span>film_id <span class="token operator">=</span> fc<span class="token punctuation">.</span>film_id<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> sakila<span class="token punctuation">.</span>category c  <span class="token keyword">ON</span> fc<span class="token punctuation">.</span>category_id <span class="token operator">=</span> c<span class="token punctuation">.</span>category_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>actor_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> a<span class="token punctuation">.</span>last_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、customer_list：客户列表，firstname和lastname连接成fullname，将address, city, country 集成在一个视图里</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    cu<span class="token punctuation">.</span>customer_id <span class="token keyword">AS</span> ID<span class="token punctuation">,</span>    CONCAT<span class="token punctuation">(</span>        cu<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>        _utf8 ‘ ‘<span class="token punctuation">,</span>        cu<span class="token punctuation">.</span>last_name    <span class="token punctuation">)</span> <span class="token keyword">AS</span> NAME<span class="token punctuation">,</span>    a<span class="token punctuation">.</span>address <span class="token keyword">AS</span> address<span class="token punctuation">,</span>    a<span class="token punctuation">.</span>postal_code <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>zip code<span class="token punctuation">`</span></span><span class="token punctuation">,</span>    a<span class="token punctuation">.</span>phone <span class="token keyword">AS</span> phone<span class="token punctuation">,</span>    city<span class="token punctuation">.</span>city <span class="token keyword">AS</span> city<span class="token punctuation">,</span>    country<span class="token punctuation">.</span>country <span class="token keyword">AS</span> country<span class="token punctuation">,</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>    cu<span class="token punctuation">.</span>active<span class="token punctuation">,</span>    _utf8 ‘active‘<span class="token punctuation">,</span>    _utf8 ‘‘<span class="token punctuation">)</span> <span class="token keyword">AS</span> notes<span class="token punctuation">,</span> cu<span class="token punctuation">.</span>store_id <span class="token keyword">AS</span> SID<span class="token keyword">FROM</span>    customer <span class="token keyword">AS</span> cu<span class="token keyword">JOIN</span> address <span class="token keyword">AS</span> a <span class="token keyword">ON</span> cu<span class="token punctuation">.</span>address_id <span class="token operator">=</span> a<span class="token punctuation">.</span>address_id<span class="token keyword">JOIN</span> city <span class="token keyword">ON</span> a<span class="token punctuation">.</span>city_id <span class="token operator">=</span> city<span class="token punctuation">.</span>city_id<span class="token keyword">JOIN</span> country <span class="token keyword">ON</span> city<span class="token punctuation">.</span>country_id <span class="token operator">=</span> country<span class="token punctuation">.</span>country_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、film_list:电影列表视图，包含了每一部电影的信息及电影所对应的演员。电影对应的演员以逗号作为分隔符。连接了 film, film_category, category,film_actor and actor 表的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    film<span class="token punctuation">.</span>film_id <span class="token keyword">AS</span> FID<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>title <span class="token keyword">AS</span> title<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>description <span class="token keyword">AS</span> description<span class="token punctuation">,</span>    category<span class="token punctuation">.</span> NAME <span class="token keyword">AS</span> category<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>rental_rate <span class="token keyword">AS</span> price<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>length <span class="token keyword">AS</span> length<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>rating <span class="token keyword">AS</span> rating<span class="token punctuation">,</span>    GROUP_CONCAT<span class="token punctuation">(</span>        CONCAT<span class="token punctuation">(</span>            actor<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>            _utf8 ‘ ‘<span class="token punctuation">,</span>            actor<span class="token punctuation">.</span>last_name        <span class="token punctuation">)</span> SEPARATOR ‘<span class="token punctuation">,</span> ‘    <span class="token punctuation">)</span> <span class="token keyword">AS</span> actors<span class="token keyword">FROM</span>    category<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> film_category <span class="token keyword">ON</span> category<span class="token punctuation">.</span>category_id <span class="token operator">=</span> film_category<span class="token punctuation">.</span>category_id<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> film <span class="token keyword">ON</span> film_category<span class="token punctuation">.</span>film_id <span class="token operator">=</span> film<span class="token punctuation">.</span>film_id<span class="token keyword">JOIN</span> film_actor <span class="token keyword">ON</span> film<span class="token punctuation">.</span>film_id <span class="token operator">=</span> film_actor<span class="token punctuation">.</span>film_id<span class="token keyword">JOIN</span> actor <span class="token keyword">ON</span> film_actor<span class="token punctuation">.</span>actor_id <span class="token operator">=</span> actor<span class="token punctuation">.</span>actor_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    film<span class="token punctuation">.</span>film_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、nicer_but_slower_film_list:电影列表视图，包含了每一部电影的信息及电影所对应的演员。电影对应的演员以逗号作为分隔符。连接了 film, film_category, category,film_actor<code>and</code>actor 表的数据。和The film_list View不同，演员名字只有单词首字母大写了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    film<span class="token punctuation">.</span>film_id <span class="token keyword">AS</span> FID<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>title <span class="token keyword">AS</span> title<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>description <span class="token keyword">AS</span> description<span class="token punctuation">,</span>    category<span class="token punctuation">.</span> NAME <span class="token keyword">AS</span> category<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>rental_rate <span class="token keyword">AS</span> price<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>length <span class="token keyword">AS</span> length<span class="token punctuation">,</span>    film<span class="token punctuation">.</span>rating <span class="token keyword">AS</span> rating<span class="token punctuation">,</span>    GROUP_CONCAT<span class="token punctuation">(</span>        CONCAT<span class="token punctuation">(</span>            CONCAT<span class="token punctuation">(</span>                <span class="token function">UCASE</span><span class="token punctuation">(</span>                    SUBSTR<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">LCASE</span><span class="token punctuation">(</span>                    SUBSTR<span class="token punctuation">(</span>                        actor<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>                        <span class="token number">2</span><span class="token punctuation">,</span>                        LENGTH<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>first_name<span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                _utf8 ‘ ‘<span class="token punctuation">,</span>                CONCAT<span class="token punctuation">(</span>                    <span class="token function">UCASE</span><span class="token punctuation">(</span>                        SUBSTR<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token function">LCASE</span><span class="token punctuation">(</span>                        SUBSTR<span class="token punctuation">(</span>                            actor<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>                            <span class="token number">2</span><span class="token punctuation">,</span>                            LENGTH<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span> SEPARATOR ‘<span class="token punctuation">,</span> ‘    <span class="token punctuation">)</span> <span class="token keyword">AS</span> actors<span class="token keyword">FROM</span>    category<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> film_category <span class="token keyword">ON</span> category<span class="token punctuation">.</span>category_id <span class="token operator">=</span> film_category<span class="token punctuation">.</span>category_id<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> film <span class="token keyword">ON</span> film_category<span class="token punctuation">.</span>film_id <span class="token operator">=</span> film<span class="token punctuation">.</span>film_id<span class="token keyword">JOIN</span> film_actor <span class="token keyword">ON</span> film<span class="token punctuation">.</span>film_id <span class="token operator">=</span> film_actor<span class="token punctuation">.</span>film_id<span class="token keyword">JOIN</span> actor <span class="token keyword">ON</span> film_actor<span class="token punctuation">.</span>actor_id <span class="token operator">=</span> actor<span class="token punctuation">.</span>actor_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    film<span class="token punctuation">.</span>film_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、sales_by_film_category:每个电影种类的销售额 , payment →<code> </code>rental →inventory → film → film_category → category</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>c<span class="token punctuation">.</span>name <span class="token keyword">AS</span> category<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_sales<span class="token keyword">FROM</span> payment <span class="token keyword">AS</span> p<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> rental <span class="token keyword">AS</span> r <span class="token keyword">ON</span> p<span class="token punctuation">.</span>rental_id <span class="token operator">=</span> r<span class="token punctuation">.</span>rental_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> inventory <span class="token keyword">AS</span> i <span class="token keyword">ON</span> r<span class="token punctuation">.</span>inventory_id <span class="token operator">=</span> i<span class="token punctuation">.</span>inventory_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> film <span class="token keyword">AS</span> f <span class="token keyword">ON</span> i<span class="token punctuation">.</span>film_id <span class="token operator">=</span> f<span class="token punctuation">.</span>film_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> film_category <span class="token keyword">AS</span> fc <span class="token keyword">ON</span> f<span class="token punctuation">.</span>film_id <span class="token operator">=</span> fc<span class="token punctuation">.</span>film_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> category <span class="token keyword">AS</span> c <span class="token keyword">ON</span> fc<span class="token punctuation">.</span>category_id <span class="token operator">=</span> c<span class="token punctuation">.</span>category_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>name<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total_sales <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、sales_by_store:每个商店的manager及销售额。payment → rental → inventory → store → staff</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>CONCAT<span class="token punctuation">(</span>c<span class="token punctuation">.</span>city<span class="token punctuation">,</span> _utf8‘<span class="token punctuation">,</span>‘<span class="token punctuation">,</span> cy<span class="token punctuation">.</span>country<span class="token punctuation">)</span> <span class="token keyword">AS</span> store<span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span>m<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> _utf8‘ ‘<span class="token punctuation">,</span> m<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span> <span class="token keyword">AS</span> manager<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_sales<span class="token keyword">FROM</span> payment <span class="token keyword">AS</span> p<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> rental <span class="token keyword">AS</span> r <span class="token keyword">ON</span> p<span class="token punctuation">.</span>rental_id <span class="token operator">=</span> r<span class="token punctuation">.</span>rental_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> inventory <span class="token keyword">AS</span> i <span class="token keyword">ON</span> r<span class="token punctuation">.</span>inventory_id <span class="token operator">=</span> i<span class="token punctuation">.</span>inventory_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> store <span class="token keyword">AS</span> s <span class="token keyword">ON</span> i<span class="token punctuation">.</span>store_id <span class="token operator">=</span> s<span class="token punctuation">.</span>store_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> address <span class="token keyword">AS</span> a <span class="token keyword">ON</span> s<span class="token punctuation">.</span>address_id <span class="token operator">=</span> a<span class="token punctuation">.</span>address_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> city <span class="token keyword">AS</span> c <span class="token keyword">ON</span> a<span class="token punctuation">.</span>city_id <span class="token operator">=</span> c<span class="token punctuation">.</span>city_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> country <span class="token keyword">AS</span> cy <span class="token keyword">ON</span> c<span class="token punctuation">.</span>country_id <span class="token operator">=</span> cy<span class="token punctuation">.</span>country_id<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> staff <span class="token keyword">AS</span> m <span class="token keyword">ON</span> s<span class="token punctuation">.</span>manager_staff_id <span class="token operator">=</span> m<span class="token punctuation">.</span>staff_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s<span class="token punctuation">.</span>store_id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cy<span class="token punctuation">.</span>country<span class="token punctuation">,</span> c<span class="token punctuation">.</span>city<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、staff_list:工作人员的列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    s<span class="token punctuation">.</span>staff_id <span class="token keyword">AS</span> ID<span class="token punctuation">,</span>    CONCAT<span class="token punctuation">(</span>        s<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>        _utf8 ‘ ‘<span class="token punctuation">,</span>        s<span class="token punctuation">.</span>last_name    <span class="token punctuation">)</span> <span class="token keyword">AS</span> NAME<span class="token punctuation">,</span>    a<span class="token punctuation">.</span>address <span class="token keyword">AS</span> address<span class="token punctuation">,</span>    a<span class="token punctuation">.</span>postal_code <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>zip code<span class="token punctuation">`</span></span><span class="token punctuation">,</span>    a<span class="token punctuation">.</span>phone <span class="token keyword">AS</span> phone<span class="token punctuation">,</span>    city<span class="token punctuation">.</span>city <span class="token keyword">AS</span> city<span class="token punctuation">,</span>    country<span class="token punctuation">.</span>country <span class="token keyword">AS</span> country<span class="token punctuation">,</span>    s<span class="token punctuation">.</span>store_id <span class="token keyword">AS</span> SID<span class="token keyword">FROM</span>    staff <span class="token keyword">AS</span> s<span class="token keyword">JOIN</span> address <span class="token keyword">AS</span> a <span class="token keyword">ON</span> s<span class="token punctuation">.</span>address_id <span class="token operator">=</span> a<span class="token punctuation">.</span>address_id<span class="token keyword">JOIN</span> city <span class="token keyword">ON</span> a<span class="token punctuation">.</span>city_id <span class="token operator">=</span> city<span class="token punctuation">.</span>city_id<span class="token keyword">JOIN</span> country <span class="token keyword">ON</span> city<span class="token punctuation">.</span>country_id <span class="token operator">=</span> country<span class="token punctuation">.</span>country_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各个表的结构关系：</p><p><img src="C:\Users\63198\AppData\Roaming\Typora\typora-user-images\image-20191204153612196.png" alt="image-20191204153612196"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sakila数据库说明&quot;&gt;&lt;a href=&quot;#sakila数据库说明&quot; class=&quot;headerlink&quot; title=&quot;sakila数据库说明&quot;&gt;&lt;/a&gt;sakila数据库说明&lt;/h1&gt;&lt;p&gt;ZIP格式：&lt;a href=&quot;http://downloads.my</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E4%BD%BF%E7%94%A8amoeba%E5%AE%9E%E7%8E%B0mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E4%BD%BF%E7%94%A8amoeba%E5%AE%9E%E7%8E%B0mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</id>
    <published>2022-12-18T12:19:26.073Z</published>
    <updated>2022-12-18T12:19:26.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用amoeba实现mysql读写分离"><a href="#使用amoeba实现mysql读写分离" class="headerlink" title="使用amoeba实现mysql读写分离"></a>使用amoeba实现mysql读写分离</h1><h3 id="1、什么是amoeba？"><a href="#1、什么是amoeba？" class="headerlink" title="1、什么是amoeba？"></a>1、什么是amoeba？</h3><p>​Amoeba(变形虫)项目，专注 分布式数据库 proxy 开发。座落与Client、DB Server(s)之间。对客户端透明。具有负载均衡、高可用性、sql过滤、读写分离、可路由相关的query到目标数据库、可并发请求多台数据库合并结果。</p><p>主要解决：</p><p>• 降低 数据切分带来的复杂多数据库结构</p><p>• 提供切分规则并降低 数据切分规则 给应用带来的影响</p><p>• 降低db 与客户端的连接数</p><p>• 读写分离</p><h3 id="2、为什么要用Amoeba"><a href="#2、为什么要用Amoeba" class="headerlink" title="2、为什么要用Amoeba"></a>2、为什么要用Amoeba</h3><p>目前要实现mysql的主从读写分离，主要有以下几种方案：</p><p>1、  通过程序实现，网上很多现成的代码，比较复杂，如果添加从服务器要更改多台服务器的代码。</p><p>2、  通过mysql-proxy来实现，由于mysql-proxy的主从读写分离是通过lua脚本来实现，目前lua的脚本的开发跟不上节奏，而写没有完美的现成的脚本，因此导致用于生产环境的话风险比较大，据网上很多人说mysql-proxy的性能不高。</p><p>3、  自己开发接口实现，这种方案门槛高，开发成本高，不是一般的小公司能承担得起。</p><p>4、  利用阿里巴巴的开源项目Amoeba来实现，具有负载均衡、高可用性、sql过滤、读写分离、可路由相关的query到目标数据库，并且安装配置非常简单。国产的开源软件，应该支持，目前正在使用，不发表太多结论，一切等测试完再发表结论吧，哈哈！</p><h3 id="3、amoeba安装"><a href="#3、amoeba安装" class="headerlink" title="3、amoeba安装"></a>3、amoeba安装</h3><h5 id="1、首先安装jdk，直接使用rpm包安装即可"><a href="#1、首先安装jdk，直接使用rpm包安装即可" class="headerlink" title="1、首先安装jdk，直接使用rpm包安装即可"></a>1、首先安装jdk，直接使用rpm包安装即可</h5><h5 id="2、下载amoeba对应的版本https-sourceforge-net-projects-amoeba-，直接解压即可"><a href="#2、下载amoeba对应的版本https-sourceforge-net-projects-amoeba-，直接解压即可" class="headerlink" title="2、下载amoeba对应的版本https://sourceforge.net/projects/amoeba/，直接解压即可"></a>2、下载amoeba对应的版本<a href="https://sourceforge.net/projects/amoeba/%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%A7%A3%E5%8E%8B%E5%8D%B3%E5%8F%AF">https://sourceforge.net/projects/amoeba/，直接解压即可</a></h5><h5 id="3、配置amoeba的配置文件"><a href="#3、配置amoeba的配置文件" class="headerlink" title="3、配置amoeba的配置文件"></a>3、配置amoeba的配置文件</h5><p><strong>dbServers.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="gbk"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">amoeba:dbServers</span> <span class="token name">SYSTEM</span> <span class="token string">"dbserver.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">amoeba:</span>dbServers</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>amoeba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://amoeba.meidusa.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Each dbServer needs to be configured into a Pool,If you need to configure multiple dbServer with load balancing that can be simplified by the following configuration: add attribute with name virtual = "true" in dbServer, but the configuration does not allow the element with name factoryConfig such as 'multiPool' dbServer   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbServer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abstractServer<span class="token punctuation">"</span></span> <span class="token attr-name">abstractive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>factoryConfig</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.mysql.net.MysqlServerConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>connectionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;defaultManager&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>64<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>receiveBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>128<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- mysql port --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3306<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- mysql schema --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>schema<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>msb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- mysql user --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>factoryConfig</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>poolConfig</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.toolkit.common.poolable.PoolableObjectPool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxIdle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>600000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>600000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>poolConfig</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dbServer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbServer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>writedb<span class="token punctuation">"</span></span>  <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abstractServer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>factoryConfig</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- mysql ip --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ipAddress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>192.168.85.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>factoryConfig</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dbServer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbServer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slave<span class="token punctuation">"</span></span>  <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abstractServer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>factoryConfig</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- mysql ip --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ipAddress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>192.168.85.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>factoryConfig</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dbServer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbServer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myslave<span class="token punctuation">"</span></span> <span class="token attr-name">virtual</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>poolConfig</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.server.MultipleServerPool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Load balancing strategy: 1=ROUNDROBIN , 2=WEIGHTBASED , 3=HA--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loadbalance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Separated by commas,such as: server1,server2,server1 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poolNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>slave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>poolConfig</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dbServer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">amoeba:</span>dbServers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>amoeba.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="gbk"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">amoeba:configuration</span> <span class="token name">SYSTEM</span> <span class="token string">"amoeba.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">amoeba:</span>configuration</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>amoeba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://amoeba.meidusa.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxy</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- service class must implements com.meidusa.amoeba.service.Service --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Amoeba for Mysql<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.mysql.server.MySQLService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- port --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>8066<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- bind ipAddress --></span><span class="token comment">&lt;!-- &lt;property name="ipAddress">127.0.0.1&lt;/property> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.mysql.net.MysqlClientConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>128<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>receiveBufferSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>64<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authenticateProvider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.mysql.server.MysqlClientAuthenticator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.toolkit.net.authenticate.server.IPAccessController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ipFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;amoeba.home&#125;/conf/access_list.conf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>runtime</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.mysql.context.MysqlRuntimeContext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- proxy server client process thread size --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>executeThreadSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>128<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- per connection cache prepared statement size  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>statementCacheSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- default charset --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serverCharset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>utf8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- query timeout( default: 60 second , TimeUnit:second) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryTimeout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>runtime</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxy</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Each ConnectionManager will start as threadmanager responsible for the Connection IO read , Death Detection--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connectionManagerList</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connectionManager</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.toolkit.net.MultiConnectionManagerWrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subManagerClassName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.meidusa.toolkit.net.AuthingableConnectionManager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connectionManager</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connectionManagerList</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- default using file loader --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbServerLoader</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.context.DBServerConfigFileLoader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;amoeba.home&#125;/conf/dbServers.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dbServerLoader</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queryRouter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.mysql.parser.MysqlQueryRouter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ruleLoader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.meidusa.amoeba.route.TableRuleFileLoader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ruleFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;amoeba.home&#125;/conf/rule.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>functionFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;amoeba.home&#125;/conf/ruleFunctionMap.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlFunctionFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;amoeba.home&#125;/conf/functionMap.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LRUMapSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultPool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>writedb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>writePool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>writedb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readPool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myslave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>needParse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queryRouter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">amoeba:</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、启动amoeba"><a href="#4、启动amoeba" class="headerlink" title="4、启动amoeba"></a>4、启动amoeba</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/root/amoeba-mysql-3.0.5-RC/bin/launcher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、测试amoeba"><a href="#4、测试amoeba" class="headerlink" title="4、测试amoeba"></a>4、测试amoeba</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--测试的sql</span><span class="token comment">--在安装amoeba的服务器上登录mysql</span>mysql <span class="token operator">-</span>h192<span class="token punctuation">.</span><span class="token number">168.85</span><span class="token number">.13</span> <span class="token operator">-</span>uroot <span class="token operator">-</span>p123 <span class="token operator">-</span>P8066<span class="token comment">--分别在master、slave、amoeba上登录mysql</span><span class="token keyword">use</span> msb<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">--在amoeba上插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--在master和slave上分别查看表中的数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">--将master上的mysql服务停止，继续插入数据会发现插入不成功，但是能够查询</span><span class="token comment">--将master上的msyql服务开启，停止slave上的mysql，发现插入成功，但是不能够查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用amoeba实现mysql读写分离&quot;&gt;&lt;a href=&quot;#使用amoeba实现mysql读写分离&quot; class=&quot;headerlink&quot; title=&quot;使用amoeba实现mysql读写分离&quot;&gt;&lt;/a&gt;使用amoeba实现mysql读写分离&lt;/h1&gt;&lt;h3 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E5%88%86%E5%8C%BA%E8%A1%A8%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/%E5%88%86%E5%8C%BA%E8%A1%A8%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2022-12-18T12:19:26.073Z</published>
    <updated>2022-12-18T12:19:26.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分区表的底层原理"><a href="#分区表的底层原理" class="headerlink" title="分区表的底层原理"></a>分区表的底层原理</h1><p>​分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引知识在各个底层表上各自加上一个完全相同的索引。从存储引擎的角度来看，底层表和普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分。</p><p>​分区表的操作按照以下的操作逻辑进行：</p><p>​<strong>select查询</strong></p><p>​当查询一个分区表的时候，分区层先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据</p><p>​<strong>insert操作</strong></p><p>​当写入一条记录的时候，分区层先打开并锁住所有的底层表，然后确定哪个分区接受这条记录，再将记录写入对应底层表</p><p>​<strong>delete操作</strong></p><p>​当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作</p><p>​<strong>update操作</strong></p><p>​当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录再哪个分区，然后取出数据并更新，再判断更新后的数据应该再哪个分区，最后对底层表进行写入操作，并对源数据所在的底层表进行删除操作</p><p>​有些操作时支持过滤的，例如，当删除一条记录时，MySQL需要先找到这条记录，如果where条件恰好和分区表达式匹配，就可以将所有不包含这条记录的分区都过滤掉，这对update同样有效。如果是insert操作，则本身就是只命中一个分区，其他分区都会被过滤掉。mysql先确定这条记录属于哪个分区，再将记录写入对应得曾分区表，无须对任何其他分区进行操作</p><p>​虽然每个操作都会“先打开并锁住所有的底层表”，但这并不是说分区表在处理过程中是锁住全表的，如果存储引擎能够自己实现行级锁，例如innodb，则会在分区层释放对应表锁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分区表的底层原理&quot;&gt;&lt;a href=&quot;#分区表的底层原理&quot; class=&quot;headerlink&quot; title=&quot;分区表的底层原理&quot;&gt;&lt;/a&gt;分区表的底层原理&lt;/h1&gt;&lt;p&gt;​		分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2022-12-18T12:19:26.072Z</published>
    <updated>2022-12-18T12:19:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql练习题"><a href="#mysql练习题" class="headerlink" title="mysql练习题"></a>mysql练习题</h1><h3 id="1、表结构"><a href="#1、表结构" class="headerlink" title="1、表结构"></a>1、表结构</h3><pre class="line-numbers language-none"><code class="language-none">–1.学生表 student(s_id,s_name,s_birth,s_sex) –学生编号,学生姓名, 出生年月,学生性别 –2.课程表 course(c_id,c_name,t_id) – –课程编号, 课程名称, 教师编号 –3.教师表 Teacher(t_id,t_name) –教师编号,教师姓名 –4.成绩表 Score(s_id,c_id,s_score) –学生编号,课程编号,分数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、测试数据"><a href="#2、测试数据" class="headerlink" title="2、测试数据"></a>2、测试数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--建表</span><span class="token comment">--学生表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>s_name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>s_birth<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>s_sex<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">--课程表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>course<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span></span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>c_name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>t_id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">--教师表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>teacher<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>t_id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>t_name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>t_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">--成绩表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>score<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span></span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>s_score<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">--插入学生表测试数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'赵雷'</span> <span class="token punctuation">,</span> <span class="token string">'1990-01-01'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'钱电'</span> <span class="token punctuation">,</span> <span class="token string">'1990-12-21'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'孙风'</span> <span class="token punctuation">,</span> <span class="token string">'1990-05-20'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'李云'</span> <span class="token punctuation">,</span> <span class="token string">'1990-08-06'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'05'</span> <span class="token punctuation">,</span> <span class="token string">'周梅'</span> <span class="token punctuation">,</span> <span class="token string">'1991-12-01'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'06'</span> <span class="token punctuation">,</span> <span class="token string">'吴兰'</span> <span class="token punctuation">,</span> <span class="token string">'1992-03-01'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'07'</span> <span class="token punctuation">,</span> <span class="token string">'郑竹'</span> <span class="token punctuation">,</span> <span class="token string">'1989-07-01'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'08'</span> <span class="token punctuation">,</span> <span class="token string">'王菊'</span> <span class="token punctuation">,</span> <span class="token string">'1990-01-20'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--课程表测试数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'语文'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'数学'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'英语'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--教师表测试数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--成绩表测试数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'05'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'05'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'06'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'06'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'07'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'07'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、测试题"><a href="#3、测试题" class="headerlink" title="3、测试题"></a>3、测试题</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1、查询"01"课程比"02"课程成绩高的学生的信息及课程分数  </span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_score <span class="token keyword">as</span> <span class="token number">01</span>_score<span class="token punctuation">,</span>c<span class="token punctuation">.</span>s_score <span class="token keyword">as</span> <span class="token number">02</span>_score <span class="token keyword">from</span>     student a     <span class="token keyword">join</span> Score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>b<span class="token punctuation">.</span>s_id <span class="token operator">and</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span>    <span class="token keyword">left</span> <span class="token keyword">join</span> Score c <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>c<span class="token punctuation">.</span>s_id <span class="token operator">and</span> c<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span> <span class="token operator">or</span> c<span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token keyword">where</span> b<span class="token punctuation">.</span>s_score<span class="token operator">></span>c<span class="token punctuation">.</span>s_score<span class="token comment">-- 2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数 </span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_score <span class="token keyword">as</span> <span class="token number">01</span>_score<span class="token punctuation">,</span>c<span class="token punctuation">.</span>s_score <span class="token keyword">as</span> <span class="token number">02</span>_score <span class="token keyword">from</span>     student a <span class="token keyword">left</span> <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>b<span class="token punctuation">.</span>s_id <span class="token operator">and</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token operator">or</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token boolean">NULL</span>      <span class="token keyword">join</span> score c <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>c<span class="token punctuation">.</span>s_id <span class="token operator">and</span> c<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span> <span class="token keyword">where</span> b<span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span>c<span class="token punctuation">.</span>s_score<span class="token comment">-- 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</span><span class="token keyword">select</span> b<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span>     student b     <span class="token keyword">join</span> score a <span class="token keyword">on</span> b<span class="token punctuation">.</span>s_id <span class="token operator">=</span> a<span class="token punctuation">.</span>s_id    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_name <span class="token keyword">HAVING</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">-- 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩</span>        <span class="token comment">-- (包括有成绩的和无成绩的) </span><span class="token keyword">select</span> b<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span>     student b     <span class="token keyword">left</span> <span class="token keyword">join</span> score a <span class="token keyword">on</span> b<span class="token punctuation">.</span>s_id <span class="token operator">=</span> a<span class="token punctuation">.</span>s_id    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_name <span class="token keyword">HAVING</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">60</span>    <span class="token keyword">union</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token number">0</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span>     student a     <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span>                <span class="token keyword">select</span> <span class="token keyword">distinct</span> s_id <span class="token keyword">from</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>c_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_course<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_score <span class="token keyword">from</span>     student a     <span class="token keyword">left</span> <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>b<span class="token punctuation">.</span>s_id    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_name<span class="token punctuation">;</span><span class="token comment">-- 6、查询"李"姓老师的数量 </span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>t_id<span class="token punctuation">)</span> <span class="token keyword">from</span> teacher <span class="token keyword">where</span> t_name <span class="token operator">like</span> <span class="token string">'李%'</span><span class="token punctuation">;</span><span class="token comment">-- 7、查询学过"张三"老师授课的同学的信息 </span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>     student a     <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>b<span class="token punctuation">.</span>s_id <span class="token keyword">where</span> b<span class="token punctuation">.</span>c_id <span class="token operator">in</span><span class="token punctuation">(</span>        <span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token keyword">where</span> t_id <span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token keyword">select</span> t_id <span class="token keyword">from</span> teacher <span class="token keyword">where</span> t_name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 8、查询没学过"张三"老师授课的同学的信息 </span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>     student c     <span class="token keyword">where</span> c<span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> student a <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>b<span class="token punctuation">.</span>s_id <span class="token keyword">where</span> b<span class="token punctuation">.</span>c_id <span class="token operator">in</span><span class="token punctuation">(</span>            <span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token keyword">where</span> t_id <span class="token operator">=</span><span class="token punctuation">(</span>                <span class="token keyword">select</span> t_id <span class="token keyword">from</span> teacher <span class="token keyword">where</span> t_name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 9、查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息 </span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>     student a<span class="token punctuation">,</span>score b<span class="token punctuation">,</span>score c     <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> b<span class="token punctuation">.</span>s_id  <span class="token operator">and</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> c<span class="token punctuation">.</span>s_id <span class="token operator">and</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token operator">and</span> c<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">;</span> <span class="token comment">-- 10、查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息</span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>     student a     <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token punctuation">)</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">)</span><span class="token comment">-- 11、查询没有学全所有课程的同学的信息 </span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>     student s <span class="token keyword">where</span> s<span class="token punctuation">.</span>s_id <span class="token operator">in</span><span class="token punctuation">(</span>        <span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span>            <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> score a                 <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> b<span class="token punctuation">.</span>s_id <span class="token operator">and</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span>                <span class="token keyword">join</span> score c <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> c<span class="token punctuation">.</span>s_id <span class="token operator">and</span> c<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'03'</span>            <span class="token keyword">where</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 12、查询至少有一门课与学号为"01"的同学所学相同的同学的信息 </span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> s_id <span class="token operator">in</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token keyword">distinct</span> a<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> score a <span class="token keyword">where</span> a<span class="token punctuation">.</span>c_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>c_id <span class="token keyword">from</span> score a <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 13、查询和"01"号的同学学习的课程完全相同的其他同学的信息  </span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student a <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id <span class="token operator">in</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> <span class="token keyword">distinct</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">!=</span><span class="token string">'01'</span> <span class="token operator">and</span> c_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span>    <span class="token keyword">group</span> <span class="token keyword">by</span> s_id     <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 14、查询没学过"张三"老师讲授的任一门课程的学生姓名 </span><span class="token keyword">select</span> a<span class="token punctuation">.</span>s_name <span class="token keyword">from</span> student a <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id <span class="token operator">=</span>                 <span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token keyword">where</span> t_id <span class="token operator">=</span><span class="token punctuation">(</span>                    <span class="token keyword">select</span> t_id <span class="token keyword">from</span> teacher <span class="token keyword">where</span> t_name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">group</span> <span class="token keyword">by</span> s_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </span><span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span>     student a     <span class="token keyword">left</span> <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> b<span class="token punctuation">.</span>s_id    <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id <span class="token operator">in</span><span class="token punctuation">(</span>            <span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> s_score<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  s_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_name <span class="token comment">-- 16、检索"01"课程分数小于60，按分数降序排列的学生信息</span><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_score <span class="token keyword">from</span>     student a<span class="token punctuation">,</span>score b     <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> b<span class="token punctuation">.</span>s_id <span class="token operator">and</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token operator">and</span> b<span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>s_score <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_score <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span>a<span class="token punctuation">.</span>s_id <span class="token operator">and</span> c_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 语文<span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token keyword">select</span> s_score <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span>a<span class="token punctuation">.</span>s_id <span class="token operator">and</span> c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 数学<span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token keyword">select</span> s_score <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span>a<span class="token punctuation">.</span>s_id <span class="token operator">and</span> c_id<span class="token operator">=</span><span class="token string">'03'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 英语<span class="token punctuation">,</span>            <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 平均分 <span class="token keyword">from</span> score a  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>s_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 平均分 <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</span><span class="token comment">--及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>c_name<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 及格率<span class="token punctuation">,</span>    <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>s_score<span class="token operator">&lt;=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 中等率<span class="token punctuation">,</span>    <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>s_score<span class="token operator">&lt;=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 优良率<span class="token punctuation">,</span>    <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> a<span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 优秀率    <span class="token keyword">from</span> score a <span class="token keyword">left</span> <span class="token keyword">join</span> course b <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id <span class="token operator">=</span> b<span class="token punctuation">.</span>c_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>c_name<span class="token comment">-- 19、按各科成绩进行排序，并显示排名(实现不完全)</span><span class="token comment">-- mysql没有rank函数</span>    <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>        <span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> i保留排名<span class="token punctuation">,</span>        <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@score</span><span class="token operator">=</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank不保留排名<span class="token punctuation">,</span>        <span class="token variable">@score</span>:<span class="token operator">=</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">as</span> score    <span class="token keyword">from</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">from</span> score <span class="token keyword">WHERE</span> c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> s_score <span class="token keyword">DESC</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s    <span class="token keyword">union</span>    <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>        <span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> i<span class="token punctuation">,</span>        <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@score</span><span class="token operator">=</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank<span class="token punctuation">,</span>        <span class="token variable">@score</span>:<span class="token operator">=</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">as</span> score    <span class="token keyword">from</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">from</span> score <span class="token keyword">WHERE</span> c_id<span class="token operator">=</span><span class="token string">'02'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> s_score <span class="token keyword">DESC</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s    <span class="token keyword">union</span>    <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>        <span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> i<span class="token punctuation">,</span>        <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@score</span><span class="token operator">=</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank<span class="token punctuation">,</span>        <span class="token variable">@score</span>:<span class="token operator">=</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">as</span> score    <span class="token keyword">from</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">from</span> score <span class="token keyword">WHERE</span> c_id<span class="token operator">=</span><span class="token string">'03'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> s_score <span class="token keyword">DESC</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s<span class="token comment">-- 20、查询学生的总成绩并进行排名</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>    <span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> i<span class="token punctuation">,</span>    <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@score</span><span class="token operator">=</span>a<span class="token punctuation">.</span>sum_score <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank<span class="token punctuation">,</span>    <span class="token variable">@score</span>:<span class="token operator">=</span>a<span class="token punctuation">.</span>sum_score <span class="token keyword">as</span> score<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_score <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sum_score <span class="token keyword">DESC</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s<span class="token comment">-- 21、查询不同老师所教不同课程平均分从高到低显示 </span>    <span class="token keyword">select</span> a<span class="token punctuation">.</span>t_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>t_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> course a        <span class="token keyword">left</span> <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span>b<span class="token punctuation">.</span>c_id         <span class="token keyword">left</span> <span class="token keyword">join</span> teacher c <span class="token keyword">on</span> a<span class="token punctuation">.</span>t_id<span class="token operator">=</span>c<span class="token punctuation">.</span>t_id        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>t_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>t_name <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_score <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 </span>            <span class="token keyword">select</span> d<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>排名<span class="token punctuation">,</span>c<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>c<span class="token punctuation">.</span>c_id <span class="token keyword">from</span> <span class="token punctuation">(</span>                <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> 排名 <span class="token keyword">from</span> score a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s <span class="token keyword">where</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span>                <span class="token punctuation">)</span>c            <span class="token keyword">left</span> <span class="token keyword">join</span> student d <span class="token keyword">on</span> c<span class="token punctuation">.</span>s_id<span class="token operator">=</span>d<span class="token punctuation">.</span>s_id            <span class="token keyword">where</span> 排名 <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">3</span>            <span class="token keyword">UNION</span>            <span class="token keyword">select</span> d<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>排名<span class="token punctuation">,</span>c<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>c<span class="token punctuation">.</span>c_id <span class="token keyword">from</span> <span class="token punctuation">(</span>                <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token variable">@j</span>:<span class="token operator">=</span><span class="token variable">@j</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> 排名 <span class="token keyword">from</span> score a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@j</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s <span class="token keyword">where</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span>                <span class="token punctuation">)</span>c            <span class="token keyword">left</span> <span class="token keyword">join</span> student d <span class="token keyword">on</span> c<span class="token punctuation">.</span>s_id<span class="token operator">=</span>d<span class="token punctuation">.</span>s_id            <span class="token keyword">where</span> 排名 <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">3</span>            <span class="token keyword">UNION</span>            <span class="token keyword">select</span> d<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>排名<span class="token punctuation">,</span>c<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>c<span class="token punctuation">.</span>c_id <span class="token keyword">from</span> <span class="token punctuation">(</span>                <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token variable">@k</span>:<span class="token operator">=</span><span class="token variable">@k</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> 排名 <span class="token keyword">from</span> score a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s <span class="token keyword">where</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'03'</span>                <span class="token punctuation">)</span>c            <span class="token keyword">left</span> <span class="token keyword">join</span> student d <span class="token keyword">on</span> c<span class="token punctuation">.</span>s_id<span class="token operator">=</span>d<span class="token punctuation">.</span>s_id            <span class="token keyword">where</span> 排名 <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比</span>        <span class="token keyword">select</span> <span class="token keyword">distinct</span> f<span class="token punctuation">.</span>c_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>85-100<span class="token punctuation">`</span></span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>百分比<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>70-85<span class="token punctuation">`</span></span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>百分比<span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>60-70<span class="token punctuation">`</span></span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>百分比<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>0-60<span class="token punctuation">`</span></span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>百分比 <span class="token keyword">from</span> score a                <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">85</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>85-100<span class="token punctuation">`</span></span><span class="token punctuation">,</span>                                            <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">85</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比                                <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span>b <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span>b<span class="token punctuation">.</span>c_id                <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">70</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">85</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>70-85<span class="token punctuation">`</span></span><span class="token punctuation">,</span>                                            <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">70</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">85</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比                                <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span>c <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span>c<span class="token punctuation">.</span>c_id                <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">60</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">70</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>60-70<span class="token punctuation">`</span></span><span class="token punctuation">,</span>                                            <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">60</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">70</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比                                <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span>d <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span>d<span class="token punctuation">.</span>c_id                <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">60</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>0-60<span class="token punctuation">`</span></span><span class="token punctuation">,</span>                                            <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">60</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比                                <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span>e <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id<span class="token operator">=</span>e<span class="token punctuation">.</span>c_id                <span class="token keyword">left</span> <span class="token keyword">join</span> course f <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id <span class="token operator">=</span> f<span class="token punctuation">.</span>c_id<span class="token comment">-- 24、查询学生平均成绩及其名次 </span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>                <span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> <span class="token string">'不保留空缺排名'</span><span class="token punctuation">,</span>                <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@avg_score</span><span class="token operator">=</span>a<span class="token punctuation">.</span>avg_s <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'保留空缺排名'</span><span class="token punctuation">,</span>                <span class="token variable">@avg_score</span>:<span class="token operator">=</span>avg_s <span class="token keyword">as</span> <span class="token string">'平均分'</span>        <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_s <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@avg_score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token comment">-- 25、查询各科成绩前三名的记录</span>            <span class="token comment">-- 1.选出b表比a表成绩大的所有组</span>            <span class="token comment">-- 2.选出比当前id成绩大的 小于三个的</span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score a             <span class="token keyword">left</span> <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id <span class="token operator">=</span> b<span class="token punctuation">.</span>c_id <span class="token operator">and</span> a<span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>s_score            <span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>s_id<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span>            <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">DESC</span> <span class="token comment">-- 26、查询每门课程被选修的学生数  </span>        <span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span> <span class="token keyword">from</span> score a <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id <span class="token comment">-- 27、查询出只有两门课程的全部学生的学号和姓名 </span>        <span class="token keyword">select</span> s_id<span class="token punctuation">,</span>s_name <span class="token keyword">from</span> student <span class="token keyword">where</span> s_id <span class="token operator">in</span><span class="token punctuation">(</span>                <span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 28、查询男生、女生人数 </span>        <span class="token keyword">select</span> s_sex<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>s_sex<span class="token punctuation">)</span> <span class="token keyword">as</span> 人数  <span class="token keyword">from</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_sex<span class="token comment">-- 29、查询名字中含有"风"字的学生信息</span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> s_name <span class="token operator">like</span> <span class="token string">'%风%'</span><span class="token punctuation">;</span><span class="token comment">-- 30、查询同名同性学生名单，并统计同名人数 </span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_sex<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student a  <span class="token keyword">JOIN</span>                     student b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id <span class="token operator">!=</span>b<span class="token punctuation">.</span>s_id <span class="token operator">and</span> a<span class="token punctuation">.</span>s_name <span class="token operator">=</span> b<span class="token punctuation">.</span>s_name <span class="token operator">and</span> a<span class="token punctuation">.</span>s_sex <span class="token operator">=</span> b<span class="token punctuation">.</span>s_sex        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_sex<span class="token comment">-- 31、查询1990年出生的学生名单 </span>        <span class="token keyword">select</span> s_name <span class="token keyword">from</span> student <span class="token keyword">where</span> s_birth <span class="token operator">like</span> <span class="token string">'1990%'</span> <span class="token comment">-- 32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 </span>     <span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_score <span class="token keyword">DESC</span><span class="token punctuation">,</span>c_id <span class="token keyword">ASC</span><span class="token comment">-- 33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 </span>     <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> score a        <span class="token keyword">left</span> <span class="token keyword">join</span> student b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>b<span class="token punctuation">.</span>s_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> avg_score<span class="token operator">>=</span><span class="token number">85</span><span class="token comment">-- 34、查询课程名称为"数学"，且分数低于60的学生姓名和分数 </span>         <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score b <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> student a <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>b<span class="token punctuation">.</span>s_id <span class="token keyword">where</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token punctuation">(</span>                    <span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token keyword">where</span> c_name <span class="token operator">=</span><span class="token string">'数学'</span><span class="token punctuation">)</span> <span class="token operator">and</span> b<span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token comment">-- 35、查询所有学生的课程及分数情况； </span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span>                    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> c<span class="token punctuation">.</span>c_name <span class="token keyword">when</span> <span class="token string">'语文'</span> <span class="token keyword">then</span> b<span class="token punctuation">.</span>s_score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'语文'</span><span class="token punctuation">,</span>                    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> c<span class="token punctuation">.</span>c_name <span class="token keyword">when</span> <span class="token string">'数学'</span> <span class="token keyword">then</span> b<span class="token punctuation">.</span>s_score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'数学'</span><span class="token punctuation">,</span>                    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> c<span class="token punctuation">.</span>c_name <span class="token keyword">when</span> <span class="token string">'英语'</span> <span class="token keyword">then</span> b<span class="token punctuation">.</span>s_score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'英语'</span><span class="token punctuation">,</span>                    <span class="token function">SUM</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token string">'总分'</span>        <span class="token keyword">from</span> student a <span class="token keyword">left</span> <span class="token keyword">join</span> score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> b<span class="token punctuation">.</span>s_id         <span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> b<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>c_id         <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_name   <span class="token comment">-- 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数； </span>            <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_name<span class="token punctuation">,</span>b<span class="token punctuation">.</span>c_name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>s_score <span class="token keyword">from</span> course b <span class="token keyword">left</span> <span class="token keyword">join</span> score c <span class="token keyword">on</span> b<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>c_id                <span class="token keyword">left</span> <span class="token keyword">join</span> student a <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id<span class="token operator">=</span>c<span class="token punctuation">.</span>s_id <span class="token keyword">where</span> c<span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">70</span> <span class="token comment">-- 37、查询不及格的课程</span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>c_name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score a <span class="token keyword">left</span> <span class="token keyword">join</span> course b <span class="token keyword">on</span> a<span class="token punctuation">.</span>c_id <span class="token operator">=</span> b<span class="token punctuation">.</span>c_id            <span class="token keyword">where</span> a<span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token comment">--38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； </span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_name <span class="token keyword">from</span> score a <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> student b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> b<span class="token punctuation">.</span>s_id            <span class="token keyword">where</span> a<span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token string">'01'</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>s_score<span class="token operator">></span><span class="token number">80</span><span class="token comment">-- 39、求每门课程的学生人数 </span>        <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">;</span> <span class="token comment">-- 40、查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩</span>        <span class="token comment">-- 查询老师id   </span>        <span class="token keyword">select</span> c_id <span class="token keyword">from</span> course c<span class="token punctuation">,</span>teacher d <span class="token keyword">where</span> c<span class="token punctuation">.</span>t_id<span class="token operator">=</span>d<span class="token punctuation">.</span>t_id <span class="token operator">and</span> d<span class="token punctuation">.</span>t_name<span class="token operator">=</span><span class="token string">'张三'</span>        <span class="token comment">-- 查询最高分（可能有相同分数）</span>        <span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token string">'02'</span>        <span class="token comment">-- 查询信息</span>        <span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span>b<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>c_name <span class="token keyword">from</span> student a            <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Score b <span class="token keyword">on</span> a<span class="token punctuation">.</span>s_id <span class="token operator">=</span> b<span class="token punctuation">.</span>s_id            <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> course c <span class="token keyword">on</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span>c<span class="token punctuation">.</span>c_id            <span class="token keyword">where</span> b<span class="token punctuation">.</span>c_id <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course c<span class="token punctuation">,</span>Teacher d <span class="token keyword">where</span> c<span class="token punctuation">.</span>t_id<span class="token operator">=</span>d<span class="token punctuation">.</span>t_id <span class="token operator">and</span> d<span class="token punctuation">.</span>t_name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span>            <span class="token operator">and</span> b<span class="token punctuation">.</span>s_score <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> Score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course c<span class="token punctuation">,</span>Teacher d <span class="token keyword">where</span> c<span class="token punctuation">.</span>t_id<span class="token operator">=</span>d<span class="token punctuation">.</span>t_id <span class="token operator">and</span> d<span class="token punctuation">.</span>t_name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 </span>    <span class="token keyword">select</span> <span class="token keyword">DISTINCT</span> b<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score a<span class="token punctuation">,</span>score b <span class="token keyword">where</span> a<span class="token punctuation">.</span>c_id <span class="token operator">!=</span> b<span class="token punctuation">.</span>c_id <span class="token operator">and</span> a<span class="token punctuation">.</span>s_score <span class="token operator">=</span> b<span class="token punctuation">.</span>s_score<span class="token comment">-- 42、查询每门功成绩最好的前两名 </span>        <span class="token comment">-- 牛逼的写法</span>    <span class="token keyword">select</span> a<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>s_score <span class="token keyword">from</span> Score a        <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> Score b <span class="token keyword">where</span> b<span class="token punctuation">.</span>c_id<span class="token operator">=</span>a<span class="token punctuation">.</span>c_id <span class="token operator">and</span> b<span class="token punctuation">.</span>s_score<span class="token operator">>=</span>a<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>c_id<span class="token comment">-- 43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  </span>        <span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> total <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id <span class="token keyword">HAVING</span> total<span class="token operator">></span><span class="token number">5</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total<span class="token punctuation">,</span>c_id <span class="token keyword">ASC</span><span class="token comment">-- 44、检索至少选修两门课程的学生学号 </span>        <span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> sel<span class="token operator">>=</span><span class="token number">2</span><span class="token comment">-- 45、查询选修了全部课程的学生信息 </span>        <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> s_id <span class="token operator">in</span><span class="token punctuation">(</span>                    <span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--46、查询各学生的年龄</span>    <span class="token comment">-- 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</span>    <span class="token keyword">select</span> s_birth<span class="token punctuation">,</span><span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y'</span><span class="token punctuation">)</span><span class="token operator">-</span>DATE_FORMAT<span class="token punctuation">(</span>s_birth<span class="token punctuation">,</span><span class="token string">'%Y'</span><span class="token punctuation">)</span> <span class="token operator">-</span>                 <span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%m%d'</span><span class="token punctuation">)</span><span class="token operator">></span>DATE_FORMAT<span class="token punctuation">(</span>s_birth<span class="token punctuation">,</span><span class="token string">'%m%d'</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> age        <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- 47、查询本周过生日的学生</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> WEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>WEEK<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> YEARWEEK<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span class="token operator">=</span>YEARWEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> WEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 48、查询下周过生日的学生</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> WEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span>WEEK<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span> <span class="token comment">-- 49、查询本月过生日的学生</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token keyword">MONTH</span><span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span class="token comment">-- 50、查询下月过生日的学生</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span><span class="token keyword">MONTH</span><span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql练习题&quot;&gt;&lt;a href=&quot;#mysql练习题&quot; class=&quot;headerlink&quot; title=&quot;mysql练习题&quot;&gt;&lt;/a&gt;mysql练习题&lt;/h1&gt;&lt;h3 id=&quot;1、表结构&quot;&gt;&lt;a href=&quot;#1、表结构&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</id>
    <published>2022-12-18T12:19:26.072Z</published>
    <updated>2022-12-18T12:19:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql读写分离"><a href="#mysql读写分离" class="headerlink" title="mysql读写分离"></a>mysql读写分离</h1><p><img src="E:\lian\oracle\mysql\mysql-proxy.jpg" alt="1570776205802"></p><h3 id="1、读写分离的介绍"><a href="#1、读写分离的介绍" class="headerlink" title="1、读写分离的介绍"></a>1、读写分离的介绍</h3><p><img src="E:\lian\oracle\mysql\读写分离.jpg"></p><p>​        MySQL读写分离基本原理是让master数据库处理写操作，slave数据库处理读操作。master将写操作的变更同步到各个slave节点。</p><p>​MySQL读写分离能提高系统性能的原因在于：</p><p>​1、物理服务器增加，机器处理能力提升。拿硬件换性能。</p><p>​2、主从只负责各自的读和写，极大程度缓解X锁和S锁争用。</p><p>​3、slave可以配置myiasm引擎，提升查询性能以及节约系统开销。</p><p>​4、master直接写是并发的，slave通过主库发送来的binlog恢复数据是异步。</p><p>​5、slave可以单独设置一些参数来提升其读的性能。</p><p>​6、增加冗余，提高可用性。</p><h3 id="2、读写分离的配置"><a href="#2、读写分离的配置" class="headerlink" title="2、读写分离的配置"></a>2、读写分离的配置</h3><h5 id="1、硬件配置"><a href="#1、硬件配置" class="headerlink" title="1、硬件配置"></a>1、硬件配置</h5><pre class="line-numbers language-none"><code class="language-none">master 192.168.85.11slave  192.168.85.12proxy  192，168.85.14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2、首先在master和slave上配置主从复制"><a href="#2、首先在master和slave上配置主从复制" class="headerlink" title="2、首先在master和slave上配置主从复制"></a>2、首先在master和slave上配置主从复制</h5><h5 id="3、进行proxy的相关配置"><a href="#3、进行proxy的相关配置" class="headerlink" title="3、进行proxy的相关配置"></a>3、进行proxy的相关配置</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1、下载mysql-proxy</span>https://downloads.mysql.com/archives/proxy/<span class="token comment">#downloads</span><span class="token comment">#2、上传软件到proxy的机器</span>直接通过xftp进行上传<span class="token comment">#3、解压安装包</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mysql-proxy-0.8.5-linux-glibc2.3-x86-64bit.tar.gz<span class="token comment">#4、修改解压后的目录</span><span class="token function">mv</span> mysql-proxy-0.8.5-linux-glibc2.3-x86-64bit mysql-proxy<span class="token comment">#5、进入mysql-proxy的目录</span><span class="token builtin class-name">cd</span> mysql-proxy<span class="token comment">#6、创建目录</span><span class="token function">mkdir</span> conf<span class="token function">mkdir</span> logs<span class="token comment">#7、添加环境变量</span><span class="token comment">#打开/etc/profile文件</span><span class="token function">vi</span> /etc/profile<span class="token comment">#在文件的最后面添加一下命令</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/root/mysql-proxy/bin<span class="token comment">#8、执行命令让环境变量生效</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment">#9、进入conf目录，创建文件并添加一下内容</span><span class="token function">vi</span> mysql-proxy.conf添加内容<span class="token punctuation">[</span>mysql-proxy<span class="token punctuation">]</span><span class="token assign-left variable">user</span><span class="token operator">=</span>rootproxy-address<span class="token operator">=</span><span class="token number">192.168</span>.85.14:4040proxy-backend-addresses<span class="token operator">=</span><span class="token number">192.168</span>.85.11:3306proxy-read-only-backend-addresses<span class="token operator">=</span><span class="token number">192.168</span>.85.12:3306proxy-lua-script<span class="token operator">=</span>/root/mysql-proxy/share/doc/mysql-proxy/rw-splitting.lualog-file<span class="token operator">=</span>/root/mysql-proxy/logs/mysql-proxy.loglog-level<span class="token operator">=</span>debug<span class="token assign-left variable">daemon</span><span class="token operator">=</span>true<span class="token comment">#10、开启mysql-proxy</span>mysql-proxy --defaults-file<span class="token operator">=</span>/root/mysql-proxy/conf/mysql-proxy.conf<span class="token comment">#11、查看是否安装成功，打开日志文件</span><span class="token builtin class-name">cd</span> /root/mysql-proxy/logs<span class="token function">tail</span> <span class="token parameter variable">-100</span> mysql-proxy.log<span class="token comment">#内容如下：表示安装成功</span><span class="token number">2019</span>-10-11 <span class="token number">21</span>:49:41: <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> max <span class="token function">open</span> file-descriptors <span class="token operator">=</span> <span class="token number">1024</span><span class="token number">2019</span>-10-11 <span class="token number">21</span>:49:41: <span class="token punctuation">(</span>message<span class="token punctuation">)</span> proxy listening on port <span class="token number">192.168</span>.85.14:4040<span class="token number">2019</span>-10-11 <span class="token number">21</span>:49:41: <span class="token punctuation">(</span>message<span class="token punctuation">)</span> added read/write backend: <span class="token number">192.168</span>.85.11:3306<span class="token number">2019</span>-10-11 <span class="token number">21</span>:49:41: <span class="token punctuation">(</span>message<span class="token punctuation">)</span> added read-only backend: <span class="token number">192.168</span>.85.12:3306<span class="token number">2019</span>-10-11 <span class="token number">21</span>:49:41: <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> now running as user: root <span class="token punctuation">(</span><span class="token number">0</span>/0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、进行连接"><a href="#4、进行连接" class="headerlink" title="4、进行连接"></a>4、进行连接</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#mysql的命令行会出现无法连接的情况，所以建议使用客户端</span>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p123</span> <span class="token parameter variable">-h192.168.85.14</span> <span class="token parameter variable">-P</span> <span class="token number">4040</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql读写分离&quot;&gt;&lt;a href=&quot;#mysql读写分离&quot; class=&quot;headerlink&quot; title=&quot;mysql读写分离&quot;&gt;&lt;/a&gt;mysql读写分离&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;E:\lian\oracle\mysql\mysql-proxy</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/</id>
    <published>2022-12-18T12:19:26.063Z</published>
    <updated>2022-12-18T12:19:26.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的锁机制"><a href="#mysql的锁机制" class="headerlink" title="mysql的锁机制"></a>mysql的锁机制</h1><h3 id="1、MySQL锁的基本介绍"><a href="#1、MySQL锁的基本介绍" class="headerlink" title="1、MySQL锁的基本介绍"></a>1、MySQL锁的基本介绍</h3><p>​<strong>锁是计算机协调多个进程或线程并发访问某一资源的机制。</strong>在数据库中，除传统的 计算资源（如CPU、RAM、I&#x2F;O等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一 个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><p>​相对其他数据库而言，MySQL的锁机制比较简单，其最 显著的特点是不同的<strong>存储引擎</strong>支持不同的锁机制。比如，MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。 </p><p>​<strong>表级锁：</strong>开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>​<strong>行级锁：</strong>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。  </p><p>​从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度 来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有 并发查询的应用，如一些在线事务处理（OLTP）系统。 </p><h3 id="2、MyISAM表锁"><a href="#2、MyISAM表锁" class="headerlink" title="2、MyISAM表锁"></a>2、MyISAM表锁</h3><p>MySQL的表级锁有两种模式：<strong>表共享读锁（Table Read Lock）</strong>和<strong>表独占写锁（Table Write Lock）</strong>。  </p><p>对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；对 MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；MyISAM表的读操作与写操作之间，以及写操作之间是串行的！ </p><p>建表语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>mylock<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>mylock<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>mylock<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>mylock<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>mylock<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MyISAM写锁阻塞读的案例：</strong></p><p>​当一个线程获得对一个表的写锁之后，只有持有锁的线程可以对表进行更新操作。其他线程的读写操作都会等待，直到锁释放为止。</p><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">获取表的write锁定<br />lock table mylock write;</td><td align="center"></td></tr><tr><td align="center">当前session对表的查询，插入，更新操作都可以执行<br />select * from mylock;<br />insert into mylock values(5,’e’);</td><td align="center">当前session对表的查询会被阻塞<br />select * from mylock；</td></tr><tr><td align="center">释放锁：<br />unlock tables；</td><td align="center">当前session能够立刻执行，并返回对应结果</td></tr></tbody></table><p><strong>MyISAM读阻塞写的案例：</strong></p><p>​一个session使用lock table给表加读锁，这个session可以锁定表中的记录，但更新和访问其他表都会提示错误，同时，另一个session可以查询表中的记录，但更新就会出现锁等待。</p><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">获得表的read锁定<br />lock table mylock read;</td><td align="center"></td></tr><tr><td align="center">当前session可以查询该表记录：<br />select * from mylock;</td><td align="center">当前session可以查询该表记录：<br />select * from mylock;</td></tr><tr><td align="center">当前session不能查询没有锁定的表<br />select * from person<br />Table ‘person’ was not locked with LOCK TABLES</td><td align="center">当前session可以查询或者更新未锁定的表<br />select * from mylock<br />insert into person values(1,’zhangsan’);</td></tr><tr><td align="center">当前session插入或者更新表会提示错误<br />insert into mylock values(6,’f’)<br />Table ‘mylock’ was locked with a READ lock and can’t be updated<br />update mylock set name&#x3D;’aa’ where id &#x3D; 1;<br />Table ‘mylock’ was locked with a READ lock and can’t be updated</td><td align="center">当前session插入数据会等待获得锁<br />insert into mylock values(6,’f’);</td></tr><tr><td align="center">释放锁<br />unlock tables;</td><td align="center">获得锁，更新成功</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p><strong>MyISAM在执行查询语句之前，会自动给涉及的所有表加读锁，在执行更新操作前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要使用命令来显式加锁，上例中的加锁时为了演示效果。</strong></p><p><strong>MyISAM的并发插入问题</strong></p><p>MyISAM表的读和写是串行的，这是就总体而言的，在一定条件下，MyISAM也支持查询和插入操作的并发执行</p><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">获取表的read local锁定<br />lock table mylock read local</td><td align="center"></td></tr><tr><td align="center">当前session不能对表进行更新或者插入操作<br />insert into mylock values(6,’f’)<br />Table ‘mylock’ was locked with a READ lock and can’t be updated<br />update mylock set name&#x3D;’aa’ where id &#x3D; 1;<br />Table ‘mylock’ was locked with a READ lock and can’t be updated</td><td align="center">其他session可以查询该表的记录<br />select* from mylock</td></tr><tr><td align="center">当前session不能查询没有锁定的表<br />select * from person<br />Table ‘person’ was not locked with LOCK TABLES</td><td align="center">其他session可以进行插入操作，但是更新会阻塞<br />update mylock set name &#x3D; ‘aa’ where id &#x3D; 1;</td></tr><tr><td align="center">当前session不能访问其他session插入的记录；</td><td align="center"></td></tr><tr><td align="center">释放锁资源：unlock tables</td><td align="center">当前session获取锁，更新操作完成</td></tr><tr><td align="center">当前session可以查看其他session插入的记录</td><td align="center"></td></tr></tbody></table><p> 可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定争夺： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'table%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------------+-------+</span><span class="token operator">|</span> Variable_name         <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+-------+</span><span class="token operator">|</span> Table_locks_immediate <span class="token operator">|</span> <span class="token number">352</span>   <span class="token operator">|</span><span class="token operator">|</span> Table_locks_waited    <span class="token operator">|</span> <span class="token number">2</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+-------+</span><span class="token comment">--如果Table_locks_waited的值比较高，则说明存在着较严重的表级锁争用情况。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>InnoDB锁</strong></p><p><strong>1、事务及其ACID属性</strong></p><p>事务是由一组SQL语句组成的逻辑处理单元，事务具有4属性，通常称为事务的ACID属性。</p><p>原子性（Actomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。<br>一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。<br>隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。<br>持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</p><p><strong>2、并发事务带来的问题</strong></p><p>相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多用户的并发操作，但与此同时，会带来一下问题：</p><p><strong>脏读</strong>： 一个事务正在对一条记录做修改，在这个事务并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读” </p><p><strong>不可重复读</strong>：一个事务在读取某些数据已经发生了改变、或某些记录已经被删除了！这种现象叫做“不可重复读”。 </p><p><strong>幻读</strong>： 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读” </p><p>上述出现的问题都是数据库读一致性的问题，可以通过事务的隔离机制来进行保证。</p><p>数据库的事务隔离越严格，并发副作用就越小，但付出的代价也就越大，因为事务隔离本质上就是使事务在一定程度上串行化，需要根据具体的业务需求来决定使用哪种隔离级别</p><table><thead><tr><th align="center"></th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">read uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">read committed</td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">repeatable read</td><td align="center"></td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">serializable</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p> 可以通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'innodb_row_lock%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token operator">|</span> Variable_name                 <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token operator">|</span> Innodb_row_lock_current_waits <span class="token operator">|</span> <span class="token number">0</span>     <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_time          <span class="token operator">|</span> <span class="token number">18702</span> <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_time_avg      <span class="token operator">|</span> <span class="token number">18702</span> <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_time_max      <span class="token operator">|</span> <span class="token number">18702</span> <span class="token operator">|</span><span class="token operator">|</span> Innodb_row_lock_waits         <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token comment">--如果发现锁争用比较严重，如InnoDB_row_lock_waits和InnoDB_row_lock_time_avg的值比较高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、InnoDB的行锁模式及加锁方法</strong></p><p>​<strong>共享锁（s）</strong>：又称读锁。允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。<br>​<strong>排他锁（x）</strong>：又称写锁。允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。</p><p>​mysql InnoDB引擎默认的修改数据语句：<strong>update,delete,insert都会自动给涉及到的数据加上排他锁，select语句默认不会加任何锁类型</strong>，如果加排他锁可以使用select …for update语句，加共享锁可以使用select … lock in share mode语句。<strong>所以加过排他锁的数据行在其他事务种是不能修改数据的，也不能通过for update和lock in share mode锁的方式查询数据，但可以直接通过select …from…查询数据，因为普通查询没有任何锁机制。</strong> </p><p><strong>InnoDB行锁实现方式</strong></p><p>​InnoDB行锁是通过给<strong>索引</strong>上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，<strong>否则，InnoDB将使用表锁！</strong>  </p><p>1、在不通过索引条件查询的时候，innodb使用的是表锁而不是行锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tab_no_index<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tab_no_index <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">set autocommit&#x3D;0<br />select * from tab_no_index where id &#x3D; 1;</td><td align="center">set autocommit&#x3D;0<br />select * from tab_no_index where id &#x3D;2</td></tr><tr><td align="center">select * from tab_no_index where id &#x3D; 1 for update</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">select * from tab_no_index where id &#x3D; 2 for update;</td></tr></tbody></table><p>session1只给一行加了排他锁，但是session2在请求其他行的排他锁的时候，会出现锁等待。原因是在没有索引的情况下，innodb只能使用表锁。</p><p>2、创建带索引的表进行条件查询，innodb使用的是行锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> tab_with_index<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_with_index <span class="token keyword">add</span> <span class="token keyword">index</span> id<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tab_with_index <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">set autocommit&#x3D;0<br />select * from tab_with_indexwhere id &#x3D; 1;</td><td align="center">set autocommit&#x3D;0<br />select * from tab_with_indexwhere id &#x3D;2</td></tr><tr><td align="center">select * from tab_with_indexwhere id &#x3D; 1 for update</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">select * from tab_with_indexwhere id &#x3D; 2 for update;</td></tr></tbody></table><p>3、由于mysql的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是依然无法访问到具体的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tab_with_index  <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">set autocommit&#x3D;0</td><td align="center">set autocommit&#x3D;0</td></tr><tr><td align="center">select * from tab_with_index where id &#x3D; 1 and name&#x3D;’1’ for update</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">select * from tab_with_index where id &#x3D; 1 and name&#x3D;’4’ for update<br />虽然session2访问的是和session1不同的记录，但是因为使用了相同的索引，所以需要等待锁</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>对于MyISAM的表锁，主要讨论了以下几点：</strong><br>（1）共享读锁（S）之间是兼容的，但共享读锁（S）与排他写锁（X）之间，以及排他写锁（X）之间是互斥的，也就是说读和写是串行的。<br>（2）在一定条件下，MyISAM允许查询和插入并发执行，我们可以利用这一点来解决应用中对同一表查询和插入的锁争用问题。<br>（3）MyISAM默认的锁调度机制是写优先，这并不一定适合所有应用，用户可以通过设置LOW_PRIORITY_UPDATES参数，或在INSERT、UPDATE、DELETE语句中指定LOW_PRIORITY选项来调节读写锁的争用。<br>（4）由于表锁的锁定粒度大，读写之间又是串行的，因此，如果更新操作较多，MyISAM表可能会出现严重的锁等待，可以考虑采用InnoDB表来减少锁冲突。</p><p><strong>对于InnoDB表，本文主要讨论了以下几项内容：</strong><br>（1）InnoDB的行锁是基于索引实现的，如果不通过索引访问数据，InnoDB会使用表锁。<br>（2）在不同的隔离级别下，InnoDB的锁机制和一致性读策略不同。</p><p>在了解InnoDB锁特性后，用户可以通过设计和SQL调整等措施减少锁冲突和死锁，包括：</p><ul><li>尽量使用较低的隔离级别； 精心设计索引，并尽量使用索引访问数据，使加锁更精确，从而减少锁冲突的机会；</li><li>选择合理的事务大小，小事务发生锁冲突的几率也更小；</li><li>给记录集显式加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时再请求排他锁，这样容易产生死锁；</li><li>不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大大减少死锁的机会；</li><li>尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响； 不要申请超过实际需要的锁级别；除非必须，查询时不要显示加锁；</li><li>对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的锁机制&quot;&gt;&lt;a href=&quot;#mysql的锁机制&quot; class=&quot;headerlink&quot; title=&quot;mysql的锁机制&quot;&gt;&lt;/a&gt;mysql的锁机制&lt;/h1&gt;&lt;h3 id=&quot;1、MySQL锁的基本介绍&quot;&gt;&lt;a href=&quot;#1、MySQL锁的基本介</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2022-12-18T12:19:26.051Z</published>
    <updated>2022-12-18T12:19:26.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql主从复制安装配置"><a href="#mysql主从复制安装配置" class="headerlink" title="mysql主从复制安装配置"></a>mysql主从复制安装配置</h1><h3 id="1、基础设置准备"><a href="#1、基础设置准备" class="headerlink" title="1、基础设置准备"></a>1、基础设置准备</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#操作系统：</span>centos6.5<span class="token comment">#mysql版本：</span><span class="token number">5.7</span><span class="token comment">#两台虚拟机：</span>node1:192.168.85.111（主）node2:192.168.85.112（从）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、安装mysql数据库"><a href="#2、安装mysql数据库" class="headerlink" title="2、安装mysql数据库"></a>2、安装mysql数据库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#详细安装和卸载的步骤参考对应的文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、在两台数据库中分别创建数据库"><a href="#3、在两台数据库中分别创建数据库" class="headerlink" title="3、在两台数据库中分别创建数据库"></a>3、在两台数据库中分别创建数据库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--注意两台必须全部执行</span><span class="token keyword">create</span> <span class="token keyword">database</span> msb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、在主（node1）服务器进行如下配置："><a href="#4、在主（node1）服务器进行如下配置：" class="headerlink" title="4、在主（node1）服务器进行如下配置："></a>4、在主（node1）服务器进行如下配置：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改配置文件，执行以下命令打开mysql配置文件</span><span class="token function">vi</span> /etc/my.cnf<span class="token comment">#在mysqld模块中添加如下配置信息</span>log-bin<span class="token operator">=</span>master-bin <span class="token comment">#二进制文件名称</span>binlog-format<span class="token operator">=</span>ROW  <span class="token comment">#二进制日志格式，有row、statement、mixed三种格式，row指的是把改变的内容复制过去，而不是把命令在从服务器上执行一遍，statement指的是在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。mixed指的是默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</span>server-id<span class="token operator">=</span><span class="token number">1</span>   <span class="token comment">#要求各个服务器的id必须不一样</span>binlog-do-db<span class="token operator">=</span>msb   <span class="token comment">#同步的数据库名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、配置从服务器登录主服务器的账号授权"><a href="#5、配置从服务器登录主服务器的账号授权" class="headerlink" title="5、配置从服务器登录主服务器的账号授权"></a>5、配置从服务器登录主服务器的账号授权</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--授权操作</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment">--刷新权限</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、从服务器的配置"><a href="#6、从服务器的配置" class="headerlink" title="6、从服务器的配置"></a>6、从服务器的配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改配置文件，执行以下命令打开mysql配置文件</span><span class="token function">vi</span> /etc/my.cnf<span class="token comment">#在mysqld模块中添加如下配置信息</span>log-bin<span class="token operator">=</span>master-bin<span class="token comment">#二进制文件的名称</span>binlog-format<span class="token operator">=</span>ROW<span class="token comment">#二进制文件的格式</span>server-id<span class="token operator">=</span><span class="token number">2</span><span class="token comment">#服务器的id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、重启主服务器的mysqld服务"><a href="#7、重启主服务器的mysqld服务" class="headerlink" title="7、重启主服务器的mysqld服务"></a>7、重启主服务器的mysqld服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#重启mysql服务</span><span class="token function">service</span> mysqld restart<span class="token comment">#登录mysql数据库</span>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span class="token comment">#查看master的状态</span>show master status；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570703264912.png" alt="1570703264912"></p><h3 id="8、重启从服务器并进行相关配置"><a href="#8、重启从服务器并进行相关配置" class="headerlink" title="8、重启从服务器并进行相关配置"></a>8、重启从服务器并进行相关配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#重启mysql服务</span><span class="token function">service</span> mysqld restart<span class="token comment">#登录mysql</span>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span class="token comment">#连接主服务器</span>change master to <span class="token assign-left variable">master_host</span><span class="token operator">=</span><span class="token string">'192.168.85.11'</span>,master_user<span class="token operator">=</span><span class="token string">'root'</span>,master_password<span class="token operator">=</span><span class="token string">'123456'</span>,master_port<span class="token operator">=</span><span class="token number">3306</span>,master_log_file<span class="token operator">=</span><span class="token string">'master-bin.000001'</span>,master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span><span class="token comment">#启动slave</span>start slave<span class="token comment">#查看slave的状态</span>show slave status<span class="token punctuation">\</span>G<span class="token punctuation">(</span>注意没有分号<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态"><a href="#9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态" class="headerlink" title="9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态"></a>9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql主从复制安装配置&quot;&gt;&lt;a href=&quot;#mysql主从复制安装配置&quot; class=&quot;headerlink&quot; title=&quot;mysql主从复制安装配置&quot;&gt;&lt;/a&gt;mysql主从复制安装配置&lt;/h1&gt;&lt;h3 id=&quot;1、基础设置准备&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E4%BA%8B%E5%8A%A1%E6%B5%8B%E8%AF%95/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E4%BA%8B%E5%8A%A1%E6%B5%8B%E8%AF%95/</id>
    <published>2022-12-18T12:19:26.051Z</published>
    <updated>2022-12-18T12:19:26.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql事务测试"><a href="#mysql事务测试" class="headerlink" title="mysql事务测试"></a>mysql事务测试</h1><p>1、打开mysql的命令行，将自动提交事务给关闭</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查看是否是自动提交 1表示开启，0表示关闭</span><span class="token keyword">select</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span><span class="token comment">--设置关闭</span><span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、数据准备</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建数据库</span><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">tran</span><span class="token punctuation">;</span><span class="token comment">--切换数据库 两个窗口都执行</span><span class="token keyword">use</span> <span class="token keyword">tran</span><span class="token punctuation">;</span><span class="token comment">--准备数据</span> <span class="token keyword">create</span> <span class="token keyword">table</span> psn<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span><span class="token comment">--插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> psn <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> psn <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> psn <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、测试事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--事务包含四个隔离级别：从上往下，隔离级别越来越高，意味着数据越来越安全</span><span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span> <span class="token comment">--读未提交</span><span class="token keyword">read</span> commited<span class="token punctuation">;</span><span class="token comment">--读已提交</span><span class="token keyword">repeatable</span> <span class="token keyword">read</span><span class="token punctuation">;</span><span class="token comment">--可重复读</span><span class="token punctuation">(</span>seariable<span class="token punctuation">)</span><span class="token comment">--序列化执行，串行执行</span><span class="token comment">--产生数据不一致的情况：</span>脏读不可重复读幻读<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>隔离级别</th><th>异常情况</th><th></th><th>异常情况</th></tr></thead><tbody><tr><td>读未提交</td><td>脏读</td><td>不可重复读</td><td>幻读</td></tr><tr><td>读已提交</td><td></td><td>不可重复读</td><td>幻读</td></tr><tr><td>可重复读</td><td></td><td></td><td>幻读</td></tr><tr><td>序列化</td><td></td><td></td><td></td></tr></tbody></table><p>4、测试1：脏读 read uncommitted</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span>A:<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span>B:<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span>A:<span class="token keyword">update</span> psn <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'msb'</span><span class="token punctuation">;</span>A:selecet <span class="token operator">*</span> <span class="token keyword">from</span> psnB:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span>  <span class="token comment">--读取的结果msb。产生脏读，因为A事务并没有commit，读取到了不存在的数据</span>A:<span class="token keyword">commit</span><span class="token punctuation">;</span>B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span> <span class="token comment">--读取的数据是msb,因为A事务已经commit，数据永久的被修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、测试2：当使用read committed的时候，就不会出现脏读的情况了，当时会出现不可重复读的问题</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span>A:<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span>B:<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span><span class="token comment">--执行到此处的时候发现，两个窗口读取的数据是一致的</span>A:<span class="token keyword">update</span> psn <span class="token keyword">set</span> name <span class="token operator">=</span><span class="token string">'zhangsan'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span>B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span><span class="token comment">--执行到此处发现两个窗口读取的数据不一致，B窗口中读取不到更新的数据</span>A:<span class="token keyword">commit</span><span class="token punctuation">;</span>A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span><span class="token comment">--读取到更新的数据</span>B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span><span class="token comment">--也读取到更新的数据</span><span class="token comment">--发现同一个事务中多次读取数据出现不一致的情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、测试3：当使用repeatable read的时候(按照上面的步骤操作)，就不会出现不可重复读的问题，但是会出现幻读的问题</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">session</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span><span class="token punctuation">;</span>A:<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span>B:<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span><span class="token comment">--此时两个窗口读取的数据是一致的</span>A:<span class="token keyword">insert</span> <span class="token keyword">into</span> psn <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'sisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A:<span class="token keyword">commit</span><span class="token punctuation">;</span>A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span><span class="token comment">--读取到添加的数据</span>B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> psn<span class="token punctuation">;</span><span class="token comment">--读取不到添加的数据</span>B:<span class="token keyword">insert</span> <span class="token keyword">into</span> psn <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'sisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--报错，无法插入数据</span><span class="token comment">--此时发现读取不到数据，但是在插入的时候不允许插入，出现了幻读，设置更高级别的隔离级别即可解决</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​现在学习的是数据库级别的事务，需要掌握的就是事务的隔离级别和产生的数据不一致的情况</p><p>后续会学习声明式事务及事务的传播特性以及分布式事务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql事务测试&quot;&gt;&lt;a href=&quot;#mysql事务测试&quot; class=&quot;headerlink&quot; title=&quot;mysql事务测试&quot;&gt;&lt;/a&gt;mysql事务测试&lt;/h1&gt;&lt;p&gt;1、打开mysql的命令行，将自动提交事务给关闭&lt;/p&gt;
&lt;pre class=&quot;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</id>
    <published>2022-12-18T12:19:26.051Z</published>
    <updated>2022-12-18T12:19:26.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql执行计划"><a href="#mysql执行计划" class="headerlink" title="mysql执行计划"></a>mysql执行计划</h1><p>​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。</p><p>​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。</p><p>​   官网地址： <a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html">https://dev.mysql.com/doc/refman/5.5/en/explain-output.html</a> </p><h3 id="1、执行计划中包含的信息"><a href="#1、执行计划中包含的信息" class="headerlink" title="1、执行计划中包含的信息"></a>1、执行计划中包含的信息</h3><table><thead><tr><th align="center">Column</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">The <code>SELECT</code> identifier</td></tr><tr><td align="center">select_type</td><td align="center">The <code>SELECT</code> type</td></tr><tr><td align="center">table</td><td align="center">The table for the output row</td></tr><tr><td align="center">partitions</td><td align="center">The matching partitions</td></tr><tr><td align="center">type</td><td align="center">The join type</td></tr><tr><td align="center">possible_keys</td><td align="center">The possible indexes to choose</td></tr><tr><td align="center">key</td><td align="center">The index actually chosen</td></tr><tr><td align="center">key_len</td><td align="center">The length of the chosen key</td></tr><tr><td align="center">ref</td><td align="center">The columns compared to the index</td></tr><tr><td align="center">rows</td><td align="center">Estimate of rows to be examined</td></tr><tr><td align="center">filtered</td><td align="center">Percentage of rows filtered by table condition</td></tr><tr><td align="center">extra</td><td align="center">Additional information</td></tr></tbody></table><p><strong>id</strong></p><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><p>​1、如果id相同，那么执行顺序从上到下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno <span class="token keyword">join</span> salgrade sg <span class="token keyword">on</span> e<span class="token punctuation">.</span>sal <span class="token operator">between</span> sg<span class="token punctuation">.</span>losal <span class="token operator">and</span> sg<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​2、如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> d<span class="token punctuation">.</span>deptno <span class="token keyword">from</span> dept d <span class="token keyword">where</span> d<span class="token punctuation">.</span>dname <span class="token operator">=</span> <span class="token string">'SALES'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​3、id相同和不同的，同时存在：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno <span class="token keyword">join</span> salgrade sg <span class="token keyword">on</span> e<span class="token punctuation">.</span>sal <span class="token operator">between</span> sg<span class="token punctuation">.</span>losal <span class="token operator">and</span> sg<span class="token punctuation">.</span>hisal <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> d<span class="token punctuation">.</span>deptno <span class="token keyword">from</span> dept d <span class="token keyword">where</span> d<span class="token punctuation">.</span>dname <span class="token operator">=</span> <span class="token string">'SALES'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>select_type</strong></p><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><table><thead><tr><th align="center"><code>select_type</code> Value</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">SIMPLE</td><td align="center">Simple SELECT (not using UNION or subqueries)</td></tr><tr><td align="center">PRIMARY</td><td align="center">Outermost SELECT</td></tr><tr><td align="center">UNION</td><td align="center">Second or later SELECT statement in a UNION</td></tr><tr><td align="center">DEPENDENT UNION</td><td align="center">Second or later SELECT statement in a UNION, dependent on outer query</td></tr><tr><td align="center">UNION RESULT</td><td align="center">Result of a UNION.</td></tr><tr><td align="center">SUBQUERY</td><td align="center">First SELECT in subquery</td></tr><tr><td align="center">DEPENDENT SUBQUERY</td><td align="center">First SELECT in subquery, dependent on outer query</td></tr><tr><td align="center">DERIVED</td><td align="center">Derived table</td></tr><tr><td align="center">UNCACHEABLE SUBQUERY</td><td align="center">A subquery for which the result cannot be cached and must be re-evaluated for each row of the outer query</td></tr><tr><td align="center">UNCACHEABLE UNION</td><td align="center">The second or later select in a UNION that belongs to an uncacheable subquery (see UNCACHEABLE SUBQUERY)</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--sample:简单的查询，不包含子查询和union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">--primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">--union:若第二个select出现在union之后，则被标记为union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">--dependent union:跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>empno  <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment">--union result:从union表获取结果的select</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">--subquery:在select或者where列表中包含子查询</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">--dependent subquery:subquery的子查询要受到外部表查询的影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--DERIVED: from子句中出现的子查询，也叫做派生类，</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">--UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span>@<span class="token variable">@sort_buffer_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>table</strong></p><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集<br>        1、如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</p><p>​2、表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</p><p>​3、当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</p><p><strong>type</strong></p><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL </p><p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">--index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询时覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">--range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, &lt;>, >, >=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">between</span> <span class="token number">7000</span> <span class="token operator">and</span> <span class="token number">7500</span><span class="token punctuation">;</span><span class="token comment">--index_subquery：利用索引来关联子查询，不再扫描全表</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> t_job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span><span class="token comment">--ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span>  e<span class="token punctuation">.</span>mgr <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> e<span class="token punctuation">.</span>mgr<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment">--ref：使用了非唯一性索引进行数据的查找</span> <span class="token keyword">create</span> <span class="token keyword">index</span> idx_3 <span class="token keyword">on</span> emp<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e<span class="token punctuation">,</span>dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span>d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">--eq_ref ：使用唯一性索引进行数据查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>emp2 <span class="token keyword">where</span> emp<span class="token punctuation">.</span>empno <span class="token operator">=</span> emp2<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token comment">--const：这个表至多有一个匹配行，</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span> <span class="token comment">--system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>possible_keys</strong> </p><p>​        显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>key</strong></p><p>​实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>key_len</strong></p><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ref</strong></p><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>rows</strong></p><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>extra</strong></p><p>包含额外的信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--using filesort:说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span><span class="token comment">--using temporary:建立临时表来保存中间结果，查询完成之后把临时表删除</span><span class="token keyword">explain</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> ename<span class="token punctuation">;</span><span class="token comment">--using index:这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">--using where:使用where进行条件过滤</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">--using join buffer:使用连接缓存，情况没有模拟出来</span><span class="token comment">--impossible where：where语句的结果总是false</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7469</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql执行计划&quot;&gt;&lt;a href=&quot;#mysql执行计划&quot; class=&quot;headerlink&quot; title=&quot;mysql执行计划&quot;&gt;&lt;/a&gt;mysql执行计划&lt;/h1&gt;&lt;p&gt;​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/MYSQL%20performance%20schema%E8%AF%A6%E8%A7%A3/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/MYSQL%20performance%20schema%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-12-18T12:19:26.050Z</published>
    <updated>2022-12-18T12:19:26.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL-performance-schema详解"><a href="#MYSQL-performance-schema详解" class="headerlink" title="MYSQL performance schema详解"></a>MYSQL performance schema详解</h1><h3 id="0、performance-schema的介绍"><a href="#0、performance-schema的介绍" class="headerlink" title="0、performance_schema的介绍"></a>0、performance_schema的介绍</h3><p>​<strong>MySQL的performance schema 用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源等待等情况</strong>。</p><p>​特点如下：</p><p>​1、提供了一种在数据库运行时实时检查server的内部执行情况的方法。performance_schema 数据库中的表使用performance_schema存储引擎。该数据库主要关注数据库运行过程中的性能相关的数据，与information_schema不同，information_schema主要关注server运行过程中的元数据信息</p><p>​2、performance_schema通过监视server的事件来实现监视server内部运行情况， “事件”就是server内部活动中所做的任何事情以及对应的时间消耗，利用这些信息来判断server中的相关资源消耗在了哪里？一般来说，事件可以是函数调用、操作系统的等待、SQL语句执行的阶段（如sql语句执行过程中的parsing 或 sorting阶段）或者整个SQL语句与SQL语句集合。事件的采集可以方便的提供server中的相关存储引擎对磁盘文件、表I&#x2F;O、表锁等资源的同步调用信息。<br>​3、performance_schema中的事件与写入二进制日志中的事件（描述数据修改的events）、事件计划调度程序（这是一种存储程序）的事件不同。performance_schema中的事件记录的是server执行某些活动对某些资源的消耗、耗时、这些活动执行的次数等情况。<br>​4、performance_schema中的事件只记录在本地server的performance_schema中，其下的这些表中数据发生变化时不会被写入binlog中，也不会通过复制机制被复制到其他server中。<br>​5、 当前活跃事件、历史事件和事件摘要相关的表中记录的信息。能提供某个事件的执行次数、使用时长。进而可用于分析某个特定线程、特定对象（如mutex或file）相关联的活动。<br>​6、PERFORMANCE_SCHEMA存储引擎使用server源代码中的“检测点”来实现事件数据的收集。对于performance_schema实现机制本身的代码没有相关的单独线程来检测，这与其他功能（如复制或事件计划程序）不同<br>​7、收集的事件数据存储在performance_schema数据库的表中。这些表可以使用SELECT语句查询，也可以使用SQL语句更新performance_schema数据库中的表记录（如动态修改performance_schema的setup_*开头的几个配置表，但要注意：配置表的更改会立即生效，这会影响数据收集）<br>​8、performance_schema的表中的数据不会持久化存储在磁盘中，而是保存在内存中，一旦服务器重启，这些数据会丢失（包括配置表在内的整个performance_schema下的所有数据）<br>​9、MySQL支持的所有平台中事件监控功能都可用，但不同平台中用于统计事件时间开销的计时器类型可能会有所差异。</p><h3 id="1、performance-schema入门"><a href="#1、performance-schema入门" class="headerlink" title="1、performance schema入门"></a>1、performance schema入门</h3><p>​在mysql的5.7版本中，性能模式是默认开启的，如果想要显式的关闭的话需要修改配置文件，不能直接进行修改，会报错Variable ‘performance_schema’ is a read only variable。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--查看performance_schema的属性</span>mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'performance_schema'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> Variable_name      <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token comment">--在配置文件中修改performance_schema的属性值，on表示开启，off表示关闭</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>performance_schema<span class="token operator">=</span><span class="token keyword">ON</span><span class="token comment">--切换数据库</span><span class="token keyword">use</span> performance_schema<span class="token punctuation">;</span><span class="token comment">--查看当前数据库下的所有表,会看到有很多表存储着相关的信息</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">--可以通过show create table tablename来查看创建表的时候的表结构</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> setup_consumers<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> <span class="token keyword">Table</span>           <span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Table</span>                    <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> setup_consumers <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>setup_consumers<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                        <span class="token identifier"><span class="token punctuation">`</span>ENABLED<span class="token punctuation">`</span></span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'YES'</span><span class="token punctuation">,</span><span class="token string">'NO'</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>               <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>PERFORMANCE_SCHEMA <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​想要搞明白后续的内容，同学们需要理解两个基本概念：</p><p>​instruments: 生产者，用于采集mysql中各种各样的操作产生的事件信息，对应配置表中的配置项我们可以称为监控采集配置项。</p><p>​consumers:消费者，对应的消费者表用于存储来自instruments采集的数据，对应配置表中的配置项我们可以称为消费存储配置项。</p><h3 id="2、performance-schema表的分类"><a href="#2、performance-schema表的分类" class="headerlink" title="2、performance_schema表的分类"></a>2、performance_schema表的分类</h3><p>​performance_schema库下的表可以按照监视不同的纬度就行分组。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--语句事件记录表，这些表记录了语句事件信息，当前语句事件表events_statements_current、历史语句事件表events_statements_history和长语句历史事件表events_statements_history_long、以及聚合后的摘要表summary，其中，summary表还可以根据帐号(account)，主机(host)，程序(program)，线程(thread)，用户(user)和全局(global)再进行细分)</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%statement%'</span><span class="token punctuation">;</span><span class="token comment">--等待事件记录表，与语句事件类型的相关记录表类似：</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span class="token comment">--阶段事件记录表，记录语句执行的阶段事件的表</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%stage%'</span><span class="token punctuation">;</span><span class="token comment">--事务事件记录表，记录事务相关的事件的表</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%transaction%'</span><span class="token punctuation">;</span><span class="token comment">--监控文件系统层调用的表</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%file%'</span><span class="token punctuation">;</span><span class="token comment">--监视内存使用的表</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%memory%'</span><span class="token punctuation">;</span><span class="token comment">--动态对performance_schema进行配置的配置表</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%setup%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、performance-schema的简单配置与使用"><a href="#3、performance-schema的简单配置与使用" class="headerlink" title="3、performance_schema的简单配置与使用"></a>3、performance_schema的简单配置与使用</h3><p>​数据库刚刚初始化并启动时，并非所有instruments(事件采集项，在采集项的配置表中每一项都有一个开关字段，或为YES，或为NO)和consumers(与采集项类似，也有一个对应的事件类型保存表配置项，为YES就表示对应的表保存性能数据，为NO就表示对应的表不保存性能数据)都启用了，所以默认不会收集所有的事件，可能你需要检测的事件并没有打开，需要进行设置，可以使用如下两个语句打开对应的instruments和consumers（行计数可能会因MySQL版本而异)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--打开等待事件的采集器配置项开关，需要修改setup_instruments配置表中对应的采集器配置项</span><span class="token keyword">UPDATE</span> setup_instruments <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token punctuation">,</span> TIMED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'wait%'</span><span class="token punctuation">;</span><span class="token comment">--打开等待事件的保存表配置开关，修改setup_consumers配置表中对应的配置项</span><span class="token keyword">UPDATE</span> setup_consumers <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span class="token comment">--当配置完成之后可以查看当前server正在做什么，可以通过查询events_waits_current表来得知，该表中每个线程只包含一行数据，用于显示每个线程的最新监视事件</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> events_waits_current\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>            THREAD_ID: <span class="token number">11</span>             EVENT_ID: <span class="token number">570</span>         END_EVENT_ID: <span class="token number">570</span>           EVENT_NAME: wait<span class="token operator">/</span>synch<span class="token operator">/</span>mutex<span class="token operator">/</span><span class="token keyword">innodb</span><span class="token operator">/</span>buf_dblwr_mutex               SOURCE:           TIMER_START: <span class="token number">4508505105239280</span>            TIMER_END: <span class="token number">4508505105270160</span>           TIMER_WAIT: <span class="token number">30880</span>                SPINS: <span class="token boolean">NULL</span>        OBJECT_SCHEMA: <span class="token boolean">NULL</span>          OBJECT_NAME: <span class="token boolean">NULL</span>           INDEX_NAME: <span class="token boolean">NULL</span>          OBJECT_TYPE: <span class="token boolean">NULL</span>OBJECT_INSTANCE_BEGIN: <span class="token number">67918392</span>     NESTING_EVENT_ID: <span class="token boolean">NULL</span>   NESTING_EVENT_TYPE: <span class="token boolean">NULL</span>            OPERATION: <span class="token keyword">lock</span>      NUMBER_OF_BYTES: <span class="token boolean">NULL</span>                FLAGS: <span class="token boolean">NULL</span><span class="token comment">/*该信息表示线程id为11的线程正在等待buf_dblwr_mutex锁，等待事件为30880属性说明：id:事件来自哪个线程，事件编号是多少event_name:表示检测到的具体的内容source:表示这个检测代码在哪个源文件中以及行号timer_start:表示该事件的开始时间timer_end:表示该事件的结束时间timer_wait:表示该事件总的花费时间注意：_current表中每个线程只保留一条记录，一旦线程完成工作，该表中不会再记录该线程的事件信息*/</span><span class="token comment">/*_history表中记录每个线程应该执行完成的事件信息，但每个线程的事件信息只会记录10条，再多就会被覆盖，*_history_long表中记录所有线程的事件信息，但总记录数量是10000，超过就会被覆盖掉*/</span><span class="token keyword">select</span> thread_id<span class="token punctuation">,</span>event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>timer_wait <span class="token keyword">from</span> events_waits_history <span class="token keyword">order</span> <span class="token keyword">by</span> thread_id <span class="token keyword">limit</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token comment">/*summary表提供所有事件的汇总信息，该组中的表以不同的方式汇总事件数据（如：按用户，按主机，按线程等等）。例如：要查看哪些instruments占用最多的时间，可以通过对events_waits_summary_global_by_event_name表的COUNT_STAR或SUM_TIMER_WAIT列进行查询（这两列是对事件的记录数执行COUNT（*）、事件记录的TIMER_WAIT列执行SUM（TIMER_WAIT）统计而来）*/</span><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">/*instance表记录了哪些类型的对象会被检测。这些对象在被server使用时，在该表中将会产生一条事件记录，例如，file_instances表列出了文件I/O操作及其关联文件名*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> file_instances <span class="token keyword">limit</span> <span class="token number">20</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、常用配置项的参数说明"><a href="#4、常用配置项的参数说明" class="headerlink" title="4、常用配置项的参数说明"></a>4、常用配置项的参数说明</h3><p>1、启动选项</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">performance_schema_consumer_events_statements_current<span class="token operator">=</span><span class="token boolean">TRUE</span>是否在mysql server启动时就开启events_statements_current表的记录功能<span class="token punctuation">(</span>该表记录当前的语句事件信息<span class="token punctuation">)</span>，启动之后也可以在setup_consumers表中使用<span class="token keyword">UPDATE</span>语句进行动态更新setup_consumers配置表中的events_statements_current配置项，默认值为<span class="token boolean">TRUE</span>performance_schema_consumer_events_statements_history<span class="token operator">=</span><span class="token boolean">TRUE</span>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件短历史信息，默认为<span class="token boolean">TRUE</span>performance_schema_consumer_events_stages_history_long<span class="token operator">=</span><span class="token boolean">FALSE</span>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件长历史信息，默认为<span class="token boolean">FALSE</span>除了statement<span class="token punctuation">(</span>语句<span class="token punctuation">)</span>事件之外，还支持：wait<span class="token punctuation">(</span>等待<span class="token punctuation">)</span>事件、state<span class="token punctuation">(</span>阶段<span class="token punctuation">)</span>事件、<span class="token keyword">transaction</span><span class="token punctuation">(</span>事务<span class="token punctuation">)</span>事件，他们与statement事件一样都有三个启动项分别进行配置，但这些等待事件默认未启用，如果需要在MySQL Server启动时一同启动，则通常需要写进my<span class="token punctuation">.</span>cnf配置文件中performance_schema_consumer_global_instrumentation<span class="token operator">=</span><span class="token boolean">TRUE</span>是否在MySQL Server启动时就开启全局表（如：mutex_instances、rwlock_instances、cond_instances、file_instances、users、hostsaccounts、socket_summary_by_event_name、file_summary_by_instance等大部分的全局对象计数统计和事件汇总统计信息表 ）的记录功能，启动之后也可以在setup_consumers表中使用<span class="token keyword">UPDATE</span>语句进行动态更新全局配置项默认值为<span class="token boolean">TRUE</span>performance_schema_consumer_statements_digest<span class="token operator">=</span><span class="token boolean">TRUE</span>是否在MySQL Server启动时就开启events_statements_summary_by_digest 表的记录功能，启动之后也可以在setup_consumers表中使用<span class="token keyword">UPDATE</span>语句进行动态更新digest配置项默认值为<span class="token boolean">TRUE</span>performance_schema_consumer_thread_instrumentation<span class="token operator">=</span><span class="token boolean">TRUE</span>是否在MySQL Server启动时就开启events_xxx_summary_by_yyy_by_event_name表的记录功能，启动之后也可以在setup_consumers表中使用<span class="token keyword">UPDATE</span>语句进行动态更新线程配置项默认值为<span class="token boolean">TRUE</span>performance_schema_instrument<span class="token punctuation">[</span><span class="token operator">=</span>name<span class="token punctuation">]</span>是否在MySQL Server启动时就启用某些采集器，由于instruments配置项多达数千个，所以该配置项支持<span class="token keyword">key</span><span class="token operator">-</span><span class="token keyword">value</span>模式，还支持<span class="token operator">%</span>号进行通配等，如下:<span class="token comment"># [=name]可以指定为具体的Instruments名称（但是这样如果有多个需要指定的时候，就需要使用该选项多次），也可以使用通配符，可以指定instruments相同的前缀+通配符，也可以使用%代表所有的instruments</span><span class="token comment">## 指定开启单个instruments</span><span class="token comment">--performance-schema-instrument= 'instrument_name=value'</span><span class="token comment">## 使用通配符指定开启多个instruments</span><span class="token comment">--performance-schema-instrument= 'wait/synch/cond/%=COUNTED'</span><span class="token comment">## 开关所有的instruments</span><span class="token comment">--performance-schema-instrument= '%=ON'</span><span class="token comment">--performance-schema-instrument= '%=OFF'</span>注意，这些启动选项要生效的前提是，需要设置performance_schema<span class="token operator">=</span><span class="token keyword">ON</span>。另外，这些启动选项虽然无法使用<span class="token keyword">show</span> variables语句查看，但我们可以通过setup_instruments和setup_consumers表查询这些选项指定的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、系统变量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%performance_schema%'</span><span class="token punctuation">;</span><span class="token comment">--重要的属性解释</span>performance_schema<span class="token operator">=</span><span class="token keyword">ON</span><span class="token comment">/*控制performance_schema功能的开关，要使用MySQL的performance_schema，需要在mysqld启动时启用，以启用事件收集功能该参数在5.7.x之前支持performance_schema的版本中默认关闭，5.7.x版本开始默认开启注意：如果mysqld在初始化performance_schema时发现无法分配任何相关的内部缓冲区，则performance_schema将自动禁用，并将performance_schema设置为OFF*/</span>performance_schema_digests_size<span class="token operator">=</span><span class="token number">10000</span><span class="token comment">/*控制events_statements_summary_by_digest表中的最大行数。如果产生的语句摘要信息超过此最大值，便无法继续存入该表，此时performance_schema会增加状态变量*/</span>performance_schema_events_statements_history_long_size<span class="token operator">=</span><span class="token number">10000</span><span class="token comment">/*控制events_statements_history_long表中的最大行数，该参数控制所有会话在events_statements_history_long表中能够存放的总事件记录数，超过这个限制之后，最早的记录将被覆盖全局变量，只读变量，整型值，5.6.3版本引入 * 5.6.x版本中，5.6.5及其之前的版本默认为10000，5.6.6及其之后的版本默认值为-1，通常情况下，自动计算的值都是10000 * 5.7.x版本中，默认值为-1，通常情况下，自动计算的值都是10000*/</span>performance_schema_events_statements_history_size<span class="token operator">=</span><span class="token number">10</span><span class="token comment">/*控制events_statements_history表中单个线程（会话）的最大行数，该参数控制单个会话在events_statements_history表中能够存放的事件记录数，超过这个限制之后，单个会话最早的记录将被覆盖全局变量，只读变量，整型值，5.6.3版本引入 * 5.6.x版本中，5.6.5及其之前的版本默认为10，5.6.6及其之后的版本默认值为-1，通常情况下，自动计算的值都是10 * 5.7.x版本中，默认值为-1，通常情况下，自动计算的值都是10除了statement(语句)事件之外，wait(等待)事件、state(阶段)事件、transaction(事务)事件，他们与statement事件一样都有三个参数分别进行存储限制配置，有兴趣的同学自行研究，这里不再赘述*/</span>performance_schema_max_digest_length<span class="token operator">=</span><span class="token number">1024</span><span class="token comment">/*用于控制标准化形式的SQL语句文本在存入performance_schema时的限制长度，该变量与max_digest_length变量相关(max_digest_length变量含义请自行查阅相关资料)全局变量，只读变量，默认值1024字节，整型值，取值范围0~1048576*/</span>performance_schema_max_sql_text_length<span class="token operator">=</span><span class="token number">1024</span><span class="token comment">/*控制存入events_statements_current，events_statements_history和events_statements_history_long语句事件表中的SQL_TEXT列的最大SQL长度字节数。 超出系统变量performance_schema_max_sql_text_length的部分将被丢弃，不会记录，一般情况下不需要调整该参数，除非被截断的部分与其他SQL比起来有很大差异全局变量，只读变量，整型值，默认值为1024字节，取值范围为0~1048576，5.7.6版本引入降低系统变量performance_schema_max_sql_text_length值可以减少内存使用，但如果汇总的SQL中，被截断部分有较大差异，会导致没有办法再对这些有较大差异的SQL进行区分。 增加该系统变量值会增加内存使用，但对于汇总SQL来讲可以更精准地区分不同的部分。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、重要配置表的相关说明"><a href="#5、重要配置表的相关说明" class="headerlink" title="5、重要配置表的相关说明"></a>5、重要配置表的相关说明</h3><p>​配置表之间存在相互关联关系，按照配置影响的先后顺序，可添加为</p><p><img src="C:\Users\63198\AppData\Roaming\Typora\typora-user-images\image-20191203125003597.png" alt="image-20191203125003597"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*performance_timers表中记录了server中有哪些可用的事件计时器字段解释：timer_name:表示可用计时器名称，CYCLE是基于CPU周期计数器的定时器timer_frequency:表示每秒钟对应的计时器单位的数量,CYCLE计时器的换算值与CPU的频率相关、timer_resolution:计时器精度值，表示在每个计时器被调用时额外增加的值timer_overhead:表示在使用定时器获取事件时开销的最小周期值*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> performance_timers<span class="token punctuation">;</span><span class="token comment">/*setup_timers表中记录当前使用的事件计时器信息字段解释：name:计时器类型，对应某个事件类别timer_name:计时器类型名称*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_timers<span class="token punctuation">;</span><span class="token comment">/*setup_consumers表中列出了consumers可配置列表项字段解释：NAME：consumers配置名称ENABLED：consumers是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_consumers<span class="token punctuation">;</span><span class="token comment">/*setup_instruments 表列出了instruments 列表配置项，即代表了哪些事件支持被收集：字段解释：NAME：instruments名称，instruments名称可能具有多个部分并形成层次结构ENABLED：instrumetns是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。如果设置为NO，则这个instruments不会被执行，不会产生任何的事件信息TIMED：instruments是否收集时间信息，有效值为YES或NO，此列可以使用UPDATE语句修改，如果设置为NO，则这个instruments不会收集时间信息*/</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_instruments<span class="token punctuation">;</span><span class="token comment">/*setup_actors表的初始内容是匹配任何用户和主机，因此对于所有前台线程，默认情况下启用监视和历史事件收集功能字段解释：HOST：与grant语句类似的主机名，一个具体的字符串名字，或使用“％”表示“任何主机”USER：一个具体的字符串名称，或使用“％”表示“任何用户”ROLE：当前未使用，MySQL 8.0中才启用角色功能ENABLED：是否启用与HOST，USER，ROLE匹配的前台线程的监控功能，有效值为：YES或NOHISTORY：是否启用与HOST， USER，ROLE匹配的前台线程的历史事件记录功能，有效值为：YES或NO*/</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_actors<span class="token punctuation">;</span><span class="token comment">/*setup_objects表控制performance_schema是否监视特定对象。默认情况下，此表的最大行数为100行。字段解释：OBJECT_TYPE：instruments类型，有效值为：“EVENT”（事件调度器事件）、“FUNCTION”（存储函数）、“PROCEDURE”（存储过程）、“TABLE”（基表）、“TRIGGER”（触发器），TABLE对象类型的配置会影响表I/O事件（wait/io/table/sql/handler instrument）和表锁事件（wait/lock/table/sql/handler instrument）的收集OBJECT_SCHEMA：某个监视类型对象涵盖的数据库名称，一个字符串名称，或“％”(表示“任何数据库”)OBJECT_NAME：某个监视类型对象涵盖的表名，一个字符串名称，或“％”(表示“任何数据库内的对象”)ENABLED：是否开启对某个类型对象的监视功能，有效值为：YES或NO。此列可以修改TIMED：是否开启对某个类型对象的时间收集功能，有效值为：YES或NO，此列可以修改*/</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_objects<span class="token punctuation">;</span><span class="token comment">/*threads表对于每个server线程生成一行包含线程相关的信息，字段解释：THREAD_ID：线程的唯一标识符（ID）NAME：与server中的线程检测代码相关联的名称(注意，这里不是instruments名称)TYPE：线程类型，有效值为：FOREGROUND、BACKGROUND。分别表示前台线程和后台线程PROCESSLIST_ID：对应INFORMATION_SCHEMA.PROCESSLIST表中的ID列。PROCESSLIST_USER：与前台线程相关联的用户名，对于后台线程为NULL。PROCESSLIST_HOST：与前台线程关联的客户端的主机名，对于后台线程为NULL。PROCESSLIST_DB：线程的默认数据库，如果没有，则为NULL。PROCESSLIST_COMMAND：对于前台线程，该值代表着当前客户端正在执行的command类型，如果是sleep则表示当前会话处于空闲状态PROCESSLIST_TIME：当前线程已处于当前线程状态的持续时间（秒）PROCESSLIST_STATE：表示线程正在做什么事情。PROCESSLIST_INFO：线程正在执行的语句，如果没有执行任何语句，则为NULL。PARENT_THREAD_ID：如果这个线程是一个子线程（由另一个线程生成），那么该字段显示其父线程IDROLE：暂未使用INSTRUMENTED：线程执行的事件是否被检测。有效值：YES、NO HISTORY：是否记录线程的历史事件。有效值：YES、NO * THREAD_OS_ID：由操作系统层定义的线程或任务标识符（ID）：*/</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> threads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在performance_schema库中还包含了很多其他的库和表，能对数据库的性能做完整的监控，大家需要参考官网详细了解。</p><h3 id="6、performance-schema实践操作"><a href="#6、performance-schema实践操作" class="headerlink" title="6、performance_schema实践操作"></a>6、performance_schema实践操作</h3><p>​基本了解了表的相关信息之后，可以通过这些表进行实际的查询操作来进行实际的分析。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--1、哪类的SQL执行最多？</span><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>FIRST_SEEN<span class="token punctuation">,</span>LAST_SEEN <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span class="token comment">--2、哪类SQL的平均响应时间最多？</span><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span class="token comment">--3、哪类SQL排序记录数最多？</span><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_SORT_ROWS <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span class="token comment">--4、哪类SQL扫描记录数最多？</span><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_EXAMINED <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span class="token comment">--5、哪类SQL使用临时表最多？</span><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_CREATED_TMP_TABLES<span class="token punctuation">,</span>SUM_CREATED_TMP_DISK_TABLES <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span class="token comment">--6、哪类SQL返回结果集最多？</span><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_SENT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span class="token comment">--7、哪个表物理IO最多？</span><span class="token keyword">SELECT</span> file_name<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_READ<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">FROM</span> file_summary_by_instance <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_NUMBER_OF_BYTES_READ <span class="token operator">+</span> SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">DESC</span><span class="token comment">--8、哪个表逻辑IO最多？</span><span class="token keyword">SELECT</span> object_name<span class="token punctuation">,</span>COUNT_READ<span class="token punctuation">,</span>COUNT_WRITE<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>SUM_TIMER_WAIT <span class="token keyword">FROM</span> table_io_waits_summary_by_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sum_timer_wait <span class="token keyword">DESC</span><span class="token comment">--9、哪个索引访问最多？</span><span class="token keyword">SELECT</span> OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>COUNT_INSERT<span class="token punctuation">,</span>COUNT_UPDATE<span class="token punctuation">,</span>COUNT_DELETE <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span class="token comment">--10、哪个索引从来没有用过？</span><span class="token keyword">SELECT</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">WHERE</span> INDEX_NAME <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> COUNT_STAR <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> OBJECT_SCHEMA <span class="token operator">&lt;></span> <span class="token string">'mysql'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">;</span><span class="token comment">--11、哪个等待事件消耗时间最多？</span><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>SUM_TIMER_WAIT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name <span class="token keyword">WHERE</span> event_name <span class="token operator">!=</span> <span class="token string">'idle'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span class="token comment">--12-1、剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息</span><span class="token keyword">SELECT</span> EVENT_ID<span class="token punctuation">,</span>sql_text <span class="token keyword">FROM</span> events_statements_history <span class="token keyword">WHERE</span> sql_text <span class="token operator">LIKE</span> <span class="token string">'%count(*)%'</span><span class="token punctuation">;</span><span class="token comment">--12-2、查看每个阶段的时间消耗</span><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>EVENT_NAME<span class="token punctuation">,</span>SOURCE<span class="token punctuation">,</span>TIMER_END <span class="token operator">-</span> TIMER_START <span class="token keyword">FROM</span> events_stages_history_long <span class="token keyword">WHERE</span> NESTING_EVENT_ID <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span class="token comment">--12-3、查看每个阶段的锁等待情况</span><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>source<span class="token punctuation">,</span>timer_wait<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>nesting_event_id <span class="token keyword">FROM</span> events_waits_history_longWHERE nesting_event_id <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MYSQL-performance-schema详解&quot;&gt;&lt;a href=&quot;#MYSQL-performance-schema详解&quot; class=&quot;headerlink&quot; title=&quot;MYSQL performance schema详解&quot;&gt;&lt;/a&gt;MYSQL pe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/MYSQL5.7%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/MYSQL5.7%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-12-18T12:19:26.050Z</published>
    <updated>2022-12-18T12:19:26.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL5-7详细安装步骤："><a href="#MYSQL5-7详细安装步骤：" class="headerlink" title="MYSQL5.7详细安装步骤："></a>MYSQL5.7详细安装步骤：</h1><h3 id="0、更换yum源"><a href="#0、更换yum源" class="headerlink" title="0、更换yum源"></a>0、更换yum源</h3><p>1、打开 mirrors.aliyun.com，选择centos的系统，点击帮助</p><p>2、执行命令：yum install wget -y</p><p>3、改变某些文件的名称</p><pre class="line-numbers language-none"><code class="language-none">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、执行更换yum源的命令</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-6.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、更新本地缓存</p><p>yum clean all</p><p>yum makecache</p><h3 id="1、查看系统中是否自带安装mysql"><a href="#1、查看系统中是否自带安装mysql" class="headerlink" title="1、查看系统中是否自带安装mysql"></a>1、查看系统中是否自带安装mysql</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list installed <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570541665646.png" alt="1570541665646"></p><h3 id="2、删除系统自带的mysql及其依赖（防止冲突）"><a href="#2、删除系统自带的mysql及其依赖（防止冲突）" class="headerlink" title="2、删除系统自带的mysql及其依赖（防止冲突）"></a>2、删除系统自带的mysql及其依赖（防止冲突）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> remove mysql-libs.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570541838485.png" alt="1570541838485"></p><h3 id="3、安装wget命令"><a href="#3、安装wget命令" class="headerlink" title="3、安装wget命令"></a>3、安装wget命令</h3><pre class="line-numbers language-none"><code class="language-none">yum install wget -y <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570541946471.png" alt="1570541946471"></p><h3 id="4、给CentOS添加rpm源，并且选择较新的源"><a href="#4、给CentOS添加rpm源，并且选择较新的源" class="headerlink" title="4、给CentOS添加rpm源，并且选择较新的源"></a>4、给CentOS添加rpm源，并且选择较新的源</h3><pre class="line-numbers language-none"><code class="language-none">wget dev.mysql.com&#x2F;get&#x2F;mysql-community-release-el6-5.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570542045332.png" alt="1570542045332"></p><h3 id="5、安装下载好的rpm文件"><a href="#5、安装下载好的rpm文件" class="headerlink" title="5、安装下载好的rpm文件"></a>5、安装下载好的rpm文件</h3><pre class="line-numbers language-none"><code class="language-none">yum install mysql-community-release-el6-5.noarch.rpm -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570542254949.png" alt="1570542254949"></p><h3 id="6、安装成功之后，会在-x2F-etc-x2F-yum-repos-d-x2F-文件夹下增加两个文件"><a href="#6、安装成功之后，会在-x2F-etc-x2F-yum-repos-d-x2F-文件夹下增加两个文件" class="headerlink" title="6、安装成功之后，会在&#x2F;etc&#x2F;yum.repos.d&#x2F;文件夹下增加两个文件"></a>6、安装成功之后，会在&#x2F;etc&#x2F;yum.repos.d&#x2F;文件夹下增加两个文件</h3><p><img src="E:\lian\oracle\typora-user-images\1570542341604.png" alt="1570542341604"></p><h3 id="7、修改mysql-community-repo文件"><a href="#7、修改mysql-community-repo文件" class="headerlink" title="7、修改mysql-community.repo文件"></a>7、修改mysql-community.repo文件</h3><p>原文件：</p><p><img src="E:\lian\oracle\typora-user-images\1570542415955.png" alt="1570542415955"></p><p>修改之后：</p><p><img src="E:\lian\oracle\typora-user-images\1570542471948.png" alt="1570542471948"></p><h3 id="8、使用yum安装mysql"><a href="#8、使用yum安装mysql" class="headerlink" title="8、使用yum安装mysql"></a>8、使用yum安装mysql</h3><pre class="line-numbers language-none"><code class="language-none">yum install mysql-community-server -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570542688796.png" alt="1570542688796"></p><h3 id="9、启动mysql服务并设置开机启动"><a href="#9、启动mysql服务并设置开机启动" class="headerlink" title="9、启动mysql服务并设置开机启动"></a>9、启动mysql服务并设置开机启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动之前需要生成临时密码，需要用到证书，可能证书过期，需要进行更新操作</span>yum update <span class="token parameter variable">-y</span><span class="token comment">#启动mysql服务</span><span class="token function">service</span> mysqld start<span class="token comment">#设置mysql开机启动</span><span class="token function">chkconfig</span> mysqld on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、获取mysql的临时密码"><a href="#10、获取mysql的临时密码" class="headerlink" title="10、获取mysql的临时密码"></a>10、获取mysql的临时密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">"password"</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570604493708.png" alt="1570604493708"></p><h3 id="11、使用临时密码登录"><a href="#11、使用临时密码登录" class="headerlink" title="11、使用临时密码登录"></a>11、使用临时密码登录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span class="token comment">#输入密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12、修改密码"><a href="#12、修改密码" class="headerlink" title="12、修改密码"></a>12、修改密码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13、修改远程访问权限"><a href="#13、修改远程访问权限" class="headerlink" title="13、修改远程访问权限"></a>13、修改远程访问权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="14、设置字符集为utf-8"><a href="#14、设置字符集为utf-8" class="headerlink" title="14、设置字符集为utf-8"></a>14、设置字符集为utf-8</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在[mysqld]部分添加：</span>character-set-server<span class="token operator">=</span>utf8<span class="token comment">#在文件末尾新增[client]段，并在[client]段添加：</span>default-character-set<span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MYSQL5-7详细安装步骤：&quot;&gt;&lt;a href=&quot;#MYSQL5-7详细安装步骤：&quot; class=&quot;headerlink&quot; title=&quot;MYSQL5.7详细安装步骤：&quot;&gt;&lt;/a&gt;MYSQL5.7详细安装步骤：&lt;/h1&gt;&lt;h3 id=&quot;0、更换yum源&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/</id>
    <published>2022-12-18T12:19:26.050Z</published>
    <updated>2022-12-18T12:19:26.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql主从复制原理"><a href="#mysql主从复制原理" class="headerlink" title="mysql主从复制原理"></a>mysql主从复制原理</h1><h3 id="0、为什么需要主从复制？"><a href="#0、为什么需要主从复制？" class="headerlink" title="0、为什么需要主从复制？"></a>0、为什么需要主从复制？</h3><p>1、在业务复杂的系统中，有这么一个情景，有一句sql语句需要锁表，导致暂时不能使用读的服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，这样，即使主库出现了锁表的情景，通过读从库也可以保证业务的正常运作。</p><p>2、做数据的热备</p><p>3、架构的扩展。业务量越来越大，I&#x2F;O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I&#x2F;O访问的频率，提高单个机器的I&#x2F;O性能。</p><h3 id="1、什么是mysql的主从复制？"><a href="#1、什么是mysql的主从复制？" class="headerlink" title="1、什么是mysql的主从复制？"></a>1、什么是mysql的主从复制？</h3><p>​MySQL 主从复制是指数据可以从一个MySQL数据库服务器主节点复制到一个或多个从节点。MySQL 默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据库中的所有数据库或者特定的数据库，或者特定的表。</p><h3 id="2、mysql复制原理"><a href="#2、mysql复制原理" class="headerlink" title="2、mysql复制原理"></a>2、mysql复制原理</h3><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>​（1）master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中；</p><p>​（2）slave服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I&#x2F;OThread请求master二进制事件</p><p>​（3）同时主节点为每个I&#x2F;O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I&#x2F;OThread和SQLThread将进入睡眠状态，等待下一次被唤醒。</p><h5 id="也就是说："><a href="#也就是说：" class="headerlink" title="也就是说："></a>也就是说：</h5><ul><li>从库会生成两个线程,一个I&#x2F;O线程,一个SQL线程;</li><li>I&#x2F;O线程会去请求主库的binlog,并将得到的binlog写到本地的relay-log(中继日志)文件中;</li><li>主库会生成一个log dump线程,用来给从库I&#x2F;O线程传binlog;</li><li>SQL线程,会读取relay log文件中的日志,并解析成sql语句逐一执行;</li></ul><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>1–master将操作语句记录到binlog日志中，然后授予slave远程连接的权限（master一定要开启binlog二进制日志功能；通常为了数据安全考虑，slave也开启binlog功能）。<br>2–slave开启两个线程：IO线程和SQL线程。其中：IO线程负责读取master的binlog内容到中继日志relay log里；SQL线程负责从relay log日志里读出binlog内容，并更新到slave的数据库里，这样就能保证slave数据和master数据保持一致了。<br>3–Mysql复制至少需要两个Mysql的服务，当然Mysql服务可以分布在不同的服务器上，也可以在一台服务器上启动多个服务。<br>4–Mysql复制最好确保master和slave服务器上的Mysql版本相同（如果不能满足版本一致，那么要保证master主节点的版本低于slave从节点的版本）<br>5–master和slave两节点间时间需同步</p><p><img src="e:\lian\oracle\mysql\主从原理.png"></p><h5 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h5><p>1、从库通过手工执行change  master to 语句连接主库，提供了连接的用户一切条件（user 、password、port、ip），并且让从库知道，二进制日志的起点位置（file名 position 号）；    start  slave</p><p>2、从库的IO线程和主库的dump线程建立连接。</p><p>3、从库根据change  master  to 语句提供的file名和position号，IO线程向主库发起binlog的请求。</p><p>4、主库dump线程根据从库的请求，将本地binlog以events的方式发给从库IO线程。</p><p>5、从库IO线程接收binlog  events，并存放到本地relay-log中，传送过来的信息，会记录到master.info中</p><p>6、从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info中，默认情况下，已经应用过的relay 会自动被清理purge</p><h3 id="3、mysql主从形式"><a href="#3、mysql主从形式" class="headerlink" title="3、mysql主从形式"></a>3、mysql主从形式</h3><h5 id="（一）一主一从"><a href="#（一）一主一从" class="headerlink" title="（一）一主一从"></a>（一）一主一从</h5><p><img src="e:\lian\oracle\typora-user-images\1570714549624.png" alt="1570714549624"></p><h5 id="（二）主主复制"><a href="#（二）主主复制" class="headerlink" title="（二）主主复制"></a>（二）主主复制</h5><p><img src="e:\lian\oracle\typora-user-images\1570714565647.png" alt="1570714565647"></p><h5 id="（三）一主多从"><a href="#（三）一主多从" class="headerlink" title="（三）一主多从"></a>（三）一主多从</h5><p><img src="e:\lian\oracle\typora-user-images\1570714576819.png" alt="1570714576819"></p><h5 id="（四）多主一从"><a href="#（四）多主一从" class="headerlink" title="（四）多主一从"></a>（四）多主一从</h5><p><img src="e:\lian\oracle\typora-user-images\1570714615915.png" alt="1570714615915"></p><h5 id="（五）联级复制"><a href="#（五）联级复制" class="headerlink" title="（五）联级复制"></a>（五）联级复制</h5><p><img src="e:\lian\oracle\typora-user-images\1570714660961.png" alt="1570714660961"></p><h3 id="4、mysql主从同步延时分析"><a href="#4、mysql主从同步延时分析" class="headerlink" title="4、mysql主从同步延时分析"></a>4、mysql主从同步延时分析</h3><p>​mysql的主从复制都是单线程的操作，主库对所有DDL和DML产生的日志写进binlog，由于binlog是顺序写，所以效率很高，slave的sql thread线程将主库的DDL和DML操作事件在slave中重放。DML和DDL的IO操作是随机的，不是顺序，所以成本要高很多，另一方面，由于sql thread也是单线程的，当主库的并发较高时，产生的DML数量超过slave的SQL thread所能处理的速度，或者当slave中有大型query语句产生了锁等待，那么延时就产生了。</p><p>​解决方案：</p><p>​1.业务的持久化层的实现采用分库架构，mysql服务可平行扩展，分散压力。</p><p>​2.单个库读写分离，一主多从，主写从读，分散压力。这样从库压力比主库高，保护主库。</p><p>​3.服务的基础架构在业务和mysql之间加入memcache或者redis的cache层。降低mysql的读压力。</p><p>​4.不同业务的mysql物理上放在不同机器，分散压力。</p><p>​5.使用比主库更好的硬件设备作为slave，mysql压力小，延迟自然会变小。</p><p>​6.使用更加强劲的硬件设备</p><p><strong>mysql5.7之后使用MTS并行复制技术，永久解决复制延时问题——自学</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql主从复制原理&quot;&gt;&lt;a href=&quot;#mysql主从复制原理&quot; class=&quot;headerlink&quot; title=&quot;mysql主从复制原理&quot;&gt;&lt;/a&gt;mysql主从复制原理&lt;/h1&gt;&lt;h3 id=&quot;0、为什么需要主从复制？&quot;&gt;&lt;a href=&quot;#0、为什么</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/Linux%E4%B8%8Bmysql5.7%E7%9A%84%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BD/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E5%AE%9E%E6%88%98%E8%B0%83%E4%BC%98%E8%B5%84%E6%96%99%EF%BC%88%E6%80%BB%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%89/Linux%E4%B8%8Bmysql5.7%E7%9A%84%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BD/</id>
    <published>2022-12-18T12:19:26.049Z</published>
    <updated>2022-12-18T12:19:26.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下mysql的彻底卸载"><a href="#Linux下mysql的彻底卸载" class="headerlink" title="Linux下mysql的彻底卸载"></a>Linux下mysql的彻底卸载</h1><h3 id="1、查看mysql的安装情况"><a href="#1、查看mysql的安装情况" class="headerlink" title="1、查看mysql的安装情况"></a>1、查看mysql的安装情况</h3><pre class="line-numbers language-none"><code class="language-none">rpm -qa | grep -i mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570605325400.png" alt="1570605325400"></p><h3 id="2、删除上图安装的软件"><a href="#2、删除上图安装的软件" class="headerlink" title="2、删除上图安装的软件"></a>2、删除上图安装的软件</h3><pre class="line-numbers language-none"><code class="language-none">rpm -ev mysql-community-libs-5.7.27-1.el6.x86_64 --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、都删除成功之后，查找相关的mysql的文件"><a href="#3、都删除成功之后，查找相关的mysql的文件" class="headerlink" title="3、都删除成功之后，查找相关的mysql的文件"></a>3、都删除成功之后，查找相关的mysql的文件</h3><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="E:\lian\oracle\typora-user-images\1570605553095.png" alt="1570605553095"></p><h3 id="4、删除全部文件"><a href="#4、删除全部文件" class="headerlink" title="4、删除全部文件"></a>4、删除全部文件</h3><pre class="line-numbers language-none"><code class="language-none">rm -rf &#x2F;var&#x2F;lib&#x2F;mysqlrm -rf &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysqlrm -rf &#x2F;etc&#x2F;logrotate.d&#x2F;mysqlrm -rf &#x2F;usr&#x2F;share&#x2F;mysqlrm -rf &#x2F;usr&#x2F;bin&#x2F;mysqlrm -rf &#x2F;usr&#x2F;lib64&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、再次执行命令"><a href="#5、再次执行命令" class="headerlink" title="5、再次执行命令"></a>5、再次执行命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> mysql<span class="token comment">#如果没有显式则表示卸载完成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux下mysql的彻底卸载&quot;&gt;&lt;a href=&quot;#Linux下mysql的彻底卸载&quot; class=&quot;headerlink&quot; title=&quot;Linux下mysql的彻底卸载&quot;&gt;&lt;/a&gt;Linux下mysql的彻底卸载&lt;/h1&gt;&lt;h3 id=&quot;1、查看mysql</summary>
      
    
    
    
    
  </entry>
  
</feed>
