<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张三碎碎念</title>
  
  
  <link href="https://zspcer.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://zspcer.gitee.io/"/>
  <updated>2023-02-17T15:10:04.677Z</updated>
  <id>https://zspcer.gitee.io/</id>
  
  <author>
    <name>zs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo+butterfly更新mermaid版本</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/hexo/hexo+butterfly%E6%9B%B4%E6%96%B0mermaid%E7%89%88%E6%9C%AC/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/hexo/hexo+butterfly%E6%9B%B4%E6%96%B0mermaid%E7%89%88%E6%9C%AC/</id>
    <published>2023-02-17T15:10:04.677Z</published>
    <updated>2023-02-17T15:10:04.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-butterfly更新mermaid版本"><a href="#hexo-butterfly更新mermaid版本" class="headerlink" title="hexo+butterfly更新mermaid版本"></a>hexo+butterfly更新mermaid版本</h1><p>怎么使用的mermaid，可以参考butterfly的官网：<a href="https://butterfly.js.org/posts/4aa8abbe/#mermaid">https://butterfly.js.org/posts/4aa8abbe/#mermaid</a></p><p>最近在本地重新编辑一篇文章之后，部署起来，发现有一个<code>mermaid</code>图表不支持了。</p><p>原因是因为：我的 <code>hexo</code> 引用的 <code>butterfly</code> 主题默认使用的 <code>mermaid</code> 版本是 <code>8.13.8</code></p><p>而我本地是使用 <code>typora</code> 编辑的，<code>typora</code> 版本是 <code>1.5.8</code>，引用的 mermaid 版本是 <code>9.2.0</code></p><p>所以我是用了 新版本的特性之后，在低版本中就无法渲染了。</p><p><strong>解决办法</strong></p><p>更新 hexo+butterfly 的 mermaid 版本</p><p>mermaid 版本是主题引入的，其实就是主题引入了一个js</p><p>我们找到这个 js ，给它升级了就完事了</p><p>找到主题目录</p><blockquote><p>…&#x2F;你的主题目录&#x2F;hexo-theme-butterfly&#x2F;layout&#x2F;includes&#x2F;footer.pug</p></blockquote><img src="hexo+butterfly更新mermaid版本.assets/image-20230217230355932.png" alt="image-20230217230355932" style="zoom:50%;" /><p>打开<code>footer.pug</code>文件，将引入的低版本mermaid直接升级就可以了</p><img src="hexo+butterfly更新mermaid版本.assets/image-20230217230516681.png" alt="image-20230217230516681" style="zoom: 33%;" /><p>然后重新部署一遍就可以了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-butterfly更新mermaid版本&quot;&gt;&lt;a href=&quot;#hexo-butterfly更新mermaid版本&quot; class=&quot;headerlink&quot; title=&quot;hexo+butterfly更新mermaid版本&quot;&gt;&lt;/a&gt;hexo+butter</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/categories/TOOLS/hexo/"/>
    
    
    <category term="hexo" scheme="https://zspcer.gitee.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://zspcer.gitee.io/tags/butterfly/"/>
    
    <category term="mermaid" scheme="https://zspcer.gitee.io/tags/mermaid/"/>
    
  </entry>
  
  <entry>
    <title>kafka从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/KAFKA/kafka%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/KAFKA/kafka%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-02-17T15:10:04.668Z</published>
    <updated>2023-02-17T15:10:04.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka从入门到入土"><a href="#kafka从入门到入土" class="headerlink" title="kafka从入门到入土"></a>kafka从入门到入土</h1><hr><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="名词术语"><a href="#名词术语" class="headerlink" title="名词术语"></a>名词术语</h3><p>消息：<code>Record</code>。Kafka 是消息引擎嘛，这里的消息就是指 Kafka 处理的主要对象。</p><p>主题：<code>Topic</code>。Topic 是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。</p><p>分区：<code>Partition</code>。是一个物理概念，可以理解为一个有序不变的消息序列。每个 Topic 下可以有多个 Partition。</p><p>分区位移：<code>Offset</code>。表示 Partition 中每条消息的位置信息，这个值是存在消息中的，是一个单调递增且不变的值。</p><p>副本：<code>Replica</code>。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的<code>Replica</code>副本。<code>Replica</code>还分为<code>Leader Replica</code>和<code>Follower Replica</code>，各自有不同的角色划分。<code>Replica</code>是在<code>Partition</code>层级下的，即每个<code>Partition</code>可配置多个<code>Replica</code>实现高可用。</p><p>生产者：<code>Producer</code>。向<code>Topic</code>发布新消息的应用程序。</p><p>消费者：<code>Consumer</code>。从<code>Topic</code>订阅新消息的应用程序。</p><p>消费者位移：<code>Consumer Offset</code>。表示<code>Consumer</code>的消费进度，每个<code>Consumer</code>都有自己的<code>Consumer Offset</code>。</p><p>消费者组：<code>Consumer Group</code>。多个<code>Consumer</code>实例共同组成的一个组<code>Group</code>，同时消费多个<code>Partition</code>以实现高吞吐。</p><p>重平衡：<code>Rebalance</code>。<code>Consumer Group</code>内某个<code>Consumer</code>实例挂掉后，其他<code>Consumer</code>实例自动重新分配订阅<code>Topic Partiton</code>的过程。<code>Rebalance</code> 是 Kafka 消费端实现高可用的重要手段。</p><img src="kafka从入门到入土.assets/58c35d3ab0921bf0476e3ba14069d291.jpg" alt="img" style="zoom: 20%;" /><h3 id="三层消息架构"><a href="#三层消息架构" class="headerlink" title="三层消息架构"></a>三层消息架构</h3><ul><li>第一层：主题层<code>Topic</code><ul><li>每个<code>Topic</code>可以配置<code>M</code>的<code>Partition</code>，而每个<code>Partition</code>又可以配置<code>N</code>个<code>Replica</code></li></ul></li><li>第二层：分区层<code>Partition</code><ul><li>每个<code>Partition</code>下的<code>N</code>个<code>Replica</code>中，只能有一个充当<code>Leader Replica</code>，<code>Leader Replica</code>负责对外提供服务；</li><li>剩下的<code>N-1</code>个<code>Replica</code>，都是作为<code>Follower Replica</code>，<code>Follower Replica</code>只是作为数据冗余，不对外提供服务；</li></ul></li><li>第三层：消息层<ul><li>每个<code>Partition</code>中包含若干消息，每个消息的<code>Offset</code>（注意不是<code>Consumer Offset</code>）都是从0开始，依次递增；</li></ul></li></ul><h3 id="数据持久化（Log）"><a href="#数据持久化（Log）" class="headerlink" title="数据持久化（Log）"></a>数据持久化（Log）</h3><p><code>kafka</code>使用消息日志<code>Log</code>来保存数据，一个<code>Log</code>就是磁盘上一个只能追加写消息的物理文件。</p><p>一个<code>Log</code>包含了多个日志段<code>Log Segment</code>，消息其实是被追加写到最新的<code>Log Segment</code>中的；</p><p>当写满一个<code>Log Segment</code>的时候，会自动切分一个新的<code>Log Segment</code>中，老的<code>Log Segment</code>就会被封存；</p><p><code>kafka</code>会有一个定时任务，定期检查老的<code>Log Segment</code>是否能够被删除，从而释放磁盘空间；</p><h3 id="两种消息模型"><a href="#两种消息模型" class="headerlink" title="两种消息模型"></a>两种消息模型</h3><p>点对点<code>peer to peer</code></p><ul><li>同一个消息只能被下游的一个<code>Consumer</code>消费；</li><li>kafka实现点对点，用到的是<code>Consumer Group</code>的概念</li></ul><p>发布订阅模型<code>pub/sub</code></p><ul><li>我们常用到的其实就是这种发布订阅模型</li></ul><h2 id="发展历史和定位"><a href="#发展历史和定位" class="headerlink" title="发展历史和定位"></a>发展历史和定位</h2><p>kakka既是一个消息引擎系统，同时又是一个分布式流处理平台；</p><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><ul><li><p>是<code>Linkedln</code>公司内部的孵化项目。</p></li><li><p><code>Linkedln</code>一开始是有 数据强实时性处理方面的需求，用了<code>activeMq</code>，但不理想，所以准备自己搞一套。</p></li><li><p><code>Kafka</code> 自诞生伊始是以<strong>消息引擎系统</strong>的面目出现在大众视野中的。如果翻看 <code>0.10.0.0</code> 之前的官网说明，你会发现 <code>Kafka</code> 社区将其清晰地定位为一个分布式、分区化且带备份功能的提交日志<code>Commit Log</code>服务。</p></li><li><p><code>Kafka</code>在设计之初提供三个方面的特性：</p><ul><li>提供一套 API 实现<code>Producer</code>和<code>Consumer</code>；</li><li>降低网络传输和磁盘存储开销；</li><li>实现高伸缩性架构。</li></ul></li><li><p>后来用的人越来越多，<code>kafka</code>思考引入了流处理；</p></li><li><p><code>Kafka</code> 社区于 <code>0.10.0.0</code> 版本正式推出了流处理组件 <code>Kafka Streams</code>，也正是从这个版本开始，<code>Kafka</code> 正式“变身”为分布式的流处理平台，而不仅仅是消息引擎系统了。</p></li></ul><h3 id="与其他的流处理框架的优点"><a href="#与其他的流处理框架的优点" class="headerlink" title="与其他的流处理框架的优点"></a>与其他的流处理框架的优点</h3><ul><li>第一点是更容易实现端到端的正确性<code>Correctness</code></li><li><code>kafka</code>自己对于流式计算的定位</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul><li>消息引擎系统</li><li>流处理平台</li><li>分布式存储系统（很少）</li></ul><h2 id="kafka版本"><a href="#kafka版本" class="headerlink" title="kafka版本"></a>kafka版本</h2><h3 id="发行版本"><a href="#发行版本" class="headerlink" title="发行版本"></a>发行版本</h3><p><code>kafka</code>存在多个不同的发行版本，类似<code>linux</code>系统中的<code>centos</code>，<code>redhat</code>，<code>ununtu</code>等；</p><table><thead><tr><th>类型</th><th>描述</th><th>优点</th><th>缺点</th><th>选择</th></tr></thead><tbody><tr><td>apache kafka</td><td>Apache Kafka 是最“正宗”的 Kafka，是我们学习和使用 Kafka 的基础。</td><td>优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度</td><td>缺陷在于仅提供基础核心组件，缺失一些高级的特性。</td><td>如果你仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，那么我推荐你使用 Apache Kafka。</td></tr><tr><td>Confluent Kafka</td><td>Confluent 公司：2014 年，Kafka 的 3 个创始人 Jay Kreps、Naha Narkhede 和饶军离开 LinkedIn 创办了 Confluent 公司，专注于提供基于 Kafka 的企业级流处理解决方案。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。</td><td>优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；</td><td>缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。</td><td>如果你需要用到 Kafka 的一些高级特性，那么推荐你使用 Confluent Kafka。</td></tr><tr><td>CDH Kafka &#x2F; HDP Kafka</td><td>Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理，不管是 CDH 还是 HDP 里面都集成了 Apache Kafka，因此我把这两款产品中的 Kafka 称为 CDH Kafka 和 HDP Kafka。</td><td>操作简单，节省运维成本</td><td>把控度低，演进速度较慢。</td><td>如果你需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。</td></tr></tbody></table><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>在官网上下载 <code>Kafka</code> 时，会看到这样的版本：</p><img src="kafka从入门到入土.assets/c10df9e6f72126e9c721fba38e27ac23.png" alt="img" style="zoom:80%;" /><p>有些人会误将<code>Scala</code>版本看作是<code>Kafka</code>版本，那么就来解释一下这个版本号</p><ul><li><p><code>2.11/2.12</code>：代表着<code>Kafka</code>源代码的<code>Scala</code>编译器版本</p></li><li><p><code>2.3.0</code>：才是Kafka的版本号，<code>2</code>代表着大版本号；<code>3</code>代表着小版本号；<code>0</code>代表着修订版本号或补丁</p></li></ul><p>Kafka目前经历了7个大版本，0.7、0.8、0.9、0.10、0.11、1.0和2.0，其中小版本与Patch版本很多就不一一列举</p><p>在上面的7个大版本中，在哪个版本进行了重大的改进，来好好看一下</p><img src="kafka从入门到入土.assets/Kafka版本变迁.png" alt="img" style="zoom:80%;" /><h4 id="0-7版本"><a href="#0-7版本" class="headerlink" title="0.7版本"></a>0.7版本</h4><p>这是个“上古”版本，只提供了基础的消息队列功能，还没有提供副本机制</p><h4 id="0-8版本"><a href="#0-8版本" class="headerlink" title="0.8版本"></a>0.8版本</h4><p>正式引入了副本机制，能够比较好地做到消息无丢失，新版本Producer API不稳定</p><h4 id="0-9版本"><a href="#0-9版本" class="headerlink" title="0.9版本"></a>0.9版本</h4><p>添加了基础的安全认证&#x2F;权限；新版本Producer API在这个版本中算比较稳定，但是0.9版的Consumer API BUG超多，即使提到社区也不会有人管，所以千万别用！</p><h4 id="0-10版本"><a href="#0-10版本" class="headerlink" title="0.10版本"></a>0.10版本</h4><p>是里程碑式的大版本，因为该版本引入了Kafka Streams，但还不能生产大规模部署使用，自0.10.2.2版本起，新版本Consumer API算是比较稳定了</p><h4 id="0-11版本"><a href="#0-11版本" class="headerlink" title="0.11版本"></a>0.11版本</h4><p>引入了两个重量级的功能变更：一个是提供幂等性Producer API以及事务（Transaction） API；另一个是对Kafka消息格式做了重构</p><p>Producer实现幂等性以及支持事务都是Kafka实现流处理结果正确性的基石，由于刚推出，事务API有一些Bug，另外事务API主要是为Kafka Streams应用服务的，不建议用</p><p>这个版本中各个大功能组件都变得非常稳定了，国内该版本的用户也很多，应该算是目前最主流的版本之一了</p><p>如果你对1.0版本是否适用于线上环境依然感到困惑，那么至少将你的环境升级到0.11.0.3，因为这个版本的消息引擎功能已经非常完善了</p><h4 id="1-0-x2F-2-0版本"><a href="#1-0-x2F-2-0版本" class="headerlink" title="1.0&#x2F;2.0版本"></a>1.0&#x2F;2.0版本</h4><p>合并说下1.0和2.0版本吧，因为这两个大版本主要还是Kafka Streams的各种改进，在消息引擎方面并未引入太多的重大功能特性</p><p>Kafka Streams的确在这两个版本有着非常大的变化，也必须承认Kafka Streams目前依然还在积极地发展着，如果你是Kafka Streams的用户，至少选择2.0.0版本吧</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>不论你用的是哪个版本，都请尽量保持服务器端版本和客户端版本一致，否则你将损失很多Kafka为你提供的性能优化收益</p><h2 id="kafka生产集群部署"><a href="#kafka生产集群部署" class="headerlink" title="kafka生产集群部署"></a>kafka生产集群部署</h2><p>上面了解了kafka的基本概念之后，下面看一下kafka的生产部署，需要怎么部署</p><p>同时在本小节之后，我们会搭建一个简单的kafka集群，用于后续的学习</p><p>kafka的集群搭建需要考虑一下几个因素</p><table><thead><tr><th>因素</th><th>考量点</th><th>建议</th></tr></thead><tbody><tr><td>操作系统</td><td>操作系统的IO模型</td><td>将kafka部署在linux上</td></tr><tr><td>磁盘</td><td>磁盘的IO性能</td><td>普通环境使用机械硬盘，不需要搭建RAID</td></tr><tr><td>磁盘容量</td><td>根据消息数，留存时间预估磁盘容量</td><td>实际使用中磁盘预留20%~30%的空间</td></tr><tr><td>带宽</td><td>根据实际带宽资源和业务SLA预估服务器数量</td><td>对于千兆网络，建议每台服务器按照700Mbps来计算，避免大流量下的丢包</td></tr></tbody></table><h3 id="操作系统的选择"><a href="#操作系统的选择" class="headerlink" title="操作系统的选择"></a>操作系统的选择</h3><p>操作系统：Windows，Linux，MacOs</p><p>选择：Linux</p><p>为什么：</p><ul><li>IO模型的使用</li><li>网络传输效率</li><li>社区支持度</li></ul><h4 id="IO模型的使用"><a href="#IO模型的使用" class="headerlink" title="IO模型的使用"></a>IO模型的使用</h4><ul><li>阻塞IO</li><li>非阻塞IO</li><li>IO多路复用</li><li>信号驱动IO</li><li>异步IO</li></ul><p>每种IO都有自己的典型使用场景，比如：</p><ul><li>Java中的Socket对象的阻塞模式和非阻塞模式就是对应前两种</li><li>Linux系统的select函数就属于IO多路复用</li><li>大名鼎鼎的epoll介入第三种和第四种之间</li><li>第五种模型，目前很少有Linux支持，然而Windos却在操作系统中提供了叫IOCP线程模型属于第五种</li></ul><p>说完了IO模型，再来看kafka与IO模型的关系</p><ul><li>kafka的底层使用的是java的selector<ul><li>java的selector在linux上的实现机制是：epoll</li><li>而在windos上的实现机制是：select（IO多路复用）</li></ul></li><li>所以，将kafka部署在linux机器上，更有优势</li></ul><h4 id="网络传输效率"><a href="#网络传输效率" class="headerlink" title="网络传输效率"></a>网络传输效率</h4><p>kafka的消息是通过网络传输的，而消息又是保存在磁盘中的，所以kafka非常依赖网络和磁盘的性能；</p><p>而linux恰巧有零拷贝（Zero copy）技术，就是当数据在磁盘和网络进行传输的时候，避免昂贵的的内核态数据拷贝从而实现数据的高速传输；</p><p>而windos要到java8的60更新版本才有这个功能；</p><h4 id="社区的支持度"><a href="#社区的支持度" class="headerlink" title="社区的支持度"></a>社区的支持度</h4><p>社区对于windos版的bug不做承诺，基本不会修复；</p><h3 id="磁盘的选择"><a href="#磁盘的选择" class="headerlink" title="磁盘的选择"></a>磁盘的选择</h3><ul><li>选择机械磁盘：kafka多为顺序读写，规避了机械磁盘的弊端，替换成SSD，效益不大</li><li>不用组RAID：kafka在软件层面通过分区副本保证了高可用，基本不需要磁盘组RAID</li></ul><h3 id="磁盘容量的选择"><a href="#磁盘容量的选择" class="headerlink" title="磁盘容量的选择"></a>磁盘容量的选择</h3><ul><li><p>磁盘容量：kafka的日志有保留时间的概念，根据具体的业务量，消息大小，计算好容量；</p><ul><li><p>新增消息量</p></li><li><p>消息留存时间</p></li><li><p>平均消息大小</p></li><li><p>备份数</p></li><li><p>是否启用压缩（压缩比）</p></li></ul></li></ul><h3 id="带宽的选择"><a href="#带宽的选择" class="headerlink" title="带宽的选择"></a>带宽的选择</h3><p>目前公司普遍的带宽配置都是千兆网（每秒处理1G数据），财大气粗的公司会有万兆网（每秒处理10G数据）；</p><p>假设你公司的机房环境是千兆网络，即 1Gbps，现在你有个业务，其业务目标或 SLA 是在 1 小时内处理 1TB 的业务数据。那么问题来了，你到底需要多少台 Kafka 服务器来完成这个业务呢？</p><p>千兆网络下，单台机器，假设kafka占用70%的带宽（总要为其他进程保留一些资源），稍等，这只是它能使用的最大带宽资源，你不能让 Kafka 服务器常规性使用这么多资源，故通常要再额外预留出 2&#x2F;3 的资源，即单台服务器使用带宽 700Mb &#x2F; 3 ≈ 240Mbps。有了 240Mbps，我们就可以计算 1 小时内处理 1TB 数据所需的服务器数量了。根据这个目标，我们每秒需要处理 2336Mb 的数据，除以 240，约等于 10 台服务器。如果消息还需要额外复制两份，那么总的服务器台数还要乘以 3，即 30 台。</p><h2 id="重要的集群参数配置"><a href="#重要的集群参数配置" class="headerlink" title="重要的集群参数配置"></a>重要的集群参数配置</h2><p>参数配置分为四个方面：</p><ul><li>broker端参数配置</li><li>topic的参数配置</li><li>JVM的参数配置</li><li>操作系统的参数配置</li></ul><h3 id="broker端参数（静态参数）"><a href="#broker端参数（静态参数）" class="headerlink" title="broker端参数（静态参数）"></a>broker端参数（静态参数）</h3><p>静态参数是指修改后需要重启才能生效的参数；</p><p>是配置在 kafka安装的这个机器上的。通过静态的配置文件配置的。</p><h4 id="存储信息类参数"><a href="#存储信息类参数" class="headerlink" title="存储信息类参数"></a>存储信息类参数</h4><p>表示 Broker 使用哪些磁盘</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.dirs</td><td>【没有默认值的，必须手动指定】指定Broker需要使用的若干个文件目录路径，可配置多个</td></tr><tr><td>log.dir</td><td>【一般不用设置，新版本已经取消了】只能配置一个，用来补充上面参数的</td></tr></tbody></table><h4 id="与ZK相关的参数"><a href="#与ZK相关的参数" class="headerlink" title="与ZK相关的参数"></a>与ZK相关的参数</h4><p>ZK负责协调管理并保存 Kafka 集群的所有元数据信息，比如集群都有哪些 Broker 在运行、创建了哪些 Topic，每个 Topic 都有多少分区以及这些分区的 Leader 副本都在哪些机器上等信息</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>zookeeper.connect</td><td>负责协调管理并保存 Kafka 集群的所有元数据信息</td></tr></tbody></table><h4 id="broker连接相关的参数"><a href="#broker连接相关的参数" class="headerlink" title="broker连接相关的参数"></a>broker连接相关的参数</h4><p>表示客户端程序或其他 Broker 如何与该 Broker 进行通信的设置</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>listeners</td><td>告诉外部连接需要通过什么协议访问指定主机名和端口开放的kafka服务（用于内网访问）</td></tr><tr><td>Advertised.listeners</td><td>表明这组监听器是broker对外发布的（用于外网访问）</td></tr><tr><td>host.name&#x2F;port</td><td>这俩参数是过期参数，忘掉</td></tr></tbody></table><h4 id="topic管理的参数"><a href="#topic管理的参数" class="headerlink" title="topic管理的参数"></a>topic管理的参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>auto.create.topics.enable</td><td>是否允许自动创建topic，<br />建议设置成false；</td></tr><tr><td>unclean.leader.election.enable</td><td>是否允许Unclean Leader选举，<br />建议设置为false；<br />kafka的分区有多个副本，并不是所有的副本都有资格竞争Leader，只有保存数据比较多的才有资格；那如果保存数据比较多的副本全都挂了，那还要不要竞选Leader呢？ 就是这个参数控制的；<br />false表示不竞选，后果：分区不可用；<br />true表示竞选；后果：数据不一致；</td></tr><tr><td>auto.leader.rebalance.enable</td><td>是否允许定期进行Leader选举；true表示到达一定条件，kafka会自动把leader换了，注意是换掉，而不是选举；即使原来的leaderA运行的好好地，也会给换成leaderB；换leader的代价很大，建议设置为false；</td></tr></tbody></table><h4 id="数据留存方面的参数"><a href="#数据留存方面的参数" class="headerlink" title="数据留存方面的参数"></a>数据留存方面的参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.retention.{hour|minutes|ms}</td><td>控制一条消息被保留多长时间</td></tr><tr><td>log.retention.bytes</td><td>Broker为保留消息提供的磁盘容量的大小</td></tr><tr><td>message.max.bytes</td><td>控制Broker能够接收的最大的消息大小</td></tr></tbody></table><h3 id="Topic的参数配置"><a href="#Topic的参数配置" class="headerlink" title="Topic的参数配置"></a>Topic的参数配置</h3><p>topic端的参数配置会覆盖broker端的参数配置</p><p>Topic 端的参数是在创建Topic的时候，手动设置的。<a href="#%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9topic%E7%9A%84%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE">怎么修改topic的参数配置</a></p><h4 id="数据留存方面的参数-1"><a href="#数据留存方面的参数-1" class="headerlink" title="数据留存方面的参数"></a>数据留存方面的参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>retention.ms</td><td>规定了该topic下数据的保存时长，默认7天，如果配置了，就会覆盖broker端的配置</td></tr><tr><td>retention.bytes</td><td>规定了要为该topic预留多少磁盘容量空间</td></tr><tr><td>max.message.bytes</td><td>该参数跟 Broker 端的 message.max.bytes 参数的作用是一样的，只不过 max.message.bytes 是作用于某个 topic，而 message.max.bytes 是作用于全局。</td></tr></tbody></table><h4 id="怎么修改topic的参数配置"><a href="#怎么修改topic的参数配置" class="headerlink" title="怎么修改topic的参数配置"></a>怎么修改topic的参数配置</h4><ul><li><p>创建topic的时候设置</p><ul><li><blockquote><p>bin&#x2F;kafka-topics.sh –bootstrap-server localhost:9092 –create –topic transaction –partitions 1 –replication-factor 1 –config retention.ms&#x3D;15552000000 –config max.message.bytes&#x3D;5242880</p></blockquote></li></ul></li><li><p>修改topic的时候设置</p><ul><li><blockquote><p>bin&#x2F;kafka-configs.sh –zookeeper localhost:2181 –entity-type topics –entity-name transaction –alter –add-config max.message.bytes&#x3D;10485760</p></blockquote></li></ul></li></ul><h3 id="JVM的参数配置"><a href="#JVM的参数配置" class="headerlink" title="JVM的参数配置"></a>JVM的参数配置</h3><p>设置kafka的JVM参数，只需要设置环境变量就可以啦。<a href="#%E6%80%8E%E4%B9%88%E5%AF%B9kafka%E8%AE%BE%E7%BD%AEJVM%E5%8F%82%E6%95%B0">怎么对kafka设置JVM参数</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>KAFKA_HEAP_OPTS</td><td>JVM堆大小，建议设置为6GB，默认的1GB太小了</td></tr><tr><td>KAFKA_JVM_PERFORMANCE_OPTS</td><td>指定垃圾回收器<br>在java7下：cpu充足，就用CMS；否则使用ParallelGC<br>在java8下：选择G1</td></tr></tbody></table><h4 id="怎么对kafka设置JVM参数"><a href="#怎么对kafka设置JVM参数" class="headerlink" title="怎么对kafka设置JVM参数"></a>怎么对kafka设置JVM参数</h4><p>指定kafka的环境变量即可</p><ul><li>KAFKA_HEAP_OPTS：指定堆大小</li><li>KAFKA_JVM_PERFORMANCE_OPTS：指定垃圾回收器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$<span class="token operator">></span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span>--Xms6g  <span class="token parameter variable">--Xmx6g</span>$<span class="token operator">></span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_JVM_PERFORMANCE_OPTS</span><span class="token operator">=</span> <span class="token parameter variable">-server</span> <span class="token parameter variable">-XX:+UseG1GC</span> <span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">20</span> <span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span><span class="token operator">=</span><span class="token number">35</span> <span class="token parameter variable">-XX:+ExplicitGCInvokesConcurrent</span> <span class="token parameter variable">-Djava.awt.headless</span><span class="token operator">=</span>true$<span class="token operator">></span> bin/kafka-server-start.sh config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作系统的参数配置"><a href="#操作系统的参数配置" class="headerlink" title="操作系统的参数配置"></a>操作系统的参数配置</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>文件描述符限制</td><td>ulimit -n；其实设置这个参数不重要，但是不设置后果很严重，会看到too many open file 的报错；</td></tr><tr><td>文件系统类型</td><td>文件系统类型（ext3，ext4，XFS），XFS的性能强于ext4，ZFS的性能强于XFS（但技术比较新，使用很少）</td></tr><tr><td>Swappiness</td><td>网上很多文章都提到设置其为 0，将 swap 完全禁掉以防止 Kafka 进程使用 swap 空间。我个人反倒觉得还是不要设置成 0 比较好，我们可以设置成一个较小的值。为什么呢？因为一旦设置成 0，当物理内存耗尽时，操作系统会触发 OOM killer 这个组件，它会随机挑选一个进程然后 kill 掉，即根本不给用户任何的预警。但如果设置成一个比较小的值，当开始使用 swap 空间时，你至少能够观测到 Broker 性能开始出现急剧下降，从而给你进一步调优和诊断问题的时间。基于这个考虑，我个人建议将 swappniess 配置成一个接近 0 但不为 0 的值，比如 1。</td></tr><tr><td>提交时间（系统的刷盘时间）</td><td>提交时间或者说是 Flush 落盘时间。向 Kafka 发送数据并不是真要等数据被写入磁盘才会认为成功，而是只要数据被写入到操作系统的页缓存（Page Cache）上就可以了，随后操作系统根据 LRU 算法会定期将页缓存上的“脏”数据落盘到物理磁盘上。这个定期就是由提交时间来确定的，默认是 5 秒。一般情况下我们会认为这个时间太频繁了，可以适当地增加提交间隔来降低物理磁盘的写操作。当然你可能会有这样的疑问：如果在页缓存中的数据在写入到磁盘前机器宕机了，那岂不是数据就丢失了。的确，这种情况数据确实就丢失了，但鉴于 Kafka 在软件层面已经提供了多副本的冗余机制，因此这里稍微拉大提交间隔去换取性能还是一个合理的做法。</td></tr></tbody></table><h2 id="分区机制"><a href="#分区机制" class="headerlink" title="分区机制"></a>分区机制</h2><p>对于那种大批量机器组成的集群环境，每分钟产生的日志量都能以 GB 数，因此如何将这么大的数据量均匀地分配到 Kafka 的各个 Broker 上，就成为一个非常重要的问题。</p><p>我们知道 kafka 的数据，是以 Topic 为概念进行存储的，而<code>topic</code>是一个逻辑概念，真正存放数据的是<code>topic</code>下的<code>partition</code>；<code>partition</code>是物理概念；</p><p>一个消息只会保存在一个<code>topic</code>下的一个<code>partition</code>中，不会保存在多个<code>partition</code>中（<code>Replica</code>除外）</p><p>那么，为了保证大数据量的均匀分布，其实就是保证一个<code>topic</code>下的数据量均匀的分散在各个<code>partition</code>中；</p><p>那么问题来了？</p><h3 id="为什么要分区"><a href="#为什么要分区" class="headerlink" title="为什么要分区"></a>为什么要分区</h3><p>为什么要<code>Partiton</code>，为什么<code>kafka</code>不直接存储数据，而是要分区存储？为什么要使用<code>Partiton</code>，而不是直接使用<code>topic</code>？</p><p>分区的目的是为了<strong>负载均衡</strong>；或者说分区的目的是为了<strong>提高系统的可伸缩性</strong>；</p><ul><li>负载均衡<ul><li>如果没有分区，所有的请求全部在一个<code>topic</code>上，请求量大的时候，只对一个磁盘进行大量的读写（分钟<code>GB</code>级别的数据量），可能直接就崩了；</li></ul></li><li>可伸缩性<ul><li>顺丰的<code>kafka</code>一般是32分区，这样每一个<code>Partition</code>都可以有一个<code>consumer</code>，提升系统的吞吐量；当数据量增长的时候，可以扩<code>Partition</code>，32-&gt;64；提升系统的可伸缩性；</li><li>但是一般不建议直接扩<code>Partition</code>，在顺丰，一般是申请新的<code>topic</code>，然后将消息转发到不同的<code>topic</code>中，变相的实现扩<code>Partition</code>；</li><li>因为<code>Partition</code>过多，<code>kafka</code>管理起来很困难，没必要增加不必要的消耗；</li></ul></li><li><code>Partition</code>可以实现业务上的功能（消息的顺序问题）</li></ul><p>以上说了<code>Partiton</code>存在的必要性</p><p>那么既然存在<code>Partiton</code>，怎么保证每个<code>Partiton</code>的数据量的均匀呢，避免数据倾斜？这就涉及到分区的策略</p><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><p>分区策略：就是决定消息被发送到哪个分区</p><table><thead><tr><th>分区策略</th><th>描述</th></tr></thead><tbody><tr><td>轮训</td><td>没有指定<code>partitioner.class</code>这个配置的时候，在没有指定key的时候（消息键保留策略），轮训策略是兜底的</td></tr><tr><td>随机</td><td>使用的很少了，已经被废弃了</td></tr><tr><td>自定义</td><td>需要显示的配置<code>partitioner.class</code>这个配置，同时需要编写代码；</td></tr><tr><td>按消息键保留策略</td><td>按照key的顺序进行存放</td></tr></tbody></table><p>默认分区策略：如果指定了key，按照key分发；没有指定key，按照轮训；</p><h3 id="怎么设置分区策略"><a href="#怎么设置分区策略" class="headerlink" title="怎么设置分区策略"></a>怎么设置分区策略</h3><p><strong>轮训</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">不需要配置，默认的就是这个。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>随机</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">></span></span> partitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>partitions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>按消息键保序策略</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">></span></span> partitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> partitions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>自定义</strong></p><p>比如我想实现：根据 <code>Broker</code> 所在的 <code>IP</code> 地址判断是南方还是北方，实现定制化的分区策略</p><ul><li>编写一个具体的类实现<code>org.apache.kafka.clients.producer.Partitioner</code>接口</li><li>实现其中的两个方法：<code>partition()</code>和<code>close()</code></li><li>显式地配置生产者端的参数<code>partitioner.class</code>为你自己实现类的 <code>Full Qualified Name</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PartitionInfo</span><span class="token punctuation">></span></span> partitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> partitions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token function">isSouth</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">leader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PartitionInfo</span><span class="token operator">::</span><span class="token function">partition</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="消息压缩（消息格式）"><a href="#消息压缩（消息格式）" class="headerlink" title="消息压缩（消息格式）"></a>消息压缩（消息格式）</h2><h3 id="为什么要压缩？"><a href="#为什么要压缩？" class="headerlink" title="为什么要压缩？"></a>为什么要压缩？</h3><p>说起压缩<code>compression</code>，我相信你一定不会感到陌生。它秉承了用时间去换空间的经典 <code>trade-off</code> 思想，具体来说就是用 CPU 时间去换磁盘空间或网络 I&#x2F;O 传输量，希望以较小的 CPU 开销带来更少的磁盘占用或更少的网络 I&#x2F;O 传输。在 <code>Kafka</code> 中，压缩也是用来做这件事的。</p><h3 id="kafka的消息格式"><a href="#kafka的消息格式" class="headerlink" title="kafka的消息格式"></a>kafka的消息格式</h3><p>kafka有两大类消息格式，一类是在<code>0.11.0.0</code>版本之前的消息格式（称作V1版本），一个是<code>0.11.0.0</code>版本之后的格式（称作V2版本）；</p><p>不管是哪个版本，kafka消息层次都是分为两层：</p><table><thead><tr><th>V1版本</th><th>V2版本</th></tr></thead><tbody><tr><td>消息集合（message set） + 消息（message）</td><td>消息集合（record batch） + 消息（record）</td></tr></tbody></table><p>一个消息集合中包含若干个日志项<code>record item</code>，日志项<code>record item</code>才是真正封装消息的地方；（注意这里不要和日志段（<code>Log Segment</code>）混为一谈）</p><p>V2版本对V1版本进行了优化，将日志项<code>record item</code>中一些通用的字段抽出来，放在了消息集合中；</p><p>V2版本对V1版本还有一个关于压缩方面的优化</p><h3 id="怎么压缩"><a href="#怎么压缩" class="headerlink" title="怎么压缩"></a>怎么压缩</h3><p>V2 版本对 V1 版本还有一个关于压缩方面的优化</p><p>V1 版本：是把多条消息进行压缩，然后将压缩后的内容放在外层消息的消息体字段中； </p><p>V2 版本：是对整个消息集合进行压缩，显然V2版本的压缩效率应该更高；</p><p>压缩使用到的是压缩算法：<a href="#%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E7%9A%84%E9%80%89%E6%8B%A9">压缩算法的选择</a></p><h3 id="何时压缩"><a href="#何时压缩" class="headerlink" title="何时压缩"></a>何时压缩</h3><p>在 <code>kafka</code> 中，压缩可能发生在：<code>Producer</code>端和<code>Broker</code>端</p><ul><li><p><code>Producer</code>端【一般都是<code>Producer</code>端做压缩】</p><ul><li>在<code>Producer</code>程序中添加一个配置：<code>compression.type</code> 参数</li><li>compression.type&#x3D;gzip 表示开启gzip压缩</li></ul></li><li><p><code>Broker</code>端</p><ul><li>一般<code>Broker</code>端不会对<code>Producer</code>发出来的消息进行修改；</li><li>有两个例外情况，会让<code>Broker</code>对消息重新压缩<ul><li><code>Broker</code>端和<code>Producer</code>端指定的消息压缩算法不一致（不一致的时候，<code>broker</code>端会对<code>producer</code>端发出来的消息解压然后重新压缩）</li><li><code>Broker</code>端发生了消息格式转换：新老版本消息格式（V1版本和V2版本）兼容的问题</li></ul></li></ul></li></ul><h3 id="何时解压缩"><a href="#何时解压缩" class="headerlink" title="何时解压缩"></a>何时解压缩</h3><ul><li><code>consumer</code>端消费到消息的时候，进行解压缩<ul><li>解压缩的时候，压缩算法是在消息中，用一个字段标识的，所以<code>consumer</code>可以拿到消息之后在解压缩</li></ul></li><li><code>broker</code>端收到<code>producer</code>发出的消息之后，也会解压缩一次，进行消息的校验；</li></ul><h3 id="压缩的时机"><a href="#压缩的时机" class="headerlink" title="压缩的时机"></a>压缩的时机</h3><p>记住这句话：<code>Producer</code>端压缩，<code>Broker</code>端保持，<code>Consumer</code>端解压缩</p><h3 id="压缩算法的选择"><a href="#压缩算法的选择" class="headerlink" title="压缩算法的选择"></a>压缩算法的选择</h3><p>一般看两个指标：压缩比 和 压缩&#x2F;解压缩的吞吐量</p><p>GZIP</p><p>Snappy</p><p>LZ4</p><p>zstd</p><h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><p><code>kafka</code>只对 已提交成功 的消息做有限度的持久化保证；</p><h3 id="什么是消息丢失"><a href="#什么是消息丢失" class="headerlink" title="什么是消息丢失"></a>什么是消息丢失</h3><p>对于<code>Producer</code>来说：消息发不出去，就是丢失；</p><p>对于<code>Consumer</code>来说：消息消费不到，就是丢失；</p><p>对于<code>Broker</code>来说：不存在丢失，<code>Broker</code>会对 已提交成功 的消息，做有限度的持久化；</p><h3 id="什么时候会消息丢失"><a href="#什么时候会消息丢失" class="headerlink" title="什么时候会消息丢失"></a>什么时候会消息丢失</h3><ul><li><code>Producer</code>丢失消息<ul><li><code>producer.send(msg) </code>因为是异步，<code>fire and forget</code> 所以可能会丢消息</li><li>网络抖动、消息不合法被<code>broker</code>拒收（比如：消息体太大）等都会导致消息发送不成功</li></ul></li><li><code>Consumer</code>丢失消息<ul><li>消费的消息不存在了。一般只有先提交<code>offset</code>在消费的场景下会发生；</li><li>多线程处理消息的时候，某一个线程消费失败了，但是<code>offset</code>自动提交了；</li></ul></li></ul><h3 id="怎么保证消息不丢失"><a href="#怎么保证消息不丢失" class="headerlink" title="怎么保证消息不丢失"></a>怎么保证消息不丢失</h3><p>上面几种丢失消息的场景，怎么避免？</p><ul><li>【<code>Producer</code>端】：不要使用 <code>producer.send(msg)</code>，而要使用 <code>producer.send(msg, callback)</code>。一定要使用带有回调通知的 <code>send </code>方法。</li><li>【<code>Producer</code>端】：设置 <code>acks</code> &#x3D; <code>all</code>。是个动态值（如果原来有<code>3</code>个<code>Replica</code>，就要写入<code>3</code>个，如果有<code>1</code>个挂了，那就只需要写入<code>2</code>个），表明所有<code>Replica</code>都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。</li><li>【<code>Producer</code>端】：设置 <code>retries</code> 为一个较大的值。 表示<code>Producer </code>自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，这里开启自动重试，避免消息丢失。（重试会导致消息乱序吗：会）</li><li>【Broker端】：设置 <code>unclean.leader.election.enable</code> &#x3D; <code>false</code>。它控制的是哪些 <code>Replica </code>有资格竞选分区的 <code>Leader</code>。如果一个 <code>Replica </code> 落后原先的 <code>Leader </code>太多，就不要让它竞选，即不允许这种情况的发生。</li><li>【Broker端】：设置<code> replication.factor</code> &gt;&#x3D; <code>3</code>。表示某个分区的<code>Replica</code>总数，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余</li><li>【Broker端】：设置 <code>min.insync.replicas</code> &gt; 1。表示至少写入多少个<code>Replica</code>才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。</li><li>【Broker端】：确保<code> replication.factor</code> &gt; <code>min.insync.replicas</code>。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 <code>replication.factor</code> &#x3D; <code>min.insync.replicas</code> + <code>1</code>。</li><li>【<code>Consumer</code>端】：设置<code>enable.auto.commit</code>&#x3D; <code>false</code>，采用手动提交位移的方式。就像前面说的，这对于单 <code>Consumer </code>多线程处理的场景而言是至关重要的。</li></ul><p>举个例子：</p><p>比如<code>Replica</code>&#x3D;<code>3</code>，设置<code>min.insync.replicas</code>&#x3D;<code>2</code>，<code>acks</code>&#x3D;<code>all</code></p><p>如果<code>Replica</code>都正常工作：此时<code>acks</code>&#x3D;<code>all</code>的约束就是写入<code>3</code>个<code>Replica</code>，才算提交成功，此时满足<code>min.insync.replicas</code>&#x3D;<code>2</code>约束。</p><p>如果<code>Replica</code>挂了<code>1</code>个，此时<code>acks</code>&#x3D;<code>all</code>的约束就是写入<code>2</code>个<code>Replica</code>即可，此时满足<code>min.insync.replicas</code>&#x3D;<code>2</code>约束。</p><p>如果<code>Replica</code>挂了<code>2</code>个，此时<code>acks</code>&#x3D;<code>all</code>的约束就是写入<code>1</code>个<code>Replica</code>即可，此时不满足<code>min.insync.replicas</code>&#x3D;<code>2</code>这个下限约束，写入失败。</p><p>补充：</p><blockquote><p>设置 ack &#x3D; all，其实就是需要保证 ISR 集合中所有的 Replica 都写入成功才能返回</p></blockquote><p>公司的生产者的设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">KafkaProducer24</span><span class="token punctuation">(</span><span class="token class-name">String</span> brokers<span class="token punctuation">,</span> <span class="token class-name">ProduceOptionalConfig</span> extraConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>extraConfig <span class="token operator">=</span> extraConfig <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ProduceOptionalConfig</span><span class="token punctuation">.</span>defaultConfig <span class="token operator">:</span> extraConfig<span class="token punctuation">;</span>    <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> brokers<span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.ByteArraySerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span> <span class="token string">"默认是Leader Replica收到就行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request.timeout.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是30000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"compression.type"</span><span class="token punctuation">,</span> <span class="token string">"snappy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"batch.size"</span><span class="token punctuation">,</span> <span class="token string">"默认是16384"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"linger.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>Kafka 拦截器自<code> 0.10.0.0</code> 版本被引入后并未得到太多的实际应用，我也从未在任何 Kafka 技术峰会上看到有公司分享其使用拦截器的成功案例。</p><p>拦截器是一个小众功能。</p><p>Kafka 拦截器分为生产者拦截器和消费者拦截器</p><h3 id="生产者拦截器"><a href="#生产者拦截器" class="headerlink" title="生产者拦截器"></a>生产者拦截器</h3><p>开发：实现<code>org.apache.kafka.clients.producer.ProducerInterceptor</code>这个接口，这个接口有俩方法</p><ul><li><code>onSend</code>：消息真正发给broker之前</li><li><code>onAcknowledgement</code>：消息提交成功之后，在<code>callback</code>之前</li></ul><h3 id="消费者拦截器"><a href="#消费者拦截器" class="headerlink" title="消费者拦截器"></a>消费者拦截器</h3><p>开发：实现<code>org.apache.kafka.clients.consumer.ConsumerInterceptor</code>这个接口，这个接口有俩方法</p><ul><li><code>onConsume</code>：在消费者真正处理消息之前</li><li><code>onCommit</code>：消费者处理完消息，提交offset之后</li></ul><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p>拦截器开发完成了，怎么让它生效呢？</p><p>当前 Kafka 拦截器的设置方法是通过参数配置完成的</p><p>生产者和消费者两端有一个相同的参数，名字叫 interceptor.classes，它指定的是一组类的列表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"com.yourcompany.kafkaproject.interceptors.AddTimestampInterceptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截器1</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"com.yourcompany.kafkaproject.interceptors.UpdateCounterInterceptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截器2</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">INTERCEPTOR_CLASSES_CONFIG</span><span class="token punctuation">,</span> interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生产者与TCP连接"><a href="#生产者与TCP连接" class="headerlink" title="生产者与TCP连接"></a>生产者与TCP连接</h2><h3 id="为什么采用TCP作为底层传输协议"><a href="#为什么采用TCP作为底层传输协议" class="headerlink" title="为什么采用TCP作为底层传输协议"></a>为什么采用TCP作为底层传输协议</h3><p>TCP 拥有一些高级功能，如多路复用请求和同时轮询多个连接的能力。</p><p>多路复用请求：multiplexing request，是将两个或多个数据合并到底层—物理连接中的过程。TCP 的多路复用请求会在一条物理连接上创建若干个虚拟连接，每个虚拟连接负责流转各自对应的数据流。严格讲：TCP 并不能多路复用，只是提供可靠的消息交付语义保证，如自动重传丢失的报文。</p><h3 id="生产者是什么时候创建TCP连接的"><a href="#生产者是什么时候创建TCP连接的" class="headerlink" title="生产者是什么时候创建TCP连接的"></a>生产者是什么时候创建TCP连接的</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“参数<span class="token number">1</span>”<span class="token punctuation">,</span> “参数<span class="token number">1</span>的值”<span class="token punctuation">)</span>；props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“参数<span class="token number">2</span>”<span class="token punctuation">,</span> “参数<span class="token number">2</span>的值”<span class="token punctuation">)</span>；……<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Producer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>……<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  ……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对上面的代码，能创建TCP连接的只有两个地方，一是 Producer 实例化的时候；一是 producer.send 的时候；</p><ul><li><strong>Kafka 是在 Producer 实例化的时候与 Broker 建立的 TCP 连接</strong></li><li>所以，当 producer.send 的时候，其实已经有TCP连接了</li></ul><p>扩展：除了在 Producer 实例化的时候与 Broker 建立的 TCP 连接之外，还有没有其他情况？</p><ul><li>有，有两个情况，也会创建TCP连接</li><li><strong>元数据更新时，会与元数据中没有连接的 Broker 建立 TCP 连接；</strong><ul><li>每隔5分钟， Producer 会定期从 Broker 中获取元数据信息</li><li>Producer 尝试给一个不存在的 Topic 发送消息时，Broker 会说这个 Topic 不存在，然后 Producer 会请求 Broker 更新元数据信息</li></ul></li><li><strong>在消息发送时，如果 Producer 发现与要发送消息的 Topic 所在的 Broker 没有 TCP 连接，就会创建连接；</strong></li></ul><h3 id="是怎么创建TCP连接的"><a href="#是怎么创建TCP连接的" class="headerlink" title="是怎么创建TCP连接的"></a>是怎么创建TCP连接的</h3><p>在创建 KafkaProducer 实例时，生产者应用会在后台创建并启动一个名为 Sender 的线程，该 Sender 线程开始运行时首先会创建与 Broker 的TCP连接。</p><p>Broker有1000个，bootstrap.servers 要配置1000个嘛？ 不需要，因为 Producer 一旦连接到集群中的任一台 Broker，就能拿到整个集群的 Broker 信息。</p><h3 id="TCP连接是什么时候被关闭的"><a href="#TCP连接是什么时候被关闭的" class="headerlink" title="TCP连接是什么时候被关闭的"></a>TCP连接是什么时候被关闭的</h3><ul><li>用户主动关闭，调用 producer.close</li><li>Kafka自动关闭（虽然是producer端设置的参数，但实际上，是broker关闭的TCP连接）：与 Producer 端参数 connections.max.idle.ms 的值有关。默认情况下该参数值是 9 分钟，即如果在 9 分钟内没有任何请求“流过”某个 TCP 连接，那么 Kafka 会主动帮你把该 TCP 连接关闭。用户可以在 Producer 端设置 connections.max.idle.ms&#x3D;-1 禁掉这种机制。一旦被设置成 -1，TCP 连接将成为永久长连接。</li></ul><h3 id="会存在的一些问题"><a href="#会存在的一些问题" class="headerlink" title="会存在的一些问题"></a>会存在的一些问题</h3><ul><li>producer每5分钟获取一些元数据，然后与元数据中没有连接的broker建立TCP连接，然后9分钟后，broker会中断空闲的连接，然后5分钟后，在此建立连接；9分钟后，再次中断连接；</li></ul><h2 id="消费者与TCP连接"><a href="#消费者与TCP连接" class="headerlink" title="消费者与TCP连接"></a>消费者与TCP连接</h2><h3 id="消费者是什么时候创建TCP连接的"><a href="#消费者是什么时候创建TCP连接的" class="headerlink" title="消费者是什么时候创建TCP连接的"></a>消费者是什么时候创建TCP连接的</h3><ul><li>生产者是在new KakfaProducer的时候，后台开启一个Sender的线程用来创建TCP连接的；</li><li>消费者<strong>不是</strong>在实例化的时候创建的，而是在开始消费消息的时候（consumer.poll）才主动创建TCP连接，准确的说有三个时机<ul><li>发起 FindCoordinator 请求时（连接的brokerId是-1，因为不知道连哪一个）</li><li>连接协调者的时候（连接的brokerId是 <code>Interger.Max - 协调者所在broker的Id号</code> ，为什么这么设计，为了防止连接重用）</li><li>真正消费消息的时候（连接某个topic的某个分区的leader副本所在的broker）</li></ul></li></ul><h3 id="创建多少个TCP连接"><a href="#创建多少个TCP连接" class="headerlink" title="创建多少个TCP连接"></a>创建多少个TCP连接</h3><p>会创建三类TCP连接</p><ul><li>FindCoordinator 请求与任意一个 Broker 的 TCP 连接</li><li>与 Coordinator 的连接，此时消费者才能真正的开始工作</li><li>与 Partition 所在leader副本的TCP连接，拉取消息，真正开始处理</li></ul><p>其中第一类（FIndCoordinator请求与任意一个Broker的连接）会在消费者真正开始处理消息的时候，也就是后面两类TCP连接建立好之后，第一类连接会被关闭掉；</p><h3 id="消费者是什么时候关闭TCP连接的"><a href="#消费者是什么时候关闭TCP连接的" class="headerlink" title="消费者是什么时候关闭TCP连接的"></a>消费者是什么时候关闭TCP连接的</h3><p>上面说的三类连接，其中第一类连接会在二，三类连接创建好之后，被关闭掉；</p><p>二，三类连接的关闭场景有两种：</p><ul><li>主动关闭，这个不说了</li><li>kafka自动关闭，由 消费者端参数connection.max.idle.ms控制。当超过指定时间，该消费者没有消息消费时，就会被关闭连接（但是如果我们的消费逻辑是while循环的情况，则永远不会被关闭，因为一直与broker保持通信，实现了“长链接”的效果）</li></ul><h3 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h3><p>第一类 TCP 连接仅仅是为了首次获取元数据而创建的，后面就会被废弃掉。最根本的原因是，消费者在启动时还不知道 Kafka 集群的信息，只能使用“-1” 去注册，即使消费者获取了真实的 Broker ID，它依旧无法区分这个“-1”对应的是哪台 Broker，因此也就无法重用这个 Socket 连接，只能再重新创建一个新的连接。</p><p>为什么会出现这种情况呢？主要是因为目前 Kafka 仅仅使用 ID 这一个维度的数据来表征 Socket 连接信息。这点信息明显不足以确定连接的是哪台 Broker，也许在未来，社区应该考虑使用 &lt; 主机名、端口、ID&gt; 三元组的方式来定位 Socket 资源，这样或许能够让消费者程序少创建一些 TCP 连接。</p><p>也许你会问，反正 Kafka 有定时关闭机制，这算多大点事呢？其实，在实际场景中，我见过很多将 connection.max.idle.ms 设置成 -1，即禁用定时关闭的案例，如果是这样的话，这些 TCP 连接将不会被定期清除，只会成为永久的“僵尸”连接。基于这个原因，社区应该考虑更好的解决方案。</p><h2 id="幂等和事务生产者"><a href="#幂等和事务生产者" class="headerlink" title="幂等和事务生产者"></a>幂等和事务生产者</h2><h3 id="消息交付可靠性"><a href="#消息交付可靠性" class="headerlink" title="消息交付可靠性"></a>消息交付可靠性</h3><p>所谓的消息交付可靠性，是指<code>kafka</code>对<code>Producer</code>和<code>Consumer</code>要处理的消息，提供什么样的承诺：</p><ul><li><p><code>最多一次</code>：消息只会被发送一次，可能会丢失，绝不会重复</p></li><li><p><code>至少一次</code>（默认）：发送消息的时候，至少要有一次broker明确告知已经提交的callback，消息可能重复，但不会丢失</p></li><li><p><code>精确一次</code>：消息不会丢失，也不会重复</p></li></ul><h3 id="幂等和事务的概念"><a href="#幂等和事务的概念" class="headerlink" title="幂等和事务的概念"></a>幂等和事务的概念</h3><p>略</p><h3 id="幂等生产者"><a href="#幂等生产者" class="headerlink" title="幂等生产者"></a>幂等生产者</h3><p>在 Kafka 中，<code>Producer </code>默认不是幂等性的，但我们可以创建幂等性 <code>Producer</code>。</p><p>在没有幂等之前，<code>Producer</code>向一个<code>Partition</code>发送消息，可能会出现同一条消息被多次发送的情况，导致消息重复</p><p>在有了幂等之后，<code>Producer</code>向一个<code>Partition</code>发送消息，发送一次和发送多次，由于幂等存在，在当前这一个<code>Partition</code>内消息不会重复</p><h4 id="幂等生产者的使用方式"><a href="#幂等生产者的使用方式" class="headerlink" title="幂等生产者的使用方式"></a>幂等生产者的使用方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“enable<span class="token punctuation">.</span>idempotence”<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>或props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">ENABLE_IDEMPOTENCE_CONFIG</span>， <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置 <code>enable.idempotence = true</code> 后，<code>Producer </code>自动升级成幂等性 <code>Producer</code></p><p>如果把 <code>enable.idempotence = true</code> ，则一定要设置<code>ack = all</code>，否则会报错：Must set acks to all in order to use the idempotent producer. Otherwise we cannot guarantee idempotence</p><p>其他所有的代码逻辑都不需要改变。</p><p>Kafka 自动做消息的重复去重</p><p>公司并没有使用幂等生产者，以下是公司的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">KafkaProducer24</span><span class="token punctuation">(</span><span class="token class-name">String</span> brokers<span class="token punctuation">,</span> <span class="token class-name">ProduceOptionalConfig</span> extraConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>extraConfig <span class="token operator">=</span> extraConfig <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ProduceOptionalConfig</span><span class="token punctuation">.</span>defaultConfig <span class="token operator">:</span> extraConfig<span class="token punctuation">;</span>    <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> brokers<span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.serializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.ByteArraySerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span> <span class="token string">"默认是Leader Replica收到就行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request.timeout.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是30000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"compression.type"</span><span class="token punctuation">,</span> <span class="token string">"snappy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"batch.size"</span><span class="token punctuation">,</span> <span class="token string">"默认是16384"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"linger.ms"</span><span class="token punctuation">,</span> <span class="token string">"默认是5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="幂等生产者的实现原理"><a href="#幂等生产者的实现原理" class="headerlink" title="幂等生产者的实现原理"></a>幂等生产者的实现原理</h4><ul><li>Producer 在每次启动后，都会向 Broker 申请一个全局一个唯一的 pid ，用来标识本次会话</li><li>V2版本的消息格式增加了 sequence number 字段， producer 每发一批消息， seq 就加1</li><li>broker 在内存中会维护 &lt;pid, topic, partition, seq&gt; 映射，收到消息后检查 seq ，如果：<ul><li>new_seq &#x3D; old_seq + 1 ：正常消息</li><li>new_seq &lt;&#x3D; old_seq ：重复消息</li><li>new_seq &gt; old_seq + 1 ： 消息丢失</li></ul></li></ul><h4 id="幂等生产者的作用范围"><a href="#幂等生产者的作用范围" class="headerlink" title="幂等生产者的作用范围"></a>幂等生产者的作用范围</h4><p>只能实现单Session上的幂等性</p><ul><li>因为<code>Producer</code>的每次重启，都会向<code>Broker</code>申请一个新的全局唯一的<code>pid</code>，用来标识本次会话</li><li><code>Producer</code>在不同<code>Session</code>上的<code>pid</code>不一样，是幂等不能跨<code>Session</code>的主要原因。</li></ul><p>只能保证单分区上的幂等性</p><ul><li>因为<code>Broker</code>端维护的映射是<code>Partiton</code>粒度的，所以只能保证单分区上的幂等性</li></ul><p>那么你可能会问，如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。</p><h3 id="事务生产者"><a href="#事务生产者" class="headerlink" title="事务生产者"></a>事务生产者</h3><p>如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。</p><p>这也是幂等性 Producer 和事务型 Producer 的最大区别！</p><p>在 Kafka 中，<code>Producer </code>默认不是幂等性的，同时默认也不是事务的。</p><p>Kafka 自 0.11 版本开始也提供了对事务的支持，它能保证多条消息原子性地写入到目标分区，同时也能保证 Consumer 只能看到事务成功提交的消息。</p><h4 id="事务生产者的使用方式"><a href="#事务生产者的使用方式" class="headerlink" title="事务生产者的使用方式"></a>事务生产者的使用方式</h4><p>要想使用kafka的事务，需要同时设置<code>Producer</code>和<code>Consumer</code></p><p><strong>设置Producer</strong></p><p>设置事务型 Producer 的方法也很简单，满足两个要求即可：</p><ul><li>和幂等性 Producer 一样，开启 <code>enable.idempotence = true</code></li><li>设置 Producer 端参数<code> transactional.id</code>。最好为其设置一个有意义的名字。</li><li>在发送消息的时候，需要显示的开启<code>beginTransaction</code>和提交<code>commitTransaction</code>事务</li><li>消息1和消息2，要么全部成功，要么全部失败</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建事务生产者</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“enable<span class="token punctuation">.</span>idempotence”<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>“transactional<span class="token punctuation">.</span>id”<span class="token punctuation">,</span> <span class="token string">"my-transcation-id-zs"</span><span class="token punctuation">)</span>producer<span class="token punctuation">.</span><span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化事务</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    producer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启事务</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送消息1</span>    producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送消息2</span>    producer<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交事务</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KafkaException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    producer<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止事务</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置Consumer</strong></p><ul><li>为什么要设置，因为事务型<code>Producer</code>即使发送失败了，也会写到kakfa日志中，会被<code>Consumer</code>消费到；</li><li>设置<code>Consumer</code>的 <code>isolation.level</code>参数<ul><li><code>read_uncommitted</code>：读未提交，这是默认值，表明 Consumer 能够读取到 Kafka 写入的任何消息，不论事务型 Producer 提交事务还是终止事务，其写入的消息都可以读取。</li><li><code>read_committed</code>：读已提交，表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看到非事务型 Producer 写入的所有消息。</li></ul></li></ul><h4 id="事务生产者的实现原理"><a href="#事务生产者的实现原理" class="headerlink" title="事务生产者的实现原理"></a>事务生产者的实现原理</h4><p>待补充</p><h2 id="消费者组和独立消费者"><a href="#消费者组和独立消费者" class="headerlink" title="消费者组和独立消费者"></a>消费者组和独立消费者</h2><p>Kafka 为了实现点对点（同一个消息只能被下游的一个 Consumer 消费），使用了<code>Consumer Group</code>的概念；</p><p>那么什么是<code>Consumer Group</code>呢，我们具体看一下</p><p><code>Consumer Group</code>：多个 Consumer 实例组成一组消费某一个 Topic，这个 Topic 下的一条消息只能被组中的一个 Consumer 实例消费；</p><h3 id="什么是消费者组"><a href="#什么是消费者组" class="headerlink" title="什么是消费者组"></a>什么是消费者组</h3><p><code>Consumer Group</code> 是 Kafka 提供的可扩展且具有容错性的消费者机制。</p><p>组内有多个消费者实例（Consumer Instance），它们共享一个公共的 Group ID。</p><p>组内的所有消费者实例（Consumer Instance）一起消费订阅的主题（Subscribed Topics）的所有分区（Partition）。</p><p>当然，该 Topic 的每个 Partition 只能由同一个消费者组内的一个 Consumer 实例来消费。</p><h3 id="为什么要引入消费者组"><a href="#为什么要引入消费者组" class="headerlink" title="为什么要引入消费者组"></a>为什么要引入消费者组</h3><p>为了提升吞吐量，假设 Topic 的消息的生产速率不变，增加消费者实例，就可以提升吞吐量；</p><h3 id="消费者的重平衡"><a href="#消费者的重平衡" class="headerlink" title="消费者的重平衡"></a>消费者的重平衡</h3><p>当组内的某一个消费者实例挂了，kafka会自动重平衡；将这个死亡的消费者实例原先消费的分区，转移给存活的消费者实例；</p><p>后面会详细介绍：<a href="#%E9%87%8D%E5%B9%B3%E8%A1%A1">重平衡</a></p><h3 id="消费者组的特性是什么"><a href="#消费者组的特性是什么" class="headerlink" title="消费者组的特性是什么"></a>消费者组的特性是什么</h3><ul><li><code>Consumer Group</code> 下可以有一个或多个 Consumer 实例。这里的实例可以是一个单独的进程，也可以是同一进程下的线程。在实际场景中，使用进程更为常见一些。</li><li><code>Group ID</code> 是一个字符串，在一个 Kafka 集群中，它标识唯一的一个 Consumer Group。</li><li><code>Consumer Group</code>所订阅的 Topic ，该 Topic 下的某<strong>一个</strong> Partition ，只能分配给组内的某<strong>一个</strong> Consumer 实例消费。当然，这个 Partition 也可以被其他的 Group 消费。</li></ul><h3 id="传统的消息引擎模型"><a href="#传统的消息引擎模型" class="headerlink" title="传统的消息引擎模型"></a>传统的消息引擎模型</h3><ul><li>点对点：一个消息只能被一个消费者消费到</li><li>发布订阅：一个 Topic 下的消息，可以被订阅该 Topic 的所有消费者都消费到</li><li>kafka使用消费者组，实现了两种消息引擎模型； <ul><li>如果所有的消费者属于一个消费者组，那就是点对点</li><li>如果所有的消费者属于不同的消费者组，那就是发布订阅</li></ul></li></ul><h3 id="消费者组的使用方式"><a href="#消费者组的使用方式" class="headerlink" title="消费者组的使用方式"></a>消费者组的使用方式</h3><p>待补充，补充一个代码</p><h3 id="消费者组是如何维护offset的"><a href="#消费者组是如何维护offset的" class="headerlink" title="消费者组是如何维护offset的"></a>消费者组是如何维护offset的</h3><p>对于一个单独的消费者来说，offset就是一个数值；</p><p>但是对于一个消费者组来说，因为组内有多个消费者，那么消费者组维护offset是通过一个map来维护的，这个map简单的可以理解为是：Map&lt;TopicPartition,Long&gt;</p><p>对于老版本的kafka来说，offset是保存在zk中的，但是后来kafka的开发者发现，offset的更新太过于频繁，频繁的封信会拖慢zk的性能，所以在新版本的kafka中，offset是保存在broker内部的一个特殊的topic中的(__consumer_offset)。</p><p>下面我们来看看这个特殊的 Topic：位移主题（__consumer_offset）</p><h3 id="独立消费者"><a href="#独立消费者" class="headerlink" title="独立消费者"></a>独立消费者</h3><p>在 Kafka 中，消费消息除了使用 消费者组 Consumer Group 外，还有一种消费者会被使用，但是在业务场景中，使用的不多，一般是从在 Kafka 的流处理中。</p><p>它是：独立消费者 Standalone Consumer</p><p>1、请问Standalone Consumer 的独立消费者一般什么情况会用到 </p><ul><li>很多流处理框架的Kafka connector都没有使用consumer group，而是直接使用standalone consumer，因为group机制不好把控</li></ul><p>2、Standalone Consumer 的独立消费者 使用跟普通消费者组有什么区别的。</p><ul><li>standalone consumer没有rebalance，也没有group提供的负载均衡，你需要自己实现。其他方面（比如位移提交）和group没有太大的不同</li></ul><p>3、如果使用 Standalone Consumer，是不是也不会发生 rebalance 了？</p><ul><li>standalone consumer就没有rebalance一说了。 它的特点主要是灵活。虽然社区一直在改进rebalance的性能，但大数据量下consumer group机制依然有很多弊病（比如rebalance太慢等），所以很多大数据框架(Spark &#x2F;Flink)的kafka connector并不使用group机制，而是使用standalone consumer</li></ul><h2 id="位移和位移主题"><a href="#位移和位移主题" class="headerlink" title="位移和位移主题"></a>位移和位移主题</h2><p>位移在 Kafka 中是一个很重要的概念，分为：消费者位移（Consumer Offset）和分区位移（Offset）：<a href="#%E5%90%8D%E8%AF%8D%E6%9C%AF%E8%AF%AD">名词术语</a></p><h3 id="消费者位移和分区位移"><a href="#消费者位移和分区位移" class="headerlink" title="消费者位移和分区位移"></a>消费者位移和分区位移</h3><p>消费者位移（Consumer Offset）：消费者位移是随时变化的，毕竟它是消费者消费进度的指示器嘛。</p><p>分区位移（Offset）：表示的是分区内的消息位置，它是不变的，即一旦消息被成功写入到一个分区上，它的位移值就是固定的了。</p><p>举个例子：</p><p>一个消息发送到kafka集群，kafka就会给这个消息并一个编号，这个编号就是“分区位移”；而且这个“分区位移”是固定不变的；</p><p>当有消费者消费的时候，消费者会记录我自己消费到了哪里，这个就是消费者位移；（消息者位移其实并不是记录在消费者端的，而是记录在zk或者kafka中的）；</p><p>分区位移是一个常量，在消息写入到 Partition 中之后，就不变了。所以分区位移没什么好研究的。</p><p>我们主要看一看：消费者位移</p><h3 id="消费者位移"><a href="#消费者位移" class="headerlink" title="消费者位移"></a>消费者位移</h3><p>之前介绍过，消费者组是怎么维护 消费者位移（Consumer Offset） 的，在低版本中，Consumer Offset 是维护在 ZK 中的，在后续版本中，是记录在 Broker 中的一个特殊的 Topic 中，这个 Topic 叫做：位移主题（__consumer_offset）</p><p>__consumer_offsets 在 Kafka 源码中有个更为正式的名字，叫位移主题，即 Offsets Topic。</p><h3 id="位移主题"><a href="#位移主题" class="headerlink" title="位移主题"></a>位移主题</h3><h4 id="为什么会有位移主题"><a href="#为什么会有位移主题" class="headerlink" title="为什么会有位移主题"></a>为什么会有位移主题</h4><p>对于老版本的 Kafka 来说，Consumer Offset 是保存在 ZK 中的，但是后来 Kafka 的开发者发现，Consumer Offset 的更新太过于频繁，频繁的更新会拖慢 ZK 的性能，所以在新版本的 Kafka 中，Consumer Offset 是保存在 Broker 内部的一个特殊的 Topic 中的：__consumer_offset</p><h4 id="位移主题是什么"><a href="#位移主题是什么" class="headerlink" title="位移主题是什么"></a>位移主题是什么</h4><p>是 Kafka 中的一个内部 Topic</p><p>这个 Topic 的主要作用是用来管理 Consumer Offset</p><p>Consumer Offset 管理机制其实很简单，就是将 Consumer 的位移数据作为一条条普通的 Kafka 消息，发送到 __consumer_offsets 中。</p><p>可以这么说，__consumer_offsets 的主要作用是保存 Kafka 消费者的位移信息。</p><h4 id="位移主题什么时候创建"><a href="#位移主题什么时候创建" class="headerlink" title="位移主题什么时候创建"></a>位移主题什么时候创建</h4><p>当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题。</p><h4 id="位移主题的分区和副本"><a href="#位移主题的分区和副本" class="headerlink" title="位移主题的分区和副本"></a>位移主题的分区和副本</h4><p>我们知道 __consumer_offset 虽然是内部 Topic，但是它仍然是一个 Topic ，既然是 Topic ，那么它的分区数和副本是多少呢？</p><ul><li>分区数：50；由Broker 端参数 offsets.topic.num.partitions指定</li><li>副本数：3；由Broker 端参数 offsets.topic.replication.factor指定</li></ul><h4 id="位移主题中存了什么"><a href="#位移主题中存了什么" class="headerlink" title="位移主题中存了什么"></a>位移主题中存了什么</h4><p>存了三类消息</p><ul><li>位移消息：表示当前消费者组消费的位移信息</li><li>用于保存 Consumer Group 信息的消息：比较神秘，几乎无法在搜索引擎中搜到。不过，你只需要记住它是用来注册 Consumer Group 的就可以了。</li><li>用于删除 Group 过期位移甚至是删除 Group 的消息：tombstone 消息，即墓碑消息，也称 delete mark</li></ul><p><strong>位移消息</strong></p><p>之前说过，Kafka 中有两种消息格式，<a href="#kafka%E7%9A%84%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F">kafka的消息格式</a>，那么位移主题的消息格式，其实是 Kafka 自定义的特殊消息格式。</p><p>既然是自定义的消息格式，也就说明：开发者不能随意的向这个主题发送消息，因为一旦你写入的消息不满足 Kafka 规定的格式，那么 Kafka 内部无法成功解析，就会造成 Broker 的崩溃。</p><p>那么这个主题存的到底是什么格式的消息呢？</p><p>事实上， Kafka 自定义的位移主题消息格式，其实是一个 KV 结构</p><p>K：保存 3 部分内容：&lt;Group ID，主题名，分区号&gt;  （即使是单个消费者（Standalone Consumer），也是会有groupid的）</p><p>V：Offset</p><p><strong>墓碑消息</strong></p><p>墓碑消息只出现在源码中而不暴露给你。</p><p>它的主要特点是它的消息体是 null，即空消息体。</p><p>那么，何时会写入这类消息呢？</p><p>一旦某个 Consumer Group 下的所有 Consumer 实例都停止了，而且它们的 Consumer Offset 数据都已被删除时，Kafka 会向位移主题的对应分区写入 tombstone 消息，表明要彻底删除这个 Consumer Group 的信息。</p><h4 id="怎么提交offset到位移主题"><a href="#怎么提交offset到位移主题" class="headerlink" title="怎么提交offset到位移主题"></a>怎么提交offset到位移主题</h4><p>Kafka Consumer 提交 Offset 时会写入  __consumer_offset 这个 Topic</p><p>那 Consumer 是怎么提交位移的呢？</p><p>目前 Kafka Consumer 提交位移的方式有两种：自动提交位移和手动提交位移。</p><h5 id="自动提交位移"><a href="#自动提交位移" class="headerlink" title="自动提交位移"></a>自动提交位移</h5><ul><li>设置 Consumer 端参数：enable.auto.commit</li><li>设置 Consumer 端参数：auto.commit.interval.ms</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group.id"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"auto.commit.interval.ms"</span><span class="token punctuation">,</span> <span class="token string">"2000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>     consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"offset = %d, key = %s, value = %s%n"</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="手动提交位移"><a href="#手动提交位移" class="headerlink" title="手动提交位移"></a>手动提交位移</h5><ul><li>设置 Consumer 端参数：enable.auto.commit</li><li>然后我们就需要手动提交位移了，手动提交位移，Kafka提供了两种方式：同步提交方式和异步提交方式</li></ul><h6 id="同步提交方式"><a href="#同步提交方式" class="headerlink" title="同步提交方式"></a>同步提交方式</h6><ul><li>KafkaConsumer#commitSync()</li><li>提交失败了，会自动重试，再次提交，所以会影响消费性能</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理消息</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CommitFailedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理提交失败异常</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="异步提交方式"><a href="#异步提交方式" class="headerlink" title="异步提交方式"></a>异步提交方式</h6><ul><li>KafkaConsumer#commitAsync()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理消息</span>    consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>offsets<span class="token punctuation">,</span> exception<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">handle</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="同步提交方式-异步提交方式"><a href="#同步提交方式-异步提交方式" class="headerlink" title="同步提交方式+异步提交方式"></a>同步提交方式+异步提交方式</h6><ul><li>同步会出现的问题：是阻塞的，会降低 Consumer 的 TPS ；好处是会自动重试，提交不成功的话，不会拉取新的消息；</li><li>异步会出现的问题：提交异常的话，不会重试；会导致消息重复消费</li><li>怎么办呢？结合两者，先使用异步提交一次，如果失败了，finally里使用同步方式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">process</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理消息</span>        <span class="token function">commitAysnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用异步提交规避阻塞</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">handle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理异常</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后一次提交使用同步阻塞式提交</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="公司内部使用"><a href="#公司内部使用" class="headerlink" title="公司内部使用"></a>公司内部使用</h5><p>在公司内部默认是使用：手动提交位移</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>optionalConfig<span class="token punctuation">.</span><span class="token function">isTransactional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable.auto.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumeOptionalConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//....</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> transactional <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然公司内部使用的手动提交，那么在哪里提交的位移呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">commitInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//公司是为：每一个Consumer开了一个线程，后台手动提交位移</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commitOffsetThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionalConsumer<span class="token punctuation">.</span>CommitOffsetThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commitOffsetThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这是线程真正提交位移的方式，提交到 ZK 的</span><span class="token keyword">long</span> nextOffset <span class="token operator">=</span> currentOffset <span class="token operator">+</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ZookeeperConsumerConnector</span><span class="token punctuation">)</span><span class="token class-name">TransactionalConsumer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>connector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitOffsetToZooKeeper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicAndPartition</span><span class="token punctuation">(</span><span class="token class-name">TransactionalConsumer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">)</span><span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"commit offset: topic:%s, partition:%d, nextOffset: %s"</span><span class="token punctuation">,</span> <span class="token class-name">TransactionalConsumer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>topic<span class="token punctuation">,</span> partition<span class="token punctuation">,</span> nextOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Offset提交导致的问题"><a href="#Offset提交导致的问题" class="headerlink" title="Offset提交导致的问题"></a>Offset提交导致的问题</h5><p>上面说了 Offset 的提交，有两种方式：自动提交和手动提交，手动提交又分为：同步提交和异步提交</p><p>那么它们会导致什么问题呢？会不会导致消息的丢失消费和消息的重复消费？</p><p><strong>自动提交</strong></p><ul><li>自动提交会导致消息的丢失</li><li>自动提交会导致消息的重复消费</li></ul><p>为什么会导致丢失？是因为消息消费的流程是：Concumer 先 Pull 一部分消息到内存中，然后开始消费，但是需要提交给 Broker 的 Offset 是Pull下来的最大的Offset，由于提交 Offset 是自动的，有可能 Pull 下来的消息还没有消费完，Offset 已经提交了；然后如果从内存中消费出现了问题，那么会导致内存中剩余没消费就永远不会在消费了。</p><p>为什么会导致重复？是因为自动提交，默认周期是5秒，如果在第3秒的时候，Broker发生了 Rebalance，那么 Offset 就提交不上去，当 Rebalance 完成之后，这部分数据，还会被在消费一次。</p><p><strong>手动提交</strong></p><ul><li>手动提交方式，可以解决消息的重复消费和丢失问题，因为我消费一个，提交一次Offset</li><li>同步提交方式，会影响消费端的性能</li><li>异步提交方式，解决了性能问题，但是消费成功之后，位移提交失败，不会自动重试提交，如果我们在 callback 中手动重试，又有可能导致提交上去的是一个老的 Offset</li><li>异步+同步方式：每次提交Offset都是异步的，然后在 finally 中同步提交一次，可以完美避免以上问题</li></ul><p>怎么避免的呢？消费者 poll 方法内部有维护一个不可见的指针，commitAysnc 方法异步提交不管是否成功，poll 仍然能根据自己维护的指针位移消费数据，最后在finally内用同步方法， 同步最新的 Offset。 这样提交上去的就不是老的 Offset</p><p>如果你选择的是自动提交位移，那么就可能存在一个问题：只要 Consumer 一直启动着，它就会无限期地向位移主题写入消息。导致磁盘爆满；因为自动提交位移是后台定时提交的（auto.commit.interval.ms默认是5s）；</p><p>那么满了怎么办？满了就删除，怎么删除呢？</p><h4 id="位移主题中的过期数据（过期位移）"><a href="#位移主题中的过期数据（过期位移）" class="headerlink" title="位移主题中的过期数据（过期位移）"></a>位移主题中的过期数据（过期位移）</h4><p>我们知道所有的位移数据都是保存在 位移主题 中的，如果不删除的话，位移主题就会无限的膨胀</p><p>为了避免该主题无限期膨胀。Kafka 会定期的清理位移主题中的数据。</p><p><strong>那么什么样的数据被称为过期数据呢？</strong></p><p>我们知道位移主题中存了三类消息，这里以 位移消息 为例；</p><p>位移消息的消息格式是Map格式，key是 groupid+topic+partition ；value是位移数据</p><p>举个例子说：</p><p>一个消费者组（假设groupid为：consumer_group_1），这个消费者组消费一个 Topic（假设消费：topic_a）；然后这个 Topic 有3个 Partition；</p><p>生产者 源源不断的向 Topic 中写数据，消费者组不停地消费数据，消费一个数据，就向 位移主题 中发一个位移消息；</p><p>那么这里的位移消息可能就是下面这样的：</p><p>consumer_group_1+topic_a+partition_1  ：  2345</p><p>consumer_group_1+topic_a+partition_1  ：  2346</p><p>consumer_group_1+topic_a+partition_1  ：  2347</p><p>。。。。。</p><p>最终，我们就会发现，同一个key就会存在很多数据，而且只有最后一条数据，才是有效的。那么之前的数据，都<strong>被称为过期数据</strong>；</p><p>再次之外，还有一种情况：</p><p>在 Broker 端有一个参数：<code>offsets.retention.minutes</code>,这个参数表明了 offset 的保留时间，什么意思呢？</p><p>就是说：我们提交到 位移主题 中的消息，并不会永远的保存，在超过了这个配置时间后，Kafka后台有一个线程，就会把这个Offset删掉</p><p>这个值一般是 7 天。</p><p>也就是说：如果你的消费者7天都没有上线了，或者7天都没有提交 offset 了，Kafka就会把这个消费者组的 位移数据 判定为过期数据。并删除</p><h4 id="位移主题中的过期数据（过期位移）清理"><a href="#位移主题中的过期数据（过期位移）清理" class="headerlink" title="位移主题中的过期数据（过期位移）清理"></a>位移主题中的过期数据（过期位移）清理</h4><p>在上面我们知道了 位移主题 中的过期数据有两类：</p><ul><li>一类是：同一个<code>key</code>的过期数据</li><li>一类是：超过了<code>offsets.retention.minutes</code>的过期数据</li></ul><p><strong>第一类过期数据，Kafka是怎么清理的呢？</strong></p><p>答案就是 Compaction。</p><p>国内很多文献都将其翻译成压缩，我个人是有一点保留意见的。</p><p>在英语中，压缩的专有术语是 Compression，它的原理和 Compaction 很不相同，我更倾向于翻译成压实，或干脆采用 JVM 垃圾回收中的术语：整理。</p><p>它的原理很简单：就是将：同一个 &lt;Group ID，主题名，分区号&gt; 的 Offset 进行压实整理，只保留最新的</p><img src="kafka从入门到入土.assets/image-20220828155424662.png" alt="image-20220828155424662" style="zoom: 50%;" /><p>图中位移为 0、2 和 3 的消息的 Key 都是 K1。Compact 之后，分区只需要保存位移为 3 的消息，因为它是最新发送的。</p><p>Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可压缩数据。这个后台线程叫 Log Cleaner。</p><p><strong>第二类过期数据，Kafka是怎么清理的呢？</strong></p><p>上面说到，Kafka有一个后台线程：Log Cleaner。</p><p>这个线程除了会清理第一类过期数据之外，还会清理第二类过期数据。</p><p>很多实际生产环境中都出现过位移主题无限膨胀占用过多磁盘空间的问题，如果你的环境中也有这个问题，我建议你去检查一下 Log Cleaner 线程的状态，通常都是这个线程挂掉了导致的。</p><p>Kafka 定期自动删除过期位移的条件就是，组要处于 Empty 状态（消费者组的状态机）。因此，如果你的消费者组停掉了很长时间（超过 7 天），那么 Kafka 很可能就把该组的位移数据删除了</p><h4 id="位移提交失败怎么办"><a href="#位移提交失败怎么办" class="headerlink" title="位移提交失败怎么办"></a>位移提交失败怎么办</h4><p>一般的失败，API会自动重试；</p><p>但是有一个异常叫做 CommitFailedException，这个异常抛出，说明位移的提交出现了大问题，需要人工介入了</p><p>那么这个异常是啥意思呢？什么时候会产生呢？产生了之后要怎么处理呢？</p><p><strong>什么是 CommitFailedException</strong></p><blockquote><p>Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. </p><p>This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. </p><p>You can address this either by increasing max.poll.interval.ms or by reducing the maximum size of batches returned in poll() with max.poll.records.</p></blockquote><p>翻译过来就是：</p><blockquote><p>本次提交位移失败了，原因是消费者组已经开启了 Rebalance 过程，并且将要提交位移的分区分配给了另一个消费者实例。</p><p>出现这个情况的原因是：你的消费者实例连续两次调用 poll 方法的时间间隔超过了期望的 max.poll.interval.ms 参数值。这通常表明，你的消费者实例花费了太长的时间进行消息处理，耽误了调用 poll 方法。</p><p>你可以通过：增加期望的时间间隔 max.poll.interval.ms 参数值 或者 减少 poll 方法一次性返回的消息数量，即减少 max.poll.records 参数值。</p></blockquote><p><strong>那么什么时候会抛出这个异常呢？</strong></p><p>从源代码方面来说，CommitFailedException 异常通常发生在手动提交位移时，即用户显式调用 KafkaConsumer.commitSync() 方法时。</p><p>从使用场景来说，有两种典型的场景可能遭遇该异常。</p><p>场景一</p><ul><li><p>当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。</p></li><li><p>模拟异常产生：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">…<span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>…props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"max.poll.interval.ms"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"test-topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span>     consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用Thread.sleep模拟真实的消息处理逻辑</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>场景二</p><ul><li>消费者组 Consumer Group  和 独立消费者 Standalone Consumer 拥有了相同的 group.id，当独立消费者程序手动提交位移时，Kafka 就会立即抛出 CommitFailedException 异常，因为 Kafka 无法识别这个具有相同 group.id 的消费者实例，于是就向它返回一个错误，表明它不是消费者组内合法的成员。</li><li>这种情况一般出现在很多部门消费同一个 Kafka 集群导致的，各个部门的消费者命名重复了，导致相同的 group.id</li></ul><p><strong>当前当异常出现了，我们应该怎么办呢？</strong></p><p>怎么解决问题，要先知道问题是怎么出现的。</p><p>比如在 场景一 中，我们知道产生问题的原因是：两次 poll() 方法调用的间隔超过了 max.poll.interval.ms</p><p>那么就简单了，针对 场景一 ，我们可以：</p><ul><li><strong>调大 max.poll.interval.ms 这个间隔时间</strong>，默认时间是 5分钟</li><li><strong>减少每次 poll() 拉取的消息数量</strong>：我们知道一次 poll() 方法，默认拉 500 条，因为拉取的太多了，消费的慢，所以导致两次 poll() 时间间隔太长</li><li>接第二条，‘消费的慢’，那我们就提到消息速率，<strong>优化代码，减少每条消息的处理时间</strong>，提高TPS</li><li>除了优化代码，提交消费速度，还可以<strong>使用多线程，提高消费速度</strong>，但是要注意多线程下的位移提交问题</li></ul><p>针对场景二呢，上面四个办法就不能用了，不过一般大公司下，消费者都是需要申请的，如果重复了，一般是申请不了的。</p><h2 id="多线程消费"><a href="#多线程消费" class="headerlink" title="多线程消费"></a>多线程消费</h2><h3 id="Kafka-Java-Consumer-的单线程设计"><a href="#Kafka-Java-Consumer-的单线程设计" class="headerlink" title="Kafka Java Consumer 的单线程设计"></a>Kafka Java Consumer 的单线程设计</h3><p>为什么 Kafka Java Consumer 要设计成单线程，看一下发展历史就明白了了</p><p>在目前的 KafkaConsumer 的API出现之前，有一个 Scala 版本的 Consumer 的API，这组 Scale 的API 被称为老版本 Consumer</p><p>在老版本 Consumer 中，Consumer 的设计是多线程的架构：</p><ul><li>每个 Consumer 实例在内部为所有订阅的 Topic 分区，创建对应的消息获取线程（就是一个分区一个线程），称为 Fetcher 线程</li><li>老版本的 Consumer 同时也是阻塞的，Consumer 实例启动后，内部会创建阻塞式的消息获取迭代器</li></ul><p>那么为什么后来变成单线程的了呢？</p><ul><li>主要是因为老版本的 Consumer 是阻塞的</li><li>而在大部分业务场景下，比如对数据的过滤，连接，分组，就不能是阻塞式的。</li><li>所以在新版的 Consumer 下，Kafka 设计了 单线程+轮训 的机制</li></ul><p>采用单线程还有另外一个考虑</p><ul><li>就是单线程可以简化 Consumer 的设计，在任何编程语言中，单线程都比多线程更方便维护</li></ul><p>不过，虽然 Consumer 的设计是单线程的，但是并不意味着我们就不能多线程了。</p><p>虽然 KafkaConsumer 的类的设计是单线程的，而且<strong>不是线程安全</strong>的。但是只是说明 拉取消息 的逻辑是单线程的</p><p>但是消息拉取之后，怎么处理消息，完全是由开发者决定的，此时可以<strong>手动开发多线程</strong>进行消费</p><h3 id="多线程方案"><a href="#多线程方案" class="headerlink" title="多线程方案"></a>多线程方案</h3><p>总体来说有两种方案。</p><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a><strong>方案一</strong></h4><p>消费者程序启动多个线程，每个线程维护专属的 KafkaConsumer 实例，负责完整的消息获取、消息处理流程。</p><p>简单地说：一个线程负责一个分区</p><img src="kafka从入门到入土.assets/image-20230214112054515.png" alt="image-20230214112054515" style="zoom: 33%;" /><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a><strong>方案二</strong></h4><p>消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑</p><p>简单的说：一个或多个线程负责拉取消息，多个线程负责处理消息</p><img src="kafka从入门到入土.assets/image-20230214112223276.png" alt="image-20230214112223276" style="zoom:33%;" /><h4 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a><strong>方案对比</strong></h4><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>方案一</td><td>方便实现</td><td>占用更多的系统资源</td></tr><tr><td>方案一</td><td>速度快，没有线程间的交互开销</td><td>线程数受限于 Topic 的分区数（最多一个分区一个线程），扩展性差</td></tr><tr><td>方案一</td><td>易于维护分区间的消息顺序</td><td>线程自己拉取消息，自己处理消息，可能导致超时，引发Rebalance</td></tr><tr><td>方案二</td><td>可独立扩展获取消息线程数和处理消息线程数</td><td>实现难度高</td></tr><tr><td>方案二</td><td>伸缩性好</td><td>难以维护分区内的消息消费顺序</td></tr><tr><td>方案二</td><td></td><td>处理链路长，不利于 Offset 的提交管理</td></tr></tbody></table><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h4><p>方案一</p><ul><li>这段代码创建了一个 Runnable 类，表示执行消费获取和消费处理的逻辑。每个 KafkaConsumerRunner 类都会创建一个专属的 KafkaConsumer 实例。在实际应用中，你可以创建多个 KafkaConsumerRunner 实例，并依次执行启动它们，以实现方案 1 的多线程架构。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> closed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaConsumer</span> consumer<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ConsumerRecords</span> records <span class="token operator">=</span>         consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//  执行消息处理逻辑</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WakeupException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// Ignore exception if closing</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> e<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>             consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// Shutdown hook which can be called from a separate thread</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         consumer<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案二</p><ul><li>这段代码最重要的地方是最后一行：当 Consumer 的 poll 方法返回消息后，由专门的线程池来负责处理具体的消息。调用 poll 方法的主线程不负责消息处理逻辑，这样就实现了方案 2 的多线程架构。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executors<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">int</span> workerNum <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>executors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>  workerNum<span class="token punctuation">,</span> workerNum<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> records <span class="token operator">=</span>     consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConsumerRecord</span> record <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    executors<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重平衡与协调者"><a href="#重平衡与协调者" class="headerlink" title="重平衡与协调者"></a>重平衡与协调者</h2><h3 id="什么是重平衡"><a href="#什么是重平衡" class="headerlink" title="什么是重平衡"></a>什么是重平衡</h3><p>Rebalance 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区。</p><p>比如某个 Group 下有 20 个 Consumer 实例，它订阅了一个具有 100 个分区的 Topic。正常情况下，Kafka 平均会为每个 Consumer 分配 5 个分区。这个分配的过程就叫 Rebalance。</p><h3 id="什么时候会重平衡"><a href="#什么时候会重平衡" class="headerlink" title="什么时候会重平衡"></a>什么时候会重平衡</h3><ul><li>Consumer Group 内 Consumer实例 数量发生变化（新增或减少）；</li><li>Consumer Group 订阅的 Topic 数发生变化；</li><li>Consumer Group 订阅的 Topic 的 Partition 数量发生变化</li></ul><h3 id="重平衡策略"><a href="#重平衡策略" class="headerlink" title="重平衡策略"></a>重平衡策略</h3><ul><li>举例：比如组内有2个消费者，这个组消费 TopicA 和 TopicB ,其中 Consumer-1 消费 TopicA，Consumer-2 消费 TopicB，当该 Consumer Group 新订阅一个 TopicC 的时候，会不会 Consumer-1 消费到 TopicB，Consumer-2 消费到 TopicA</li></ul><p>Kafka 有三种策略保证重平衡后的公平</p><p><strong>Rnage 分配策略</strong></p><p>Range分配策略是面向每个 Topic 的，首先会对同一个 Topic 里面的 Partition 按照序号进行排序，并把消费者线程按照字母顺序进行排序。然后用分区数除以消费者线程数量来判断每个消费者线程消费几个分区。如果除不尽，那么前面几个消费者线程将会多消费一个分区。 </p><p><strong>RoundRobin策略</strong></p><p>RoundRobin策略的原理是将 Consumer Group 内所有 Consumer 以及订阅的所有 Topic 的 Partition 按照字典序排序，然后通过轮询算法逐个将分区以此分配给每个消费者。 使用RoundRobin分配策略时会出现两种情况： </p><ul><li><p>如果同一消费组内，所有的消费者订阅的消息都是相同的，那么 RoundRobin 策略的分区分配会是均匀的。</p></li><li><p>如果同一消费者组内，所订阅的消息是不相同的，那么在执行分区分配的时候，就不是完全的轮询分配，有可能会导致分区分配的不均匀。如果某个消费者没有订阅消费组内的某个 topic，那么在分配分区的时候，此消费者将不会分配到这个 topic 的任何分区。</p></li></ul><p><strong>Sticky分配策略</strong></p><p>Sticky分配策略，这种分配策略是在 Kafka 的 0.11.X 版本才开始引入的，是目前最复杂也是最优秀的分配策略。 Sticky分配策略的原理比较复杂，它的设计主要实现了两个目的： </p><ul><li><p>分区的分配要尽可能的均匀；</p></li><li><p>分区的分配尽可能的与上次分配的保持相同。 如果这两个目的发生了冲突，优先实现第一个目的。</p></li></ul><h3 id="什么是协调者Coordinator"><a href="#什么是协调者Coordinator" class="headerlink" title="什么是协调者Coordinator"></a>什么是协调者Coordinator</h3><p>所谓协调者，在 Kafka 中对应的术语是 Coordinator，它专门为 Consumer Group 服务，负责为 Group 执行 Rebalance 以及提供位移管理和组成员管理等。</p><ul><li><p>协调者 coordinators 是协调管理 Consumer Group 的一个程序，运行在broker上的</p></li><li><p>每一个broker在启动时都会启动 coordinator 组件（coordinator程序），也就是说每个 Broker 都有具备称为 Coordinator 的能力</p></li></ul><p>具体来讲，Consumer 端应用程序在提交位移时，其实是向 Coordinator 所在的 Broker 提交位移。</p><p>同样地，当 Consumer 应用启动时，也是向 Coordinator 所在的 Broker 发送各种请求，然后由 Coordinator 负责执行消费者组的注册、成员管理记录等元数据管理操作。</p><h3 id="消费者组是怎么找到自己的coordinator的"><a href="#消费者组是怎么找到自己的coordinator的" class="headerlink" title="消费者组是怎么找到自己的coordinator的"></a>消费者组是怎么找到自己的coordinator的</h3><p>既然 Coordinator 是运行在 Broker上 的一个程序，那么一个消费者组，是怎么找到自己的 Coordinator 的呢？</p><p>在<a href="#%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%8ETCP%E8%BF%9E%E6%8E%A5">消费者与TCP连接</a>这一节中，我们知道消费者在启动的时候，会创建三类 TCP 连接</p><ul><li>第一类：与负载最小的 Broker 创建连接，发送 FIndCoordinator 请求，希望该 Broker 告诉自己谁是我的协调者；</li><li>第二类：与 Coordinator 创建TCP连接，加入组，分配方案，位移获取和提交等</li><li>第三类：与 要消费的分区的副本所在 Broker 创建 TCP 连接，真正开始消费数据</li></ul><p>所以，消费者组找到自己的 Coordinator 是在第一类 TCP 请求中找到的</p><p>那么 具体是怎么找到的呢？是通过之前说过的 __consumer_offset 这个主题来找的</p><p>分为两步</p><ul><li>获取当前 Consumer Group 的 groupid，然后hash得到hash值；</li><li>获取__consumer_offset 的分区数，默认是50</li><li>计算 ：abs ( hash % 50 ) &#x3D; 分区号</li><li>然后，找到这个分区号的 leader 副本所在的 broker ；这个broker就是这个消费者的coordinator</li></ul><h3 id="重平衡的缺点"><a href="#重平衡的缺点" class="headerlink" title="重平衡的缺点"></a>重平衡的缺点</h3><ul><li>会STW（stop the world）：消费者会全部停止消费</li><li>时间太慢了，几百个消费者重平衡一次，要几个小时</li><li>Rebalance 的设计是要求所有 Consumer 实例共同参与，全部重新分配所有分区</li><li>在 Rebalance 过程中，所有 Consumer 实例都要参与，所以在整个过程中都不能消费任何消息，因此它对 Consumer 的 TPS 影响很大</li></ul><h3 id="避免消费者组重平衡"><a href="#避免消费者组重平衡" class="headerlink" title="避免消费者组重平衡"></a>避免消费者组重平衡</h3><p>首先，明确一个概念，目前Rebalance的弊端（慢，STW）这2个弊端，社区是没有办法解决的；</p><p>针对Rebalance的效率低的情况，社区采用了StickyAssignor策略来提升性能；</p><p>既然无法解决，那我们只能尽量避免，怎么避免呢？就要从导致Rebalance发生的三种情况来看</p><ul><li>组成员数量发生变化（99%的Rebalance都是这个原因）</li><li>订阅主题数量发生变化（一般是程序开发者主动操作，无法避免）</li><li>订阅主题的分区数发生变化（一般是程序开发者主动操作，无法避免）</li></ul><p>组成员数量发生变化，变化分为两种，一种是增加，一种是减少</p><ul><li>增加：一般都是程序开发者主动操作，比如为了提升topic的消费速率，无法避免</li><li>减少：如果是主动停掉的，那自不必说，无法避免；</li><li>减少：不是主动停掉的，是被 Coordinator 错误地认为“已停止”从而被“踢出”Group。如果是这个原因导致的 Rebalance，我们就不能不管了。</li></ul><p><strong>什么时候coordinator会认为consumer实例已停止</strong></p><ul><li>Coordinator 没有收到 Consumer 的心跳，就会让 Consumer 离组，重新 Rebalance<ul><li>Consumer 端有个参数，叫 session.timeout.ms，默认10秒；</li><li>Coordinator 在10s内没有收到 Consumer 的心跳，就Rebalance</li><li>心跳是consumer主动给coordinator的，那么多久一次呢？是由参数：heartbeat.interval.ms控制的；</li><li>推荐配置：session.timeout.ms&#x3D;6s，heartbeat.interval.ms&#x3D;2s：要保证 Consumer 实例在被判定为“dead”之前，能够发送至少 3 轮的心跳请求</li></ul></li><li>Consumer 实例在一定时间内消费不完已经 pull() 下来的消息，就会主动离组，重新Rebalance<ul><li>Consumer 端有个参数，max.poll.interval.ms 参数，默认5分钟</li><li>一个consumer在5分钟内，没有消费完拉取的数据，就Rebalance</li></ul></li><li>consumer端的GC情况</li></ul><p>standalone consumer 就没有 rebalance 一说了。 它的特点主要是灵活。</p><p>虽然社区一直在改进rebalance的性能，但大数据量下consumer group机制依然有很多弊病（比如rebalance太慢等）</p><p>所以很多大数据框架(Spark &#x2F;Flink)的kafka connector并不使用group机制，而是使用standalone consumer</p><h3 id="怎么排查生产是否重平衡过多"><a href="#怎么排查生产是否重平衡过多" class="headerlink" title="怎么排查生产是否重平衡过多"></a>怎么排查生产是否重平衡过多</h3><p>主动去排查：去找Coordinator所在的broker日志，如果经常发生rebalance，会有类似于”(Re)join group” 之类的日志</p><p>被动排查：一般 Rebalance 过多，会降低消费者能力，间接的就会出现消息堵，可以配置相关告警</p><h3 id="重平衡核心全流程"><a href="#重平衡核心全流程" class="headerlink" title="重平衡核心全流程"></a>重平衡核心全流程</h3><p>重平衡是怎么做到的？</p><p>在 Kafka 中，每个 Consumer 都会通过<strong>心跳线程</strong>，定期的向 Coordinator 汇报自己的状态；</p><p>同时 Coordinator 也会通过<strong>心跳线程</strong>，告诉 Consumer ：我收到了你的汇报；</p><p>如果 Consumer 超时没有汇报；说明这个 Cnnsumer 有问题了，此时 Coordinator 就会开启重平衡</p><p>Coordinator 会通过<strong>心跳线程</strong>，向这个 Consumner 所在的 Group 下的所有 Consumer，发送消息：<strong>REBALANCE_IN_PROGRESS</strong></p><p>当 Consumer 收到这种消息之后，就知道要开启重平衡了</p><p>而 Coordinator 具体是怎么实现重平衡的呢？</p><p>其实是通过控制 Consumer Group 的状态来完成重平衡的。这是<strong>理解重平衡的基础</strong>。</p><p>下面我们就来看看 消费者组的状态机，这是<strong>理解重平衡的基础</strong>；</p><h4 id="消费者组的状态机"><a href="#消费者组的状态机" class="headerlink" title="消费者组的状态机"></a>消费者组的状态机</h4><p>消费者组的状态主要有以下 五个：</p><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>Empty</td><td>组内没有任何成员，但消费者可能存在已经提交的数据，并且未过期：<a href="#%E4%BD%8D%E7%A7%BB%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84%E8%BF%87%E6%9C%9F%E6%95%B0%E6%8D%AE%EF%BC%88%E8%BF%87%E6%9C%9F%E4%BD%8D%E7%A7%BB%EF%BC%89">位移主题中的过期数据（过期位移）</a></td></tr><tr><td>Dead</td><td>组内没有任何成员，Coordinator 已经把这个消费者组的元数据信息删除了</td></tr><tr><td>PreparingRebalance</td><td>消费者组准备开启重平衡，此时所有成员都要重新申请加入组</td></tr><tr><td>CompletingRebalance</td><td>消费者组下的所有成员都已经加入，等待Leader分配方案，老版本中这个状态叫：AwatingSync</td></tr><tr><td>Stable</td><td>消费者组的稳定状态，表示重平衡已经完成，可以正常开启消费了</td></tr></tbody></table><pre class="mermaid">stateDiagram    direction LR    Empty-->Dead: 组信息过期被删除    Empty-->PreparingRebalance:准备开启rebalance    PreparingRebalance-->Dead:位移主题分区Leader发生变化    PreparingRebalance-->Empty:组内所有成员离组    PreparingRebalance-->CompletingRebalance:有成员入组    CompletingRebalance-->Dead:位移主题分区Leader发生变化    CompletingRebalance-->PreparingRebalance:成员加入或离开    CompletingRebalance-->Stable:Leader完成分配    Stable-->Dead:位移主题分区Leader发生变化    Stable-->PreparingRebalance:心跳过期/成员离组/新成员加入        %% 给状态添加样式    classDef badBadEvent fill:green,color:white,font-weight:bold,stroke-width:2px,stroke:yellow    class Empty badBadEvent    class PreparingRebalance badBadEvent    class CompletingRebalance badBadEvent    class Stable badBadEvent    class Dead badBadEvent</pre><p>一个消费者组最开始是 Empty 状态</p><p>当重平衡过程开启后，它会被置于 PreparingRebalance 状态等待成员加入</p><p>之后变更到 CompletingRebalance 状态等待分配方案</p><p>最后流转到 Stable 状态完成重平衡</p><p>当有新成员加入或已有成员退出时，消费者组的状态从 Stable 直接跳到 PreparingRebalance 状态，此时，所有现存成员就必须重新申请加入组。</p><p>当所有成员都退出组后，消费者组状态变更为 Empty</p><h4 id="重平衡流程"><a href="#重平衡流程" class="headerlink" title="重平衡流程"></a>重平衡流程</h4><h5 id="场景一：新成员入组"><a href="#场景一：新成员入组" class="headerlink" title="场景一：新成员入组"></a>场景一：新成员入组</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 B    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员1->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 A    协调者-->>成员2: joinGroup响应：你好成员2，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员1->主题A，成员2->主题B}    协调者-->>成员1: joinGroup响应：你好成员1，你已成功入组，当前组的Leader是成员2，请等待分配方案    成员1->>协调者: syncGroup请求：你好协调者，我是成员1，等待分配方案    成员2->>协调者: syncGroup请求：你好协调者，我是成员2，也是这个组的Leader<br/>以下是我的分配方案：{成员1->主题A分区0，成员2->主题B分区0}    协调者-->>成员1: syncGroup响应：你好成员1，你负责消费主题A的0分区    协调者-->>成员2: syncGroup响应：你好成员2，你负责消费主题B的0分区    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到</pre><h5 id="场景二：组成员主动离组"><a href="#场景二：组成员主动离组" class="headerlink" title="场景二：组成员主动离组"></a>场景二：组成员主动离组</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到    成员1->>协调者: leaveGroup请求：你好协调者，我是组内的成员1，申请主动离组    协调者-->>成员1: leaveGroup响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员2->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 B    协调者-->>成员2: joinGroup响应：你好成员2，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员2->主题B}    成员2->>协调者: syncGroup请求：你好协调者，我是成员2，也是这个组的Leader<br/>以下是我的分配方案：{成员2->主题B分区0}    协调者-->>成员2: syncGroup响应：你好成员2，你负责消费主题B的0分区    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到</pre><h5 id="场景三：组成员崩溃离组"><a href="#场景三：组成员崩溃离组" class="headerlink" title="场景三：组成员崩溃离组"></a>场景三：组成员崩溃离组</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到    成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着    协调者-->>成员2: 心跳响应：你好成员2，已收到    note left of 成员2: 成员2此时已离线    协调者->>协调者: 发现成员2已经很长时间没有汇报了    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员1->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 A    协调者-->>成员1: joinGroup响应：你好成员1，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员1->主题A}    成员1->>协调者: syncGroup请求：你好协调者，我是成员1，也是这个组的Leader<br/>以下是我的分配方案：{成员1->主题A分区0}    协调者-->>成员1: syncGroup响应：你好成员1，你负责消费主题A的0分区    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者-->>成员1: 心跳响应：你好成员1，已收到</pre><h5 id="场景四：重平衡时协调者对组内成员提交位移的处理"><a href="#场景四：重平衡时协调者对组内成员提交位移的处理" class="headerlink" title="场景四：重平衡时协调者对组内成员提交位移的处理"></a>场景四：重平衡时协调者对组内成员提交位移的处理</h5><pre class="mermaid">sequenceDiagram    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着      协调者-->>成员1: 心跳响应：你好成员1，已收到      协调者->>协调者: 此时发现需要重平衡    成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着    协调者->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组    成员1->>成员1: 必须赶在超时时间内提交位移    note right of 成员1 : 赶在超时时间内提交位移    成员1->>协调者: 提交位移请求：你好协调者，我要提交的位移是：{....}    协调者->>成员1: 提交位移响应：你好成员1，位移数据已收到    note right of 成员1 : 如果提交失败了，这部分数据在重平衡之后就会被重新消费</pre><h4 id="重平衡的一些问题"><a href="#重平衡的一些问题" class="headerlink" title="重平衡的一些问题"></a>重平衡的一些问题</h4><p>joingroup时等待所有消费者上报订阅信息，协调者通过什么判断所有消费者都已经上报了？</p><ul><li>join group时也是有一个总的超时时间的（取所有member最大的rebalance超时时间），靠这个作为判断是否进入到下一阶段的阈值。</li><li>如果在这次 Rebalance 期间，有 消费者 超时没有上报信息，那么这个消费者会被排除在这轮 Rebalance 之外</li></ul><p>如果在超时时间之后，排除在外的 消费者 此时上报了信息，怎么办？</p><ul><li>相当于 新成员入组，重新 Rebalance</li></ul><h2 id="副本机制"><a href="#副本机制" class="headerlink" title="副本机制"></a>副本机制</h2><p>我们之前谈到过，Kafka 是有 Topic 概念的，而每个 Topic 又进一步划分成若干个 Partition。</p><p>每个 Partition 配置有若干个 Replica，Replica 的概念实际上是在 Partition 层级下定义的</p><h3 id="什么是副本"><a href="#什么是副本" class="headerlink" title="什么是副本"></a>什么是副本</h3><p>所谓副本（Replica），本质就是一个只能追加写消息的提交日志。</p><p>同一个 Partition 下的所有 Replica 保存有相同的消息序列，这些 Replica 分散保存在不同的 Broker 上，从而能够对抗部分 Broker 宕机带来的数据不可用。</p><p>在实际生产环境中，每台 Broker 都可能保存有各个 Topic 下不同 Partition 的不同 Replica，因此，单个 Broker 上存有成百上千个 Replica 的现象是非常正常的。</p><p>下图展示的是一个有 3 台 Broker 的 Kafka 集群上的副本分布情况。</p><p>从这张图中，我们可以看到，主题 1 分区 0 的 3 个副本分散在 3 台 Broker 上，其他主题分区的副本也都散落在不同的 Broker 上，从而实现数据冗余。</p><img src="kafka从入门到入土.assets/image-20230214160607518.png" alt="image-20230214160607518" style="zoom:33%;" /><h3 id="副本之间数据是怎么同步的"><a href="#副本之间数据是怎么同步的" class="headerlink" title="副本之间数据是怎么同步的"></a>副本之间数据是怎么同步的</h3><p>我们知道 Replica 是用来冗余数据的，同一个 Partiton 下的所有 Replica 的数据都应该是一模一样的，顺序都是一样的</p><p>那么这么多的 Replica，是怎么进行 Replica 之间的数据同步的呢？</p><p>Kafka使用的解决方案：就是采用<strong>基于领导者（Leader-based）的副本机制</strong></p><img src="kafka从入门到入土.assets/image-20230214161048286.png" alt="image-20230214161048286" style="zoom:33%;" /><ul><li>在 Kafka 中，副本分成两类：领导者副本（Leader Replica）和追随者副本（Follower Replica）。每个分区在创建时都要选举一个 Leader Replica，剩余的是 Follower Replica</li><li>Kafka 的副本机制比其他分布式系统要更严格一些。在 Kafka 中，Follower Replica 是不对外提供服务的。所有的读写请求都必须由 Leader Replica所在的 Broker负责处理。而 Follower 的任务只有一个：就是从 Leader 异步拉取消息，并写入到自己的提交日志中，从而实现与 Leader 的同步。</li><li>当 Leader Replica 挂掉了，或者说 Leader Replica 所在的 Broker 宕机时，Kafka 依托于 ZK 进行新的 Leader Replica 的选举</li></ul><p>你一定要特别注意上面的第二点，即追随者副本是不对外提供服务的。</p><p>原因归咎于两点：方便 Read-your-writes ，同时方便实现单调读（Monotonic Reads）</p><h3 id="Follower不提供服务的优点"><a href="#Follower不提供服务的优点" class="headerlink" title="Follower不提供服务的优点"></a>Follower不提供服务的优点</h3><p>有两个好处</p><h4 id="方便实现“Read-your-writes”"><a href="#方便实现“Read-your-writes”" class="headerlink" title="方便实现“Read-your-writes”"></a>方便实现“Read-your-writes”</h4><p>所谓 Read-your-writes，顾名思义就是，当你使用生产者 API 向 Kafka 成功写入消息后，马上使用消费者 API 去读取刚才生产的消息。</p><p>举个例子，比如你平时发微博时，你发完一条微博，肯定是希望能立即看到的，这就是典型的 Read-your-writes 场景。如果允许追随者副本对外提供服务，由于副本同步是异步的，因此有可能出现追随者副本还没有从领导者副本那里拉取到最新的消息，从而使得客户端看不到最新写入的消息。</p><h4 id="方便实现单调读（Monotonic-Reads）"><a href="#方便实现单调读（Monotonic-Reads）" class="headerlink" title="方便实现单调读（Monotonic Reads）"></a>方便实现单调读（Monotonic Reads）</h4><p>什么是单调读呢？就是对于一个消费者用户而言，在多次消费消息时，它不会看到某条消息一会儿存在一会儿不存在。</p><p>如果允许追随者副本提供读服务，那么假设当前有 2 个追随者副本 F1 和 F2，它们异步地拉取领导者副本数据。倘若 F1 拉取了 Leader 的最新消息而 F2 还未及时拉取，那么，此时如果有一个消费者先从 F1 读取消息之后又从 F2 拉取消息，它可能会看到这样的现象：第一次消费时看到的最新消息在第二次消费时不见了，这就不是单调读一致性。但是，如果所有的读请求都是由 Leader 来处理，那么 Kafka 就很容易实现单调读一致性。</p><p>现在我们知道了 Replica 的同步机制，和 Follower Replica 不对外提供服务的原因，接下来还有两个问题，我们一一来看：</p><p>Kafka 是怎么保证 Replica 的数据一致性的</p><p>当 Leader Replica 挂掉之后，Kafka 是怎么进行选举新的 Leader Replica 的</p><h3 id="怎么保证-副本数据一致性"><a href="#怎么保证-副本数据一致性" class="headerlink" title="怎么保证 副本数据一致性"></a>怎么保证 副本数据一致性</h3><p>我们知道 Kafka 的 Partition 有很多个 Replica</p><p>Replica 分为 Leader Replica 和 Follower Replica</p><p>Leader Replica 对外提供读写服务，Follower Replica 只是从 Leader Replica 异步同步数据，不对外提供任何服务；</p><p>那么，Kakfa是怎么保证这些 Replica 内的数据是一致的呢？</p><h4 id="In-Sync-Replicas（ISR）"><a href="#In-Sync-Replicas（ISR）" class="headerlink" title="In-Sync Replicas（ISR）"></a><strong>In-Sync Replicas（ISR）</strong></h4><p>既然 Follower Replica 是异步的方式，从Leader Replica 同步数据的，那么就一定会存在延迟；</p><p>就像 Mysql 的主从一样，主要涉及到数据同步，就一定会有延迟，无外乎：延迟的大小是多少。</p><p>Kafka 知道这个延迟是无法避免的，所以，Kafka 维护了一个集合，这个集合中保存的是：与Leader同步的Follower；</p><p>什么是与Leader同步的Follower？有同步的Follower，难道还有不同步的Follower？</p><ul><li>是的，有同步的，就有不同步的。</li><li>Kafka 有自己一套判定条件，只要 Follower Replica 满足了这个判定条件，Kafka 就认为这个 Follower 是同步的。就会放进 ISR 集合；</li><li>这个条件就是：replica.lag.time.max.ms，表示 Follower 副本能够落后 Leader 副本的最长时间间隔，默认是10S</li><li>也就是说：当 Follower 与 Leader 的同步时间差，在10秒内，Kafka就认为这个 Follower 是同步的。否则就是不同步的</li><li>ISR 集合有什么用的，主要是用来选举新的 Leader Replica 的，后面会说</li></ul><p>ISR 是一个动态调整的集合，当 Follower 落后于 Leader ，并且落后时间大于<code>replica.lag.time.max.ms</code>，Kafka 就会将这个 Follower 踢出 ISR；</p><p>同样的，当一个落后的 Follower 最终追上了 Leader ，Kafka 会将这个 Follower 在加入 ISR；</p><h4 id="ISR是怎么变化的"><a href="#ISR是怎么变化的" class="headerlink" title="ISR是怎么变化的"></a>ISR是怎么变化的</h4><p>Kafka 在启动的时候会开启两个任务</p><p>一个任务用来定期地检查是否需要调整 ISR 集合，这个周期是replica.lag.time.max.ms的一半，默认5秒；</p><p>当检测到 ISR 集合中有失效副本时，就会收缩 ISR 集合，当检查到有 Follower 的 HighWatermark （高水位）追赶上 Leader 时，就会扩充ISR。 </p><p>除此之外，当 ISR 集合发生变更的时候。还会将变更后的记录缓存到 isrChangeSet 中</p><p>另一个任务会周期性地检查 isrChangeSet，如果发现这个 isrChangeSet 有新的变更记录，那么它会在 ZK 中持久化一个节点。</p><p>然后因为 Controller（Kafka 控制器） 在这个 ZK 节点的路径上注册了一个Watcher，所以它就能够感知到ISR的变化，并向它所管理的broker发送更新元数据的请求。最后删除该ZK节点。 </p><p>Leader 副本天然就在 ISR 中</p><p>极端的情况：ISR 包含全部的 Replica，也有可能 ISR 中一个 Replica 都没有，如果一个都没有的话，说明 Leader 都挂了，此时就需要选举新的 Leader了。</p><h3 id="怎么进行选举新的-Leader-Replica"><a href="#怎么进行选举新的-Leader-Replica" class="headerlink" title="怎么进行选举新的 Leader Replica"></a>怎么进行选举新的 Leader Replica</h3><p>选举的时候，是通过 Controller（Kafka控制器）来处理的。 Coordinator（协调者）只是消费者组用来重平衡的；这两个不是一个概念；</p><p>当 ISR 不为空的时候，则选择其中一个作为新Leader，新的ISR则包含当前 ISR 中所有幸存的 Replica。</p><p>当 ISR 为空的时候，此时幸存的 Replica 都是非同步副本，也就是说：都是和 老的 Leader Replica 差距比较大的 Replica，如果此时从这些 非同步副本 中选举一个作为 Leader 的话，就会有消息丢失的风险；如果不选举，那就是 Kafka 服务不可用了。</p><p>当 ISR 为空的时候，如果进行选举，则这个选举叫做： Unclean 领导者选举，Broker 端参数 unclean.leader.election.enable 控制是否允许 Unclean 领导者选举</p><p>如果开启了  Unclean 领导者选举 ，相当于选择了可用性，牺牲了一致性；如果不选举，相当于选择了一致性，牺牲了可用性</p><p>建议不要开启，毕竟我们还可以通过其他的方式来提升高可用性。如果为了这点儿高可用性的改善，牺牲了数据一致性，那就非常不值当了。</p><h2 id="请求是怎么被处理的"><a href="#请求是怎么被处理的" class="headerlink" title="请求是怎么被处理的"></a>请求是怎么被处理的</h2><h3 id="kafka的请求分类"><a href="#kafka的请求分类" class="headerlink" title="kafka的请求分类"></a>kafka的请求分类</h3><p>之前，我们了解到 Kafka 是使用 TCP 进行通信，在TCP的基础上，Kafka定义了属于自己的请求协议：</p><p>比如常见的 PRODUCE 请求是用于生产消息的，FETCH 请求是用于消费消息的，METADATA 请求是用于请求 Kafka 集群元数据信息的等等</p><p>截止到 2.3 版本，总共有 45 种，在这 45 种请求中，可以分为两类：</p><p><strong>数据类请求</strong>：Kafka 社区把 PRODUCE 和 FETCH 这类请求称为数据类请求。</p><p><strong>控制类请求</strong>：Kafka 社区把 LeaderAndIsr、StopReplica 这类请求称为控制类请求。</p><h3 id="处理请求的方式"><a href="#处理请求的方式" class="headerlink" title="处理请求的方式"></a>处理请求的方式</h3><p>在传统的开发设计中，对一个请求的处理，很自然的就可以想到下面两种方式</p><h4 id="同步处理"><a href="#同步处理" class="headerlink" title="同步处理"></a>同步处理</h4><p>服务端收到一个消息，立即开始处理，处理完成后返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//伪代码</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法实现简单，但是有个致命的缺陷，那就是吞吐量太差。由于只能顺序处理每个请求，因此，每个请求都必须等待前一个请求处理完毕才能得到处理。这种方式只适用于请求发送非常不频繁的系统。</p><h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p>既然同步的方式效率差， 那就用异步的方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//伪代码</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Request</span> <span class="token operator">=</span> request <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法反其道而行之，完全采用异步的方式。系统会为每个入站请求都创建单独的线程来处理。这个方法的好处是，它是完全异步的，每个请求的处理都不会阻塞下一个请求。但缺陷也同样明显。为每个请求都创建线程的做法开销极大，在某些场景下甚至会压垮整个服务。</p><h3 id="Kafka-是如何处理请求的"><a href="#Kafka-是如何处理请求的" class="headerlink" title="Kafka 是如何处理请求的"></a>Kafka 是如何处理请求的</h3><p>Kafka 使用 Reactor 模式来处理请求</p><h4 id="什么是Reactor模式"><a href="#什么是Reactor模式" class="headerlink" title="什么是Reactor模式"></a>什么是Reactor模式</h4><p>Reactor 模式是 JUC 包的作者 Doug Lea 的作品，真不愧是大神。</p><p>简单来说，Reactor 模式是事件驱动架构的一种实现方式，特别适合应用于处理多个客户端并发向服务器端发送请求的场景。</p><p>Reactor 模式的架构如下图所示，图来自 Doug Lea 的PPT：<a href="#https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf">https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf</a>：</p><img src="kafka从入门到入土.assets/image-20230215172615962.png" alt="image-20230215172615962" style="zoom: 33%;" /><p>多个 Client 客户端会发送请求给到 Reactor。</p><p>Reactor 有个请求分发线程 Dispatcher ，也就是图中的 Acceptor 线程，它会将不同的请求下发到多个工作线程中处理。</p><p>Dispatcher 是 Reactor 模式的一个概念，它的实现是：Acceptor 线程，所以它俩是指同一个东西。</p><p>Acceptor 线程只是用于请求分发，不涉及具体的逻辑处理，非常得轻量级，因此有很高的吞吐量表现。</p><p>而工作线程可以根据实际业务处理需要任意增减，从而动态调节系统负载能力。</p><h4 id="Kafka-的Reactor模式"><a href="#Kafka-的Reactor模式" class="headerlink" title="Kafka 的Reactor模式"></a>Kafka 的Reactor模式</h4><img src="kafka从入门到入土.assets/image-20230215173456675.png" alt="image-20230215173456675" style="zoom:33%;" /><p>Kafka 的 Broker 端有个 SocketServer 组件，类似于 Reactor 模式中的 Dispatcher。</p><p>它也有对应的 Acceptor 线程和一个工作线程池，只不过在 Kafka 中，这个工作线程池有个专属的名字，叫网络线程池。</p><p>Kafka 提供了 Broker 端参数 num.network.threads，用于调整该网络线程池的线程数。</p><p>num.network.threads 的默认值是 3，表示每台 Broker 启动时会创建 3 个网络线程，专门处理客户端发送的请求。</p><h5 id="在Reactor模式下怎么处理请求"><a href="#在Reactor模式下怎么处理请求" class="headerlink" title="在Reactor模式下怎么处理请求"></a>在Reactor模式下怎么处理请求</h5><img src="kafka从入门到入土.assets/image-20230215192742666.png" alt="image-20230215192742666" style="zoom:50%;" /><p>上图，其中 1-7 步骤是处理请求， 7-10 是响应请求</p><p>1、客户端或者其他Broker发起请求，这里的请求可能是 数据类请求，也可能是 控制类请求</p><p>2、请求发送到 Broker，会由 SocketServer 组件开始处理</p><p>3、SocketServer 组件（Acceptor线程）开始处理</p><p>4、SocketServer 组件（Acceptor线程）会将请求分发到网络线程池，这是一个很轻量级的工作</p><p>5、网络线程池中的某个线程接收到请求，但是这个线程并不会开始处理，而是将当前请求发送到共享请求队列</p><p>6、Broker 端还有一个IO线程池，会不停的从共享请求队列中获取请求，这才是真正的开始处理请求</p><ul><li>Broker 端参数 num.io.threads 控制了这个线程池中的线程数。</li><li>目前该参数默认值是 8，表示每台 Broker 启动后自动创建 8 个 IO 线程处理请求</li><li>你可以根据实际硬件条件设置此线程池的个数</li></ul><p>7、这个请求如果是 PRODUCE 请求，就写入日志；如果是 FETCH 请求，就从磁盘或者页缓存中读取数据</p><h5 id="在Reactor模式下怎么响应请求"><a href="#在Reactor模式下怎么响应请求" class="headerlink" title="在Reactor模式下怎么响应请求"></a>在Reactor模式下怎么响应请求</h5><img src="kafka从入门到入土.assets/image-20230215192742666.png" alt="image-20230215192742666" style="zoom:50%;" /><p>上图，其中 1-7 步骤是处理请求， 7-10 是响应请求</p><p>7、这个请求如果是 PRODUCE 请求，就写入日志；如果是 FETCH 请求，就从磁盘或者页缓存中读取数据</p><p>8、如果当前这个请求<strong>可以直接返回</strong>，就会找到当时发送这个请求的线程，然后返回到这个线程的响应队列中</p><ul><li><p>什么是可以直接返回的请求？ </p></li><li><blockquote><p>再讲什么是可以直接返回的请求之前，先了解一个什么是不可以直接返回的请求？</p><p>不可以直接返回的请求，比如设置了 acks&#x3D;all 的 PRODUCE 请求</p><p>一旦设置了 acks&#x3D;all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回</p><p>此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果</p><p>这就是不能直接返回的请求。</p><p>相反的，就是可以直接返回的请求</p></blockquote></li><li><p>响应队列是网络线程池中每个线程专属的吗？</p></li><li><blockquote><p>是的。</p><p>请求队列是所有网络线程共享的，而响应队列则是每个网络线程专属的。</p><p>这么设计的原因就在于，Dispatcher 只是用于请求分发而不负责响应回传，因此只能让每个网络线程自己发送 Response 给客户端，所以这些 Response 也就没必要放在一个公共的地方。</p></blockquote></li><li><p>怎么找到当时发送这个请求的线程呢？</p></li><li><blockquote><p>在源码中，有这部分代码逻辑：RequestChannel 类的 sendResponse 方法</p><p>&#x2F;&#x2F; 找出response对应的Processor线程，即request当初是由哪个Processor线程处理的 </p><p>val processor &#x3D; processors.get(response.processor) </p><p>&#x2F;&#x2F; 将response对象放置到对应Processor线程的Response队列中 </p><p>if (processor !&#x3D; null) { </p><p>  processor.enqueueResponse(response) </p><p>}</p></blockquote></li></ul><p>8、如果当前这个请求是<strong>不可以直接返回的</strong>，就会将当前这个请求暂存到 Purgatory</p><ul><li><p>什么是不可以直接返回的请求？ </p></li><li><blockquote><p>不可以直接返回的请求，比如设置了 acks&#x3D;all 的 PRODUCE 请求</p><p>一旦设置了 acks&#x3D;all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回</p><p>此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果</p><p>这就是不能直接返回的请求。</p><p>相反的，就是可以直接返回的请求</p></blockquote></li><li><p>Purgatory 是什么？</p></li><li><blockquote><p>Purgatory 的组件，这是 Kafka 中著名的“炼狱”组件。</p><p>它是用来缓存延时请求（Delayed Request）的。</p><p>所谓延时请求，就是那些一时未满足条件，不能立刻处理的请求。</p></blockquote></li></ul><p>9、等 Purgatory 中暂存的请求，可以返回的时候，会找到当时发送这个请求的线程，返回到这个线程的响应队列中</p><ul><li><p>怎么知道是可以返回的时候？</p></li><li><blockquote><p>举个例子：比如设置了 acks&#x3D;all 的 PRODUCE 请求</p><p>一旦设置了 acks&#x3D;all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回</p><p>此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果</p><p>此时才可以返回</p></blockquote></li></ul><p>10、网络线程池的线程，会将自己响应队列中的响应数据，通过网络传输回去。</p><h3 id="控制类和数据类请求分离"><a href="#控制类和数据类请求分离" class="headerlink" title="控制类和数据类请求分离"></a>控制类和数据类请求分离</h3><p>在本小节开头，就介绍过：Kafka 的请求分类两类</p><p><strong>数据类请求</strong>：Kafka 社区把 PRODUCE 和 FETCH 这类请求称为数据类请求。</p><p><strong>控制类请求</strong>：Kafka 社区把 LeaderAndIsr、StopReplica 这类请求称为控制类请求。</p><p>在了解了 Kafka 是怎么处理请求的流程之后，思考这么一个问题：</p><p>如果当前 共享请求队列 中，已经积压了很多的数据，IO线程正在马不停蹄的处理，此时我们发送一个请求：要求一个 Replica 下线。</p><p>此时：这个要求 Replica 下线的请求是优先处理，还是顺序处理？</p><p>如果是优先处理，那共享请求队列中积压的数据，怎么办？</p><p>如果是顺序处理，如果等待的时间很长很长，Replica 一直无法下线怎么办？</p><p>所以我们需要把 控制类请求 和 数据类请求 <strong>分开处理</strong>。</p><p>这就是 控制类和数据类请求分离</p><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>举一个具体的场景：</p><p>假设我们有个主题只有 1 个分区，该分区配置了 2 个副本</p><p>其中 Leader 副本保存在 Broker 0 上，Follower 副本保存在 Broker 1 上</p><p>假设 Broker 0 这台机器积压了很多的 PRODUCE 请求</p><p>此时你如果使用 Kafka 命令强制将该主题分区的 Leader、Follower 角色互换</p><p>那么 Kafka 内部的控制器组件（Controller）会发送 LeaderAndIsr 请求给 Broker 0，显式地告诉它，当前它不再是 Leader，而是 Follower 了</p><p>而 Broker 1 上的 Follower 副本因为被选为新的 Leader，因此停止向 Broker 0 拉取消息</p><h4 id="不分离的现象"><a href="#不分离的现象" class="headerlink" title="不分离的现象"></a>不分离的现象</h4><p>如果 控制类请求 和 数据类请求 不分离</p><p>LeaderAndIsr 请求（ Leader、Follower 角色互换）就会放在 共享请求队列 的后面</p><p>如果 共享请求队列 积压了很多，我们就要等很长很长时间，才能处理到这个 控制类请求</p><p>很显然，这不是我们想要的结果</p><h4 id="分离的现象"><a href="#分离的现象" class="headerlink" title="分离的现象"></a>分离的现象</h4><p>如果 控制类请求 和 数据类请求 分离</p><p>那么在 LeaderAndIsr 发送之前积压的 PRODUCE 请求就都无法正常完成了。</p><p>这是我们想要的结果吗？</p><p>我不知道这是不是我们想要的结果，但这是目前 Kafka 的处理方式</p><p>Kafka 会优先处理 LeaderAndIsr 请求，Broker 0 就会立刻抛出 NOT_LEADER_FOR_PARTITION 异常，快速地标识这些积压 PRODUCE 请求已失败</p><h4 id="怎么设计分离"><a href="#怎么设计分离" class="headerlink" title="怎么设计分离"></a>怎么设计分离</h4><p>现在我们知道 Kafka 会优先处理 控制类请求，如果是你来设计，你会怎么让 Kafka 优先处理 控制类请求呢？</p><p>方案一：</p><p>在 Broker 中实现一个优先级队列，并赋予控制类请求更高的优先级。</p><p>这是很自然的想法，所以我本以为社区也会这么实现的，但后来我这个方案被清晰地记录在“已拒绝方案”列表中。</p><p>拒绝的原因在于，它无法处理请求队列已满的情形。当请求队列已经无法容纳任何新的请求时，纵然有优先级之分，它也无法处理新的控制类请求了</p><p>方案二：</p><p>直接将 控制类请求 替换 共享请求队列中 的最前面的数据，这样就可以优先处理控制类请求了，处理完控制类请求，再将这个数据类请求插队到队头；</p><p>这个方案是网友分享的，当然，Kafka 社区也没有采用这个方案</p><p>那么 Kafka 是怎么做的呢？</p><h4 id="Kafka是怎么分离的"><a href="#Kafka是怎么分离的" class="headerlink" title="Kafka是怎么分离的"></a>Kafka是怎么分离的</h4><p>那么，社区是如何解决的呢？</p><p>很简单，Kafka 社区实现了两套一模一样的 Reactor模型</p><p>一个用来处理 数据类型请求，一个用来处理 控制类请求；实现了两类请求的分离。</p><p>也就是说，Kafka Broker 启动后，会在后台分别创建两套网络线程池和 IO 线程池的组合，它们分别处理数据类请求和控制类请求。</p><p>至于所用的 Socket 端口，自然是使用不同的端口了，你需要提供不同的 listeners 配置，显式地指定哪套端口用于处理哪类请求。</p><h2 id="kafka控制器"><a href="#kafka控制器" class="headerlink" title="kafka控制器"></a>kafka控制器</h2><h2 id="关于高水位和Leader-Epoch的讨论"><a href="#关于高水位和Leader-Epoch的讨论" class="headerlink" title="关于高水位和Leader Epoch的讨论"></a>关于高水位和Leader Epoch的讨论</h2><p>高水位和低水位分别是什么</p><p>HW</p><p>LEO（Log End Offet）</p><p>LSO（Log Stable Offset）：事务生产者</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>为什么kafka不像mysql那样允许追随者副本（follower replica）对外提供只读服务？</p><p>kafka是怎么做到 提供一套 API 实现生产者和消费者？</p><p>kafka是怎么做到 降低网络传输和磁盘存储开销；</p><p>kafka是怎么做到 实现高伸缩性架构。</p><p>kafka为什么快，为什么高吞吐？</p><ul><li>消息日志（Log）只能追加写，避免了随机IO，改成了顺序IO，大大提高了写能力；</li></ul><p>你觉得 Kafka 未来的演进路线是怎么样的？如果你是 Kafka 社区的“掌舵人”，你准备带领整个社区奔向什么方向呢？</p><p>想你是一家创业公司的架构师，公司最近准备改造现有系统，引入 Kafka 作为消息中间件衔接上下游业务。作为架构师的你会怎么选择合适的 Kafka 发行版呢</p><p>kafka每天 1 亿条 1KB 大小的消息，保存两份且留存两周的时间，需要多大的磁盘空间？</p><p>如果需要kafka1小时内处理1TB的业务数据，在千兆网络下，需要多少台kafka机器？</p><p>kafka怎么实现的故障转移？</p><p>kafka是怎么保障大数据量均匀的分布在各个Broker上的？</p><p>kafka的零拷贝技术是什么？</p><ul><li><a href="https://blog.csdn.net/ljheee/article/details/99652448">https://blog.csdn.net/ljheee/article/details/99652448</a></li><li><a href="https://www.jianshu.com/p/835ec2d4c170">https://www.jianshu.com/p/835ec2d4c170</a></li></ul><p>broker端收到消息也会解压缩，进行消息校验，那么零拷贝还有用嘛？</p><p>consumer可以先提交offset，在处理消息嘛？</p><p>kafka的producer是在producer实例化的时候，创建的TCP连接，那么这个时候，producer都不知道要往那个topic发消息，那么就不知道要连接到哪个broker？kafka是怎么做的呢？</p><p>kafka在建立TCP连接的步骤中，有没有可以优化的地方，目前社区做的不好的地方？</p><p>丰网的kafka的消费者重复注册是怎么做的？是同一个消费者实例的多个线程，还是同一个消费者类，注册了多个bean；</p><p>重试机制会导致消息乱序吗？</p><ul><li>重试机制不会重新计算Partition信息</li><li>重试机制会导致消息乱序，但是可以通过 max.in.flight.requests.per.connection&#x3D;1 来避免，但是会导致吞吐量下降</li><li>max.in.flight.requests.per.connection：表示限制客户端在单个连接上能够发送的未响应请求的个数；</li><li>设置为 1 表示：broker收到一个请求之后，在响应之前，是不会接收别的请求的</li></ul><p>消息的分区位移是什么时候写入的？</p><p>如果一个消息写入失败了，Producer 有重试，它的Offset是新的，还是老的？</p><p>Consumer设置自动提交位移，有一个提交频率，具体的流程是怎么提交的，如果消费到了Producer重试的消息，Offset会怎么样？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kafka从入门到入土&quot;&gt;&lt;a href=&quot;#kafka从入门到入土&quot; class=&quot;headerlink&quot; title=&quot;kafka从入门到入土&quot;&gt;&lt;/a&gt;kafka从入门到入土&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; cl</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="消息中间件" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="KAFKA" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/KAFKA/"/>
    
    
    <category term="kafka" scheme="https://zspcer.gitee.io/tags/kafka/"/>
    
    <category term="生产者" scheme="https://zspcer.gitee.io/tags/%E7%94%9F%E4%BA%A7%E8%80%85/"/>
    
    <category term="消费者" scheme="https://zspcer.gitee.io/tags/%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    
    <category term="消息" scheme="https://zspcer.gitee.io/tags/%E6%B6%88%E6%81%AF/"/>
    
    <category term="中间件" scheme="https://zspcer.gitee.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>我的面试问题</title>
    <link href="https://zspcer.gitee.io/note/MYSELF/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <id>https://zspcer.gitee.io/note/MYSELF/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</id>
    <published>2023-02-17T14:32:14.310Z</published>
    <updated>2023-02-17T14:32:14.310Z</updated>
    
    <content type="html"><![CDATA[<p>redis的基本类型有哪些？<br>redis的有哪些使用场景？<br>String类型里面有bitmap，了解过吗？<br>sorted_set的底层原理是什么？<br>    跳表<br>redis的事务<br>    如果A，B两个事务，A事务修改了k1的值，然后查询k1，B事务删了k1，如果B的exec先发送完，A的exec后发送，会出现什么现象<br>    怎么解决这个现象呢？<br>缓存穿透？布隆过滤器？<br>Redis的持久化？RDB和AOF的区别<br>    RDB的原理：父子进程fork 和 copy on write； 指针指向同一个key，如果这个key修改了怎么办？<br>Redis主从中怎么保证数据的一致性（主从复制怎么实现的）<br>    - 通过RDB文件进行同步的，同步有两种方式网络和磁盘<br>    redis的管道pipline用过吗<br>    redis的内存如果用完了，会怎么样？<br>    - Redis有哪几种数据淘汰策略？<br>    - LRU<br>    - 怎么保证都是热点数据<br>    redis的集群有了解吗?<br>    普通哈希，一致性哈希（哈希环），哈希槽</p><p>一条查询语句是怎么执行的？</p><p>事务的四个特性，Mysql是怎么实现这四个特性的<br>事务有哪些隔离级别？<br>RR是怎么解决脏读的？<br>生产使用的隔离级别是哪种？<br>MySQL日志有哪几种？区别呢？</p><p>如何强制使用某个索引？<br>如果有一个很长的url存到了库中，我要利用这个字段去精确查询某行记录，怎么创建索引更好？<br>前缀索引怎么确定长度？</p><p>mysql有哪些调优方案？<br>    - 索引，使用覆盖索引，索引下推；<br>mysql会不会选错索引？选错了怎么办？<br>    - sql中手动指定索引<br>    - 删除掉走错的索引<br>mysql为什么会选错索引？<br>    - 统计不准，可以anlize table；<br>analize table准确吗？<br>    - 不准确，抽样采集的；</p><p>涉及到财务的系统设计</p><ul><li><a href="http://confluence.sf-express.com/pages/viewpage.action?pageId=189135181">http://confluence.sf-express.com/pages/viewpage.action?pageId=189135181</a></li><li>快递  银行  商家</li><li>快递根据快递单生成账单，根据账单的金额，调用银行进行打款申请，打款给商家；</li><li>快递单号，发件人，发件人银行账号，收件人，快递金额</li><li>用户可能涉及的状态：</li></ul><p>DDD的一些基本概念：</p><ul><li>实体和值对象的区别是什么？</li><li>一个查询请求过来，打到DDD后台之后，你们的分层是怎么样的，这个请求的链路是什么样子的</li><li>防腐层是什么？</li></ul><p>mysql</p><ul><li>对一个字段创建索引，是选择普通索引，还是唯一索引（buffer）？</li><li>对一个很长的字段，想精确查询，怎么建立索引？</li><li>回表？ 怎么减少回表<ul><li>有没有可能经过索引优化，避免回表过程呢？（覆盖索引）</li></ul></li><li><h2 id="索引的B-树"><a href="#索引的B-树" class="headerlink" title="索引的B+树"></a>索引的B+树</h2></li><li>mysql的事务特性<ul><li>日志</li></ul></li></ul><p>分布式的基本概念：</p><p>二阶段提交流程是什么？有什么问题？</p><p><a href="https://baijiahao.baidu.com/s?id=1698550212539924249&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1698550212539924249&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://baijiahao.baidu.com/s?id=1694171547415193602&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1694171547415193602&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://blog.csdn.net/qq_27184497/article/details/103673548">https://blog.csdn.net/qq_27184497/article/details/103673548</a></p><p><a href="https://blog.csdn.net/qq_27184497/article/details/103673548">https://blog.csdn.net/qq_27184497/article/details/103673548</a></p><p><a href="https://zhuanlan.zhihu.com/p/78599954">https://zhuanlan.zhihu.com/p/78599954</a></p><p><a href="https://www.cnblogs.com/Courage129/p/14528981.html">https://www.cnblogs.com/Courage129/p/14528981.html</a></p><p><a href="https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX">https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX</a></p><p><a href="https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX">https://www.sdk.cn/details/EmGNy6EYwpyl6WewAX</a></p><p><a href="https://zhuanlan.zhihu.com/p/61129707">https://zhuanlan.zhihu.com/p/61129707</a></p><p><a href="https://blog.csdn.net/qq_38747892/article/details/122326276">https://blog.csdn.net/qq_38747892/article/details/122326276</a></p><p><a href="https://zhuanlan.zhihu.com/p/42056183">https://zhuanlan.zhihu.com/p/42056183</a></p><p>JVM垃圾回收</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;redis的基本类型有哪些？&lt;br&gt;redis的有哪些使用场景？&lt;br&gt;String类型里面有bitmap，了解过吗？&lt;br&gt;sorted_set的底层原理是什么？&lt;br&gt;    跳表&lt;br&gt;redis的事务&lt;br&gt;    如果A，B两个事务，A事务修改了k1的值，然后查询</summary>
      
    
    
    
    <category term="WORKER" scheme="https://zspcer.gitee.io/categories/WORKER/"/>
    
    
    <category term="面试" scheme="https://zspcer.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox安装CentOS7</title>
    <link href="https://zspcer.gitee.io/note/LINUX/CENTOS/VirtualBox%E5%AE%89%E8%A3%85CentOS7/"/>
    <id>https://zspcer.gitee.io/note/LINUX/CENTOS/VirtualBox%E5%AE%89%E8%A3%85CentOS7/</id>
    <published>2023-02-17T14:32:14.310Z</published>
    <updated>2023-02-17T14:32:14.310Z</updated>
    
    <content type="html"><![CDATA[<p>安装前准备</p><p>安装VirtualBox：自行百度安装</p><p>准备镜像：可以用 <a href="https://www.centos.org/">CentOS官网</a>，<a href="http://centos.p2hp.com/">CentOS中文官网</a> 下载CentOS镜像</p><p>我这里下载的是 CentOS 7：<a href="http://mirrors.nju.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">http://mirrors.nju.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso</a></p><p>CentOS 7提供了三种ISO镜像文件：<br><strong>DVD ISO</strong> 标准安装版，桌面版<br><strong>Everything ISO</strong> 标准安装版的补充，增加了大量的应用软件<br><strong>Minimal ISO</strong> 精简版，自带的应用软件最少，生产环境推荐使用</p><p>Minimal版本优点：</p><ul><li>节省系统资源，磁盘空间占用小</li><li>自带软件少，系统纯净运行更稳定</li><li>需要的软件包可以自行安装</li></ul><p>创建虚拟机</p><p>1：点击新建</p><p>2：输入名称：centos7；文件夹：是保存虚拟机系统的文件；类型：选择Linux；版本：选择Other Linux(64-bit)</p><p>3：选择虚拟机的内存大小：根据自己需求选择，我这里选择了2G</p><p>4：创建虚拟机的硬盘：根据自己需求选择，可以稍后创建，现在创建，我选择了：现在创建</p><p>5：选择虚拟机硬盘的类型：根据自己需求选择，我选择了默认的VDI类型</p><p>6：选择虚拟机硬盘的大小：根据自己需求选择，我选择了动态分配</p><p>7：选择虚拟机硬盘的位置：根据自己需求选择，我选择了虚拟硬盘放在D盘</p><p>8：选择虚拟机硬盘的大小：根据自己需求选择，我选择了硬盘大小最大为20GB</p><p>9：创建完成后，可以选中当前虚拟机</p><p>10：点击设置</p><p>11：可以对创建好的虚拟机再次调整参数，比如我这里将虚拟机的CPU调整为了2核</p><img src="VirtualBox安装CentOS7.assets/image-20230215105959953.png" alt="image-20230215105959953" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110204977.png" alt="image-20230215110204977" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110229245.png" alt="image-20230215110229245" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110308994.png" alt="image-20230215110308994" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110325528.png" alt="image-20230215110325528" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110400735.png" alt="image-20230215110400735" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215110904381.png" alt="image-20230215110904381" style="zoom:80%;" /><p>启动虚拟机</p><p>1：选中虚拟机</p><p>2：点击启动，点击之后，稍等片刻，会弹出虚拟机启动窗口</p><p>3：在虚拟机窗口，选择启动镜像，点击文件夹图标</p><p>4：选择 注册</p><p>5：找到我们之前下载的 CentOS7 的镜像，开启启动</p><p>6：通过键盘，移动上下左右箭头，选择 Install CentOS 7，回车</p><p>7：选择中文，继续</p><p>8：选择安装位置</p><p>9：将安装位置选中为我们创建的虚拟硬盘</p><p>10：完成</p><p>11：开始安装</p><p>12：创建root密码，我这里将root设置为：root</p><p>13：创建用户，根据自己的需求选择是否创建本地用户，我这里就不创建了，不创建的话，默认就只有一个root用户</p><p>14：安装完成，开始重启，重启之后，就可以登录了。</p><img src="VirtualBox安装CentOS7.assets/image-20230215111205370.png" alt="image-20230215111205370" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215111944905.png" alt="image-20230215111944905" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112021017.png" alt="image-20230215112021017" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112159337.png" alt="image-20230215112159337" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112256613.png" alt="image-20230215112256613" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112320332.png" alt="image-20230215112320332" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112345724.png" alt="image-20230215112345724" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215112447552.png" alt="image-20230215112447552" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215115027821.png" alt="image-20230215115027821" style="zoom:80%;" /><img src="VirtualBox安装CentOS7.assets/image-20230215115129320.png" alt="image-20230215115129320" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装前准备&lt;/p&gt;
&lt;p&gt;安装VirtualBox：自行百度安装&lt;/p&gt;
&lt;p&gt;准备镜像：可以用 &lt;a href=&quot;https://www.centos.org/&quot;&gt;CentOS官网&lt;/a&gt;，&lt;a href=&quot;http://centos.p2hp.com/&quot;&gt;CentOS中</summary>
      
    
    
    
    <category term="LINUX" scheme="https://zspcer.gitee.io/categories/LINUX/"/>
    
    <category term="CENTOS" scheme="https://zspcer.gitee.io/categories/LINUX/CENTOS/"/>
    
    
    <category term="centos" scheme="https://zspcer.gitee.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%B8%B8%E7%94%A8%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%B8%B8%E7%94%A8%E7%9A%84%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2023-02-17T14:32:14.287Z</published>
    <updated>2023-02-17T14:32:14.287Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>elasticsearch7.6.2 <span class="token punctuation">\</span> <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\</span> <span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/data:/usr/share/elasticsearch/data <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/logs:/usr/share/elasticsearch/logs <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/elasticsearch7.6.2/plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\</span>  elasticsearch:7.6.2<span class="token function">docker</span> logs elasticsearch7.6.2<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--user</span> root elasticsearch7.6.2 /bin/bash<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--cpus</span> <span class="token number">2</span> <span class="token parameter variable">-m</span> 4GB <span class="token parameter variable">--name</span> mysql5.7.19 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/logs:/var/log/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/data:/var/lib/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis5.0.7 <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/redis5.0.7/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\</span> <span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/redis5.0.7/data:/data <span class="token punctuation">\</span> <span class="token parameter variable">-d</span> redis:5.0.7 redis-server /etc/redis/redis.conf <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis5.0.7 /bin/bash<span class="token comment"># -p 6379:6379:把容器内的6379端口映射到宿主机6379端口</span><span class="token comment"># -v /root/docker/redis/redis.conf:/etc/redis/redis.conf：把宿主机配置好的redis.conf放到容器内的这个位置中</span><span class="token comment"># -v /root/docker/redis/data:/data：把redis持久化的数据在宿主机内显示，做数据备份</span><span class="token comment"># redis-server /etc/redis/redis.conf：这个是关键配置，让redis不是无配置启动，而是按照这个redis.conf的配置启动</span><span class="token comment"># -appendonly yes：redis启动后数据持久化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql的索引从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-02-17T14:32:14.255Z</published>
    <updated>2023-02-17T14:32:14.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的索引从入门到入土"><a href="#mysql的索引从入门到入土" class="headerlink" title="mysql的索引从入门到入土"></a>mysql的索引从入门到入土</h1><h2 id="索引的XMIND图"><a href="#索引的XMIND图" class="headerlink" title="索引的XMIND图"></a>索引的XMIND图</h2><p>文件位置：<a href="./mysql%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/Mysql%E7%B4%A2%E5%BC%95.xmind">点我打开</a></p><h2 id="索引的常见数据结构"><a href="#索引的常见数据结构" class="headerlink" title="索引的常见数据结构"></a>索引的常见数据结构</h2><p>哈希表</p><ul><li>哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。</li></ul><p>有序数组</p><ul><li><p>有序数组在等值查询和范围查询场景中的性能就都非常优秀。</p></li><li><p>有序数组索引只适用于静态存储引擎</p></li></ul><p>搜索树</p><ul><li><p>二叉搜索树：父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。</p></li><li><p>平衡二叉树：</p></li><li><p>N叉树：</p></li></ul><h2 id="InnoDB为什么选择B-树（对比其他树）"><a href="#InnoDB为什么选择B-树（对比其他树）" class="headerlink" title="InnoDB为什么选择B+树（对比其他树）"></a>InnoDB为什么选择B+树（对比其他树）</h2><h3 id="为什么选择树"><a href="#为什么选择树" class="headerlink" title="为什么选择树"></a>为什么选择树</h3><p>树的查询效率高，还可以保持有序。</p><h3 id="为什么不用二叉搜索树"><a href="#为什么不用二叉搜索树" class="headerlink" title="为什么不用二叉搜索树"></a>为什么不用二叉搜索树</h3><h4 id="什么是二叉搜索树（也叫二叉排序树或者二叉查找树）"><a href="#什么是二叉搜索树（也叫二叉排序树或者二叉查找树）" class="headerlink" title="什么是二叉搜索树（也叫二叉排序树或者二叉查找树）"></a>什么是二叉搜索树（也叫二叉排序树或者二叉查找树）</h4><p>以下是二叉查找树的结构：</p><img src="mysql的索引从入门到入土.assets/image-20221219173305682.png" alt="image-20221219173305682" style="zoom:50%;" /><p>它的<strong>特点</strong>是：</p><ul><li>父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。</li><li>只有两个叉</li><li>查询的时间复杂度是：O(log(N))</li><li>从算法逻辑来讲，二叉搜索树的查找速度和比较次数都是最小的。</li></ul><h4 id="为什么不用二叉搜索树（查找耗磁盘IO）"><a href="#为什么不用二叉搜索树（查找耗磁盘IO）" class="headerlink" title="为什么不用二叉搜索树（查找耗磁盘IO）"></a>为什么不用二叉搜索树（查找耗磁盘IO）</h4><p>因为考虑到磁盘IO的性能。</p><p>为什么这么说：InnoDB在查找的时候，是不能将所有的索引全部加载到内存中的，所以必然涉及到磁盘IO。</p><p>比如下面这个，二叉搜索树，我们想获取到10，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219173305682.png" alt="image-20221219173305682" style="zoom:50%;" /><p>答案是：4次</p><ul><li>第一次磁盘IO，读取9</li><li>第二次磁盘IO，读取13</li><li>第三次磁盘IO，读取11</li><li>第四次磁盘IO，读取10</li></ul><p>这样性能是很低的。</p><p>所以InnoDB并没有采用二叉搜索树来作为索引的数据结构。</p><p>但是InnoDB的设计者，又不能抛弃树这个数据结构带来的遍历，所以只能将 “瘦高” 的二叉搜索树，让它变得 “矮胖”。以便于节省磁盘IO。这就是<code>B树</code>的特征之一</p><h3 id="什么是B树"><a href="#什么是B树" class="headerlink" title="什么是B树"></a>什么是B树</h3><h4 id="什么是B树-1"><a href="#什么是B树-1" class="headerlink" title="什么是B树"></a>什么是B树</h4><p>上面说了，InnoDB的设计者为了想保留树带来的便利，只能将： “瘦高” 的二叉搜索树，让它变得 “矮胖”。以便于节省磁盘IO。</p><p>B树是一种<code>多路平衡查找树</code>，它的每一个节点最多包含<code>m</code>个孩子，<code>m</code>被称为<code>B树</code>的阶，<code>m</code>的大小取决于磁盘页的大小。</p><p>下图就是一个 <code>3阶的B树</code> 示意图</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>一颗<code>m阶的B树</code>，它的特点是：</p><ul><li><code>m阶</code>表示每一个节点最多拥有<code>m</code>个孩子</li><li>根节点至少有 <code>2</code> 个子女</li><li>有<code>k</code>个孩子的节点包含有k-1个元素，其中： <code>ceil(m/2) &lt;= k &lt;= m</code>，（ceil表示向上取整）</li><li>每一个叶子节点都包含<code>k-1</code>个元素，其中：<code>ceil(m/2) &lt;= k &lt;= m</code>，（ceil表示向上取整）</li><li>所有的叶子节点都位于同一层</li><li>每个节点的元素从小到大排列，并且当该结点的孩子是非叶子结点时，节点中第<code>k-1</code>个元素正好是<code>k</code>个孩子包含的元素的值域分划。</li></ul><p>我们一一来看这些特点，其中</p><ul><li>一颗<code>3阶</code>的树，每个节点最多包含<code>3</code>个孩子，m &#x3D; 3</li><li><code>9</code>是根节点，有<code>2</code>个孩子<code>（2,6）</code>和 <code>12</code>。(根节点至少<code>2</code>个)</li><li><code>（2,6）</code>这个中间节点包含<code>2</code>个元素：<code>2</code>和<code>6</code>，有<code>3</code>个孩子。 <code>2 &lt;= k &lt;= 3</code></li><li><code>12 </code>这个中间节点包含<code>1</code>一个元素：<code>12</code>，有<code>2</code>个孩子。满足规则</li><li>叶子节点<code>1</code>,<code>(3,5)</code>,<code>8</code>,<code>11</code>,<code>(13,15)</code>位于同一层</li><li>每个节点的元素从小到大排列，<code>(3,5)</code>在<code>(2,6)</code>的值域之间。</li></ul><h4 id="B树的等值查找"><a href="#B树的等值查找" class="headerlink" title="B树的等值查找"></a>B树的等值查找</h4><p>在下面的一个3阶B树中，查找5，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>答案是：三次</p><ul><li>第一次磁盘IO：<code>9</code></li><li>第二次磁盘IO：<code>（2,6）</code></li><li>第三次磁盘IO：<code>（3,5）</code></li></ul><h4 id="B树的范围查找"><a href="#B树的范围查找" class="headerlink" title="B树的范围查找"></a>B树的范围查找</h4><p>在下面的一个3阶B树中，查找范围是 3-11 的元素，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>答案是：好多好多次</p><ul><li>3次磁盘IO后，找到范围下限：3 所在的（3,5）这个节点</li><li>中序遍历到 元素6</li><li>中序遍历到 元素8</li><li>中序遍历到 元素9</li><li>中序遍历到 元素11，遍历结束</li></ul><p>由此可见，B树的范围查找，很繁琐。</p><h4 id="B树的插入（自平衡）"><a href="#B树的插入（自平衡）" class="headerlink" title="B树的插入（自平衡）"></a>B树的插入（自平衡）</h4><p>插入比较复杂</p><p>以下面的为例子：在一个3阶的B树中，插入 4</p><img src="mysql的索引从入门到入土.assets/image-20221219180143637.png" alt="image-20221219180143637" style="zoom:50%;" /><p>由于 4 在 （3,5）之间。</p><img src="mysql的索引从入门到入土.assets/image-20221219185214252.png" alt="image-20221219185214252" style="zoom:50%;" /><ul><li>这是一颗<code>3阶</code>的B树，由于每个节点最多包含 <code>k-1</code> 个元素，其中  <code>2 &lt;= k &lt;= 3</code>，所以每个节点可以包含<code>1个</code>，<code>2个</code>元素；</li><li>要在<code>（3,5）</code>之间插入 <code>4</code>，<code>（3,5）</code>已经是<code>2</code>个元素了，不能在插入了。</li><li><code>（3,5）</code>的父节点<code>（2,6）</code>也是<code>2</code>个元素，也不能在插入了</li><li>根节点 <code>9</code> 是<code>1</code>个元素，可以在升级为2个元素。</li><li>于是：</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219190355215.png" alt="image-20221219190355215" style="zoom:50%;" /><p>总结：</p><ul><li>仅仅是插入一个元素，就让整个B树发生了连锁反应</li><li>虽然麻烦，但是也正因为如此，可以让B树始终保持多路平衡。（<strong>自平衡</strong>）</li></ul><h4 id="B树的删除（左旋）"><a href="#B树的删除（左旋）" class="headerlink" title="B树的删除（左旋）"></a>B树的删除（左旋）</h4><p>在如下的一个3阶B树中，删除元素11</p><img src="mysql的索引从入门到入土.assets/image-20221219190937755.png" alt="image-20221219190937755" style="zoom:50%;" /><ul><li>首先这是一颗3阶B树，由于B树的规则，每个中间节点都包含<code>k-1</code>个元素和<code>k</code>个孩子，其中 <code> 2&lt;= k &lt;= 3</code></li><li>所以：11删除之后，父节点12就只剩下1个孩子了，不符合规则，3阶的B树每个中间节点至少有2个孩子。</li><li>因为，需要找出删除11后，剩余的三个元素12,13,15的中位数，取代节点12；然后节点12下移成为孩子（<strong>左旋</strong>）</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219191850585.png" alt="image-20221219191850585" style="zoom:50%;" /><h4 id="B树的卫星数据"><a href="#B树的卫星数据" class="headerlink" title="B树的卫星数据"></a>B树的卫星数据</h4><p>所谓的卫星数据（Satellite Information），指的是索引元素所指向的数据记录；</p><p>在B树中，每一个节点都带有卫星数据。</p><img src="mysql的索引从入门到入土.assets/image-20221219221417559.png" alt="image-20221219221417559" style="zoom:50%;" /><h3 id="为什么选择B-树"><a href="#为什么选择B-树" class="headerlink" title="为什么选择B+树"></a>为什么选择B+树</h3><h4 id="什么是B-树"><a href="#什么是B-树" class="headerlink" title="什么是B+树"></a>什么是B+树</h4><p>B+树是基于B树的一种变体。有着比B树更高的查询性能</p><p>下面是一个3阶的B+树的示意图：节点之间含有重复元素，叶子节点还用指针连在一起</p><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>一颗m阶的B+树有以下特点：</p><ul><li>有k个子树的中间节点包含有k个元素（B树中是k-1个元素）</li><li>每个元素不保存数据，只用来索引，所有的数据保存在叶子节点</li><li>所有的叶子节点包含了全部元素的信息，而且每个叶子节点都带有指向下一个节点的指针，形成了一个有序链表</li><li>叶子节点本身依关键字大小自小而大顺序链接</li><li>每一个父节点的元素都出现在子节点中，而且是子节点中最大（或最小）的元素</li><li>无论插入多少元素，都要保持最大元素在根节点中</li></ul><h4 id="B-树的卫星数据"><a href="#B-树的卫星数据" class="headerlink" title="B+树的卫星数据"></a>B+树的卫星数据</h4><p>所谓的卫星数据（Satellite Information），指的是索引元素所指向的数据记录；</p><p>在B+树中，只有叶子节点带有卫星数据。</p><p>在mysql中，表中的一行记录就是一个卫星数据。</p><p>不过需要注意的是：</p><ul><li>在mysql中，主键索引的叶子结点存的是<code>卫星数据</code>（就是行记录）</li><li>在mysql中，非主键索引的叶子节点存的是<code>指向卫星数据的指针</code>（就是行记录的主键id）</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219221505548.png" alt="image-20221219221505548" style="zoom:50%;" /><h4 id="B-树的等值查找"><a href="#B-树的等值查找" class="headerlink" title="B+树的等值查找"></a>B+树的等值查找</h4><p>在下面这颗3阶的B+树上查找元素 3，会经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>结果：</p><ul><li>第一次磁盘IO：（8,15）</li><li>第二次磁盘IO：（2,5,8）</li><li>第三次磁盘IO：（3,5）</li></ul><p>由于B+树的中间节点并没有存放卫星数据，所以比B树更加“矮胖”，也即是说：在相同数据量的情况下，B+树会比B树访问到更少的磁盘IO。</p><p>由于B+树的中间节点没有存放卫星数据，所以要想拿到记录，必须访问到叶子节点。而B树由于每个节点都存放了卫星数据，所以只要匹配到，就可以获取到记录，对B树来说：最好的情况是只访问根节点就能拿到记录，最坏的情况就是访问到叶子结点。换言之：B树的查找性能不稳定，B+树由于每一次都要访问到叶子节点，所以B+树的查找性能是稳定的。</p><h4 id="B-树的范围查找"><a href="#B-树的范围查找" class="headerlink" title="B+树的范围查找"></a>B+树的范围查找</h4><p>在下面这颗3阶的B+树上，查找范围是 3-11 的元素，需要经历几次磁盘IO：</p><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>答案是：5次</p><ul><li>3次磁盘IO后，找到范围下限：3 所在的（3,5）这个节点</li><li>然后通过叶子结点上的指针，直接遍历叶子节点。（3,5），（6,8），（9,11）</li><li>直接确定到范围</li></ul><p>相比于B树范围查找的繁琐，B+树就简单的多了。</p><h3 id="B-树的B树的比较"><a href="#B-树的B树的比较" class="headerlink" title="B+树的B树的比较"></a>B+树的B树的比较</h3><p>B+树相比B树的优势有三个</p><ul><li>IO次数更少</li><li>查询性能稳定</li><li>范围查询简便</li></ul><p>至于插入和删除，两者大同小异。</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>了解下面列出来的索引概念：</p><ul><li>主键索引</li><li>普通索引</li><li>聚簇索引</li><li>非聚簇索引</li><li>二级索引</li><li>唯一索引</li><li>全文索引</li><li>联合索引</li><li>覆盖索引</li><li>前缀索引</li></ul><h3 id="主键索引和普通索引"><a href="#主键索引和普通索引" class="headerlink" title="主键索引和普通索引"></a>主键索引和普通索引</h3><p>主键索引：也叫聚簇索引，它 是一种特殊的唯一索引，不允许有空值。</p><p>普通索引：也叫二级索引，最基本的索引，没有任何限制</p><p>主键索引在InnoDB中是聚簇索引；普通索引在InnoDB中是非聚簇索引</p><h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><p>聚簇索引并不是单独的索引类型，而是一种数据存储方式，指的是：数据和对应的索引紧凑的存储在一起。</p><p>非聚簇索引指的就是：数据和索引分开存储。</p><p>举例来说：</p><p>对于InnoDB：主键索引的叶子节点存的是主键id和数据，它们是保存在一起的；非主键索引的叶子节点存的是主键id，和真实的数据是分开的。所以主键索引是聚簇索引，非主键索引是非聚簇索引。（InnoDB的索引和数据是放在同一个文件中的：数据即索引，索引即数据）</p><p>对于MyISAM：索引和记录本身就是分开存储的，是不同的文件。所以MyISAM中所有的索引都是非聚簇索引。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>唯一索引：与”普通索引”类似，不同的就是：索引列的值必须唯一，但<strong>允许有空值</strong>。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时耗空间。</p><h3 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h3><p>也叫组合索引，为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>当一个SQL查询语句所需要查询的字段，被所使用的的索引可以直接满足需求，不需要回表了，称之为覆盖索引</p><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>当需要索引的字段很长，而且该字段后半部分的选择性很低，比如邮箱地址；后面都是一样的。</p><p>对于这种我们就可以建立前缀索引：使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> SUser <span class="token keyword">add</span> <span class="token keyword">index</span> index2<span class="token punctuation">(</span>email<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前缀索引会导致覆盖索引失效，因为前缀索引是截取后的部分做的索引，不得不在回表查一次完整的信息。</p><h2 id="索引特点"><a href="#索引特点" class="headerlink" title="索引特点"></a>索引特点</h2><h3 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h3><p>假设有一个用户表，我们给 （name, age）加上联合索引。</p><p>如果我们要查询所有名字第一个字是“张”的人，SQL语句可能会这么写：</p><blockquote><p>where name like ‘张%’;</p></blockquote><p>在这种情况下，也是可以使用到这个索引的。这就是索引的最左匹配原则。</p><ul><li>最左匹配原则可以是联合索引的最左N的字段，也可以是一个字符串的最左M个字符；</li><li>在建立联合索引的时候，如何安排索引内的字段顺序，需要仔细考量了。</li></ul><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>mysql 5.6 引入了 索引下推优化。可以在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足的记录，减少回表次数。</p><p>假如有一个用户表，我们给（name，age）加上联合索引。</p><p>如果我们要查询所有名字第一个字是“张”的人，并且年龄大于10岁的男人。SQL语句可能会这么写</p><blockquote><p>where name like ‘张%’ and age &gt; 10 and male&#x3D;’男’;</p></blockquote><p>对于这个语句，我们知道由于最左匹配原则，使用到了（name，age）这个索引。</p><p>然后，接下来呢？</p><p>在mysql 5.6之前，接下来就需要回表了。对扫描的每一条记录，都回表判断 age 和 male 是否满足；</p><p>在mysql 5.6之后，由于有索引下推优化，对于age的判断可以直接完成，过滤掉age不符合的记录，然后对剩下的记录在此回表判断male是否满足。（减少了回表次数）</p><h3 id="索引潜水"><a href="#索引潜水" class="headerlink" title="索引潜水"></a>索引潜水</h3><p>英文单词：index dive</p><p>主要是用于 IN 查询语句的优化，</p><p>跟这个词语相关的，还有一个配置参数 <strong>eq_range_index_dive_limit</strong>。</p><p><strong>MySQL5.7.3</strong>之前的版本，这个值默认是10，之后的版本，这个值默认是200。</p><p>简单的理解就是：IN 语句的数量如果少于200个，就使用<strong>索引潜水（Index dive）</strong>预估扫描行数，很精确，所以选择索引的时候就不容易出错；</p><p>如果 IN 语句的数量大于200个，就使用 <strong>索引统计（Index statistics）</strong>预估扫描行数，误差很大，所以会导致选择索引容易选错，导致性能下降</p><p>具体见：Mysql性能调优从入门到入土</p><h3 id="普通索引默认联合主键索引"><a href="#普通索引默认联合主键索引" class="headerlink" title="普通索引默认联合主键索引"></a>普通索引默认联合主键索引</h3><p>二级索引会默认与主键索引做联合索引。</p><p>为什么？</p><p>因为二级索引的叶子节点存放的就是主键。</p><h2 id="索引比较"><a href="#索引比较" class="headerlink" title="索引比较"></a>索引比较</h2><h3 id="普通索引和主键索引有什么区别？"><a href="#普通索引和主键索引有什么区别？" class="headerlink" title="普通索引和主键索引有什么区别？"></a>普通索引和主键索引有什么区别？</h3><p>主键索引的查询，不需要回表了。</p><p>普通索引的查询，如果要查询的字段没有被当前索引覆盖，是需要回表的。</p><p>针对回表的优化：覆盖索引可以减少回表，索引下推可以减少回表</p><h3 id="普通索引和唯一索引有什么区别？"><a href="#普通索引和唯一索引有什么区别？" class="headerlink" title="普通索引和唯一索引有什么区别？"></a>普通索引和唯一索引有什么区别？</h3><h4 id="对查询的影响"><a href="#对查询的影响" class="headerlink" title="对查询的影响"></a>对查询的影响</h4><ul><li>微乎其微。</li><li>普通索引的查询：定位到当前记录之后，还要继续判断下一条记录是否满足条件。</li><li>唯一索引的查询：定位到当前记录之后，由于是唯一的，不再需要判断下一条记录了。</li></ul><p>不过，后面看到加锁规则这部分的时候，有一个加锁规则是：唯一索引上的范围查询，会访问到不满足查询条件的第一个值为止。 </p><p>也就是说：<br>对于范围查询，普通索引和唯一索引是一样的，都需要访问下一条记录。<br>对于等值查询，唯一索引比普通索引少了一次查找下一条记录的性能消耗。</p><h4 id="对更新的影响"><a href="#对更新的影响" class="headerlink" title="对更新的影响"></a>对更新的影响</h4><ul><li><p>参考：《mysql的日志从入门到入土》这篇文章中讲到了changebuffer：</p><ul><li>changebuffer（对更新的优化，对比redolog）</li><li>changebuffer在 5.5 版本之前叫做：insert buffer，只支持插入操作；在5.5之后，支持了更新操作</li><li>changebuffer的作用：</li><li>更新的时候不需要从内存中加载数据页，而是直接将更新后的记录写到changebuffer中（内存中）就可以返回了</li><li>那么changebuffer中的数据什么时候刷盘呢？</li><li>因为写入changebuffer了，一定会写入redolog，后台会定时将redolog中的数据应用到数据页中，同时也会将changebuffer的数据应用到数据页，这是两个后台线程，他俩没有任何关系。操作的都是内存中的数据页，然后刷脏页</li><li>具体的可以参考：《mysql的日志从入门到入土》</li></ul></li><li><p>为什么唯一索引的更新就不能使用 change buffer，只有普通索引可以使用。</p><ul><li><p>因为唯一索引的更新，需要判断当前的这个更新会不会影响到唯一索引的唯一性。</p></li><li><p>所以必须判断要将数据页加载到内存中，进行判断才可以。</p></li></ul></li><li><p>change buffer适应用：写多读少的场景和写多读多的场景；</p></li><li><p>change buffer 和 redo log的联系和区别。</p><ul><li>change buffer减少了磁盘的随机读（减少了加载数据页的操作）</li><li>redo log减少的磁盘的随机写（WAL机制）</li></ul></li></ul><h3 id="前缀索引对覆盖索引的影响"><a href="#前缀索引对覆盖索引的影响" class="headerlink" title="前缀索引对覆盖索引的影响"></a>前缀索引对覆盖索引的影响</h3><p>我们知道覆盖索引可以减少回表，提升查询性能；</p><p>但是当我们的覆盖索引是前缀索引的时候，此时覆盖索引是不生效的。</p><p>因为前缀索引是截取后的信息作为索引，要想获取完整的字段，就不得不回表在查询一次。</p><h2 id="选错索引（索引统计，强制索引）"><a href="#选错索引（索引统计，强制索引）" class="headerlink" title="选错索引（索引统计，强制索引）"></a>选错索引（索引统计，强制索引）</h2><ul><li><p>由于索引统计的更新机制，索引统计信息不准确导致的。</p></li><li><p>解决：重新采集统计信息：analyze table</p></li><li><p>解决：手动指定索引；force index</p></li></ul><h3 id="如何进行索引统计"><a href="#如何进行索引统计" class="headerlink" title="如何进行索引统计"></a>如何进行索引统计</h3><h2 id="索引排序（order-by）"><a href="#索引排序（order-by）" class="headerlink" title="索引排序（order by）"></a>索引排序（order by）</h2><p>在日常的开发过程中，经常会使用<code>order by</code>语句，那么排序的原理是什么呢？</p><p>排序分为两种情况</p><ul><li>排序的字段有索引</li><li>排序的字段没有索引</li></ul><h3 id="有索引的排序"><a href="#有索引的排序" class="headerlink" title="有索引的排序"></a>有索引的排序</h3><p>我们知道索引是有序的，所以有索引的排序会直接使用索引；</p><p>直接使用索引排序的话，<code>explain</code>结果中是不会有 Using filesort 的</p><h3 id="没有索引的排序"><a href="#没有索引的排序" class="headerlink" title="没有索引的排序"></a>没有索引的排序</h3><p>没有索引的排序，相对来说复杂一下。</p><p>一个语句是否使用了排序，可以通过：<code>explain</code>命令查看，结果中有 Using filesort ，表示的就是需要排序。</p><p>MySQL 会给每个线程分配一块<code>内存</code>用于排序，称为<code> sort_buffer</code>。</p><h4 id="sort-buffer是什么"><a href="#sort-buffer是什么" class="headerlink" title="sort_buffer是什么"></a>sort_buffer是什么</h4><p>MySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer；</p><p>sort_buffer既然是内存区域，就不可能无限的扩大，是可以通过参数<code>sort_buffer_size</code>控制的</p><h4 id="sort-buffer有多大（内部排序和外部排序）"><a href="#sort-buffer有多大（内部排序和外部排序）" class="headerlink" title="sort buffer有多大（内部排序和外部排序）"></a>sort buffer有多大（内部排序和外部排序）</h4><p>通过参数<code>sort_buffer_size</code>控制的，默认是：262144（公司是：8388608）</p><p>sort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。</p><p>如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。 这叫做：<code>内部排序</code></p><p>但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。这叫做：<code>外部排序</code></p><p>内存放不下时，就需要使用外部排序，外部排序一般使用归并排序算法。</p><p>可以这么简单理解，MySQL 将需要排序的数据分成 N 份，每一份单独排序后存在这些临时文件中。然后把这 N 个有序文件再合并成一个有序的大文件。</p><p>内部排序：使用快速排序</p><p>外部排序：使用归并排序</p><h4 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h4><p>示例数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>addr<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 初始化10条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们执行下面的查询语句的时候</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> city<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">where</span> city<span class="token operator">=</span><span class="token string">'杭州'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">1000</span>  <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的排序执行流程如下：</p><ul><li>初始化 sort_buffer，确定放入 name、city、age 这三个字段；</li><li>从索引 city 找到第一个满足 city&#x3D;’杭州’条件的主键 id；</li><li>到主键 id 索引取出整行，取 name、city、age 三个字段的值，存入 sort_buffer 中</li><li>从索引 city 取下一个记录的主键 id；</li><li>重复步骤 3、4 直到 city 的值不满足查询条件为止；</li><li>对 sort_buffer 中的数据按照字段 name 做快速排序；</li><li>按照排序结果取前 1000 行返回给客户端。</li></ul><p>在上面这个过程里面，只对原表的数据读了一遍，剩下的操作都是在 sort_buffer 和临时文件中执行的。</p><p>但这个算法有一个问题，就是如果查询要返回的字段很多的话，那么 sort_buffer 里面要放的字段数太多，这样内存里能够同时放下的行数很少，要分成很多个临时文件，排序的性能会很差。</p><p>那么，如果 MySQL 认为排序的单行长度太大会怎么做呢？</p><h4 id="rowId排序"><a href="#rowId排序" class="headerlink" title="rowId排序"></a>rowId排序</h4><p>如果 MySQL 认为排序的单行长度太大会怎么做呢？</p><p><code>max_length_for_sort_data</code>：是 MySQL 中专门控制用于排序的行数据的长度的一个参数。</p><p>它的意思是，如果单行的长度超过这个值，MySQL 就认为单行太大，要换一个算法。</p><p>示例数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>addr<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 初始化10条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们执行下面的查询语句的时候</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> city<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> t <span class="token keyword">where</span> city<span class="token operator">=</span><span class="token string">'杭州'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">1000</span>  <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>city、name、age 这三个字段的定义总长度是 36，我把 max_length_for_sort_data 设置为 16，我们再来看看计算过程有什么改变。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> max_length_for_sort_data <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新的算法放入 sort_buffer 的字段，只有要排序的列（即 name 字段）和主键 id。</p><p>但这时，排序的结果就因为少了 city 和 age 字段的值，不能直接返回了，整个执行流程就变成如下所示的样子：</p><ul><li>初始化 sort_buffer，确定放入两个字段，即 name 和 id；</li><li>从索引 city 找到第一个满足 city&#x3D;’杭州’条件的主键 id；</li><li>到主键 id 索引取出整行，取 name、id 这两个字段，存入 sort_buffer 中；</li><li>从索引 city 取下一个记录的主键 id；</li><li>重复步骤 3、4 直到不满足 city&#x3D;’杭州’条件为止；</li><li>对 sort_buffer 中的数据按照字段 name 进行排序；</li><li>遍历排序结果，取前 1000 行，并按照 id 的值回到原表中取出 city、name 和 age 三个字段返回给客户端。</li></ul><h4 id="全字段排序-VS-rowid-排序"><a href="#全字段排序-VS-rowid-排序" class="headerlink" title="全字段排序 VS rowid 排序"></a>全字段排序 VS rowid 排序</h4><ul><li>MySQL 如果觉得排序内存太小，会影响排序效率，会采用 rowid 排序算法，这样排序过程中一次可以排序更多行，但是需要回表</li><li>MySQL 认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，可以减少回表</li></ul><h2 id="索引的生效条件"><a href="#索引的生效条件" class="headerlink" title="索引的生效条件"></a>索引的生效条件</h2><p>以下三种情况，都会影响索引的使用</p><ul><li>条件字段使用函数</li><li>隐式类型转换</li><li>隐式字符编码转换</li></ul><h3 id="条件字段函数操作会影响索引"><a href="#条件字段函数操作会影响索引" class="headerlink" title="条件字段函数操作会影响索引"></a>条件字段函数操作会影响索引</h3><blockquote><p>select * from t where month(created_time) &#x3D; 7;  – 查询创建时间是7月份的记录，created_time有索引</p></blockquote><p>由于加了 month() 函数操作，created_time索引树里面，并不认识7，所以MySQL 无法再使用索引快速定位功能，而<strong>只能使用全索引扫描</strong>。</p><blockquote><p>select * from t where id + 1 &#x3D; 5;</p></blockquote><p>这个加 1 操作并不会改变主键索引的有序性，但是 MySQL 优化器还是不能用 id 索引快速定位到 id&#x3D;4 这一行。</p><p>所以，需要你在写 SQL 语句的时候，手动改写成 where id &#x3D; 5 -1 才可以。</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>这个坑，今天刚踩过，表里对于单号 order_no 有索引，order_no 字段是varchar类型，但是我的语句是这么写的</p><blockquote><p>mysql&gt; select * from t where order_no&#x3D;110717;</p></blockquote><p>explain 的结果显示：这条语句需要走全表扫描</p><p>因为：order_no 字段是varchar类型，而我的查询条件里用到的是整型。所以mysql会默认用到类型转换，<strong>导致索引失效</strong></p><p><strong>字符串和数字做比较的话，是将字符串转换成数字</strong>；所以，上面那个语句等同于</p><blockquote><p>mysql&gt; select * from t where CAST(order_no signed int)&#x3D;110717;</p></blockquote><p>这也就明白了，为什么不会走索引了。</p><p>然后考虑下面这个语句，会走主键索引吗</p><blockquote><p>mysql&gt; select * from t where id&#x3D;’11’;</p></blockquote><p>答案是：会走索引，因为：字符串和数字做比较的话，是将字符串转换成数字，所以没有对条件字段使用函数。索引不会失效</p><h3 id="隐式字符编码转换"><a href="#隐式字符编码转换" class="headerlink" title="隐式字符编码转换"></a>隐式字符编码转换</h3><p>如果关联的两张表，使用的字符集不同的话，比如一个使用utf8，一个使用utf8mb4； 所以做表连接查询的时候用不上关联字段的索引。</p><p>为什么字符集不一样，不能用索引呢？</p><p>因为字符集 utf8mb4 是 utf8 的超集，所以当这两个类型的字符串在做比较的时候，MySQL 内部的操作是，先把 utf8 字符串转成 utf8mb4 字符集，再做比较。</p><p>（自动类型转换的时候，为了避免数据在转换过程中由于截断导致数据错误，也都是“<strong>按数据长度增加的方向</strong>”进行转换的。）</p><h2 id="InnoB的索引模型（B-树）"><a href="#InnoB的索引模型（B-树）" class="headerlink" title="InnoB的索引模型（B+树）"></a>InnoB的索引模型（B+树）</h2><h3 id="复习B-树"><a href="#复习B-树" class="headerlink" title="复习B+树"></a>复习B+树</h3><p>每一个索引在 InnoDB 里面对应一棵 B+ 树。在复习一下B+树</p><p>下面是一个3阶的B+树的示意图：</p><ul><li>节点之间含有重复元素</li><li>叶子节点还用指针连在一起</li></ul><img src="mysql的索引从入门到入土.assets/image-20221219215758443.png" alt="image-20221219215758443" style="zoom:50%;" /><p>接下来：</p><ul><li>我们考虑各个索引在InnoDB中具体的B+树结构是什么样子的</li><li>这些索引是怎么维护的（插入数据，删除数据，更新数据对索引的影响，页分裂，页合并）</li><li>这些索引是怎么使用的（等值查询，范围查询）</li></ul><h3 id="案例数据"><a href="#案例数据" class="headerlink" title="案例数据"></a>案例数据</h3><p>准备一张表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>city<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>name_age<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表里有一个主键 id</li><li>表里有一个普通索引 city</li><li>表里有一个联合索引 name_age</li><li>接下来，我们看看，不停的向表里写入数据，会发生什么</li></ul><p><strong>重要声明</strong>：</p><ul><li>我们知道mysql的数据是按照 数据页 来进行存储的，对于索引来说，同样也是 数据页 存储的。</li><li>一个数据页是 16KB，所以一个数据库能存放的元素是有限的。</li><li>在测试的时候：我们假设<ul><li><code>id</code>是int类型，占<code>4</code>个字节</li><li><code>name</code>是varchar类型，因为是不定长的，假设 name 不论写入什么，都占<code>8</code>个字节</li><li><code>age</code>是int类型，占<code>4</code>个字节</li><li><code>city</code>是varchar类型，因为是不定长的，假设 city 不论写入什么，都占<code>8</code>个字节</li><li><code>address</code>是varchar类型，因为是不定长的，假设 address 不论写入什么，都占<code>8</code>个字节</li></ul></li><li>正常情况下，一个数据页是16KB，我们这里假设，一个数据页只有：<code>36字节</code><ul><li>意味着：一个数据页最多能存9个id索引元素(4x9&#x3D;36)；最多能存4个city索引元素(8x4&#x3D;32)，最多能存3个 name_age 联合索引元素(12x3&#x3D;36);</li></ul></li></ul><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>我们上边介绍的<code>B+</code>树本身就是一个目录，或者说本身就是一个索引。它有两个特点：</p><ol><li><p>使用记录主键值的大小进行记录和数据页的排序，这包括三个方面的含义：</p><ul><li>数据页中的记录是按照主键的大小顺序排成一个单向链表。</li><li>各个 存放用户记录的数据页 也是 根据 数据页中用户记录的主键大小 顺序排成一个双向链表。</li><li>存放 目录项记录的数据页 分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li></ul></li><li><p><code>B+</code>树的叶子节点存储的是完整的用户记录。</p><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</p></li></ol><p>我们把具有这两种特性的<code>B+</code>树称为<code>聚簇索引</code>，所有完整的用户记录都存放在这个<code>聚簇索引</code>的叶子节点处。这种<code>聚簇索引</code>并不需要我们在<code>MySQL</code>语句中显式的使用<code>INDEX</code>语句去创建（后边会介绍索引相关的语句），<code>InnoDB</code>存储引擎会自动的为我们创建聚簇索引。另外有趣的一点是，在<code>InnoDB</code>存储引擎中，<code>聚簇索引</code>就是数据的存储方式（所有的用户记录都存储在了<code>叶子节点</code>），也就是所谓的索引即数据，数据即索引。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h3 id="联合索引-1"><a href="#联合索引-1" class="headerlink" title="联合索引"></a>联合索引</h3><p><code>B+</code>树按照<code>name</code>和<code>age</code>列的大小进行排序，这个包含两层含义：</p><ul><li>先把各个记录和页按照<code>name</code>列进行排序。</li><li>在记录的<code>name</code>列相同的情况下，采用<code>age</code>列进行排序</li></ul><h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>索引维护（更新，页分裂，页合并）</p><p>为什么我们一般在建表的时候都会创建一个自增主键，及时表中有业务唯一的id，也会创建一个自增主键？</p><p>1、因为主键只会自增，在B+树中一直都是往后写的，不会触发页分裂；但是如果删除过多的话，会触发页合并；</p><p>2、要考虑业务唯一的id的长度，比如身份证号，如果用身份证号作为主键，比直接使用整型自增的主键占用的字节数要多，这样每一个页存放的数据就会少，每个页存的数据少了，这样查询的时候，效率就会低。 同时主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</p><p>3、所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</p><p>索引的页分裂和页合并是怎么导致的，会有什么影响？具体的分裂和合并的过程是什么样子的？</p><p>为什么mysql的b+树，在非叶子节点中，也保留了双向列表</p><p><a href="https://www.zhihu.com/question/478187330/answer/2050494617">https://www.zhihu.com/question/478187330/answer/2050494617</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的索引从入门到入土&quot;&gt;&lt;a href=&quot;#mysql的索引从入门到入土&quot; class=&quot;headerlink&quot; title=&quot;mysql的索引从入门到入土&quot;&gt;&lt;/a&gt;mysql的索引从入门到入土&lt;/h1&gt;&lt;h2 id=&quot;索引的XMIND图&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="索引" scheme="https://zspcer.gitee.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql的性能调优从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-02-17T14:32:14.254Z</published>
    <updated>2023-02-17T14:32:14.254Z</updated>
    
    <content type="html"><![CDATA[<hr><p>资料：打开</p><p>事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能</p><p>减少大事务，可以减少主备延迟，可以降低锁的时间，减少死锁的产生，减少死锁检测的性能消耗。</p><p>减少并发量（减少对于同一行更新的并发量），可以减少死锁的产生，可以减少死锁检测的性能消耗</p><p>在删除数据的时候尽量加 limit。这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</p><p>在出现IO瓶颈的时候，可以将sync_binglog设置为100-1000内的值，表示累计多少个事务之后才会刷盘，默认是1表示每一个事务都会刷盘写binlog；</p><p>在出现IO瓶颈的时候，可以设置binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count，表示提升binlog的组提交的效果，但是会增加sql的响应时间</p><p>写多读少的场景，由于 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑普通索引。</p><p>mysql要调优，就要知道它为什么慢，哪里慢</p><p>在低版本：show profiles</p><p>在高版本：performance schema</p><p>以上有什么用？</p><ul><li>比如在实际环境中，有一个sql，非常慢</li><li>sql本身没有问题，看执行计划也比较慢，这个时候就可以用到上面的</li><li>可以更加详细的看到，这个sql到底是哪里慢</li></ul><p>process list 可以查看mysql的连接数量，顺丰云上的回话连接是不是？</p><p>不过一般有druid，不用太关注这个。但是呢，druid是什么，要去看看github上面的官网了。了解一下它的优点</p><p>MRR优化，将主键ID回表的随机读，改成主键ID的顺序读，但是默认是关闭的，优化器不倾向于使用MRR，不知道为啥；MRR 能够提升性能的核心在于，这条查询语句在索引 a 上做的是一个范围查询（也就是说，这是一个多值查询），可以得到足够多的主键 id。这样通过排序以后，再去主键索引查数据，才能体现出“顺序性”的优势。</p><p>字符集和字符编码的区别</p><p>大表拆分，将不常用的数据从表里拆出去，表小了之后，每个数据页存的数据就会多，查询的时候，就会减少磁盘IO</p><p>优化：</p><ul><li>不同的数据选择对应的mysql自建数据类型，比如数字就用数字类型，不要用字符串，时间就用时间类型，不要用字符串；用错了数据类型，对业务可能没影响，但是对mysql来说，内部多了一层转换，sql执行会比较慢</li><li>事件类型，建议用date，而不是timestamp，date类型</li></ul><p>大事务不仅会影响到主库，也是造成备库复制延迟的主要原因之一。因此，在平时的开发工作中，我建议你尽量减少大事务操作，把大事务拆成小事务。</p><p>show processlist</p><ul><li><p>看到的只是当前的并发连接数，如果你的系统动不动就成千上百个连接，其实都没关系，只是占用一些内存而已</p></li><li><p>&#96;&#96;&#96;sql<br>mysql&gt; show processlist;<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>| Id | User            | Host            | db   | Command | Time   | State                  | Info             |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>|  5 | event_scheduler | localhost       | NULL | Daemon  | 865562 | Waiting on empty queue | NULL             |<br>| 23 | root            | localhost:60179 | NULL | Query   |      0 | init                   | show processlist |<br>+—-+—————–+—————–+——+———+——–+————————+——————+<br>2 rows in set (0.00 sec)</p><pre class="line-numbers language-none"><code class="language-none">- 真正需要关注的是并发执行数，也就是并发执行的线程，因为连接存在，这个连接不一定在执行。- innodb的并发执行数，通过&#96;innodb_thread_concurrency&#96;这个参数来控制的，默认是0表示不限制。- &#96;innodb_thread_concurrency&#96;的计算规则是：正在执行的线程+1，如果一个线程在执行过程中，遇到了锁，需要等待，线程-1---# IN 查询优化这个名字还真不是我起的，今天要讲的知识点就叫**索引潜水（Index dive）**。先要从一件怪事说起：我先造点数据复现一下问题，创建一张用户表：&#96;&#96;&#96;sqlCREATE TABLE &#96;user&#96; (  &#96;id&#96; bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键ID&#39;,  &#96;name&#96; varchar(100) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;姓名&#39;,  &#96;age&#96; int(11) NOT NULL DEFAULT 0 COMMENT &#39;年龄&#39;,  PRIMARY KEY (&#96;id&#96;),  KEY &#96;idx_age&#96; (&#96;age&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>通过一批用户年龄，查询该年龄的用户信息，并查看一下SQL执行计划：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230209164837331.png" alt="image-20230209164837331"></p><p>where条件中有9个参数，重点关注一下执行计划中的预估扫描行数为279行。</p><p>到这里没什么问题，预估的非常准，实际就是279行。</p><p><img src="/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230209164853902.png" alt="image-20230209164853902"></p><p>但是，问题来了，当我们在where条件中，再加一个参数，变成了10个参数，预估扫描行数本应该增加，结果却大大减少了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230209164903103.png" alt="image-20230209164903103"></p><p>一下子减少到了30行，可是实际行数是多少呢？</p><p><img src="/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230209164911034.png" alt="image-20230209164911034"></p><p>实际是310行，预估扫描行数是30行，真是错到姥姥家了。</p><p><strong>MySQL咋回事啊，到底还能不能预估？</strong></p><p><strong>不能预估的话，换其他人！</strong></p><p>大家肯定也是满脸疑惑，直到我去官网上看到了一个词语，<strong>索引潜水（Index dive）</strong>。</p><p>跟这个词语相关的，还有一个配置参数 <strong>eq_range_index_dive_limit</strong>。</p><p><strong>MySQL5.7.3</strong>之前的版本，这个值默认是10，之后的版本，这个值默认是200。</p><p>可以使用命令查看一下这个值的大小：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%eq_range_index_dive_limit%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/mysql%E7%9A%84%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230209164922082.png" alt="image-20230209164922082"></p><p>当然，我们也可以手动修改这个值的大小：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> eq_range_index_dive_limit<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 <strong>eq_range_index_dive_limit</strong> 配置的作用就是：</p><p>当where语句in条件中参数个数小于这个值的时候，MySQL就采用<strong>索引潜水（Index dive）</strong>的方式预估扫描行数，非常准确。</p><p>当where语句in条件中参数个数大于等于这个值的时候，MySQL就采用另一种方式<strong>索引统计（Index statistics）</strong>预估扫描行数，误差较大。</p><p><strong>MySQL为什么要这么做呢？</strong></p><p>都用<strong>索引潜水（Index dive）</strong>的方式预估扫描行数，不好吗？</p><p>其实这是基于成本的考虑，<strong>索引潜水</strong>估算成本较高，适合小数据量。<strong>索引统计</strong>估算成本较低，适合大数据量。</p><p>一般情况下，我们的where语句的in条件的参数不会太多，适合使用<strong>索引潜水</strong>预估扫描行数。</p><p>建议还在使用<strong>MySQL5.7.3</strong>之前版本的同学们，手动修改一下<strong>索引潜水</strong>的配置参数，改成合适的数值。</p><p>如果你们项目中in条件最多有500个参数，就把配置参数改成501。</p><p>这样MySQL预估扫描行数更准确，可以选择更合适的索引。</p><hr><h2 id="performance-schema详解"><a href="#performance-schema详解" class="headerlink" title="performance schema详解"></a>performance schema详解</h2><h3 id="performance-schema的介绍"><a href="#performance-schema的介绍" class="headerlink" title="performance_schema的介绍"></a>performance_schema的介绍</h3><p>MySQL的performance schema 用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源等待等情况。</p><p>特点如下：</p><ul><li><p>提供了一种在数据库运行时实时检查server的内部执行情况的方法</p><ul><li><p>performance_schema 数据库中的表使用PERFORMANCE_SCHEMA存储引擎。</p></li><li><p>performance_schema 数据库主要关注数据库运行过程中的性能相关的数据</p></li><li><p>information_schema 数据库主要关注server运行过程中的元数据信息</p></li></ul></li><li><p>performance_schema 通过监视server的事件来实现监视server内部运行情况，</p><ul><li><p>“事件”：就是server内部活动中所做的任何事情以及对应的时间消耗（比如函数调用、操作系统的等待、SQL语句执行的阶段）</p></li><li><p>performance_schema中的事件与binlog中的记录的事件不同</p><ul><li>binlog中的事件是：描述数据修改的events</li><li>performance_schema中的事件是：计划调度程序（这是一种存储程序）的事件</li></ul></li><li><p>performance_schema中的事件记录的是：server执行某些活动对某些资源的消耗、耗时、这些活动执行的次数等情况。</p></li><li><p>performance_schema中的事件只记录在本地server的performance_schema中，不会被写入binlog中，也不会被复制到其他server中。</p></li><li><p>performance_schema的表中的数据不会持久化存储在磁盘中，而是保存在内存中，一旦服务器重启，这些数据会丢失</p></li></ul></li></ul><h3 id="performance-schema入门"><a href="#performance-schema入门" class="headerlink" title="performance schema入门"></a>performance schema入门</h3><p>在mysql的5.7版本中，性能模式是默认开启的，如果想要显式的关闭的话需要修改配置文件，不能直接进行修改，会报错Variable ‘performance_schema’ is a read only variable。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看performance_schema的属性</span>mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'performance_schema'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> Variable_name      <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token comment">-- 在配置文件中修改performance_schema的属性值，on表示开启，off表示关闭</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>performance_schema<span class="token operator">=</span><span class="token keyword">ON</span><span class="token comment">-- 切换数据库</span><span class="token keyword">use</span> performance_schema<span class="token punctuation">;</span><span class="token comment">-- 查看当前数据库下的所有表,会看到有很多表存储着相关的信息</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">-- 可以通过show create table tablename来查看创建表的时候的表结构</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> setup_consumers<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> <span class="token keyword">Table</span>           <span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Table</span>                    <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token operator">|</span> setup_consumers <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>setup_consumers<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>NAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>                        <span class="token identifier"><span class="token punctuation">`</span>ENABLED<span class="token punctuation">`</span></span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">'YES'</span><span class="token punctuation">,</span><span class="token string">'NO'</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>               <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>PERFORMANCE_SCHEMA <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token operator">|</span>  <span class="token operator">+</span><span class="token comment">-----------------+---------------------------------</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>想要搞明白后续的内容，同学们需要理解两个基本概念：</p><ul><li>instruments: 生产者，用于采集mysql中各种各样的操作产生的事件信息，对应配置表中的配置项我们可以称为监控采集配置项。</li><li>consumers: 消费者，对应的消费者表用于存储来自instruments采集的数据，对应配置表中的配置项我们可以称为消费存储配置项。</li></ul><h3 id="performance-schema表的分类"><a href="#performance-schema表的分类" class="headerlink" title="performance_schema表的分类"></a>performance_schema表的分类</h3><p>performance_schema库下的表可以按照监视纬度的不同进行分组。</p><h4 id="语句事件记录表"><a href="#语句事件记录表" class="headerlink" title="语句事件记录表"></a>语句事件记录表</h4><p>语句事件记录表，这些表记录了语句事件信息，当前语句事件表events_statements_current、历史语句事件表events_statements_history和长语句历史事件表events_statements_history_long、以及聚合后的摘要表summary，其中，summary表还可以根据帐号(account)，主机(host)，程序(program)，线程(thread)，用户(user)和全局(global)再进行细分)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%statement%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="等待事件记录表"><a href="#等待事件记录表" class="headerlink" title="等待事件记录表"></a>等待事件记录表</h4><p>等待事件记录表，与语句事件类型的相关记录表类似：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="阶段事件记录表"><a href="#阶段事件记录表" class="headerlink" title="阶段事件记录表"></a>阶段事件记录表</h4><p>阶段事件记录表，记录语句执行的阶段事件的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%stage%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="事务事件记录表"><a href="#事务事件记录表" class="headerlink" title="事务事件记录表"></a>事务事件记录表</h4><p>事务事件记录表，记录事务相关的事件的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%transaction%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="监控文件系统层调用的表"><a href="#监控文件系统层调用的表" class="headerlink" title="监控文件系统层调用的表"></a>监控文件系统层调用的表</h4><p>监控文件系统层调用的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%file%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="监视内存使用的表"><a href="#监视内存使用的表" class="headerlink" title="监视内存使用的表"></a>监视内存使用的表</h4><p>监视内存使用的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%memory%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置表"><a href="#配置表" class="headerlink" title="配置表"></a>配置表</h4><p>动态对performance_schema进行配置的配置表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'%setup%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="performance-schema的简单配置与使用"><a href="#performance-schema的简单配置与使用" class="headerlink" title="performance_schema的简单配置与使用"></a>performance_schema的简单配置与使用</h3><p>数据库刚刚初始化并启动时，并非所有instruments(事件采集项，在采集项的配置表中每一项都有一个开关字段，或为YES，或为NO)和consumers(与采集项类似，也有一个对应的事件类型保存表配置项，为YES就表示对应的表保存性能数据，为NO就表示对应的表不保存性能数据)都启用了，所以默认不会收集所有的事件，可能你需要检测的事件并没有打开，需要进行设置，可以使用如下两个语句打开对应的instruments和consumers（行计数可能会因MySQL版本而异)。</p><h4 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 打开等待事件的采集器配置项开关，需要修改setup_instruments配置表中对应的采集器配置项</span><span class="token keyword">UPDATE</span> setup_instruments <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token punctuation">,</span> TIMED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'wait%'</span><span class="token punctuation">;</span><span class="token comment">-- 打开等待事件的保存表配置开关，修改setup_consumers配置表中对应的配置项</span><span class="token keyword">UPDATE</span> setup_consumers <span class="token keyword">SET</span> ENABLED <span class="token operator">=</span> <span class="token string">'YES'</span><span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%wait%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看当前server正在做什么"><a href="#查看当前server正在做什么" class="headerlink" title="查看当前server正在做什么"></a>查看当前server正在做什么</h4><p>当配置完成之后可以查看当前server正在做什么，可以通过查询events_waits_current表来得知，该表中每个线程只包含一行数据，用于显示每个线程的最新监视事件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> events_waits_current\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>            THREAD_ID: <span class="token number">11</span>             EVENT_ID: <span class="token number">570</span>         END_EVENT_ID: <span class="token number">570</span>           EVENT_NAME: wait<span class="token operator">/</span>synch<span class="token operator">/</span>mutex<span class="token operator">/</span><span class="token keyword">innodb</span><span class="token operator">/</span>buf_dblwr_mutex               SOURCE:           TIMER_START: <span class="token number">4508505105239280</span>            TIMER_END: <span class="token number">4508505105270160</span>           TIMER_WAIT: <span class="token number">30880</span>                SPINS: <span class="token boolean">NULL</span>        OBJECT_SCHEMA: <span class="token boolean">NULL</span>          OBJECT_NAME: <span class="token boolean">NULL</span>           INDEX_NAME: <span class="token boolean">NULL</span>          OBJECT_TYPE: <span class="token boolean">NULL</span>OBJECT_INSTANCE_BEGIN: <span class="token number">67918392</span>     NESTING_EVENT_ID: <span class="token boolean">NULL</span>   NESTING_EVENT_TYPE: <span class="token boolean">NULL</span>            OPERATION: <span class="token keyword">lock</span>      NUMBER_OF_BYTES: <span class="token boolean">NULL</span>                FLAGS: <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该信息表示线程id为11的线程正在等待buf_dblwr_mutex锁，等待事件为30880<br>属性说明：</p><ul><li>id:事件来自哪个线程，事件编号是多少</li><li>event_name:表示检测到的具体的内容</li><li>source:表示这个检测代码在哪个源文件中以及行号</li><li>timer_start:表示该事件的开始时间</li><li>timer_end:表示该事件的结束时间</li><li>timer_wait:表示该事件总的花费时间</li></ul><p>注意：_current表中每个线程只保留一条记录，一旦线程完成工作，该表中不会再记录该线程的事件信息</p><h4 id="查看每个线程已经执行完成的事件信息"><a href="#查看每个线程已经执行完成的事件信息" class="headerlink" title="查看每个线程已经执行完成的事件信息"></a>查看每个线程已经执行完成的事件信息</h4><p>_history表中记录每个线程应该执行完成的事件信息，但每个线程的事件信息只会记录10条，再多就会被覆盖，*_history_long表中记录所有线程的事件信息，但总记录数量是10000，超过就会被覆盖掉</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> thread_id<span class="token punctuation">,</span>event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>timer_wait <span class="token keyword">from</span> events_waits_history <span class="token keyword">order</span> <span class="token keyword">by</span> thread_id <span class="token keyword">limit</span> <span class="token number">21</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看事件的汇总信息"><a href="#查看事件的汇总信息" class="headerlink" title="查看事件的汇总信息"></a>查看事件的汇总信息</h4><p>summary表提供所有事件的汇总信息，该组中的表以不同的方式汇总事件数据（如：按用户，按主机，按线程等等）。例如：要查看哪些instruments占用最多的时间，可以通过对events_waits_summary_global_by_event_name表的COUNT_STAR或SUM_TIMER_WAIT列进行查询（这两列是对事件的记录数执行COUNT（*）、事件记录的TIMER_WAIT列执行SUM（TIMER_WAIT）统计而来）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看被检测的对象"><a href="#查看被检测的对象" class="headerlink" title="查看被检测的对象"></a>查看被检测的对象</h4><p>instance表记录了哪些类型的对象会被检测。这些对象在被server使用时，在该表中将会产生一条事件记录，例如，file_instances表列出了文件I&#x2F;O操作及其关联文件名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> file_instances <span class="token keyword">limit</span> <span class="token number">20</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用配置项的参数说明"><a href="#常用配置项的参数说明" class="headerlink" title="常用配置项的参数说明"></a>常用配置项的参数说明</h3><h4 id="启动选项"><a href="#启动选项" class="headerlink" title="启动选项"></a>启动选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>performance_schema_consumer_events_statements_current&#x3D;TRUE</td><td>是否在mysql server启动时就开启events_statements_current表的记录功能(该表记录当前的语句事件信息)，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新setup_consumers配置表中的events_statements_current配置项，默认值为TRUE</td></tr><tr><td>performance_schema_consumer_events_statements_history&#x3D;TRUE</td><td>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件短历史信息，默认为TRUE</td></tr><tr><td>performance_schema_consumer_events_stages_history_long&#x3D;FALSE</td><td>与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件长历史信息，默认为FALSE</td></tr><tr><td>*</td><td>除了statement(语句)事件之外，还支持：wait(等待)事件、state(阶段)事件、transaction(事务)事件，他们与statement事件一样都有三个启动项分别进行配置，但这些等待事件默认未启用，如果需要在MySQL Server启动时一同启动，则通常需要写进my.cnf配置文件中</td></tr><tr><td>performance_schema_consumer_global_instrumentation&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启全局表（如：mutex_instances、rwlock_instances、cond_instances、file_instances、users、hostsaccounts、socket_summary_by_event_name、file_summary_by_instance等大部分的全局对象计数统计和事件汇总统计信息表 ）的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新全局配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_consumer_statements_digest&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启events_statements_summary_by_digest 表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新digest配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_consumer_thread_instrumentation&#x3D;TRUE</td><td>是否在MySQL Server启动时就开启events_xxx_summary_by_yyy_by_event_name表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新线程配置项<br/>默认值为TRUE</td></tr><tr><td>performance_schema_instrument[&#x3D;name]</td><td>是否在MySQL Server启动时就启用某些采集器，由于instruments配置项多达数千个，所以该配置项支持key-value模式，还支持%号进行通配等</td></tr></tbody></table><p>注意，这些启动选项要生效的前提是，需要设置performance_schema&#x3D;ON。另外，这些启动选项虽然无法使用show variables语句查看，但我们可以通过setup_instruments和setup_consumers表查询这些选项指定的值。</p><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%performance_schema%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重要的属性解释</p><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>performance_schema&#x3D;ON</td><td>控制performance_schema功能的开关，要使用MySQL的performance_schema，需要在mysqld启动时启用，以启用事件收集功能<br/>该参数在5.7.x之前支持performance_schema的版本中默认关闭，5.7.x版本开始默认开启<br/>注意：如果mysqld在初始化performance_schema时发现无法分配任何相关的内部缓冲区，则performance_schema将自动禁用，并将performance_schema设置为OFF</td></tr><tr><td>performance_schema_digests_size&#x3D;10000</td><td>控制events_statements_summary_by_digest表中的最大行数。如果产生的语句摘要信息超过此最大值，便无法继续存入该表，此时performance_schema会增加状态变量</td></tr><tr><td>performance_schema_events_statements_history_long_size&#x3D;10000</td><td>控制events_statements_history_long表中的最大行数，该参数控制所有会话在events_statements_history_long表中能够存放的总事件记录数，超过这个限制之后，最早的记录将被覆盖</td></tr><tr><td>performance_schema_events_statements_history_size&#x3D;10</td><td>控制events_statements_history表中单个线程（会话）的最大行数，该参数控制单个会话在events_statements_history表中能够存放的事件记录数，超过这个限制之后，单个会话最早的记录将被覆盖</td></tr><tr><td>performance_schema_max_digest_length&#x3D;1024</td><td>用于控制标准化形式的SQL语句文本在存入performance_schema时的限制长度，该变量与max_digest_length变量相关(max_digest_length变量含义请自行查阅相关资料)<br/>全局变量，只读变量，默认值1024字节，整型值，取值范围0~1048576</td></tr><tr><td>performance_schema_max_sql_text_length&#x3D;1024</td><td>控制存入events_statements_current，events_statements_history和events_statements_history_long语句事件表中的SQL_TEXT列的最大SQL长度字节数。 超出系统变量performance_schema_max_sql_text_length的部分将被丢弃，不会记录，一般情况下不需要调整该参数，除非被截断的部分与其他SQL比起来有很大差异<br/>全局变量，只读变量，整型值，默认值为1024字节，取值范围为0~1048576，5.7.6版本引入<br/>降低系统变量performance_schema_max_sql_text_length值可以减少内存使用，但如果汇总的SQL中，被截断部分有较大差异，会导致没有办法再对这些有较大差异的SQL进行区分。 增加该系统变量值会增加内存使用，但对于汇总SQL来讲可以更精准地区分不同的部分。</td></tr></tbody></table><h3 id="重要配置表的相关说明"><a href="#重要配置表的相关说明" class="headerlink" title="重要配置表的相关说明"></a>重要配置表的相关说明</h3><p>配置表之间存在相互关联关系</p><h4 id="performance-timers表"><a href="#performance-timers表" class="headerlink" title="performance_timers表"></a>performance_timers表</h4><p>performance_timers表中记录了server中有哪些可用的事件计时器</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> performance_timers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>timer_name</td><td>表示可用计时器名称，CYCLE是基于CPU周期计数器的定时器</td></tr><tr><td>timer_frequency</td><td>表示每秒钟对应的计时器单位的数量,CYCLE计时器的换算值与CPU的频率相关</td></tr><tr><td>timer_resolution</td><td>计时器精度值，表示在每个计时器被调用时额外增加的值</td></tr><tr><td>timer_overhead</td><td>表示在使用定时器获取事件时开销的最小周期值</td></tr></tbody></table><h4 id="setup-timers表"><a href="#setup-timers表" class="headerlink" title="setup_timers表"></a>setup_timers表</h4><p>setup_timers表中记录当前使用的事件计时器信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_timers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>计时器类型，对应某个事件类别</td></tr><tr><td>timer_name</td><td>计时器类型名称</td></tr></tbody></table><h4 id="setup-consumers表"><a href="#setup-consumers表" class="headerlink" title="setup_consumers表"></a>setup_consumers表</h4><p>setup_consumers表中列出了consumers可配置列表项</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> setup_consumers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>NAME</td><td>consumers配置名称</td></tr><tr><td>ENABLED</td><td>consumers是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。</td></tr></tbody></table><h4 id="setup-instruments-表"><a href="#setup-instruments-表" class="headerlink" title="setup_instruments 表"></a>setup_instruments 表</h4><p>setup_instruments 表列出了instruments 列表配置项，即代表了哪些事件支持被收集：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_instruments<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>NAME</td><td>instruments名称，instruments名称可能具有多个部分并形成层次结构</td></tr><tr><td>ENABLED</td><td>instrumetns是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。如果设置为NO，则这个instruments不会被执行，不会产生任何的事件信息</td></tr><tr><td>TIMED</td><td>instruments是否收集时间信息，有效值为YES或NO，此列可以使用UPDATE语句修改，如果设置为NO，则这个instruments不会收集时间信息</td></tr></tbody></table><h4 id="setup-actors表"><a href="#setup-actors表" class="headerlink" title="setup_actors表"></a>setup_actors表</h4><p>setup_actors表的初始内容是匹配任何用户和主机，因此对于所有前台线程，默认情况下启用监视和历史事件收集功能</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_actors<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>HOST</td><td>与grant语句类似的主机名，一个具体的字符串名字，或使用“％”表示“任何主机”</td></tr><tr><td>USER</td><td>一个具体的字符串名称，或使用“％”表示“任何用户”</td></tr><tr><td>ROLE</td><td>当前未使用，MySQL 8.0中才启用角色功能</td></tr><tr><td>ENABLED</td><td>是否启用与HOST，USER，ROLE匹配的前台线程的监控功能，有效值为：YES或NO</td></tr><tr><td>HISTORY</td><td>是否启用与HOST， USER，ROLE匹配的前台线程的历史事件记录功能，有效值为：YES或NO</td></tr></tbody></table><h4 id="setup-objects表"><a href="#setup-objects表" class="headerlink" title="setup_objects表"></a>setup_objects表</h4><p>setup_objects表控制performance_schema是否监视特定对象。默认情况下，此表的最大行数为100行。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> setup_objects<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>OBJECT_TYPE</td><td>instruments类型，有效值为：“EVENT”（事件调度器事件）、“FUNCTION”（存储函数）、“PROCEDURE”（存储过程）、“TABLE”（基表）、“TRIGGER”（触发器），TABLE对象类型的配置会影响表I&#x2F;O事件（wait&#x2F;io&#x2F;table&#x2F;sql&#x2F;handler instrument）和表锁事件（wait&#x2F;lock&#x2F;table&#x2F;sql&#x2F;handler instrument）的收集</td></tr><tr><td>OBJECT_SCHEMA</td><td>某个监视类型对象涵盖的数据库名称，一个字符串名称，或“％”(表示“任何数据库”)</td></tr><tr><td>OBJECT_NAME</td><td>某个监视类型对象涵盖的表名，一个字符串名称，或“％”(表示“任何数据库内的对象”)</td></tr><tr><td>ENABLED</td><td>是否开启对某个类型对象的监视功能，有效值为：YES或NO。此列可以修改</td></tr><tr><td>TIMED</td><td></td></tr></tbody></table><h4 id="threads表"><a href="#threads表" class="headerlink" title="threads表"></a>threads表</h4><p>threads表对于每个server线程生成一行包含线程相关的信息，</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> threads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>THREAD_ID</td><td>线程的唯一标识符（ID）</td></tr><tr><td>NAME</td><td>与server中的线程检测代码相关联的名称(注意，这里不是instruments名称)</td></tr><tr><td>TYPE</td><td>线程类型，有效值为：FOREGROUND、BACKGROUND。分别表示前台线程和后台线程</td></tr><tr><td>PROCESSLIST_ID</td><td>对应INFORMATION_SCHEMA.PROCESSLIST表中的ID列</td></tr><tr><td>PROCESSLIST_USER</td><td>与前台线程相关联的用户名，对于后台线程为NULL</td></tr><tr><td>PROCESSLIST_HOST</td><td>与前台线程关联的客户端的主机名，对于后台线程为NULL</td></tr><tr><td>PROCESSLIST_DB</td><td>线程的默认数据库，如果没有，则为NULL</td></tr><tr><td>PROCESSLIST_COMMAND</td><td>对于前台线程，该值代表着当前客户端正在执行的command类型，如果是sleep则表示当前会话处于空闲状态</td></tr><tr><td>PROCESSLIST_TIME</td><td>当前线程已处于当前线程状态的持续时间（秒）</td></tr><tr><td>PROCESSLIST_STATE</td><td>表示线程正在做什么事情</td></tr><tr><td>PROCESSLIST_INFO</td><td>线程正在执行的语句，如果没有执行任何语句，则为NULL</td></tr><tr><td>PARENT_THREAD_ID</td><td>如果这个线程是一个子线程（由另一个线程生成），那么该字段显示其父线程ID</td></tr><tr><td>ROLE</td><td>暂未使用</td></tr><tr><td>INSTRUMENTED</td><td>线程执行的事件是否被检测。有效值：YES、NO</td></tr><tr><td>HISTORY</td><td>是否记录线程的历史事件。有效值：YES、NO</td></tr><tr><td>THREAD_OS_ID</td><td>由操作系统层定义的线程或任务标识符（ID）</td></tr></tbody></table><p>注意：在performance_schema库中还包含了很多其他的库和表，能对数据库的性能做完整的监控，大家需要参考官网详细了解。</p><h3 id="performance-schema实践操作"><a href="#performance-schema实践操作" class="headerlink" title="performance_schema实践操作"></a>performance_schema实践操作</h3><p>基本了解了表的相关信息之后，可以通过这些表进行实际的查询操作来进行实际的分析。</p><h4 id="哪类的SQL执行最多？"><a href="#哪类的SQL执行最多？" class="headerlink" title="哪类的SQL执行最多？"></a>哪类的SQL执行最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>FIRST_SEEN<span class="token punctuation">,</span>LAST_SEEN <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL的平均响应时间最多？"><a href="#哪类SQL的平均响应时间最多？" class="headerlink" title="哪类SQL的平均响应时间最多？"></a>哪类SQL的平均响应时间最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL排序记录数最多？"><a href="#哪类SQL排序记录数最多？" class="headerlink" title="哪类SQL排序记录数最多？"></a>哪类SQL排序记录数最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_SORT_ROWS <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL扫描记录数最多？"><a href="#哪类SQL扫描记录数最多？" class="headerlink" title="哪类SQL扫描记录数最多？"></a>哪类SQL扫描记录数最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_EXAMINED <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL使用临时表最多？"><a href="#哪类SQL使用临时表最多？" class="headerlink" title="哪类SQL使用临时表最多？"></a>哪类SQL使用临时表最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_CREATED_TMP_TABLES<span class="token punctuation">,</span>SUM_CREATED_TMP_DISK_TABLES <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪类SQL返回结果集最多？"><a href="#哪类SQL返回结果集最多？" class="headerlink" title="哪类SQL返回结果集最多？"></a>哪类SQL返回结果集最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DIGEST_TEXT<span class="token punctuation">,</span>SUM_ROWS_SENT <span class="token keyword">FROM</span> events_statements_summary_by_digest <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> COUNT_STAR <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪个表物理IO最多？"><a href="#哪个表物理IO最多？" class="headerlink" title="哪个表物理IO最多？"></a>哪个表物理IO最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> file_name<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_READ<span class="token punctuation">,</span>SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">FROM</span> file_summary_by_instance <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_NUMBER_OF_BYTES_READ <span class="token operator">+</span> SUM_NUMBER_OF_BYTES_WRITE <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="哪个表逻辑IO最多？"><a href="#哪个表逻辑IO最多？" class="headerlink" title="哪个表逻辑IO最多？"></a>哪个表逻辑IO最多？</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> object_name<span class="token punctuation">,</span>COUNT_READ<span class="token punctuation">,</span>COUNT_WRITE<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>SUM_TIMER_WAIT <span class="token keyword">FROM</span> table_io_waits_summary_by_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sum_timer_wait <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个索引访问最多？"><a href="#哪个索引访问最多？" class="headerlink" title="哪个索引访问最多？"></a>哪个索引访问最多？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME<span class="token punctuation">,</span>COUNT_FETCH<span class="token punctuation">,</span>COUNT_INSERT<span class="token punctuation">,</span>COUNT_UPDATE<span class="token punctuation">,</span>COUNT_DELETE <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个索引从来没有用过？"><a href="#哪个索引从来没有用过？" class="headerlink" title="哪个索引从来没有用过？"></a>哪个索引从来没有用过？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">,</span>INDEX_NAME <span class="token keyword">FROM</span> table_io_waits_summary_by_index_usage <span class="token keyword">WHERE</span> INDEX_NAME <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">AND</span> COUNT_STAR <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> OBJECT_SCHEMA <span class="token operator">&lt;></span> <span class="token string">'mysql'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> OBJECT_SCHEMA<span class="token punctuation">,</span>OBJECT_NAME<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="哪个等待事件消耗时间最多？"><a href="#哪个等待事件消耗时间最多？" class="headerlink" title="哪个等待事件消耗时间最多？"></a>哪个等待事件消耗时间最多？</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_NAME<span class="token punctuation">,</span>COUNT_STAR<span class="token punctuation">,</span>SUM_TIMER_WAIT<span class="token punctuation">,</span>AVG_TIMER_WAIT <span class="token keyword">FROM</span> events_waits_summary_global_by_event_name <span class="token keyword">WHERE</span> event_name <span class="token operator">!=</span> <span class="token string">'idle'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SUM_TIMER_WAIT <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息"><a href="#剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息" class="headerlink" title="剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息"></a>剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> EVENT_ID<span class="token punctuation">,</span>sql_text <span class="token keyword">FROM</span> events_statements_history <span class="token keyword">WHERE</span> sql_text <span class="token operator">LIKE</span> <span class="token string">'%count(*)%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看每个阶段的时间消耗"><a href="#查看每个阶段的时间消耗" class="headerlink" title="查看每个阶段的时间消耗"></a>查看每个阶段的时间消耗</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>EVENT_NAME<span class="token punctuation">,</span>SOURCE<span class="token punctuation">,</span>TIMER_END <span class="token operator">-</span> TIMER_START <span class="token keyword">FROM</span> events_stages_history_long <span class="token keyword">WHERE</span> NESTING_EVENT_ID <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看每个阶段的锁等待情况"><a href="#查看每个阶段的锁等待情况" class="headerlink" title="查看每个阶段的锁等待情况"></a>查看每个阶段的锁等待情况</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> event_id<span class="token punctuation">,</span>event_name<span class="token punctuation">,</span>source<span class="token punctuation">,</span>timer_wait<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>nesting_event_id <span class="token keyword">FROM</span> events_waits_history_long <span class="token keyword">WHERE</span> nesting_event_id <span class="token operator">=</span> <span class="token number">1553</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="看懂mysql执行计划"><a href="#看懂mysql执行计划" class="headerlink" title="看懂mysql执行计划"></a>看懂mysql执行计划</h2><p>​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。</p><p>​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。</p><p>​   官网地址： <a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html">https://dev.mysql.com/doc/refman/5.5/en/explain-output.html</a> </p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*Navicat MySQL Data TransferSource Server         : mybatisSource Server Version : 50722Source Host           : localhost:3306Source Database       : dempTarget Server Type    : MYSQLTarget Server Version : 50722File Encoding         : 65001Date: 2020-02-11 20:05:02*/</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for dept</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DNAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>LOC<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of dept</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span> <span class="token string">'ACCOUNTING'</span><span class="token punctuation">,</span> <span class="token string">'NEW YORK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'RESEARCH'</span><span class="token punctuation">,</span> <span class="token string">'DALLAS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'30'</span><span class="token punctuation">,</span> <span class="token string">'SALES'</span><span class="token punctuation">,</span> <span class="token string">'CHICAGO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'40'</span><span class="token punctuation">,</span> <span class="token string">'OPERATIONS'</span><span class="token punctuation">,</span> <span class="token string">'BOSTON'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for emp</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>ENAME<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>JOB<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>MGR<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>HIREDATE<span class="token punctuation">`</span></span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>SAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>COMM<span class="token punctuation">`</span></span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of emp</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7369'</span><span class="token punctuation">,</span> <span class="token string">'SMITH'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7902'</span><span class="token punctuation">,</span> <span class="token string">'1980-12-17'</span><span class="token punctuation">,</span> <span class="token string">'800.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7499'</span><span class="token punctuation">,</span> <span class="token string">'ALLEN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-20'</span><span class="token punctuation">,</span> <span class="token string">'1600.00'</span><span class="token punctuation">,</span> <span class="token string">'300.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7521'</span><span class="token punctuation">,</span> <span class="token string">'WARD'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-22'</span><span class="token punctuation">,</span> <span class="token string">'1250.00'</span><span class="token punctuation">,</span> <span class="token string">'500.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7566'</span><span class="token punctuation">,</span> <span class="token string">'JONES'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-02-02'</span><span class="token punctuation">,</span> <span class="token string">'2975.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7654'</span><span class="token punctuation">,</span> <span class="token string">'MARTIN'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-28'</span><span class="token punctuation">,</span> <span class="token string">'1250.00'</span><span class="token punctuation">,</span> <span class="token string">'1400.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'BLAKE'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2850.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7782'</span><span class="token punctuation">,</span> <span class="token string">'CLARK'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">,</span> <span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-06'</span><span class="token punctuation">,</span> <span class="token string">'2450.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7839'</span><span class="token punctuation">,</span> <span class="token string">'KING'</span><span class="token punctuation">,</span> <span class="token string">'PRESIDENT'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'1981-11-17'</span><span class="token punctuation">,</span> <span class="token string">'5000.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7844'</span><span class="token punctuation">,</span> <span class="token string">'TURNER'</span><span class="token punctuation">,</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-09-08'</span><span class="token punctuation">,</span> <span class="token string">'1500.00'</span><span class="token punctuation">,</span> <span class="token string">'0.00'</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7900'</span><span class="token punctuation">,</span> <span class="token string">'JAMES'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7698'</span><span class="token punctuation">,</span> <span class="token string">'1981-12-03'</span><span class="token punctuation">,</span> <span class="token string">'950.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'30'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7902'</span><span class="token punctuation">,</span> <span class="token string">'FORD'</span><span class="token punctuation">,</span> <span class="token string">'ANALYST'</span><span class="token punctuation">,</span> <span class="token string">'7566'</span><span class="token punctuation">,</span> <span class="token string">'1981-12-03'</span><span class="token punctuation">,</span> <span class="token string">'3000.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>emp<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'7934'</span><span class="token punctuation">,</span> <span class="token string">'MILLER'</span><span class="token punctuation">,</span> <span class="token string">'CLERK'</span><span class="token punctuation">,</span> <span class="token string">'7782'</span><span class="token punctuation">,</span> <span class="token string">'1982-01-23'</span><span class="token punctuation">,</span> <span class="token string">'1300.00'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for salgrade</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>GRADE<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>LOSAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>HISAL<span class="token punctuation">`</span></span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>GRADE<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of salgrade</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'700'</span><span class="token punctuation">,</span> <span class="token string">'1200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'1201'</span><span class="token punctuation">,</span> <span class="token string">'1400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'1401'</span><span class="token punctuation">,</span> <span class="token string">'2000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'2001'</span><span class="token punctuation">,</span> <span class="token string">'3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>salgrade<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'3001'</span><span class="token punctuation">,</span> <span class="token string">'9999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行计划中包含的信息"><a href="#执行计划中包含的信息" class="headerlink" title="执行计划中包含的信息"></a>执行计划中包含的信息</h3><table><thead><tr><th align="center">列</th><th>含义</th></tr></thead><tbody><tr><td align="center">id</td><td>select查询的序列号</td></tr><tr><td align="center">select_type</td><td>查询的类型，是普通查询还是联合查询还是子查询</td></tr><tr><td align="center">table</td><td>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</td></tr><tr><td align="center">partitions</td><td>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</td></tr><tr><td align="center">type</td><td>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描</td></tr><tr><td align="center">possible_keys</td><td>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</td></tr><tr><td align="center">key</td><td>实际使用的索引，如果为null，则没有使用索引</td></tr><tr><td align="center">key_len</td><td>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好</td></tr><tr><td align="center">ref</td><td>显示索引的哪一列被使用了，如果可能的话，是一个常数</td></tr><tr><td align="center">rows</td><td>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数</td></tr><tr><td align="center">filtered</td><td>某个表经过搜索条件过滤后剩余记录条数的百分比，rows 乘以 filtered 的结果表示要与下表连接的行数</td></tr><tr><td align="center">extra</td><td>额外的信息</td></tr></tbody></table><h4 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h4><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><ul><li>如果id相同，那么执行顺序从上到下</li><li>如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>同时存在id相同和不同的：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</li></ul><h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a><strong>select_type</strong></h4><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><ul><li><code>sample</code>：简单的查询，不包含子查询和union</li><li><code>primary</code>：查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</li><li><code>union</code>：若第二个select出现在union之后，则被标记为union</li><li><code>dependent union</code> ： 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</li><li><code>union result</code>：从union表获取结果的select</li><li><code>subquery</code>：在select或者where列表中包含子查询</li><li><code>dependent subquery</code>：subquery的子查询要受到外部表查询的影响</li><li><code>derived</code>：from子句中出现的子查询</li><li><code>uncacheable subquery</code>：表示使用子查询的结果不能被缓存</li><li><code>uncacheable union</code>：表示union的查询结果不能被缓存：sql语句未验证</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- sample:简单的查询，不包含子查询和union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">-- union:若第二个select出现在union之后，则被标记为union</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">-- dependent union : 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>empno  <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment">-- union result:从union表获取结果的select</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">-- subquery:在select或者where列表中包含子查询</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">-- dependent subquery:subquery的子查询要受到外部表查询的影响</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- DERIVED: from子句中出现的子查询，也叫做派生类，</span><span class="token keyword">explain</span> <span class="token keyword">select</span> staname<span class="token punctuation">,</span>ename supname <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> ename staname<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">)</span> t <span class="token keyword">join</span> emp <span class="token keyword">on</span> t<span class="token punctuation">.</span>mgr<span class="token operator">=</span>emp<span class="token punctuation">.</span>empno <span class="token punctuation">;</span><span class="token comment">-- UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> empno <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span>@<span class="token variable">@sort_buffer_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h4><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集</p><ul><li>如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</li><li>表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</li><li>当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</li></ul><h4 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a><strong>partitions</strong></h4><p>表示当前查询访问的分区，如果是NULL，表示当前不是分区表</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h4><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p><ul><li><code>system</code>：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</li><li><code>const</code>：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候是这种情况</li><li><code>eq_ref</code>：使用唯一性索引进行数据查找</li><li><code>ref</code>：使用了非唯一性索引进行数据的查找</li><li><code>fulltext</code></li><li><code>ref_or_null</code>：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</li><li><code>index_merge</code>：在查询过程中需要多个索引组合使用</li><li><code>unique_subquery</code>：该连接类型类似与index_subquery,使用的是唯一索引</li><li><code>index_subquery</code>：利用索引来关联子查询，不再扫描全表</li><li><code>range</code>：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描</li><li><code>index</code>：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，或者是使用了索引进行排序，这样就避免数据的重排序</li><li><code>all</code>：全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</li></ul><p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> empno <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment">-- range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, &lt;>, >, >=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">between</span> <span class="token number">7000</span> <span class="token operator">and</span> <span class="token number">7500</span><span class="token punctuation">;</span><span class="token comment">-- index_subquery：利用索引来关联子查询，不再扫描全表</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> emp<span class="token punctuation">.</span>job <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> job <span class="token keyword">from</span> t_job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> deptno <span class="token keyword">from</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span><span class="token comment">-- ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> mgr <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> mgr<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span class="token comment">-- ref：使用了非唯一性索引进行数据的查找</span> <span class="token keyword">create</span> <span class="token keyword">index</span> idx_3 <span class="token keyword">on</span> emp<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp e<span class="token punctuation">,</span>dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span>d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment">-- eq_ref ：使用唯一性索引进行数据查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>emp2 <span class="token keyword">where</span> emp<span class="token punctuation">.</span>empno <span class="token operator">=</span> emp2<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token comment">-- const：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候会有这个type</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span> <span class="token comment">-- system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a><strong>possible_keys</strong></h4><p>显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h4><p>实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h4><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h4><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> dept<span class="token punctuation">.</span>deptno <span class="token operator">and</span> emp<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a><strong>rows</strong></h4><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a><strong>filtered</strong></h4><p>某个表经过搜索条件<code>过滤后剩余记录条数</code>的百分比，这个<code>过滤后剩余记录条数</code>，是需要用来对下一张表进行连接的行数。什么意思呢？</p><ul><li>对于单表查询来说，这个filtered列的值没什么意义。</li><li>对于多表联合查询，假设表1扫描的rows是10000行，filteres是20%，那么表示要与表2进行连接的行数是：10000 x 20% &#x3D; 2000条记录。</li></ul><h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a><strong>extra</strong></h4><p>包含额外的信息。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- using filesort :说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span><span class="token comment">-- using temporary:需要使用临时表来保存中间结果，查询完成之后把临时表删除</span><span class="token keyword">explain</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> ename<span class="token punctuation">;</span><span class="token comment">-- using index: 这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span><span class="token keyword">explain</span> <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- using where:使用where进行条件过滤</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- using join buffer :使用连接缓存，情况没有模拟出来</span><span class="token comment">-- impossible where：where语句的结果总是false</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7469</span><span class="token punctuation">;</span><span class="token comment">-- using MRR：使用了Multi-Range Read 优化 (MRR)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;资料：打开&lt;/p&gt;
&lt;p&gt;事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能&lt;/p&gt;
&lt;p&gt;减少大事务，可以减少主备延迟，可</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="性能调优" scheme="https://zspcer.gitee.io/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
    <category term="调优" scheme="https://zspcer.gitee.io/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>通过docker安装mysql5.7.19并解决中文乱码问题的方法</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%AE%89%E8%A3%85mysql5719%E5%B9%B6%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/docker%E5%AE%89%E8%A3%85mysql5719%E5%B9%B6%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</id>
    <published>2023-02-05T14:28:54.000Z</published>
    <updated>2023-02-17T14:32:14.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过docker安装mysql5-7-19并解决中文乱码问题的方法"><a href="#通过docker安装mysql5-7-19并解决中文乱码问题的方法" class="headerlink" title="通过docker安装mysql5.7.19并解决中文乱码问题的方法"></a>通过docker安装mysql5.7.19并解决中文乱码问题的方法</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>首先安装docker；</p><h2 id="安装mysql5-7-19"><a href="#安装mysql5-7-19" class="headerlink" title="安装mysql5.7.19"></a>安装mysql5.7.19</h2><p>从dokcer仓库下载5.7.19版本的数据，如果不指定版本的话，下载的就是最新的版本，为什么选择5.7.19，因为公司使用的数据库是这个版本，所以就选择这个了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载好之后，如果有docker desktop的话，就可以看到了，没有desktop也可以使用命令查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zhuansun@MacBook-Pro ~ % <span class="token function">docker</span> image listREPOSITORY  TAG    IMAGE ID    CREATED    SIZEmysql     <span class="token number">5.7</span>.19   3e3878acd190  <span class="token number">3</span> years ago  412MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者docker desktop</p><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901193908153.png" alt="image-20220901193908153" style="zoom: 50%;" /><h2 id="启动mysql5-7-19"><a href="#启动mysql5-7-19" class="headerlink" title="启动mysql5.7.19"></a>启动mysql5.7.19</h2><p>然后就是启动docker容器了：</p><p>同样的，有两种方式：一种是通过图形化工具docker-desktop；一种是通过命令；</p><h3 id="命令行简单启动"><a href="#命令行简单启动" class="headerlink" title="命令行简单启动"></a>命令行简单启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql5.7.19 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解释一下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker run</td><td>没什么说的</td></tr><tr><td>-p 3306:3306</td><td>指定mysql的端口，前面是本机端口，后面是容器端口；如果容器已经起了一个3306的mysql，你想在启动一个mysql，就得把后面的端口改了。</td></tr><tr><td>–name mysql5.7.19</td><td>容器启动后的名字，只是个名字</td></tr><tr><td>-e MYSQL_ROOT_PASSWORD&#x3D;123456</td><td>docker启动mysql必须要设置密码的，这里是直接设置了root密码，也可以通过其他命令指定新的用户名和密码。网上搜就有</td></tr><tr><td>-d mysql:5.7.19</td><td>使用mysql:5.7.19这个版本的镜像</td></tr></tbody></table><h3 id="docker-desktop简单启动"><a href="#docker-desktop简单启动" class="headerlink" title="docker-desktop简单启动"></a>docker-desktop简单启动</h3><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195130908.png" alt="image-20220901195130908" style="zoom: 50%;" /><ul><li><p>和命令行方式比较一下，就知道啥意思了。但是docker-desktop没找到哪里设置用户名和密码。所以我最终选择是使用命令行方式；</p></li><li><p>但是我们注意到dokcer-desktop下面有一个Volume卷的设置，命令行没有，它是什么意思呢？</p></li><li><p>它表示可以把容器中的数据和本地的数据进行互通；</p></li><li><p>我们知道容器一旦被关闭，或者重启，所有的数据都会丢失；所以我们要把容器中的数据映射到本地磁盘，就是这个意思。</p></li><li><p>不过，上面说了，我们使用命令行的方式启动mysql，那么命令行怎么映射呢？</p></li></ul><h3 id="命令行完整启动"><a href="#命令行完整启动" class="headerlink" title="命令行完整启动"></a>命令行完整启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--cpus</span> <span class="token number">2</span> <span class="token parameter variable">-m</span> 4GB <span class="token parameter variable">--name</span> mysql5.7.19 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/logs:/var/log/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/data:/var/lib/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释一下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>-v</td><td>-v表示将本地的一个文件夹挂载到容器中，容器每次启动的时候，本地的文件都会覆盖到容器中；容器中产生的文件，也会写到本地中。这样保证了数据的持久化</td></tr><tr><td>–cpus</td><td>配置cpu，有时候mysql跑的太快，cpu直接就满了，这里可以配置cpu，后面跟的数据，是cpu的核数</td></tr><tr><td>-m</td><td>配置内存，默认内存是2G，可以通过 docker stats 查看</td></tr></tbody></table><ul><li>然后在docker-desktop中也可以看到启动后的app</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195155480.png" alt="image-20220901195155480" style="zoom:50%;" /><h2 id="datagrip连接mysql"><a href="#datagrip连接mysql" class="headerlink" title="datagrip连接mysql"></a>datagrip连接mysql</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">localhost<span class="token number">3306</span>root<span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>datagrip也可以连接成功</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195211507.png" alt="image-20220901195211507" style="zoom:50%;" /><h2 id="中文乱码问题的发现"><a href="#中文乱码问题的发现" class="headerlink" title="中文乱码问题的发现"></a>中文乱码问题的发现</h2><ul><li><p>我以为到这儿就结束了，其实不是的。</p></li><li><p>因为我在mysql中创建了一个数据库，然后创建了一个表，通过代码插入一条记录之后，发现，妈的，乱码了。</p></li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195229189.png" alt="image-20220901195229189" style="zoom:50%;" /><ul><li><p>然后排查为什么会乱码：</p></li><li><p>这是因为我们的mysql通过docker启动之后，默认的编码其实并不是utf8，而是latin1；这就导致了中文乱码的原因。</p></li><li><p>通过</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;%char%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以验证这个问题</p><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195253309.png" alt="image-20220901195253309" style="zoom:50%;" /><h2 id="中文乱码问题的排查思路"><a href="#中文乱码问题的排查思路" class="headerlink" title="中文乱码问题的排查思路"></a>中文乱码问题的排查思路</h2><ul><li><p>那么怎么办呢？就需要修改mysql的配置文件了。</p></li><li><p>这里必须要吐槽一下百度，搜出来的东西，他娘的，都是狗屎；</p></li><li><p>搜索关键字：mac mysql 5.7.19 中文乱码</p></li><li><p>然后百度建议：修改etc下的my.cnf；他娘的，根本没有这个文件好不好。</p></li><li><p>最后还是搜索了好久好久，一直折腾到大半夜，才找到原因</p></li><li><p>在mysql5.7.18版本之前，在etc下会有一个my-default.cnf的文件（网上搜的，没有验证），然后我们安装好mysql之后，把这个文件改个名字就可以了。作为全局配置，但是后续版本，mysql把他删掉了。所以我使用的5.7.19是没有的。</p></li><li><p>那么5.7.19的配置文件在哪里呢？</p></li><li><p>应该是在etc&#x2F;mysql&#x2F;这个文件夹下面，但是我登录我的容器一看：这个文件夹下面是空的？卧槽？</p></li><li><p>后续排查发现，因为我们使用了</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-v</span> /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>所以我们本地的文件覆盖了容器中的内容；本地的文件夹是空的，所以容器里面技术空了。</p></li><li><p>那么没办法了，我又重新启动了一个mysql-dokcer叫做 mysql5.7.19-1，然后没有指定-v,同时还得修改端口，要不然端口就冲突了；</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3307 <span class="token parameter variable">--name</span> mysql5.7.19-1 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mysql:5.7.19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>这样我们创建了一个新的mysql容器，登录进去看看：</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195552187.png" alt="image-20220901195552187" style="zoom:50%;" /><ul><li>通过docker-desktop登录进去看看：</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195603660.png" alt="image-20220901195603660" style="zoom:50%;" /><ul><li>进入到容器中，我们可以看到其实 etc&#x2F;mysql下面是有配置文件的。</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195615455.png" alt="image-20220901195615455" style="zoom:50%;" /><ul><li><p>这样就验证了我们之前的猜测，就是本地的空文件夹把mysql里的配置文件给覆盖掉了。</p></li><li><p>那么怎么办呢？ 我得改配置文件啊。得想办法把配置文件放在本地文件夹中，然后再次重启容器，配置文件就可以加载进去了。</p></li><li><p>怎么把配置文件复制到本地呢？</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> cp:mysql5.7.19-1:/etc/mysql /Users/zhuansun/workspace/docker/mysql5.7.19/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>好了，用上面的命令就可以解决了，但是复制下来之后，发现，我草？这么多文件不知道改哪一个，而且怎么还有一个 连接 文件。</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195651594.png" alt="image-20220901195651594" style="zoom:50%;" /><ul><li>继续百度吧，又被恶心到了一圈。最终决定还是靠自己，但是还是搜到一些有用的东西的。关于这个链接文件是什么？</li><li>其实并不是所有的配置文件都在etc下面的，mysql配置文件分为全局配置，和用户配置；是放在不同的地方的，但是<strong>会通过一个链接文件，链接过来</strong>；</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195658976.png" alt="image-20220901195658976" style="zoom:50%;" /><ul><li>所以按照这个思路，我们去 mysql5.7.19-1 中去看看，链接文件都连接到哪里啦。</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195805841.png" alt="image-20220901195805841" style="zoom:50%;" /><ul><li>打开这两个文件，看看</li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901195823380.png" alt="image-20220901195823380" style="zoom:50%;" /><ul><li><p>打开之后可以看到一个文件是用来配置 mysql 的一个文件是用来配置mysqld的，</p></li><li><p>到这里就比较明确的，我们把设置编码的命令设置进来。像下面这个样子。注意要在本地的文件夹中修改哦：只需要修改mysqld.cnf就行了，因为它是全局的</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.</span><span class="token comment">#</span><span class="token comment"># This program is free software; you can redistribute it and/or modify</span><span class="token comment"># it under the terms of the GNU General Public License as published by</span><span class="token comment"># the Free Software Foundation; version 2 of the License.</span><span class="token comment">#</span><span class="token comment"># This program is distributed in the hope that it will be useful,</span><span class="token comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span><span class="token comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><span class="token comment"># GNU General Public License for more details.</span><span class="token comment">#</span><span class="token comment"># You should have received a copy of the GNU General Public License</span><span class="token comment"># along with this program; if not, write to the Free Software</span><span class="token comment"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span>​<span class="token comment">#</span><span class="token comment"># The MySQL  Server configuration file.</span><span class="token comment">#</span><span class="token comment"># For explanations see</span><span class="token comment"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span>​<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8collation<span class="token operator">-</span>server<span class="token operator">=</span>utf8_general_cipid<span class="token operator">-</span><span class="token keyword">file</span>    <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>pidsocket      <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>sockdatadir     <span class="token operator">=</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token comment">#log-error  = /var/log/mysql/error.log</span><span class="token comment"># By default we only accept connections from localhost</span><span class="token comment">#bind-address   = 127.0.0.1</span><span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic<span class="token operator">-</span>links<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token keyword">default</span><span class="token operator">-</span><span class="token keyword">character</span><span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200508795.png" alt="image-20220901200508795" style="zoom:50%;" /><ul><li><p>然后重启docker容器；欣喜若狂</p></li><li><p>结果发现中文还是插入不进来。卧槽？而且查看编码，仍然是拉丁。奇怪了。</p></li><li><p>最后仔细看了一下，发现是拉丁的参数是database级别的。</p></li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200533956.png" alt="image-20220901200533956" style="zoom:50%;" /><ul><li><p>然后想到，创建数据库之后，数据库是有编码的，因为这个数据库是在修改编码之前创建的，所以他的编码是不会变的。</p></li><li><p>重新创建一个数据库再次测试，发现新的数据库的编码是正确的。</p></li><li><p>至此，中文乱码问题解决。</p></li></ul><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200554433.png" alt="image-20220901200554433" style="zoom:50%;" /><img src="docker安装mysql5719并解决中文乱码.assets/image-20220901200614121.png" alt="image-20220901200614121" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过docker安装mysql5-7-19并解决中文乱码问题的方法&quot;&gt;&lt;a href=&quot;#通过docker安装mysql5-7-19并解决中文乱码问题的方法&quot; class=&quot;headerlink&quot; title=&quot;通过docker安装mysql5.7.19并解决中文</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="部署与容器" scheme="https://zspcer.gitee.io/categories/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/"/>
    
    <category term="DOCKER" scheme="https://zspcer.gitee.io/categories/JAVA/%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AE%B9%E5%99%A8/DOCKER/"/>
    
    
    <category term="docker" scheme="https://zspcer.gitee.io/tags/docker/"/>
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="乱码" scheme="https://zspcer.gitee.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>docker+hexo+gitee部署完美个人博客</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/hexo/docker+hexo+gitee%E9%83%A8%E7%BD%B2%E5%AE%8C%E7%BE%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/hexo/docker+hexo+gitee%E9%83%A8%E7%BD%B2%E5%AE%8C%E7%BE%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-02-02T13:53:02.124Z</published>
    <updated>2023-02-02T13:53:02.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>因为引用的文章在下面都说到了，可以先看看</p><p><a href="https://zhuanlan.zhihu.com/p/372398281">Docker + Git 部署Hexo发布</a></p><p><a href="https://www.cnblogs.com/moshuying/p/15801437.html">【hexo指南】hexo配置ER图流程图时序图插件</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为平时使用typora写文章，除了基本的MD语法之外，还使用了</p><ul><li>本地图片</li><li>mermaid</li></ul><p>就是上面两点，导致部署hexo比较麻烦，特别是第一点。</p><p>为什么呢？</p><p>hexo新版本不是支持了本地图片吗？</p><p>但是支持的前提是：图片的文件夹和MD文件名一致，像下面这样</p><ul><li>xxxxx.md</li><li>xxxxx</li></ul><p>而我的图片存储方式是：</p><ul><li>xxxxx.md</li><li>xxxxx.assets</li></ul><p>对应typora的设置就是：</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030220722156.png" alt="image-20221030220722156" style="zoom:50%;" /><p>所以hexo就不支持了，我就很难受</p><h2 id="第一步：准备hexo文件"><a href="#第一步：准备hexo文件" class="headerlink" title="第一步：准备hexo文件"></a>第一步：准备hexo文件</h2><p>你需要准备你的所有笔记文件：比如我的是放在gitee的，大致有下面这些笔记</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030220831563.png" alt="image-20221030220831563" style="zoom:50%;" /><p>然后需要准备一个hexo的主题，我推荐是 butterfly，把主题下载下来</p><p>然后需要准备hexo的配置文件_config.yml，配置好你所需要的所有内容</p><p>然后准备下面的脚本，命名为：hexo-img-move.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//note/xxx/xx.assets  2020/10/30/xxx/xx.assets</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">dir<span class="token punctuation">,</span>dest</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fs<span class="token punctuation">.</span><span class="token function">pathExists</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> exists</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历递归public文件夹，将</span><span class="token keyword">function</span> <span class="token function">readFileList</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> filesList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">itm<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> stat <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path <span class="token operator">+</span> itm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//递归读取文件</span>            <span class="token function">readFileList</span><span class="token punctuation">(</span>path <span class="token operator">+</span> itm <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">,</span> filesList<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个对象存放文件的路径和名字</span>            obj<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span><span class="token comment">//路径</span>            obj<span class="token punctuation">.</span>filename <span class="token operator">=</span> itm<span class="token comment">//名字</span>            filesList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> getFiles <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取文件夹下的所有文件</span>    <span class="token function-variable function">getFileList</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> filesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">readFileList</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> filesList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filesList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>getFiles<span class="token punctuation">.</span><span class="token function">getFileList</span><span class="token punctuation">(</span><span class="token string">'/var/www/hexo/public/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// console.log(obj.path);</span><span class="token comment">// var paths = obj.path.split('public/');</span><span class="token comment">// var dir_part = paths[1];</span><span class="token comment">// var dir_full = '/var/www/hexo/source/_posts/'+dir_part;</span><span class="token comment">// var dir = dir_full.substring(0,dir_full.length-1)+'.assets';</span><span class="token keyword">var</span> dir_part <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'note'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> dir_full <span class="token operator">=</span> <span class="token string">'/var/www/hexo/source/_posts/note'</span><span class="token operator">+</span>dir_part<span class="token punctuation">;</span><span class="token keyword">var</span> dir <span class="token operator">=</span> dir_full<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dir_full<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.assets'</span><span class="token punctuation">;</span><span class="token comment">//第一种：复制到 dir 的下一级目录下</span><span class="token keyword">var</span> dirs <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> aessets_name <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">var</span> dest1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token operator">+</span>aessets_name<span class="token punctuation">;</span><span class="token comment">// 第二种：复制到 dir 同级目录下</span><span class="token comment">// var dest2 = obj.path.substring(0,obj.path.length-1)+'.assets';</span><span class="token comment">//第三种：复制到 public 下</span><span class="token keyword">var</span> dirs <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> forder_name <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.assets'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> dest_full <span class="token operator">=</span> obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span>path<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.assets'</span><span class="token punctuation">;</span><span class="token keyword">var</span> dests <span class="token operator">=</span> dest_full<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> dest3 <span class="token operator">=</span> <span class="token string">'/var/www/hexo/public/'</span><span class="token operator">+</span>dests<span class="token punctuation">[</span>dests<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token comment">///var/www/hexo/public/2022/10/30/note/JAVA/数据库/MYSQL/mysql的日志从入门到入土/</span><span class="token comment">// console.log(dir)</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>dest1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>dest3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030221220970.png" alt="image-20221030221220970" style="zoom:80%;" /><h2 id="第二步：准备dockerfile"><a href="#第二步：准备dockerfile" class="headerlink" title="第二步：准备dockerfile"></a>第二步：准备dockerfile</h2><p>将下面的文件 命名为：Dockerfile  没有后缀名</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:14-alpine</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /var/www/hexo</span><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"Asia/Shanghai"</span> > /etc/timezone <span class="token operator">\</span>    &amp;&amp; echo <span class="token string">"https://mirrors.aliyun.com/alpine/v3.9/main/"</span> > /etc/apk/repositories  <span class="token operator">\</span>    &amp;&amp; npm config set registry https://registry.npm.taobao.org <span class="token operator">\</span>    &amp;&amp; apk add --no-cache git <span class="token operator">\</span>    &amp;&amp; apk add --no-cache openssh-client <span class="token operator">\</span>    &amp;&amp; npm install hexo-cli -g <span class="token operator">\</span>    &amp;&amp; hexo init <span class="token operator">\</span>    &amp;&amp; npm install hexo-renderer-swig <span class="token operator">\</span>    &amp;&amp; npm install <span class="token operator">\</span>    &amp;&amp; npm install fs-extra --save </span>    &amp;&amp; npm install hexo-deployer-git --save \    &amp;&amp; npm install hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save \    &amp;&amp; npm install hexo-filter-mermaid-diagrams --save \    &amp;&amp; npm install hexo-blog-encrypt --save \    &amp;&amp; npm install hexo-generator-search --save \    &amp;&amp; git config --global user.email "zhuansunpengcheng@qq.com" \    &amp;&amp; git config --global user.name "zhuansun" \    &amp;&amp; ssh-keygen -t RSA -C "zhuansunpengcheng@qq.com" -P "" -N "" -f /root/.ssh/id_rsa \    &amp;&amp; echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config \    &amp;&amp; cat /root/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们使用alpine作为基本镜像，因为够小，对于hexo来说，足够了</li><li>设置工作目录是 &#x2F;var&#x2F;www&#x2F;hexo</li><li>下面就是安装git，ssh，hexo</li><li>npm install fs-extra –save ：安装fs-extra的依赖，是为了我们的 hexo-img-move.js能正常运行</li><li>安装了一些hexo的插件<ul><li>hexo-deployer-git：让hexo支持直接部署到git上</li><li>hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive：这些是为了butterfly主题支持用的</li><li>hexo-filter-mermaid-diagrams：让hexo支持mermaid流程图（解决了我的第二个痛点）：<a href="https://www.cnblogs.com/moshuying/p/15801437.html">https://www.cnblogs.com/moshuying/p/15801437.html</a></li><li>hexo-blog-encrypt：加密文章，使用方法见github：<a href="https://github.com/rdou/hexo-blog-encrypt">https://github.com/rdou/hexo-blog-encrypt</a><ul><li>说明：在http环境下不支持加密，这是因为脚本中的使用的crypto对象，有一个subtle属性只能在https环境下获取到。</li><li><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221031001047545.png" alt="image-20221031001047545" style="zoom: 30%;float:left" /></li><li><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221031001405503.png" alt="image-20221031001405503" style="zoom:33%;float:left" /></li></ul></li></ul></li><li>hexo-generator-search：实现本地搜索，hexo本地搜索的实现原理是在 public 目录下，生成一个 search.xml 文件</li><li>设置git的邮箱和用户名，填自己的就行</li><li>设置ssh公钥，是为了让git提交的时候不用每次都输入密码，直接用公钥提交</li><li>echo “StrictHostKeyChecking no” &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;ssh_config \： 这一步很重要，是为了容器启动的时候，跳过ssh公钥的检查，避免手动输入yes</li><li>cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub：打印公钥</li></ul><h2 id="第三步：构建docker镜像"><a href="#第三步：构建docker镜像" class="headerlink" title="第三步：构建docker镜像"></a>第三步：构建docker镜像</h2><p>在Dockerfile的目录下，运行下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> zhuansun/hexo:v1.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-t：表示指定镜像的名字和标签</li><li>zhuansun&#x2F;hexo:v1.0 : 表示镜像的名字，v1.0是标签</li><li>. ：这个点，不知道啥意思，写上</li></ul><p>查看构建的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ash-4.3<span class="token comment"># docker image ls</span>REPOSITORY                                          TAG                       IMAGE ID       CREATED         SIZEzhuansun/hexo                                       v1.0                      71b6e1b7ea19   <span class="token number">4</span> minutes ago   249MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第四步：运行容器"><a href="#第四步：运行容器" class="headerlink" title="第四步：运行容器"></a>第四步：运行容器</h2><p>我用的是群辉的docker，挂载了四个目录，和一个端口</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222106418.png" alt="image-20221030222106418" style="zoom: 80%;" /><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222129007.png" alt="image-20221030222129007" style="zoom:50%;" /><p>其他的都是默认。然后启动</p><p>注意：</p><p>挂载的文件夹里面，要有内容哦。按照第一步，该放的都放好。</p><h2 id="第五步：启动容器"><a href="#第五步：启动容器" class="headerlink" title="第五步：启动容器"></a>第五步：启动容器</h2><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222250742.png" alt="image-20221030222250742" style="zoom:80%;" /><h2 id="第六步：使用容器"><a href="#第六步：使用容器" class="headerlink" title="第六步：使用容器"></a>第六步：使用容器</h2><p>先开启群辉的ssh，然后进入到容器里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> xxxxxxx <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进来之后，默认就是我们设置的：&#x2F;var&#x2F;www&#x2F;hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ash-4.3<span class="token comment"># docker exec -it fb29ef2559ef sh</span>/var/www/hexo <span class="token comment"># ls</span>_config.landscape.yml  db.json                package-lock.json      public                 shell                  themes_config.yml            node_modules           package.json           scaffolds              <span class="token builtin class-name">source</span>                 yarn.lock/var/www/hexo <span class="token comment"># hexo clean</span>INFO  Validating configINFO  Deleted database.INFO  Deleted public folder./var/www/hexo <span class="token comment"># hexo g</span>INFO  Validating configINFO  Start processingINFO  Generated: note/JAVA/数据库/MYSQL/mysql中的交集差集并集/index.htmlINFO  Generated: note/JAVA/GIT/git批量删除分支/index.htmlINFO  Generated: note/PROJECT/时效项目/index.htmlINFO  <span class="token number">73</span> files generated <span class="token keyword">in</span> <span class="token number">7.03</span> s/var/www/hexo <span class="token comment"># node shell/hexo-img-move.js </span>success<span class="token operator">!</span>success<span class="token operator">!</span>success<span class="token operator">!</span>/var/www/hexo <span class="token comment"># hexo server -d</span>INFO  Validating configINFO  <span class="token punctuation">[</span>Browsersync<span class="token punctuation">]</span> Access URLs: ----------------------------------          UI: http://localhost:3001 ---------------------------------- UI External: http://localhost:3001 ----------------------------------INFO  Start processingINFO  Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>说一下 node shell&#x2F;hexo-img-move.js  这一步，hexo生成静态文件之后，只有html，并没有图片的</li><li>如果你用的是图床，那么完全啥问题都没有</li><li>如果是本地图片，我们就需要把本地图片移动到指定的文件夹中</li><li>然后hexo server启动后，html才可以找到图片（具体怎么移动的可以看上面的代码）</li></ul><h2 id="第七步：本地验证hexo服务"><a href="#第七步：本地验证hexo服务" class="headerlink" title="第七步：本地验证hexo服务"></a>第七步：本地验证hexo服务</h2><p>图片可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030222950902.png" alt="image-20221030222950902" style="zoom:80%;" /><p>代码可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223012143.png" alt="image-20221030223012143" style="zoom:80%;" /><p>时序图可以正常显示</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223026695.png" alt="image-20221030223026695" style="zoom:80%;" /><h2 id="第八步：部署到gitee"><a href="#第八步：部署到gitee" class="headerlink" title="第八步：部署到gitee"></a>第八步：部署到gitee</h2><p>首先需要配置上面的公钥到gitee上，百度很简单</p><p>然后再hexo中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/www/hexo <span class="token comment"># hexo d</span>INFO  Validating configINFO  Deploying: <span class="token function">git</span>INFO  Clearing .deploy_git folder<span class="token punctuation">..</span>.INFO  Copying files from public folder<span class="token punctuation">..</span>.INFO  Copying files from extend dirs<span class="token punctuation">..</span>.<span class="token punctuation">[</span>master c3fe339<span class="token punctuation">]</span> Site updated: <span class="token number">2022</span>-10-30 <span class="token number">14</span>:31:27Enumerating objects: <span class="token number">308</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">308</span>/308<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">4</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">247</span>/247<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">284</span>/284<span class="token punctuation">)</span>, <span class="token number">22.02</span> MiB <span class="token operator">|</span> <span class="token number">1.09</span> MiB/s, done.Total <span class="token number">284</span> <span class="token punctuation">(</span>delta <span class="token number">51</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">51</span>/51<span class="token punctuation">)</span>, completed with <span class="token number">3</span> <span class="token builtin class-name">local</span> objects.remote: Powered by GITEE.COM <span class="token punctuation">[</span>GNK-6.4<span class="token punctuation">]</span>To gitee.com:zhuansunpengcheng/zhuansunpengcheng.git   e4984bb<span class="token punctuation">..</span>c3fe339  HEAD -<span class="token operator">></span> masterBranch <span class="token string">'master'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'master'</span> from <span class="token string">'git@gitee.com:zhuansunpengcheng/zhuansunpengcheng.git'</span><span class="token builtin class-name">.</span>INFO  Deploy done: <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交成功之后，到gitee上，开始gitee page服务</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223331923.png" alt="image-20221030223331923" style="zoom:50%;" /><p>然后就可以使用了</p><img src="docker+hexo+gitee部署完美个人博客.assets/image-20221030223426237.png" alt="image-20221030223426237" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;因为引用的文章在下面都说到了，可以先看看&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/3723</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/categories/TOOLS/hexo/"/>
    
    
    <category term="docker" scheme="https://zspcer.gitee.io/tags/docker/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/tags/hexo/"/>
    
    <category term="gitee" scheme="https://zspcer.gitee.io/tags/gitee/"/>
    
  </entry>
  
  <entry>
    <title>在页面上一键部署hexo</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/hexo/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2hexo/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/hexo/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2hexo/</id>
    <published>2023-02-02T11:43:31.432Z</published>
    <updated>2023-02-02T11:43:31.432Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.h5w3.com/34459.html">https://www.h5w3.com/34459.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.h5w3.com/34459.html&quot;&gt;https://www.h5w3.com/34459.html&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="hexo" scheme="https://zspcer.gitee.io/categories/TOOLS/hexo/"/>
    
    
    <category term="hexo" scheme="https://zspcer.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>群辉记录</title>
    <link href="https://zspcer.gitee.io/note/MYSELF/%E7%BE%A4%E8%BE%89%E8%AE%B0%E5%BD%95/"/>
    <id>https://zspcer.gitee.io/note/MYSELF/%E7%BE%A4%E8%BE%89%E8%AE%B0%E5%BD%95/</id>
    <published>2023-01-12T09:36:46.516Z</published>
    <updated>2023-01-12T09:36:46.516Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5ee966ab419bd8199fc6cd46f16126040f976e8f865a0e181193fa45b98b9067">8c00d3d27fb3c22fd589b44480636208283bc4f252b9d9a315fe285b7e6fdd7f930a20fa3f69a5692dc74a7bfb3323d7e419308d04e4d1b2c69d6ce874d15309d9b162fc742adecea1031d6df21b4970298cac3e5f2c75a9773931a94ddbd44d82b561c49a1b41237030cec8a279f390d19b6c0e8e9445c6208e1dd88fdd5bd073919cb914a7302022c8b7134022ff8d8ffd9e17841462ef970cc3a330c9ed4b9e221ce8a1c472a795238e964e6a9bd39568d3ffb023b9bc150a23e5b94b3e472d35e981d51e9b1572cc8b2fab654670b4de33ec8ac492d501ec51ea8df2ef5b5d2b46cd2510351b4efc93ef1de3567119a316f11dcb488fa3435ec0ef7e5640f22a0c234b5d23a03246e045960a49c8405be82177305068354452b4a0d6f757f0ab3f5293a708f2683055c48382288dc61763ed5116eeba89374b81210b6b7ae891fd510f624f99bdd10a28537060f6125b9435738e1ee43ce46a3dd608f1399e987f29eaef971c0369b9a0e2d671b2f141f106b2859fe1ba00bd3c55b9a7105aa9e57910b314839c2cf1948d54e7fe780e0d241387ea446e6fd6d2b726e91ed597fecdbb6f1baf9a80192119a71c0dfe57c2df5c97bbe8ee2c1571eab5d01a959c014a389864b18142644f8b4001184c72a99a440e4999187b84c10abb308fe1ad28847c8ae2ab26b8f5223d5a0737b643702de328933a40909629e7f5ef4003634de8a5796156940b8482e36827fe015f2e4e18edc63feb5fa45f0da7061b528d9aac93f910d48642a7d44df5be7c5ea847f539e60d63bd94d4b326c6d4aaad071d97c9b7ae3d6e75327c0833b6bc65b3f3439d2028c282d965576dc54a920f12f65c925b620d711d6442656fbbc1c8b0aa800d6cce48c90fbe2f9146bfcdb7fe2522b1d649ee7541233c45b620be3122aa7b80e15989b0887cc138e48b554263b16418bc28fbaf7aee0f8bb2a099472d1ccbeda82a0cb9b9f952543b80ce1209711544edf3b424e13a05a8c9f861753a4a1abb91cfb990fd15c13ab5693c81a8039739c10b3f7e0e2238916438e076903d4e17d2604d9f8b5667365ea504132f978b4fadfe8fd7cc637e3cfb20d848f9d366e3c5c49e2fda6b3bc59e4c8597f04633a3bfb4b003478d10de34d71bce4e7c98acc3154282ed33978560af91e9a491721dd49b76ace914a02257f7228e4d32c069e4306b79922090d7c186329c4ce2b4614c6a566a460c3216d7843eb69502e48a4a73e93ae53ae1a0c94da59d2b98185c29d16cc4896e76aed4aff0eca87328264d6b2f6dbd5038c8d6e337e7310bef42fa631cb81a5a1c864e7189eab4680afcc9fd07cd4ab443675e6b9dcae2b05c482637a5933b1bca2911318c09bd41a5b086eaca82a318d349d049b5379fc3bf050c5b3c03dfc8a7badc78cabb2147121bfdb81f158f10545655584f90fe1e3f0f1e6c3923aac46887e8df0ce44743e662fa912a377e4e6df8279f970f47ea9dea2fbb168d7f43f08b79774e3b9a0bc173fdebf52de36230bda826638bcc8e46c5e3ddac513264cc2b9ed63c988abc0de35041a9f36445eedcb8846df6f497b72fc74a7aa3d672806862581c666b0b085674a9abf136f27c0a422c0d080a60efc9102baae0606764532bfcb11fddecf84d9c434f5c6f41059c52e036166e60807b3d7693c2bcf6decfa0451db6ed125f1afa975169ef889571073b8beb4851675f7af2caa08000335122b5670622733268ce6f7fd4aec2497e1fe9183ae66f150df13f6f6abffa497423d40bd64f4880c7c3a2b4445014dff1dc102cc6368d38a106415f9275be0312994892fa0f94b2d755ed833c55dca4db5c433f7e9f4842629d73bb09d37f339e4738e016555d8ff9366d65f5836ec32ea89b1b44f56fcf48c36de01de4ebc008a1db8afba4462e850a8939076f8ae372a89e5fe603cf9858b8bce910ed83a30e7041ef65ab8b68eb6c741695723bab3760f3b62d7652f9c88dd9ffdf80a29b5d85424c0dadd5603200834b2be121b8ed2c3aa80f32cb10d0ed213c6e6ad80e889da0b08dd13fa8911ef9f02751785751e529d1ac6f2e44249703287d9bad79cd616b1df8fa57ae4ee127a40f81f7a2b89c195e71ddf650780d0fb4ea6552708ddeb12c012fb054eccf53f790b3f376aa0343365d2d2f9eb0cc5474814cad738c48707752ffb638cfe1b2c5085bdb3f3d9273d044cefc3e242ec0b5a5516f6e6b210bec03c2156ff19a2c426cfddeb2b6f4acd0ef9f30c81c947ca25bac0bbb411c04345f8a6ea3d42a8eb66e92be0b7fa3591223480b84df6bc0c33f560b95d54386d513a194b6b0964303bdbbc183a3f9a32a15fb87f77981cbf67ed29155d4ea1dd67eacdc3aad1dd89917dead52d336432cf68cdbf0ec1af272e4fe85642472ce2d5ee86f3eac5369dc0fecf3a0a597a8c0a523b3fbe5e6fc87fd4024f6c72200a31b6cbd12b7a70c4a5aa4677724d571d8eba663e0e82a17a1e0d5115b5fed421d14a2cc582bfe0c4828f3d84b00d7429d05d4b2704a9e2e4785907772efe31e77659c3fe21d8f3c17f937819a3ac4c032f0000133324bc8651fb4bbfcae0e0957b241c953794caf3eeff59dd89173c72bec98a1c296e97449eafa495041b5d44fa17a473a1e5355ecdaa78cc69502debe11e0694dd80b8d68a46807f88462910db1c944dc22a5e5c6758e4f244bafe00f42ef1693d957c0531866fe61e81679dd8f63f585a4cb1f66675a6128c6d4352c64a7de4b8de4abceecb9975ab492b094d6d919e43141b4b937f7b65d2889da5793a040da554832a7ee3a2c2f60dcf79aea2de9f1913f103a588a9042a15c2176b1499412742e1b2a652a945032dbdd26253e303248138b1b032696070099f8b167da8a271ce9acc5aefc799e5a02d9abd40e13e733c6154e9f5343aa6999146c02d940d7532856564ac666023fe40bd860912444ecf7e1fa86c9d3d2b942fc4f37ac2f64d07d39183ad4f7e93349abb5df5ac819647090857556c82702e8506c3ba8892d48503ecbafc6bcb67d7f4539b98188791bcd7b5f71e1e303d518bfa4dade5ae6e24261fc321ce68692849044cc3f60e3349e836320c36f52a125a3245aa076d9714e46c0dcbcb53c70f3c6dbf93eb9c1fdafccdc0673e406e7bcaa21bca571271bd307c1a0a570f6f8c7d82331ed5f5b2cb19ddc61041c177ba09b8d36fda9d1b8f7031727d871c09f60ad8570f19455eb407d9b33577bcd04773f44cdd4215eba5962f4208380a59be5da2b1c4db09883db0668b241565baec5867d084c757c26021f2e00538977272a79c12173ed60c679bd659ea2da19b17a5f69fc4bd0355d8565aa3e809a9d5bc14880b8f1d9e8fd11764d28df182a0cb5c5261dbe5ecba220add8cfc3005153020688e7998b16c693b6413a5d6a30f205a46581d6178b45c8090c209d28126babfff5d125714fabd1f4c8daf2e4af71d1de977f56977e7e3e2c2135131d148425780bf41bfa671ca85d66d71bd4aed2df5471ed03bfcbaa6c6ca9fa19b050cccfaa393a40f699dbdb0e8fd3426345d82ecf54d77c0a3d2fd5a46f6bd7f053eaebb94d62bf6a26f4d2b980a9b3bf321ed81db9d653e68e70e69bb395d919c3d72aedea526de32692b12ece314b9c71ef0c48b349079da40193138f4f5a53d1f70968a4771a92790c94d9a836c52830470af44fe3bc51adde1ba04985e24f38630849bfddd1c2d3dbc0843127d854c510bd1ac5ef37dd10f99d9c304002b19d445989bbc793c99c811834b8f24c236ab7b94ebeeddc4fcc87bb4c5b7e1e6014d2d5cc4bae50e94a5bc64b5eb94ad3a240b85ead9d4234085af399921a95117478bfc1d5e9123b6d8e30265ef0044cf51576c40a6eff12bd55f86d3cdd27e9d87d1571891931e642c8717e2f476df92391438e0257bee20ccc565fdd9519321677380808f91916046da21e42310b5345ea37984ce596209c3346798107553de6a656c2d30351615287a015b00f5a5efaa5ad28b3e6e16155520fcb20b326e5b68a73e940992d7a121759fd94343d2784eeb8cef6e4bffc68d9ec77e0a27053d5fc97b7b47014269bb445c44d678a3cd658546f7098e16838caa1b86d1884e374bfc1fbea524b1d486a98503738d318596970db75be9ccef07bf32c89e2d681515bc8af32bd3032483ef7c429f7af4ca3eca1f6626001dfef2c8b521d964b0dc83c4e4ca8e3c92ebdbf911777d4af962053e847f6059518e6833ead9e9f2e9780194a06ca634f7dbf101416f5b96cb155fb4adfe43b2c53a3c654bdc359baf35ebc42573555bfcbbfe7598a14ed4437d29f3703d852d183cf717939ff9c1fc909fe634da6805bf307cb50da848cfe39ac4fb2c0d7e7e49a51609f42aae9f875b41f8dc22eaf9543e8391138fb92f00dd5029a3061dd7174f6f73b8f5a6e9d9183214dd54e493e913212c6205711db93bfd0f6995fa4cfd98e2d70ccc56f41569e3e81949e24eb2eb27f97035754424bfd113319db87085fda6fd6a2c8c868fc0142e50f558409bdede8077e31e47db6653012ceb5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="NAS" scheme="https://zspcer.gitee.io/categories/NAS/"/>
    
    
    <category term="个人账号" scheme="https://zspcer.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E8%B4%A6%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>mermaid</title>
    <link href="https://zspcer.gitee.io/note/TOOLS/markdown/mermaid/"/>
    <id>https://zspcer.gitee.io/note/TOOLS/markdown/mermaid/</id>
    <published>2023-01-12T09:36:46.516Z</published>
    <updated>2023-01-12T09:36:46.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h1><h2 id="关于-Mermaid"><a href="#关于-Mermaid" class="headerlink" title="关于 Mermaid"></a>关于 Mermaid</h2><p><a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>下面是一些可以使用 Mermaid 创建的图表示例。点击 <a href="https://mermaid-js.github.io/mermaid/#/n00b-syntaxReference">语法</a> 查看详情。</strong></p><table><!-- <Flowchart> --><h3 id="流程图-文档"><a href="#流程图-文档" class="headerlink" title="流程图 [文档 ]"></a>流程图 [<a href="https://mermaid-js.github.io/mermaid/#/flowchart">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">flowchart LRA[Hard] --&gt;|Text| B(Round)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result 1]C --&gt;|Two| E[Result 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]</pre><h3 id="时序图-文档"><a href="#时序图-文档" class="headerlink" title="时序图 [文档 ]"></a>时序图 [<a href="https://mermaid-js.github.io/mermaid/#/sequenceDiagram">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">sequenceDiagramAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts!John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!</pre><h3 id="甘特图-文档"><a href="#甘特图-文档" class="headerlink" title="甘特图 [文档 ]"></a>甘特图 [<a href="https://mermaid-js.github.io/mermaid/#/gantt">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d</pre><h3 id="类图-文档"><a href="#类图-文档" class="headerlink" title="类图 [文档 ]"></a>类图 [<a href="https://mermaid-js.github.io/mermaid/#/classDiagram">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">classDiagramClass01 &lt;|-- AveryLongClass : Cool&lt;&lt;Interface&gt;&gt; Class01Class09 --&gt; C2 : Where am I?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 &#123;  &lt;&lt;service&gt;&gt;  int id  size()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}</pre><h3 id="状态图-文档"><a href="#状态图-文档" class="headerlink" title="状态图 [文档]"></a>状态图 [<a href="https://mermaid-js.github.io/mermaid/#/stateDiagram">文档</a>]</h3><pre class="line-numbers language-none"><code class="language-none">stateDiagram-v2[*] --&gt; StillStill --&gt; [*]Still --&gt; MovingMoving --&gt; StillMoving --&gt; CrashCrash --&gt; [*]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]</pre><h3 id="饼图-文档"><a href="#饼图-文档" class="headerlink" title="饼图 [文档 ]"></a>饼图 [<a href="https://mermaid-js.github.io/mermaid/#/pie">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">pie&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">pie"Dogs" : 386"Cats" : 85"Rats" : 15</pre><h3 id="Git-图-实验特性"><a href="#Git-图-实验特性" class="headerlink" title="Git 图 [实验特性 ]"></a>Git 图 [实验特性 ]</h3><h3 id="用户体验旅程图-文档"><a href="#用户体验旅程图-文档" class="headerlink" title="用户体验旅程图 [文档 ]"></a>用户体验旅程图 [<a href="https://mermaid-js.github.io/mermaid/#/user-journey">文档</a> ]</h3><pre class="line-numbers language-none"><code class="language-none">journey  title My working day  section Go to work    Make tea: 5: Me    Go upstairs: 3: Me    Do work: 1: Me, Cat  section Go home    Go downstairs: 5: Me    Sit down: 3: Me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">  journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me</pre><h3 id="C4-图-文档"><a href="#C4-图-文档" class="headerlink" title="C4 图 [文档]"></a>C4 图 [<a href="https://mermaid-js.github.io/mermaid/#/c4c">文档</a>]</h3><pre class="line-numbers language-none"><code class="language-none">C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, &quot;Banking Customer A&quot;, &quot;A customer of the bank, with personal bank accounts.&quot;)Person(customerB, &quot;Banking Customer B&quot;)Person_Ext(customerC, &quot;Banking Customer C&quot;)System(SystemAA, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;)Person(customerD, &quot;Banking Customer D&quot;, &quot;A customer of the bank, &lt;br&#x2F;&gt; with personal bank accounts.&quot;)Enterprise_Boundary(b1, &quot;BankBoundary&quot;) &#123;  SystemDb_Ext(SystemE, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;)  System_Boundary(b2, &quot;BankBoundary2&quot;) &#123;    System(SystemA, &quot;Banking System A&quot;)    System(SystemB, &quot;Banking System B&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)  &#125;  System_Ext(SystemC, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;)  SystemDb(SystemD, &quot;Banking System D Database&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)  Boundary(b3, &quot;BankBoundary3&quot;, &quot;boundary&quot;) &#123;    SystemQueue(SystemF, &quot;Banking System F Queue&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)    SystemQueue_Ext(SystemG, &quot;Banking System G Queue&quot;, &quot;A system of the bank, with personal bank accounts.&quot;)  &#125;&#125;BiRel(customerA, SystemAA, &quot;Uses&quot;)BiRel(SystemAA, SystemE, &quot;Uses&quot;)Rel(SystemAA, SystemC, &quot;Sends e-mails&quot;, &quot;SMTP&quot;)Rel(SystemC, customerA, &quot;Sends e-mails to&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")Person(customerB, "Banking Customer B")Person_Ext(customerC, "Banking Customer C")System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")Person(customerD, "Banking Customer D", "A customer of the bank, <br/> with personal bank accounts.")Enterprise_Boundary(b1, "BankBoundary") {  SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")  System_Boundary(b2, "BankBoundary2") {    System(SystemA, "Banking System A")    System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts.")  }  System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")  SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")  Boundary(b3, "BankBoundary3", "boundary") {    SystemQueue(SystemF, "Banking System F Queue", "A system of the bank, with personal bank accounts.")    SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")  }}BiRel(customerA, SystemAA, "Uses")BiRel(SystemAA, SystemE, "Uses")Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")Rel(SystemC, customerA, "Sends e-mails to")</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mermaid&quot;&gt;&lt;a href=&quot;#mermaid&quot; class=&quot;headerlink&quot; title=&quot;mermaid&quot;&gt;&lt;/a&gt;mermaid&lt;/h1&gt;&lt;h2 id=&quot;关于-Mermaid&quot;&gt;&lt;a href=&quot;#关于-Mermaid&quot; class=&quot;head</summary>
      
    
    
    
    <category term="TOOLS" scheme="https://zspcer.gitee.io/categories/TOOLS/"/>
    
    <category term="MARKDOWN" scheme="https://zspcer.gitee.io/categories/TOOLS/MARKDOWN/"/>
    
    
    <category term="mermaid" scheme="https://zspcer.gitee.io/tags/mermaid/"/>
    
    <category term="markdown" scheme="https://zspcer.gitee.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>mysql的问题汇总</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2023-01-12T09:36:46.514Z</published>
    <updated>2023-01-12T09:36:46.514Z</updated>
    
    <content type="html"><![CDATA[<p>准备从45将的评论区找问题，汇总一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;准备从45将的评论区找问题，汇总一下&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql的日志从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-01-12T09:36:46.512Z</published>
    <updated>2023-01-12T09:36:46.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的日志从入门到入土"><a href="#mysql的日志从入门到入土" class="headerlink" title="mysql的日志从入门到入土"></a>mysql的日志从入门到入土</h1><hr><p>本文有xmind，配合xmind查看更加友好哦</p><blockquote><p>点击下载：<a href="mysql%E7%9A%84%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/mysql%E6%97%A5%E5%BF%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.xmind">mysql日志从入门到入土.xmind</a></p></blockquote><h2 id="一条更新语句的执行流程是什么（引入redolog和binlog）"><a href="#一条更新语句的执行流程是什么（引入redolog和binlog）" class="headerlink" title="一条更新语句的执行流程是什么（引入redolog和binlog）"></a>一条更新语句的执行流程是什么（引入redolog和binlog）</h2><blockquote><p>update T set c&#x3D;c+1 where ID&#x3D;2;</p></blockquote><p>mysql的更新流程和SQL语句的基本执行链路是一样的：连接器-&gt;分析器-&gt;优化器-&gt;执行器-&gt;存储引擎</p><img src="mysql的日志从入门到入土.assets/image-20221012203451881.png" alt="image-20221012203451881" style="zoom: 80%;" /><p>通过连接器，先连接数据库。</p><p>清空查询缓存：在一个表上有更新的时候，跟这个表有关的查询缓存会失效。这也就是我们一般不建议使用查询缓存的原因（在mysql8.0中，已经把查询缓存整个模块都删掉了）。</p><p>分析器会通过词法和语法解析知道这是一条更新语句。</p><p>优化器决定要使用哪个索引。</p><p>执行器负责具体执行，找到这一行，然后更新。</p><h2 id="重要的日志模块（redolog和binlog）"><a href="#重要的日志模块（redolog和binlog）" class="headerlink" title="重要的日志模块（redolog和binlog）"></a>重要的日志模块（redolog和binlog）</h2><p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）</p><h3 id="什么是redolog"><a href="#什么是redolog" class="headerlink" title="什么是redolog"></a>什么是redolog</h3><p>作者举了《孔乙己》中一个赊账的例子，孔乙己来到酒店喝酒，老板会先把孔乙己的酒钱记录在一个粉板上，然后等不忙的时候，在累加到账本上。</p><p>这里的粉板就是redolog，账本就是磁盘；</p><p>考虑这个场景，当很多很多的人来喝酒的时候，老板一般有两种方式记账（当数据库更新一条记录的时候，一般有两种方式）：</p><ul><li>直接掏出账本，在账本上加加减减。（直接操作磁盘的数据，进行更新）</li><li>另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算（先记录到redolog，等mysql空闲的时候，刷到磁盘）。</li></ul><p>在酒店生意红火的时候，老板一定选择后者，因为前者操作实在是太麻烦了。</p><ul><li>首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找。（磁盘的随机IO读）</li><li>找到之后再拿出算盘计算，最后再将结果写回到账本上（磁盘的随机写）</li></ul><p>粉板（redolog）就完美的解决了这两个问题：</p><ul><li>首先说找记录：mysql的所有记录都是从数据页中查的，如果要更新的数据所在的数据页在内存中，可以直接找到，如果不在内存中，会先从磁盘把这个数据库加载到内存中。（这个步骤没法省，redolog优化的地方并不在于这里，这里会有<strong>changebuffer</strong>优化（后面说））</li><li>找到记录之后，然后说更新记录：更新的结果是写到redolog中，而不是写到磁盘中，就避免了磁盘的随机IO，虽然redolog也是写到磁盘中的，但是由于组提交的存在，一次磁盘的写入是大量的顺序IO；（redolog是顺序写，并且可以组提交，还有别的一些优化，收益最大是是这两个因素；）</li></ul><h3 id="redo-log有什么用"><a href="#redo-log有什么用" class="headerlink" title="redo log有什么用"></a>redo log有什么用</h3><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 <strong>crash-safe</strong>。</p><h3 id="为什么要引入redolog"><a href="#为什么要引入redolog" class="headerlink" title="为什么要引入redolog"></a>为什么要引入redolog</h3><p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，<strong>binlog</strong> 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p><p>mysql要保证数据的持久性，保证持久性就需要将数据写到磁盘，但是写到磁盘的话，涉及到</p><ul><li>刷页，因为mysql所有的操作是针对数据页操作的，而一个简单的更新，可能就要刷整整一个数据页</li><li>随机IO，一个事务所更新的涉及到的数据页可能不止一个，而且数据页可能不相连，就涉及到随机IO</li></ul><p>这俩问题，咋办呢？就引入了redolog，一个更新不刷页（先记录到redolog日志中），这样就避免了上面两个问题</p><ul><li>redolog将随机IO改成了顺序IO，而且避免了每次更新都刷盘（刷盘也是要刷的，但是是组提交）</li></ul><h3 id="redolog的结构"><a href="#redolog的结构" class="headerlink" title="redolog的结构"></a>redolog的结构</h3><p>redolog是循环写的文件，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p><img src="mysql的日志从入门到入土.assets/image-20221027161923607.png" alt="image-20221027161923607" style="zoom: 50%;" /><p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos 和 checkpoint 之间的是还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><h3 id="redolog一般设置多大"><a href="#redolog一般设置多大" class="headerlink" title="redolog一般设置多大"></a>redolog一般设置多大</h3><p>redo log 太小的话，会导致很快就被写满，然后不得不强行刷 redo log，这样 WAL 机制的能力就发挥不出来了。所以，如果是现在常见的几个 TB 的磁盘的话，就不要太小气了，直接将 redo log 设置为 4 个文件、每个文件 1GB 吧。</p><ul><li>innodb_log_file_size：该参数指定了每个redo日志文件的大小，在MySQL 5.7.21这个版本中的默认值为48MB，</li><li>innodb_log_files_in_group：该参数指定redo日志文件的个数，默认值为2，最大值为100。</li></ul><h3 id="binlog是什么"><a href="#binlog是什么" class="headerlink" title="binlog是什么"></a>binlog是什么</h3><p>我们知道mysql是由两部分组成，server层和引擎层，上面介绍的redolog就是innodb引擎独有的日志，而MySQL的server层也有自己的日志，叫做binlog；</p><p>为什么要有两个日志呢</p><p>因为mysql在5.5版本之前，默认的存储引擎是MyISAM，但是MyISAM并没有<strong>Crash-Safe</strong>的能力，而server层自带的binlog又只有归档的能力，也不具备<strong>Crash-Safe</strong>的能力，所以才会有后来的innodb以插件的形式引入mysql中，作为mysql的引擎，并使用了redo log，实现了Crash-Safe的能力</p><p>除了以上的原因，binlog和redolog还有其他的区别，解释了为什么存在两个日志</p><ul><li>这两个日志的使用方不一样：redolog是innodb引擎所特有的，只有innodb才能用；而binlog是mysql的server层有的，所有的引擎都可以使用；</li><li>这两个日志记录的内容不一样：redolog是物理日志，记录的是在某个数据页上做了什么修改；而binlog是逻辑日志，简单的说就是sql语句。</li><li>这两个日志的记录方式不一样：redolog是循环写，redolog文件写满了，会从头重新写；binlog是追加写；binlog文件写满了，会切割，在新文件中继续写</li></ul><h3 id="binlog有什么用"><a href="#binlog有什么用" class="headerlink" title="binlog有什么用"></a>binlog有什么用</h3><p>主要是归档（归档之后可以用于数据恢复）和主从同步</p><h3 id="binlog的结构"><a href="#binlog的结构" class="headerlink" title="binlog的结构"></a>binlog的结构</h3><h4 id="binlog的存储目录"><a href="#binlog的存储目录" class="headerlink" title="binlog的存储目录"></a>binlog的存储目录</h4><p>在磁盘的上的结构，binlog默认是存放在<strong>MySQL服务器的数据目录</strong>下，（可以修改binlog的存放路径和binlog的文件名），如果你不知道数据目录是哪个，可以通过这个命令查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%datadir%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+---------------------------------------------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>                                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+---------------------------------------------+</span><span class="token operator">|</span> datadir       <span class="token operator">|</span> C:\ProgramData\MySQL\MySQL Server <span class="token number">8.0</span>\<span class="token keyword">Data</span>\ <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+---------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据目录下，你就可以看到binlog的文件，就像是这样，binlog是二进制文件，就像它的全名一样：binary log，所以是不能直接打开的：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000001</span>xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000003</span>xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000004</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了真正存储binlog日志的文件外，MySQL服务器还会在相同的路径下生成一个关于binlog的索引文件，它的名称就是：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token keyword">index</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个索引文件是一个文本文件，我们可以直接打开：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">shell&gt; cat xxx-bin.index.&#x2F;xxx-bin.000001.&#x2F;xxx-bin.000001.&#x2F;xxx-bin.000001.&#x2F;xxx-bin.000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个索引文件只是简单的将各个binlog文件的路径存储了起来而已。</p><h4 id="怎么查看binlog的格式"><a href="#怎么查看binlog的格式" class="headerlink" title="怎么查看binlog的格式"></a>怎么查看binlog的格式</h4><p>下面的三种查看方式，前两个是一样的，都表示查看当前session的binlog格式；最后一个表示查看全局的binlog格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">session</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="怎么设置binlog的格式"><a href="#怎么设置binlog的格式" class="headerlink" title="怎么设置binlog的格式"></a>怎么设置binlog的格式</h4><p>下面展示三种设置binlog的方式，前两个是一样的，设置当前session的binlog格式，重启后就失效了。最后一个表示设置全局的binlog格式，需要重启后才生效。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> binlog_format <span class="token operator">=</span> <span class="token string">'statement'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token keyword">session</span> binlog_format <span class="token operator">=</span> <span class="token string">'statement'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token keyword">global</span> binlog_format <span class="token operator">=</span> <span class="token string">'statement'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="binlog的三种格式"><a href="#binlog的三种格式" class="headerlink" title="binlog的三种格式"></a>binlog的三种格式</h4><p>binlog 有两种格式，一种是 statement，一种是 row。可能你在其他资料上还会看到有第三种格式，叫作 mixed，其实它就是前两种格式的混合。</p><p>下面看一下三种格式分别记录了什么？</p><p>准备以下数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2018-11-13'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2018-11-12'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'2018-11-11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'2018-11-10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'2018-11-09'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="statement"><a href="#statement" class="headerlink" title="statement"></a><strong>statement</strong></h6><p>按照上面的方式，查看当前binlog的格式，并将当前会话的binlog的格式设置为：statement</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> STATEMENT <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> a<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">and</span> t_modified<span class="token operator">&lt;=</span><span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在查看binlog的内容之前，首先查看当前binlog写在了哪个文件上，因为binlog有很多个</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>           <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span>     <span class="token number">7829</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后查看binlog的内容（binlog很大，这里只截取了一部分）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxx-bin.000002'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+</span><span class="token operator">|</span> Log_name       <span class="token operator">|</span> Pos  <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7489</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7568</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>                                      <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7568</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7654</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                                     <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7654</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7798</span> <span class="token operator">|</span> <span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>zs<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t   <span class="token keyword">where</span> a<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">and</span> t_modified<span class="token operator">&lt;=</span><span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">7798</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7829</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=1840 */</span>                                                     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+</span><span class="token number">56</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容解释</p><table><thead><tr><th>行</th><th>含义</th></tr></thead><tbody><tr><td>第一行：SET @@SESSION.GTID_NEXT&#x3D; ‘ANONYMOUS’</td><td>主备切换用的，见《mysql主备从入门到入土》</td></tr><tr><td>第二行：BEGIN</td><td>跟第四行的 commit 对应，表示中间是一个事务</td></tr><tr><td>第三行</td><td>是真实执行的语句了。可以看到，在真实执行的 delete 命令之前，还有一个“use ‘zs’”命令。这条命令是 MySQL 根据当前要操作的表所在的数据库，自行添加的。这样做可以保证日志传到备库去执行的时候，不论当前的工作线程在哪个库里，都能够正确地更新到 test 库的表 t。use ‘zs’命令之后的 delete 语句，就是我们输入的 SQL 原文了。</td></tr><tr><td>第四行：COMMIT &#x2F;* xid&#x3D;1840 *&#x2F;</td><td>你可以看到里面写着 xid&#x3D;1840,xid是崩溃恢复的时候，和redolog关联，用来校验binlog完整性的</td></tr></tbody></table><ul><li>使用mysqlbinlog工具，可以查看到更加具体的内容</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">C:\Program Files\MySQL\MySQL Server 8.0\bin&gt;mysqlbinlog.exe  -vv &quot;C:\ProgramData\MySQL\MySQL Server 8.0\Data\SF0001408876LA-bin.000002&quot; --start-position&#x3D;7829 --stop-position&#x3D;8126# The proper term is pseudo_replica_mode, but we use this compatibility alias# to make the statement usable on server versions 8.0.24 and older.&#x2F;*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;1*&#x2F;;&#x2F;*!50003 SET @OLD_COMPLETION_TYPE&#x3D;@@COMPLETION_TYPE,COMPLETION_TYPE&#x3D;0*&#x2F;;DELIMITER &#x2F;*!*&#x2F;;# at 156#221101 14:12:06 server id 1  end_log_pos 125 CRC32 0xe443eab6  Start: binlog v 4, server v 8.0.26 created 221101 14:12:06 at startup# Warning: this binlog is either in use or was not closed properly.ROLLBACK&#x2F;*!*&#x2F;;BINLOG &#39;trhgYw8BAAAAeQAAAH0AAAABAAQAOC4wLjI2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2uGBjEwANAAgAAAAABAAEAAAAYQAEGggAAAAICAgCAAAACgoKKioAEjQACigBtupD5A&#x3D;&#x3D;&#39;&#x2F;*!*&#x2F;;# at 7829#221108 17:42:32 server id 1  end_log_pos 7908 CRC32 0x816102e0         Anonymous_GTID  last_committed&#x3D;26       sequence_number&#x3D;27      rbr_only&#x3D;no     original_committed_timestamp&#x3D;1667900553012960   immediate_commit_timestamp&#x3D;1667900553012960  transaction_length&#x3D;327# original_commit_timestamp&#x3D;1667900553012960 (2022-11-08 17:42:33.012960 中国标准时间)# immediate_commit_timestamp&#x3D;1667900553012960 (2022-11-08 17:42:33.012960 中国标准时间)&#x2F;*!80001 SET @@session.original_commit_timestamp&#x3D;1667900553012960*&#x2F;&#x2F;*!*&#x2F;;&#x2F;*!80014 SET @@session.original_server_version&#x3D;80026*&#x2F;&#x2F;*!*&#x2F;;&#x2F;*!80014 SET @@session.immediate_server_version&#x3D;80026*&#x2F;&#x2F;*!*&#x2F;;SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;&#x2F;*!*&#x2F;;# at 7908#221108 17:42:32 server id 1  end_log_pos 7986 CRC32 0x08dd3003         Query   thread_id&#x3D;18    exec_time&#x3D;1     error_code&#x3D;0SET TIMESTAMP&#x3D;1667900552&#x2F;*!*&#x2F;;SET @@session.pseudo_thread_id&#x3D;18&#x2F;*!*&#x2F;;SET @@session.foreign_key_checks&#x3D;1, @@session.sql_auto_is_null&#x3D;0, @@session.unique_checks&#x3D;1, @@session.autocommit&#x3D;1&#x2F;*!*&#x2F;;SET @@session.sql_mode&#x3D;1075838976&#x2F;*!*&#x2F;;SET @@session.auto_increment_increment&#x3D;1, @@session.auto_increment_offset&#x3D;1&#x2F;*!*&#x2F;;&#x2F;*!\C utf8mb4 *&#x2F;&#x2F;*!*&#x2F;;SET @@session.character_set_client&#x3D;255,@@session.collation_connection&#x3D;255,@@session.collation_server&#x3D;255&#x2F;*!*&#x2F;;SET @@session.lc_time_names&#x3D;0&#x2F;*!*&#x2F;;SET @@session.collation_database&#x3D;DEFAULT&#x2F;*!*&#x2F;;&#x2F;*!80011 SET @@session.default_collation_for_utf8mb4&#x3D;255*&#x2F;&#x2F;*!*&#x2F;;BEGIN&#x2F;*!*&#x2F;;# at 7986#221108 17:42:32 server id 1  end_log_pos 8125 CRC32 0x8d364776         Query   thread_id&#x3D;18    exec_time&#x3D;1     error_code&#x3D;0use &#96;zs&#96;&#x2F;*!*&#x2F;;SET TIMESTAMP&#x3D;1667900552&#x2F;*!*&#x2F;;&#x2F;* ApplicationName&#x3D;DataGrip 2021.1.2 *&#x2F; delete from t where id &#x3D; 3&#x2F;*!*&#x2F;;# at 8125#221108 17:42:32 server id 1  end_log_pos 8156 CRC32 0x9959b790         Xid &#x3D; 2011COMMIT&#x2F;*!*&#x2F;;SET @@SESSION.GTID_NEXT&#x3D; &#39;AUTOMATIC&#39; &#x2F;* added by mysqlbinlog *&#x2F; &#x2F;*!*&#x2F;;DELIMITER ;# End of log file&#x2F;*!50003 SET COMPLETION_TYPE&#x3D;@OLD_COMPLETION_TYPE*&#x2F;;&#x2F;*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;0*&#x2F;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="row"><a href="#row" class="headerlink" title="row"></a><strong>row</strong></h6><p>先将测试数据复原，重新导入</p><p>按照上面的方式，查看当前binlog的格式，并将当前会话的binlog的格式设置为：row</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> <span class="token keyword">ROW</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> a<span class="token operator">>=</span><span class="token number">4</span> <span class="token operator">and</span> t_modified<span class="token operator">&lt;=</span><span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在查看binlog的内容之前，首先查看当前binlog写在了哪个文件上，因为binlog有很多个</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token keyword">File</span>           <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span>     <span class="token number">7829</span> <span class="token operator">|</span>              <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+----------+--------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后查看binlog的内容（binlog很大，这里只截取了一部分）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'xxx-bin.000002'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> Log_name       <span class="token operator">|</span> Pos  <span class="token operator">|</span> Event_type     <span class="token operator">|</span> Server_id <span class="token operator">|</span> End_log_pos <span class="token operator">|</span> Info                                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5043</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5122</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span> <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5122</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5203</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5203</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5251</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> <span class="token punctuation">(</span>zs<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                 <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5251</span> <span class="token operator">|</span> Delete_rows    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5299</span> <span class="token operator">|</span> table_id: <span class="token number">169</span> flags: STMT_END_F      <span class="token operator">|</span><span class="token operator">|</span> xxx<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span> <span class="token operator">|</span> <span class="token number">5299</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">5330</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=1924 */</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+------+----------------+-----------+-------------+--------------------------------------+</span><span class="token number">74</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容解释</p><table><thead><tr><th>行</th><th>含义</th></tr></thead><tbody><tr><td>第一行：SET @@SESSION.GTID_NEXT&#x3D; ‘ANONYMOUS’</td><td>主备切换用的，见《mysql主备从入门到入土》</td></tr><tr><td>第二行：BEGIN</td><td>跟第五行的 commit 对应，表示中间是一个事务</td></tr><tr><td>第三行：</td><td>在statement格式中，记录的是sql原文，在row格式下，记录的是两个event：Table_map和Delete_rows这两个动作</td></tr><tr><td>第四行：</td><td>Table_map表示要操作哪个数据库的那张表； Delete_rows表示删除一行，具体的内容，这里看不到，需要借助mysqlbinlog工具来看</td></tr><tr><td>第五行：COMMIT &#x2F;* xid&#x3D;1924 *&#x2F;</td><td>你可以看到里面写着 xid&#x3D;1924 ,xid是崩溃恢复的时候，和redolog关联，用来校验binlog完整性的</td></tr></tbody></table><p>在第四行中，我们看不到具体的内容，所以需要通过mysqlbinlog工具来看</p><p>mysqlbinlog是啥，就是一个可以执行的工具，在windows系统下，这个工具在mysql的安装目录下，叫：mysqlbinlog.exe</p><p>因为我现在用的windows，所以就用windows来展示了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token operator">></span>cd C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>binC:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>bin<span class="token operator">></span>dir 驱动器 C 中的卷是 系统 卷的序列号是 0003-57E7 C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>bin 的目录<span class="token number">2022</span>/11/01  <span class="token number">14</span>:10    <span class="token operator">&lt;</span>DIR<span class="token operator">></span>          <span class="token builtin class-name">.</span><span class="token number">2022</span>/11/01  <span class="token number">14</span>:10    <span class="token operator">&lt;</span>DIR<span class="token operator">></span>          <span class="token punctuation">..</span><span class="token number">2021</span>/07/01  02:12         xxxxxxxxx xxxxxxxx（因为文件太多了，所以我这里就是省略了）<span class="token number">2021</span>/07/01  02:12         <span class="token number">6,960</span>,408 mysql.exe<span class="token number">2021</span>/07/01  02:12         <span class="token number">6,854</span>,952 mysqladmin.exe<span class="token number">2021</span>/07/01  02:12         <span class="token number">7,168</span>,808 mysqlbinlog.exe              <span class="token number">48</span> 个文件    <span class="token number">270,259</span>,595 字节               <span class="token number">2</span> 个目录 <span class="token number">24,862</span>,003,200 可用字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在bin目录下，有一个工具叫做：mysqlbinlog.exe</p><p>然后我们在<code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code>这个目录下运行下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqlbinlog.exe  <span class="token parameter variable">-vv</span> <span class="token string">"C:\ProgramData\MySQL\MySQL Server 8.0\Data\SF0001408876LA-bin.000002"</span> --start-position<span class="token operator">=</span><span class="token number">5043</span> --stop-position<span class="token operator">=</span><span class="token number">5300</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-vv</code>表示verbose，啰嗦模式，为了把内容都解析出来，所以从结果里面可以看到各个字段的值（比如，@1&#x3D;4、 @2&#x3D;4 这些值）。</li><li><code>--start-position</code>表示binlog的开始位置，值哪里来的，来自于<code>show binlog events in &#39;xxx-bin.000002&#39;</code>结果的pos字段</li><li><code>--stop-position</code>表示binlog的结束位置，值哪里来的，来自于<code>show binlog events in &#39;xxx-bin.000002&#39;</code>结果的pos字段，写大一点，要不然不包括进来（比如我的pos&#x3D;5299，但是我这里写的是5300）</li></ul><p>运行结果如下（结果还挺长的，删掉了一些，只列出比较重要的几个内容）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL Server <span class="token number">8.0</span><span class="token punctuation">\</span>bin<span class="token operator">></span>mysqlbinlog.exe  <span class="token parameter variable">-vv</span> <span class="token string">"C:\ProgramData\MySQL\MySQL Server 8.0\Data\SF0001408876LA-bin.000002"</span> --start-position<span class="token operator">=</span><span class="token number">5043</span> --stop-position<span class="token operator">=</span><span class="token number">5300</span><span class="token comment"># at 5043</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5122 CRC32 0x72f668e7         Anonymous_GTID  last_committed=17       sequence_number=18      rbr_only=yes    original_committed_timestamp=1667287271257812   immediate_commit_timestamp=1667287271257812  transaction_length=287</span>SET @@<span class="token environment constant">SESSION</span>.GTID_NEXT<span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment"># at 5122</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5203 CRC32 0xe3288066         Query   thread_id=11    exec_time=0     error_code=0</span>SET <span class="token assign-left variable">TIMESTAMP</span><span class="token operator">=</span><span class="token number">1667287271</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>SET @@session.pseudo_thread_id<span class="token operator">=</span><span class="token number">11</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>SET @@session.sql_mode<span class="token operator">=</span><span class="token number">1075838976</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>BEGIN/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment"># at 5203</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5251 CRC32 0x613f3131         Table_map: `zs`.`t` mapped to number 169</span><span class="token comment"># at 5251</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5299 CRC32 0x75141201         Delete_rows: table id 169 flags: STMT_END_F</span>BINLOG <span class="token string">'58hgYxMBAAAAMAAAAIMUAAAAAKkAAAAAAAEAAnpzAAF0AAMDAxEBAAIBAQAxMT9h58hgYyABAAAAMAAAALMUAAAAAKkAAAAAAAEAAgAD/wAEAAAABAAAAFvlrwABEhR1'</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment">### DELETE FROM `zs`.`t`</span><span class="token comment">### WHERE</span><span class="token comment">###   @1=4 /* INT meta=0 nullable=0 is_null=0 */</span><span class="token comment">###   @2=4 /* INT meta=0 nullable=1 is_null=0 */</span><span class="token comment">###   @3=1541779200 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */</span><span class="token comment"># at 5299</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5330 CRC32 0xc30d2901         Xid = 1924</span>COMMIT/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>SET @@<span class="token environment constant">SESSION</span>.GTID_NEXT<span class="token operator">=</span> <span class="token string">'AUTOMATIC'</span> /* added by mysqlbinlog */ /*<span class="token operator">!</span>*/<span class="token punctuation">;</span>DELIMITER <span class="token punctuation">;</span><span class="token comment"># End of log file</span>/*<span class="token operator">!</span><span class="token number">50003</span> SET <span class="token assign-left variable">COMPLETION_TYPE</span><span class="token operator">=</span>@OLD_COMPLETION_TYPE*/<span class="token punctuation">;</span>/*<span class="token operator">!</span><span class="token number">50530</span> SET @@<span class="token environment constant">SESSION</span>.PSEUDO_SLAVE_MODE<span class="token operator">=</span><span class="token number">0</span>*/<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>server id 1</code>表示这个事务是在 server_id&#x3D;1 的这个库上执行的。</p></li><li><p><code>CRC32 0xc30d2901</code>每个 event 都有 CRC32 的值，这是因为我把参数 binlog_checksum 设置成了 CRC32。</p><ul><li>可以通过<code>show variables like &#39;%binlog_checksum%&#39;;</code> 查看binlog_checksum 的值</li></ul></li><li><p><code>SET TIMESTAMP=1667287271/*!*/;</code>当前sql执行的时间戳，在主备同步的时候，如果有延迟，而sql中又使用了日期函数的话，容易导致主备不一致，所以mysql在binlog中，保存了每个sql执行的时间，这样主备同步的时候，日期函数就不会出问题了。</p></li><li><p><code>@1=4 /* INT meta=0 nullable=0 is_null=0 */</code></p></li><li><p><code>@2=4 /* INT meta=0 nullable=1 is_null=0 */</code></p></li><li><p><code>@3=1541779200 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */</code></p></li><li><p>上面这三行，表示被删掉的这条记录的原始的值。为什么会记录的这么详细？因为我们开启了记录全部信息</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_row_image%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token operator">|</span> binlog_row_image <span class="token operator">|</span> <span class="token keyword">FULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果把<code>binlog_row_image</code>设置为：MINIMAL，就不会记录的这么详细的，只会记录一个id而已。</li><li>最后的 Xid event，用于表示事务被正确地提交了。</li></ul><h6 id="mix"><a href="#mix" class="headerlink" title="mix"></a><strong>mix</strong></h6><p>mix格式的binlog其实就是statement和row格式的结合。</p><p>对于statement来说，容易导致主备同步不一致的问题，比如主备上索引选择不一致的话，就会导致主备不一致；</p><p>对于row来说，如果删除的数据很多，row会把删掉的每一条记录都记下来，占用磁盘IO，浪费空间。</p><p>所以就诞生了mix格式</p><p>在binlog_format&#x3D;mix格式下，mysql会自己判断，如果当前语句存在数据不一致的风险，就会采用row格式，否则采用statement格式；</p><p>但是mix格式下，因为是mysql自己判断的，这些判断逻辑在实际环境中，可能会出现不可预知的问题。</p><p>所以：一般都是直接使用 ROW 格式</p><p>在公司的生产环境，使用的binlog格式是：ROW</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看binlog的格式</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'binlog_format'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="undo-log是什么"><a href="#undo-log是什么" class="headerlink" title="undo log是什么"></a>undo log是什么</h3><p>undo log 是 MVCC实现的基础，关于undo log的详细内容，请参考：<a href="mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F">mysql的事务从入门到入土</a></p><h2 id="mysql的WAL机制"><a href="#mysql的WAL机制" class="headerlink" title="mysql的WAL机制"></a>mysql的WAL机制</h2><p>WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。</p><p>WAL 机制是减少磁盘写，可是每次提交事务都要写 redo log 和 binlog，这磁盘读写次数也没变少呀？</p><p>现在你就能理解了，WAL 机制主要得益于两个方面：</p><ul><li>redo log 和 binlog 都是顺序写，磁盘的顺序写比随机写速度要快；</li><li>组提交机制，可以大幅度降低磁盘的 IOPS 消耗。怎么降低的呢？<a href="#%E7%BB%84%E6%8F%90%E4%BA%A4%EF%BC%88%E5%8F%8C1%E9%85%8D%E7%BD%AE%EF%BC%8CLSN%EF%BC%89">点我去看：组提交（双1配置，LSN）</a></li></ul><h2 id="日志的写入流程（二阶段提交）"><a href="#日志的写入流程（二阶段提交）" class="headerlink" title="日志的写入流程（二阶段提交）"></a>日志的写入流程（二阶段提交）</h2><h3 id="redolog和binlog的整体写入流程（二阶段提交）"><a href="#redolog和binlog的整体写入流程（二阶段提交）" class="headerlink" title="redolog和binlog的整体写入流程（二阶段提交）"></a>redolog和binlog的整体写入流程（二阶段提交）</h3><pre class="mermaid">sequenceDiagramclient->>server:更新ID=2这一行server->>innodb:获取ID=2这一行innodb->>innodb:ID=2这一行是否在内存页中innodb->>server:在内存中，直接返回ID=2的行数据innodb->>disk:不在内存中<br/>从磁盘中加载ID=2这一行的数据页disk->>innodb:返回ID=2所在的数据页innodb->>server:返回ID=2的行数据server->>server:对ID=2的数据，进行更新操作server->>innodb:写入更新后的数据innodb->>innodb:更新内存innodb->>innodb:记录redolog，处于prepare状态innodb->>server:更新成功server->>server:记录binlogserver->>innodb:提交事务innodb->>innodb:redolog提交，处于commit状态innodb->>server:更新完成server->>client:更新完成</pre><h4 id="为什么要有两阶段提交（反证法）"><a href="#为什么要有两阶段提交（反证法）" class="headerlink" title="为什么要有两阶段提交（反证法）"></a>为什么要有两阶段提交（反证法）</h4><p>为什么必须要有两阶段提交呢？我们知道两阶段提交是为了保证分布式事务的数据一致性的， 那么mysql是要保证什么数据的一致性。</p><p>很显然：是为了保证redolog和binlog的数据一致性</p><p>那么为什么要保证redolog和binlog的数据一致性呢？这就涉及到redolog和binlog的作用是什么呢？对！是为了崩溃恢复。</p><p>那么我们看看没有两阶段提交会怎么样？</p><p>1、<strong>先写redolog后写binlog</strong>。假设redolog写完了，binlog没写完，mysql崩了。重启之后，因为redolog完整，数据恢复；但是binlog不完整， binlog 里面就没有记录这个语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库恢复出来数据与原库的值不同。 另外主备一致也是通过binlog同步的，binlog不完整，备库的数据就不对了。</p><p>2、<strong>先写binlog后写redolog</strong>。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以数据不变。但是 binlog 里面已经记录了数据变更的日志。所以，在之后用 binlog 来恢复的时候数据与原库的值不同。</p><h3 id="redolog的写入流程"><a href="#redolog的写入流程" class="headerlink" title="redolog的写入流程"></a>redolog的写入流程</h3><pre class="mermaid">sequenceDiagraminnodb->>innodb:dml成功\n更新内存\n开始记录redologinnodb->>redologbuffer:redolog记录到内存中redologbuffer->>pagecache:写入到文件系统的pagecache中(write)pagecache->>disk:持久化到磁盘文件(fsync)</pre><p>我们看到redolog写盘是有三步的，先写redologbuffer，在write到pagecache中，在fsync到disk中；</p><p>那么问题来了，这三步，对于mysql来说，究竟哪一步才算做redolog写入成功了呢？</p><p>是写到redologbuffer就行了，还是必须要fsync之后才行呢？</p><p>其实这是通过一个参数配置的：innodb_flush_log_at_trx_commit</p><ul><li>当innodb_flush_log_at_trx_commit&#x3D;0的时候，表示每次事务提交都只留在redologbuffer中；</li><li>当innodb_flush_log_at_trx_commit&#x3D;1的时候，表示每次事务提交都会fsync持久化到磁盘中；</li><li>当innodb_flush_log_at_trx_commit&#x3D;2的时候，表示每次事务提交都只是write到文件系统的pagecache中；</li></ul><p>公司的生产环境，配置的是：innodb_flush_log_at_trx_commit &#x3D; 1</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- redolog的刷盘配置</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'innodb_flush_log_at_trx_commit'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>redologbuffer有多大？超过了怎么办呢？</p><ul><li>redologbuffer有多大是通过innodb_log_buffer_size来控制的。show viriables like ‘innodb_log_buffer_size’</li><li>超过了怎么办？不会超过的，为什么呢？<ul><li>当redologbuffer中存的内容超过innodb_log_buffer_size一半的时候，就会触发write到文件系统的pagecache中</li><li>所以不会超过的。</li></ul></li></ul><h3 id="binlog的写入流程"><a href="#binlog的写入流程" class="headerlink" title="binlog的写入流程"></a>binlog的写入流程</h3><pre class="mermaid">sequenceDiagraminnodb->>server:当dml成功\n此时redolog处于prepare状态server->>server:开始记录binlogserver->>binlogcache:将binlog记录到binlogcache中binlogcache->>binlogcache:binlog cache\n是在内存中的\n每个线程私有的binlogcache->>pagecache:将binlog写入到操作系统的pagecache中（write）pagecache->>disk:数据持久化到磁盘（fsync）\n这一步占用IOPS</pre><p>我们看到binlog写盘是有三步的，先写binlogcache，在write到pagecache中，在fsync到disk中；</p><p>那么问题来了，这三步，对于mysql来说，究竟哪一步才算做binlog写入成功了呢？</p><p>是写到binlogcache就行了，还是必须要fsync之后才行呢？</p><p>其实这是通过一个参数配置的：sync_binlog</p><ul><li>sync_binlog&#x3D;0的时候，表示每次事务提交都只write，不fsync</li><li>sync_binlog&#x3D;1的时候，表示每次事务提交都会执行fsync</li><li>sync_binlog&#x3D;N（N&gt;1）的时候，表示累计到N个事务之后，才fsync</li></ul><p>公司的生产环境，配置的是：sync_binlog &#x3D; 1</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- binlog的刷盘配置</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'sync_binlog'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>binlogcache有多大呢？超过了怎么办呢？</p><ul><li>show viriables like ‘binlog_cache_size’；表示单个线程内 binlog cache 所占内存的大小</li><li>超过了会刷盘，但是并不是写到binlog文件中，而是暂存到磁盘中，写在临时文件中；</li></ul><p>为什么binlogcache是线程私有的？</p><ul><li>因为一个线程是一个事务，我们要保证一个事务的binlog是完整的，中间不能插入其他的binlog，所以binlogcache是线程私有的</li></ul><h3 id="redolog和binlog的刷盘时机"><a href="#redolog和binlog的刷盘时机" class="headerlink" title="redolog和binlog的刷盘时机"></a>redolog和binlog的刷盘时机</h3><p><strong>redolog的刷盘时机</strong></p><p>考虑一个极端的情况，当我们把innodb_flash_log_at_trx_commit设置为0的时候，此时redolog只会写到redologbuffer（redologbuffer是在mysql的内存中的），那么什么时候刷盘呢？</p><ul><li>刷盘时机1：InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。</li><li>刷盘时机2：当redologbuffer中的内容占用超过redolog_buffer_size大小的一半时候，后台线程会主动写盘</li><li>刷盘时机3：当并行的其他事务提交的时候，会将redologbuffer中的所有内容都刷盘；<ul><li>对于时机3：不能将innodb_flash_log_at_trx_commit配置设置为0，因为这个时候，事务提交的时候不会刷盘</li><li>对于时机3：可能会把进行汇总的事务的redolog进行刷盘，会有问题吗？<ul><li>不会，这个和崩溃恢复的流程有关。此时redolog是prepare阶段的，要想恢复的话，还得去找binlog呢。</li></ul></li></ul></li></ul><p><strong>binlog的刷盘时机</strong></p><p>binlog会有刷盘时机吗？sync_binlog不管设置成多少，都至少保证了binlog会写到文件系统的pagecache中，接下来就是操作系统的范畴了。</p><p>详细的说，binlog的刷盘是在 “二阶段三步骤” 的第二步骤 sync state 中</p><h3 id="在两阶段提交的不同时刻，MySQL-异常重启会出现什么现象。"><a href="#在两阶段提交的不同时刻，MySQL-异常重启会出现什么现象。" class="headerlink" title="在两阶段提交的不同时刻，MySQL 异常重启会出现什么现象。"></a>在两阶段提交的不同时刻，MySQL 异常重启会出现什么现象。</h3><p>在讨论这个问题的时候，简化一下二阶段提交，只看最基本的情况。</p><pre class="mermaid">graph TD;id1([写入binlog处于prepare阶段])--时刻A-->id2([写binlog]);id2--时刻B-->id3([提交事务处于comit阶段])</pre><p><strong>时刻A</strong></p><p>就是写入 redo log 处于 prepare 阶段之后、写 binlog 之前，发生了崩溃（crash）由于此时 binlog 还没写，redo log 也还没提交，所以崩溃恢复的时候，这个事务会回滚。这时候，binlog 还没写，所以也不会传到备库。到这里，大家都可以理解。</p><p><strong>时刻B</strong></p><p>就是 binlog 写完，redo log 还没 commit 前发生 crash，那崩溃恢复的时候 MySQL 会怎么处理呢？</p><ul><li>如果 redo log 里面的事务是完整的，也就是已经有了 commit 标识，则直接提交；</li><li>如果 redo log 里面的事务只有完整的 prepare，则判断对应的事务 binlog 是否存在并完整：<ul><li>a. 如果是，则提交事务；</li><li>b. 否则，回滚事务。</li></ul></li></ul><h2 id="组提交（双1配置，LSN）"><a href="#组提交（双1配置，LSN）" class="headerlink" title="组提交（双1配置，LSN）"></a>组提交（双1配置，LSN）</h2><p>mysql5.7关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/5.7/sql/binlog.cc">点我跳转到github</a></p><p>mysql8.0关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc">点我跳转到github</a></p><p>关于组提交，这篇文章是我见过讲的最好的一篇：<a href="https://zhuanlan.zhihu.com/p/567154450">https://zhuanlan.zhihu.com/p/567154450</a></p><p>这篇文章里面有一些图，可以帮助更好的理解：<a href="https://blog.51cto.com/u_15080021/2642167">https://blog.51cto.com/u_15080021/2642167</a></p><p>还有这一篇，也挺不错的：<a href="https://segmentfault.com/a/1190000014810628">mysql - MySQL 2PC &amp; Group Commit</a></p><h3 id="双1配置"><a href="#双1配置" class="headerlink" title="双1配置"></a>双1配置</h3><p>我们看到mysql默认会把innodb_flash_log_at_trx_commit设置为1，sync_binlog设置为1，这就是通常我们所说的 MySQL 的<strong>“ 双 1 ”配置</strong>。</p><p>也就是说，一个事务完整提交前，需要等待两次刷盘，一次是 redo log（prepare 阶段），一次是 binlog。</p><p>那么问题来了，如果mysql的TPS是2万，也就意味着每秒要写4万次磁盘，但是单独测试磁盘的IOPS，也就在2万左右，怎么能承受住mysql的2万的TPS呢？</p><p>这个时候就用到了组提交（group commit）</p><h3 id="日志逻辑序列号（LSN）"><a href="#日志逻辑序列号（LSN）" class="headerlink" title="日志逻辑序列号（LSN）"></a>日志逻辑序列号（LSN）</h3><p>在介绍组提交之前，需要先了解日志逻辑序列号（log sequence number）LSN</p><h4 id="什么是LSN"><a href="#什么是LSN" class="headerlink" title="什么是LSN"></a>什么是LSN</h4><ul><li>每一个redolog的生成，都伴随着LSN的生成</li><li>LSN是单调递增的</li><li>LSN是用来对应redolog的一个一个的写入点（write pos）</li><li>每当写入长度为length的redolog，LSN的值就会加上length</li></ul><h4 id="flushed-to-disk-lsn"><a href="#flushed-to-disk-lsn" class="headerlink" title="flushed_to_disk_lsn"></a>flushed_to_disk_lsn</h4><p>已经刷到磁盘的LSN</p><p>系统第一次启动时，该变量的值和初始的<code>lsn</code>值是相同的。随着系统的运行，<code>redo</code>日志被不断写入<code>log buffer</code>，但是并不会立即刷新到磁盘，<code>lsn</code>的值就和<code>flushed_to_disk_lsn</code>的值拉开了差距。</p><p>如果两者的值相同时，说明log buffer中的所有redo日志都已经刷新到磁盘中了。</p><h4 id="current-flush-lsn"><a href="#current-flush-lsn" class="headerlink" title="current_flush_lsn"></a>current_flush_lsn</h4><p>当前正在刷的LSN</p><h4 id="LSN有什么用"><a href="#LSN有什么用" class="headerlink" title="LSN有什么用"></a>LSN有什么用</h4><ul><li>减少redolog组提交时候的刷盘次数，减少磁盘IO（看后面的组提交有详细的说明）</li></ul><h3 id="组提交"><a href="#组提交" class="headerlink" title="组提交"></a>组提交</h3><p>简单的记忆就是：两个阶段，三个步骤</p><p>经过 5.6&#x2F;5.7&#x2F;8.0 的逐步优化，两阶段提交的逻辑优化为：</p><ul><li>Prepare 阶段：只是将<code>redolog</code>写入<code>pagecache</code>（并不刷盘）。</li><li>Commit 阶段按步骤做流水线批处理，拆为三个步骤：<ul><li>flush stage：<code>redo log</code> 刷盘（多个事务 <code>redo log</code>合并刷盘），按事务进入的顺序将 <code>binlog</code>  写入<code>pagecache</code>（并不刷盘）。</li><li>sync stage：对 binlog 刷盘（多个事务的 binlog 合并刷盘）。</li><li>commit stage：各个线程按顺序做 InnoDB commit 操作。</li></ul></li></ul><p>三个步骤（stage）中，每个 stage 一个队列，第一个进入该队列的线程成为 leader，后续进入的线程会作为follower，并且一直阻塞直至leader完成提交（sql语句会阻塞）。leader 线程会领导队列中的所有线程执行该 stage 的任务，并带领所有 follower 进入到下一个 stage 去执行，当遇到下一个 stage 队列不为空的时候，leader 会变成 follower 注册到此队列中。</p><pre class="mermaid">sequenceDiagramserver->>innodb:更新数据note left of innodb:第一阶段innodb->>innodb:记录redologinnodb->>pagecache:redolog write 事务处于preparepagecache->>innodb:write 成功innodb->>server:redolog prepare 成功note left of innodb:第二阶段第一步骤pagecache->>disk:redolog刷盘(【组提交】)server->>server:记录binlogserver->>pagecache:binlog写到文件系统的cachepagecache->>server:binlog 成功note left of disk:第二阶段第二步骤pagecache->>disk:binlog刷盘（【组提交】）note left of innodb:第二阶段第三步骤server->>innodb:提交事务innodb->>innodb:事务处于commitinnodb->>server:更新完成</pre><h4 id="第二阶段的第一步骤中，是先写binlog还是先刷redolog？"><a href="#第二阶段的第一步骤中，是先写binlog还是先刷redolog？" class="headerlink" title="第二阶段的第一步骤中，是先写binlog还是先刷redolog？"></a>第二阶段的第一步骤中，是先写binlog还是先刷redolog？</h4><p>我看了mysql5.7的源码，其实是先刷的redolog，但是mysql45讲说的是先写binlog，在刷redolog。（老师讲错了）</p><p>mysql5.7关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/5.7/sql/binlog.cc">点我跳转到github</a></p><p>mysql8.0关于组提交的源码：<a href="https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc">点我跳转到github</a></p><p>第二步骤的第一阶段（就是FLASH_STAGE）的代码如下（mysql5.7）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**  Execute the flush stage.  @param total_bytes_var Pointer to variable that will be set to total  number of bytes flushed, or NULL.  @param rotate_var Pointer to variable that will be set to true if  binlog rotation should be performed after releasing locks. If rotate  is not necessary, the variable will not be touched.  @return Error code on error, zero on success */</span><span class="token keyword">int</span>MYSQL_BIN_LOG<span class="token operator">::</span><span class="token function">process_flush_stage_queue</span><span class="token punctuation">(</span><span class="token class-name">my_off_t</span> <span class="token operator">*</span>total_bytes_var<span class="token punctuation">,</span>                                         bool <span class="token operator">*</span>rotate_var<span class="token punctuation">,</span>                                         THD <span class="token operator">*</span><span class="token operator">*</span>out_queue_var<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">DBUG_ENTER</span><span class="token punctuation">(</span><span class="token string">"MYSQL_BIN_LOG::process_flush_stage_queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>  <span class="token comment">// number of flushes per group.</span>  <span class="token keyword">int</span> no_flushes<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token function">assert</span><span class="token punctuation">(</span>total_bytes_var <span class="token operator">&amp;&amp;</span> rotate_var <span class="token operator">&amp;&amp;</span> out_queue_var<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">my_off_t</span> total_bytes<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> flush_error<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">mysql_mutex_assert_owner</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>LOCK_log<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*    Fetch the entire flush queue and empty it, so that the next batch    has a leader. We must do this before invoking ha_flush_logs(...)    for guaranteeing to flush prepared records of transactions before    flushing them to binary log, which is required by crash recovery.  */</span>  THD <span class="token operator">*</span>first_seen<span class="token operator">=</span> stage_manager<span class="token punctuation">.</span><span class="token function">fetch_queue_for</span><span class="token punctuation">(</span>Stage_manager<span class="token operator">::</span>FLUSH_STAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span><span class="token punctuation">(</span>first_seen <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*    We flush prepared records of transactions to the log of storage    engine (for example, InnoDB redo log) in a group right before    flushing them to binary log.     这段注释表示，在写binlog之前需要先把redolog刷盘    ha_flush_logs(NULL, true);这个方法就是对redolog刷盘  */</span>  <span class="token function">ha_flush_logs</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">DBUG_EXECUTE_IF</span><span class="token punctuation">(</span><span class="token string">"crash_after_flush_engine_log"</span><span class="token punctuation">,</span> <span class="token function">DBUG_SUICIDE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assign_automatic_gtids_to_flush_group</span><span class="token punctuation">(</span>first_seen<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*   Flush thread caches to binary log.   这段注释表示，开始 write binlog【这里不明白的是，为什么也叫flush？】  */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>THD <span class="token operator">*</span>head<span class="token operator">=</span> first_seen <span class="token punctuation">;</span> head <span class="token punctuation">;</span> head <span class="token operator">=</span> head<span class="token operator">-></span>next_to_commit<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token class-name">my_off_t</span><span class="token operator">></span> result<span class="token operator">=</span> <span class="token function">flush_thread_caches</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    total_bytes<span class="token operator">+=</span> result<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flush_error <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>      flush_error<span class="token operator">=</span> result<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>    no_flushes<span class="token operator">++</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>out_queue_var<span class="token operator">=</span> first_seen<span class="token punctuation">;</span>  <span class="token operator">*</span>total_bytes_var<span class="token operator">=</span> total_bytes<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>total_bytes <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">my_b_tell</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>log_file<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token class-name">my_off_t</span><span class="token punctuation">)</span> max_size<span class="token punctuation">)</span>    <span class="token operator">*</span>rotate_var<span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>  <span class="token function">DBUG_PRINT</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"no_flushes:= %d"</span><span class="token punctuation">,</span> no_flushes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  no_flushes<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token function">DBUG_RETURN</span><span class="token punctuation">(</span>flush_error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组提交“组”在了哪里"><a href="#组提交“组”在了哪里" class="headerlink" title="组提交“组”在了哪里"></a>组提交“组”在了哪里</h4><p>在第二阶段的第一步骤中，redolog进行了组提交刷盘</p><p>在第二阶段的第二步骤中，binlog进行组提交刷盘</p><p>那么具体是怎么“<code>组</code>”提交的呢？</p><p>1、在第一阶段，事务线程不停地，刷刷刷的进来，写redolog，此时只写到pagecache中；</p><p>2、在第二阶段的第一步骤中，有一个队列，假设叫【队列-1】，</p><ul><li>当前线程会先把【队列-1】清空，以便下一批有一个leader</li><li>当前线程中直接对redolog进行刷盘。ha_flush_logs(NULL, true);</li><li>第一个进来的线程作为leader，后续的线程作为follower，进入【队列-1】（也就是说队列-1和刷redolog并没有啥关系）</li></ul><p>3、redolog刷盘完成之后，leader对【队列-1】中的事务线程，进行循环，write binlog</p><p>4、write bin完成之后，【队列-1】的leader进入第二阶段的第二步骤，会进入到【队列-2】</p><p>5、在第二阶段的第二步骤中，【队列-2】的leader会等待（受<strong>binlog_group_commit_sync_delay</strong> 和 <strong>binlog_group_commit_sync_no_delay_count</strong>控制）</p><p>6、等待之后，【队列-2】的leader开始对binlog进行刷盘（因为等待了一段时间，所以binlog这里也是组提交）</p><p>7、fsync binlog之后，【队列-2】的leader进入第二阶段的第三步骤，会进入到【队列-3】</p><p>8、【队列-3】的leader会按照串行化的方式，循环，一个一个的对事务线程进行COMMIT</p><h4 id="组提交和LSN有啥关系"><a href="#组提交和LSN有啥关系" class="headerlink" title="组提交和LSN有啥关系"></a>组提交和LSN有啥关系</h4><p>首先明确：</p><ul><li>在innodb中，每条redolog都有自己的LSN，这是一个单调递增的值。</li><li>每个事务的更新操作都会包含一条或者<strong>多条</strong>redo log</li><li>各个事务在将redo log写入 redo log buffer (通过log_mutex保护)时，都会获取<strong>当前事务</strong>最大的LSN。</li></ul><p>在组提交的第二阶段的第一步骤中，redolog会被组提交刷盘，组提交刷盘的时候，会有下面的流程</p><p>那么假设三个事务 tx1, tx2, tx3的最大LSN分别为 100 , 200 , 300  时，他们同时进行提交，如果tx3获取到了 log_mutex 互斥锁, 那么他会将小于 300 之前的redo log一起落盘，同时记录  <strong>flushed_to_disk_lsn</strong>&#x3D;300， 这样 tx1, tx2不用再次请求磁盘io。</p><p>同时，如果存在 tx0 的 LSN0 &lt; 300，LSN0 也会落盘，即使tx0还没有提交。然后当tx0的事务开始提交的时候，发现redolog已经刷盘了（ flushed_to_disk_lsn &gt;&#x3D; lsn），就直接返回了，节省了时间。</p><ol><li>获取 log mutex互斥锁</li><li>如果 flushed_to_disk_lsn &gt;&#x3D; lsn, 表示日志已经被刷盘，跳转 5 后进入等待状态</li><li>如果 current_flush_lsn &gt;&#x3D; lsn, 表示日志正在刷盘中，跳转 5 后进入等待状态</li><li>将小于 lsn 的日志刷盘 (sync)</li><li>释放 log_mutex互斥锁</li></ol><h2 id="mysql的崩溃恢复Crash-Safe能力（重要作用）"><a href="#mysql的崩溃恢复Crash-Safe能力（重要作用）" class="headerlink" title="mysql的崩溃恢复Crash-Safe能力（重要作用）"></a>mysql的崩溃恢复Crash-Safe能力（重要作用）</h2><h3 id="崩溃恢复的具体步骤"><a href="#崩溃恢复的具体步骤" class="headerlink" title="崩溃恢复的具体步骤"></a>崩溃恢复的具体步骤</h3><p>1、mysql崩溃重启后，进行恢复</p><p>2、判断redolog的状态，如果redolog&#x3D;commit，直接提交事务</p><p>3、如果redolog&#x3D;prepare，则通过xid去找binlog</p><p>4、binlog存在，并且binlog是完整的，提交事务</p><p>5、binlog不存在，或者binlog存在，但是不完整，回滚事务</p><h3 id="MySQL-怎么知道-binlog-是完整的"><a href="#MySQL-怎么知道-binlog-是完整的" class="headerlink" title="MySQL 怎么知道 binlog 是完整的"></a>MySQL 怎么知道 binlog 是完整的</h3><p>回答：一个事务的 binlog 是有完整格式的：</p><ul><li>statement 格式的 binlog，最后会有 COMMIT；</li><li>row 格式的 binlog，最后会有一个 XID event。</li></ul><p>另外，在 MySQL 5.6.2 版本以后，还引入了 binlog-checksum 参数，用来验证 binlog 内容的正确性。对于 binlog 日志由于磁盘原因，可能会在日志中间出错的情况，MySQL 可以通过校验 checksum 的结果来发现。所以，MySQL 还是有办法验证事务 binlog 的完整性的。</p><p>可以通过下面的命令查看<code>binlog-checksum</code>的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_checksum%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+-------+</span><span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-------+</span><span class="token operator">|</span> binlog_checksum <span class="token operator">|</span> CRC32 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是<code>mysql 8.0</code>版本的默认值，就是CRC32，它有什么用呢，在ROW格式下的binlog，通过<code>mysqlbinlog</code>工具可以看到具体的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>省略<span class="token comment"># at 5299</span><span class="token comment">#221101 15:21:11 server id 1  end_log_pos 5330 CRC32 0xc30d2901         Xid = 1824</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个<code>CRC32 0xc30d2901</code>内容就是CRC32的值，用来校验binlog的完整性。</p><h3 id="redo-log-和-binlog-是怎么关联起来的"><a href="#redo-log-和-binlog-是怎么关联起来的" class="headerlink" title="redo log 和 binlog 是怎么关联起来的"></a>redo log 和 binlog 是怎么关联起来的</h3><p>它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：</p><ul><li>如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；</li><li>如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。</li></ul><h3 id="如果只有binlog可以Crash-Safe吗？"><a href="#如果只有binlog可以Crash-Safe吗？" class="headerlink" title="如果只有binlog可以Crash-Safe吗？"></a>如果只有binlog可以Crash-Safe吗？</h3><p>不行，因为binlog是逻辑日志，binlog写完了，并不保证数据一定在磁盘中。</p><p>在崩溃恢复的时候，顺序扫描binlog，发现日志是完整的，那么此时要执行这个binlog吗？</p><ul><li>执行：如果数据已经写到了磁盘，又执行一遍，那数据就不对了呀。</li><li>不执行：如果数据没写到磁盘，不执行，数据就少了呀。</li></ul><p>综上，只用binlog是不可以的。</p><h3 id="如果只有redolog可以Crash-Safe吗？"><a href="#如果只有redolog可以Crash-Safe吗？" class="headerlink" title="如果只有redolog可以Crash-Safe吗？"></a>如果只有redolog可以Crash-Safe吗？</h3><p>如果只从崩溃恢复的角度来讲是可以的。你可以把 binlog 关掉，这样就没有两阶段提交了，但系统依然是 crash-safe 的。</p><p>但是呢，redolog是循环写的，所以只用redolog，mysql虽然可以crash-safe，但是不具备归档的能力了。</p><h2 id="刷脏页"><a href="#刷脏页" class="headerlink" title="刷脏页"></a>刷脏页</h2><h3 id="正常运行中的实例，数据写入后的最终落盘，是从-redo-log-更新过来的还是从-buffer-pool-更新过来的呢？"><a href="#正常运行中的实例，数据写入后的最终落盘，是从-redo-log-更新过来的还是从-buffer-pool-更新过来的呢？" class="headerlink" title="正常运行中的实例，数据写入后的最终落盘，是从 redo log 更新过来的还是从 buffer pool 更新过来的呢？"></a>正常运行中的实例，数据写入后的最终落盘，是从 redo log 更新过来的还是从 buffer pool 更新过来的呢？</h3><p>这里涉及到了，“redo log 里面到底是什么”的问题。</p><p>实际上，redo log 并没有记录数据页的完整数据，所以它并没有能力自己去更新磁盘数据页，也就不存在“数据最终落盘，是由 redo log 更新过去”的情况。</p><ul><li>如果是正常运行的实例的话，数据页被修改以后，跟磁盘的数据页不一致，称为脏页。最终数据落盘，就是把<strong>内存中的数据页</strong>写盘。这个过程，甚至与 redo log 毫无关系。</li><li>在崩溃恢复场景中，InnoDB 如果判断到一个数据页可能在崩溃恢复的时候丢失了更新，就会将这个数据页加载到内存中，然后让 redo log 更新内存中的数据页内容。更新完成后，内存页变成脏页，就回到了第一种情况的状态。</li><li>在正常运行的实例中，change buffer中的数据也会定期merge到<strong>内存中的数据页</strong>中，然后刷盘</li><li>猜测<ul><li>正常运行的实例：是 change buffer –&gt; 内存中的数据页 –&gt; 刷盘；</li><li>崩溃恢复的场景：此时change buffer都没了。 所以是：redolog –&gt; 内存中的数据页 –&gt; 刷盘</li></ul></li></ul><h2 id="changebuffer（对更新的优化，对比redolog）"><a href="#changebuffer（对更新的优化，对比redolog）" class="headerlink" title="changebuffer（对更新的优化，对比redolog）"></a>changebuffer（对更新的优化，对比redolog）</h2><h3 id="changebuffer的更新流程"><a href="#changebuffer的更新流程" class="headerlink" title="changebuffer的更新流程"></a>changebuffer的更新流程</h3><p>每一次更新都必须从内存中（不在内存中，就要从磁盘中load）获取到要更新的这一行吗？</p><ul><li>不是的；</li><li>在mysql5.5之前，changebuffer叫做insert buffer，仅支持插入，在5.5之后，叫change buffer，支持了更新和删除；</li><li>changebuffer只有普通索引才能用到，因为唯一索引要判定记录是否存在，所以查询一定要的</li></ul><pre class="mermaid">sequenceDiagramclient->>server:执行dml语句server->>innodb:要执行dml语句innodb->>innodb:判断要执行的语句\n是否在内存中innodb->>cache:在内存中，直接操作内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成innodb->>changebuffer:不在内存中，记录到change bufferchangebuffer->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成note over client,disk:记录到缓存中，什么时候刷到磁盘呢？changebuffer->>disk:后台线程定时刷changebuffer->>disk:changebuffer不足时changebuffer->>disk:数据库正常关闭时changebuffer->>disk:redolog写满时\n（此时数据库不可用）note over client,disk:记录在缓存中，查询的时候怎么办client->>server:请求查询某一条记录server->>innodb:查询某一条记录innodb->>innodb:判断要查询的语句\n是否在内存中cache->>innodb:在内存中，直接返回innodb->>server:操作完成，返回server->>client:操作完成disk->>cache:不在内存中，从disk加载到内存中cache->>innodb:获取内存中的这一条记录innodb->>innodb:判断这一条记录是否有更新innodb->>server:没有更新\n操作完成，返回changebuffer->>innodb:有更新，应用changebuffer的更新\n这一步叫mergeinnodb->>cache:将更新后的记录先记录到内存页中innodb->>server:操作完成，返回server->>client:操作完成</pre><h3 id="普通索引和唯一索引的更新流程"><a href="#普通索引和唯一索引的更新流程" class="headerlink" title="普通索引和唯一索引的更新流程"></a>普通索引和唯一索引的更新流程</h3><p>在普通索引的更新流程（可以用changebuffer）</p><pre class="mermaid">sequenceDiagramclient->server:执行dml语句server->>innodb:要执行dml语句innodb->>innodb:判断要执行的语句\n是否在内存中innodb->>cache:在内存中，直接操作内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成innodb->>changebuffer:不在内存中，记录到change bufferchangebuffer->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成</pre><p>在唯一索引的更新流程（不可以用changebuffer）</p><pre class="mermaid">sequenceDiagramclient->server:执行dml语句server->>innodb:要执行dml语句innodb->>innodb:判断要执行的语句\n是否在内存中innodb->>cache:在内存中，直接操作内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成innodb->>disk:不在内存中，从磁盘中加载到内存disk->>cache:从磁盘中加载到内存cache->>innodb:操作完成，返回innodb->>server:操作完成，返回server->>client:操作完成</pre><h3 id="change-buffer-和-redo-log"><a href="#change-buffer-和-redo-log" class="headerlink" title="change buffer 和 redo log"></a>change buffer 和 redo log</h3><p>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</p><h2 id="一些简单的问题"><a href="#一些简单的问题" class="headerlink" title="一些简单的问题"></a>一些简单的问题</h2><p>执行一个 update 语句以后，我再去执行 hexdump 命令直接查看 ibd 文件内容，为什么没有看到数据有改变呢？</p><p>为什么 binlog cache 是线程私有的，而 redo log buffer 是全局共用的？</p><p>事务执行期间，还没到提交阶段，如果发生 crash 的话，redo log 肯定丢了，这会不会导致主备不一致呢？</p><p>如果 binlog 写完盘以后发生 crash，这时候还没给客户端答复就重启了。等客户端再重连进来，发现事务已经提交成功了，这是不是 bug？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的日志从入门到入土&quot;&gt;&lt;a href=&quot;#mysql的日志从入门到入土&quot; class=&quot;headerlink&quot; title=&quot;mysql的日志从入门到入土&quot;&gt;&lt;/a&gt;mysql的日志从入门到入土&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;本文有xmind，配合xmind查</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="binlog" scheme="https://zspcer.gitee.io/tags/binlog/"/>
    
    <category term="redolog" scheme="https://zspcer.gitee.io/tags/redolog/"/>
    
  </entry>
  
  <entry>
    <title>mysql的事务从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-01-12T09:36:46.510Z</published>
    <updated>2023-01-12T09:36:46.510Z</updated>
    
    <content type="html"><![CDATA[<p>#### 事务相关 * </p><p>03 | 事务隔离：为什么你改了我还看不见？ * </p><p>08 | 事务到底是隔离的还是不隔离的？ * </p><p>20 | 幻读是什么，幻读有什么问题？</p><p>undo log</p><p>undolog只会记录 insert delete update 的语句，DDL不会记录undo log；这个和undo log 的作用有关</p><p>以下摘录自官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-undo-logs.html">14.6.7 Undo Logs</a></p><pre class="line-numbers language-none"><code class="language-none">A transaction is assigned up to four undo logs, one for each of the following operation types:INSERT operations on user-defined tablesUPDATE and DELETE operations on user-defined tablesINSERT operations on user-defined temporary tablesUPDATE and DELETE operations on user-defined temporary tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#### 事务相关 * &lt;/p&gt;
&lt;p&gt;03 | 事务隔离：为什么你改了我还看不见？ * &lt;/p&gt;
&lt;p&gt;08 | 事务到底是隔离的还是不隔离的？ * &lt;/p&gt;
&lt;p&gt;20 | 幻读是什么，幻读有什么问题？&lt;/p&gt;
&lt;p&gt;undo log&lt;/p&gt;
&lt;p&gt;undolog只会记</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="事务" scheme="https://zspcer.gitee.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="MVCC" scheme="https://zspcer.gitee.io/tags/MVCC/"/>
    
    <category term="幻读" scheme="https://zspcer.gitee.io/tags/%E5%B9%BB%E8%AF%BB/"/>
    
    <category term="隔离级别" scheme="https://zspcer.gitee.io/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>mysql的临时表从入门到入土</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-01-12T09:36:46.509Z</published>
    <updated>2023-01-12T09:36:46.509Z</updated>
    
    <content type="html"><![CDATA[<p>mysql临时表的xmind，<a href="">点击下载</a></p><p>#### 临时表相关 </p><ul><li>17 | 如何正确地显示随机消息？ </li><li>34 | 到底可不可以使用join？ </li><li>35 | join语句怎么优化？ </li><li>36 | 为什么临时表可以重名？</li><li>37 | 什么时候会使用内部临时表？</li><li>43 | 要不要使用分区表？</li></ul><p>mysql</p><p>临时文件和临时表</p><p>临时表：为什么这里的临时表使用的引擎是memory？ A：tmp_table_size 这个配置限制了内存临时表的大小，默认值是 16M。如果临时表大小超过了 tmp_table_size，那么内存临时表就会转成磁盘临时表；磁盘临时表使用的引擎默认是 InnoDB，是由参数 internal_tmp_disk_storage_engine 控制的。而内存临时表使用的是memory引擎</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建表t2，主键索引和字段a的普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t2<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 通过存储过程，初始化1000条记录</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建表t1，主键索引和字段a的普通索引</span><span class="token comment">-- 初始化100条记录</span><span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token operator">like</span> t2<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么驱动表的字段a有索引，为啥不走索引呢？</p><ul><li>原因可能是因为没有过滤条件；</li></ul><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>    <span class="token number">50.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么驱动表的字段a有索引，而且添加了过滤条件，还是不走索引呢？</p><ul><li>因为是查询的 * ，即使走了索引 a，还是需要回表，优化器认为还不如直接走全表呢</li><li>因为过滤条件过滤的数据比较少，只过滤了50%，优化器认为全表扫描比走索引更快</li></ul><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> t1<span class="token punctuation">.</span>id <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>   <span class="token number">50</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref   <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span>              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动表的字段a有索引，而且添加了过滤条件，查询驱动表的主键id，会用到覆盖索引，不回表了，所以走了索引；</p><h4 id="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤"><a href="#驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤" class="headerlink" title="驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤"></a>驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>a <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref     <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref   <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> zs<span class="token punctuation">.</span>t1<span class="token punctuation">.</span>a <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动表的字段a有索引，而且添加了过滤条件，虽然查询的是所有字段，需要回表，但是因为过滤条件过滤90%的数据，优化器因为回表比全表扫描代价低</p><p>以上的情况适用于 t1 的单表查询也是一样的，所以总结下来 join查询其实就是多个单表查询，然后汇总在一起；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ALL</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span><span class="token comment">-- ALL</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment">-- range</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token comment">-- range</span><span class="token keyword">explain</span> <span class="token keyword">select</span> id <span class="token keyword">from</span> t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql5</p><ul><li>Using where; Using join buffer (Block Nested Loop)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                               <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql8</p><ul><li>Using where; Using join buffer (hash join)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 straight_join t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>a <span class="token operator">=</span> t2<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> a             <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">100</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                                       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> <span class="token boolean">NULL</span>          <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span><span class="token keyword">hash</span> <span class="token keyword">join</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用order by的话，就不会使用MRR了</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> optimizer_switch<span class="token operator">=</span><span class="token string">"mrr_cost_based=off"</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> a <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> a<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition<span class="token punctuation">;</span> <span class="token keyword">Using</span> MRR <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> a <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">and</span> a<span class="token operator">&lt;=</span><span class="token number">200</span> <span class="token keyword">order</span> <span class="token keyword">by</span> a <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>  <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t2    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> a             <span class="token operator">|</span> a    <span class="token operator">|</span> <span class="token number">5</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token number">101</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql的临时表存放位置</p><p>在 5.6 以及之前的版本里，MySQL 会在临时文件目录下创建一个相同前缀、以.ibd 为后缀的文件，用来存放数据文件；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'tmpdir'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>                                           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token operator">|</span> tmpdir        <span class="token operator">|</span> C:\Windows\SERVIC<span class="token operator">~</span><span class="token number">1</span>\NETWOR<span class="token operator">~</span><span class="token number">1</span>\AppData\<span class="token keyword">Local</span>\<span class="token keyword">Temp</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中 C:\Windows\SERVIC<del>1\NETWOR</del>1\AppData\Local\Temp  就是临时文件目录，其中的 SERVIC<del>1\NETWOR</del>1 是啥意思，我不知道</li><li>我是win电脑，可以创建一个临时表，然后用everything搜一下，就能找到这个目录</li></ul><p>而从 5.7 版本开始，MySQL 引入了一个临时文件表空间，专门用来存放临时文件的数据。因此，我们就不需要再创建 ibd 文件了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'innodb_temp_data_file_path'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token operator">|</span> Variable_name              <span class="token operator">|</span> <span class="token keyword">Value</span>                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token operator">|</span> innodb_temp_data_file_path <span class="token operator">|</span> ibtmp1:<span class="token number">12</span>M:autoextend <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>innodb_temp_data_file_path：定义临时表空间的路径、文件名、初始化大小和最大上限。</li><li>其中<code>ibtmp1</code>就是临时文件表空间，它在windows下是一个文件，不是一个目录。</li></ul><p><img src="/mysql%E7%9A%84%E4%B8%B4%E6%97%B6%E8%A1%A8%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.assets/image-20230105211938528.png" alt="image-20230105211938528"></p><h1 id="分区表的底层原理"><a href="#分区表的底层原理" class="headerlink" title="分区表的底层原理"></a>分区表的底层原理</h1><p>​分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引知识在各个底层表上各自加上一个完全相同的索引。从存储引擎的角度来看，底层表和普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分。</p><p>​分区表的操作按照以下的操作逻辑进行：</p><p>​<strong>select查询</strong></p><p>​当查询一个分区表的时候，分区层先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据</p><p>​<strong>insert操作</strong></p><p>​当写入一条记录的时候，分区层先打开并锁住所有的底层表，然后确定哪个分区接受这条记录，再将记录写入对应底层表</p><p>​<strong>delete操作</strong></p><p>​当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作</p><p>​<strong>update操作</strong></p><p>​当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录再哪个分区，然后取出数据并更新，再判断更新后的数据应该再哪个分区，最后对底层表进行写入操作，并对源数据所在的底层表进行删除操作</p><p>​有些操作时支持过滤的，例如，当删除一条记录时，MySQL需要先找到这条记录，如果where条件恰好和分区表达式匹配，就可以将所有不包含这条记录的分区都过滤掉，这对update同样有效。如果是insert操作，则本身就是只命中一个分区，其他分区都会被过滤掉。mysql先确定这条记录属于哪个分区，再将记录写入对应得曾分区表，无须对任何其他分区进行操作</p><p>​虽然每个操作都会“先打开并锁住所有的底层表”，但这并不是说分区表在处理过程中是锁住全表的，如果存储引擎能够自己实现行级锁，例如innodb，则会在分区层释放对应表锁。</p><h1 id="范围分区"><a href="#范围分区" class="headerlink" title="范围分区"></a>范围分区</h1><p>​范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用values less than运算符来定义。</p><p>​1、创建普通的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​2、创建带分区的表，下面建表的语句是按照store_id来进行分区的，指定了4个分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--在当前的建表语句中可以看到，store_id的值在1-5的在p0分区，6-10的在p1分区，11-15的在p3分区，16-20的在p4分区，但是如果插入超过20的值就会报错，因为mysql不知道将数据放在哪个分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​3、可以使用less than maxvalue来避免此种情况</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--maxvalue表示始终大于等于最大可能整数值的整数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​4、可以使用相同的方式根据员工的职务代码对表进行分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>job_code<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​5、可以使用date类型进行分区：如虚妄根据每个员工离开公司的年份进行划分，如year(separated)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    hired <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1970-01-01'</span><span class="token punctuation">,</span>    separated <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'9999-12-31'</span><span class="token punctuation">,</span>    job_code <span class="token keyword">INT</span><span class="token punctuation">,</span>    store_id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>separated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​6、可以使用函数根据range的值来对表进行分区，如timestampunix_timestamp()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--timestamp不允许使用任何其他涉及值的表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于时间间隔的分区方案，在mysql5.7中，可以基于范围或事件间隔实现分区方案，有两种选择</p><p>1、基于范围的分区，对于分区表达式，可以使用操作函数基于date、time、或者datatime列来返回一个整数值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1960</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> quarterly_report_status <span class="token punctuation">(</span>    report_id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_status <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    report_updated <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span>report_updated<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2008-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-04-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-07-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2009-10-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span> UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2010-01-01 00:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、基于范围列的分区，使用date或者datatime列作为分区列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> members <span class="token punctuation">(</span>    firstname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    lastname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    joined <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token keyword">COLUMNS</span><span class="token punctuation">(</span>joined<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1960-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1970-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1980-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token string">'1990-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="真实案例："><a href="#真实案例：" class="headerlink" title="真实案例："></a>真实案例：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#不分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> no_part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token punctuation">;</span><span class="token comment">#分区的表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> part_tab<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>remark <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>d_date <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>d_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1998</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p5 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p6 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p7 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p8 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p9 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PARTITION</span> p10 <span class="token keyword">VALUES</span> LESS THAN maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#插入未分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> no_load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token comment">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> no_load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> no_part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'no'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> no_load_part<span class="token punctuation">;</span><span class="token comment">#插入分区表记录</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> load_part<span class="token punctuation">;</span> <span class="token keyword">DELIMITER</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> load_part<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i<span class="token operator">&lt;</span><span class="token number">80001</span>    <span class="token keyword">DO</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> part_tab <span class="token keyword">VALUES</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'partition'</span><span class="token punctuation">,</span>ADDDATE<span class="token punctuation">(</span><span class="token string">'1995-01-01'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">36520</span><span class="token punctuation">)</span> MOD <span class="token number">3652</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token operator">&amp;&amp;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> <span class="token keyword">CALL</span> load_part<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mysql临时表的xmind，&lt;a href=&quot;&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#### 临时表相关 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;17 | 如何正确地显示随机消息？ &lt;/li&gt;
&lt;li&gt;34 | 到底可不可以使用join？ &lt;/li&gt;
&lt;li&gt;35 | join语句怎么</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="join" scheme="https://zspcer.gitee.io/tags/join/"/>
    
    <category term="临时表" scheme="https://zspcer.gitee.io/tags/%E4%B8%B4%E6%97%B6%E8%A1%A8/"/>
    
    <category term="order by" scheme="https://zspcer.gitee.io/tags/order-by/"/>
    
    <category term="分区表" scheme="https://zspcer.gitee.io/tags/%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>mysql的连接查询</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/MySql%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/MySql%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</id>
    <published>2023-01-12T09:36:46.503Z</published>
    <updated>2023-01-12T09:36:46.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql的连接查询"><a href="#mysql的连接查询" class="headerlink" title="mysql的连接查询"></a>mysql的连接查询</h2><h3 id="笛卡尔集"><a href="#笛卡尔集" class="headerlink" title="笛卡尔集"></a>笛卡尔集</h3><p>对于两张表的连接，会造成笛卡尔乘积现象：</p><p>假设表a有m行，表b有n行：则结果是m*n行。</p><img src="mysql的连接查询.assets/image-20220831204520815-16671893143504.png" alt="image-20220831204520815" style="zoom:80%;" /><p>对于上面的两张表，如果直接查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select name,boyName from beauty,boys; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则结果是：12 * 4 &#x3D; 48行</p><p>很显然不是我们想要的结果！</p><p>那么怎么解决笛卡尔集呢</p><p>通过添加连接条件，可以过滤掉笛卡尔集</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select name,boyName from beauty,boys where beauty.boyfriend_id &#x3D; boys.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内连接-等值连接"><a href="#内连接-等值连接" class="headerlink" title="内连接-等值连接"></a>内连接-等值连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 语法SELECT 字段1, 字段2... FROM 表1,表2... WHERE 表1.xxx &#x3D; 表2.xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理：</p><ul><li>先从表1中拿出第一行的数据,然后匹配表2中的每一行记录，进行WHERE后面的判断</li><li>满足判断：找到结果</li><li>不满足判断：过滤掉，继续下一个</li></ul><p>特点</p><ul><li>等值连接，可以进行分组</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>city <span class="token keyword">from</span> departments d<span class="token punctuation">,</span> location l <span class="token keyword">WHERE</span> d<span class="token punctuation">.</span>location_id <span class="token operator">=</span> l<span class="token punctuation">.</span>id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> city<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内连接-非等值连接"><a href="#内连接-非等值连接" class="headerlink" title="内连接-非等值连接"></a>内连接-非等值连接</h3><p>与等值连接的不同之处在于</p><ul><li><p>等值连接的WEHER中是使用 &#x3D; 进行判断</p></li><li><p>非等值连接，就是不使用 &#x3D; 进行判断，比如 xxx &gt; xxx，或者 xxx BETWEEN xxx and xxx</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 语法SELECT 字段1, 字段2 ... FROM 表1,表2... WHERE 判断条件-- 例子select 员工表.员工工资, 工资等级表.工资等级 from 员工表, 工资等级表 WHERE 员工表.员工工资 BETWEEN 工资等级表.最低工资 AND 工资等级表.最高工资;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原理：</p><ul><li>就是拿到员工表的中的每一个员工的工资，去工资登记表中进行判断，是否满足WHERE条件后的判断：</li><li>满足判断：找到结果</li><li>不满足判断：过滤掉，继续下一个</li></ul><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接，简单地说，就是一张表，自己与自己进行连接.</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT a.name AS &#39;部门名&#39;, b.name AS &#39;上级部门&#39; FROM sys_department a ,sys_department b WHERE a.parent_id &#x3D; b.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="外连接-左外连接-LEFT-JOIN"><a href="#外连接-左外连接-LEFT-JOIN" class="headerlink" title="外连接-左外连接(LEFT  JOIN)"></a>外连接-左外连接(LEFT  JOIN)</h3><ul><li>LEFT JOIN</li><li>LEFT OUTER JOIN</li><li>只有形式不一样。left join 是 left outer join 的简写，两者含义一样的。</li><li>左外连接 &#x3D; 左表全部记录 + 右表相关联记录</li></ul><h3 id="外连接-右外连接-RIGHT-JOIN"><a href="#外连接-右外连接-RIGHT-JOIN" class="headerlink" title="外连接-右外连接(RIGHT JOIN)"></a>外连接-右外连接(RIGHT JOIN)</h3><ul><li>RIGHT JOIN</li><li>RIGHT OUTER JOIN</li><li>有形式不一样。left join 是 left outer join 的简写，两者含义一样的。</li><li>右外连接 &#x3D; 右表全部记录 + 左表相关联记录</li></ul><h3 id="外连接-全外连接-不支持"><a href="#外连接-全外连接-不支持" class="headerlink" title="外连接-全外连接(不支持)"></a>外连接-全外连接(不支持)</h3><ul><li>mysql不支持全外连接。</li><li>全外连接 &#x3D; 【左有右没有的记录】 + 【右有左没有的记录】 + 【两张表的交集记录】</li></ul><h3 id="内连接-JOIN-x2F-INNER-JOIN"><a href="#内连接-JOIN-x2F-INNER-JOIN" class="headerlink" title="内连接(JOIN &#x2F; INNER JOIN)"></a>内连接(JOIN &#x2F; INNER JOIN)</h3><ul><li>JOIN</li><li>INNER JOIN</li><li>join 是 inner join 的缩写</li><li>内连接 &#x3D; 两张表的交集记录</li></ul><h3 id="交叉连接-CROSS-JOIN"><a href="#交叉连接-CROSS-JOIN" class="headerlink" title="交叉连接(CROSS JOIN)"></a>交叉连接(CROSS JOIN)</h3><ul><li>CROSS JOIN</li><li>交叉连接 &#x3D; 笛卡尔积</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="mysql的连接查询.assets/image-20220831210715528-16671893143505.png" alt="image-20220831210715528" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql的连接查询&quot;&gt;&lt;a href=&quot;#mysql的连接查询&quot; class=&quot;headerlink&quot; title=&quot;mysql的连接查询&quot;&gt;&lt;/a&gt;mysql的连接查询&lt;/h2&gt;&lt;h3 id=&quot;笛卡尔集&quot;&gt;&lt;a href=&quot;#笛卡尔集&quot; class=&quot;head</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="join" scheme="https://zspcer.gitee.io/tags/join/"/>
    
  </entry>
  
  <entry>
    <title>mysql的SQL优化实战</title>
    <link href="https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84SQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/"/>
    <id>https://zspcer.gitee.io/note/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/mysql%E7%9A%84SQL%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</id>
    <published>2023-01-12T09:36:46.503Z</published>
    <updated>2023-01-12T09:36:46.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的SQL优化实战"><a href="#mysql的SQL优化实战" class="headerlink" title="mysql的SQL优化实战"></a>mysql的SQL优化实战</h1><p>以下是公司实际业务上的SQL调优实战</p><h2 id="金铎项目"><a href="#金铎项目" class="headerlink" title="金铎项目"></a>金铎项目</h2><p>金铎项目是一个异常汇总平台，属于半路接手的项目，其中有很多sql都是比较复杂的，可读性差，维护性差，正好拿来练练手</p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p>一下是涉及的相关表结构</p><h4 id="amp-event-log"><a href="#amp-event-log" class="headerlink" title="amp_event_log"></a>amp_event_log</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_event_log<span class="token punctuation">(</span>    id                         <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    event_id                   <span class="token keyword">bigint</span>                             <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件ID'</span><span class="token punctuation">,</span>    event_code                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件代码'</span><span class="token punctuation">,</span>    event_name                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件名称'</span><span class="token punctuation">,</span>    exception_subject          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常主体'</span><span class="token punctuation">,</span>    monitor_object_name        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'监控对象名称'</span><span class="token punctuation">,</span>    process_status             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理状态'</span><span class="token punctuation">,</span>    happen_time                <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'发生时间'</span><span class="token punctuation">,</span>    exception_level            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常等级'</span><span class="token punctuation">,</span>    event_detail               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'事件详情'</span><span class="token punctuation">,</span>    last_event_id              <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'上一级事件id'</span><span class="token punctuation">,</span>    timeout                    <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'超时时间'</span><span class="token punctuation">,</span>    version                    <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'版本'</span><span class="token punctuation">,</span>    push_user                  <span class="token keyword">text</span>                               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送对象'</span><span class="token punctuation">,</span>    is_push                    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否推送'</span><span class="token punctuation">,</span>    process_user               <span class="token keyword">text</span>                               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理对象'</span><span class="token punctuation">,</span>    actual_process_user        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'实际处理人'</span><span class="token punctuation">,</span>    feedback_duty_organization <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'反馈责任组织'</span><span class="token punctuation">,</span>    feedback_process_results   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'反馈处理结果'</span><span class="token punctuation">,</span>    feedback_note              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'具体原因'</span><span class="token punctuation">,</span>    start_process_time         <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'开始处理时间'</span><span class="token punctuation">,</span>    end_process_time           <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'结束处理时间'</span><span class="token punctuation">,</span>    reason                     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'原因'</span><span class="token punctuation">,</span>    create_time                <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    detail_url                 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8mb4       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'明细路径'</span><span class="token punctuation">,</span>    is_transfer                <span class="token keyword">bigint</span>   <span class="token keyword">default</span> <span class="token number">0</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否转办 0：否 ，1：是'</span><span class="token punctuation">,</span>    transfer_user              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'转办人'</span><span class="token punctuation">,</span>    is_approve                 <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否审批 0:否 1:是'</span><span class="token punctuation">,</span>    process_opinion            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理意见'</span><span class="token punctuation">,</span>    evaluate                   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'评价'</span><span class="token punctuation">,</span>    approve_status             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人状态'</span><span class="token punctuation">,</span>    predict_improve_time       <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'预计改善时间'</span><span class="token punctuation">,</span>    approve_user               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人'</span><span class="token punctuation">,</span>    latest_improve_time        <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'最晚改善时间'</span><span class="token punctuation">,</span>    update_time                <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    actual_approve_user        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'实际审批人'</span><span class="token punctuation">,</span>    person_liable              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'责任人'</span><span class="token punctuation">,</span>    improve_plan               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>                      <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'改善方案'</span><span class="token punctuation">,</span>    predict_improve_target     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'预计改善目标'</span><span class="token punctuation">,</span>    prov                       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'省'</span><span class="token punctuation">,</span>    city                       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'城市'</span><span class="token punctuation">,</span>    transfer_time              <span class="token keyword">datetime</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'转办时间'</span><span class="token punctuation">,</span>    feedback_process_images    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'现场处理图片'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'异常事件记录表'</span> <span class="token keyword">collate</span> <span class="token operator">=</span> utf8mb4_bin<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_actualuser_status    <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>actual_process_user<span class="token punctuation">,</span> process_status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_approve_status_actual_approve_user    <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>approve_status<span class="token punctuation">,</span> actual_approve_user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_city_happen_time    <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>city<span class="token punctuation">,</span> happen_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_code    <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>event_code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_id    <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>event_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_exception_subject    <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>exception_subject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_happendtime    <span class="token keyword">on</span> amp_event_log <span class="token punctuation">(</span>happen_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="amp-site"><a href="#amp-site" class="headerlink" title="amp_site"></a>amp_site</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_site<span class="token punctuation">(</span>    id            <span class="token keyword">bigint</span>       <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点名字'</span><span class="token punctuation">,</span>    area          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    center_area   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    province      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属省'</span><span class="token punctuation">,</span>    business_area <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属的大区（浙北区）'</span><span class="token punctuation">,</span>    city          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属城市'</span><span class="token punctuation">,</span>    county        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'站点所属区'</span><span class="token punctuation">,</span>    sfcode        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'大网code'</span><span class="token punctuation">,</span>    sf_site       <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'1是0否'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> amp_site_name_index    <span class="token keyword">on</span> amp_site <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="amp-event"><a href="#amp-event" class="headerlink" title="amp_event"></a>amp_event</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> amp_event<span class="token punctuation">(</span>    id                   <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'id'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    updator              <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'修改人'</span><span class="token punctuation">,</span>    update_time          <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>    create_time          <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    event_code           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常代码'</span><span class="token punctuation">,</span>    event_name           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'名字'</span><span class="token punctuation">,</span>    monitor_id           <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'监控对象id'</span><span class="token punctuation">,</span>    is_external          <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否外部渠道接入'</span><span class="token punctuation">,</span>    <span class="token keyword">rule</span>                 <span class="token keyword">text</span>                         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'触发规则'</span><span class="token punctuation">,</span>    message              <span class="token keyword">text</span>                         <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'消息详情'</span><span class="token punctuation">,</span>    upgrade_rule         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'升级规则'</span><span class="token punctuation">,</span>    exception_level      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'异常等级'</span><span class="token punctuation">,</span>    reason               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'原因'</span><span class="token punctuation">,</span>    process_time         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理时效'</span><span class="token punctuation">,</span>    process_cycle        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理周期'</span><span class="token punctuation">,</span>    duty_organization_id <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'责任组织id'</span><span class="token punctuation">,</span>    deal_organization_id <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理组织id'</span><span class="token punctuation">,</span>    valid_time           <span class="token keyword">datetime</span>                     <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'有效时间'</span><span class="token punctuation">,</span>    version              <span class="token keyword">bigint</span> <span class="token keyword">default</span> <span class="token number">1001</span>          <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'版本号'</span><span class="token punctuation">,</span>    is_history           <span class="token keyword">bigint</span> <span class="token keyword">default</span> <span class="token number">0</span>             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否历史版本:0否,1是'</span><span class="token punctuation">,</span>    detail_url           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8mb4 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'明细路径'</span><span class="token punctuation">,</span>    push_frequency       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送频率 天 ,周，双周，月'</span><span class="token punctuation">,</span>    push_day             <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送日期'</span><span class="token punctuation">,</span>    latest_improve_day   <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'最晚改善时间(天)'</span><span class="token punctuation">,</span>    is_approve           <span class="token keyword">bigint</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否审批 0:否 1:是'</span><span class="token punctuation">,</span>    approve_user         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'审批人'</span><span class="token punctuation">,</span>    rule_explain         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3072</span><span class="token punctuation">)</span>                <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'规则说明'</span><span class="token punctuation">,</span>    push_job_id          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'推送岗位ID'</span><span class="token punctuation">,</span>    process_job_id       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>                 <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'处理岗位id'</span><span class="token punctuation">,</span>    franchise_fee        <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>               <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'加盟商收入'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'异常事件表'</span> <span class="token keyword">collate</span> <span class="token operator">=</span> utf8mb4_bin<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_dealorganizationid    <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>deal_organization_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_dutyorganizationid    <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>duty_organization_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_event_code_version    <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>event_code<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_monitorid    <span class="token keyword">on</span> amp_event <span class="token punctuation">(</span>monitor_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化SQL一"><a href="#优化SQL一" class="headerlink" title="优化SQL一"></a>优化SQL一</h3><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>process_status <span class="token keyword">AS</span> <span class="token keyword">STATUS</span><span class="token punctuation">,</span>       <span class="token function">count</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>id<span class="token punctuation">)</span>         cnt<span class="token keyword">FROM</span> amp_event_log t1         <span class="token keyword">JOIN</span>     <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span>      <span class="token keyword">from</span> amp_site      <span class="token keyword">where</span> sf_site <span class="token operator">=</span> <span class="token number">0</span>     <span class="token punctuation">)</span> t3     <span class="token keyword">ON</span> t3<span class="token punctuation">.</span>NAME <span class="token operator">=</span> t1<span class="token punctuation">.</span>exception_subject         <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> event_code<span class="token punctuation">,</span>           deal_organization_id    <span class="token keyword">FROM</span> amp_event    <span class="token keyword">WHERE</span> is_history <span class="token operator">=</span> <span class="token number">0</span>      <span class="token operator">AND</span> deal_organization_id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">)</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>event_code <span class="token operator">=</span> t2<span class="token punctuation">.</span>event_code<span class="token keyword">where</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>happen_time <span class="token operator">>=</span> <span class="token string">'2022-1-6 11:34:42'</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>happen_time <span class="token operator">&lt;=</span> <span class="token string">'2023-1-6 11:34:42'</span>  <span class="token operator">and</span> t1<span class="token punctuation">.</span>city <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'宁波市'</span><span class="token punctuation">,</span>                  <span class="token string">'广州市'</span><span class="token punctuation">,</span>                  <span class="token string">'杭州市'</span><span class="token punctuation">,</span>                  <span class="token string">'深圳市'</span><span class="token punctuation">,</span>                  <span class="token string">'温州市'</span><span class="token punctuation">,</span>                  <span class="token string">'湖州市'</span><span class="token punctuation">,</span>                  <span class="token string">'绍兴市'</span><span class="token punctuation">,</span>                  <span class="token string">'重庆市'</span><span class="token punctuation">,</span>                  <span class="token string">'金华市'</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> process_status<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="初始执行计划"><a href="#初始执行计划" class="headerlink" title="初始执行计划"></a>初始执行计划</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+-----------------------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys                                                                                   <span class="token operator">|</span> <span class="token keyword">key</span>                   <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span>  <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra                                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+-----------------------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> amp_event <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> idx_dealorganizationid<span class="token punctuation">,</span>idx_event_code_version                                                   <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">8</span> <span class="token operator">|</span>    <span class="token number">12.50</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> amp_site  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>  <span class="token operator">|</span> amp_site_name_index                                                                             <span class="token operator">|</span> <span class="token boolean">NULL</span>                  <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">56586</span> <span class="token operator">|</span>    <span class="token number">10.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">join</span> buffer <span class="token punctuation">(</span>Block Nested <span class="token keyword">Loop</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> t1        <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_happendtime<span class="token punctuation">,</span>idx_actualuser_status<span class="token punctuation">,</span>idx_event_code<span class="token punctuation">,</span>idx_city_happen_time<span class="token punctuation">,</span>idx_exception_subject <span class="token operator">|</span> idx_exception_subject <span class="token operator">|</span> <span class="token number">2051</span>    <span class="token operator">|</span> func <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">25.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> condition<span class="token punctuation">;</span> <span class="token keyword">Using</span> <span class="token keyword">where</span>                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+-----------------------+---------+------+-------+----------+----------------------------------------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">warnings</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分析语句"><a href="#分析语句" class="headerlink" title="分析语句"></a>分析语句</h4><p>Using where; Using temporary; Using filesort</p><p>Using where; Using join buffer (Block Nested Loop)</p><p>Using index condition; Using where</p><ul><li><p>Using temporary</p><ul><li><code>group by</code> 语句一般会使用内部临时表，因为需要使用内部临时表存储数量；</li><li>一般情况下<code>group by</code>都是会使用临时表的，但是再<code>有些业务场景</code>下，也是可以优化成不用临时表的，所以效率会更高</li><li>【优化点一】：是否可以将这个 group by 语句取消使用内部临时表</li></ul></li><li><p>Using filesort</p><ul><li>group by 分组后默认自然顺序排序，如果不需要排序，可以改成：order by null；（8.0版本group by已经不会排序了）</li><li>所以可以根据具体的业务场景看，是否需要排序</li><li>【优化点二】：group by 语句是否可以不需要排序</li></ul></li><li><p>Using join buffer (Block Nested Loop)</p><ul><li><p>使用了join语句，而且是BNL算法，效率很低，首先看这个语句是否可以不用join</p></li><li><p>【优化点三】：是否可以避免join？从业务代码的角度进行优化？</p></li><li><p>如果join优化不了，是否可以将BNL算法优化成NLJ（BKA算法）</p></li><li><p>【优化点四】：是否可以将BNL算法优化成NLJ（BKA算法）</p></li><li><p>但是呢，即使使用了NLJ（BKA算法），效率还是不如hash-join（mysql8.0支持hash-join，效率高）</p></li><li><p>【优化点五】：是否可以通过业务代码实现hash-join</p></li></ul></li></ul><p>初次分析结论如上，先进行优化一波</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的SQL优化实战&quot;&gt;&lt;a href=&quot;#mysql的SQL优化实战&quot; class=&quot;headerlink&quot; title=&quot;mysql的SQL优化实战&quot;&gt;&lt;/a&gt;mysql的SQL优化实战&lt;/h1&gt;&lt;p&gt;以下是公司实际业务上的SQL调优实战&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="数据库" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MYSQL" scheme="https://zspcer.gitee.io/categories/JAVA/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL/"/>
    
    
    <category term="mysql" scheme="https://zspcer.gitee.io/tags/mysql/"/>
    
    <category term="SQL优化" scheme="https://zspcer.gitee.io/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
    <category term="性能调优" scheme="https://zspcer.gitee.io/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
    <category term="调优" scheme="https://zspcer.gitee.io/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>快速排序算法</title>
    <link href="https://zspcer.gitee.io/note/ALGORITHM/SORT/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://zspcer.gitee.io/note/ALGORITHM/SORT/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-01-12T09:36:46.502Z</published>
    <updated>2023-01-12T09:36:46.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速排序算法&quot;&gt;&lt;a href=&quot;#快速排序算法&quot; class=&quot;headerlink&quot; title=&quot;快速排序算法&quot;&gt;&lt;/a&gt;快速排序算法&lt;/h1&gt;</summary>
      
    
    
    
    <category term="ALGORITHM" scheme="https://zspcer.gitee.io/categories/ALGORITHM/"/>
    
    <category term="SORT" scheme="https://zspcer.gitee.io/categories/ALGORITHM/SORT/"/>
    
    
    <category term="算法" scheme="https://zspcer.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="https://zspcer.gitee.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="快速排序" scheme="https://zspcer.gitee.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>spring的事务生效条件</title>
    <link href="https://zspcer.gitee.io/note/JAVA/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6/%E3%80%90spring%E3%80%91spring%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%94%9F%E6%95%88%E6%9D%A1%E4%BB%B6/"/>
    <id>https://zspcer.gitee.io/note/JAVA/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6/%E3%80%90spring%E3%80%91spring%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%94%9F%E6%95%88%E6%9D%A1%E4%BB%B6/</id>
    <published>2023-01-12T09:36:46.502Z</published>
    <updated>2023-01-12T09:36:46.502Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://blog.csdn.net/XiaoWenJava123/article/details/102776574">https://blog.csdn.net/XiaoWenJava123/article/details/102776574</a></p><p>同一个类中，没有事务的方法调用有事务的方法，事务会生效吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//方法A没有事务，调用有事务的方法B</span>        <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答：不会生效。</p><p>原因：</p><ul><li>spring 在扫描bean的时候会扫描方法上是否包含@Transactional注解。</li><li>如果包含，spring会为这个bean动态地生成一个子类（即代理类，proxy），代理类是继承原来那个bean的。</li><li>此时，当这个有注解的方法被调用的时候，实际上是由代理类来调用的，代理类在调用之前就会启动事务。</li><li>然而，如果这个有注解的方法是被同一个类中的其他方法调用的，那么该方法的调用并没有通过代理类，所以就不会启动事务。</li></ul><p>解决的方法就简单了：</p><p>1、将被调用的本类方法重新从Spring中获取</p><p>2、在Application上加注解：@EnableAspectJAutoProxy(proxyTargetClass &#x3D; true, exposeProxy &#x3D; true)解决同类方法调用时异步和事务不生效：</p><p>3、还有一种开启类的事物（不认为是个合理的解决方案）</p><p>方法不是public修饰，因为Spring代理是Cglib,是生成一个子类去调用的，子类没有父类的非public方法，自然不会有事务产生</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文章：&lt;a href=&quot;https://blog.csdn.net/XiaoWenJava123/article/details/102776574&quot;&gt;https://blog.csdn.net/XiaoWenJava123/article/details/102776</summary>
      
    
    
    
    <category term="JAVA" scheme="https://zspcer.gitee.io/categories/JAVA/"/>
    
    <category term="SSM三大框架" scheme="https://zspcer.gitee.io/categories/JAVA/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="spring" scheme="https://zspcer.gitee.io/tags/spring/"/>
    
    <category term="事务" scheme="https://zspcer.gitee.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
</feed>
