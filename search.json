[{"url":"/note/JAVA/面试/儒猿面经/儒猿面经汇总/","content":"## [面经汇总](https://github.com/huangfeiyuCoder/JavaMianShi/tree/main/面经汇总)/[儒猿面经广告鸡汤](https://github.com/huangfeiyuCoder/JavaMianShi/tree/main/面经汇总/儒猿面经广告鸡汤)/**广深中小厂面经验**\n\n|      | 顺丰-1面：                                                   |\n| ---- | ------------------------------------------------------------ |\n|      | 1\t项目中有什么难点？                                      |\n|      | 2\tRedis用来做了些什么？                                   |\n|      | 3\tRedis的做布隆过滤器是怎么玩的？                         |\n|      | 4\t使用Redis时，怎么考虑用哪种类型？                       |\n|      | 5\tRedis为什么快？                                         |\n|      | 6\tRedis内部实现的大致原理是什么？                         |\n|      | 7\tRedis的高可用怎么保证？                                 |\n|      | 8\t怎么保证MQ消费幂等性？                                  |\n|      | 9\t怎么实现消息的有序性？                                  |\n|      | 10\t怎么保证MQ的可靠性投递？                               |\n|      | 11\t怎么解决MQ的积压问题？ （在消费者不扩容的前提下怎么解决？） |\n|      | 12\tA系统同时给B系统分别发送2个请求（先insert请求后update请求），B有部署两个节点，你怎么保证在B系统的两个节点上执行是有序的？ |\n|      | 13\t讲讲Java中的集合，并发，Queue队列相关的东西。          |\n|      | 14\tSpring中的生命周期？                                   |\n|      | 15\tSPring中是怎么实现事务的？                             |\n|      | 16\t如果要对线上某个表的一个字段长度扩容，你会考虑什么？   |\n|      | 17\tQPS1万+的查询接口你怎么设计？                          |\n|      | 18\tQPS1万+的有状态接口你怎么设计？                        |\n|      | 。。。其他的忘了，反正都是一些常见的问题                     |\n|      |                                                              |\n|      | 顺丰-2面：                                                   |\n|      | 1\t介绍项目业务？                                          |\n|      | 2\t怎么保证上下游系统间数据的一致性?                       |\n|      | 3\t怎么保证数据的幂等性？ 如何利用tokenID来实现幂等？      |\n|      | 4\t你们用Redis干些什么？                                   |\n|      | 5\t如果Redis挂了，怎么办？（从降级，限流，快速恢复角度去答） |\n|      | 6\tRedis脑裂咋办？                                         |\n|      | 7\t如果Redis集群中一个节点挂了，怎么保证高可用？ （问题有点模糊） |\n|      | 8\tRedis的分配一致性哈希算法？怎么解决的数据倾斜问题？     |\n|      | 9\tJDK里面有哪些引用关系？（强，软，弱引用，以及使用场景上回答） |\n|      | 10\tFullGC和OOM溢出有啥关系？                              |\n|      | 11\t有遇到过OOM嘛？怎么解决的？                            |\n|      | 12\t讲讲JVM哪些区域里会发生OOM，在代码中应该如何避免？     |\n|      | 13\t高并发下对MySQL的表结构设计，好操作时，要注意些什么？  |\n|      | 14\t（我主要是从事务粒度，锁粒度，扫描行数，是否走索引来回答） |\n|      |                                                              |\n|      | 顺丰HR-3面：                                                 |\n|      | 反正就是一些常见没有意义的题                                 |\n|      | 问期望工资                                                   |\n|      | 优缺点                                                       |\n|      | 沟通情况等等                                                 |\n|      |                                                              |\n|      | YY直播-1面：                                                 |\n|      | 1\tNetty 的粘包拆包方法有哪些？                            |\n|      | 2\tKafak的 broker是什么？                                  |\n|      | 3\tRedis分布式锁，怎么实现可重入锁？                       |\n|      | 4\tRedis，Hash，List，Set分别对应的底层数据结构？          |\n|      | 5\t了解意向锁嘛？                                          |\n|      | 6\t什么是覆盖索引，什么是索引下推？                        |\n|      | 7\t什么是redoLog日志？                                     |\n|      | 8\t说说RedoLog日志和Binlog日志的怎么使用?                  |\n|      | 9\t什么是MVCC机制？                                        |\n|      | 10\t讲讲红黑二叉树？                                       |\n|      | 11\t怎么排查线上实例CPU飙高的问题？                        |\n|      | 12\tJVM参数配置需要注意一些什么？                          |\n|      | 13\t为什么堆大堆小内存要设置一样？                         |\n|      |                                                              |\n|      | YY直播-2面：                                                 |\n|      | 1.你们布隆过滤器怎么实现的？                                 |\n|      | 2.怎么在BitMap上解决哈希冲突问题的？                         |\n|      | 3.为什么不直接用Order作为Key，直接以KV形式存储在Redis里面？（占内存） |\n|      | 4.Redis用的什么集群？Redis有做读写分离吗？                   |\n|      | 5.怎么利用Redis做的MQ幂等性？                                |\n|      | 6.怎么利用Redis来设计每日热搜排行榜？                        |\n|      | 7.Redis分布式锁有几种实现方式？                              |\n|      | 8.Redission底层是怎么实现分布式锁的？                        |\n|      | 9.Java中Syncroinze锁和ReenTrantLock有什么区别，底层怎么实现的？ |\n|      | 10.问几个Linux命令：（都没答上来）                           |\n|      | 怎么查询IO磁盘占用了多少？                                   |\n|      | 怎么查询内存占用多少？                                       |\n|      | 怎么查询CPU占用？                                            |\n|      | 怎么查询网络连接占用多少？                                   |\n|      | 11.怎么利用MySQL实现分布式锁？                               |\n|      | 12.MySQL建表的时候，你要考虑一些什么？                       |\n|      | （字段类型，长度，索引设计，null值，编码等去聊）             |\n|      | 13.设计题：有20个群，大概每个群1万人，需要在15-16点的时候，会在群里的右下角展示一个图片，图片中🈶投票按钮，和显示 “已投人数”，投完票后显示本群已投票的人名榜，按住投票先后排序。 这个你怎么设计？ |\n|      |                                                              |\n|      | 。。。。二面后挂了：面试评价：Java基础较好，但是Linux知识比较差，因此知识面不广。 |\n|      |                                                              |\n|      |                                                              |\n|      | 富途-1面：                                                   |\n|      | 1\t浏览器发起请求后经历了哪些过程？                        |\n|      | 2\tHTTP由哪些部分组成？                                    |\n|      | 3\t三次握手四次挥手分别传递了什么信息？                    |\n|      | 4\tHTTPS协议的区别？ 对称加密先做了非对称加密？            |\n|      | 5\t一个SQL查询题？                                         |\n|      | 6\t一个SQL表设计题？                                       |\n|      | 7\t一个场景提？                                            |\n|      | 8\t一个字符串解析题，需要用到递归去实现。                  |\n|      | 9\t一个级联关系的JSON，怎么解析，据说在什么加密算法里有使用到？ |\n|      | 。。。其他的忘了，反正前前后后面了一个小时                   |\n|      |                                                              |\n|      | 富途-2面：                                                   |\n|      | 1.有AB两个数组，判断B是否为A的子集。（编码题）               |\n|      | 2.一副扑克牌，没有大小王一共52张，从里面随机抽2张，问抽到颜色相等的概率是多少。（算术，思维题） |\n|      | 3.一堆桃子分给一群猴子，如果每个猴子分3个，还剩59个；如果每个猴子分5个，那么最后一个猴子分得的桃子不够3个，你能求出有几只猴子，几个桃子吗？（思维题） |\n|      | 4.事务的四个特性？分别解释一下四个特性                       |\n|      | 5.事务怎么实现的？Spring里面又是怎么实现的？                 |\n|      | 6.TCP协议的三次握手                                          |\n|      | 7.TCP以及握手中发送了什么信息                                |\n|      | 8.如果利用第三次握手后如果没有返回服务端，会发生什么？       |\n|      |                                                              |\n|      | 。。。面完后挂了：算法写出来了，数学题没做出来。             |\n|      |                                                              |\n|      | 朴朴买菜-1面：                                               |\n|      | 1\t熟悉线程、线程池的参数使用以及原生线程池的一些问题      |\n|      | 2\t了解synchronized，了解锁优化，了解voliate，lock的底层原理 |\n|      | 3\t了解jvm的原理，对jvm做的调优，比如导致数据场景，调大新生代，避免对象今早进入老年代 |\n|      | 4\t使用过工具分析过dump文件                                |\n|      | 5\t了解数据库索引结构、知道聚集索引，非聚集索引，了解索引下推，b+树结构等 |\n|      | 6\t会使用explain分析慢sql，遇到过隐式转换导致索引失效      |\n|      | 7\tredis这块用过分布式锁，用过sortedset（主要拿来排序，场景是延时队列，不是常见的redis延时队列方案），使用过bitmap，配合lua脚本实现限流 |\n|      | 8\tmq使用简单了解，知道消费不丢，了解顺序消费，了解幂等消费方案。 |\n|      |                                                              |\n|      |                                                              |\n|      | 朴朴买菜-2面：                                               |\n|      | 1\t如何解决系统调用时数据的一致性问题。                    |\n|      | 2\t刷数据问题：要求使用time_update更新，避免漏数据。刚好在分页节点，多条记录time_update 一样的时候，使用id排序做游标, 包括深分页的优化。 |\n|      | 3\t上述业务有无其他方案，能想到消息的方式，但是觉得过度设计，宁愿这种耦合。 |\n|      | 4\t对DDD、领域事件有基本了解                               |\n|      | 5\t接口优化，线程池、事物粒度等角度讲。                    |\n|      | 6\t有个特别的设计：开票二维码的code，有自定义的规则判断是否有效，避免无效请求。 |\n|      | 7\t按照场景提前加载缓存。穿透问题有考虑，方案只是使用了单机线程池，流控方面比较缺少 |\n|      | 8\t固定窗口、滑动窗口等方案了解，面试过程能细的讲滑动窗口的自定义实现（数据结构不优） |\n|      | 9\t压测方案怎么指定？解读和场景方面缺少。                  |\n|      | 。。。其他的忘了，反正前前后后面了一个小时                   |\n|      |                                                              |\n|      | 朴朴买菜-HR面：                                              |\n|      | 问为啥离职，介绍深圳计算团队，是做供应链的，人数就几十个人，然后直接 |\n|      | 谈工资，谈期权。（社保低，公积金高）                         |\n|      |                                                              |\n|      | 玄武科技-1面：                                               |\n|      | 1\t聊聊JVM虚拟机                                           |\n|      | 2\t聊聊JVM内存模型，GC，对象回收算法。                     |\n|      | 3\t聊聊Java中的多线程要考虑的问题？（原子性，隔离性，有序性，从这三方面去切入） |\n|      | 4\t聊聊java中为了解决线程安全的东西，锁，队列，volatile，安全容器，原子变量等等。 |\n|      | 5\t聊聊Jvm的类加载，对象创建，Javac,类加载器，双亲委派，JavaAgent动态代理，cglib动态代理从这些去聊） |\n|      | 6\t聊聊Java中的IO模型，AIO，BIO，NIO。这些。               |\n|      | 7\t了解Netty底层的实现吗?聊聊多路复用，React模型，select，poll,epoll模型。 |\n|      | 8\t聊聊Spring中的东西，IOC,DI,AOP这些。                    |\n|      | 9\t聊聊SpringBoot里面是怎么设计的，SPI机制，start怎么实现的，那一堆吧。 |\n|      | 10\t聊聊SpringBoot中内嵌的Tomcat，和Jetty有什么区别？      |\n|      | 11\t聊聊Innodb中的索引结构。                               |\n|      | 12\t聊聊SQL优化时，和建表时需要注意哪些。（建表时，select查询时，修改插入时， 从这几方面切入） |\n|      | 13\tCodeReview时，你会注意哪些方面？（可读性，拓展性，性能 从这三面去总结） |\n|      | 14\t聊聊你知道哪些设计原则，开发时是怎么体现的？：（单一，开闭，里氏替换原则） |\n|      | 15\t聊聊TCP为啥时可靠性传输？                              |\n|      | 16\t为啥TCP连接时要三次握手，断开时需要四次握手?           |\n|      |                                                              |\n|      | 玄武科技-2面：                                               |\n|      | 1\t问了一下项目业务？                                      |\n|      | 2\t有哪些难点？                                            |\n|      | 3\t介绍一下分库分表过程是怎么实现的？                      |\n|      | 4\t讲讲你做了哪些技术方案？                                |\n|      | 5\t讲讲GetWay的原理？                                      |\n|      | 6\t如何设计一个高并发的系统？                              |\n|      | 7\tRocketMQ的底层实现？                                    |\n|      | 8\t。。。反正正常是面过了，但是面试官的结论，基础好，深度意识可以，就是缺少高并发的场景。 |\n|      | 玄武科技HR-3面                                               |\n|      | 期望薪资？                                                   |\n|      | 为什么想来广州？                                             |\n|      | 自己擅长什么？                                               |\n|      | 基本上就是闲聊？                                             |\n|      |                                                              |\n|      |                                                              |\n|      | 奇虎360-1面：                                                |\n|      | 1\tsynchronized的底层原理                                  |\n|      | 2\t什么是内存逃逸分析？                                    |\n|      | 3\tvolatile的底层原理                                      |\n|      | 4\tAQS底层原理                                             |\n|      | 5\t用了哪些NoSQL数据库，为啥要用Mongodb不用MySQL。         |\n|      | 6\t你们CodeReview会注意哪些？                              |\n|      | 7\t你们采用敏捷开发模式，是怎么去推动？                    |\n|      | 8\t有没有遇到过那种迭代穿插进行的时候？                    |\n|      | 9\t你们Excel导入是怎么优化的？                             |\n|      | 10\tRedis怎么实现的项目重启保证幂等性问题？                |\n|      | 11\t有哪些JVM调优的经历？                                  |\n|      | 12\tJVM调优有哪些参考指标？                                |\n|      | 13\tG1和CMS回收器有什么不同？                              |\n|      | 14\t你们那边网络安全是怎么保证的？                         |\n|      | 15\t你知道哪些网络安全漏洞？                               |\n|      | 16\t对下一个公司有什么期盼？                               |\n|      | 17\t有干了哪些开源的事情？                                 |\n|      | 。。。面过了，后面问我现在的工资和期盼，我拒绝，没告诉他，感觉他不是leader，只是处于好奇问的。 |\n|      |                                                              |\n|      | 奇虎360-2面：                                                |\n|      | 上次Log4J的安全问题有了解吗？是怎么实现的线程不安全？        |\n|      | 还有个什么场景题？我给忘了？                                 |\n|      | 介绍了一下项目                                               |\n|      | 怎么保证请求的有序性？                                       |\n|      | 其他：                                                       |\n|      | 据说第一面评价说技术OK，所以就没多问技术方面的问题了，介绍了他们公司的情况。 |\n|      | 据说这个他们项目组是去年被360收购的公司，组织架构现在是360集团，行政福利都一样，只是现在还没搬到广州总部一起办公，属于游离状态。 |\n|      |                                                              |\n|      | 奇虎360-3面：                                                |\n|      | 目前还没约面，Boss特意给我打了个电话，因为Boss在深圳被隔离起来，无法现场面对面交流。 |\n|      | Boss说后面有时间再约我，感觉他们也不着急的样子。而且他们技术团队只有二十多人，是去年新收购的，目前还没有和360总部的在一起办公，目前是属于自己管自己，但是组织架构和福利待遇和360总部保持一致。 |\n|      |                                                              |\n|      | 致景科技-1面：                                               |\n|      | 1\tSQL调优有哪些？                                         |\n|      | 2\t讲讲并发线程安全？（多节点线程安全&单系统中的线程安全） |\n|      | 3\t讲讲负责的系统业务？                                    |\n|      | 4\t讲讲分布式锁的实现？如果获取锁失败怎么办？              |\n|      | 5\t讲讲Redis限流怎么实现的？（固定窗口+弊端）              |\n|      | 6\t分库分表你们是怎么做的？（调研+方案+上线+数据迁移+测试） |\n|      | 7\t对未来的规划？                                          |\n|      | 致景科技-2面：                                               |\n|      | 要我去线下面试，放他鸽子了。。                               |\n|      |                                                              |\n|      | 三七互娱-1面：                                               |\n|      | 问了一下大数据相关的东西，什么数据建模之类的，基本上都是经验输出，没有问太多八股文 |\n|      | 基本上是问的一些开发思想，规约，建设，感觉面试官不是做Java开发的 |\n|      |                                                              |\n|      | 三七互娱-2面：                                               |\n|      | 1\t你们的迭代是怎么跑的？                                  |\n|      | 2\t怎么JVM调优？                                           |\n|      | 3\tOOM问题，你们是怎么解决的，有考虑过这个NIO框架里为啥会OOM嘛？ |\n|      | 4\tFile文件压缩工具怎么做优化？用到了NIO中的哪个特性？     |\n|      | 5\t什么是零拷贝？                                          |\n|      | 6\t你们为什么要重构？怎么做重构的？怎么保证重构后的新老服务无缝对接？ |\n|      | 7\t针对一些C端APP，不改变接口的情况下，如何切换新老服务？（反向代理，网关，IP切换等） |\n|      | 8\t如何实现重构后的AB（灰度发布）发布？                    |\n|      | 9\t你们是如何管理开发，测试，线上不同环境的？              |\n|      | 10\t如何管理代码分分支的？（Gitflow？）                    |\n|      | 11\t系统部署环境是你们整的嘛？ （用的Jenkins,脚本是运维写的） |\n|      | 12\t为何要自己搭一套FastDFS？                              |\n|      | 13\t讲讲线上SQL事故，为啥要弄Soar工具，有啥好处，比Expain分析工具好在哪里? |\n|      | 14\t最近做的一次技术分享是什么？                           |\n|      | 15\t为啥要用ES替代ADS？ （成本，场景）                     |\n|      | 16\t有做过大数据或者用户画像方面的系统吗？                 |\n|      | 17\t你们一般有哪些技术OKR？                                |\n|      | 18\t对加班有什么看法？                                     |\n|      |                                                              |\n|      | 广州三七互娱HR-3面：                                         |\n|      | 给了定级P5，年包34万左右，HR说1，2，4加班到九点              |\n|      | 做的是斗罗大陆，等游戏后台的营销，支付，等一个游戏平台部门， |\n|      | 工作内容：对接和开发占比 3：7， 平时可能回写写SDK之类的      |\n|      | 听做游戏开发的朋友说，三七互娱很卷，劝退。                   |\n|      |                                                              |\n|      | 格力电器-1面：                                               |\n|      | 1\t说说HashMap的底层数据结构？                             |\n|      | 2\tHashMap的扩容实现？                                     |\n|      | 3\tHashMap出现线程不安全的原因？                           |\n|      | 4\t讲讲 并发包里熟悉哪些类？                               |\n|      | 5\t知道ReentrantLock底层是怎么实现的嘛？介绍一下里面的CHL队列？ |\n|      | 6\t讲讲NIO，BIO，AIO的区别？                               |\n|      | 7\t讲讲BIO是在哪个阶段发生了阻塞？ 用户空间-内核空间的哪个阶段阻塞？ |\n|      | 8\t讲讲NIO的多路复用模型？                                 |\n|      | 9\tPoll，epoll的区别？ （轮询，通知，水平触发，边缘触发）  |\n|      | 10\t讲讲Redis和Nginx中的NIO实现嘛？（equeue,Event事件驱动等，多路复用模型等） |\n|      | 11\t你们Redis用的是什么集群？                              |\n|      | 12\tRedis Cluster集群部署时，Redis多主节点，是把Key落到Hash槽位中前，这个Hash值是在客户端算出来的还是在服务端算出来的？ |\n|      | 13\tRedis多节点要扩容时，是怎么实现的？                    |\n|      | 14\t讲讲Hash一致性算法？                                   |\n|      | 15\t一个API接口出现卡顿，你如何排查问题？ （监控判断瓶颈位置，如网关，第三方接口调用，慢SQL，锁超时等。JVM进程层面：判断是否发生了FullGC，是否有线程池配置不够等。Linux层面查看CPU占用，内存占用，网络阻塞情况等。） |\n|      | 16\t讲讲为啥用来Nginx还要用Getway网关，有啥区别？          |\n|      | 17\tGetWay出现了断言清空问题？你怎么排查？ （GetWay的自身Bug，他们遇到过） |\n|      | 18\tNginx怎么实现高可用？ （LVS前置负载均衡，SLB ，Nginx层层代理，但是有20%的性能损耗等） |\n|      | 19\t为啥要使用Nginx，为啥不直接挂Tomcat，这样就课没损耗了？ |\n|      | 20\t讲讲设计一个API接口，要注意哪些问题？                  |\n|      | 21\t怎么保证前端表单不会出现重复提交？ （表单不会被抓包抓到重复发送数据请求过去？） |\n|      | 22\t你们有哪些场景案例提升了接口的QPS？                    |\n|      |                                                              |\n|      | 格力电器-2面：                                               |\n|      | 1\t讲讲JVM？                                               |\n|      | 2\t你们JVM参数有哪些？为啥要这么设置？                     |\n|      | 3\t讲讲有哪些GC回收器？分别怎么用的？                      |\n|      | 4\t有哪些垃圾回收算法？                                    |\n|      | 5\tJVM参数模板上可以指定用哪种算法吗？                     |\n|      | 6\t做过哪些JVM调优？                                       |\n|      | 7\t用过哪些OOM排查工具，怎么排查的？                       |\n|      | 8\t用的阿里那套微服务框架嘛？ 对那个东西熟？               |\n|      | 9\t了解GetWay网关吗？                                      |\n|      | 10\t做过哪些QPS提升的东西？                                |\n|      | 11\t做过压力测试吗？                                       |\n|      | 12\t了解多少Redis？用的什么集群？                          |\n|      | 13\t知道Proxy集群模式吗？实现Redis代理的？                 |\n|      | 14\tMySQL的行级锁是怎么实现的？                            |\n|      | 15\tMySQL的事务是怎么实现的？                              |\n|      | 16\tBinLog日志有哪几种模式？statement模式，rows, statement+row结合 |\n|      | 17\tCancel有了解吗？ 他是用的哪种模式做的数据采集？        |\n|      | 。。。挂了，面试官是公司同事的朋友，不配来应聘他们的高级，他们要的能解决问题的能力，线上排查问题的能力，而不是单纯写业务，背八股文的。 |\n|      |                                                              |\n|      | 格力电器-HR面：                                              |\n|      | 1\t为什么离职？                                            |\n|      | 2\t对下个公司有什么期盼？                                  |\n|      | 3\t你在当前公司的职责是什么？                              |\n|      | 4\t你的身高体重，是否结婚？                                |\n|      | 5\t期望薪资                                                |\n|      | 6\t格力 电子商务公司 数字化互联网 转型，                   |\n|      | 7\t深圳：150人左右，开发事，电商，物流，仓储。             |\n|      | 8\t非深户 2档 ， 1万技术的10%公积金，合同主题 深圳艾维普公司，9-6点下半年 |\n|      | 后面有了想去的offer，就没面了。。                            |\n|      |                                                              |\n|      | 小鹏汽车-1面：                                               |\n|      | 1\t没问啥技术、都是问思想，开发意识等等                    |\n|      | 2\t基本上问你对项目的了解？                                |\n|      | 3\t部门的一些职责，规约，比较一些技术难点，和技术方案。    |\n|      | 小鹏汽车-2面：                                               |\n|      | 1\t和一面问的差不多，简单问了几个技术点，和算法设计        |\n|      | 2\t什么是BitMap的假阳性？                                  |\n|      | 3\t通用的导入导出方案是怎么玩的？                          |\n|      | 4\t有哪些不错的方案设计？对产品的熟悉度？                  |\n|      | 5\t怎么划分迭代的？未来的规划？                            |\n|      | 6\t平时怎么学习？                                          |\n|      | 7\t在技术方面有什么优势？                                  |\n|      | 小鹏汽车HR-3面：                                             |\n|      | 1\t为啥离职？                                              |\n|      | 2\t上一家公司为啥要回深圳？                                |\n|      | 3\t个人兴趣爱好等？                                        |\n|      | 4\t个人学习情况等？                                        |\n|      | 5\t讲解公司的待遇情况：                                    |\n|      |                                                              |\n|      |                                                              |\n|      | 欢聚集团-1面：                                               |\n|      | 1\tJava基础？                                              |\n|      | 2\tLua脚本使用固定窗口限流的算法？                         |\n|      | 3\t令牌桶算法，漏桶算法，滑动窗口算法？                    |\n|      | 4\t@Transiational事务注解的实现？                          |\n|      | 5\tJVM垃圾回收机制，线上排查经验？                         |\n|      | 6\t系统复杂度情况，有无异常应对场景？                      |\n|      | 7\t分布式ID生成方案，但对雪花算法的时间回拨问题没有解决方案 |\n|      | 。。。缺少电商，物流，等复杂系统的开发经验。面试的供应链部门 |\n|      | 欢聚ShopLine-1面：                                           |\n|      | 1\t没有自我介绍，直接先介绍项目？（感觉面试官一天面了很多人，部门专场面试） |\n|      | 2\t项目里面怎么保证数据的一致性？                          |\n|      | 3\t怎么保证订单消费的幂等性？                              |\n|      | 4\tRedis里用BitMap做订单存储，可以修改吗？                 |\n|      | 5\t怎么保证Redis里面的数据和MySQL里面的一致性？            |\n|      | 6\t利用每晚定时任务去维护BitMap里Order信息的完整性，如果在维护之前就有操作怎么办？ |\n|      | 7\t如果Redis挂了，还会不会去重新维护一个BitMap结构？       |\n|      | 8\tRedis+Lua脚本限流是怎么实现的？为啥要用这个实现？ （固定窗口算法） |\n|      | 9\tExcel数据导入导出工具优化怎么实现的？                   |\n|      | 10\t兑换码是怎么生成的？ （海明码，增加逻辑校验，减少无效请求） |\n|      | 11\t项目里面还有用到什么技术难点？                         |\n|      | 12\t为什么采用双写的数据迁移？不用Canal去监控BinLog日志去迁移？ |\n|      | 13\t如果双写时，遇到有老数据的修改你们是怎么解决的？       |\n|      | 14\t新老库双写时，有没有遇到事务问题？                     |\n|      | 15\t会记录错误日志，存储在哪里？                           |\n|      | 16\t还有什么想问的吗？                                     |\n|      | 。。。。基本上抓着项目上，和简历上的东西问，所以对简历上写的东西一定要准备好。 |\n|      | 部门专场招聘，感觉面试官一天面了不少人，自我介绍，客套话都省略了。 |\n|      |                                                              |\n|      | 欢聚ShopeLine-2面：                                          |\n|      | 1.自我介绍                                                   |\n|      | 2.介绍项目，                                                 |\n|      | 3.分析系统的分层，架构、                                     |\n|      | 4.系统之间是怎么调用的？                                     |\n|      | 5.你们系统之间的边界                                         |\n|      | 6.为啥要把B端C端的流量放一个系统上？有什么好办法把它区分开？ |\n|      | 7.如果分开部署，那怎么保证系统的公共业务是通用的呢？         |\n|      | 8.为啥不建议一个应用挂两个数据源？                           |\n|      | 10.什么是中台？什么是平台？                                  |\n|      | 基本没问技术八卦文，就是讨论系统设计的知识，相互讨论，相互互怼，有时候我反问他，问他们是怎么做的，他说他们也不是这样干的，只是为了讨论而已。。。。MMP。 |\n|      |                                                              |\n|      | 网易OA-1面：                                                 |\n|      | 1\t线程池配置的参数？（CPU密集，IO密集，不同配置）         |\n|      | 2\t线程池内部创建线程的原理，以及引发OOM问题？             |\n|      | 3\tG1的垃圾回收的特征？ 用的什么回收算法？ （复制，说成了标记整理，答错了） |\n|      | 4\tMap为啥要用红黑二叉树的特征？                           |\n|      | 5\tSpring框架中有用了哪些设计模式？用在哪个地方？          |\n|      | 6\t怎么解决Bean的循环依赖问题的？                          |\n|      | 7\tAOP切面的底层实现原理？                                 |\n|      | 8\t在一个Bean内调用添加事务的方法，事务是否会生效？        |\n|      | 9\tRedis有哪些数据类型？                                   |\n|      | 10\tRedis有哪几种日志持久化方式？                          |\n|      | 11\tRedis底层有哪些数据结构？                              |\n|      | 12\tSortSet底层什么时候是压缩列表，什么时候用跳表？        |\n|      | 13\t什么是跳表？数据结构是怎么样的？                       |\n|      | 14\tRedis有哪些集群模式？                                  |\n|      | 15\tRedis的分布式锁是怎么实现的？                          |\n|      | 16\t还有哪些分布式锁实现的方式？                           |\n|      | 17\tZK的高可用机制是怎么保证的？ （paxos算法？不知道）     |\n|      | 18\tZK实现分布式锁是怎么实现的？                           |\n|      | 19\tSpringCloud中的Eureka是多点集群的吗？                  |\n|      | 20\t内部高可用的机制是怎么实现的？ （不知道）              |\n|      | 21\t如果Eureka挂了，客户端之间还能调用吗？                 |\n|      | 22\tNginx有哪些负载均衡算法？ （随机，轮询，Hash,权重）    |\n|      | 23\t如果请求采用Hash算法？但是后面新添加了节点，怎么解决扩容问题？ （转移到 一致性Hash算法上？） |\n|      | 24\t一致性Hash算法是怎么实现的？                           |\n|      | 25\t你用项目里面用了哪些设计模式？怎么用的？               |\n|      | 26\t单例模式有哪几种？                                     |\n|      | 27\t怎么解决并发时的单例情况？（双重锁？序列化反序列对象创建bean） |\n|      | 28\t项目中是怎么用工厂模式去做对三方请求的？ （我描述的可能不太清楚） |\n|      | 29\tKafka了解吗？ （不太了解）                             |\n|      | 30\t和传统MQ的区别？                                       |\n|      | 31\tBorken,Topic,Patiion..(分区) 之间的关系？              |\n|      | 32\t一个Topic是单节点还是多节点的？ 忘了，不了解 。。      |\n|      | 33\t慢SQL怎么排查？ （Explian）                            |\n|      | 34\tLike 会使用索引吗？                                    |\n|      | 35\t等于号两边使用函数，会用索引吗？                       |\n|      | 。。。。挂了。。。                                           |\n|      |                                                              |\n|      | 唯品会-1面：                                                 |\n|      | 1\t自我介绍，讲讲项目？                                    |\n|      | 2\tRedis存一些什么?                                        |\n|      | 3\tRedis做分布式锁遇到过哪些坑？ （死锁，锁占用？）        |\n|      | 4\tRedis缓存失效，有大量请求怼在MySQL上有什么问题？ （其实就是缓存雪崩的场景） |\n|      | 5\tRedis的RDB文件过大，怎么解决？                          |\n|      | 6\tRedis分布式集群最大支持多少实例？                       |\n|      | 7\tRedis主节点挂了，如何快速恢复？                         |\n|      | 8\t影响Redis恢复速度的情况可能有哪些？                     |\n|      | 9\tMySQL什么时候会使用间隙锁？                             |\n|      | 10\t你们的表最大数据量有多少？ （4000W+）                  |\n|      | 11\t你们大表做了哪些优化？ （索引，业务上表分层，ShardJdbc分库分表） |\n|      | 12\t分库分表情况下有哪些汇总计算的方式？（异步汇总缓存，查询内存汇总，Hive和MapReduce） |\n|      | 13\t新应用上线，JVM参数模板怎么配置？（默认模板，压测，GC日志，堆占用，调节） |\n|      | 14\tJVM频繁发生YGC和FullGC，你怎么去定位问题和解决？ （GC日志，动态规划，担保机制） |\n|      | 15\t你们用了有大数据的Hadoop，Hive这些东西吗？ （说没有用到，但自己学过，就没下文了） |\n|      | 16\t问到这里没了，有什么想问的嘛？                         |\n|      | 反问面试官：                                                 |\n|      | Redis你们遇到过节点挂了的情况吗？ 你们怎么快速恢复的？ （结果就TM的主从切换，他们数据迁移的时候有考虑过） |\n|      | 前端后端大数据都要会点？（且大量操作Redis）                  |\n|      |                                                              |\n|      | 唯品会-2面：                                                 |\n|      | (面试时录音了，所以把每一个问题都记录了下来。面了50分钟左右) |\n|      | 1\t介绍一下自己项目？（数据走向分析）你们的系统分层？为什么要这么分层？ |\n|      | 2\t你了解什么是DDD驱动领域模型吗？ 了解DDD有哪几种模型？（充血，贫血） |\n|      | 3\t为什么要在系统中用MQ？ （解耦，异步，削峰）讲讲MQ中的解耦，和异步有什么区别？ |\n|      | 4\t下单的时候扣库存有什么问题？ 下完单后扣减库存又有什么问题？ |\n|      | 5\t下单同步扣减库存和下单异步扣减库存有什么区别？会出现什么问题？ |\n|      | 6\t怎么解决库存多卖问题吗？ （分布式锁，Redis原子Incr命令） |\n|      | 7\t分布式锁保证扣库存，会存在什么问题？ （串行，效率低）   |\n|      | 8\tRedis扣减库存后怎么最终会持久化到MySQL中？ （相等与缓存一致性的解决方案） |\n|      |                                                              |\n|      | 9\tRocketMQ的技术架构你了解过吗？ （下面几个直接说不了解） |\n|      | 10\tRocketMQ的Topic是怎么管理的？                          |\n|      | 11\tRocketMQ的服务器（节点）是怎么管理的？）               |\n|      | 12\tRocketMQ的日志文件是怎么管理的？                       |\n|      | 13\tRocketMQ的推拉模式是怎么实现的？                       |\n|      | 14\tRocketMQ支持什么样的事务？                             |\n|      |                                                              |\n|      | 15\tRocketMQ发消息存在哪些不可靠的点？                     |\n|      | 16\tMQ发送失败怎么 办？                                    |\n|      | 17\t本地消息表记录发送状态，那么如果这个状态如果没有修改成功，那么判断是否发送成功的点哪？他有没有发送成功的可能性？ |\n|      | 18\t发送的消息有个唯一标识，唯一标识是选择自己生成的还是用MQ系统的生成的？ |\n|      | 19\t如果第一次发送成功了，第二次又发了，在MQ服务端收到两条相同消息，MQ会怎么处理？ |\n|      | 20\tRocketMQ是从哪些方面解决性能问题的？                   |\n|      | 21\tRocketMQ是在哪一块用的零拷贝？                         |\n|      | 22\tMQ客户端什么情况下需要做幂等？                         |\n|      | 23\t消费者端做幂等的话，需不需要做Try/Catch ？             |\n|      | 24\t你们会用MQ的重试功能嘛？                               |\n|      | 25\tMQ如果没有消费成功会重复消费吗？                       |\n|      |                                                              |\n|      | 26\tRedis底层有哪几种数据结构？（跳表，压缩列表，SDS，数组） |\n|      | 27\tRedis除了上面这些还有什么数据结构吗？ （BitMap? RedisObject可自定义类型？） |\n|      | 28\tSDS为什么交动态字符串？ 那SDS会动态换吗？              |\n|      | 29\tHash和List底层数据结构是哪几种？ 怎么选择的？          |\n|      |                                                              |\n|      | 30\tRedis集群之间的通信协议原理你知道吗？ （二进制Gossip） |\n|      | 31\t为什么Redis官方说建议最多1000台部署？                  |\n|      | 32\tRedis的热Key怎么解决？                                 |\n|      | （我说没理解啥是热Key，他问的意思是高频使用的Key，有可能在集群中有部分节点出现了CPU飙高的问题，你怎么去解决怎么去查？ 我从 数据倾斜，BigKey两方面去定位分析 ） |\n|      | 33\t为啥大Key会打满CPU？ （fork持久化线程时，和遍历时间复杂度 去分析的） |\n|      | 34\tRedis的布隆过滤器去重的范围是多大？ （没有固定，需要根据BitMap长度和hash函数个数去分析） |\n|      | 35\tHIVE本身的原理是什么？他是怎么工作的？ （HDFS，MySQL存元数据，底层MapReduce） |\n|      | 36\tHive和MapReduce有什么关系？ （底层计算是用的MR）       |\n|      | 37\t什么是Map什么是Reduce？                                |\n|      | 38\tMapReduce会存在数据亲些的问题吗？ 怎么解决？ （不知道） |\n|      |                                                              |\n|      | 39\tCopyOnWriteArrayList 什么情况下使用它会合适？          |\n|      | 40\tSynchronized 和 volatile 有什么区别？ 也可以讲讲底层实现怎么实现的？ |\n|      | 41\t单处理器（单核）存在并发问题吗？                       |\n|      | 反问面试官：                                                 |\n|      | 你们做什么业务的？运营中台，MPD，活动提报系统 图文系统，用户画像系统，超微系统？ 反正他们组是和用户相关的，面试官是做超微系统的，进去之后也不一定是做超微系统。 |\n|      | 你们Redis有多少实例？ （300台，大促下会有600台 ）            |\n|      |                                                              |\n|      | 唯品会-3面：                                                 |\n|      | （录音了，所以问题记录的比较多，面了1个小时多点。）          |\n|      | 1\t为什么想离职？                                          |\n|      | 2\t你在项目组里面是什么角色？                              |\n|      | 3\t重点讲一下系统中遇到了些什么问题？有什么难点？用了什么方案去解决的？ （BitMap去重，海明码） |\n|      | 4\t你的项目质量是怎么保证的？ （我从三个维度分析：代码质量，系统稳定质量，数据准确性质量） |\n|      | 5\t讲一下你们怎么做CodeReview的？                          |\n|      | （从两个维度去分析：                                         |\n|      | 方案设计维度上： 体现API接口，和表设计和字段选型；           |\n|      | 代码维度上：需要从时间，空间复杂度，池化配置，SQL效率，工具选型，代码可读性上去Review） |\n|      | 6\t开发完后你们的单元测试怎么做的？ （没做，不了解）       |\n|      | 7\t项目开发完后发版，你们怎么保证系统的稳定？ （灰度，回滚机制，DDL语句） |\n|      | 8\t你们用Redis除了做布隆过滤器还做了啥？ （延时队列，固定窗口限流，缓存） |\n|      | 9\t讲一下Redis的Hash底层实现是怎么样的？                   |\n|      | （我讲了 压缩列表，跳表 的特征，以及内部怎么抉择的使用哪种数据结构的） |\n|      | 10\tRedis或DB的连接池怎么选择去配置的？ （我从两方面：Java客户端业务场景，DB服务端的瓶颈） |\n|      | 11\t本地缓存有用吗？ （反问是不是说的是Ecache那种缓存？）  |\n|      | 12\t堆内和堆外的缓存有什么不一样？                         |\n|      | 13\t堆外和堆内内存是否对GC有影响？                         |\n|      | 14\tLinux的内核有没有研究过？ 有没有做Linux内核方面的调优？ （没有） |\n|      | 15\t你一般怎么去分析GC日志的？ （jstact -gc 1000 1000 ）   |\n|      | 16\tJVM参数中的GC参数你怎么配的？有什么依据？ （从GC间隔时间，存活率，GC时长去分析） |\n|      |                                                              |\n|      | 17\t你怎么设计一个秒杀系统？ （从 持久层，交互，系统稳定性三方面去考虑） |\n|      | 18\t在秒杀系统中 你用Redis是做持久层还是缓存？             |\n|      | 19\t怎么把Redis上的库存信息同步到MySQL？                   |\n|      | 20\t如果你服务发版，把过期时间为15天的缓存给删了，你怎么把缓存恢复到Redis？（有点像预热的场景） |\n|      | 21\tRedis节点挂了怎么恢复？                                |\n|      | 22\tRedis主节点为什么不能开启持久化方式？                  |\n|      | （主从快速恢复，fork拷贝内存耗时，利用丛丛去级联同步日志）   |\n|      | 23\tRedis主不开启持久化，从开启持久化机制，如果主节点挂了从当选为新的主节点来使用,此时从是配置了持久化的，那岂不是性能有影响？ （没办法，异常情况只能快速恢复） |\n|      | 24\t怎么监控系统？ （我从三方面回答，系统日志层面，服务器实例监控，分布式链路监控） |\n|      |                                                              |\n|      | 25\t问我对新公司的期盼？ （对技术有追求，有学习成长）      |\n|      | 26\t问我们现在公司上班的情况，加不加班（我说七八点下班，2周一个迭代的那种） |\n|      | 27\t你了解那些互联网电商公司的加班情况吗？                 |\n|      | 介绍他们组，做的是VIP用户下的交易系统，QPS上万，几十万的那种，要实时响应变化，经常需要发版。 |\n|      | 所以需求多，加班多，一般是晚上10点左右才能下班，项目比较具有挑战性。 |\n|      | 项目紧偶尔也会周六加班，面试官意思是如果能力好做的快，9点干完了，为了考虑整体团队情况也得10点下班的那种。比我现在的工作强度大很多，但是互联网电商项目比较具有挑战性，适合我们这种小年轻。 |\n|      | 反问面试官：                                                 |\n|      | 你们Redis的主节点开启了了持久化机制吗？（不开启）            |\n|      | 你们Redis的节点能到多少QPS？                                 |\n|      | （比我说的理论值10万QPS远远要小，只有6万左右的，让我感兴趣自己去试试。） |\n|      |                                                              |\n|      | 其他面过的公司：                                             |\n|      | SHEIN，金蝶信科，明源云，中国平安，万科下的万物云 ，用友，亚信，Oppo下的叶子，有车以后，乐信，等等 |\n|      |                                                              |\n|      | 这几个公司，面试难度中等偏下，基本上都是八股文+开发经验的问题，没有卷算法，正常发挥就行。 |\n|      | •\tJUC的并发包下的Automic类，已经底层的实现                |\n|      | •\tCAS问题                                                 |\n|      | •\t多线程下实现代码的顺序执行                              |\n|      | •\tList 的两种线程安全模式？                               |\n|      | •\tHashMap的Put过程，以及扩容过程                          |\n|      | •\tMybatis的插件式编程                                     |\n|      | •\tMySQL的Join过程，                                       |\n|      | •\t如何设计5000千万个用户发放6位数（字母+数字）的兑换码？  |\n|      | •\tRedis 什么时候用Set，List                               |\n|      | •\t缓存一致性？                                            |\n|      | •\t数据一致性？                                            |\n|      | •\t分库分表？                                              |\n|      | •\t分布式锁等？                                            |\n|      | •\t自增主键等？                                            |\n|      | •\tCodeReview等等                                          |\n|      | •\t线程池原理等？                                          |\n|      | •\tBean的生命周期等，                                      |\n|      | •\tIOC，AOP底层实现等。                                    |\n|      | •\tMQ保证消息不丢失，保证幂等性，保证可靠性消息投递，保证消费顺序问题等等。 |\n|      | •\t基本上，redoLog, undoLog, MySQL常见的优化，B+数据结构，索引优化，回表，聚簇索引，线程池，以及配置池子的时候需要注意的问题 |\n|      |                                                              |\n|      |                                                              |\n|      |                                                              |\n|      |                                                              |\n|      |                                                              |\n|      |                                                              |\n\n\n\n\n\n对撞时候 顺序\n\n触发攻击前buff 步骤\n\n添加对撞 步骤\n\n计算对撞伤害\n\n触发攻击时 受击时buff\n\n\n\n受到伤害时\n\n\n\n结算对撞步骤 信息 4\n\n触发吸血不为零的时候buff\n\n攻击后buff\n\n"},{"title":"mysql的主备从入门到入土","url":"/note/JAVA/数据库/MYSQL/mysql的主备从入门到入土/","content":"\n\n\n本文有xmind，配合观看，效果更佳：[Mysql主备从入门到入土.xmind](mysql的主备从入门到入土.assets/Mysql主备从入门到入土.xmind)\n\nbinlog 可以用来归档，也可以用来做主备同步，那么具体是怎么做主备同步的呢？为什么备库执行了 binlog 就可以跟主库保持一致了呢？\n\n\n\n## 什么是主备\n\n传统的单机架构在目前的应用场景中不足以应对，后来才衍生出高可用，解决单点问题。mysql也不例外\n\n\n\n## 主备同步（主备一致）的流程\n\n\n\n```mermaid\nflowchart LR\n开始((开始))-->undologmem[undolog<br/>mem]\nsubgraph masterA\nundologmem-->datamem[data<br/>mem]\ndatamem-->redologprepare[redolog<br/>prepare]\nredologprepare-->binlog[binlog]\nbinlog-->redologcommit[redolog<br/>commit]\nbinlog-->dump_thread[<font color='red'>dump_thread</font>]\nbg_thread[bg_thread]-->undologdisk[undolog<br/>disk]\nundologdisk-->datadisk[data<br/>disk]\nend\nredologcommit-->ack((ack))\nsubgraph masterB\ndump_thread-->io_thread[<font color='red'>io_thread</font>]\nio_thread-->relaylog[relaylog]\nrelaylog-->sql_thread[<font color='red'>sql_thread</font>]\nsql_thread-->data[data]\nend\n```\n\n上图是主备切换的大致流程图，包括undolog，redolog，和binlog的大致流程（复习一下redolog和binlog的二阶段提交）。\n\n从左到右的流程是：\n\n- masterA主库接收到Client过来的更新请求，先记录undolog，然后写data缓存，记录redolog和binlog。\n- 当binlog记录成功之后，在masterA主库中有一个线程dump_thread，这个dump_thread线程是用来维护和masterB备库的长链接。\n- 在masterB备库中，也有一个io_thread线程，负责与主库建立长链接\n- masterB备库会向masterA主库请求同步binlog，备库会告诉主库需要同步的位置\n- masterA主库会按照masterB备库传过来的位置，读取binlog，发送给masterB备库\n- masterB备库，接收到masterA主库传过来的binlog，先暂存到本地文件，称为中转日志 relaylog\n- 在备库B中有一个线程sql_thread，会负责解析中转日志relaylog，并执行\n\n\n\n### 两种主备架构\n\n主备架构有两种，并且两种不同的架构，主备同步的流程有一些区别\n\n### M-S结构的主备同步流程\n\n\n\n```mermaid\nflowchart TD\nclient-->mysqlA\nmysqlA-->mysqlB\\nreadonly\n\n```\n\nM-S结构如图所示，mysqlB是只读的，作为A的备库。\n\n在主备切换的时候，会把client的请求转发到B\n\n同时将mysqlA设置为readonly，设置为mysqlB的备库（修改主备关系）\n\n当然在主备切换的时候，会有问题，比如把client的请求转发到B，但是此时B是readonly的，写不进去数据怎么办？\n\n- 其实这是主备切换必须要面对的问题，后面会介绍到：可用性优先切换，和可靠性优先切换 两个方案。\n- 点此查看：[可靠性优先切换策略](#可靠性优先策略)\n- 点此查看：[可用性优先切换策略](#可用性优先策略)\n\n\n\n\n\n### 双M结构的主备同步流程\n\n```mermaid\nflowchart TD\nclient-->mysqlA\nmysqlA-->mysqlB\\nreadonly\nmysqlB\\nreadonly-->mysqlA\n```\n\n\n\n双 M 结构和 M-S 结构，其实区别只是多了一条线，即：mysql A 和 mysql B 之间总是互为主备关系。这样在切换的时候就不用再修改主备关系。\n\n#### 循环复制问题\n\n但是双M结构会有一个问题，就是主备同步的时候：\n\n- mysqlA把binlog发给mysqlB，mysqlB执行完binlog之后，又会生成binlog（通过参数log_slave_updates控制执行relaylog执行后是否产生binlog）\n- mysqlB再把binlog发给mysqlA，mysqlA又会执行...这就是双M结构的循环复制问题\n\n解决这个问题，也很简单，思考一下：\n\n- 方案一：在mysqlB执行完之后，不生成binlog不就完事了。\n- 方案二：在mysqlB执行完之后，生成了binlog，但是不发给mysqlA不就完事了。\n- 方案三：在mysqlB执行完之后，生成了binlog，发给mysqlA，但是mysqlA不执行不就完事了。\n\n在上面三个方案，其实都可以解决循环复制的问题，\n\n- 对于方案一，可以通过`log_slave_updates`这个参数控制relaylog执行后是否产生binlog，但是呢，我们建议打开备库的binlog。\n- 对于方案二，mysql没采用这个方法，不知道为什么。\n- 对于方案三，mysql采用的这个方式，mysql具体是怎么实现的呢？\n\n方案三的实现：\n\n在mysql的binlog中，记录了一个叫做server id 的东西，如下是在ROW格式下的binlog（截取了部分）：\n\n```sh\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin>mysqlbinlog.exe  -vv \"C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\xxxxx-bin.000002\" --start-position=5043 --stop-position=5300\n# at 5043\n#221101 15:21:11 server id 1  end_log_pos 5122 CRC32 0x72f668e7         Anonymous_GTID  last_committed=17       sequence_number=18      rbr_only=yes    original_committed_timestamp=1667287271257812   immediate_commit_timestamp=1667287271257812  transaction_length=287\nSET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;\n\n```\n\n可以看到，是有 `server id 1 `这个内容的，就表示当前这个binlog是在server=1这个库上产生的。\n\n`server id`在mysql主备中，不同的实例必须是唯一的，如果它们相同，那么它们不能构成主备关系。\n\nROW格式的是有serverid的，那么statement格式的有吗？当然也有。也得用mysqlbinlog工具查看才行，都可以看到`server id`这个字段\n\n```mysql\nmysqlbinlog.exe  -vv \"C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\xxxxx-bin.000002\" --start-position=7829 --stop-position=8126\n```\n\n具体的binlog的格式可以参考：`mysql的日志从入门到入库->重要的日志模块(redolog和binlog)->binlog的结构` 这一篇文章\n\n- 规定两个库的 server id 必须不同，如果相同，则它们之间不能设定为主备关系；\n- 一个备库接到 binlog 并在重放的过程中，生成与原 binlog 的 server id 相同的新的 binlog；\n- 每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。\n\n\n\n### 公司生产使用的是M-S结构\n\n\n\n<img src=\"mysql的主备从入门到入土.assets/image-20221108181935875.png\" alt=\"image-20221108181935875\" style=\"zoom:80%;\" />\n\n\n\n上面两个是生产环境（prod）的主节点和从节点；下面两个是容灾环境（dr）的主节点和从节点。\n\n\n\n## 主备延迟和产生和避免\n\n从主备同步可以看出来，备库从主库同步binlog，会有网络的问题，主库和备库机器性能问题等，都会导致备库执行binlog的速度比主库生成的速度慢，这就会导致主备延迟。\n\n但是呢，只要主库生成的binlog都被备库正常接收了，并且正确执行了，那么主库和备库之间，数据就会保持：最终一致性。\n\n但是仅仅有最终一致性，是不满足高可用的，因为还有之前说的主备延迟的问题。考虑这么一个场景：主库突然出问题了，要进行主备切换，然后现在备库还没有执行完主库的binlog，强行切换到备库，就会导致数据不一致的问题。\n\n\n\n### 什么是主备延迟\n\n备库从主库同步binlog，会有网络的问题，主库和备库机器性能问题等，都会导致备库执行binlog的速度比主库生成的速度慢，这就会导致主备延迟。\n\n```mermaid\nflowchart LR\n主库A的binlog生成完成-T1-->备库B接收到binlog-T2-->备库B执行完成binlog-T3\n```\n\n上面三个时间点，分别记为：T1，T2，T3，那么T3-T1就是主备延迟的时间。\n\n在mysql中，可以通过在备库上执行`show slave status`命令，在执行结果中有一个`seconds_behind_master`字段，表示备库落后于主库多少秒。\n\n\n\n### 为什么会产生主备延迟\n\n- 备库的机器性能比主库差\n\n- 备库压力大\n  - 我们一般把备库设置为readonly，并提供一些只读的查询，这些只读的查询，一般会比较复杂，会对数据库造成压力\n  - 解决：可以采用一主多从的架构，分担读压力；还可以将数据分散到外部系统，比如大数据。\n- 大事务\n  - 因为主库上必须等事务执行完成才会写入 binlog，再传给备库。所以，如果一个主库上的语句执行 10 分钟，那这个事务很可能就会导致从库延迟 10 分钟。\n  - 常见的大事务有哪些？\n    - 大量DML：一次性地用 delete 语句删除太多数据。解决办法就是，少量多次删除。\n    - 大表DDL：使用gh-ost方案。\n- 主库的事务是并发的，而备库是sql_thread单线程同步的\n  - 备库的并行复制能力\n\n\n### 备库的并行复制能力\n\n通过以上产生主备延迟的原因，基本都有对应的解决办法，都是mysql也为了减少主备延迟的时间，做了很多努力。\n\n为什么要有多线程复制呢？这是因为单线程复制的能力全面低于多线程复制，对于更新压力较大的主库，备库是可能一直追不上主库的。从现象上看就是，备库上 seconds_behind_master 的值越来越大。\n\n都做了什么努力呢？我们再来回顾主备同步的步骤。\n\n```mermaid\nflowchart LR\n开始((开始))-->undologmem[undolog<br/>mem]\nsubgraph masterA\nundologmem-->datamem[data<br/>mem]\ndatamem-->redologprepare[redolog<br/>prepare]\nredologprepare-->binlog[binlog]\nbinlog-->redologcommit[redolog<br/>commit]\nbinlog-->dump_thread[dump_thread]\nbg_thread[bg_thread]-->undologdisk[undolog<br/>disk]\nundologdisk-->datadisk[data<br/>disk]\nend\nredologcommit-->ack((ack))\nsubgraph masterB\ndump_thread-->io_thread[io_thread]\nio_thread-->relaylog[relaylog]\nrelaylog-->sql_thread[sql_thread]\nsql_thread==>data[data]\nend\n```\n\n这个图，可文章开始的图有一点点细微的差别，这个细微的差别，在于最后一步：sql_thread->data 这一步的线，比之前的图，粗了一点点。为什么呢？\n\n因为mysql对这一步骤做了优化，在通过sql_thread执行relaylog的时候，是通过多线程执行的。\n\n使用了多线程，就可以提高备库的能力。减少主备延迟的时间。\n\n\n\n#### 并行复制的基本原理\n\n从单线程复制到最新版本的多线程复制，中间的演化经历了好几个版本。接下来，我就跟你说说 MySQL 多线程复制的演进过程。\n\n其实说到底，所有的多线程复制机制，都是要把上图中只有一个线程的 sql_thread，拆成多个线程：\n\n```mermaid\nflowchart LR\nrelaylog-->coordinator\nsubgraph sql_thread\ncoordinator-->worker-1\ncoordinator-->worker-2\ncoordinator-->worker-3\ncoordinator-->点点点[..........]\ncoordinator-->worker-n\nend\nworker-1-->data\nworker-2-->data\nworker-3-->data\n点点点-->data\nworker-n-->data\n\n```\n\n其中的`coordinator`和`worker`就是原来的`sql_thread`;\n\n- `coordinator`复制读取和分发`relaylog`\n- `worker`线程是真正来执行`relaylog`的\n\nworker线程有多少个？\n\n- 是通过`slave_parallel_workers`参数控制的，一般32C的机器，建议设置为8-16之间，要留一些用于读查询\n- 对于单机的mysql，默认是0\n- 公司的生产环境配置的是 16\n\n\n\n#### 并行复制面临的问题\n\n了解了并行复制的基本原理，接下来思考几个问题？\n\n**`coordinator`是怎么分发`relaylog`给worker线程的？能不能按照轮训的方式，也就是事务1的日志分为worker1，事务2的日志分给worker2？**\n\n- 不能\n- 因为不同的事务可能会操作同一行，由于CPU的调度问题，很有可能导致事务2的日志先执行，事务1的日志后执行，导致数据不一致的问题。\n\n**`coordinator`能不能把一个事务的不同的更新语句的binlog分给多个worker执行？**\n\n- 不能\n- 一个事务的binlog是完整的，分开执行，很有可能也会出现数据不一致的情况。\n\n所以，对`coordinator`的分发，就提出了两个最基本的要求\n\n- 要求更新同一行的不同事务的binlog，必须被分发到同一个 worker 中。\n- 要求同一个事务的binlog不能被分开，必须被分发到同一个 worker 中。\n\n\n\n#### MySQL 5.5 版本的并行复制策略（不支持）\n\n官方 MySQL 5.5 版本是不支持并行复制的。\n\n但是，在 2012 年的时候，我自己服务的业务出现了严重的主备延迟，原因就是备库只有单线程复制。\n\n然后，我就先后写了两个版本的并行策略。即按表分发策略和按行分发策略，以帮助你理解 MySQL 官方版本并行复制策略的迭代。\n\n\n\n##### 按表分发策略\n\n**基本原理**：如果两个事务操作的是不同的表，那么这两个事务就可以并行处理；如果一个事务中操作了多张表，那么把这些表当做一张表。\n\n**实现细节**：\n\n- 每一个worker线程，维护一个hashmap，key是【库名+表名】，value是待执行的事务日志的个数\n  - 当`coordinator`把一个事务分给worker执行的时候，value+1\n  - 当worker把某一个事务执行完成的时候，value-1\n- 当coordinator读取下一个事务的日志之后，先获取到这个事务所操作的【库名+表名】（可能是一张表，也可能是多张表）\n- 如果是一张表\n  - 遍历所有的worker\n  - 判断当前worker中的hashmap的key，是不是包含这张表\n  - 如果包含：则把这个事务，交给这个worker执行\n  - 如果不包含，继续遍历下一个worker\n  - 如果所有的worker都不包含，则把这个事务交给负载最低的worker执行，并将当前的【库名+表名】添加到这个worker的hashmap中\n- 如果是多张表\n  - 遍历所有的worker\n  - 如果这多张表，是由一个worker执行的，则把这个事务，交给这个worker执行\n  - 如果这多张表，目前没有worker执行，则把这个事务，交给负载最低的worker执行\n  - 如果这多张表，是由多个woker执行的，则`coordinator`进入等待，并且不停的进行遍历worker进行判断\n\n**缺点**：这个按表分发的方案，在多个表负载均匀的场景里应用效果很好。但是，如果碰到热点表，比如所有的更新事务都会涉及到某一个表的时候，所有事务都会被分配到同一个 worker 中，就变成单线程复制了。\n\n\n\n##### 按行分发策略\n\n要解决热点表的并行复制问题，就需要一个按行并行复制的方案。\n\n**基本原理**：如果两个事务没有更新相同的行，它们在备库上可以并行执行。显然，这个模式要求 binlog 格式必须是 row。因为statement记录的是sql语句，无法判断更新了哪一行？\n\n实现细节：\n\n- 每一个worker线程，维护一个hashmap，key是【库名+表名+主键值+唯一索引的值】，value是待执行的事务日志的个数\n- 剩下的步骤，同**按表分发策略**\n\n**缺点**：对比按表分发和按行分发这两个方案的话，按行分发策略的并行度更高。不过，如果是要操作很多行的大事务的话，按行分发的策略有两个问题：\n\n- 耗费内存。比如一个语句要删除 100 万行数据，这时候 hash 表就要记录 100 万个项。\n- 耗费 CPU。解析 binlog，然后计算 hash 值，对于大事务，这个成本还是很高的。\n\n**退化**：因为缺点的存在，所以在实现这个策略的时候会设置一个阈值，单个事务如果超过设置的行数阈值（比如，如果单个事务更新的行数超过 10 万行），就暂时退化为单线程模式，退化过程的逻辑大概是这样的：\n\n- coordinator 暂时先 hold 住这个事务；\n- 等待所有 worker 都执行完成，变成空队列；\n- coordinator 直接执行这个事务；\n- 恢复并行模式。\n\n\n\n#### MySQL 5.6 版本的并行复制策略\n\n官方 MySQL5.6 版本，支持了并行复制，只是支持的粒度是**按库并行**。\n\n具体的实现方案和按表分发以及按行分拨的是一样的，只不过hashmap中的key是库名了。\n\n\n\n#### MariaDB 的并行复制策略\n\n**基本原理**：利用了组提交的特性\n\n- 能在同一个组中提交的事务，一定不会更新同一行（因为innodb在更新某一行的时候，会先获取行锁，上一个事务还没有commit的时候，行锁是不会释放的）\n- 主库能并行执行的，备库一定也可以并行执行。\n\n**实现细节**：\n\n- 在一组里面提交的事务，有一个共同的commit_id\n- coordinator每次从relaylog中获取一批事务（具有相同的commit_id）\n- 然后把这一批直接分给worker并发执行\n- 等待worker执行完之后，coordinator在获取下一批事务\n\n**缺点**：虽然是并发了，但是并发度不够，不够在哪里呢？思考一下，在主库上，一组事务的binlog在commit的时候，下一组binlog可能已经开始write了，主库的效率是很高的。而在备库上，coordinator获取一批事务，必须等待这一批执行完，才能执行下一批。效率相比较于主库，就比较慢了。\n\n\n\n#### MySQL 5.7 的并行复制策略\n\n在MariaDB 的并行复制策略出现之后，mysql5.7也出了一个类似的，但是呢，也并没有舍弃mysql5.6中的按库分发策略。mysql5.7提供了一个参数\n\n- slave-parallel-type\n- 配置为 DATABASE，表示使用 MySQL 5.6 版本的按库并行策略；\n- 配置为 LOGICAL_CLOCK，表示的就是类似 MariaDB 的策略（不过是mysql优化后的）。\n\n**mysql对 MariaDB 的策略进行了优化，优化了什么呢？**\n\n在回顾一下MariaDB的并行复制策略的核心是：所有commit的事务，可以并行执行。因为commit的事务一定是不会有锁冲突的。\n\n那么在思考一下mysql的更新流程：\n\n```mermaid\nflowchart LR\n开始((开始))-->undologmem[undolog<br/>mem]\nundologmem-->datamem[data<br/>mem]\ndatamem-->redologprepare[redolog<br/>prepare]\nredologprepare-->binlog[binlog]\nbinlog-->redologcommit[redolog<br/>commit]\n```\n\n可以发现，其实在记录redolog（prepare）的时候，就已经通过了锁校验。具体的关于锁，可以看：mysql的锁从入门到入土\n\n优化点：只要是通过了redolog（prepare）阶段后的一组事务的binlog（组提交），传到备库的时候，这组事务都是可以并行执行的\n\n\n\n\n\n#### MySQL 5.7.22 的并行复制策略\n\n公司生产用的是mysql版本是5.7.19\n\n在 2018 年 4 月份发布的 MySQL 5.7.22 版本里，MySQL 增加了一个新的并行复制策略，基于 WRITESET 的并行复制。\n\n相应地，新增了一个参数 `binlog-transaction-dependency-tracking`，用来控制是否启用这个新策略。这个参数的可选值有以下三种。\n\n- `COMMIT_ORDER`表示的就是前面介绍的，根据同时进入 prepare 和 commit 来判断是否可以并行的策略。\n- `WRITESET`表示的是对于事务涉及更新的每一行，计算出这一行的 hash 值，组成集合 writeset。如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行。\n- `WRITESET_SESSION`是在 WRITESET 的基础上多了一个约束，即在主库上同一个线程先后执行的两个事务，在备库执行的时候，要保证相同的先后顺序。\n\n**实现细节**：\n\n- msyql对于事务涉及更新的每一行，计算出这一行的 hash 值（是通过“库名 + 表名 + 索引名 + 值”计算出来的），组成集合 writeset。\n- 把这个writeset集合写到binlog中（写在binlog哪里的，不知道，怎么从binlog中获取的，也不知道，这里没扣细节）\n- 备库执行的时候，直接获取一批事务，获取这一批事务的writeset，和当前正在执行的事务的writeset，判断是否有交集。\n- 没有交集，就可以并行。\n\n**优点**：\n\n- 获取writeset的时候，不需要计算，也不需要解析binlog，就可以直接拿到，省CPU\n- 不需要把整个事务的 binlog 都扫一遍才能决定分发到哪个 worker，更省内存；\n- 由于备库的分发策略不依赖于 binlog 内容，所以 binlog 是 statement 格式也是可以的。\n\n**缺点**：\n\n- 对于“表上没主键”和“外键约束”的场景，WRITESET 策略也是没法并行的，也会暂时退化为单线程模型。\n\n\n\n### 思考题\n\n如果主库都是单线程压力模式，在从库追主库的过程中，binlog-transaction-dependency-tracking 应该选用什么参数？\n\n- 首先binlog-transaction-dependency-tracking能选哪些参数？\n  - ORDER_COMMIT\n  - WRITE_SET\n  - WRITE_SET_SESSION\n- 其次看这三个参数分别对应了什么？\n  - ORDER_COMMIT：主要是处于redolog（prepare）状态之后的，组提交的事务，可以并行复制；\n  - WRITE_SET_SESSION：同一个会话中的事务的writeset，即使没有交集，也要顺序执行\n  - WRITE_SET：同一个会话中的事务的writeset，只要没有交集，就可以并行\n\n- 在分析题目\n  - 单线程：所以就没有组提交了，因为都是一个一个提交的。\n  - 单线程：所以是一个会话\n- 结合来看：\n  - 没有组提交，就不能用ORDER_COMMIT，备库会单线程复制。\n  - 是一个会话，所以就不能用WRITE_SET_SESSION，因为也会顺序执行，顺序执行，就成了单线程复制。\n\n\n\n## 主备切换（高可用）\n\n### 为什么要进行主备切换\n\n主备切换有两种场景，一种是主动切换，一种是被动切换。\n\n- 主动切换：人为的发起\n- 被动切换：一般是因为主库出问题了，由 HA 系统发起的。\n\n这也就引出了我们今天要讨论的问题：怎么判断一个主库出问题了？\n\n\n\n### 怎么判断库有问题\n\n\n\n#### select 1\n\n- 只能判断mysql的进程是否存在，无法判断数据库是否可用\n\n- 验证\n\n  - 设置`innodb_thread_concurrency=3`,然后开启4个session，执行下面的语句\n\n  - | session-1                  | session-2                  | session-3                  | session-4                                                    |\n    | -------------------------- | -------------------------- | -------------------------- | ------------------------------------------------------------ |\n    | select sleep(1000) from t; | select sleep(1000) from t; | select sleep(1000) from t; |                                                              |\n    |                            |                            |                            | select 1; (Query OK)<br/>select * from t;(<font color='red'>blocked</font>) |\n\n  - 可以看到select 1会成功，但是查询表会阻塞；\n\n- `innodb_thread_concurrency`表示限制innoDB的并发执行线程数，是指通知运行的线程有多少个。\n- 并发连接数对系统的运行没有多大的影响，有影响的是并发执行数，才会大量占用CPU；具体的可以看：mysql的性能调优从入门到入土\n\n\n\n#### 查询语句\n\n既然`select 1`不行，那我用查询语句总可以吧。\n\n- 新建一张表，比如叫：health_check；\n- 定期执行：select * from health_check;\n- 能执行成功，说明数据库正常\n- 执行不成功，或者超时没返回结果，数据库不正常\n\n但是这个方案，也是不行的，因为当**数据库磁盘满了**的时候，此时数据库不能写入，但是可以正常提供读服务；\n\n\n\n#### 更新语句\n\n既然查询语句，那我用更新语句总可以吧。\n\n常用的做法是：\n\n- 新建一张表，比如叫：health_check\n- 定期执行：update health_check set check_time= now();\n\n这么一看，似乎问题不大，但是注意：主库定期检测了，备库也需要定期检测呀，但是由于主备同步的存在，会导致数据检测有问题，所以要优化一下\n\n- 在health_check表中，加一列，表示当前数据库的server id;\n- 每次检查的时候，只更新自己的server id，就没问题了(因为主备的server id是不同的)\n- update health_check set check_time=now() where server_id = 'xxxx';\n\n但是呢，这个方案，也是不行的，当数据库的磁盘IO性能瓶颈的时候，比如IO使用率已经100%了，注意IO使用率100%并不是说系统不可用，因为此时IO还在继续工作呢，只不过IO使用率100%了，会导致后续过来的更新操作，排队等待而已，对client来说，就是我的sql执行的好慢呀。\n\n那么IO使用率100%了，对于我们的检测语句来说，因为检测语句占用的IO资源非常非常小，所以系统可能会安排执行，这样的话，我们的检测语句正常返回了。但是此时数据库已经达到瓶颈了。\n\n\n\n#### 外部判断的弊端\n\n以上三种判断方法都是外部判断的方式，以上的三种检测方法都有各自的使用场景，但是他们具备同样的一个弊端：\n\n- 判断慢\n\n什么是判断慢，就是系统已经出问题了，但是我们的检测不及时，如果定时检查是10分钟一次，那就要等10分钟之后才能发现问题，而且上面三种方式，还不一定能够覆盖所有的异常场景，所以外部检测的方式，一般只是用来辅助，并不能完全靠它。\n\n\n\n#### 内部判断\n\nMySQL 5.6 版本以后提供的 performance_schema 库，里面记录了很多数据库运行时候的详细统计信息。\n\n在mysql性能调优从土门到入土中，也介绍过 performance_schema库\n\n具体的这里不介绍了，只需要知道这个库中记录的很多超级详细的内容，完全可以实时的检测mysql的运行状态。\n\n但是还是有需要注意的地方\n\n- 如果打开所有的 performance_schema 项，性能大概会下降 10% 左右。所以，我建议你只打开自己需要的项进行统计。\n\n\n\n### 两种主备架构\n\n```mermaid\nflowchart TD\nsubgraph M-S结构\nclientms[client]-->mysqlAms[mysqlA]\nmysqlAms-->mysqlBms[mysqlB<br/>readonly]\nend\nsubgraph 双M结构\nclientmm[client]-->mysqlAmm[mysqlA]\nmysqlAmm-->mysqlBmm[mysqlB<br/>readonly]\nmysqlBmm-->mysqlAmm\nend\n```\n\n\n\n由于主备延迟的存在，所以在主备切换的时候，就相应的有不同的策略。\n\n### 可靠性优先切换策略\n\n下面的切换流程，是在`双M结构`的流程下进行的操作，和`M-S结构`的区别在于：不用修改主备关系了。\n\n- 1、判断备库B上的seconds_behind_master，如果小于某个值（比如5秒），继续下一步，否则继续当前步骤\n- 2、将主库A设置为readonly\n- 3、判断备库B上的seconds_behind_master，直到它变为0为止\n- 4、将备库B设置为可读写\n- 5、将业务请求转发到备库B\n\n在上面的步骤中，我们看到，系统是有不可用时间的。此时主库A和备库B都处于只读状态。\n\n\n\n### 可用性优先切换策略\n\n下面的切换流程，是在`双M结构`的流程下进行的操作，和`M-S结构`的区别在于：不用修改主备关系了。\n\n- 1、将备库B设置为可读写\n- 2、将业务请求转发到备库B，此时原来的主库A就不会有业务请求了\n- 3、判断备库B上的seconds_behind_master，直到它变为0为止\n- 4、将主库A设置为readonly\n\n在上面的步骤中，系统可能会出现数据不一致的情况的，就是A产生的binlog，B还没有执行的时候，就接收到了新的请求，然后主库A的binlog此时传到了备库B上，B在执行binlog，就会导致数据不一致的场景。\n\n\n\n### 公司生产使用的是可靠性优先策略\n\n公司使用的是M-S结构，并且使用的是可靠性优先切换策略。\n\n之前进行过主备切换，DBA通知需要停应用才行的。\n\n<img src=\"mysql的主备从入门到入土.assets/image-20221110201120695.png\" alt=\"image-20221110201120695\" style=\"zoom:67%;\" />\n\n而且主备切换，一般是由专门的HA系统操作的，不用人为的介入，以下的公司的ha系统\n\n<img src=\"mysql的主备从入门到入土.assets/image-20221110195355203.png\" alt=\"image-20221110195355203\" style=\"zoom: 80%;\" />\n\n\n\n\n\n\n\n## 主从切换\n\n### 什么是一主多从\n\n```mermaid\nflowchart TD\nclient-->|write|mysqlA\nmysqlA-.->mysqlA1\nmysqlA1-.->mysqlA\nclient-->|read|mysqlB\nclient-->|read|mysqlC\nclient-->|read|mysqlD\nmysqlA-.->mysqlB\nmysqlA-.->mysqlC\nmysqlA-.->mysqlD\n```\n\nmysqlA是主库\n\nmysqlA1是备库（双M结构）\n\nmysqlB，C，D是从库，从主库mysqlA进行同步，并且B，C，D提供只读能力\n\n以上的架构就是一主多从架构。\n\n\n\n### 一主多从有什么问题\n\n在系统正常运行的时候，没什么问题，主要考虑异常的情况：\n\n- 当主库mysqlA突然宕机了，或者无法提供服务了，怎么办？\n- 那肯定要进行主备切换了，将主库切换到备库mysqlA1（关于主备切换，上面说过了，这种被动切换的场景，就没法保证数据可靠性了，只能强制切换到备库上）\n- 但是主备切换完成之后，还有从库呢？怎么办呢？\n- 之前从库是从`主库mysqlA`进行同步的，现在从库必须要连接`新主库mysqlA1`了。（而这一步，就是主从切换的难点）\n\n\n\n### 一主多从的切换策略\n\n一起看看一个切换系统会怎么完成一主多从的主备切换过程。\n\n一主多从一般有两种切换办法\n\n- 基于位点的同步\n\n```sql\nCHANGE MASTER TO \nMASTER_HOST=$host_name \nMASTER_PORT=$port \nMASTER_USER=$user_name \nMASTER_PASSWORD=$password \nMASTER_LOG_FILE=$master_log_name \nMASTER_LOG_POS=$master_log_pos  \n```\n\n- 基于GTID的切换\n\n```sql\nCHANGE MASTER TO \nMASTER_HOST=$host_name \nMASTER_PORT=$port \nMASTER_USER=$user_name \nMASTER_PASSWORD=$password \nmaster_auto_position=1 \n```\n\n- 参数解释\n\n| 字段                 | 解释                                   | 备注                                 |\n| -------------------- | -------------------------------------- | ------------------------------------ |\n| MASTER_HOST          | 新主库的ip                             |                                      |\n| MASTER_PORT          | 新主库的端口                           |                                      |\n| MASTER_USER          | 新主库的用户名                         |                                      |\n| MASTER_PASSWORD      | 新主库的密码                           |                                      |\n| MASTER_LOG_FILE      | 指定从哪个binlog文件进行同步           | 基于位点的同步才有                   |\n| MASTER_LOG_POS       | 指定从这个binlog文件的哪个位置开始同步 | 基于位点的同步才有                   |\n| master_auto_position | 表示使用GTID协议，使用GTID进行同步     | 基于GTID的同步才有，表示使用GTID协议 |\n\n\n\n#### 基于位点的切换\n\n##### 什么是位点\n\n简单地说，就是一条sql语句在binlog中的位置，叫做位点。\n\n在《mysql日志从入门到入土》一文中，介绍了三种格式的binlog，每一种格式的binlog都会有一个Pos的列，下面以row格式的binlog为例，看一下\n\n```sql\nmysql> show binlog events in 'xxx-bin.000002';\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n| Log_name       | Pos  | Event_type     | Server_id | End_log_pos | Info                                 |\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n| xxx-bin.000002 | 5043 | Anonymous_Gtid |         1 |        5122 | SET @@SESSION.GTID_NEXT= 'ANONYMOUS' |\n| xxx-bin.000002 | 5122 | Query          |         1 |        5203 | BEGIN                                |\n| xxx-bin.000002 | 5203 | Table_map      |         1 |        5251 | table_id: 169 (zs.t)                 |\n| xxx-bin.000002 | 5251 | Delete_rows    |         1 |        5299 | table_id: 169 flags: STMT_END_F      |\n| xxx-bin.000002 | 5299 | Xid            |         1 |        5330 | COMMIT /* xid=1924 */                |\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n74 rows in set (0.00 sec)\n```\n\n其中Pos就是位点。\n\n##### 基于位点的同步\n\n上面已经列出了，使用位点同步的命令，这里在展示一遍\n\n```sql\nCHANGE MASTER TO \nMASTER_HOST=$host_name \nMASTER_PORT=$port \nMASTER_USER=$user_name \nMASTER_PASSWORD=$password \nMASTER_LOG_FILE=$master_log_name \nMASTER_LOG_POS=$master_log_pos  \n```\n\n其中`MASTER_LOG_FILE`指定从哪个binlog文件进行同步，`MASTER_LOG_POS`指定从这个binlog文件的哪个位置开始同步\n\n##### 怎么获取位点\n\n那么在主从切换的时候，怎么获取位点呢？\n\n考虑到切换过程中不能丢数据，所以我们找位点的时候，总是要找一个“**稍微往前**”的，然后再通过判断跳过那些在从库 B 上已经执行过的事务\n\n- 在新主库A1上：等待新主库A1把系统中的relay log全部执行完，为什么新主库A1还会有relay log?(因为新主库之前只是老主库A的一个备库，所以也有relay log)\n\n- 在新主库A1上：执行 show master status 得到当前 新主库A1上最新的 binlog File 和 binlog Position；\n\n  - ```sql\n    mysql> show master status;\n    +-----------------+----------+--------------+------------------+-------------------+\n    | File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n    +-----------------+----------+--------------+------------------+-------------------+\n    | xxxx-bin.000002 |     8156 |              |                  |                   |\n    +-----------------+----------+--------------+------------------+-------------------+\n    1 row in set (0.00 sec)\n    ```\n\n- 取老主库A故障的时刻 T；\n\n- 用 mysqlbinlog 工具解析 新主库A1 的 binlog File，得到 T 时刻的位点。\n\n  - ```sql\n    mysqlbinlog File --start-datetime=T --stop-datetime=T\n    ```\n\n- 假设我的崩溃时间是：2022-11-08 17:42:33\n\n  - ```sql\n    C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin>mysqlbinlog.exe  -vv \"C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\xxxx-bin.000002\" --start-datetime=\"2022-11-08 17:42:33\" --stop-datetime=\"2022-11-08 17:42:33\"\n    # The proper term is pseudo_replica_mode, but we use this compatibility alias\n    # to make the statement usable on server versions 8.0.24 and older.\n    /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n    /*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\n    DELIMITER /*!*/;\n    # at 4\n    #221101 14:12:06 server id 1  end_log_pos 125 CRC32 0xe443eab6  Start: binlog v 4, server v 8.0.26 created 221101 14:12:06 at startup\n    # Warning: this binlog is either in use or was not closed properly.\n    ROLLBACK/*!*/;\n    BINLOG '\n    trhgYw8BAAAAeQAAAH0AAAABAAQAOC4wLjI2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n    AAAAAAAAAAAAAAAAAAC2uGBjEwANAAgAAAAABAAEAAAAYQAEGggAAAAICAgCAAAACgoKKioAEjQA\n    CigBtupD5A==\n    '/*!*/;\n    SET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;\n    DELIMITER ;\n    # End of log file\n    /*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n    /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n    ```\n\n- 其中`end_log_pos 125`这个125就是时刻T崩溃时候的写入的位点。我们使用这个位点就可以了\n\n- 那么最终，就可以确定我们从库的同步命令就是下面这样\n\n  - ```sql\n    CHANGE MASTER TO \n    MASTER_HOST=$host_name \n    MASTER_PORT=$port \n    MASTER_USER=$user_name \n    MASTER_PASSWORD=$password \n    MASTER_LOG_FILE=xxxx-bin.000002\n    MASTER_LOG_POS=125\n    ```\n\n\n\n##### 基于位点同步的问题\n\n但是我们通过 mysqlbinlog 这个命令获取到的 位点 这个值，并不准确。\n\n为什么呢？当老主库A在崩溃前，insert了一条语句，并把这个语句的binlog发给了新主库A1和某一个从库C，然后崩溃了，此时从库C上是有这条记录的，但是我们获取新主库A1的同步位点的时候，获取的位点肯定是在这个insert语句之前的。因为其他从库还需要同步这个insert记录呢。\n\n但是我们的从库C，已经有这条记录的，在同步一次，就会报错：主键冲突。\n\n所以，基于位点的同步一般需要在从库上跳过错误：\n\n- 一种做法是：跳过一个事务。跳过命令的写法是：\n\n  - ```sql\n    set global sql_slave_skip_counter=1;\n    start slave;\n    ```\n\n- 另外一种方式是：通过设置 slave_skip_errors 参数，忽略指定的错误。\n\n\n\n#### 基于 GTID 的切换\n\n\n\n##### 什么是GTID？\n\nGTID 的全称是 Global Transaction Identifier，也就是全局事务 ID，是一个事务在**提交**的时候生成的，是这个事务的唯一标识。它由两部分组成，格式是：\n\n```sql\nGTID=server_uuid:gno\n```\n\n其中：\n\n- server_uuid 是一个实例第一次启动时**自动生成**的，是一个全局唯一的值；不是server_id哦\n- gno 是一个整数，初始值是 1，每次提交事务的时候分配给这个事务，并加 1。\n- 在官网上：GTID=source_id:transaction_id；这里只是为了更容易理解，才写成了：server_uuid:gno\n\n##### 启动GTID模式\n\nGTID模式默认是关闭的，在公司的环境中，是开启GTID模式的\n\n在mysql还没有启动的时候\n\n- 在启动mysql实例的时候，手动设置：`gtid_mode=on`和`enforce_gtid_consistency=on`\n\n在mysql已经启动的时候\n\n- 设置：`gtid_mode=on`\n- 设置：`enforce_gtid_consistency=on`\n- 下面展示了具体的开启步骤\n\n```sql\nmysql> show variables like 'gtid_mode';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| gtid_mode     | OFF   |\n+---------------+-------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> show variables like 'enforce_gtid_consistency';\n+--------------------------+-------+\n| Variable_name            | Value |\n+--------------------------+-------+\n| enforce_gtid_consistency | OFF   |\n+--------------------------+-------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> set gtid_mode ='ON';\nERROR 1229 (HY000): Variable 'gtid_mode' is a GLOBAL variable and should be set with SET GLOBAL\nmysql> set global gtid_mode='ON';\nERROR 1788 (HY000): The value of @@GLOBAL.GTID_MODE can only be changed one step at a time: OFF <-> OFF_PERMISSIVE <-> ON_PERMISSIVE <-> ON. Also note that this value must be stepped up or down simultaneously on all servers. See the Manual for instructions.\nmysql> set global gtid_mode='OFF_PERMISSIVE';\nQuery OK, 0 rows affected (0.11 sec)\n\nmysql> set global gtid_mode='ON_PERMISSIVE';\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> set global gtid_mode='ON';\nERROR 3111 (HY000): SET @@GLOBAL.GTID_MODE = ON is not allowed because ENFORCE_GTID_CONSISTENCY is not ON.\nmysql> set global enforce_gtid_consistency='ON';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> set global gtid_mode='ON';\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> show variables like 'gtid_mode';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| gtid_mode     | ON    |\n+---------------+-------+\n1 row in set, 1 warning (0.01 sec)\n\nmysql> show variables like 'enforce_gtid_consistency';\n+--------------------------+-------+\n| Variable_name            | Value |\n+--------------------------+-------+\n| enforce_gtid_consistency | ON    |\n+--------------------------+-------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n\n\n##### 怎么查看GTID\n\nGTID是存在binlog中的，所以怎么查看binlog的，就怎么查看GTID\n\n我们知道GTID默认是关闭的，所以下面展示，在关闭GTID模式下，和开启GTID模式下，分别是什么样的\n\n关闭GTID模式下\n\n```sql\nmysql> show binlog events in 'xxx-bin.000002';\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n| Log_name       | Pos  | Event_type     | Server_id | End_log_pos | Info                                 |\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n| xxx-bin.000002 | 5043 | Anonymous_Gtid |         1 |        5122 | SET @@SESSION.GTID_NEXT= 'ANONYMOUS' |\n| xxx-bin.000002 | 5122 | Query          |         1 |        5203 | BEGIN                                |\n| xxx-bin.000002 | 5203 | Table_map      |         1 |        5251 | table_id: 169 (zs.t)                 |\n| xxx-bin.000002 | 5251 | Delete_rows    |         1 |        5299 | table_id: 169 flags: STMT_END_F      |\n| xxx-bin.000002 | 5299 | Xid            |         1 |        5330 | COMMIT /* xid=1924 */                |\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n74 rows in set (0.00 sec)\n```\n\n开启GTID模式下\n\n```sql\nmysql> show binlog events in 'xxx-bin.000005';\n+----------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+\n| Log_name       | Pos | Event_type     | Server_id | End_log_pos | Info                                                              |\n+----------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+\n| xxx-bin.000005 |   4 | Format_desc    |         1 |         125 | Server ver: 8.0.26, Binlog ver: 4                                 |\n| xxx-bin.000005 | 125 | Previous_gtids |         1 |         156 |                                                                   |\n| xxx-bin.000005 | 156 | Gtid           |         1 |         235 | SET @@SESSION.GTID_NEXT= '13b96d6b-59ac-11ed-88d6-8c8caa828ba8:1' |\n| xxx-bin.000005 | 235 | Query          |         1 |         317 | BEGIN                                                             |\n| xxx-bin.000005 | 317 | Table_map      |         1 |         365 | table_id: 170 (zs.t)                                              |\n| xxx-bin.000005 | 365 | Update_rows    |         1 |         427 | table_id: 170 flags: STMT_END_F                                   |\n| xxx-bin.000005 | 427 | Xid            |         1 |         458 | COMMIT /* xid=2224 */                                             |\n+----------------+-----+----------------+-----------+-------------+-------------------------------------------------------------------+\n7 rows in set (0.00 sec)\n```\n\n\n\n其中`SET @@SESSION.GTID_NEXT=`后面跟的值，就是GTID的值，那么为啥这俩不一样呢，GTID是怎么生成的呢？下面介绍\n\n\n\n##### GTID是如何生成的\n\n在没有开启GTID模式下，GTID的值，永远都是：`ANONYMOUS`，这个单词的意思是：匿名的;不知姓名的;名字不公开的;不具名的;没有特色的\n\n在 开启GTID 模式下，每个事务都会跟一个 GTID 一一对应。这个时候， GTID 有两种生成方式，而使用哪种方式取决于 session 变量 gtid_next 的值。\n\n```sql\nmysql> show variables like 'gtid_next';\n+---------------+-----------+\n| Variable_name | Value     |\n+---------------+-----------+\n| gtid_next     | AUTOMATIC |\n+---------------+-----------+\n1 row in set, 1 warning (0.00 sec)\n```\n\ngtid_next 是session级别的变量，不是全局global的变量，怎么验证呢，可以用下面的命令\n\n> show variables like 'gtid_next';       <==等价于==>    select @@gtid_next\n\n使用 select 命令，也可以查看变量的值，并且还可以验证当前变量是否是全局变量\n\n```sql\nmysql> select @@gtid_next;\n+-------------+\n| @@gtid_next |\n+-------------+\n| AUTOMATIC   |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> select @@global.gtid_next;\nERROR 1238 (HY000): Variable 'gtid_next' is a SESSION variable\n```\n\n那么`gtid_next`都有哪些取值呢？\n\n- `AUTOMATIC`：当设置为AUTOMATIC时(默认值)时，系统会自动分配一个GTID，如果事务回滚或者没有写入到binlog文件时则不会分配\n- `具体的GTID值`：可以设置该变量为一个具体的有效的GTID，这时服务器会将该GTID分配给下一个事务，就算该事务没有被写入binlog日志或者为空事务，该GTID也会被分配\n\n\n\n##### GTID集合\n\n在每一个mysql的实例上，都有两个关于GTID的集合：\n\n- `gtid_executed`：是在当前服务器上执行成功的事务的GTID集合\n- `gtid_purged`：是那些已经在当前服务器上提交的，但已经不存在于binlog文件中了（可能是人工删的，也可能是系统自动删的，这里不展开说了）\n\nGTID集合的格式：\n\n```sql\nmysql> select @@gtid_executed;\n+------------------------------------------+\n| @@gtid_executed                          |\n+------------------------------------------+\n| 13b96d6b-59ac-11ed-88d6-8c8caa828ba8:1-3 |\n+------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n\n\n##### GTID 的基本用法\n\n用一个例子，来描述GTID的基本用法\n\n要先开启GTID模式哦，并且设置：`gtid_next=AUTOMATIC`\n\n在实例 X 中创建一个表 t，并初始化一条数据\n\n```sql\n\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\n\ninsert into t values(1,1);\n```\n\n执行完之后，这条insert语句，就会记录一个binlog，并且有GTID\n\n```sql\nmysql> show master status;\n+------------------+----------+--------------+------------------+--------------------------------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                          |\n+------------------+----------+--------------+------------------+--------------------------------------------+\n| xxxxx-bin.000005 |     1349 |              |                  | 13b96d6b-59ac-11ed-88d6-8c8caa828ba8:1-8   |\n+------------------+----------+--------------+------------------+--------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> show binlog events in 'xxxxx-bin.000005';\n+------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+\n| Log_name         | Pos  | Event_type     | Server_id | End_log_pos | Info                                                              |\n+------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+\n| xxxxx-bin.000005 |    4 | Format_desc    |         1 |         125 | Server ver: 8.0.26, Binlog ver: 4                                 |\n| xxxxx-bin.000005 |  125 | Previous_gtids |         1 |         156 |                                                                   |\n| xxxxx-bin.000005 |  156 | Gtid           |         1 |         235 | SET @@SESSION.GTID_NEXT= '13b96d6b-59ac-11ed-88d6-8c8caa828ba8:8' |\n| xxxxx-bin.000005 |  235 | Query          |         1 |         317 | BEGIN                                                             |\n| xxxxx-bin.000005 |  317 | Table_map      |         1 |         365 | table_id: 170 (zs.t)                                              |\n| xxxxx-bin.000005 |  365 | Update_rows    |         1 |         427 | table_id: 170 flags: STMT_END_F                                   |\n| xxxxx-bin.000005 |  427 | Xid            |         1 |         458 | COMMIT /* xid=2224 */                                             |\n+------------------+------+----------------+-----------+-------------+-------------------------------------------------------------------+\n7 rows in set (0.00 sec)\n```\n\n\n\n假设，现在这个实例 X 是另外一个实例 A 的从库，并且此时在实例 A 上执行了下面这条插入语句：\n\n```sql\ninsert into t values(1,1);\n```\n\n并且，这条语句在实例 A 上的 GTID 是 `aaa-bbb-ccc-ddd-eee:10`\n\n那么，实例 X 作为 A 的从库，就要同步这个事务过来执行，显然会出现主键冲突，导致实例 X 的同步线程停止。这时，我们应该怎么处理呢？\n\n处理方法就是，DBA手动执行下面的这个语句序列：\n\n```sql\nset gtid_next='aaa-bbb-ccc-ddd-eee:10';\nbegin;\ncommit;\nset gtid_next=automatic;\nstart slave;\n```\n\n其中，前三条语句的作用，是通过提交一个空事务，把这个 GTID 加到实例 X 的 GTID 集合中。\n\n这样，在次在实例 X 上执行`start slave`开始同步的时候（因为之前主键冲突，实例X上的同步线程停止了），就会跳过这个`aaa-bbb-ccc-ddd-eee:10`了，避免了主键冲突。\n\n在上面的这个语句序列中，start slave 命令之前还有一句 set gtid_next=automatic。这句话的作用是“恢复 GTID 的默认分配行为”，也就是说如果之后有新的事务再执行，就还是按照原来的分配方式。\n\n\n\n\n\n##### 基于GTID的同步\n\n了解了GTID，再来看一下基于GTID的切换，是什么样的？\n\n上面已经列出了 基于 GTID同步的语句，这里在展示一下\n\n```sql\nCHANGE MASTER TO \nMASTER_HOST=$host_name \nMASTER_PORT=$port \nMASTER_USER=$user_name \nMASTER_PASSWORD=$password \nmaster_auto_position=1 \n```\n\n使用GTID进行同步的话，就比较简单了，只需要指定`master_auto_position=1 `就可以了。表示这个主备关系使用的是 GTID 协议。\n\n当主库A挂掉后，此时假设，新主库 A1的 GTID 集合（gtid_executed）记为 set_a1，从库 B 的 GTID 集合（gtid_executed）记为 set_b。接下来，我们就看看现在的主备切换逻辑。\n\n- 实例 B 指定主库 A1，基于主备协议建立连接\n- 实例 B 把 set_b 发给主库 A1\n- 实例 A1算出 set_a 与 set_b 的差集，也就是所有存在于 set_a，但是不存在于 set_b 的 GTID 的集合\n- 实例A1判断这个差集需要的所有 binlog 事务在A1中的binlog是否全都存在（可能人为删除了，可能系统自动删除了，这里不展示说）\n  - 不全都存在：直接返回错误（在基于 GTID 的主备关系里，系统认为只要建立主备关系，就必须保证主库发给备库的日志是完整的。）\n  - 全都存在：A1 从自己的 binlog 文件里面，找出第一个不在 set_b 的事务，发给 B\n- 之后就从这个事务开始，往后读文件，按顺序取 binlog 发给 B 去执行。\n\n\n\n之后这个系统就由新主库 A1写入，主库 A1的自己生成的 binlog 中的 GTID 集合格式是：`server_uuid_of_A1:1-M`\n\n因为之前从库 B 的主库是A，所以之前B的 GTID 集合格式是 `server_uuid_of_A:1-N`\n\n那么把主库切换到从库A1之后 GTID 集合的格式就变成了 `server_uuid_of_A:1-N, server_uuid_of_A1:1-M`\n\n当然，主库 A1之前也是 A 的备库，因此主库 A1和从库 B 的 GTID 集合是一样的。这就达到了我们预期。\n\n```sql\nmysql> select @@gtid_executed;\n+---------------------------------------------+\n| @@gtid_executed                             |\n+---------------------------------------------+\n| server_uuid_of_A:1-N, server_uuid_of_A1:1-M |\n+---------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n\n\n#### 对比位点和GTID同步\n\n| 基于位点的同步                                               | 基于GTID的同步                                               |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| -                                                            | 需要开启GTID模式                                             |\n| 需要从库去主库找位点，而且不准确                             | 使用GTID集合，由**主库**内部判断，很准确                     |\n| 操作复杂，change master还需要指定binlog文件和位点            | change master只需要指向新主库即可                            |\n| 不做日志的完整性判断，基于位点的协议，是由备库决定的，备库指定哪个位点，主库就发哪个位点，不做日志的完整性判断。 | 做日志的完整性判断。在基于 GTID 的主备关系里，系统认为只要建立主备关系，就必须保证主库发给备库的日志是完整的。因此，如果实例 B 需要的日志已经不存在，A’就拒绝把日志发给 B。 |\n\n\n\n## 读写分离（一主多从的应用场景）\n\n\n\n### 什么是读写分离\n\n在写少读多的场景下，写入一般是有主库负责，然后在主库上有很多从库，从库提供只读功能，供业务查询\n\n\n\n### 读写分离的架构\n\n#### 直连架构\n\n客户端（client）主动做负载均衡，这种模式下一般会把数据库的连接信息放在客户端的连接层。也就是说，由客户端来选择后端数据库进行查询。\n\n```mermaid\nflowchart TD\nclient-->|write|mysqlA\nmysqlA-.->mysqlA1\nmysqlA1-.->mysqlA\nclient-->|read|mysqlB\nclient-->|read|mysqlC\nclient-->|read|mysqlD\nmysqlA-.->mysqlB\nmysqlA-.->mysqlC\nmysqlA-.->mysqlD\n```\n\n\n\n#### proxy架构\n\n在 MySQL 和客户端之间有一个中间代理层 proxy，客户端只连接 proxy， 由 proxy 根据请求类型和上下文决定请求的分发路由。\n\n```mermaid\nflowchart TD\nclient-->proxy\nproxy-->|write|mysqlA\nmysqlA-.->mysqlA1\nmysqlA1-.->mysqlA\nproxy-->|read|mysqlB\nproxy-->|read|mysqlC\nproxy-->|read|mysqlD\nmysqlA-.->mysqlB\nmysqlA-.->mysqlC\nmysqlA-.->mysqlD\n```\n\n| 直连结构                                                     | proxy结构                             |\n| ------------------------------------------------------------ | ------------------------------------- |\n| 少了一层 proxy 转发，所以查询性能稍微好一点儿                | 对客户端比较友好                      |\n| 架构简单，排查问题方便                                       | 架构复杂，因为还需要维护proxy的高可用 |\n| 高可用查，在出现主备切换、库迁移等操作的时候，客户端都会感知到，并且需要调整数据库连接信息 |                                       |\n\n\n\n### 读写分离的缺点（过期读）\n\n不论使用哪种架构，你都会碰到我们今天要讨论的问题：由于主从可能存在延迟，客户端执行完一个更新事务后马上发起查询，如果查询选择的是从库的话，就有可能读到刚刚的事务更新之前的状态。\n\n\n\n过期读的产生原因是因为：**主备延迟**。\n\n- 可以通过上文介绍的方法，来避免主备延迟：[为什么会产生主备延迟](#为什么会产生主备延迟)\n  - 复习：为什么会产生主备延迟：备库机器差，大事务，备库压力大（有读业务），并行复制能力\n- 但是呢，主备延迟，并不能100%的避免\n\n主备延迟不能100%的避免，那怎么解决过期读呢？\n\n\n\n### 过期读的解决方案\n\n- 强制走主库方案\n- sleep方案\n- 判断主备无延迟方案（配合semi-sync方案）\n- 等主库位点方案\n- 等GTID方案\n\n\n\n#### 强制走主库方案\n\n将请求分为两类：\n\n- 一类是：必须要拿到最新结果的请求\n- 一类是：可以读到旧数据的请求\n- 对于第一类，强制将其发到主库上。对于第二类，将其发到从库上。\n\n\n\n#### sleep方案\n\n在更新成功，客户端发起查询请求的时候，对这个请求sleep一下，等待主备同步完成，在查询。这样就可以返回最新的结果了。\n\n- 存在的问题：sleep多少是一个问题？\n- 如果sleep短了，去查询，仍然会有过期读；sleep多了，对用户的体验就很不好，感觉接口调用很慢\n\n\n\n#### 判断主备无延迟方案（配合semi-sync）\n\n解决的思路是：主要主备没有延迟了，说明主备上的数据都是一样的了。\n\n那么怎么确定主备无延迟了呢？\n\n- 通过 `show slave status`命令，以下是截取 `show slave status` 结果的部分截图。\n\n- ```sql\n  >show slave status\n  *************************** 1. row ***************************\n                 Slave_IO_State: Waiting for master to send event\n                    Master_Host: sh-dba-mysql-009\n                    Master_User: repl\n                    Master_Port: 3306\n                  Connect_Retry: 10\n                Master_Log_File: mysql-bin.000001\n            Read_Master_Log_Pos: 525\n                 Relay_Log_File: relay.000002\n                  Relay_Log_Pos: 738\n          Relay_Master_Log_File: mysql-bin.000001\n          ..................\n            Exec_Master_Log_Pos: 525\n          ..................\n          Seconds_Behind_Master: 0\n          ..................\n             Retrieved_Gtid_Set: 456f3e13-6000-11e8-8bda-002272a443bb:1-2\n              Executed_Gtid_Set: 456f3e13-6000-11e8-8bda-002272a443bb:1-2\n                  Auto_Position: 1\n          ..................\n  1 row in set (0.00 sec)\n  ```\n\n- 有三种方法判断主备无延迟\n\n  - 第一种：通过`Seconds_Behind_Master`,但是它的单位是秒，如果你觉得精度不够的话，还有下面两个方案\n  - 第二种：通过对比位点的方式\n    - `Master_Log_File`和`Read_Master_Log_Pos`，表示的是读到的主库的最新位点；\n    - `Relay_Master_Log_File`和`Exec_Master_Log_Pos`，表示的是备库执行的最新位点。\n    - 如果上面两组值完全相同，说明主备无延迟。\n  - 第三种：通过对比GTID的方式\n    - `Auto_Position=1` ，表示这对主备关系使用了 GTID 协议。\n    - `Retrieved_Gtid_Set`，是备库收到的所有日志的 GTID 集合；\n    - `Executed_Gtid_Set`，是备库所有已经执行完成的 GTID 集合。\n    - 如果这两个集合相同，说明主备无延迟。\n\n存在的问题：复习一下主备同步的流程：主库-->binlog----(网络)--->备库--->relaylog--->备库执行，主库产生的binlog要通过网络传给备库的，如果在传输的过程中，有一个查询过来了，通过这个方案，判断备库是没有延迟的，但是查出来的数据，仍然是过期读。\n\n**配合 semi-sync**\n\n要解决上面的问题，就要引入半同步复制，也就是 semi-sync replication：\n\n- 主库生成binlog，传给从库\n- 从库收到binlog之后，给主库一个ack\n- 主库收到ack之后，才给客户端返回“事务完成”的确认\n\n也就是说，如果启用了 semi-sync，就表示所有给客户端发送过确认的事务，都确保了备库已经收到了这个日志。\n\n这样，`semi-sync` 配合前面`判断主备无延迟方案`,就能够确定在从库上执行的查询请求，可以避免过期读。\n\n但是，`semi-sync`+`判断主备无延迟方案`只能适用于一主一备的场景。为什么呢？\n\n- 在一主多从的场景，主库只会受到一个从库返回的ack，就会给客户端返回事务提交确认了。\n- 当然，我们也可以设置为收到所有从库返回ack，但是这样，一个sql执行的代价就太大了。\n\n这样**如果查询落在了其他的从库上，还是避免不了过期读**。\n\n还有另一个问题，在业务高峰期，更新频率很快，`判断主备无延迟`可能一直不能成功，就会导致落在从库的查询，一直无法响应。\n\n还有一个问题，事务A在时刻A提交，事务B在时刻B提交，事务C在时刻C提交，由于事务一直在不停的产生和主备同步，这个时候，如果客户端来查询事务A的结果，此时，事务A早就已经完成了，但是由于`主备无延迟`判断不通过，事务A的结果一直无法返回。\n\n**问题：**\n\n- 一主多从的时候，在某些从库执行查询请求会存在过期读的现象；\n- 在更新频繁，持续延迟的情况下，主备延迟判断不通过，可能出现过度等待的问题。\n\n\n\n#### 等主库位点方案\n\n需要使用下面这个sql命令\n\n```sql\nselect master_pos_wait(file, pos, timeout);\n```\n\n\n\n流程\n\n- 客户端发起查询请求，落在任意一个从库上，假设是`从库-C`\n- 在`从库-C`执行查询请求之前，先执行`show master status`得到当前主库执行到的 File 和 Position；\n- 然后在当前`从库-C`上执行：`select master_pos_wait(file, pos, timeout);`\n  - file：是第二步获取到的file\n  - pos：是第二步获取到的Position\n  - timeout：超时时间，单位秒，这个命令在超时时间内没返回，就返回-1\n- 在`从库-C`上的这个命令会返回一个值\n  - NULL：表示备库在同步执行期间，备库同步线程发生异常\n  - -1：超时了，会返回-1\n  - 大于等于0的正整数：表示这个命令执行的时候，`从库-C`已经把主库上的这个日志同步完成了。\n- 如果返回值是 >=0 的正整数，则在这个从库执行查询语句；\n- 否则，到主库执行查询语句。\n\n\n\n如果所有的从库都延迟超过 1 秒了，那查询压力不就都跑到主库上了吗？确实是这样。所以就需要业务开发同学做好限流策略了。\n\n\n\n#### 等GTID 方案\n\n需要使用下面这个sql语句\n\n```sql\n select wait_for_executed_gtid_set(gtid_set, timeout);\n```\n\n流程：\n\n- 客户端发起查询请求，落在任意一个从库上，假设是`从库-C`\n- 在`从库-C`执行查询请求之前，先执行`select wait_for_executed_gtid_set(gtid_set, timeout);`\n  - gtid_set：在前面等位点的方案中，是主动去主库执行 show master status。而5.7.6 版本开始，会把这个事务的 GTID 返回给客户端（需要设置`session_track_gtids`），这样等 GTID 的方案就可以减少一次查询。\n  - timeout：超时时间，单位秒，这个命令在超时时间内没返回，就返回 1\n- 在`从库-C`上的这个命令会返回一个值\n  - 等待，直到这个库执行的事务中包含传入的 gtid_set，返回 0\n  - 超时返回 1\n- 如果返回值是 0，则在这个从库执行查询语句；\n- 否则，到主库执行查询语句。\n\n跟等主库位点的方案一样，等待超时后是否直接到主库查询，需要业务开发同学来做限流考虑。\n\n\n\n#### 思考题\n\n如果使用 GTID 等位点的方案做读写分离，在对大表做 DDL 的时候会怎么样。\n\n- 主库做DDL，典型的大事务，如果持续十分钟，那么从库就是延迟10分钟\n- 在这10分钟内的所有请求，都会全部打到主库上\n- 而主库正在做DDL，更加加重了主库的负担。\n\n解决：\n\n- 业务低峰期操作\n- 使用gh-ots\n","tags":["读写分离","mysql","主备一致","高可用","主备切换","主备延迟","GTID","binlog"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的临时表从入门到入土","url":"/note/JAVA/数据库/MYSQL/mysql的临时表从入门到入土/","content":"\n\n\n\n\nmysql临时表的xmind，[点击下载]()\n\n\n\n\\#### 临时表相关 \n\n* 17 | 如何正确地显示随机消息？ \n* 34 | 到底可不可以使用join？ \n* 35 | join语句怎么优化？ \n* 36 | 为什么临时表可以重名？\n* 37 | 什么时候会使用内部临时表？\n* 43 | 要不要使用分区表？\n\n---\n\n\n\n本文的内容，是mysql中关于sql优化，比较重要的一部分内容，涉及到：\n\n- mysql的排序：就是我们日常sql语句中经常写的 order by\n\n还涉及到：\n\n- 临时文件，为什么会涉及临时文件，因为：排序的时候会有内部排序和外部排序\n- 排序的记录比较多的时候，就会用到外部排序，外部排序就会用到临时文件，使用归并排序算法\n\n还涉及到：\n\n- JOIN 语句的优化：就是我们日常开发中 a left join b 等等\n- 临时表，因为涉及到JOIN的优化\n\n这些都是很日常的开发工作中，就会用到的部分，所以这篇文章要好好掌握以下，对实战的能力提升很大\n\n\n\n## mysql的排序\n\n这部分在 Mysql的索引从入门到入土 已经介绍过了，这里我再总结一下\n\n\n\n<img src=\"mysql的临时表从入门到入土.assets/image-20230307144252828.png\" alt=\"image-20230307144252828\" style=\"zoom:80%;\" />\n\n\n\n在日常的开发过程中，经常会使用`order by`语句，那么排序的原理是什么呢？\n\n排序分为两种情况\n\n- 排序的字段有索引\n- 排序的字段没有索引\n\n有索引的排序，会直接使用索引，因为索引是有序的，所以没啥可说的。性能很高\n\n主要讨论没有索引的排序：没有索引的排序，相对来说复杂一下。\n\n一个语句是否使用了排序，可以通过：`explain`命令查看，结果中有 Using filesort ，说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置\n\n\n\nMySQL 会给每个线程分配一块`内存`用于排序，称为` sort_buffer`。\n\nsort_buffer既然是内存区域，就不可能无限的扩大，是可以通过参数`sort_buffer_size`控制的\n\n\n\n### 内部排序\n\n如果要排序的数据量小于 `sort_buffer_size`，排序就在内存中完成。 \n\n这叫做：`内部排序`，有两种算法：快排和优先队列排序(也叫堆排序)\n\n\n\n### 外部排序\n\n如果要排序的数据量 大于 `sort_buffer_size`，内存放不下，则不得不利用磁盘临时文件辅助排序。\n\n这叫做：`外部排序`，算法是归并排序\n\n\n\n### 全字段排序\n\n是指将 **排序的字段和要返回的字段**，全部放入内存，这样排序完之后，就不需要回表了。性能比较高\n\n比如：\n\n```sql\nselect name,city,age from t order by name desc;\n```\n\n如果内存放得下，就将：name，city，age 全都放入内存，在内存中使用 name 排好序，直接返回。避免了回表\n\n\n\n### rowId排序\n\n如果 MySQL 认为排序的单行长度太大（通过参数：max_length_for_sort_data），就不能将 **排序的字段和要返回的字段** 都放在内存中了\n\n只能将 **排序的字段和要返回的字段所在记录的id** 放在内存中进行排序\n\n排序完之后，在通过：**要返回的字段所在记录的id** 进行回表，取出：**要返回的字段**\n\n比如：\n\n```sql\nselect name,prov,city,address,age from t order by name desc;\n```\n\n要返回的字段：name,prov,city,address,age 太大了，内存放不下，就会将 id 和 name 放在内存中，然后通过name排序\n\n排序完成之后，在通过 id 回表查找 name,prov,city,address,age 返回给客户端\n\n\n\n### 全字段排序 VS rowid 排序\n\n- MySQL 如果觉得排序内存太小，会影响排序效率，会采用 rowid 排序算法，这样排序过程中一次可以排序更多行，但是需要回表\n- MySQL 认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，可以减少回表\n\n\n\n### 排序算法的选择\n\n判断排序的单行字段大小\n\n- 如果 单行长度大小 < max_length_for_sort_data ：全字段排序\n- 如果 单行长度大小 > max_length_for_sort_data ：rowid排序\n\n\n\n不管是全字段排序，还是rowid排序都受限制于：sort_buffer 的大小\n\n- 如果：要排序的总数据量 < sort_buffer_size ： 内部排序，使用快速排序算法\n- 如果 ：要排序的总数据量 > sort_buffer_size：\n  - 继续判断结果量级，结果量级大，比如：order by xx limit 10000：外部排序，使用归并排序算法\n  - 结果量级小，比如：order by xx limit 3：内部排序，使用 优化队列算法（堆排序）\n\n\n\n表的存储引擎\n\n- 要排序的表是InnoDB的： 优先选择：全字段排序，rowid 排序会要求回表多造成磁盘读，因此不会被优先选择\n- 要排序的是内存的(比如memory)： 优先选择：rowid排序，因为是内存表，不涉及磁盘读，使用rowid可以一次性排更多的数据\n\n\n\n上面我们说过，当排序的记录数比较多，sort_buffer 内存放不下，会使用临时文件辅助排序\n\n接下老我们就看看：Mysql 中的临时文件\n\n\n\n## Mysql的临时文件\n\n\n\n临时文件和临时表是不一样的东西！\n\n临时文件，一般是在排序过程中，内存放不下，会将数据存在磁盘中，这时，存在磁盘中的文件就是临时文件。排序完成之后，就删除了。\n\n关于临时文件，这里不过多的解释。\n\n我们来看看临时表吧\n\n\n\n## Mysql的临时表\n\n\n\n### 什么是临时表\n\n有的人可能会认为，临时表就是内存表。\n\n但是，这两个概念可是完全不同的。\n\n内存表，指的是使用 Memory 引擎的表，建表语法是 create table … engine=memory。这种表的数据都保存在内存里，系统重启的时候会被清空，但是表结构还在。除了这两个特性看上去比较“奇怪”外，从其他的特征上看，它就是一个正常的表。\n\n临时表，可以使用各种引擎类型 。如果是使用 InnoDB 引擎或者 MyISAM 引擎的临时表，写数据的时候是写到磁盘上的。当然，临时表也可以使用 Memory 引擎。\n\n\n\n### 临时表的特性\n\n通过一个实例，来了解临时表的特性\n\n| session A                                                    | session B                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| create temporary table t (c int) engine=myisam;              |                                                              |\n|                                                              | show create table t;<br/><font color='red'>(Table 't' doesn't exist)</font> |\n| create table t (id int primary key) engine=innodb;           |                                                              |\n| show create table t;<br/><font color='green'>//create temporary table t (c int) engine=myisam;</font> |                                                              |\n| show tables;<br/><font color='green'>//只显示普通表t</font>  |                                                              |\n|                                                              | insert into t value (1);<br/>select * from t;<br/>//返回1    |\n| select * from t;<br/>//Empty Set                             |                                                              |\n\n临时表在使用上有以下几个特点：\n\n- 建表语法是 create temporary table …\n- 一个临时表只能被创建它的 session 访问，对其他线程不可见。所以，图中 session A 创建的临时表 t，对于 session B 就是不可见的。\n- 临时表可以与普通表同名。\n- session A 内有同名的临时表和普通表的时候，show create 语句，以及增删改查语句访问的是临时表。\n- show tables 命令不显示临时表。\n\n\n\n<img src=\"mysql的临时表从入门到入土.assets/image-20230307150000571.png\" alt=\"image-20230307150000571\" />\n\n\n\n### 哪里会用到临时表\n\n<img src=\"mysql的临时表从入门到入土.assets/image-20230307145644973.png\" alt=\"image-20230307145644973\"  />\n\n\n\n### 怎么创建临时表\n\n<img src=\"mysql的临时表从入门到入土.assets/image-20230307145631925.png\" alt=\"image-20230307145631925\" style=\"zoom:80%;\" />\n\n\n\n### 临时表的分类\n\n<img src=\"mysql的临时表从入门到入土.assets/image-20230307165554003.png\" alt=\"image-20230307165554003\" />\n\n\n\n### 临时表的日志\n\n<img src=\"mysql的临时表从入门到入土.assets/image-20230307165507644.png\" alt=\"image-20230307165507644\" />\n\n\n\n\n\n## JOIN语句\n\n\n\n### JOIN的基本概念\n\n- 笛卡尔积\n- 隐式内连接\n  - 等值连接\n  - 非等值连接\n- 自连接\n- 外连接\n  - 左外连接\n  - 右外连接\n  - 全外连接\n- 内连接\n- 交叉连接\n\n可以参考：mysql的连接查询.md 一文，这里不再赘述\n\n\n\n### JOIN语句的分类\n\n\n\n#### 数据准备\n\n- 准备 表t1：有索引a，100条记录\n- 准备 表t2：有索引a，1000条记录\n\n```sql\nCREATE TABLE `t2` (\n  `id` int(11) NOT NULL,\n  `a` int(11) DEFAULT NULL,\n  `b` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `a` (`a`)\n) ENGINE=InnoDB;\n\ndrop procedure idata;\ndelimiter ;;\ncreate procedure idata()\nbegin\n  declare i int;\n  set i=1;\n  while(i<=1000)do\n    insert into t2 values(i, i, i);\n    set i=i+1;\n  end while;\nend;;\ndelimiter ;\ncall idata();\n\ncreate table t1 like t2;\ninsert into t1 (select * from t2 where id<=100);\n```\n\n\n\n\n\n#### Index Nested-Loop Join（NLJ）\n\n```sql\nmysql> explain select * from t1 straight_join t2 on (t1.a=t2.a);\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref     | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL    |  100 |   100.00 | Using where |\n|  1 | SIMPLE      | t2    | NULL       | ref  | a             | a    | 5       | zs.t1.a |    1 |   100.00 | NULL        |\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n执行过程\n\n- 从表 t1 中读入一行数据 R；\n- 从数据行 R 中，取出 a 字段到表 t2 里去查找；\n- 取出表 t2 中满足条件的行，跟 R 组成一行，作为结果集的一部分；\n- 重复执行步骤 1 到 3，直到表 t1 的末尾循环结束。\n\n这个过程是先遍历表 t1，然后根据从表 t1 中取出的每行数据中的 a 值，去表 t2 中查找满足条件的记录。并且可以用上表t2的索引，所以我们称之为“Index Nested-Loop Join”，简称 NLJ。\n\n\n\n#### Simple Nested-Loop Join（SNL）\n\n```sql\nmysql> explain select * from t1 straight_join t2 on (t1.a=t2.b);\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL |  100 |   100.00 | NULL                                               |\n|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 1000 |    10.00 | Using where; Using join buffer (Block Nested Loop) |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n由于表 t2 的字段 b 上没有索引，因此再用图 2 的执行流程时，每次到 t2 去匹配的时候，就要做一次全表扫描。\n\n你可以先设想一下这个问题，继续使用图 2 的算法，是不是可以得到正确的结果呢？如果只看结果的话，这个算法是正确的，而且这个算法也有一个名字，叫做“Simple Nested-Loop Join”。\n\n但是，这样算来，这个 SQL 请求就要扫描表 t2 多达 100 次，总共扫描 100*1000=10 万行。\n\n效率极低。\n\n但是mysql并没有使用这种算法，因为这种算法效率极低，通过执行计划也可以看到：Using where; Using join buffer (Block Nested Loop) \n\nmysql使用的是 Block Nested Loop\n\n\n\n#### Block Nested Loop Join（BNL）\n\n\n\n```sql\nmysql> explain select * from t1 straight_join t2 on (t1.a=t2.b);\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL |  100 |   100.00 | NULL                                               |\n|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 1000 |    10.00 | Using where; Using join buffer (Block Nested Loop) |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n当`被驱动表`无法使用索引的时候，算法的流程是这样的：\n\n- 把表 t1 的数据读入线程内存 join_buffer 中，由于我们这个语句中写的是 select *，因此是把整个表 t1 放入了内存；\n\n- 扫描表 t2，把表 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回。\n\n**如果驱动表的数据太多，join_buffer放不下怎么办？**\n\njoin_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。\n\n如果放不下表 t1 的所有数据话，策略很简单，就是分段放。\n\n执行过程就变成了：\n\n- 扫描表 t1，顺序读取数据行放入 join_buffer 中，放完第 88 行 join_buffer 满了，继续第 2 步；\n- 扫描表 t2，把 t2 中的每一行取出来，跟 join_buffer 中的数据做对比，满足 join 条件的，作为结果集的一部分返回；\n- 清空 join_buffer；\n- 继续扫描表 t1，顺序读取第 88 行之后的12 行数据放入 join_buffer 中，继续执行第 2 步。\n\n这个流程才体现出了这个算法名字中“Block”的由来，表示“分块去 join”\n\n\n\n#### hash join（mysql 8.0 ）\n\n```sql\nmysql> explain select * from t1 straight_join t2 on (t1.a=t2.b);\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL |  100 |   100.00 | NULL                                       |\n|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 1000 |    10.00 | Using where; Using join buffer (hash join) |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n同样的语句，在mysql8.0版本中，就不是使用 BNL了，而是使用 hash join\n\nhash join 是mysql 8 的优化，在8之前这种语句使用的是：BNL，在8之后是 hash join\n\n\n\nhash join 和 BNL 思路上是一致的\n- 将 驱动表 加载到内存\n  - BNL：所需的字段放在join_buffer中\n  - hash join： 在 join_buffer中存的是一个hash表，key是将连接字段（join的字段）hash后的结果；value是所需的字段\n- join_buffer不够用的时候\n  - BNL：分块加载\n  - hash join：存到磁盘上\n- 读取 被驱动表 中记录与内存中的驱动表作比较\n  - BNL：遍历内存中的驱动表，时间复杂度是 O(n)\n  - hash join：被驱动表的记录先hash，然后去内存中的hash表查找，时间复杂度是 O(1)\n- 返回结果集\n\n个人理解：主要是匹配的过程中，hash比BNL时间复杂度更好，所以更快\n\n\n\n#### 它们之间的区别和联系\n\n<img src=\"mysql的临时表从入门到入土.assets/image-20230307214104063.png\" alt=\"image-20230307214104063\"  />\n\n\n\n\n\n### 是否可以使用JOIN语句\n\n能不能使用 join 语句？\n\n- 如果可以使用 Index Nested-Loop Join 算法，也就是说可以用上被驱动表上的索引，其实是没问题的；\n\n- 如果使用 Block Nested-Loop Join 算法，扫描行数就会过多。尤其是在大表上的 join 操作，这样可能要扫描被驱动表很多次，会占用大量的系统资源（比较次数多，CPU也会升高）。所以这种 join 尽量不要用。\n\n所以你在判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。\n\n\n\n### 驱动表应该怎么选\n\n先说结论：应该选择小表作为驱动表\n\n\n\n#### 在 NLJ 的情况下\n\n在 NLJ 的情况下，`驱动表`走全表扫描，`被驱动表`走索引树搜索\n\n假设`被驱动表`的行数是 M，每次在`驱动表`查一行数据，要先搜索索引 a，在搜索主键索引。\n\n每次搜索一棵树近似复杂度是 以2为底的M的对数，记为： log2M\n\n所以在`被驱动表`上查一行数据的时间复杂度就是： 2 * log2M（因为走了2次索引，一次普通索引，一次主键索引）\n\n假设`驱动表`的行数是 N，执行过程就要扫描驱动表的 N 行，然后对于每一行，都去`被驱动表`上匹配一次。\n\n因此整个执行过程，近似复杂度为：N + N * 2 * log2M\n\n显然，N 对扫描行数的影响更大，因此应该让小表来做驱动表。\n\n>  如果你没觉得这个影响有那么“显然”， 可以这么理解：\n>\n> N 扩大 1000 倍的话，扫描行数就会扩大 1000 倍；\n>\n> 而 M 扩大 1000 倍，扫描行数扩大不到 10 倍。\n\n总结：在 NLJ 的情况下，需要选择小表作为驱动表。\n\n\n\n#### 在 BNL 的情况下\n\n在 BNL 的情况下，`驱动表`走全表扫描，`被驱动表`也是走全表扫描\n\n假设小表的行数是 N，大表的行数是 M\n\n在 BNL 算法，会首先把 `驱动表`加载到内存中，然后扫描`被驱动表`，扫描一行，就和内存中的`驱动表`做一次匹配，所以是：\n\n- 两次全表扫描：M + N\n- 内存中的判断次数是 M * N\n\n可以看到，调换这两个算式中的 M 和 N 没差别，因此这时候无论选择哪个表做驱动表，执行耗时是一样的。\n\n\n\n**但是！！！**如果驱动表的数据比较多，我们知道此时需要分块join\n\n\n\n此时假设，`驱动表`的数据行数是 N，需要分 K 段才能完成算法流程，`被驱动表`的数据行数是 M\n\n注意，这里的 K 不是常数，N 越大 K 就会越大\n\n所以：对驱动表的扫描次数是N； 对被驱动表的扫描次数是：K * M，此时：\n\n- 总的扫描次数是：N + K * M\n- 总的内存判断次数是： N * M\n\n显然，内存判断次数是不受选择哪个表作为驱动表影响的。而考虑到扫描行数，在 M 和 N 大小确定的情况下，K 小一些，也就是分段小一些，整个算式的结果会更小。\n\n为了让分段更小，有两个办法：\n\n- 选择小表作为驱动表\n- 增大 join_buffer_size\n\n\n\n#### 总结\n\n如果要使用 join，应该选择大表做驱动表还是选择小表做驱动表？\n\n- 如果是 Index Nested-Loop Join 算法，应该选择小表做驱动表；\n- 如果是 Block Nested-Loop Join 算法：\n  - 在 join_buffer_size 足够大的时候，是一样的；\n  - 在 join_buffer_size 不够大的时候（这种情况更常见），应该选择小表做驱动表。\n\n所以，这个问题的结论就是，总是应该使用小表做驱动表。\n\n\n\n#### 什么是小表\n\n这里所说的小表，并不是说表的数据量是多还是少；\n\n而是作为 join 的数据量的大小。\n\n比如下面两个语句：\n\n```sql\nselect * from t1 straight_join t2 on (t1.b=t2.b) where t2.id<=50;\nselect * from t2 straight_join t1 on (t1.b=t2.b) where t2.id<=50;\n```\n\n两个语句使用 b 字段进行 join，所以都用不上索引。\n\n但如果是用第二个语句的话，join_buffer 只需要放入 t2 的前 50 行，显然是更好的。所以这里，“t2 的前 50 行”是那个相对小的表，也就是“小表”。\n\n\n\n继续看另一个例子\n\n```sql\nselect t1.b,t2.* from  t1  straight_join t2 on (t1.b=t2.b) where t2.id<=100;\nselect t1.b,t2.* from  t2  straight_join t1 on (t1.b=t2.b) where t2.id<=100;\n```\n\n两个语句都是使用 b 字段进行 join，所以都用不上索引。并且 表t1 和 表t2 的数据量都是100行。\n\n但是，这两条语句每次查询放入 join_buffer 中的数据是不一样的：\n\n- 表 t1 只查字段 b，因此如果把 t1 放到 join_buffer 中，则 join_buffer 中只需要放入 b 的值；\n- 表 t2 需要查所有的字段，因此如果把表 t2 放到 join_buffer 中的话，就需要放入三个字段 id、a 和 b。\n\n所以这里，我们应该选择表 t1 作为驱动表。也就是说在这个例子里，“只需要一列参与 join 的表 t1”是那个相对小的表。\n\n\n\n\n\n## JOIN语句的优化\n\n在上文，我们知道了什么时候可以使用 JOIN 语句，以及 JOIN 语句是怎么的内部执行逻辑，这一节我们来看一下怎么优化 JOIN 语句。\n\n\n\n### 数据准备\n\n- 表 t1 里，插入了 1000 行数据，每一行的 a=1001-id 的值。也就是说，表 t1 中字段 a 是逆序的\n- 表 t2 中插入了 100 万行数据\n\n```sql\ncreate table t1(id int primary key, a int, b int, index(a));\ncreate table t2 like t1;\ndrop procedure idata;\ndelimiter ;;\ncreate procedure idata()\nbegin\n  declare i int;\n  set i=1;\n  while(i<=1000)do\n    insert into t1 values(i, 1001-i, i);\n    set i=i+1;\n  end while;\n  \n  set i=1;\n  while(i<=1000000)do\n    insert into t2 values(i, i, i);\n    set i=i+1;\n  end while;\n\nend;;\ndelimiter ;\ncall idata();\n```\n\n\n\n\n\n### Multi-Range Read （MRR）优化\n\n什么是MRR优化\n\n当回表的数据量比较多的时候，将需要回表的主键id先暂存到内存中，然后进行排序，将排序后的id在进行回表，此时id是顺序的，此时回表，近似于磁盘的顺序读。可以提高性能\n\n\n\nMRR优化默认是关闭的，开启：set optimizer_switch=\"mrr_cost_based=off\"\n\n\n\n如果使用了 order by 语句，MRR就不生效了\n\n\n\n\n\n\n\n\n\n### Batched Key Access（BKA）\n\n\n\nBKA 算法，其实就是对 NLJ 算法的优化\n\n\n\n\n\n\n\n# -------------------------------\n\n\n\nmysql\n\n\n\n\n\n临时文件和临时表\n\n\n\n临时表：为什么这里的临时表使用的引擎是memory？ A：tmp_table_size 这个配置限制了内存临时表的大小，默认值是 16M。如果临时表大小超过了 tmp_table_size，那么内存临时表就会转成磁盘临时表；磁盘临时表使用的引擎默认是 InnoDB，是由参数 internal_tmp_disk_storage_engine 控制的。而内存临时表使用的是memory引擎\n\n\n\n\n\n\n\n```sql\n-- 创建表t2，主键索引和字段a的普通索引\nCREATE TABLE `t2` (\n  `id` int(11) NOT NULL,\n  `a` int(11) DEFAULT NULL,\n  `b` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `a` (`a`)\n) ENGINE=InnoDB;\n\n-- 通过存储过程，初始化1000条记录\ndrop procedure idata;\ndelimiter ;;\ncreate procedure idata()\nbegin\n  declare i int;\n  set i=1;\n  while(i<=1000)do\n    insert into t2 values(i, i, i);\n    set i=i+1;\n  end while;\nend;;\ndelimiter ;\ncall idata();\n\n-- 创建表t1，主键索引和字段a的普通索引\n-- 初始化100条记录\ncreate table t1 like t2;\ninsert into t1 (select * from t2 where id<=100)\n```\n\n\n\n#### 驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段\n\n```sql\nmysql> explain select * from t1 straight_join t2 on t1.a = t2.a;\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref     | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL    |  100 |   100.00 | Using where |\n|  1 | SIMPLE      | t2    | NULL       | ref  | a             | a    | 5       | zs.t1.a |    1 |   100.00 | NULL        |\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n为什么驱动表的字段a有索引，为啥不走索引呢？\n\n- 原因可能是因为没有过滤条件；\n\n#### 驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件\n\n```sql\nmysql> explain select * from t1 straight_join t2 on t1.a = t2.a where t1.a > 50;\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref     | rows | filtered | Extra       |\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL    |  100 |    50.00 | Using where |\n|  1 | SIMPLE      | t2    | NULL       | ref  | a             | a    | 5       | zs.t1.a |    1 |   100.00 | NULL        |\n+----+-------------+-------+------------+------+---------------+------+---------+---------+------+----------+-------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n为什么驱动表的字段a有索引，而且添加了过滤条件，还是不走索引呢？\n\n- 因为是查询的 * ，即使走了索引 a，还是需要回表，优化器认为还不如直接走全表呢\n- 因为过滤条件过滤的数据比较少，只过滤了50%，优化器认为全表扫描比走索引更快\n\n\n\n#### 驱动表使用索引字段关联；被驱动表使用索引关联；查驱动表的主键id；驱动表添加过滤条件\n\n```sql\nmysql> explain select t1.id from t1 straight_join t2 on t1.a = t2.a where t1.a > 50;\n+----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+\n| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref     | rows | filtered | Extra                    |\n+----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+\n|  1 | SIMPLE      | t1    | NULL       | range | a             | a    | 5       | NULL    |   50 |   100.00 | Using where; Using index |\n|  1 | SIMPLE      | t2    | NULL       | ref   | a             | a    | 5       | zs.t1.a |    1 |   100.00 | Using index              |\n+----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+--------------------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n驱动表的字段a有索引，而且添加了过滤条件，查询驱动表的主键id，会用到覆盖索引，不回表了，所以走了索引；\n\n\n\n#### 驱动表使用索引字段关联；被驱动表使用索引关联；查所有字段；驱动表添加过滤条件，大范围过滤\n\n```sql\nmysql> explain select * from t1 straight_join t2 on t1.a = t2.a where t1.a > 90;\n+----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+\n| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref     | rows | filtered | Extra                 |\n+----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+\n|  1 | SIMPLE      | t1    | NULL       | range | a             | a    | 5       | NULL    |   10 |   100.00 | Using index condition |\n|  1 | SIMPLE      | t2    | NULL       | ref   | a             | a    | 5       | zs.t1.a |    1 |   100.00 | NULL                  |\n+----+-------------+-------+------------+-------+---------------+------+---------+---------+------+----------+-----------------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n驱动表的字段a有索引，而且添加了过滤条件，虽然查询的是所有字段，需要回表，但是因为过滤条件过滤90%的数据，优化器因为回表比全表扫描代价低\n\n\n\n以上的情况适用于 t1 的单表查询也是一样的，所以总结下来 join查询其实就是多个单表查询，然后汇总在一起；\n\n```sql\n-- ALL\nexplain select * from t1;\n-- ALL\nexplain select * from t1 where t1.a > 50;\n-- range\nexplain select * from t1 where t1.a > 90;\n-- range\nexplain select id from t1 where t1.a > 50;\n```\n\n\n\n\n\nmysql5\n\n- Using where; Using join buffer (Block Nested Loop)\n\n```sql\nmysql> explain select * from t1 straight_join t2 on t1.a = t2.b;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL |  100 |   100.00 | NULL                                               |\n|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 1000 |    10.00 | Using where; Using join buffer (Block Nested Loop) |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\n2 rows in set, 1 warning (0.06 sec)\n```\n\n\n\nmysql8\n\n- Using where; Using join buffer (hash join)\n\n```sql\nmysql> explain select * from t1 straight_join t2 on t1.a = t2.b;\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | a             | NULL | NULL    | NULL |  100 |   100.00 | NULL                                       |\n|  1 | SIMPLE      | t2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 1000 |    10.00 | Using where; Using join buffer (hash join) |\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+\n2 rows in set, 1 warning (0.00 sec)\n```\n\n\n\n\n\n使用order by的话，就不会使用MRR了\n\n```sql\nmysql> set optimizer_switch=\"mrr_cost_based=off\";\nQuery OK, 0 rows affected (0.01 sec)\nmysql> explain select * from t2 where a >= 100 and a<=200;\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+\n| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                            |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+\n|  1 | SIMPLE      | t2    | NULL       | range | a             | a    | 5       | NULL |  101 |   100.00 | Using index condition; Using MRR |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+----------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> explain select * from t2 where a >= 100 and a<=200 order by a asc;\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                 |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n|  1 | SIMPLE      | t2    | NULL       | range | a             | a    | 5       | NULL |  101 |   100.00 | Using index condition |\n+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+\n1 row in set, 1 warning (0.01 sec)\n```\n\n\n\n\n\n\n\n\n\nmysql的临时表存放位置\n\n在 5.6 以及之前的版本里，MySQL 会在临时文件目录下创建一个相同前缀、以.ibd 为后缀的文件，用来存放数据文件；\n\n```sql\nmysql> show variables like 'tmpdir';\n+---------------+-------------------------------------------------+\n| Variable_name | Value                                           |\n+---------------+-------------------------------------------------+\n| tmpdir        | C:\\Windows\\SERVIC~1\\NETWOR~1\\AppData\\Local\\Temp |\n+---------------+-------------------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n\n\n- 其中 C:\\Windows\\SERVIC~1\\NETWOR~1\\AppData\\Local\\Temp  就是临时文件目录，其中的 SERVIC~1\\NETWOR~1 是啥意思，我不知道\n- 我是win电脑，可以创建一个临时表，然后用everything搜一下，就能找到这个目录\n\n而从 5.7 版本开始，MySQL 引入了一个临时文件表空间，专门用来存放临时文件的数据。因此，我们就不需要再创建 ibd 文件了。\n\n```sql\nmysql> show variables like 'innodb_temp_data_file_path';\n+----------------------------+-----------------------+\n| Variable_name              | Value                 |\n+----------------------------+-----------------------+\n| innodb_temp_data_file_path | ibtmp1:12M:autoextend |\n+----------------------------+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n- innodb_temp_data_file_path：定义临时表空间的路径、文件名、初始化大小和最大上限。\n- 其中`ibtmp1`就是临时文件表空间，它在windows下是一个文件，不是一个目录。\n\n![image-20230105211938528](mysql的临时表从入门到入土.assets/image-20230105211938528.png)\n\n\n\n\n\n\n\n\n\n# 分区表的底层原理\n\n​\t\t分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引知识在各个底层表上各自加上一个完全相同的索引。从存储引擎的角度来看，底层表和普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分。\n\n​\t\t分区表的操作按照以下的操作逻辑进行：\n\n​\t\t**select查询**\n\n​\t\t当查询一个分区表的时候，分区层先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据\n\n​\t\t**insert操作**\n\n​\t\t当写入一条记录的时候，分区层先打开并锁住所有的底层表，然后确定哪个分区接受这条记录，再将记录写入对应底层表\n\n​\t\t**delete操作**\n\n​\t\t当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作\n\n​\t\t**update操作**\n\n​\t\t当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录再哪个分区，然后取出数据并更新，再判断更新后的数据应该再哪个分区，最后对底层表进行写入操作，并对源数据所在的底层表进行删除操作\n\n​\t\t有些操作时支持过滤的，例如，当删除一条记录时，MySQL需要先找到这条记录，如果where条件恰好和分区表达式匹配，就可以将所有不包含这条记录的分区都过滤掉，这对update同样有效。如果是insert操作，则本身就是只命中一个分区，其他分区都会被过滤掉。mysql先确定这条记录属于哪个分区，再将记录写入对应得曾分区表，无须对任何其他分区进行操作\n\n​\t\t虽然每个操作都会“先打开并锁住所有的底层表”，但这并不是说分区表在处理过程中是锁住全表的，如果存储引擎能够自己实现行级锁，例如innodb，则会在分区层释放对应表锁。\n\n\n\n# 范围分区\n\n​\t\t范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用values less than运算符来定义。\n\n​\t\t1、创建普通的表\n\n```sql\nCREATE TABLE employees (\n    id INT NOT NULL,\n    fname VARCHAR(30),\n    lname VARCHAR(30),\n    hired DATE NOT NULL DEFAULT '1970-01-01',\n    separated DATE NOT NULL DEFAULT '9999-12-31',\n    job_code INT NOT NULL,\n    store_id INT NOT NULL\n);\n```\n\n​\t\t2、创建带分区的表，下面建表的语句是按照store_id来进行分区的，指定了4个分区\n\n```sql\nCREATE TABLE employees (\n    id INT NOT NULL,\n    fname VARCHAR(30),\n    lname VARCHAR(30),\n    hired DATE NOT NULL DEFAULT '1970-01-01',\n    separated DATE NOT NULL DEFAULT '9999-12-31',\n    job_code INT NOT NULL,\n    store_id INT NOT NULL\n)\nPARTITION BY RANGE (store_id) (\n    PARTITION p0 VALUES LESS THAN (6),\n    PARTITION p1 VALUES LESS THAN (11),\n    PARTITION p2 VALUES LESS THAN (16),\n    PARTITION p3 VALUES LESS THAN (21)\n);\n--在当前的建表语句中可以看到，store_id的值在1-5的在p0分区，6-10的在p1分区，11-15的在p3分区，16-20的在p4分区，但是如果插入超过20的值就会报错，因为mysql不知道将数据放在哪个分区\n```\n\n​\t\t3、可以使用less than maxvalue来避免此种情况\n\n```sql\nCREATE TABLE employees (\n    id INT NOT NULL,\n    fname VARCHAR(30),\n    lname VARCHAR(30),\n    hired DATE NOT NULL DEFAULT '1970-01-01',\n    separated DATE NOT NULL DEFAULT '9999-12-31',\n    job_code INT NOT NULL,\n    store_id INT NOT NULL\n)\nPARTITION BY RANGE (store_id) (\n    PARTITION p0 VALUES LESS THAN (6),\n    PARTITION p1 VALUES LESS THAN (11),\n    PARTITION p2 VALUES LESS THAN (16),\n    PARTITION p3 VALUES LESS THAN MAXVALUE\n);\n--maxvalue表示始终大于等于最大可能整数值的整数值\n```\n\n​\t\t4、可以使用相同的方式根据员工的职务代码对表进行分区\n\n```sql\nCREATE TABLE employees (\n    id INT NOT NULL,\n    fname VARCHAR(30),\n    lname VARCHAR(30),\n    hired DATE NOT NULL DEFAULT '1970-01-01',\n    separated DATE NOT NULL DEFAULT '9999-12-31',\n    job_code INT NOT NULL,\n    store_id INT NOT NULL\n)\nPARTITION BY RANGE (job_code) (\n    PARTITION p0 VALUES LESS THAN (100),\n    PARTITION p1 VALUES LESS THAN (1000),\n    PARTITION p2 VALUES LESS THAN (10000)\n);\n```\n\n​\t\t5、可以使用date类型进行分区：如虚妄根据每个员工离开公司的年份进行划分，如year(separated)\n\n```sql\nCREATE TABLE employees (\n    id INT NOT NULL,\n    fname VARCHAR(30),\n    lname VARCHAR(30),\n    hired DATE NOT NULL DEFAULT '1970-01-01',\n    separated DATE NOT NULL DEFAULT '9999-12-31',\n    job_code INT,\n    store_id INT\n)\nPARTITION BY RANGE ( YEAR(separated) ) (\n    PARTITION p0 VALUES LESS THAN (1991),\n    PARTITION p1 VALUES LESS THAN (1996),\n    PARTITION p2 VALUES LESS THAN (2001),\n    PARTITION p3 VALUES LESS THAN MAXVALUE\n);\n```\n\n​\t\t6、可以使用函数根据range的值来对表进行分区，如timestampunix_timestamp()\n\n```sql\nCREATE TABLE quarterly_report_status (\n    report_id INT NOT NULL,\n    report_status VARCHAR(20) NOT NULL,\n    report_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)\nPARTITION BY RANGE ( UNIX_TIMESTAMP(report_updated) ) (\n    PARTITION p0 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-01-01 00:00:00') ),\n    PARTITION p1 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-04-01 00:00:00') ),\n    PARTITION p2 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-07-01 00:00:00') ),\n    PARTITION p3 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-10-01 00:00:00') ),\n    PARTITION p4 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-01-01 00:00:00') ),\n    PARTITION p5 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-04-01 00:00:00') ),\n    PARTITION p6 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-07-01 00:00:00') ),\n    PARTITION p7 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-10-01 00:00:00') ),\n    PARTITION p8 VALUES LESS THAN ( UNIX_TIMESTAMP('2010-01-01 00:00:00') ),\n    PARTITION p9 VALUES LESS THAN (MAXVALUE)\n);\n--timestamp不允许使用任何其他涉及值的表达式\n```\n\n基于时间间隔的分区方案，在mysql5.7中，可以基于范围或事件间隔实现分区方案，有两种选择\n\n1、基于范围的分区，对于分区表达式，可以使用操作函数基于date、time、或者datatime列来返回一个整数值\n\n```sql\nCREATE TABLE members (\n    firstname VARCHAR(25) NOT NULL,\n    lastname VARCHAR(25) NOT NULL,\n    username VARCHAR(16) NOT NULL,\n    email VARCHAR(35),\n    joined DATE NOT NULL\n)\nPARTITION BY RANGE( YEAR(joined) ) (\n    PARTITION p0 VALUES LESS THAN (1960),\n    PARTITION p1 VALUES LESS THAN (1970),\n    PARTITION p2 VALUES LESS THAN (1980),\n    PARTITION p3 VALUES LESS THAN (1990),\n    PARTITION p4 VALUES LESS THAN MAXVALUE\n);\n\nCREATE TABLE quarterly_report_status (\n    report_id INT NOT NULL,\n    report_status VARCHAR(20) NOT NULL,\n    report_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n)\nPARTITION BY RANGE ( UNIX_TIMESTAMP(report_updated) ) (\n    PARTITION p0 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-01-01 00:00:00') ),\n    PARTITION p1 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-04-01 00:00:00') ),\n    PARTITION p2 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-07-01 00:00:00') ),\n    PARTITION p3 VALUES LESS THAN ( UNIX_TIMESTAMP('2008-10-01 00:00:00') ),\n    PARTITION p4 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-01-01 00:00:00') ),\n    PARTITION p5 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-04-01 00:00:00') ),\n    PARTITION p6 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-07-01 00:00:00') ),\n    PARTITION p7 VALUES LESS THAN ( UNIX_TIMESTAMP('2009-10-01 00:00:00') ),\n    PARTITION p8 VALUES LESS THAN ( UNIX_TIMESTAMP('2010-01-01 00:00:00') ),\n    PARTITION p9 VALUES LESS THAN (MAXVALUE)\n);\n```\n\n2、基于范围列的分区，使用date或者datatime列作为分区列\n\n```sql\nCREATE TABLE members (\n    firstname VARCHAR(25) NOT NULL,\n    lastname VARCHAR(25) NOT NULL,\n    username VARCHAR(16) NOT NULL,\n    email VARCHAR(35),\n    joined DATE NOT NULL\n)\nPARTITION BY RANGE COLUMNS(joined) (\n    PARTITION p0 VALUES LESS THAN ('1960-01-01'),\n    PARTITION p1 VALUES LESS THAN ('1970-01-01'),\n    PARTITION p2 VALUES LESS THAN ('1980-01-01'),\n    PARTITION p3 VALUES LESS THAN ('1990-01-01'),\n    PARTITION p4 VALUES LESS THAN MAXVALUE\n);\n```\n\n### \t\t真实案例：\n\n```sql\n#不分区的表\nCREATE TABLE no_part_tab\n(id INT DEFAULT NULL,\nremark VARCHAR(50) DEFAULT NULL,\nd_date DATE DEFAULT NULL\n)ENGINE=MYISAM;\n#分区的表\nCREATE TABLE part_tab\n(id INT DEFAULT NULL,\nremark VARCHAR(50) DEFAULT NULL,\nd_date DATE DEFAULT NULL\n)ENGINE=MYISAM\nPARTITION BY RANGE(YEAR(d_date))(\nPARTITION p0 VALUES LESS THAN(1995),\nPARTITION p1 VALUES LESS THAN(1996),\nPARTITION p2 VALUES LESS THAN(1997),\nPARTITION p3 VALUES LESS THAN(1998),\nPARTITION p4 VALUES LESS THAN(1999),\nPARTITION p5 VALUES LESS THAN(2000),\nPARTITION p6 VALUES LESS THAN(2001),\nPARTITION p7 VALUES LESS THAN(2002),\nPARTITION p8 VALUES LESS THAN(2003),\nPARTITION p9 VALUES LESS THAN(2004),\nPARTITION p10 VALUES LESS THAN maxvalue);\n#插入未分区表记录\nDROP PROCEDURE IF EXISTS no_load_part;\n \n\nDELIMITER//\nCREATE PROCEDURE no_load_part()\nBEGIN\n    DECLARE i INT;\n    SET i =1;\n    WHILE i<80001\n    DO\n    INSERT INTO no_part_tab VALUES(i,'no',ADDDATE('1995-01-01',(RAND(i)*36520) MOD 3652));\n    SET i=i+1;\n    END WHILE;\nEND//\nDELIMITER ;\n \nCALL no_load_part;\n#插入分区表记录\nDROP PROCEDURE IF EXISTS load_part;\n \nDELIMITER&& \nCREATE PROCEDURE load_part()\nBEGIN\n    DECLARE i INT;\n    SET i=1;\n    WHILE i<80001\n    DO\n    INSERT INTO part_tab VALUES(i,'partition',ADDDATE('1995-01-01',(RAND(i)*36520) MOD 3652));\n    SET i=i+1;\n    END WHILE;\nEND&&\nDELIMITER ;\n \nCALL load_part;\n```\n\n","tags":["mysql","临时表","order by","join","分区表"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的性能调优从入门到入土","url":"/note/JAVA/数据库/MYSQL/mysql的性能调优从入门到入土/","content":"\n---\n\n\n\n\n\n\n\n资料：打开\n\n\n\n## 7.MySQL中 in 和 exists 的区别？\n\n\n\nMySQL中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。我们可能认为exists比in语句的效率要高，这种说法其实是不准确的，要区分情景：\n\n1、如果查询的两个表大小相当，那么用in和exists差别不大。\n\n2、如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。\n\n3、not in 和not exists：如果查询语句使用了not in，那么内外表都进行全表扫描，没有用到索引；而not extsts的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。\n\n\n\n\n\nmysql的索引优化，联合索引使用的时候，时间+站点+code， 通过时间筛选之后，数据还比较多，此时效率很低。可以把所以改成：站点+时间+code，这样通过站点筛选之后的数据，就剩下很少了，此时效率很高。\n\n\n\n事务中，行锁是在语句执行时才加上的，不是事务开始就加上，但释放是统一在事务结束时才释放。根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能\n\n\n\n减少大事务，可以减少主备延迟，可以降低锁的时间，减少死锁的产生，减少死锁检测的性能消耗。\n\n减少并发量（减少对于同一行更新的并发量），可以减少死锁的产生，可以减少死锁检测的性能消耗\n\n\n\n\n\n在删除数据的时候尽量加 limit。这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。\n\n\n\n在出现IO瓶颈的时候，可以将sync_binglog设置为100-1000内的值，表示累计多少个事务之后才会刷盘，默认是1表示每一个事务都会刷盘写binlog；\n\n在出现IO瓶颈的时候，可以设置binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count，表示提升binlog的组提交的效果，但是会增加sql的响应时间\n\n写多读少的场景，由于 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我建议你优先考虑普通索引。\n\n\n\n\n\nmysql要调优，就要知道它为什么慢，哪里慢\n\n在低版本：show profiles\n\n在高版本：performance schema\n\n以上有什么用？\n\n- 比如在实际环境中，有一个sql，非常慢\n- sql本身没有问题，看执行计划也比较慢，这个时候就可以用到上面的\n- 可以更加详细的看到，这个sql到底是哪里慢\n\n\n\nprocess list 可以查看mysql的连接数量，顺丰云上的回话连接是不是？\n\n不过一般有druid，不用太关注这个。但是呢，druid是什么，要去看看github上面的官网了。了解一下它的优点\n\n\n\nMRR优化，将主键ID回表的随机读，改成主键ID的顺序读，但是默认是关闭的，优化器不倾向于使用MRR，不知道为啥；MRR 能够提升性能的核心在于，这条查询语句在索引 a 上做的是一个范围查询（也就是说，这是一个多值查询），可以得到足够多的主键 id。这样通过排序以后，再去主键索引查数据，才能体现出“顺序性”的优势。\n\n\n\n字符集和字符编码的区别\n\n\n\n大表拆分，将不常用的数据从表里拆出去，表小了之后，每个数据页存的数据就会多，查询的时候，就会减少磁盘IO\n\n\n\n优化：\n\n- 不同的数据选择对应的mysql自建数据类型，比如数字就用数字类型，不要用字符串，时间就用时间类型，不要用字符串；用错了数据类型，对业务可能没影响，但是对mysql来说，内部多了一层转换，sql执行会比较慢\n- 事件类型，建议用date，而不是timestamp，date类型\n\n\n\n大事务不仅会影响到主库，也是造成备库复制延迟的主要原因之一。因此，在平时的开发工作中，我建议你尽量减少大事务操作，把大事务拆成小事务。\n\n\n\nshow processlist\n\n- 看到的只是当前的并发连接数，如果你的系统动不动就成千上百个连接，其实都没关系，只是占用一些内存而已\n\n- ```sql\n  mysql> show processlist;\n  +----+-----------------+-----------------+------+---------+--------+------------------------+------------------+\n  | Id | User            | Host            | db   | Command | Time   | State                  | Info             |\n  +----+-----------------+-----------------+------+---------+--------+------------------------+------------------+\n  |  5 | event_scheduler | localhost       | NULL | Daemon  | 865562 | Waiting on empty queue | NULL             |\n  | 23 | root            | localhost:60179 | NULL | Query   |      0 | init                   | show processlist |\n  +----+-----------------+-----------------+------+---------+--------+------------------------+------------------+\n  2 rows in set (0.00 sec)\n  ```\n\n- 真正需要关注的是并发执行数，也就是并发执行的线程，因为连接存在，这个连接不一定在执行。\n\n- innodb的并发执行数，通过`innodb_thread_concurrency`这个参数来控制的，默认是0表示不限制。\n\n- `innodb_thread_concurrency`的计算规则是：正在执行的线程+1，如果一个线程在执行过程中，遇到了锁，需要等待，线程-1\n\n\n\n\n\n\n\n---\n\n\n\n# IN 查询优化\n\n\n\n这个名字还真不是我起的，今天要讲的知识点就叫**索引潜水（Index dive）**。\n\n先要从一件怪事说起：\n\n我先造点数据复现一下问题，创建一张用户表：\n\n```sql\nCREATE TABLE `user` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',\n  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '姓名',\n  `age` int(11) NOT NULL DEFAULT 0 COMMENT '年龄',\n  PRIMARY KEY (`id`),\n  KEY `idx_age` (`age`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n通过一批用户年龄，查询该年龄的用户信息，并查看一下SQL执行计划：\n\n```sql\nexplain select * from user where age in (1,2,3,4,5,6,7,8,9);\n```\n\n<img src=\"mysql的性能调优从入门到入土.assets/image-20230209164837331.png\" alt=\"image-20230209164837331\" style=\"zoom:60%;\" />\n\nwhere条件中有9个参数，重点关注一下执行计划中的预估扫描行数为279行。\n\n到这里没什么问题，预估的非常准，实际就是279行。\n\n<img src=\"mysql的性能调优从入门到入土.assets/image-20230209164853902.png\" alt=\"image-20230209164853902\" />\n\n但是，问题来了，当我们在where条件中，再加一个参数，变成了10个参数，预估扫描行数本应该增加，结果却大大减少了。\n\n```sql\nexplain select * from user \nwhere age in (1,2,3,4,5,6,7,8,9,10);\n```\n\n<img src=\"mysql的性能调优从入门到入土.assets/image-20230209164903103.png\" alt=\"image-20230209164903103\" />\n\n一下子减少到了30行，可是实际行数是多少呢？\n\n<img src=\"mysql的性能调优从入门到入土.assets/image-20230209164911034.png\" alt=\"image-20230209164911034\" />\n\n实际是310行，预估扫描行数是30行，真是错到姥姥家了。\n\n**MySQL咋回事啊，到底还能不能预估？**\n\n**不能预估的话，换其他人！**\n\n\n\n大家肯定也是满脸疑惑，直到我去官网上看到了一个词语，**索引潜水（Index dive）**。\n\n跟这个词语相关的，还有一个配置参数 **eq_range_index_dive_limit**。\n\n**MySQL5.7.3**之前的版本，这个值默认是10，之后的版本，这个值默认是200。\n\n可以使用命令查看一下这个值的大小：\n\n```sql\nshow variables like '%eq_range_index_dive_limit%';\n```\n\n<img src=\"mysql的性能调优从入门到入土.assets/image-20230209164922082.png\" alt=\"image-20230209164922082\" />\n\n当然，我们也可以手动修改这个值的大小：\n\n```sql\nset eq_range_index_dive_limit=200;\n```\n\n这个 **eq_range_index_dive_limit** 配置的作用就是：\n\n当where语句in条件中参数个数小于这个值的时候，MySQL就采用**索引潜水（Index dive）**的方式预估扫描行数，非常准确。\n\n当where语句in条件中参数个数大于等于这个值的时候，MySQL就采用另一种方式**索引统计（Index statistics）**预估扫描行数，误差较大。\n\n**MySQL为什么要这么做呢？**\n\n都用**索引潜水（Index dive）**的方式预估扫描行数，不好吗？\n\n其实这是基于成本的考虑，**索引潜水**估算成本较高，适合小数据量。**索引统计**估算成本较低，适合大数据量。\n\n一般情况下，我们的where语句的in条件的参数不会太多，适合使用**索引潜水**预估扫描行数。\n\n建议还在使用**MySQL5.7.3**之前版本的同学们，手动修改一下**索引潜水**的配置参数，改成合适的数值。\n\n如果你们项目中in条件最多有500个参数，就把配置参数改成501。\n\n这样MySQL预估扫描行数更准确，可以选择更合适的索引。\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n\n\n\n## performance schema详解\n\n### performance_schema的介绍\n\nMySQL的performance schema 用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源等待等情况。\n\n特点如下：\n\n- 提供了一种在数据库运行时实时检查server的内部执行情况的方法\n\n  - performance_schema 数据库中的表使用PERFORMANCE_SCHEMA存储引擎。\n\n  - performance_schema 数据库主要关注数据库运行过程中的性能相关的数据\n\n  - information_schema 数据库主要关注server运行过程中的元数据信息\n\n- performance_schema 通过监视server的事件来实现监视server内部运行情况，\n\n  -  “事件”：就是server内部活动中所做的任何事情以及对应的时间消耗（比如函数调用、操作系统的等待、SQL语句执行的阶段）\n\n    - performance_schema中的事件与binlog中的记录的事件不同\n      - binlog中的事件是：描述数据修改的events\n      - performance_schema中的事件是：计划调度程序（这是一种存储程序）的事件\n\n\n    - performance_schema中的事件记录的是：server执行某些活动对某些资源的消耗、耗时、这些活动执行的次数等情况。\n    \n    - performance_schema中的事件只记录在本地server的performance_schema中，不会被写入binlog中，也不会被复制到其他server中。\n\n\n  - performance_schema的表中的数据不会持久化存储在磁盘中，而是保存在内存中，一旦服务器重启，这些数据会丢失\n\n### performance schema入门\n\n在mysql的5.7版本中，性能模式是默认开启的，如果想要显式的关闭的话需要修改配置文件，不能直接进行修改，会报错Variable 'performance_schema' is a read only variable。\n\n```sql\n-- 查看performance_schema的属性\nmysql> SHOW VARIABLES LIKE 'performance_schema';\n+--------------------+-------+\n| Variable_name      | Value |\n+--------------------+-------+\n| performance_schema | ON    |\n+--------------------+-------+\n1 row in set (0.01 sec)\n\n-- 在配置文件中修改performance_schema的属性值，on表示开启，off表示关闭\n[mysqld]\nperformance_schema=ON\n\n-- 切换数据库\nuse performance_schema;\n\n-- 查看当前数据库下的所有表,会看到有很多表存储着相关的信息\nshow tables;\n\n-- 可以通过show create table tablename来查看创建表的时候的表结构\nmysql> show create table setup_consumers;\n+-----------------+---------------------------------\n| Table           | Create Table                    \n+-----------------+---------------------------------\n| setup_consumers | CREATE TABLE `setup_consumers` (\n  `NAME` varchar(64) NOT NULL,                      \n  `ENABLED` enum('YES','NO') NOT NULL               \n) ENGINE=PERFORMANCE_SCHEMA DEFAULT CHARSET=utf8 |  \n+-----------------+---------------------------------\n1 row in set (0.00 sec)                             \n```\n\n​\t\n\n想要搞明白后续的内容，同学们需要理解两个基本概念：\n\n- instruments: 生产者，用于采集mysql中各种各样的操作产生的事件信息，对应配置表中的配置项我们可以称为监控采集配置项。\n- consumers: 消费者，对应的消费者表用于存储来自instruments采集的数据，对应配置表中的配置项我们可以称为消费存储配置项。\n\n### performance_schema表的分类\n\nperformance_schema库下的表可以按照监视纬度的不同进行分组。\n\n#### 语句事件记录表\n\n语句事件记录表，这些表记录了语句事件信息，当前语句事件表events_statements_current、历史语句事件表events_statements_history和长语句历史事件表events_statements_history_long、以及聚合后的摘要表summary，其中，summary表还可以根据帐号(account)，主机(host)，程序(program)，线程(thread)，用户(user)和全局(global)再进行细分)\n\n```sql\nshow tables like '%statement%';\n```\n\n#### 等待事件记录表\n\n等待事件记录表，与语句事件类型的相关记录表类似：\n\n```sql\nshow tables like '%wait%';\n```\n\n\n\n#### 阶段事件记录表\n\n阶段事件记录表，记录语句执行的阶段事件的表\n```sql\nshow tables like '%stage%';\n```\n\n\n\n#### 事务事件记录表\n\n事务事件记录表，记录事务相关的事件的表\n```sql\nshow tables like '%transaction%';\n```\n\n\n\n#### 监控文件系统层调用的表\n\n监控文件系统层调用的表\n```sql\nshow tables like '%file%';\n```\n\n\n\n#### 监视内存使用的表\n\n监视内存使用的表\n```sql\nshow tables like '%memory%';\n```\n\n\n\n#### 配置表\n\n动态对performance_schema进行配置的配置表\n```sql\nshow tables like '%setup%';\n```\n\n\n\n\n\n\n\n### performance_schema的简单配置与使用\n\n数据库刚刚初始化并启动时，并非所有instruments(事件采集项，在采集项的配置表中每一项都有一个开关字段，或为YES，或为NO)和consumers(与采集项类似，也有一个对应的事件类型保存表配置项，为YES就表示对应的表保存性能数据，为NO就表示对应的表不保存性能数据)都启用了，所以默认不会收集所有的事件，可能你需要检测的事件并没有打开，需要进行设置，可以使用如下两个语句打开对应的instruments和consumers（行计数可能会因MySQL版本而异)。\n\n#### 简单配置\n\n```sql\n-- 打开等待事件的采集器配置项开关，需要修改setup_instruments配置表中对应的采集器配置项\nUPDATE setup_instruments SET ENABLED = 'YES', TIMED = 'YES'where name like 'wait%';\n\n-- 打开等待事件的保存表配置开关，修改setup_consumers配置表中对应的配置项\nUPDATE setup_consumers SET ENABLED = 'YES'where name like '%wait%';\n\n```\n\n\n\n#### 查看当前server正在做什么\n\n当配置完成之后可以查看当前server正在做什么，可以通过查询events_waits_current表来得知，该表中每个线程只包含一行数据，用于显示每个线程的最新监视事件\n\n```sql\nselect * from events_waits_current\\G\n*************************** 1. row ***************************\n            THREAD_ID: 11\n             EVENT_ID: 570\n         END_EVENT_ID: 570\n           EVENT_NAME: wait/synch/mutex/innodb/buf_dblwr_mutex\n               SOURCE: \n          TIMER_START: 4508505105239280\n            TIMER_END: 4508505105270160\n           TIMER_WAIT: 30880\n                SPINS: NULL\n        OBJECT_SCHEMA: NULL\n          OBJECT_NAME: NULL\n           INDEX_NAME: NULL\n          OBJECT_TYPE: NULL\nOBJECT_INSTANCE_BEGIN: 67918392\n     NESTING_EVENT_ID: NULL\n   NESTING_EVENT_TYPE: NULL\n            OPERATION: lock\n      NUMBER_OF_BYTES: NULL\n                FLAGS: NULL\n```\n\n该信息表示线程id为11的线程正在等待buf_dblwr_mutex锁，等待事件为30880\n属性说明：\n\n- id:事件来自哪个线程，事件编号是多少\n- event_name:表示检测到的具体的内容\n- source:表示这个检测代码在哪个源文件中以及行号\n- timer_start:表示该事件的开始时间\n- timer_end:表示该事件的结束时间\n- timer_wait:表示该事件总的花费时间\n\n注意：_current表中每个线程只保留一条记录，一旦线程完成工作，该表中不会再记录该线程的事件信息\n\n\n\n\n\n#### 查看每个线程已经执行完成的事件信息\n\n_history表中记录每个线程应该执行完成的事件信息，但每个线程的事件信息只会记录10条，再多就会被覆盖，*_history_long表中记录所有线程的事件信息，但总记录数量是10000，超过就会被覆盖掉\n\n```sql\nselect thread_id,event_id,event_name,timer_wait from events_waits_history order by thread_id limit 21;\n```\n\n\n\n#### 查看事件的汇总信息\n\nsummary表提供所有事件的汇总信息，该组中的表以不同的方式汇总事件数据（如：按用户，按主机，按线程等等）。例如：要查看哪些instruments占用最多的时间，可以通过对events_waits_summary_global_by_event_name表的COUNT_STAR或SUM_TIMER_WAIT列进行查询（这两列是对事件的记录数执行COUNT（*）、事件记录的TIMER_WAIT列执行SUM（TIMER_WAIT）统计而来）\n\n```sql\nSELECT EVENT_NAME,COUNT_STAR FROM events_waits_summary_global_by_event_name  ORDER BY COUNT_STAR DESC LIMIT 10;\n```\n\n\n\n#### 查看被检测的对象\n\ninstance表记录了哪些类型的对象会被检测。这些对象在被server使用时，在该表中将会产生一条事件记录，例如，file_instances表列出了文件I/O操作及其关联文件名\n\n```sql\nselect * from file_instances limit 20; \n```\n\n\n\n### 常用配置项的参数说明\n\n#### 启动选项\n\n| 选项                                                         | 含义                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| performance_schema_consumer_events_statements_current=TRUE   | 是否在mysql server启动时就开启events_statements_current表的记录功能(该表记录当前的语句事件信息)，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新setup_consumers配置表中的events_statements_current配置项，默认值为TRUE |\n| performance_schema_consumer_events_statements_history=TRUE   | 与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件短历史信息，默认为TRUE |\n| performance_schema_consumer_events_stages_history_long=FALSE | 与performance_schema_consumer_events_statements_current选项类似，但该选项是用于配置是否记录语句事件长历史信息，默认为FALSE |\n| *                                                            | 除了statement(语句)事件之外，还支持：wait(等待)事件、state(阶段)事件、transaction(事务)事件，他们与statement事件一样都有三个启动项分别进行配置，但这些等待事件默认未启用，如果需要在MySQL Server启动时一同启动，则通常需要写进my.cnf配置文件中 |\n| performance_schema_consumer_global_instrumentation=TRUE      | 是否在MySQL Server启动时就开启全局表（如：mutex_instances、rwlock_instances、cond_instances、file_instances、users、hostsaccounts、socket_summary_by_event_name、file_summary_by_instance等大部分的全局对象计数统计和事件汇总统计信息表 ）的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新全局配置项<br/>默认值为TRUE |\n| performance_schema_consumer_statements_digest=TRUE           | 是否在MySQL Server启动时就开启events_statements_summary_by_digest 表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新digest配置项<br/>默认值为TRUE |\n| performance_schema_consumer_thread_instrumentation=TRUE      | 是否在MySQL Server启动时就开启events_xxx_summary_by_yyy_by_event_name表的记录功能，启动之后也可以在setup_consumers表中使用UPDATE语句进行动态更新线程配置项<br/>默认值为TRUE |\n| performance_schema_instrument[=name]                         | 是否在MySQL Server启动时就启用某些采集器，由于instruments配置项多达数千个，所以该配置项支持key-value模式，还支持%号进行通配等 |\n\n注意，这些启动选项要生效的前提是，需要设置performance_schema=ON。另外，这些启动选项虽然无法使用show variables语句查看，但我们可以通过setup_instruments和setup_consumers表查询这些选项指定的值。\n\n\n\n#### 系统变量\n\n```sql\nshow variables like '%performance_schema%';\n```\n\n重要的属性解释\n\n| 属性                                                         | 解释                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| performance_schema=ON                                        | 控制performance_schema功能的开关，要使用MySQL的performance_schema，需要在mysqld启动时启用，以启用事件收集功能<br/>该参数在5.7.x之前支持performance_schema的版本中默认关闭，5.7.x版本开始默认开启<br/>注意：如果mysqld在初始化performance_schema时发现无法分配任何相关的内部缓冲区，则performance_schema将自动禁用，并将performance_schema设置为OFF |\n| performance_schema_digests_size=10000                        | 控制events_statements_summary_by_digest表中的最大行数。如果产生的语句摘要信息超过此最大值，便无法继续存入该表，此时performance_schema会增加状态变量 |\n| performance_schema_events_statements_history_long_size=10000 | 控制events_statements_history_long表中的最大行数，该参数控制所有会话在events_statements_history_long表中能够存放的总事件记录数，超过这个限制之后，最早的记录将被覆盖 |\n| performance_schema_events_statements_history_size=10         | 控制events_statements_history表中单个线程（会话）的最大行数，该参数控制单个会话在events_statements_history表中能够存放的事件记录数，超过这个限制之后，单个会话最早的记录将被覆盖 |\n| performance_schema_max_digest_length=1024                    | 用于控制标准化形式的SQL语句文本在存入performance_schema时的限制长度，该变量与max_digest_length变量相关(max_digest_length变量含义请自行查阅相关资料)<br/>全局变量，只读变量，默认值1024字节，整型值，取值范围0~1048576 |\n| performance_schema_max_sql_text_length=1024                  | 控制存入events_statements_current，events_statements_history和events_statements_history_long语句事件表中的SQL_TEXT列的最大SQL长度字节数。 超出系统变量performance_schema_max_sql_text_length的部分将被丢弃，不会记录，一般情况下不需要调整该参数，除非被截断的部分与其他SQL比起来有很大差异<br/>全局变量，只读变量，整型值，默认值为1024字节，取值范围为0~1048576，5.7.6版本引入<br/>降低系统变量performance_schema_max_sql_text_length值可以减少内存使用，但如果汇总的SQL中，被截断部分有较大差异，会导致没有办法再对这些有较大差异的SQL进行区分。 增加该系统变量值会增加内存使用，但对于汇总SQL来讲可以更精准地区分不同的部分。 |\n\n\n\n### 重要配置表的相关说明\n\n配置表之间存在相互关联关系\n\n#### performance_timers表\n\nperformance_timers表中记录了server中有哪些可用的事件计时器\n\n```sql\nselect * from performance_timers;\n```\n\n| 字段             | 含义                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| timer_name       | 表示可用计时器名称，CYCLE是基于CPU周期计数器的定时器         |\n| timer_frequency  | 表示每秒钟对应的计时器单位的数量,CYCLE计时器的换算值与CPU的频率相关 |\n| timer_resolution | 计时器精度值，表示在每个计时器被调用时额外增加的值           |\n| timer_overhead   | 表示在使用定时器获取事件时开销的最小周期值                   |\n\n\n\n#### setup_timers表\n\nsetup_timers表中记录当前使用的事件计时器信息\n\n```sql\nselect * from setup_timers;\n```\n\n| 字段       | 含义                         |\n| ---------- | ---------------------------- |\n| name       | 计时器类型，对应某个事件类别 |\n| timer_name | 计时器类型名称               |\n\n\n\n\n\n#### setup_consumers表\n\nsetup_consumers表中列出了consumers可配置列表项\n\n```sql\nselect * from setup_consumers;\n```\n\n| 字段    | 含义                                                         |\n| ------- | ------------------------------------------------------------ |\n| NAME    | consumers配置名称                                            |\n| ENABLED | consumers是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。 |\n\n\n\n#### setup_instruments 表\n\nsetup_instruments 表列出了instruments 列表配置项，即代表了哪些事件支持被收集：\n\n```sql\nSELECT * FROM setup_instruments;\n```\n\n| 字段    | 含义                                                         |\n| ------- | ------------------------------------------------------------ |\n| NAME    | instruments名称，instruments名称可能具有多个部分并形成层次结构 |\n| ENABLED | instrumetns是否启用，有效值为YES或NO，此列可以使用UPDATE语句修改。如果设置为NO，则这个instruments不会被执行，不会产生任何的事件信息 |\n| TIMED   | instruments是否收集时间信息，有效值为YES或NO，此列可以使用UPDATE语句修改，如果设置为NO，则这个instruments不会收集时间信息 |\n\n\n\n\n\n#### setup_actors表\n\nsetup_actors表的初始内容是匹配任何用户和主机，因此对于所有前台线程，默认情况下启用监视和历史事件收集功能\n\n```sql\nSELECT * FROM setup_actors;\n```\n\n| 字段    | 含义                                                         |\n| ------- | ------------------------------------------------------------ |\n| HOST    | 与grant语句类似的主机名，一个具体的字符串名字，或使用“％”表示“任何主机” |\n| USER    | 一个具体的字符串名称，或使用“％”表示“任何用户”               |\n| ROLE    | 当前未使用，MySQL 8.0中才启用角色功能                        |\n| ENABLED | 是否启用与HOST，USER，ROLE匹配的前台线程的监控功能，有效值为：YES或NO |\n| HISTORY | 是否启用与HOST， USER，ROLE匹配的前台线程的历史事件记录功能，有效值为：YES或NO |\n\n\n\n#### setup_objects表\n\nsetup_objects表控制performance_schema是否监视特定对象。默认情况下，此表的最大行数为100行。\n\n```sql\nSELECT * FROM setup_objects;\n```\n\n| 字段          | 含义                                                         |\n| ------------- | ------------------------------------------------------------ |\n| OBJECT_TYPE   | instruments类型，有效值为：“EVENT”（事件调度器事件）、“FUNCTION”（存储函数）、“PROCEDURE”（存储过程）、“TABLE”（基表）、“TRIGGER”（触发器），TABLE对象类型的配置会影响表I/O事件（wait/io/table/sql/handler instrument）和表锁事件（wait/lock/table/sql/handler instrument）的收集 |\n| OBJECT_SCHEMA | 某个监视类型对象涵盖的数据库名称，一个字符串名称，或“％”(表示“任何数据库”) |\n| OBJECT_NAME   | 某个监视类型对象涵盖的表名，一个字符串名称，或“％”(表示“任何数据库内的对象”) |\n| ENABLED       | 是否开启对某个类型对象的监视功能，有效值为：YES或NO。此列可以修改 |\n| TIMED         |                                                              |\n\n\n\n#### threads表\n\nthreads表对于每个server线程生成一行包含线程相关的信息，\n\n```sql\nselect * from threads\n```\n\n| 字段                | 含义                                                         |\n| ------------------- | ------------------------------------------------------------ |\n| THREAD_ID           | 线程的唯一标识符（ID）                                       |\n| NAME                | 与server中的线程检测代码相关联的名称(注意，这里不是instruments名称) |\n| TYPE                | 线程类型，有效值为：FOREGROUND、BACKGROUND。分别表示前台线程和后台线程 |\n| PROCESSLIST_ID      | 对应INFORMATION_SCHEMA.PROCESSLIST表中的ID列                 |\n| PROCESSLIST_USER    | 与前台线程相关联的用户名，对于后台线程为NULL                 |\n| PROCESSLIST_HOST    | 与前台线程关联的客户端的主机名，对于后台线程为NULL           |\n| PROCESSLIST_DB      | 线程的默认数据库，如果没有，则为NULL                         |\n| PROCESSLIST_COMMAND | 对于前台线程，该值代表着当前客户端正在执行的command类型，如果是sleep则表示当前会话处于空闲状态 |\n| PROCESSLIST_TIME    | 当前线程已处于当前线程状态的持续时间（秒）                   |\n| PROCESSLIST_STATE   | 表示线程正在做什么事情                                       |\n| PROCESSLIST_INFO    | 线程正在执行的语句，如果没有执行任何语句，则为NULL           |\n| PARENT_THREAD_ID    | 如果这个线程是一个子线程（由另一个线程生成），那么该字段显示其父线程ID |\n| ROLE                | 暂未使用                                                     |\n| INSTRUMENTED        | 线程执行的事件是否被检测。有效值：YES、NO                    |\n| HISTORY             | 是否记录线程的历史事件。有效值：YES、NO                      |\n| THREAD_OS_ID        | 由操作系统层定义的线程或任务标识符（ID）                     |\n\n\n\n注意：在performance_schema库中还包含了很多其他的库和表，能对数据库的性能做完整的监控，大家需要参考官网详细了解。\n\n### performance_schema实践操作\n\n基本了解了表的相关信息之后，可以通过这些表进行实际的查询操作来进行实际的分析。\n\n#### 哪类的SQL执行最多？\n\n```sql\nSELECT DIGEST_TEXT,COUNT_STAR,FIRST_SEEN,LAST_SEEN FROM events_statements_summary_by_digest ORDER BY COUNT_STAR DESC\n```\n\n#### 哪类SQL的平均响应时间最多？\n\n```sql\nSELECT DIGEST_TEXT,AVG_TIMER_WAIT FROM events_statements_summary_by_digest ORDER BY COUNT_STAR DESC\n```\n\n\n\n#### 哪类SQL排序记录数最多？\n\n```sql\nSELECT DIGEST_TEXT,SUM_SORT_ROWS FROM events_statements_summary_by_digest ORDER BY COUNT_STAR DESC\n```\n\n\n\n#### 哪类SQL扫描记录数最多？\n\n```sql\nSELECT DIGEST_TEXT,SUM_ROWS_EXAMINED FROM events_statements_summary_by_digest ORDER BY COUNT_STAR DESC\n```\n\n\n\n#### 哪类SQL使用临时表最多？\n\n```sql\nSELECT DIGEST_TEXT,SUM_CREATED_TMP_TABLES,SUM_CREATED_TMP_DISK_TABLES FROM events_statements_summary_by_digest ORDER BY COUNT_STAR DESC\n```\n\n\n\n#### 哪类SQL返回结果集最多？\n\n```sql\nSELECT DIGEST_TEXT,SUM_ROWS_SENT FROM events_statements_summary_by_digest ORDER BY COUNT_STAR DESC\n```\n\n\n\n#### 哪个表物理IO最多？\n\n```sql\nSELECT file_name,event_name,SUM_NUMBER_OF_BYTES_READ,SUM_NUMBER_OF_BYTES_WRITE FROM file_summary_by_instance ORDER BY SUM_NUMBER_OF_BYTES_READ + SUM_NUMBER_OF_BYTES_WRITE DESC\n```\n\n\n\n#### 哪个表逻辑IO最多？\n\n```sql\nSELECT object_name,COUNT_READ,COUNT_WRITE,COUNT_FETCH,SUM_TIMER_WAIT FROM table_io_waits_summary_by_table ORDER BY sum_timer_wait DESC\n```\n\n\n\n##### 哪个索引访问最多？\n\n```sql\nSELECT OBJECT_NAME,INDEX_NAME,COUNT_FETCH,COUNT_INSERT,COUNT_UPDATE,COUNT_DELETE FROM table_io_waits_summary_by_index_usage ORDER BY SUM_TIMER_WAIT DESC\n```\n\n\n\n##### 哪个索引从来没有用过？\n\n```sql\nSELECT OBJECT_SCHEMA,OBJECT_NAME,INDEX_NAME FROM table_io_waits_summary_by_index_usage WHERE INDEX_NAME IS NOT NULL AND COUNT_STAR = 0 AND OBJECT_SCHEMA <> 'mysql' ORDER BY OBJECT_SCHEMA,OBJECT_NAME;\n```\n\n\n\n##### 哪个等待事件消耗时间最多？\n\n```sql\nSELECT EVENT_NAME,COUNT_STAR,SUM_TIMER_WAIT,AVG_TIMER_WAIT FROM events_waits_summary_global_by_event_name WHERE event_name != 'idle' ORDER BY SUM_TIMER_WAIT DESC\n```\n\n\n\n#### 剖析某条SQL的执行情况，包括statement信息，stege信息，wait信息\n\n```sql\nSELECT EVENT_ID,sql_text FROM events_statements_history WHERE sql_text LIKE '%count(*)%';\n```\n\n\n\n#### 查看每个阶段的时间消耗\n\n```sql\nSELECT event_id,EVENT_NAME,SOURCE,TIMER_END - TIMER_START FROM events_stages_history_long WHERE NESTING_EVENT_ID = 1553;\n```\n\n\n\n#### 查看每个阶段的锁等待情况\n\n```sql\nSELECT event_id,event_name,source,timer_wait,object_name,index_name,operation,nesting_event_id FROM events_waits_history_long WHERE nesting_event_id = 1553;\n```\n\n\n\n\n\n## 看懂mysql执行计划\n\n​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。\n\n​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。\n\n​\t   官网地址： https://dev.mysql.com/doc/refman/5.5/en/explain-output.html \n\n### 准备数据\n\n```sql\n/*\nNavicat MySQL Data Transfer\n\nSource Server         : mybatis\nSource Server Version : 50722\nSource Host           : localhost:3306\nSource Database       : demp\n\nTarget Server Type    : MYSQL\nTarget Server Version : 50722\nFile Encoding         : 65001\n\nDate: 2020-02-11 20:05:02\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n-- Table structure for dept\n-- ----------------------------\nDROP TABLE IF EXISTS `dept`;\nCREATE TABLE `dept` (\n  `DEPTNO` int(4) NOT NULL,\n  `DNAME` varchar(14) DEFAULT NULL,\n  `LOC` varchar(13) DEFAULT NULL,\n  PRIMARY KEY (`DEPTNO`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of dept\n-- ----------------------------\nINSERT INTO `dept` VALUES ('10', 'ACCOUNTING', 'NEW YORK');\nINSERT INTO `dept` VALUES ('20', 'RESEARCH', 'DALLAS');\nINSERT INTO `dept` VALUES ('30', 'SALES', 'CHICAGO');\nINSERT INTO `dept` VALUES ('40', 'OPERATIONS', 'BOSTON');\n\n-- ----------------------------\n-- Table structure for emp\n-- ----------------------------\nDROP TABLE IF EXISTS `emp`;\nCREATE TABLE `emp` (\n  `EMPNO` int(4) NOT NULL,\n  `ENAME` varchar(10) DEFAULT NULL,\n  `JOB` varchar(9) DEFAULT NULL,\n  `MGR` int(4) DEFAULT NULL,\n  `HIREDATE` date DEFAULT NULL,\n  `SAL` double(7,2) DEFAULT NULL,\n  `COMM` double(7,2) DEFAULT NULL,\n  `DEPTNO` int(4) DEFAULT NULL,\n  PRIMARY KEY (`EMPNO`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of emp\n-- ----------------------------\nINSERT INTO `emp` VALUES ('7369', 'SMITH', 'CLERK', '7902', '1980-12-17', '800.00', null, '20');\nINSERT INTO `emp` VALUES ('7499', 'ALLEN', 'SALESMAN', '7698', '1981-02-20', '1600.00', '300.00', '30');\nINSERT INTO `emp` VALUES ('7521', 'WARD', 'SALESMAN', '7698', '1981-02-22', '1250.00', '500.00', '30');\nINSERT INTO `emp` VALUES ('7566', 'JONES', 'MANAGER', '7839', '1981-02-02', '2975.00', null, '20');\nINSERT INTO `emp` VALUES ('7654', 'MARTIN', 'SALESMAN', '7698', '1981-09-28', '1250.00', '1400.00', '30');\nINSERT INTO `emp` VALUES ('7698', 'BLAKE', 'MANAGER', '7839', '1981-01-05', '2850.00', null, '30');\nINSERT INTO `emp` VALUES ('7782', 'CLARK', 'MANAGER', '7839', '1981-09-06', '2450.00', null, '10');\nINSERT INTO `emp` VALUES ('7839', 'KING', 'PRESIDENT', null, '1981-11-17', '5000.00', null, '10');\nINSERT INTO `emp` VALUES ('7844', 'TURNER', 'SALESMAN', '7698', '1981-09-08', '1500.00', '0.00', '30');\nINSERT INTO `emp` VALUES ('7900', 'JAMES', 'CLERK', '7698', '1981-12-03', '950.00', null, '30');\nINSERT INTO `emp` VALUES ('7902', 'FORD', 'ANALYST', '7566', '1981-12-03', '3000.00', null, '20');\nINSERT INTO `emp` VALUES ('7934', 'MILLER', 'CLERK', '7782', '1982-01-23', '1300.00', null, '10');\n\n-- ----------------------------\n-- Table structure for salgrade\n-- ----------------------------\nDROP TABLE IF EXISTS `salgrade`;\nCREATE TABLE `salgrade` (\n  `GRADE` int(11) NOT NULL,\n  `LOSAL` double DEFAULT NULL,\n  `HISAL` double DEFAULT NULL,\n  PRIMARY KEY (`GRADE`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of salgrade\n-- ----------------------------\nINSERT INTO `salgrade` VALUES ('1', '700', '1200');\nINSERT INTO `salgrade` VALUES ('2', '1201', '1400');\nINSERT INTO `salgrade` VALUES ('3', '1401', '2000');\nINSERT INTO `salgrade` VALUES ('4', '2001', '3000');\nINSERT INTO `salgrade` VALUES ('5', '3001', '9999');\n```\n\n\n\n### 执行计划中包含的信息\n\n|      列       | 含义                                                         |\n| :-----------: | ------------------------------------------------------------ |\n|      id       | select查询的序列号                                           |\n|  select_type  | 查询的类型，是普通查询还是联合查询还是子查询                 |\n|     table     | 对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集 |\n|  partitions   | 表示当前查询访问的分区，如果是NULL，表示当前不是分区表       |\n|     type      | type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描 |\n| possible_keys | 显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用 |\n|      key      | 实际使用的索引，如果为null，则没有使用索引                   |\n|    key_len    | 表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好 |\n|      ref      | 显示索引的哪一列被使用了，如果可能的话，是一个常数           |\n|     rows      | 根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数 |\n|   filtered    | 某个表经过搜索条件过滤后剩余记录条数的百分比，rows 乘以 filtered 的结果表示要与下表连接的行数 |\n|     extra     | 额外的信息                                                   |\n\n#### **id**\n\nselect查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序\n\nid号分为三种情况：\n\n- 如果id相同，那么执行顺序从上到下\n- 如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行\n- 同时存在id相同和不同的：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行\n\n#### **select_type**\n\n主要用来分辨查询的类型，是普通查询还是联合查询还是子查询\n\n- `sample`：简单的查询，不包含子查询和union\n- `primary`：查询中若包含任何复杂的子查询，最外层查询则被标记为Primary\n- `union`：若第二个select出现在union之后，则被标记为union\n- `dependent union` ： 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响\n- `union result`：从union表获取结果的select\n- `subquery`：在select或者where列表中包含子查询\n- `dependent subquery`：subquery的子查询要受到外部表查询的影响\n- `derived`：from子句中出现的子查询\n- `uncacheable subquery`：表示使用子查询的结果不能被缓存\n- `uncacheable union`：表示union的查询结果不能被缓存：sql语句未验证\n\n```sql\n-- sample:简单的查询，不包含子查询和union\nexplain select * from emp;\n\n-- primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary\nexplain select staname,ename supname from (select ename staname,mgr from emp) t join emp on t.mgr=emp.empno ;\n\n-- union:若第二个select出现在union之后，则被标记为union\nexplain select * from emp where deptno = 10 union select * from emp where sal >2000;\n\n-- dependent union : 跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响\nexplain select * from emp e where e.empno  in ( select empno from emp where deptno = 10 union select empno from emp where sal >2000)\n\n-- union result:从union表获取结果的select\nexplain select * from emp where deptno = 10 union select * from emp where sal >2000;\n\n-- subquery:在select或者where列表中包含子查询\nexplain select * from emp where sal > (select avg(sal) from emp) ;\n\n-- dependent subquery:subquery的子查询要受到外部表查询的影响\nexplain select * from emp e where e.deptno in (select distinct deptno from dept);\n\n-- DERIVED: from子句中出现的子查询，也叫做派生类，\nexplain select staname,ename supname from (select ename staname,mgr from emp) t join emp on t.mgr=emp.empno ;\n\n-- UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存\n explain select * from emp where empno = (select empno from emp where deptno=@@sort_buffer_size);\n \n-- uncacheable union:表示union的查询结果不能被缓存：sql语句未验证\n```\n\n#### **table**\n\n对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集\n\n- 如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名\n- 表名是derivedN的形式，表示使用了id为N的查询产生的衍生表\n- 当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id\n\n#### **partitions**\n\n表示当前查询访问的分区，如果是NULL，表示当前不是分区表\n\n#### **type**\n\ntype显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：\n\n- `system`：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现\n- `const`：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候是这种情况\n- `eq_ref`：使用唯一性索引进行数据查找\n- `ref`：使用了非唯一性索引进行数据的查找\n- `fulltext`\n- `ref_or_null`：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式\n- `index_merge`：在查询过程中需要多个索引组合使用\n- `unique_subquery`：该连接类型类似与index_subquery,使用的是唯一索引\n- `index_subquery`：利用索引来关联子查询，不再扫描全表\n- `range`：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描\n- `index`：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，或者是使用了索引进行排序，这样就避免数据的重排序\n- `all`：全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。\n\n一般情况下，得保证查询至少达到range级别，最好能达到ref\n\n```sql\n-- all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。\nexplain select * from emp;\n\n-- index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询是覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序\nexplain  select empno from emp;\n\n-- range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, <>, >, >=, <, <=, IS NULL, BETWEEN, LIKE, or IN() \nexplain select * from emp where empno between 7000 and 7500;\n\n-- index_subquery：利用索引来关联子查询，不再扫描全表\nexplain select * from emp where emp.job in (select job from t_job);\n\n-- unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引\n explain select * from emp e where e.deptno in (select distinct deptno from dept);\n \n-- index_merge：在查询过程中需要多个索引组合使用，没有模拟出来\n\n-- ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式\nexplain select * from emp where mgr is null or mgr=7369;\n\n-- ref：使用了非唯一性索引进行数据的查找\n create index idx_3 on emp(deptno);\n explain select * from emp e,dept d where e.deptno =d.deptno;\n\n-- eq_ref ：使用唯一性索引进行数据查找\nexplain select * from emp,emp2 where emp.empno = emp2.empno;\n\n-- const：这个表至多有一个匹配行，并不是说表里只有一条记录，一般使用主键id查询的时候会有这个type\nexplain select * from emp where empno = 7369;\n \n-- system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现\n```\n\n####  **possible_keys** \n\n显示当前查询语句可能会被使用的索引，一个或多个，但不一定被查询实际使用\n\n```sql\nexplain select * from emp,dept where emp.deptno = dept.deptno and emp.deptno = 10;\n```\n\n#### **key**\n\n实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。\n\n```sql\nexplain select * from emp,dept where emp.deptno = dept.deptno and emp.deptno = 10;\n```\n\n#### **key_len**\n\n表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。\n\n```sql\nexplain select * from emp,dept where emp.deptno = dept.deptno and emp.deptno = 10;\n```\n\n#### **ref**\n\n显示索引的哪一列被使用了，如果可能的话，是一个常数\n\n```sql\nexplain select * from emp,dept where emp.deptno = dept.deptno and emp.deptno = 10;\n```\n\n#### **rows**\n\n根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好\n\n```sql\nexplain select * from emp;\n```\n\n#### **filtered**\n\n某个表经过搜索条件`过滤后剩余记录条数`的百分比，这个`过滤后剩余记录条数`，是需要用来对下一张表进行连接的行数。什么意思呢？\n\n- 对于单表查询来说，这个filtered列的值没什么意义。\n- 对于多表联合查询，假设表1扫描的rows是10000行，filteres是20%，那么表示要与表2进行连接的行数是：10000 x 20% = 2000条记录。\n\n\n\n#### **extra**\n\n包含额外的信息。\n\n```sql\n-- using filesort :说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置\nexplain select * from emp order by sal;\n\n-- using temporary:需要使用临时表来保存中间结果，查询完成之后把临时表删除\nexplain select ename,count(*) from emp where deptno = 10 group by ename;\n\n-- using index: 这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找\nexplain select deptno,count(*) from emp group by deptno limit 10;\n\n-- using where:使用where进行条件过滤\nexplain select * from t_user where id = 1;\n\n-- using join buffer :使用连接缓存，情况没有模拟出来\n\n-- impossible where：where语句的结果总是false\nexplain select * from emp where empno = 7469;\n\n-- using MRR：使用了Multi-Range Read 优化 (MRR)\n\n```\n\n\n\n\n\n","tags":["mysql","性能调优","调优"],"categories":["JAVA","数据库","MYSQL"]},{"title":"oracle查询表的字段名类型注释","url":"/note/JAVA/数据库/ORACLE/oracle查询表的字段名类型注释/","content":"\n\n\n\n\n\n\n```sql\nselect a.COLUMN_ID, a.TABLE_NAME, a.COLUMN_NAME, a.DATA_TYPE, a.DATA_LENGTH, a.NULLABLE,b.COMMENTS from (\n\nSELECT COLUMN_ID, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_LENGTH, NULLABLE\n  FROM ALL_TAB_COLUMNS\n WHERE TABLE_NAME = '这里改成表名') a left join (\n\n\nselect TABLE_NAME,COLUMN_NAME,COMMENTS\nfrom user_col_comments\nwhere Table_Name='这里改成表名') b on a.COLUMN_NAME = b.COLUMN_NAME order by a.COLUMN_ID asc ;\n\n```\n\n","tags":["oracle","表结构"],"categories":["JAVA","数据库","ORACLE"]},{"title":"mysql的问题汇总","url":"/note/JAVA/数据库/MYSQL/mysql的问题汇总/","content":"\n\n\n\n\n\n\n准备从45将的评论区找问题，汇总一下\n\n\n\n","tags":["mysql"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql排序字段相同导致结果不一致","url":"/note/JAVA/数据库/MYSQL/mysql排序字段相同导致结果不一致/","content":"\n\n\n## mysql排序字段相同导致结果不一致\n\n### 前言\n\n最近公司业务有这么一个功能：对5000条数据进行批量导入，然后通过表格的形式展示在前端，需要根据创建时间进行排序。\n\n所以，很简单的我们会想到\n\n```mysql\nORDER BY gmt_create DESC;\n```\n\n但是在实际的使用中，我发现一个问题，就是当时间相同的时候，这个排序是不确定的，是随机的。\n\n我们看一个例子：\n\n- 首先这两条sql语句是一样的，只不过一个查询 `*` 一个只查询`id`。那么理所当然的：他们的结果应该是一样的。\n\n```mysql\nSELECT * FROM customer WHERE employee_id=39 AND assigned=1 and status=0 ORDER BY gmt_last_transfer DESC ;\n\nSELECT id FROM customer WHERE employee_id=39 AND assigned=1 and status=0 ORDER BY gmt_last_transfer DESC ;\n```\n\n\n\n<img src=\"mysql排序字段相同导致结果不一致.assets/image-20220831203859308.png\" alt=\"image-20220831203859308\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"mysql排序字段相同导致结果不一致.assets/image-20220831203918310.png\" alt=\"image-20220831203918310\" style=\"zoom:50%;\" />\n\n\n\n我们可以看到两次的查询结果是不一样的。\n\n### 正文\n\n### 为什么结果不一样\n\n查阅了Goole和相关资料，大概总结了这种情况的原因。其实发生这种现象是“故意”设计的。\n\n如果没有指定ORDER BY语句，则SQL Server（或任何RDBMS）不保证以特定顺序返回结果。\n\n有些人认为，如果没有指定order by子句，行总是以聚簇索引顺序或物理磁盘顺序返回。\n\n然而，这是不正确的，因为在查询处理期间可以改变行顺序的许多因素，例如并行的HASH连接是更改行顺序的操作符的一个很好的例子。\n\n如果指定ORDER BY语句，SQL Server将对行进行排序，并按请求的顺序返回。\n\n但是，如果该顺序不是确定性的，即可能有重复的值，则在每个具有相同值的组中，由于与上述相同的原因，该顺序是“随机的”。\n\n### 那么怎么保证顺序唯一呢？\n\n- 不使用可能重复的字段进行排序，即不用时间排序，而使用主键进行排序。\n\n- 但是在某些必须使用时间排序，应该怎么办呢？\n\n- 这个时候就需要使用多字段排序的功能。\n\n- 所谓的多字段排序，其实也很简单。\n\nmysql多个字段排序：\n\n```mysql\nselect * from table order by id desc,name desc;\n```\n\n多字字段排序只需要添加多个排序条件，并且每个排序的条件之前用逗号分开。\n\n> order by id desc,name desc; \n\n表示先按照id降序排序，再按照name降序排序。\n\n同理：\n\n> order by id desc,name asc;\n\n 表示先按照id降序排序，再按照name升序排序。\n\n","tags":["mysql"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的事务从入门到入土","url":"/note/JAVA/数据库/MYSQL/mysql的事务从入门到入土/","content":"\n\n\n\n\n\\#### 事务相关 * \n\n03 | 事务隔离：为什么你改了我还看不见？ * \n\n08 | 事务到底是隔离的还是不隔离的？ * \n\n20 | 幻读是什么，幻读有什么问题？\n\n\n\n\n\nundo log\n\nundolog只会记录 insert delete update 的语句，DDL不会记录undo log；这个和undo log 的作用有关\n\n以下摘录自官网：[14.6.7 Undo Logs](https://dev.mysql.com/doc/refman/5.7/en/innodb-undo-logs.html)\n\n```\nA transaction is assigned up to four undo logs, one for each of the following operation types:\n\n\tINSERT operations on user-defined tables\n\n\tUPDATE and DELETE operations on user-defined tables\n\n\tINSERT operations on user-defined temporary tables\n\n\tUPDATE and DELETE operations on user-defined temporary tables\n```\n\n\n\n","tags":["事务","mysql","MVCC","幻读","隔离级别"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql建表的utf8和utf8mb4有什么区别","url":"/note/JAVA/数据库/MYSQL/mysql建表的utf8和utf8mb4有什么区别/","content":"\n\n\n## mysql建表的utf8和utf8mb4有什么区别\n\n### 前言\n\n最近自己搞了一个项目，买了一套腾讯云的数据库，很便宜。但是配置也很低。勉强够用吧。\n\n然后在创建数据库的过程中，观察到了一个现象，mysql内置的编码集包含了utf8和utf8mb4，于是做了一下比较。\n\n### 正文\n\n可以简单的理解 utf8mb4 是目前最大的一个字符编码,支持任意文字.\n\n### 为什么会有UTF8MB4？\n\n既然utf8应付日常使用完全没有问题，那为什么还要使用utf8mb4呢?低版本的MySQL支持的utf8编码，最大字符长度为 3 字节，如果遇到 4字节的字符就会出现错误了。三个字节的 UTF-8 最大能编码的 Unicode 字符是0xFFFF，也就是Unicode中的基本多文平面（BMP）。也就是说，任何不在基本多文平面的 Unicode字符，都无法使用MySQL原有的 utf8字符集存储。这些不在BMP中的字符包括哪些呢？最常见的就是Emoji 表情（Emoji 是一种特殊的 Unicode 编码，常见于 ios 和 android手机上），和一些不常用的汉字，以及任何新增的 Unicode 字符等等。\n\n### UTF-8编码\n\n理论上讲， UTF-8 格式使用一至六个字节，最大能编码 31 位字符。最新的 UTF-8规范只使用一到四个字节，最大能编码21位，正好能够表示所有的 17个 Unicode平面。关于UTF编码，请阅读《常见编码总结》一文。\n\n而utf8 则是 Mysql 早期版本中支持的一种字符集，只支持最长三个字节的UTF-8字符，也就是 Unicode 中的基本多文本平面。这可能是因为在MySQL发布初期，基本多文种平面之外的字符确实很少用到。而在MySQL5.5.3版本后，要在 Mysql 中保存 4 字节长度的 UTF-8 字符，就可以使用utf8mb4字符集了。例如可以用utf8mb4字符编码直接存储emoj表情，而不是存表情的替换字符。为了获取更好的兼容性，应该总是使用 utf8mb4 而非 utf8，事实上，最新版的phpmyadmin默认字符集就是utf8mb4。诚然，对于 CHAR类型数据，使用utf8mb4 存储会多消耗一些空间。\n\n### 那么utf8mb4比utf8多了什么的呢?\n\n多了emoji编码支持.\n\n如果实际用途上来看,可以给要用到emoji的库或者说表,设置utf8mb4.\n\n比如评论要支持emoji可以用到.\n\n建议普通表使用utf8 如果这个表需要支持emoji就使用utf8mb4\n\n- 新建mysql库或者表的时候还有一个排序规则\n\n- utf8_unicode_ci比较准确\n\n- utf8_general_ci速度比较快。\n\n通常情况下 utf8_general_ci的准确性就够我们用的了，在我看过很多程序源码后，发现它们大多数也用的是utf8_general_ci，所以新建数据库时一般选用utf8_general_ci就可以了如果是utf8mb4那么对应的就是 utf8mb4_general_ci，utf8mb4_unicode_ci\n\n","tags":["mysql","utf8","utf8mb4"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql中的交集差集并集","url":"/note/JAVA/数据库/MYSQL/mysql中的交集差集并集/","content":"\n\n\n# mysql中的交集差集并集\n\n\n\n## 前言\n\n首先要知道，mysql并不直接支持。\n\n也就是没有什么 INTERSECT，EXCEPT等等等等（oracle中有）。\n\n那么mysql怎么取交集并集和差集呢？\n\n\n\n## 正文\n\n那么mysql怎么取交集并集和差集呢？\n\n注意： mysql仅仅支持 UNION 和 UNION ALL 这两个操作。\n\n所以，我们只能通过其他的手段对两个结果进行取交集差集和并集。\n\n\n\n### 并集\n\n可以直接使用 UNION 和 UNION ALL 这两个操作。\n\nUNION 和 UNION ALL 运算：将查询的返回组合成一个结果\n\n- UNION  合并结果并且将重复的内容取唯一\n- UNION ALL  合并结果并且没有过滤重复内容，速度更快\n\n\n\n### 交集\n\n使用 UNION ALL 配合 GROUP BY 和 HAVING 进行查询\n\n- 两个集合的结构要一致,对应的字段数,字段类型\n- 将两个集合用 UNION ALL 关键字合并,这里的结果是有重复的所有集\n- 将上面的所有集 GROUP BY id\n- 最后 HAVING COUNT(id)=1,等于1的意思是只出现了一次,所以这个是差集,如果等于2,那么就是交集\n\n使用方法：\n\n```mysql\nSELECT a.* FROM ((结果集1) UNION ALL (结果集2)) a GROUP BY xxx HAVING COUNT(xxx) = 2;\n```\n\n\n\n还有一个方法，就是使用 IN ， 这个方法应该都可以理解。就不过多解释了。\n\n(结果集1) WHERE xxx IN (结果集2) ;\n\n注意：使用 IN 当数据量很大的时候，效率比较差\n\n可以参考： https://blog.csdn.net/mine_song/article/details/70184072\n\n\n\n### 差集\n\n使用 UNION ALL 配合 GROUP BY 和 HAVING 进行查询\n\n- 两个集合的结构要一致,对应的字段数,字段类型\n- 将两个集合用 UNION ALL 关键字合并,这里的结果是有重复的所有集\n- 将上面的所有集 GROUP BY id\n- 最后 HAVING COUNT(id)=1,等于1的意思是只出现了一次,所以这个是差集,如果等于2,那么就是交集\n\n使用方法：\n\n```mysql\nSELECT a.* FROM ((结果集1) UNION ALL (结果集2)) a GROUP BY xxx HAVING COUNT(xxx) = 1;\n```\n\n\n\n还有一个方法，就是使用 NOT IN ，\n\n(结果集1) WHERE xxx NOT IN (结果集2) ;\n\n注意：使用 NOT IN 当数据量很大的时候，效率比较差\n\n这个方法应该都可以理解。就不过多解释了。可以参考： https://blog.csdn.net/mine_song/article/details/70184072","tags":["mysql","交集","并集","差集"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的SQL优化实战","url":"/note/JAVA/数据库/MYSQL/mysql的SQL优化实战/","content":"\n\n\n# mysql的SQL优化实战\n\n\n\n以下是公司实际业务上的SQL调优实战\n\n\n\n## 金铎项目\n\n金铎项目是一个异常汇总平台，属于半路接手的项目，其中有很多sql都是比较复杂的，可读性差，维护性差，正好拿来练练手\n\n### 表结构\n\n一下是涉及的相关表结构\n\n#### amp_event_log\n\n```sql\n-- auto-generated definition\ncreate table amp_event_log\n(\n    id                         bigint auto_increment comment 'id'\n        primary key,\n    event_id                   bigint                             not null comment '事件ID',\n    event_code                 varchar(250)                       null comment '事件代码',\n    event_name                 varchar(250)                       null comment '事件名称',\n    exception_subject          varchar(512)                       null comment '异常主体',\n    monitor_object_name        varchar(250)                       null comment '监控对象名称',\n    process_status             varchar(250)                       null comment '处理状态',\n    happen_time                datetime                           null comment '发生时间',\n    exception_level            varchar(250)                       null comment '异常等级',\n    event_detail               varchar(3000)                      null comment '事件详情',\n    last_event_id              bigint                             null comment '上一级事件id',\n    timeout                    datetime                           null comment '超时时间',\n    version                    bigint                             null comment '版本',\n    push_user                  text                               null comment '推送对象',\n    is_push                    varchar(250)                       null comment '是否推送',\n    process_user               text                               null comment '处理对象',\n    actual_process_user        varchar(250)                       null comment '实际处理人',\n    feedback_duty_organization varchar(250)                       null comment '反馈责任组织',\n    feedback_process_results   varchar(512)                       null comment '反馈处理结果',\n    feedback_note              varchar(3000)                      null comment '具体原因',\n    start_process_time         datetime                           null comment '开始处理时间',\n    end_process_time           datetime                           null comment '结束处理时间',\n    reason                     varchar(250)                       null comment '原因',\n    create_time                datetime                           null comment '创建时间',\n    detail_url                 varchar(255) charset utf8mb4       null comment '明细路径',\n    is_transfer                bigint   default 0                 null comment '是否转办 0：否 ，1：是',\n    transfer_user              varchar(255)                       null comment '转办人',\n    is_approve                 bigint                             null comment '是否审批 0:否 1:是',\n    process_opinion            varchar(255)                       null comment '处理意见',\n    evaluate                   varchar(3000)                      null comment '评价',\n    approve_status             varchar(255)                       null comment '审批人状态',\n    predict_improve_time       datetime(3)                        null comment '预计改善时间',\n    approve_user               varchar(255)                       null comment '审批人',\n    latest_improve_time        datetime                           null comment '最晚改善时间',\n    update_time                datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment '更新时间',\n    actual_approve_user        varchar(255)                       null comment '实际审批人',\n    person_liable              varchar(256)                       null comment '责任人',\n    improve_plan               varchar(1500)                      null comment '改善方案',\n    predict_improve_target     varchar(50)                        null comment '预计改善目标',\n    prov                       varchar(20)                        null comment '省',\n    city                       varchar(20)                        null comment '城市',\n    transfer_time              datetime                           null comment '转办时间',\n    feedback_process_images    varchar(250)                       null comment '现场处理图片'\n)\n    comment '异常事件记录表' collate = utf8mb4_bin;\n\ncreate index idx_actualuser_status on amp_event_log (actual_process_user, process_status);\n\ncreate index idx_approve_status_actual_approve_user on amp_event_log (approve_status, actual_approve_user);\n\ncreate index idx_city_happen_time on amp_event_log (city, happen_time);\n\ncreate index idx_event_code on amp_event_log (event_code);\n\ncreate index idx_event_id on amp_event_log (event_id);\n\ncreate index idx_exception_subject on amp_event_log (exception_subject);\n\ncreate index idx_happendtime on amp_event_log (happen_time);\n\n\n```\n\n\n\n#### amp_site\n\n```sql\n-- auto-generated definition\ncreate table amp_site\n(\n    id            bigint       not null comment '站点id'\n        primary key,\n    name          varchar(255) null comment '站点名字',\n    area          varchar(255) null,\n    center_area   varchar(255) null,\n    province      varchar(255) null comment '站点所属省',\n    business_area varchar(255) null comment '站点所属的大区（浙北区）',\n    city          varchar(255) null comment '站点所属城市',\n    county        varchar(255) null comment '站点所属区',\n    sfcode        varchar(255) null comment '大网code',\n    sf_site       int(2)       null comment '1是0否'\n);\n\ncreate index amp_site_name_index on amp_site (name);\n\n\n```\n\n#### amp_event\n\n```sql\n-- auto-generated definition\ncreate table amp_event\n(\n    id                   bigint auto_increment comment 'id'\n        primary key,\n    updator              varchar(250)                 null comment '修改人',\n    update_time          datetime                     null comment '修改时间',\n    create_time          datetime                     null comment '创建时间',\n    event_code           varchar(250)                 null comment '异常代码',\n    event_name           varchar(250)                 null comment '名字',\n    monitor_id           bigint                       null comment '监控对象id',\n    is_external          bigint                       null comment '是否外部渠道接入',\n    rule                 text                         null comment '触发规则',\n    message              text                         null comment '消息详情',\n    upgrade_rule         varchar(250)                 null comment '升级规则',\n    exception_level      varchar(250)                 null comment '异常等级',\n    reason               varchar(250)                 null comment '原因',\n    process_time         varchar(250)                 null comment '处理时效',\n    process_cycle        varchar(250)                 null comment '处理周期',\n    duty_organization_id bigint                       null comment '责任组织id',\n    deal_organization_id bigint                       null comment '处理组织id',\n    valid_time           datetime                     null comment '有效时间',\n    version              bigint default 1001          null comment '版本号',\n    is_history           bigint default 0             null comment '是否历史版本:0否,1是',\n    detail_url           varchar(255) charset utf8mb4 null comment '明细路径',\n    push_frequency       varchar(255)                 null comment '推送频率 天 ,周，双周，月',\n    push_day             bigint                       null comment '推送日期',\n    latest_improve_day   bigint                       null comment '最晚改善时间(天)',\n    is_approve           bigint                       null comment '是否审批 0:否 1:是',\n    approve_user         varchar(255)                 null comment '审批人',\n    rule_explain         varchar(3072)                null comment '规则说明',\n    push_job_id          varchar(250)                 null comment '推送岗位ID',\n    process_job_id       varchar(250)                 null comment '处理岗位id',\n    franchise_fee        decimal(10, 2)               null comment '加盟商收入'\n)\n    comment '异常事件表' collate = utf8mb4_bin;\n\ncreate index idx_dealorganizationid on amp_event (deal_organization_id);\n\ncreate index idx_dutyorganizationid on amp_event (duty_organization_id);\n\ncreate index idx_event_code_version on amp_event (event_code, version);\n\ncreate index idx_monitorid on amp_event (monitor_id);\n```\n\n\n\n\n\n\n\n\n\n### 优化SQL一\n\n#### SQL\n\n```sql\nexplain\nSELECT t1.process_status AS STATUS,\n       count(t1.id)         cnt\nFROM amp_event_log t1\nJOIN\n     (select * from amp_site where sf_site = 0) \n    t3 ON t3.NAME = t1.exception_subject\nJOIN ( SELECT event_code,deal_organization_id FROM amp_event WHERE is_history = 0 AND deal_organization_id = 1024) \n    t2 ON t1.event_code = t2.event_code\nwhere 1 = 1\n  and t1.happen_time >= '2022-3-2 20:37:04'\n  and t1.happen_time <= '2023-3-2 20:37:13'\n  and t1.prov in ('浙江省', '广东省')\n  and t1.city in ('杭州市', '深圳市')\nGROUP BY process_status;\n\n\n+----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+\n| id | select_type | table     | partitions | type | possible_keys                                                                                   | key            | key_len | ref                            | rows  | filtered | Extra                                          |\n+----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+\n|  1 | SIMPLE      | amp_event | NULL       | ALL  | idx_dealorganizationid,idx_event_code_version                                                   | NULL           | NULL    | NULL                           |    15 |     8.67 | Using where; Using temporary; Using filesort   |\n|  1 | SIMPLE      | t1        | NULL       | ref  | idx_happendtime,idx_actualuser_status,idx_event_code,idx_city_happen_time,idx_exception_subject | idx_event_code | 1003    | fnsdmpsit.amp_event.event_code |    13 |     3.54 | Using where                                    |\n|  1 | SIMPLE      | amp_site  | NULL       | ALL  | amp_site_name_index                                                                             | NULL           | NULL    | NULL                           | 54023 |     1.00 | Range checked for each record (index map: 0x2) |\n+----+-------------+-----------+------------+------+-------------------------------------------------------------------------------------------------+----------------+---------+--------------------------------+-------+----------+------------------------------------------------+\n3 rows in set, 2 warnings (0.03 sec)\n```\n\n\n\n#### 分析语句\n\nUsing where; Using temporary; Using filesort\n\nUsing where \n\nRange checked for each record (index map: 0x2)\n\n\n\n- Using temporary\n\n  - `group by` 语句一般会使用内部临时表，因为需要使用内部临时表存储数量；\n  - 一般情况下`group by`都是会使用临时表的，但是再`有些业务场景`下，也是可以优化成不用临时表的，所以效率会更高\n  - 【优化点一】：是否可以将这个 group by 语句取消使用内部临时表\n- Using filesort\n\n  - group by 分组后默认自然顺序排序，如果不需要排序，可以改成：order by null；（8.0版本group by已经不会排序了）\n  - 所以可以根据具体的业务场景看，是否需要排序\n  - 【优化点二】：group by 语句是否可以不需要排序\n- Using join buffer (Block Nested Loop)\n  - 使用了join语句，而且是BNL算法，效率很低，首先看这个语句是否可以不用join\n\n  - 【优化点三】：是否可以避免join？从业务代码的角度进行优化？\n\n  - 如果join优化不了，是否可以将BNL算法优化成NLJ（BKA算法）\n\n  - 【优化点四】：是否可以将BNL算法优化成NLJ（BKA算法）\n\n  - 但是呢，即使使用了NLJ（BKA算法），效率还是不如hash-join（mysql8.0支持hash-join，效率高）\n\n  - 【优化点五】：是否可以通过业务代码实现hash-join\n\n\n\n\n初次分析结论如上，先进行优化一波\n\n```sql\nexplain\nselect log.process_status as STATUS,\n       count(log.id)         cnt\nfrom amp_event event left join amp_event_log log on event.event_code=log.event_code\nwhere 1=1\n  and event.is_history=0\n  and event.deal_organization_id=1024\n  and log.prov in ('浙江省', '广东省')\n  and log.city in ('杭州市', '深圳市')\nGROUP BY log.process_status order by null;\n\n+----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+\n| id | select_type | table | partitions | type | possible_keys                                                                          | key            | key_len | ref                        | rows | filtered | Extra                        |\n+----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+\n|  1 | SIMPLE      | event | NULL       | ALL  | idx_dealorganizationid,idx_event_code_version                                          | NULL           | NULL    | NULL                       |   15 |     8.67 | Using where; Using temporary |\n|  1 | SIMPLE      | log   | NULL       | ref  | idx_actualuser_status,idx_event_code,amp_event_log_city_index,amp_event_log_prov_index | idx_event_code | 1003    | fnsdmpsit.event.event_code |   13 |    12.43 | Using where                  |\n+----+-------------+-------+------------+------+----------------------------------------------------------------------------------------+----------------+---------+----------------------------+------+----------+------------------------------+\n2 rows in set, 1 warning (0.04 sec)\n```\n\n\n\n\n\n\n\n\n\n```sql\nexplain\nSELECT t1.event_code,\n       t2.event_name     AS name,\n       t1.process_status AS STATUS,\n       t1.cnt\nFROM (\n         SELECT t.event_code,\n                t.process_status,\n                t.exception_subject,\n                count(t.id) cnt\n         FROM amp_event_log t\n                  JOIN\n              (select *\n               from amp_site\n              ) t3\n              ON t3.NAME = t.exception_subject\n         where 1 = 1\n           and t.happen_time >= '2022-3-2 20:37:04'\n           and t.happen_time <= '2023-3-2 20:37:13'\n           and t.prov in ('浙江省', '广东省')\n           and t.city in ('杭州市', '深圳市')\n         GROUP BY t.event_code, t.process_status\n     ) t1\n         JOIN (\n    SELECT event_code,\n           event_name,\n           deal_organization_id\n    FROM amp_event\n    WHERE is_history = 0\n      AND deal_organization_id = 1024\n) t2 ON t1.event_code = t2.event_code;\n\n\n+----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+\n| id | select_type | table      | partitions | type | possible_keys                                                     | key  | key_len | ref  | rows  | filtered | Extra                                              |\n+----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+\n|  1 | PRIMARY     | amp_event  | NULL       | ALL  | idx_dealorganizationid,idx_event_code_version                     | NULL | NULL    | NULL |    15 |     8.67 | Using where                                        |\n|  1 | PRIMARY     | <derived2> | NULL       | ALL  | NULL                                                              | NULL | NULL    | NULL | 30879 |    10.00 | Using where; Using join buffer (Block Nested Loop) |\n|  2 | DERIVED     | t          | NULL       | ALL  | idx_happendtime,amp_event_log_city_index,amp_event_log_prov_index | NULL | NULL    | NULL |    52 |    10.99 | Using where; Using temporary; Using filesort       |\n|  2 | DERIVED     | amp_site   | NULL       | ALL  | amp_site_name_index                                               | NULL | NULL    | NULL | 54023 |    10.00 | Range checked for each record (index map: 0x2)     |\n+----+-------------+------------+------------+------+-------------------------------------------------------------------+------+---------+------+-------+----------+----------------------------------------------------+\n4 rows in set, 2 warnings (1.18 sec)\n```\n\n\n\n```sql\n\nexplain\nselect t2.event_code as event_code, t1.event_name as name, t2.process_status as status, COUNT(t2.id) as cnt\nfrom amp_event t1\n         left join amp_event_log t2 on t1.event_code = t2.event_code\nwhere 1 = 1\n  and t2.happen_time >= '2022-3-2 20:37:04'\n  and t2.happen_time <= '2023-3-2 20:37:13'\n  and t2.prov in ('浙江省', '广东省')\n  and t2.city in ('杭州市', '深圳市')\n  and t1.is_history = 0\n  and t1.deal_organization_id = 1024\ngroup by t2.event_code, t2.process_status\norder by null;\n\n\n\n+----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+\n| id | select_type | table | partitions | type | possible_keys                                                                    | key            | key_len | ref                     | rows | filtered | Extra                        |\n+----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+\n|  1 | SIMPLE      | t1    | NULL       | ALL  | idx_dealorganizationid,idx_event_code_version                                    | NULL           | NULL    | NULL                    |   15 |     8.67 | Using where; Using temporary |\n|  1 | SIMPLE      | t2    | NULL       | ref  | idx_happendtime,idx_event_code,amp_event_log_city_index,amp_event_log_prov_index | idx_event_code | 1003    | fnsdmpsit.t1.event_code |   13 |    10.99 | Using where                  |\n+----+-------------+-------+------------+------+----------------------------------------------------------------------------------+----------------+---------+-------------------------+------+----------+------------------------------+\n2 rows in set, 1 warning (0.04 sec)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["mysql","SQL优化","性能调优","调优"],"categories":["JAVA","数据库","MYSQL"]},{"title":"+号在java中作用","url":"/note/JAVA/数据库/MYSQL/mysql中+号的作用/","content":"\n\n\n## +号在java中作用\n\n- 作为运算符，当作用于数值型的时候，是运算符\n\n- 作为连接符，当作用于字符串的时候，是连接符\n\n## +号在mysql中的作用\n\n### 不能作为连接符\n\n```mysql\nselect first_name+last_name from user order by id desc;\n\n\n期望的结果：\n-------------\n颛孙鹏程\n张三\n李四\n\n\n\n实际的结果\n-------------\n0\n0\n0\n```\n\n\n\n为什么会这样呢？ 看下面就知道了。\n\n### 只能作为运算符\n\n\n\n#### 两个操作数都为数值型\n\n当两个操作数都为数值型的时候，做加法运算。\n\n```mysql\nselect 100+20;\n\n结果\n-----------\n120\n```\n\n\n\n\n\n#### 一个操作数为数值型，另一个是字符型\n\n当一个操作数为数值型，另一个是字符型的时候，会试图将字符型转换成数值型：\n\n- 如果转换成功，然后在做加法运算。\n\n- 如果转换失败，会默认转换成0，然后在做加法运算。\n\n```mysql\nselect 'zhuansun'+20;\n结果\n-----------\n20\n\n\n\nselect '120'+20;\n结果\n-----------\n140\n```\n\n\n\n#### 两个操作数都是字符型\n\n当两个操作数都是字符型的时候，会将字符型默认转换成0，然后在做加法运算。这也就解释了我们之前说的：为什么不能作为连接符。\n\n```mysql\nselect 'zhuansun'+'wenqing';\n\n结果\n-----------\n0\n```\n\n\n\n\n\n#### 一个操作数为null，另一个操作数为字符型或者数值型。\n\n当两个操作数任意一方为null的时候，不管另一个是什么，结果都是NULL。\n\n```mysql\nselect null+20;\n\n结果\n-----------\nNULL\n```\n\n\n\nNULL值与任何值连接，结果都是NULL\n\n```mysql\nselect null+100;\n\n结果：\n--------\nNULL\n\n\n# 假设score可能为null\nselect CONCAT(first_name,',',last_name,',',socre) from user order by id desc;\n\n结果\n----------\n颛孙,鹏程,98\n张,三,90\nnull\n李,四,87\nnull\nnull\n\n```\n\n那么在第二个查询语句结果中出现null的原因是因为score是null，然后与 first_name 和 last_name 进行连接，不管这两个值有没有值，结果都是null。\n\n","tags":["mysql","连接符"],"categories":["JAVA","数据库","MYSQL"]},{"url":"/note/SYSTEM/IO/IO精讲/","content":"---\n\n---\n\n\n\n一切且文件\n\n虚拟文件系统\n\n任何文件都有 0 1 2 三个文件描述符：标准输入，标准输出，错误输出\n\n文件描述符\n\n> cd /proc/$$/fd\n\n两个程序可以打开同一个文件，但是对于两个程序来说，分别是不同的fd，也就是不同的指针\n\n\n\n/proc\n\n关机之后看硬盘，里面是啥都没有的。只有在系统运行的时候，一些进程会被映射成文件，放在这里。\n\n$$\n\n是一个特殊的环境变量，表示当前bash的pid\n\nlsof -op $$\n\n当前bash的pid的一些详细数据\n\n\n\n重定向：不是命令，而是一种机制\n\n\n\n\n\npstree：查看的进程的父子关系\n\n\n\nsocket\n\npipline：管道两边分别是两个子进程，一个子进程在写，一个子进程再读，进程与进程之间是隔离的，通过管道可以实现进程间的通信\n\n\n\nint 0x80 \n\n- int：是cpu的一个指令\n- 0x80：对应二进制 1000 0000 ；是对应 中断描述符表 中的128这个位置的callback方法。\n\n\n\n\n\n在程序和物理内存之间，会有一个虚拟地址的概念，程序以为我是独占所有内存的。\n\n汇通一个MMU单元进行管理，会将程序的虚拟地址映射到物理内存的地址上。\n\n在虚拟地址上，程序认为申请的内存都是连续的。但是在物理内存上，可能是不连续的。\n\n\n\n\n\n应用程序在运行的时候，所需要的内存并不是一次性全部分配的，是在运行过程中，需要多少，就申请多少\n\n每次申请至少是4k，因为分配的最小粒度是PageCache，一个PageCache的大小是4k；\n\n> pcstat  /bin/bash\n>\n> pcstat 文件\n\npcstat 就是查看pageCache的状态\n\n![image-20230530145156763](IO精讲.assets/image-20230530145156763.png)\n\n这个图的意思就是说：bin/bash 这个程序（它是一个程序哦），在操作系统中它的大小是：903336字节，换算一下就是882.16KB；我们知道一个PageCache是4K，所以它占用的pages就是221个，但是目前加载的PageCache只有194个，并不是所有的都加载进来了。\n\n\n\n\n\n我们要学习的IO知识，是依赖与PageCache的\n\n\n\n> sysctl -a\n\n查看当前系统中的所有配置项\n\n\n\n其中有一个脏页的概念\n\n```sh\n[appdeploy@pangu-site-dev1-7ddf994d6f-zxjxc deploy]$sysctl -a | grep dirty\nvm.dirty_background_bytes = 0\nvm.dirty_background_ratio = 3  # 表示当后台进程在运行时可以存在多少个脏页（这些脏页占用的内存占总内存的百分比）而不需要回写到磁盘上\nvm.dirty_bytes = 0\nvm.dirty_expire_centisecs = 3000\nvm.dirty_ratio = 10  # 用户的进程不停的申请内存申请内存，当系统内存使用量达到总内存的多少百分比时开始回写脏页到硬盘上\nvm.dirty_writeback_centisecs = 500\nvm.dirtytime_expire_seconds = 43200\n\n```\n\n\n\n怎么修改\n\n> vi /etc/sysctl.conf\n\n\n\n这两个参数具体的实践\n\n- 在Redis刷RDB和AOF（RDB是手动或者定时触发bgsave生成的），而AOF是有一个配置的：no，always，everysec\n- 在Mysql中redolog和binlong的刷盘也是有配置的。\n- 它们之所以提供配置，就是因为内核并不是保证实时刷盘的。\n\n\n\n\n\n\n\n想写的时候，compact一下\n\n想读的时候，flip一下\n\n数据库会用DirectIO\n\n\n\n\n\n![image-20230530190036881](IO精讲.assets/image-20230530190036881.png)\n\n\n\n\n\nIO的种类有很多种\n\n- 磁盘IO\n- socket IO\n- 网络IO\n\n都是IO\n\n\n\n"},{"title":"在页面上一键部署hexo","url":"/note/TOOLS/HEXO/在页面上一键部署hexo/","content":"\n\n\nhttps://github.com/msoap/shell2http\n\n\n\n","tags":["hexo"],"categories":["TOOLS","hexo"]},{"title":"hexo+butterfly更新mermaid版本","url":"/note/TOOLS/HEXO/hexo+butterfly更新mermaid版本/","content":"\n# hexo+butterfly更新mermaid版本\n\n\n\n怎么使用的mermaid，可以参考butterfly的官网：https://butterfly.js.org/posts/4aa8abbe/#mermaid\n\n\n\n最近在本地重新编辑一篇文章之后，部署起来，发现有一个`mermaid`图表不支持了。\n\n原因是因为：我的 `hexo` 引用的 `butterfly` 主题默认使用的 `mermaid` 版本是 `8.13.8`\n\n而我本地是使用 `typora` 编辑的，`typora` 版本是 `1.5.8`，引用的 mermaid 版本是 `9.2.0`\n\n所以我是用了 新版本的特性之后，在低版本中就无法渲染了。\n\n\n\n<img src=\"hexo+butterfly更新mermaid版本.assets/image-20230217231526333.png\" alt=\"image-20230217231526333\" style=\"zoom:50%;\" />\n\n\n\n**解决办法**\n\n更新 hexo+butterfly 的 mermaid 版本\n\nmermaid 版本是主题引入的，其实就是主题引入了一个js\n\n我们找到这个 js ，给它升级了就完事了\n\n\n\n找到主题目录\n\n> .../你的主题目录/hexo-theme-butterfly/layout/includes/footer.pug\n\n<img src=\"hexo+butterfly更新mermaid版本.assets/image-20230217230355932.png\" alt=\"image-20230217230355932\" style=\"zoom:50%;\" />\n\n打开`footer.pug`文件，将引入的低版本mermaid直接升级就可以了\n\n<img src=\"hexo+butterfly更新mermaid版本.assets/image-20230217230516681.png\" alt=\"image-20230217230516681\" style=\"zoom: 33%;\" />\n\n\n\n然后重新部署一遍就可以了。\n\n<img src=\"hexo+butterfly更新mermaid版本.assets/image-20230217231546566.png\" alt=\"image-20230217231546566\" style=\"zoom:50%;\" />\n\n\n\n","tags":["hexo","butterfly","mermaid"],"categories":["TOOLS","hexo"]},{"title":"docker+hexo+gitee部署完美个人博客","url":"/note/TOOLS/HEXO/docker+hexo+gitee部署完美个人博客/","content":"\n\n\n## 引用\n\n因为引用的文章在下面都说到了，可以先看看\n\n[Docker + Git 部署Hexo发布](https://zhuanlan.zhihu.com/p/372398281)\n\n[【hexo指南】hexo配置ER图流程图时序图插件](https://www.cnblogs.com/moshuying/p/15801437.html)\n\n\n\n## 前言\n\n**本文仅适用：x86_64架构**\n\n\n\n因为平时使用typora写文章，除了基本的MD语法之外，还使用了\n\n- 本地图片\n- mermaid\n\n\n\n就是上面两点，导致部署hexo比较麻烦，特别是第一点。\n\n\n\n为什么呢？\n\n\n\nhexo新版本不是支持了本地图片吗？\n\n\n\n但是支持的前提是：图片的文件夹和MD文件名一致，像下面这样\n\n- xxxxx.md （MD文件）\n- xxxxx （图片文件夹）\n\n而我的图片存储方式是：\n\n- xxxxx.md（MD文件）\n- xxxxx.assets（图片文件夹）\n\n对应typora的设置就是：\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030220722156.png\" alt=\"image-20221030220722156\" style=\"zoom:50%;\" />\n\n所以hexo就不支持了，我就很难受\n\n\n\n## 第一步：准备hexo文件\n\n你需要准备你的所有笔记文件：比如我的是放在gitee的，大致有下面这些笔记\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030220831563.png\" alt=\"image-20221030220831563\" style=\"zoom:50%;\" />\n\n然后需要准备一个hexo的主题，我推荐是 butterfly，把主题下载下来\n\n然后需要准备hexo的配置文件_config.yml，配置好你所需要的所有内容\n\n然后准备下面的脚本，命名为：hexo-img-move.js\n\n```js\nconst fs = require('fs-extra');\n\n\n//note/xxx/xx.assets  2020/10/30/xxx/xx.assets\nfunction copy(dir,dest){\n\tfs.pathExists(dir, (err, exists) => {\n\t  if (exists) {\n\t\tfs.copy(dir, dest, err => {\n\t\t  if(err) \n\t\t  \treturn console.error(err);\n\t\t  console.log('success!');\n\t\t});\n\t  }\n\t})\n}\n\n\n\n\n//遍历递归public文件夹，将\nfunction readFileList(path, filesList) {\n    var files = fs.readdirSync(path);\n    files.forEach(function (itm, index) {\n        var stat = fs.statSync(path + itm);\n        if (stat.isDirectory()) {//递归读取文件\n            readFileList(path + itm + \"/\", filesList)\n        } else {\n            var obj = {};//定义一个对象存放文件的路径和名字\n            obj.path = path;//路径\n            obj.filename = itm//名字\n            filesList.push(obj);\n        }\n    })\n}\nvar getFiles = {\n    //获取文件夹下的所有文件\n    getFileList: function (path) {\n        var filesList = [];\n        readFileList(path, filesList);\n        return filesList;\n    },\n};\n\n\ngetFiles.getFileList('/var/www/hexo/public/').forEach(function (obj){\n\t// console.log(obj.path);\n\n\n\t// var paths = obj.path.split('public/');\n\t// var dir_part = paths[1];\n\t// var dir_full = '/var/www/hexo/source/_posts/'+dir_part;\n\t// var dir = dir_full.substring(0,dir_full.length-1)+'.assets';\n\n\n\tvar dir_part = obj.path.split('note')[1];\n\tvar dir_full = '/var/www/hexo/source/_posts/note'+dir_part;\n\tvar dir = dir_full.substring(0,dir_full.length-1)+'.assets';\n\n\n\t//第一种：复制到 dir 的下一级目录下\n\tvar dirs = dir.split('/');\n\tvar aessets_name = dirs[dirs.length-1]\n\tvar dest1 = obj.path+aessets_name;\n\n\n\n\t// 第二种：复制到 dir 同级目录下\n\t// var dest2 = obj.path.substring(0,obj.path.length-1)+'.assets';\n\n\n\t//第三种：复制到 public 下\n\tvar dirs = dir.split('/');\n\tvar forder_name = dirs[dirs.length-1].split('.assets')[0];\n\tvar dest_full = obj.path.substring(0,obj.path.length-1)+'.assets';\n\tvar dests = dest_full.split('/');\n\tvar dest3 = '/var/www/hexo/public/'+dests[dests.length-1];\n\n\t//\n\n\t///var/www/hexo/public/2022/10/30/note/JAVA/数据库/MYSQL/mysql的日志从入门到入土/\n\t// console.log(dir)\n\tcopy(dir,dest1);\n\tcopy(dir,dest3);\n\n})\n\n\n```\n\n\n\n\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030221220970.png\" alt=\"image-20221030221220970\" style=\"zoom:80%;\" />\n\n\n\n## 第二步：准备dockerfile\n\n将下面的文件 命名为：Dockerfile  没有后缀名\n\n```dockerfile\nFROM node:14-alpine\nWORKDIR /var/www/hexo\n\nRUN echo \"Asia/Shanghai\" > /etc/timezone \\\n    && echo \"https://mirrors.aliyun.com/alpine/v3.9/main/\" > /etc/apk/repositories  \\\n    && npm config set registry https://registry.npm.taobao.org \\\n    && apk add --no-cache git \\\n    && apk add --no-cache openssh-client \\\n    && npm install hexo-cli -g \\\n    && hexo init \\\n    && npm install hexo-renderer-swig \\\n    && npm install \\\n    && npm install fs-extra --save \n    && npm install hexo-deployer-git --save \\\n    && npm install hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save \\\n    && npm install hexo-filter-mermaid-diagrams --save \\\n    && npm install hexo-blog-encrypt --save \\\n    && npm install hexo-generator-search --save \\\n    && git config --global user.email \"zhuansunpengcheng@qq.com\" \\\n    && git config --global user.name \"zhuansun\" \\\n    && ssh-keygen -t RSA -C \"zhuansunpengcheng@qq.com\" -P \"\" -N \"\" -f /root/.ssh/id_rsa \\\n    && echo \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config \\\n    && cat /root/.ssh/id_rsa.pub\n\n```\n\n\n\n- 我们使用alpine作为基本镜像，因为够小，对于hexo来说，足够了\n- 设置工作目录是 /var/www/hexo\n- 下面就是安装git，ssh，hexo\n- npm install fs-extra --save ：安装fs-extra的依赖，是为了我们的 hexo-img-move.js能正常运行\n- 安装了一些hexo的插件\n  - hexo-deployer-git：让hexo支持直接部署到git上\n  - hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive：这些是为了butterfly主题支持用的\n  - hexo-filter-mermaid-diagrams：让hexo支持mermaid流程图（解决了我的第二个痛点）：https://www.cnblogs.com/moshuying/p/15801437.html\n  - hexo-blog-encrypt：加密文章，使用方法见github：https://github.com/rdou/hexo-blog-encrypt\n    - 说明：在http环境下不支持加密，这是因为脚本中的使用的crypto对象，有一个subtle属性只能在https环境下获取到。\n    - <img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221031001047545.png\" alt=\"image-20221031001047545\" style=\"zoom: 30%;float:left\" />\n    - <img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221031001405503.png\" alt=\"image-20221031001405503\" style=\"zoom:33%;float:left\" />\n- hexo-generator-search：实现本地搜索，hexo本地搜索的实现原理是在 public 目录下，生成一个 search.xml 文件\n- 设置git的邮箱和用户名，填自己的就行\n- 设置ssh公钥，是为了让git提交的时候不用每次都输入密码，直接用公钥提交\n- echo \"StrictHostKeyChecking no\" >> /etc/ssh/ssh_config \\： 这一步很重要，是为了容器启动的时候，跳过ssh公钥的检查，避免手动输入yes\n- cat /root/.ssh/id_rsa.pub：打印公钥\n\n\n\n\n\n## 第三步：构建docker镜像\n\n在Dockerfile的目录下，运行下面的命令\n\n```shell\ndocker build -t zhuansun/hexo:v1.0 .\n```\n\n- -t：表示指定镜像的名字和标签\n- zhuansun/hexo:v1.0 : 表示镜像的名字，v1.0是标签\n- . ：这个点，不知道啥意思，写上\n\n\n\n查看构建的镜像\n\n```shell\nash-4.3# docker image ls\nREPOSITORY                                          TAG                       IMAGE ID       CREATED         SIZE\nzhuansun/hexo                                       v1.0                      71b6e1b7ea19   4 minutes ago   249MB\n```\n\n\n\n\n\n## 第四步：运行容器\n\n我用的是群辉的docker，挂载了四个目录，和一个端口\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030222106418.png\" alt=\"image-20221030222106418\" style=\"zoom: 80%;\" />\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030222129007.png\" alt=\"image-20221030222129007\" style=\"zoom:50%;\" />\n\n其他的都是默认。然后启动\n\n注意：\n\n挂载的文件夹里面，要有内容哦。按照第一步，该放的都放好。\n\n\n\n## 第五步：启动容器\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030222250742.png\" alt=\"image-20221030222250742\" style=\"zoom:80%;\" />\n\n\n\n## 第六步：使用容器\n\n先开启群辉的ssh，然后进入到容器里面\n\n```sh\ndocker exec -it xxxxxxx sh\n```\n\n进来之后，默认就是我们设置的：/var/www/hexo\n\n```sh\nash-4.3# docker exec -it fb29ef2559ef sh\n/var/www/hexo # ls\n_config.landscape.yml  db.json                package-lock.json      public                 shell                  themes\n_config.yml            node_modules           package.json           scaffolds              source                 yarn.lock\n/var/www/hexo # hexo clean\nINFO  Validating config\nINFO  Deleted database.\nINFO  Deleted public folder.\n/var/www/hexo # hexo g\nINFO  Validating config\nINFO  Start processing\nINFO  Generated: note/JAVA/数据库/MYSQL/mysql中的交集差集并集/index.html\nINFO  Generated: note/JAVA/GIT/git批量删除分支/index.html\nINFO  Generated: note/PROJECT/时效项目/index.html\nINFO  73 files generated in 7.03 s\n/var/www/hexo # node shell/hexo-img-move.js \nsuccess!\nsuccess!\nsuccess!\n/var/www/hexo # hexo server -d\nINFO  Validating config\nINFO  \n[Browsersync] Access URLs:\n ----------------------------------\n          UI: http://localhost:3001\n ----------------------------------\n UI External: http://localhost:3001\n ----------------------------------\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n```\n\n- 说一下 node shell/hexo-img-move.js  这一步，hexo生成静态文件之后，只有html，并没有图片的\n- 如果你用的是图床，那么完全啥问题都没有\n- 如果是本地图片，我们就需要把本地图片移动到指定的文件夹中\n- 然后hexo server启动后，html才可以找到图片（具体怎么移动的可以看上面的代码）\n\n## 第七步：本地验证hexo服务\n\n图片可以正常显示\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030222950902.png\" alt=\"image-20221030222950902\" style=\"zoom:80%;\" />\n\n\n\n代码可以正常显示\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030223012143.png\" alt=\"image-20221030223012143\" style=\"zoom:80%;\" />\n\n\n\n时序图可以正常显示\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030223026695.png\" alt=\"image-20221030223026695\" style=\"zoom:80%;\" />\n\n## 第八步：部署到gitee\n\n首先需要配置上面的公钥到gitee上，百度很简单\n\n然后再hexo中：\n\n```sh\n/var/www/hexo # hexo d\nINFO  Validating config\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n[master c3fe339] Site updated: 2022-10-30 14:31:27\nEnumerating objects: 308, done.\nCounting objects: 100% (308/308), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (247/247), done.\nWriting objects: 100% (284/284), 22.02 MiB | 1.09 MiB/s, done.\nTotal 284 (delta 51), reused 0 (delta 0)\nremote: Resolving deltas: 100% (51/51), completed with 3 local objects.\nremote: Powered by GITEE.COM [GNK-6.4]\nTo gitee.com:zhuansunpengcheng/zhuansunpengcheng.git\n   e4984bb..c3fe339  HEAD -> master\nBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:zhuansunpengcheng/zhuansunpengcheng.git'.\nINFO  Deploy done: git\n```\n\n提交成功之后，到gitee上，开始gitee page服务\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030223331923.png\" alt=\"image-20221030223331923\" style=\"zoom:50%;\" />\n\n\n\n然后就可以使用了\n\n<img src=\"docker+hexo+gitee部署完美个人博客.assets/image-20221030223426237.png\" alt=\"image-20221030223426237\" style=\"zoom:80%;\" />\n","tags":["docker","hexo","gitee"],"categories":["TOOLS","hexo"]},{"title":"黑群晖使用DNSPod设置外网访问","url":"/note/TOOLS/DSM/黑群晖使用DNSPod设置外网访问/","content":"\n# 黑群晖使用DNSPod设置外网访问\n\n\n\n我折腾群辉的 DDNS 已经很久了，之前使用的是花生壳，虽然能用，但是我觉得并不好用，所以使用了腾讯云的 DSNPod 做 DDNS\n\n\n\n## **步骤1:  注册域名**\n\n1) 登录 [**DNSPod 管理控制台**](https://console.dnspod.cn/)，进行购买\n\n2) 完成购买后，即可进入 [**我的域名**](https://console.dnspod.cn/dns/list) 管理页面查看您注册的域名。\n\n\n\n## **步骤2：启用 DDNS**\n\n1) 在 “[**我的域名**](https://console.dnspod.cn/dns/list)” 管理页面，单击您已注册的域名，即可进入【记录管理】页面。\n\n2) 单击【添加记录】，添加一条主机记录为 @，记录值为 0.0.0.0  的 A 记录。如下图所示：\n\n注意：记录值可以填写为任意IP地址，完成操作步骤后将会自动更新为您的公网IP地址。此处以 0.0.0.0记录值为例。\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223171928275.png\" alt=\"image-20230223171928275\" style=\"zoom: 67%;\" />\n\n\n\n3) 进入 [**密钥管理**](https://console.dnspod.cn/account/token) 页面，单击【创建密钥】，输入自定义的密钥名称后并单击【确定】。如下图所示：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223172005486.png\" alt=\"image-20230223172005486\" style=\"zoom:80%;\" />\n\n\n\n4) 请妥善保管对话框中的 ID 与 Token。如下图所示：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223172030142.png\" alt=\"image-20230223172030142\" style=\"zoom:80%;\" />\n\n\n\n5) 请使用具有管理员权限的账号登录您的群晖（Synology） NAS，依次单击【控制面板】>【外部访问】。如下图所示\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223172051836.png\" alt=\"image-20230223172051836\" style=\"zoom:80%;\" />\n\n\n\n6) 在【DDNS】页签中，单击【新增】。如下图所示：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223172118673.png\" alt=\"image-20230223172118673\" style=\"zoom:80%;\" />\n\n\n\n7) 在弹出的对话框中的【服务供应商】选单内下拉选择【DNSPod.cn】,并填写相关信息。如下图所示：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223172142806.png\" alt=\"image-20230223172142806\" style=\"zoom:80%;\" />\n\n- **主机名称：**填写您购买的域名。\n- **用户名/电子邮箱：**填写您获取到的DNSPod ID。\n- **密码/密钥：**填写您获取到的密钥。\n\n\n\n注意：您可单击【测试联机】，测试是否能成功联机。状态栏显示为正常，即代表成功联机。\n\n\n\n8) 单击【确定】。\n\n\n\n9) 单击【立即更新】，确认状态栏显示正常。如下图所示：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223172238586.png\" alt=\"image-20230223172238586\" style=\"zoom:80%;\" />\n\n\n\n10) 返回 [**我的域名**](https://console.dnspod.cn/dns/list) 管理页面，查看记录值的是否已变更为您的公网 IP 地址，已变更为设置成功。未变更，请进行相关排查。\n\n\n\n**完成以上步骤，我们的DDNS就搭建好啦！**\n\n\n\n## 步骤3：配置外网访问\n\n\n\n一般家庭网络，公网ip都是禁用80端口和443端口的，所以要想配置外网访问，只能修改端口\n\n\n\n1.打开群辉的设置，选择【网络】，然后选择【DSM设置】，设置 http 端口和 https 端口\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223172711400.png\" alt=\"image-20230223172711400\" style=\"zoom:80%;\" />\n\n\n\n2.配置路由器端口转发\n\n我用的是小米路由器，在【高级设置】中【端口转发】，将内网的要转发的端口转发出去\n\n比如我这里的设置的就是：当从公网访问 1337 端口后，会转发到内网的 1337 端口上\n\n注意：这里我只配置了 https 的端口，因为我绑定了证书，可以使用 https 访问，更加安全；如果没有https，可以使用http\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223173032070.png\" alt=\"image-20230223173032070\" style=\"zoom: 67%;\" />\n\n\n\n3.这样，你就可以通过公网访问了。\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223173158744.png\" alt=\"image-20230223173158744\" style=\"zoom:67%;\" />\n\n\n\n## 步骤4：配置https安全访问\n\n要想配置 https 访问，首先必须要有 证书，证书可以直接取 DNSPod 控制台免费申请，一个账号可以免费申请 20本 证书，足够用了\n\n这里的步骤，简单的描述就是：\n\n- 申请证书\n- 把证书导入到群辉\n- 将证书设置为默认证书\n- 搞定\n\n具体的步骤可以直接参考DNSPod的官方文档：[群晖（Synology）NAS 安装免费 SSL 证书](#https://cloud.tencent.com/document/product/302/79821)\n\n\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223203835651.png\" alt=\"image-20230223203835651\" style=\"zoom:80%;\" />\n\n至此，HTTPS 安全访问就可以了，也就意味着，你可以通过公网，使用https访问你的群辉了。\n\n注意在路由器中，将你的 https 服务对应的端口号转发出去哦\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223173158744.png\" alt=\"image-20230223173158744\" style=\"zoom:67%;\" />\n\n## 步骤5：配置其他服务的HTTPS访问\n\n经过上面的配置，我们的群辉已经可以通过外网安全访问了。\n\n使用我们的域名：xxxx.xxx\n\n使用我们配置的https的端口：1337\n\n就可以在外网通过  xxxx.xxx:1337  愉快的访问群辉了。\n\n\n\n下面我们来看看：在群辉中，我有一个内网服务，怎么把这个内网服务映射到外网中。\n\n我以 firefox 为例子；配置一个可以外网访问的 firefox 浏览器，可以在外网访问家里内网的各种服务\n\n通过域名：firefox.xxxx.xxx:1337 访问内网的firefox浏览器，就像下面这样：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223204238222.png\" alt=\"image-20230223204238222\" style=\"zoom:80%;\" />\n\n\n\n**在 docker 中安装 firefox**\n\n在 docker 中搜索 firefox，并安装：\n\ndocker 镜像：https://registry.hub.docker.com/r/jlesage/firefox/\n\ngithub网站：[GitHub - jlesage/docker-firefox: Docker container for Firefox](https://github.com/jlesage/docker-firefox)\n\n\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223204413138.png\" alt=\"image-20230223204413138\" style=\"zoom:80%;\" /> \n\n\n\n安装教程和相关文档，作者已经说得很清楚了。我这里再简单的描述一下\n\n本地新建一个文件夹：/docker/firefo/data\n\n然后配置docker\n\n**端口配置**：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223204644619.png\" alt=\"image-20230223204644619\" style=\"zoom:80%;\" />\n\n**存储空间配置**：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223204702767.png\" alt=\"image-20230223204702767\" style=\"zoom:80%;\" />\n\n**环境变量配置**：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223204955490.png\" alt=\"image-20230223204955490\" style=\"zoom:80%;\" />\n\n然后启动docker\n\n因为字体包比较大， 所以启动的时间会比较慢，等，，我等了15分钟左右\n\n启动之后，在本地就可以通过 192.168.x.x:5888 端口访问 firefox 了；\n\n\n\n**配置外网访问**\n\n因为上面我们对群辉配置了 https 安全访问，所以 firefox 也要设置https安全访问\n\n通过作者的文档可以看到，firefox是支持https访问的\n\n只需要将配置项：SECURE_CONNECTION 设置为 1 就可以了\n\n设置为 1 之后，会自动生成 证书文件， 放在 config/certs 文件夹下面\n\n**但是呢**\n\n上面的方法，我亲身验证，其实并不需要这么做。 所以我们不需要设置：SECURE_CONNECTION ，让它保持默认值 0 就可以啦。\n\n那怎么配置呢？\n\n\n\n打开群辉，【设置】【Synology应用程序门户】【反向代理服务器】【新增】一个反向代理配置\n\n配置入图\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223205555072.png\" alt=\"image-20230223205555072\" style=\"zoom:80%;\" />\n\n到这里，群辉的配置就结束了。\n\n但是别忘了，要想使用 https 安全的访问firefox还需要什么？ 对头，还需要证书！\n\n\n\n所以我们要为我们的二级域名，也就是 ：firefox.xxxx.xxx 去单独申请一个证书。\n\n\n\n**申请二级域名证书**\n\n1) 在 “[**我的域名**](https://console.dnspod.cn/dns/list)” 管理页面，单击您已注册的域名，即可进入【记录管理】页面。\n\n2) 单击【添加记录】，添加一条主机记录为 firefox，记录值为 xxxx.xxx(这里是指你的域名)  的 CNAME 解析记录。如下图所示：\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223205841510.png\" alt=\"image-20230223205841510\" style=\"zoom:80%;\" />\n\n\n\n然后在这个记录后面，去申请 SSL 证书，申请方法和上面讲的一样，这里不再赘述；\n\n证书申请下来之后\n\n按照DNSPod的官方文档：[群晖（Synology）NAS 安装免费 SSL 证书](#https://cloud.tencent.com/document/product/302/79821)，导入到群辉中，**注意，只是导入进来， 不需要任何配置**\n\n也就是说，步骤是：\n\n- 申请证书\n- 把证书导入到群辉\n- ~~将证书设置为默认证书（**这一步可千万不要做如果你做了，就在改回来**，）~~\n- 搞定\n\n\n\n\n\n搞定之后，我们来到群辉中，打开【设置】【安全性】【证书】在进行接下来的配置\n\n按照图片上的内容，进行如下的配置\n\n<img src=\"黑群晖使用DNSPod设置外网访问.assets/image-20230223210520238.png\" alt=\"image-20230223210520238\" style=\"zoom:80%;\" />\n\n\n\n等你配置完之后，就完结撒花了。\n\n\n\n在浏览器中，就可以通过 https://firefox.xxx.xx:1337 访问你的firefox火狐浏览器啦。\n\n\n\n举一反三：其他任何的内网服务，都可以通过这样的步骤，暴露到公网中。 \n\n所以，每一个二级域名，都要单独申请一本证书，还是挺麻烦的。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["dsm","群辉","ddns"],"categories":["TOOLS","DSM"]},{"title":"群辉记录","url":"/note/TOOLS/DSM/群辉记录/","content":"\n\n\n\n\n# 群辉的SSH\n\n\n\n---\n\n\n\n开启TTYD-WEB\n\n外网端口：7688，内网端口：7681\n\n用户名：admin\n\n密码：zspc-pass@2021mima\n\n进入之后获取root权限\n\n```shell\nadmin@DS918Plus:~$ sudo su\n\nPassword: \n\nash-4.3# //就获得了root权限\n```\n\n\n\n\n\n# 群辉账号记录\n\n---\n\n\n\n\n\n端口\n\n1335 : nas\n\n1995：为知笔记的（admin@win.cn 密码：zhuansun1995  管理员账号） 其他用户，直接注册就行；\n\n笔记的阿里云oss配置\n\n```json\n{\n \"bucket\": \"win-data-nas\",\n \"region\": \"oss-cn-hangzhou\",\n \"accessKeyId\": \"LTAIBy8ViubtsSc7\",\n \"accessKeySecret\": \"ywuXX8QDv4HeswsRhtwuYGF7N1ml9o\",\n \"internal\": false\n}\n```\n\n\n\n同步到网盘的密码都是：zhuansun1995\n\n\\- 群辉文件是加密的\n\n\\- docker文件不是加密的，方便docker迁移\n\n<img src=\"群辉记录.assets/image-20220822121931965.png\" alt=\"image-20220822121931965\" style=\"zoom:50%;\" />\n\n\n\n\n\n常用密码：\n\nzhuansun1995\n\nzhuansun1996\n\nZHUANsun1995\n\nzhuansun666\n\nZHUANsun1996\n\nZHUANsun@1995\n\nPENGcheng@1995\n\nzspc521\n\n### gpg秘钥\n\n- name:zhuansun\n- email:[zhuansunpengcheng@qq.com](mailto:zhuansunpengcheng@qq.com)\n- Passphrase:ZHUANsun@1995\n\n### snapType\n\n- zhuansun\n- PENGcheng@1995","tags":["个人账号"],"categories":["TOOLS","DSM"]},{"title":"promethues如何添加配置","url":"/note/JAVA/监控/promethues如何添加配置/","content":"\n\n\n修改promethues.yml文件\n\n<img src=\"promethues如何添加配置.assets/image-20220902160951197.png\" alt=\"image-20220902160951197\"  />\n\n\n\n比如我要添加一个kafka的监控，使用kafka-expoter: 进行如下配置：\n\n<img src=\"promethues如何添加配置.assets/image-20220902161001220.png\" alt=\"image-20220902161001220\" style=\"zoom:80%;\" />\n\n\n\n首次启动\n\n```sh\nnohup ./prometheus --config.file=prometheus.yml &\n```\n\n\n\n热部署\n\n- 只加载配置文件，不重启promethues的进程\n- 找到promethues的进程ID： lsof -i:9090\n- kill -HUP pid\n- 观察日志，或者刷新promethus的页面，可以看到新的配置被加载\n\n<img src=\"promethues如何添加配置.assets/image-20220902161056730.png\" alt=\"image-20220902161056730\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"promethues如何添加配置.assets/image-20220902161108613.png\" alt=\"image-20220902161108613\" style=\"zoom:80%;\" />\n\n\n\n使用kafka-expoter指定端口号：\n\n```shell\n nohup ./kafka_exporter --kafka.server=10.13.70.4:9092 --web.listen-address=:9309 &\n```\n\n\n\n","tags":["promethues"],"categories":["JAVA","监控"]},{"title":"【mybatis】解决mybatis-plus的分页问题","url":"/note/JAVA/SSM/【mybatis】解决mybatis-plus的分页问题/","content":"\n\n\n## 现象\n\nmybatis-plus的分页插件：\n\n- 默认只支持一页500条；\n- 但凡是在代码中指定分页大于500的，统一当做500处理；\n\n\n\n## 怎么解决\n\n\n\n```java\n@Configuration\npublic class MybatisPlusConfig extends MybatisPlusBaseConfig {\n\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();\n        // 设置最大单页限制数量，默认 500 条，-1 不受限制\n        paginationInterceptor.setLimit(50000L);\n        return paginationInterceptor;\n    }\n\n}\n```\n\n\n\n在顺丰的框架中（sf-boot）：直接按照上面这样配置，会报错:\n\n- 因为`com.sf.boot.base.config.MybatisPlusBaseConfig`已经把这个分页插件注册进来了，我们自己在注册一遍，就会出现问题；\n\n```java\nError starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.\n2022-08-25T19:22:41.054+0800|ERROR|main|org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter||\n\n***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nThe bean 'performanceInterceptor', defined in class path resource [com/sf/boot/base/config/MybatisPlusBaseConfig.class], could not be registered. A bean with that name has already been defined in class path resource [com/sf/fns/nas/amp/config/MybatisPlusConfig.class] and overriding is disabled.\n\nAction:\n\nConsider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true\n```\n\n\n\n怎么解决呢？\n\n- 方法一：开启spirng的bean重写配置\n  - 不太靠谱，因为两个地方同时定义了一个bean ，使用bean的覆盖重写其实在某种情况下是很可能出事的。\n\n```\nspring.main.allow-bean-definition-overriding=true\n```\n\n- 【目前我采用的】方法二：启动类中排除`com.sf.boot.base.config.MybatisPlusBaseConfig`\n\n```java\n@EnableFeignClients(basePackages = {\"com.xx.xxx.xxx\"})\n@RestController\n@EnableTransactionManagement\n@MapperScan(\"com.xx.xx.xx.xx.mapper\")\n@SpringBootApplication(exclude = MybatisPlusBaseConfig.class)\npublic class AppApplication {\n    public static void main(String[] args) {\n        SpringApplication app = new SpringApplication(AppApplication.class);\n        app.setBannerMode(Banner.Mode.OFF);\n        app.run(args);\n    }\n}\n\n```\n\n\n\n## 源码原因\n\n<img src=\"【mybatis】解决mybatis-plus的分页问题.assets/image-20220825111404053.png\" alt=\"image-20220825111404053\" style=\"zoom:80%;\" />\n\n<img src=\"【mybatis】解决mybatis-plus的分页问题.assets/image-20220825111444219.png\" alt=\"image-20220825111444219\" style=\"zoom:80%;\" />\n\n\n\n","tags":["mybatis-plus","分页"],"categories":["JAVA","SSM"]},{"title":"mac更新系统后git无法使用","url":"/note/JAVA/GIT/mac更新系统后git无法使用/","content":"\n\n\n# mac更新系统后git无法使用\n\n今天更新了mac系统，然后就踩了这个坑。\n\n 启动Idea 左下角角提示：\n\n```sh\ncan't start git: /usr/bin/git \nprobably the path to git executable is not valid . `fix it`.12\n```\n\n点击fix it后 点击最上边路径地址后边的test提示：\n\n```sh\nerrors while executing git -- version. exitCode=1 \nerrors: xcrun: error : invalid active developer path(/library/developer/commandlinetools),missing xcrun at:\n/library/developer/commandlinetools.usr/bin/xcrun123\n```\n\n找了一圈。。很多开发者都遇到过这问题。据说苹果每个版本的更新都会有这样的问题，原因是每次安装新的更新后，Xcode都被卸载了。。。。不扯别的说解决方案。\n\n\n\n## 方法一\n\n 通过终端重新安装的Xcode命令行工具使用（其实这里安装的是Command Line Tools，Command Line Tools是在Xcode中的一款工具）\n\n```\nxcode-select --install1\n```\n\n## 方法二（本人没试，感兴趣的小伙伴可以尝试下）\n\n如果不安装Xcode可以重安装git(下载地址)然后在Idea中切换到路径/usr/local/git/bin/git。\n\n<img src=\"mac更新系统后git无法使用.assets/image-20220902164505181.png\" alt=\"image-20220902164505181\" style=\"zoom:80%;\" />\n\n## 参考\n\n- https://blog.csdn.net/qq_23089525/article/details/52789005","tags":["git","mac"],"categories":["JAVA","GIT"]},{"title":"git清空stash及其他操作","url":"/note/JAVA/GIT/git清空stash及其他操作/","content":"\n\n\n# git清空stash及其他操作\n\n\n\n将当前变更保存到stash\n\n> git stash\n\n将当前变更保存到stash，自定义说明信息\n\n> git stash save '这里是自定义说明信息'\n\n列出所有的stash\n\n> git stash list\n\n弹出stash，也就是将stash中的内容应用到当前分支，并删除这个stash\n\n> git stash pop\n\n弹出指定的stash，也就是将stash中的内容应用到当前分支，并删除这个stash，后面的@{0}可以指定\n\n> git stash pop stash@{0}\n\n删除stash\n\n> git stash drop\n\n删除指定的stash,后面的@{0}可以指定\n\n> git stash drop stash@{0}\n\n清空stash\n\n> git stash clear\n\n展示stash中的内容\n\n> git show stash@{n}","tags":["git","git stash"],"categories":["JAVA","GIT"]},{"title":"git批量删除分支","url":"/note/JAVA/GIT/git批量删除分支/","content":"\n\n\n# git批量删除分支\n\n\n\n批量删除除当前分支外的所有本地分支：\n\n> git branch | xargs git branch -d\n\n<img src=\"git批量删除分支.assets/image-20220913190900166.png\" alt=\"image-20220913190900166\" style=\"zoom:80%;\" />\n\n批量删除指定分支，比如删除所有，分支名字包含zspc的分支\n\n> git branch | grep 'zspc' | xargs git branch -d\n\n<img src=\"git批量删除分支.assets/image-20220913190918209.png\" alt=\"image-20220913190918209\" style=\"zoom:80%;\" />\n\n删除的过程中，如果被删除的分支没有merge，会有提示，git默认不会删除，如果我们不需要，可以使用-D强制删除","tags":["git","删分支"],"categories":["JAVA","GIT"]},{"title":"gitkraken基本操作","url":"/note/JAVA/GIT/gitkraken基本操作/","content":"\n# gitkraken基本操作基本操作\n\n\n\n## 参考文章\n\n- https://www.cnblogs.com/thousfeet/p/7840932.html\n\n## 设置页面\n\n<img src=\"gitkraken基本操作.assets/image-20220902161937456.png\" alt=\"image-20220902161937456\" style=\"zoom:80%;\" />\n\n## 主页面\n\n<img src=\"gitkraken基本操作.assets/image-20220902161950613.png\" alt=\"image-20220902161950613\" style=\"zoom: 50%;\" />\n\n## 开发完之后，怎么提交代码\n\n<img src=\"gitkraken基本操作.assets/image-20220902162002852.png\" alt=\"image-20220902162002852\" style=\"zoom:50%;\" />\n\n<img src=\"gitkraken基本操作.assets/image-20220902162008472.png\" alt=\"image-20220902162008472\" style=\"zoom:50%;\" />\n\n<img src=\"gitkraken基本操作.assets/image-20220902162013743.png\" alt=\"image-20220902162013743\" style=\"zoom:50%;\" />\n\n\n\n## 分支合并(合并一个分支到另一个分支)\n\n<img src=\"gitkraken基本操作.assets/image-20220902162027350.png\" alt=\"image-20220902162027350\" style=\"zoom:50%;\" />\n\n\n\n## 冲突解决\n\n<img src=\"gitkraken基本操作.assets/image-20220902162038808.png\" alt=\"image-20220902162038808\" style=\"zoom:50%;\" />\n\n<img src=\"gitkraken基本操作.assets/image-20220902162044157.png\" alt=\"image-20220902162044157\" style=\"zoom:50%;\" />\n\n<img src=\"gitkraken基本操作.assets/image-20220902162050142.png\" alt=\"image-20220902162050142\" style=\"zoom:50%;\" />\n\n<img src=\"gitkraken基本操作.assets/image-20220902162055281.png\" alt=\"image-20220902162055281\" style=\"zoom:50%;\" />\n\n\n\n## 怎么清除保存的用户名和密码\n\n<img src=\"gitkraken基本操作.assets/image-20220902162119698.png\" alt=\"image-20220902162119698\" style=\"zoom: 38%;\" />","tags":["git","gitkrake"],"categories":["JAVA","GIT"]},{"title":"ggitignore规则不生效的解决办法","url":"/note/JAVA/GIT/gitignore规则不生效的解决办法/","content":"\n\n\n# gitignore规则不生效的解决办法\n\n\n\n把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：\n\n```sh\ngit rm -r --cached .\n\ngit add .\n\ngit commit -m 'update .gitignore'\n```\n\n\n\n<img src=\"gitignore规则不生效的解决办法.assets/image-20220902162247958.png\" alt=\"image-20220902162247958\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"gitignore规则不生效的解决办法.assets/image-20220902162255835.png\" alt=\"image-20220902162255835\" style=\"zoom:80%;\" />","tags":["git","gitignore"],"categories":["JAVA","GIT"]},{"title":"DDD踩坑记录","url":"/note/JAVA/DDD/DDD踩坑记录/","content":"\n\n\n# DDD踩坑记录\n\n\n\n\n\n\n\n\n## 关于gateway的定位\n这么一个场景：如果我们有多个领域，比如领域A和领域B，这两个领域都需要调用 同一个远程服务gateway 获取一些数据；那么这个gateway怎么处理？\n\n* 是每一个领域下有一个单独的gateway？\n* 是把gateway抽离出来，由多个领域都可以进行调用（那么这个gateway所在的领域是个什么定位呢）？\n\n个人理解：\n\n正常来说，按照COLA的架构，是每一个domain（每一个领域）有自己单独的gateway；但是从实际的开发角度来看，每一个领域有自己的gateway比较难以维护，因为如果多个领域调用同一个gateway，相当于这个gateway我要复制一份。\n\n所以，综上考虑：还是选择第二种方案；就是抽离一个公共的model层，所有的gateway放在这里，有点类似于通用子域的概念；所有的领域都可以自由的调用model中的gateway；\n\n（但是，从DDD的角度来说，还是每一个领域都有一个单独的gateway更合理一些）\n\n\n\n\n\n\n\n## 查询条件太多，领域层入参怎么设计\n这么一个场景：假设我们有申请单域，用户需求需要根据：申请时间起止+申请人+审批人+审批状态+···完成时间起止等很多的查询条件，查询出申请单列表；那么这个时候domainSerview的入参就得是好多好多。\n\n纠结的点在于：如果我们这些查询条件封装成一个SO，传入domainSerview，但是这个SO和我的申请单域没有任何的关系；如果我把这些参数打平传进domainSerview，又太多了；怎么办呢？\n\n结论先行：\n\n* 封装成SO传入领域层；\n\n为什么这么做？ 因为我们考虑到代码的可读性，不建议方法有大量的入参，那么至于SO和我的领域有没有关系，其实我觉得不重要，因为DDD的基本概念是领域建模，唯一的要求就是：领域内是干净的。不要和其他的领域耦合在一起。基于这个点考虑，领域内部创建一些无意义的值对象（SO可以看做是值对象），我认为是可以的，因为这些值对象方便了领域内的处理。同时领域对外暴露的命令：查询命令；\n\n另外，如果有一些简单的查询，比如查询某个申请人的所有申请单，我们可以针对这个查询，在领域内单独抽出一个方法；\n\n* searchBySO\n* searchByApplier\n\n\n\n\n\n## 一个领域怎么引用另一个领域？\n比如说：domainService的入参可以是其他领域的聚合吗？在domainService内部可以调用另一个领域的服务呢？ \n\n* 不可以；\n* 不可以；\n\n如果一个领域A需要用到另一个领域B的对象的话，就把领域B的对象转成领域A中的对象；\n\n```java\n//根据userid和权限id获取用户权限\nUser user = userDomainService.getUserPointPrivilegeChildrens(cmd.getUserId(), cmd.getPermissionId());\n//将user权限转成指标维度\nDimension dimension = MetricAppFactory.userPrivilegeToDimension(user);\n//调用指标域（因为User是用户域的，不能直接传给指标域，所以做一层转黄）\nMetric metrics = metricDomainService.inTimeOrder(dimension);\n```\n这个转换，需要是有意义的；比如上面的代码，将用户的权限转成了指标维度，这个转换并不是随便转的，因为每一个指标都会有一个维度的概念。\n\n```java\n@Data\npublic class Metric {\n\n    /**\n     * 指标维度\n     */\n    private Dimension dimension;\n\n    /**\n     * 首页指标:  订单量，入网量，签收量，，等等，所以是一个list\n     */\n    private MetricIndex metricIndex;\n\n    /**\n     *  实时数据： 订单量，入网量，等指标vo\n     */\n    private MetricInTime inTime;\n\n    /**\n     * 历史数据：\n     */\n    private MetricHistory history;\n\n}\n```\n那么在domainService内部，可以调用另一个domainService吗？（换言之，一个领域服务怎么调用另一个领域服务）\n\n<img src=\"DDD踩坑记录.assets/image-20220902161603846.png\" alt=\"image-20220902161603846\" style=\"zoom:80%;\" />\n\n\n\n在cola架构中，domain层中是有防腐层的概念的，\n\n* 防腐层的包一般命名为acl\n* 防腐层的类一般命名为XXXGateWay（通过依赖倒置原则，实现在基础设施层）\n\n通过上面的概念，就可以理解，在一个领域中，一个领域服务调用另一个领域服务必须通过防腐层GateWay来调用，那么随之而来的几个问题：\n\n* 1、如果需要调用的领域服务是本项目中其他领域的服务，也需要gateway吗？\n   * 是的。也需要，把本项目中其他领域的服务当做远程服务一样来调用；\n* 2、如果本项目中有两个领域服务，需要调用远程同一个服务，gateway是在这两个领域服务下，每个领域服务中都创建一个gateway吗？即使这两个gateway代码完全一样？\n   * 是的，每个领域服务都需要创建GateWay，即使两个代码完全一样。\n\n\n\n\n\n## DO转PO的时候，是否需要填充所有的参数？\n比如说，数据库中只存了站点id，但是实际的业务逻辑中，需要用到站点类型，在DO中存的是Site这个实体，那么在从PO到DO的过程中，也就是siteId到Site的过程中，是否需要通过SiteId获取Site的所有数据，然后放在DO中，还是说，只需要把siteId放在Site中，就可以了。\n答案：需要获取所有的。1、获取PO对象；2、通过Factory一次性填充DO所有需要的属性。\n\n\n\n\n\n\n\n## 领域服务(Domain Service)的定位\n>   结论先行：领域服务的入参不必限制为必须是当前领域的聚合根；可以是多种多样的。\n\n之前讨论领域服务是领域层很重要的概念，主要用来写业务逻辑，入参只能使用聚合根；目前来看，这种方式是错误的。比如下面的场景：在进出港业务中：是根据各种各样的扫描（分拨发件，到件，派件，签收，退件，转寄等），采集进港属性（应派信息，签收信息，分拨信息等）；那么就有下面两种方式：\n\n* 目前的做法：将扫描放在进港域的聚合根(Inboard)中，进港的聚合根中包含了大量的扫描信息；\n\n这样做的目的是为了保证进港的领域服务(InboardDomainService)的入参只能是进港聚合根(Inboard)，但是为了满足这个目的，缺引入了很多的缺点：\n\n* 聚合根中引入了大量的无用扫描：为什么说是无用，因为进港聚合中只需要应派信息，签收信息，分拨信息，可是现在却不得不保存大量的扫描（退件，转寄，入库入柜等）；\n* 各种各样的扫描进入到领域服务(inboardDomainServie)之后，还要再拆分，根据不同的扫描类型，进行不同的业务逻辑处理；代码庞大难以维护；\n* 瞻仰一下目前的代码逻辑：这仅仅只是一部分而已\n\n```java\n    /**\n     * 设置应派信息：\n     * - 应派时间\n     * - 应派站点\n     *\n     * @param inboard    : 前端传过来的\n     * @param preInboard : 数据库中的\n     */\n    private void fillDispInfo(Inboard inboard, Inboard preInboard) {\n\n        DispInfo dispInfo = null;\n        SignInfo signInfo = null;\n        SendInfo sendInfo = null;\n\n        log.info(\"fillDispInfo inboard:{}, preInboard:{}\", JSONUtil.toJsonStr(inboard),\n            JSONUtil.toJsonStr(preInboard));\n\n        if (Objects.nonNull(inboard.getSignInfo())) {\n            if (!preInboard.hasDispInfo() || DateUtil.dataAfter(inboard.getSignInfo().getScanTime(),\n                preInboard.getDispInfo().getScanTime())) {\n                //取签收站点作为应派站点\n                dispInfo = (!preInboard.hasDispInfo()) ? new DispInfo() : preInboard.getDispInfo();\n                //省略...设置了应派站点，应派站点的扫描事件，应派站点的结算站点 应派日期后面计算\n\n            }\n\n            if (!preInboard.hasSignInfo() || DateUtil.dataAfter(\n                preInboard.getSignInfo().getScanTime(), inboard.getSignInfo().getScanTime())) {\n                //取最早的签收， 最晚签收时间后面在计算, 签收时间是取最早的。\n                signInfo = inboard.getSignInfo();\n            }\n\n        } else if (BooleanUtils.isTrue(preInboard.isHasCenterScan())) {//之前过分拨\n            if (Objects.nonNull(inboard.getSendInfo())) {//当前扫描是发件扫描\n\n                if (inboard.getSendInfo().isEndCenterSend()) {\n                    //分拨发件，并且下一站是站点， 主要是排除分拨发分拨的情况\n                    if (!preInboard.hasDispInfo() || DateUtil.dataAfter(\n                        inboard.getSendInfo().getScanTime(),\n                        preInboard.getDispInfo().getScanTime())) {\n                        //省略...设置应派信息：发件扫描，下一站是站点，就取下一站\n                      \n                    }\n\n                    if (!preInboard.hasSendInfo() \n                        || DateUtil.dataAfter(inboard.getSendInfo().getScanTime()\n                            ,preInboard.getSendInfo().getCenterSendTime())) {\n                        //分拨发件信息，取当前最新的\n                        sendInfo = (!preInboard.hasSendInfo()) ?\n                            new SendInfo() :\n                            inboard.getSendInfo();\n\n                        //分拨发站点：采集分拨\n                        if (Objects.nonNull(inboard.getSendInfo().getCenterSite())) {\n                            //发件站点是分拨\n                        } else {\n                            //发件站点是一级站点\n                            if (Objects.nonNull(preInboard.getSendInfo())\n                                && Objects.nonNull(preInboard.getSendInfo().getCenterSite())) {\n                                //处理一级发二级的情况，分拨还是原来的。\n                            }\n                        }\n                    }\n                }\n\n            } else {//过了分拨，但不是发件扫描，可能是到件，派件，转寄,退件等等,取当前扫描站点\n                if (inboard.hasArrInfo() && inboard.isHasCenterScan()) {\n                    //如果当前是分拨到件扫描，取消应派站点的采集\n                    if (preInboard.hasDispInfo()) {\n                       //....\n                    }\n                } else if (inboard.hasReturnInfo() && BooleanUtils.isTrue(\n                    inboard.getReturnInfo().isHasReturn())) {\n                    //退件也清空\n                    if (preInboard.hasDispInfo()) {\n                        //....\n                    }\n                } else if (!preInboard.hasDispInfo() || (\n                    Objects.nonNull(inboard.getCurrentScanInfo()) && DateUtil.dataAfter(\n                        inboard.getCurrentScanInfo().getScanTime(),\n                        preInboard.getDispInfo().getScanTime()))) {\n                    //过了分拨，但不是发件扫描，可能是到件，派件，转寄等等,取当前扫描站点\n                    //....\n                }\n            }\n        } else if (BooleanUtils.isTrue(inboard.isHasCenterScan())) {//当前过分拨\n            preInboard.setHasCenterScan(true);\n            if (Objects.nonNull(inboard.getSendInfo()) && inboard.getSendInfo()\n                .isEndCenterSend()) {//当前扫描是分拨发件扫描\n                if (!preInboard.hasSendInfo() || DateUtil.dataAfter(\n                    inboard.getSendInfo().getScanTime(),\n                    preInboard.getSendInfo().getCenterSendTime())) {\n                    //分拨发件信息，取当前最新的\n                    //....\n                    //这里不会有丰网一级发二级的情况需要处理\n                    //因为当前过分拨（不会是丰网一级，只有丰网分拨，和大网网点才是当前过分拨）\n                }\n                if (!preInboard.hasDispInfo() || DateUtil.dataAfter(\n                    inboard.getSendInfo().getScanTime(), preInboard.getDispInfo().getScanTime())) {\n                    //派件信息：取下一站\n                    //....\n                }\n            }\n        }\n\n        if (Objects.nonNull(dispInfo)) {\n            //填充丰网应派\n            dispInfo.setFwDisp(dispInfo.getScanSite().isFwSite());\n            preInboard.setDispInfo(dispInfo);\n        }\n        if (Objects.nonNull(sendInfo)) {\n            preInboard.setSendInfo(sendInfo);\n        }\n        if (Objects.nonNull(signInfo)) {\n            preInboard.setSignInfo(signInfo);\n        }\n\n        log.info(\"计算应派日期前的inboard code {} inboard {}\",inboard.getCode(), JSONUtil.toJsonStr(inboard));\n\n        //计算应派日期+最晚签收时间\n        if (Objects.nonNull(preInboard.getSendInfo()) && Objects.nonNull(preInboard.getDispInfo())) {\n               //这里的逻辑都是简化后的\n            String centerSiteCode = preInboard.getSendInfo().getCenterSite().getSfCode();\n            String dispSiteCode = preInboard.getDispInfo().getScanSite().getCode();\n            Date centerSendTime = preInboard.getSendInfo().getCenterSendTime();\n           \n            if (StringUtils.isNoneBlank(centerSiteCode, dispSiteCode) && Objects.nonNull(centerSendTime)) {\n\n                List<SiteShixiaoPO> shixiaoPOList = //获取时效配置\n\n                //应派时间+最晚签收时间\n                if (CollectionUtils.isNotEmpty(shixiaoPOList)) {\n                    fillOutDispAndLatestSignTime(shixiaoPOList, preInboard,centerSendTime);\n                }else {\n                    //没有时效配置，要清空硬派日期和最晚签收日期\n                    preInboard.getDispInfo().setDispTime(null);\n                    if (Objects.nonNull(preInboard.getSignInfo())){\n                        preInboard.getSignInfo().setLatestSignTime(null);\n                    }\n                }\n            }\n        }\n    }\n```\n上面的代码复杂并且难以维护，在重构的过程中，分析出，这种思路（指的是domainService的入参必须是领域的聚合根(Inboard)）应该是错误的；\n\n然后去找理论支撑，在《中台架构与实现》P177看到对领域服务的定义：\n\n```java\n如果一个业务行为由多个实体对象参与完成，我们就将这部分业务逻辑放在领域服务中实现；\n领域服务与实体方法的主要区别是：实体方法完成单一实体自身的业务逻辑，是相对简单的原子业务逻辑；而领域服务则是由多个实体组合的相对复杂的业务逻辑。\n```\n简单的说，我们之前理解的业务逻辑写在领域服务中，是比较片面的，因为业务逻辑的实现，是可以在实体中，和领域服务中；\n\n* 业务逻辑\n   * 在实体中实现\n   * 在领域服务中实现\n\n总结下来：领域服务的入参不必限制为必须是当前领域的聚合根；可以是多种多样的。有一个限制就是：在实体方法和领域服务中，避免直接调用其他聚合的领域服务或者直接应用其他聚合的实体和值对象（不要增加耦合）；但是并不是说不让引用，而是通过正确的方式引用（通过唯一标识，引用其他聚合）。\n\n最后，我采用的比较靠谱的方案是：入参使用“唯一标识\"，这里的唯一标识加了引号，意思是说：不一定是唯一标识，但是一定是简单类型。\n\n```java\n//只有code和入网时间\nInboard inboard = InboardAppFactory.toInboard(msg);\n\n//当前扫描站点，分拨下一站，扫描时间，扫描类型（内部）\nlong scanSiteId = InboardAppFactory.toScanSiteId(msg);\nlong nextSiteId = InboardAppFactory.toNextSiteId(msg);\nDate scanTime = InboardAppFactory.toScanTime(msg);;\nInboardInnerScanTypeEnum inboardInnerScanTypeEnum = InboardAppFactory.toInnerScanType(msg.getScanDto().getScanTypeId());\n\n//创建或者更新进港单(入参使用简单类型)\nInboard afterInboard = inboardDomainService.processScanMsg(inboard,scanSiteId,nextSiteId,scanTime,inboardInnerScanTypeEnum);\n\n```","tags":["DDD","领域驱动"],"categories":["JAVA","DDD"]},{"title":"Sentinel源码分析","url":"/note/JAVA/CLOUD/SENTINEL/Sentinel源码分析/","content":"\n\n\n\n\n官方文档：[introduction | Sentinel (sentinelguard.io)](https://sentinelguard.io/zh-cn/docs/introduction.html)\n\n本文PPT：[Sentinel使用和源码分析.pptx](./Sentinel源码分析.assets/Sentinel使用和源码分析.pptx)\n\n# Sentinel的基本概念\n\nSentinel实现限流、隔离、降级、熔断等功能，本质要做的就是两件事情：\n\n- 统计数据：统计某个资源的访问数据（QPS、RT等信息）\n- 规则判断：判断限流规则、隔离规则、降级规则、熔断规则是否满足\n\n\n\n这里的**资源**就是希望被Sentinel保护的业务，例如项目中定义的controller方法就是默认被Sentinel保护的资源。\n\n\n\n## ProcessorSlotChain\n\n实现上述功能的核心骨架是一个叫做ProcessorSlotChain的类。这个类基于责任链模式来设计，将不同的功能（限流、降级、系统保护）封装为一个个的Slot，请求进入后逐个执行即可。\n\n\n\n其工作流如图：\n\n![image-20210925092845529](Sentinel源码分析.assets/image-20210925092845529.png)\n\n\n\n责任链中的Slot也分为两大类：\n\n- 统计数据构建部分（statistic）\n  - NodeSelectorSlot：负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树\n  - ClusterBuilderSlot：负责构建某个资源的ClusterNode，ClusterNode可以保存资源的运行信息（响应时间、QPS、block 数目、线程数、异常数等）以及来源信息（origin名称）\n  - StatisticSlot：负责统计实时调用数据，包括运行信息、来源信息等\n- 规则判断部分（rule checking）\n  - AuthoritySlot：负责授权规则（来源控制）\n  - SystemSlot：负责系统保护规则\n  - ParamFlowSlot：负责热点参数限流规则\n  - FlowSlot：负责限流规则\n  - DegradeSlot：负责降级规则\n\n\n\n\n\n## SPI机制\n\nSentinel槽链中各Slot的执行顺序是固定好的。但并不是绝对不能改变的。Sentinel将ProcessorSlot 作 为 SPI 接口进行扩展，使得 SlotChain 具备了扩展能力。用户可以自定义Slot并编排Slot 间的顺序。 \n\nJDK有一套原生的SPI机制，Dubbo也实现了一套SPI机制，这里所说的Sentinel使用的SPI机制也是Sentinel自己实现了一套SPI机制，并没有使用现成的SPI机制。\n\n为什么不用JDK原生的SPI机制？\n\n？？？\n\n![Slot Chain SPI](Sentinel源码分析.assets/46783631-93324d00-cd5d-11e8-8ad1-a802bcc8f9c9.png)\n\n我们可以自定义Slot的实现，比如：上图中的 MyCustomSlot，将其插入到 processorSlotChain 中的任意一个位置，实现自定义的功能\n\n\n\n\n\n\n\n## Node\n\nSentinel中的簇点链路是由一个个的Node组成的，Node是一个接口，包括下面的实现：\n\n![image-20210925103029924](Sentinel源码分析.assets/image-20210925103029924.png)\n\n所有的节点都可以记录对资源的访问统计数据，所以都是StatisticNode的子类。\n\n按照作用分为两类Node：\n\n- DefaultNode：代表链路树中的每一个资源，一个资源出现在不同链路中时，会创建不同的DefaultNode节点。而树的入口节点叫EntranceNode，是一种特殊的DefaultNode\n- ClusterNode：代表资源，一个资源不管出现在多少链路中，只会有一个ClusterNode。记录的是当前资源被访问的所有统计数据之和。\n\n\n\nDefaultNode记录的是资源在当前链路中的访问数据，用来实现基于链路模式的限流规则。ClusterNode记录的是资源在所有链路中的访问数据，实现默认模式、关联模式的限流规则。\n\n\n\n例如：我们在一个SpringMVC项目中，有两个业务：\n\n- 业务1：controller中的资源`/order/query`访问了service中的资源`/goods`\n- 业务2：controller中的资源`/order/save`访问了service中的资源`/goods`\n\n创建的链路图如下：\n\n![image-20210925104726158](Sentinel源码分析.assets/image-20210925104726158.png)\n\n\n\n## Entry\n\n默认情况下，Sentinel会将controller中的方法作为被保护资源，那么问题来了，我们该如何将自己的一段代码标记为一个Sentinel的资源呢？\n\nSentinel中的资源用Entry来表示。声明Entry的API示例：\n\n```java\n// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。\ntry (Entry entry = SphU.entry(\"resourceName\")) {\n  // 被保护的业务逻辑\n  // do something here...\n} catch (BlockException ex) {\n  // 资源访问阻止，被限流或被降级\n  // 在此处进行相应的处理操作\n}\n```\n\n\n\n### 自定义资源\n\n例如，我们在order-service服务中，将`OrderService`的`queryOrderById()`方法标记为一个资源。\n\n1）首先在order-service中引入sentinel依赖\n\n```xml\n<!--sentinel-->\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n</dependency>\n```\n\n2）然后配置Sentinel地址\n\n```yaml\nspring:\n  cloud:\n    sentinel:\n      transport:\n        dashboard: localhost:8089 # 这里我的sentinel用了8089的端口\n```\n\n3）修改OrderService类的queryOrderById方法\n\n代码这样来实现：\n\n```java\npublic Order queryOrderById(Long orderId) {\n    // 创建Entry，标记资源，资源名为resource1\n    try (Entry entry = SphU.entry(\"resource1\")) {\n        // 1.查询订单，这里是假数据\n        Order order = Order.build(101L, 4999L, \"小米 MIX4\", 1, 1L, null);\n        // 2.查询用户，基于Feign的远程调用\n        User user = userClient.findById(order.getUserId());\n        // 3.设置\n        order.setUser(user);\n        // 4.返回\n        return order;\n    }catch (BlockException e){\n        log.error(\"被限流或降级\", e);\n        return null;\n    }\n}\n```\n\n\n\n4）访问\n\n打开浏览器，访问order服务：http://localhost:8080/order/101\n\n然后打开sentinel控制台，查看簇点链路：\n\n![image-20210925113122759](Sentinel源码分析.assets/image-20210925113122759.png)\n\n\n\n\n\n### 基于注解标记资源\n\n在之前学习Sentinel的时候，我们知道可以通过给方法添加@SentinelResource注解的形式来标记资源。\n\n![image-20210925141507603](Sentinel源码分析.assets/image-20210925141507603.png)\n\n\n\n这个是怎么实现的呢？\n\n来看下我们引入的Sentinel依赖包：\n\n![image-20210925115601560](Sentinel源码分析.assets/image-20210925115601560.png)\n\n其中的spring.factories声明需要就是自动装配的配置类，内容如下：\n\n![image-20210925115740281](Sentinel源码分析.assets/image-20210925115740281.png)\n\n我们来看下`SentinelAutoConfiguration`这个类：\n\n![image-20210925141553785](Sentinel源码分析.assets/image-20210925141553785.png)\n\n可以看到，在这里声明了一个Bean，`SentinelResourceAspect`：\n\n```java\n\n/**\n * Aspect for methods with {@link SentinelResource} annotation.\n *\n * @author Eric Zhao\n */\n@Aspect\npublic class SentinelResourceAspect extends AbstractSentinelAspectSupport {\n\t// 切点是添加了 @SentinelResource注解的类\n    @Pointcut(\"@annotation(com.alibaba.csp.sentinel.annotation.SentinelResource)\")\n    public void sentinelResourceAnnotationPointcut() {\n    }\n\t\n    // 环绕增强\n    @Around(\"sentinelResourceAnnotationPointcut()\")\n    public Object invokeResourceWithSentinel(ProceedingJoinPoint pjp) throws Throwable {\n        // 获取受保护的方法\n        Method originMethod = resolveMethod(pjp);\n\t\t// 获取 @SentinelResource注解\n        SentinelResource annotation = originMethod.getAnnotation(SentinelResource.class);\n        if (annotation == null) {\n            // Should not go through here.\n            throw new IllegalStateException(\"Wrong state for SentinelResource annotation\");\n        }\n        // 获取注解上的资源名称\n        String resourceName = getResourceName(annotation.value(), originMethod);\n        EntryType entryType = annotation.entryType();\n        int resourceType = annotation.resourceType();\n        Entry entry = null;\n        try {\n            // 创建资源 Entry\n            entry = SphU.entry(resourceName, resourceType, entryType, pjp.getArgs());\n            // 执行受保护的方法\n            Object result = pjp.proceed();\n            return result;\n        } catch (BlockException ex) {\n            return handleBlockException(pjp, annotation, ex);\n        } catch (Throwable ex) {\n            Class<? extends Throwable>[] exceptionsToIgnore = annotation.exceptionsToIgnore();\n            // The ignore list will be checked first.\n            if (exceptionsToIgnore.length > 0 && exceptionBelongsTo(ex, exceptionsToIgnore)) {\n                throw ex;\n            }\n            if (exceptionBelongsTo(ex, annotation.exceptionsToTrace())) {\n                traceException(ex);\n                return handleFallback(pjp, annotation, ex);\n            }\n\n            // No fallback function can handle the exception, so throw it out.\n            throw ex;\n        } finally {\n            if (entry != null) {\n                entry.exit(1, pjp.getArgs());\n            }\n        }\n    }\n}\n\n```\n\n\n\n\n\n简单来说，@SentinelResource注解就是一个标记，而Sentinel基于AOP思想，对被标记的方法做环绕增强，完成资源（`Entry`）的创建。\n\n\n\n## Context\n\n上一节，我们发现簇点链路中除了controller方法、service方法两个资源外，还多了一个默认的入口节点：\n\nsentinel_spring_web_context，是一个EntranceNode类型的节点\n\n这个节点是在初始化Context的时候由Sentinel帮我们创建的。\n\n![image-20230529143404263](Sentinel源码分析.assets/image-20230529143404263.png)\n\n\n\n### 什么是Context\n\n那么，什么是Context呢？\n\n- Context 代表调用链路上下文，贯穿一次调用链路中的所有资源（ `Entry`），基于ThreadLocal。\n- Context 维持着入口节点（`entranceNode`）、本次调用链路的 curNode（当前资源节点）、调用来源（`origin`）等信息。\n- 后续的Slot都可以通过Context拿到DefaultNode或者ClusterNode，从而获取统计数据，完成规则判断\n- Context初始化的过程中，会创建EntranceNode，contextName就是EntranceNode的名称\n\n\n\n对应的API如下：\n\n```java\n// 创建context，包含两个参数：context名称、 来源名称\nContextUtil.enter(\"contextName\", \"originName\");\n```\n\n\n\n### Context的初始化\n\n那么这个Context又是在何时完成初始化的呢？\n\n\n\n#### 自动装配\n\n来看下我们引入的Sentinel依赖包：\n\n![image-20210925115601560](Sentinel源码分析.assets/image-20210925115601560.png)\n\n其中的spring.factories声明需要就是自动装配的配置类，内容如下：\n\n![image-20210925115740281](Sentinel源码分析.assets/image-20210925115740281.png)\n\n我们先看SentinelWebAutoConfiguration这个类：\n\n![image-20210925115824345](Sentinel源码分析.assets/image-20210925115824345.png)\n\n这个类实现了WebMvcConfigurer，我们知道这个是SpringMVC自定义配置用到的类，可以配置HandlerInterceptor：\n\n![image-20210925115946064](Sentinel源码分析.assets/image-20210925115946064.png)\n\n可以看到这里配置了一个`SentinelWebInterceptor`的拦截器。\n\n`SentinelWebInterceptor`的声明如下：\n\n![image-20210925120119030](Sentinel源码分析.assets/image-20210925120119030.png)\n\n发现它继承了`AbstractSentinelInterceptor`这个类。\n\n![image-20210925120221883](Sentinel源码分析.assets/image-20210925120221883.png)\n\n\n\n`HandlerInterceptor`拦截器会拦截一切进入controller的方法，执行`preHandle`前置拦截方法，而Context的初始化就是在这里完成的。\n\n\n\n#### AbstractSentinelInterceptor\n\n`HandlerInterceptor`拦截器会拦截一切进入controller的方法，执行`preHandle`前置拦截方法，而Context的初始化就是在这里完成的。\n\n我们来看看这个类的`preHandle`实现：\n\n```java\n@Override\npublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n    throws Exception {\n    try {\n        // 获取资源名称，一般是controller方法的@RequestMapping路径，例如/order/{orderId}\n        String resourceName = getResourceName(request);\n        if (StringUtil.isEmpty(resourceName)) {\n            return true;\n        }\n        // 从request中获取请求来源，将来做 授权规则 判断时会用\n        String origin = parseOrigin(request);\n        \n        // 获取 contextName，默认是sentinel_spring_web_context\n        String contextName = getContextName(request);\n        // 创建 Context\n        ContextUtil.enter(contextName, origin);\n        // 创建资源，名称就是当前请求的controller方法的映射路径\n        Entry entry = SphU.entry(resourceName, ResourceTypeConstants.COMMON_WEB, EntryType.IN);\n        request.setAttribute(baseWebMvcConfig.getRequestAttributeName(), entry);\n        return true;\n    } catch (BlockException e) {\n        try {\n            handleBlockException(request, response, e);\n        } finally {\n            ContextUtil.exit();\n        }\n        return false;\n    }\n}\n```\n\n\n\n#### ContextUtil\n\n创建Context的方法就是` ContextUtil.enter(contextName, origin);`\n\n我们进入该方法：\n\n```java\npublic static Context enter(String name, String origin) {\n    if (Constants.CONTEXT_DEFAULT_NAME.equals(name)) {\n        throw new ContextNameDefineException(\n            \"The \" + Constants.CONTEXT_DEFAULT_NAME + \" can't be permit to defined!\");\n    }\n    return trueEnter(name, origin);\n}\n```\n\n进入`trueEnter`方法：\n\n```java\nprotected static Context trueEnter(String name, String origin) {\n    // 尝试获取context\n    Context context = contextHolder.get();\n    // 判空\n    if (context == null) {\n        // 如果为空，开始初始化\n        Map<String, DefaultNode> localCacheNameMap = contextNameNodeMap;\n        // 尝试获取入口节点\n        DefaultNode node = localCacheNameMap.get(name);\n        if (node == null) {\n            LOCK.lock();\n            try {\n                node = contextNameNodeMap.get(name);\n                if (node == null) {\n                    // 入口节点为空，初始化入口节点 EntranceNode\n                    node = new EntranceNode(new StringResourceWrapper(name, EntryType.IN), null);\n                    // 添加入口节点到 ROOT\n                    Constants.ROOT.addChild(node);\n                    // 将入口节点放入缓存\n                    Map<String, DefaultNode> newMap = new HashMap<>(contextNameNodeMap.size() + 1);\n                    newMap.putAll(contextNameNodeMap);\n                    newMap.put(name, node);\n                    contextNameNodeMap = newMap;\n                }\n            } finally {\n                LOCK.unlock();\n            }\n        }\n        // 创建Context，参数为：入口节点 和 contextName\n        context = new Context(node, name);\n        // 设置请求来源 origin\n        context.setOrigin(origin);\n        // 放入ThreadLocal\n        contextHolder.set(context);\n    }\n    // 返回\n    return context;\n}\n```\n\n\n\n## 整体流程\n\n![image-20230529145121382](Sentinel源码分析.assets/image-20230529145121382.png)\n\n\n\n# ProcessorSlotChain执行流程\n\n接下来我们跟踪源码，验证下ProcessorSlotChain的执行流程。\n\n## 入口\n\n首先，回到一切的入口，`AbstractSentinelInterceptor`类的`preHandle`方法：\n\n![image-20210925142313050](Sentinel源码分析.assets/image-20210925142313050.png)\n\n还有，`SentinelResourceAspect`的环绕增强方法：\n\n![image-20210925142438552](Sentinel源码分析.assets/image-20210925142438552.png)\n\n\n\n可以看到，任何一个资源必定要执行`SphU.entry()`这个方法:\n\n```java\npublic static Entry entry(String name, int resourceType, EntryType trafficType, Object[] args)\n    throws BlockException {\n    return Env.sph.entryWithType(name, resourceType, trafficType, 1, args);\n}\n```\n\n继续进入`Env.sph.entryWithType(name, resourceType, trafficType, 1, args);`：\n\n```java\n@Override\npublic Entry entryWithType(String name, int resourceType, EntryType entryType, int count, boolean prioritized,\n                           Object[] args) throws BlockException {\n    // 将 资源名称等基本信息 封装为一个 StringResourceWrapper对象\n    StringResourceWrapper resource = new StringResourceWrapper(name, entryType, resourceType);\n    // 继续\n    return entryWithPriority(resource, count, prioritized, args);\n}\n```\n\n进入`entryWithPriority`方法：\n\n```java\nprivate Entry entryWithPriority(ResourceWrapper resourceWrapper, int count, boolean prioritized, Object... args)\n    throws BlockException {\n    // 获取 Context\n    Context context = ContextUtil.getContext();\n\n    if (context == null) {\n        // Using default context.\n        context = InternalContextUtil.internalEnter(Constants.CONTEXT_DEFAULT_NAME);\n    }\n、\t// 获取 Slot执行链，同一个资源，会创建一个执行链，放入缓存\n    ProcessorSlot<Object> chain = lookProcessChain(resourceWrapper);\n\n\t// 创建 Entry，并将 resource、chain、context 记录在 Entry中\n    Entry e = new CtEntry(resourceWrapper, chain, context);\n    try {\n        // 执行 slotChain\n        chain.entry(context, resourceWrapper, null, count, prioritized, args);\n    } catch (BlockException e1) {\n        e.exit(count, args);\n        throw e1;\n    } catch (Throwable e1) {\n        // This should not happen, unless there are errors existing in Sentinel internal.\n        RecordLog.info(\"Sentinel unexpected exception\", e1);\n    }\n    return e;\n}\n```\n\n\n\n在这段代码中，会获取`ProcessorSlotChain`对象，然后基于chain.entry()开始执行slotChain中的每一个Slot.  而这里创建的是其实现类：DefaultProcessorSlotChain.\n\n获取ProcessorSlotChain以后会保存到一个Map中，key是ResourceWrapper，值是ProcessorSlotChain.\n\n所以，**一个资源只会有一个ProcessorSlotChain**.\n\n\n\n## DefaultProcessorSlotChain\n\n我们进入DefaultProcessorSlotChain的entry方法：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, Object t, int count, boolean prioritized, Object... args)\n    throws Throwable {\n    // first，就是责任链中的第一个 slot\n    first.transformEntry(context, resourceWrapper, t, count, prioritized, args);\n}\n```\n\n这里的first，类型是AbstractLinkedProcessorSlot：\n\n![image-20210925144355865](Sentinel源码分析.assets/image-20210925144355865.png)\n\n看下继承关系：\n\n![image-20210925144010507](Sentinel源码分析.assets/image-20210925144010507.png)\n\n\n\n因此，first一定是这些实现类中的一个，按照最早讲的责任链顺序，first应该就是 `NodeSelectorSlot`。\n\n\n\n不过，既然是基于责任链模式，所以这里只要记住下一个slot就可以了，也就是next：\n\n![image-20210925144233302](Sentinel源码分析.assets/image-20210925144233302.png)\n\nnext确实是NodeSelectSlot类型。\n\n\n\n而NodeSelectSlot的next一定是ClusterBuilderSlot，依次类推：\n\n![image-20210925101327080](Sentinel源码分析.assets/image-20210925101327080.png)\n\n责任链就建立起来了。\n\n\n\n## NodeSelectorSlot\n\nNodeSelectorSlot负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树。\n\n核心代码：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, Object obj, int count, boolean prioritized, Object... args)\n    throws Throwable {\n  \t// 尝试获取 当前资源的 DefaultNode\n    DefaultNode node = map.get(context.getName());\n    if (node == null) {\n        synchronized (this) {\n            node = map.get(context.getName());\n            if (node == null) {\n                // 如果为空，为当前资源创建一个新的 DefaultNode\n                node = new DefaultNode(resourceWrapper, null);\n                HashMap<String, DefaultNode> cacheMap = new HashMap<String, DefaultNode>(map.size());\n                cacheMap.putAll(map);\n                // 放入缓存中，注意这里的 key是contextName，\n                // 这样不同链路进入相同资源，就会创建多个 DefaultNode\n                cacheMap.put(context.getName(), node);\n                map = cacheMap;\n                // 当前节点加入上一节点的 child中，这样就构成了调用链路树\n                ((DefaultNode) context.getLastNode()).addChild(node);\n            }\n\n        }\n    }\n\t// context中的curNode（当前节点）设置为新的 node\n    context.setCurNode(node);\n    // 执行下一个 slot\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n```\n\n\n\n这个Slot完成了这么几件事情：\n\n- 为当前资源创建 DefaultNode\n- 将DefaultNode放入缓存中，key是contextName，这样不同链路入口的请求，将会创建多个DefaultNode，相同链路则只有一个DefaultNode\n- 将当前资源的DefaultNode设置为上一个资源的childNode\n- 将当前资源的DefaultNode设置为Context中的curNode（当前节点）\n\n\n\n下一个slot，就是ClusterBuilderSlot\n\n\n\n## ClusterBuilderSlot\n\nClusterBuilderSlot负责构建某个资源的ClusterNode，核心代码：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node,\n                  int count, boolean prioritized, Object... args)\n    throws Throwable {\n    // 判空，注意ClusterNode是共享的成员变量，也就是说一个资源只有一个ClusterNode，与链路无关\n    if (clusterNode == null) {\n        synchronized (lock) {\n            if (clusterNode == null) {\n                // 创建 cluster node.\n                clusterNode = new ClusterNode(resourceWrapper.getName(), resourceWrapper.getResourceType());\n                HashMap<ResourceWrapper, ClusterNode> newMap = new HashMap<>(Math.max(clusterNodeMap.size(), 16));\n                newMap.putAll(clusterNodeMap);\n                // 放入缓存，可以是nodeId，也就是resource名称\n                newMap.put(node.getId(), clusterNode);\n                clusterNodeMap = newMap;\n            }\n        }\n    }\n    // 将资源的 DefaultNode与 ClusterNode关联\n    node.setClusterNode(clusterNode);\n\t// 记录请求来源 origin 将 origin放入 entry\n    if (!\"\".equals(context.getOrigin())) {\n        Node originNode = node.getClusterNode().getOrCreateOriginNode(context.getOrigin());\n        context.getCurEntry().setOriginNode(originNode);\n    }\n\t// 继续下一个slot\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n```\n\n\n\n## StatisticSlot\n\nStatisticSlot负责统计实时调用数据，包括运行信息（访问次数、线程数）、来源信息等。\n\nStatisticSlot是实现限流的关键，其中基于**滑动时间窗口算法**维护了计数器，统计进入某个资源的请求次数。\n\n核心代码：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, \n                  int count, boolean prioritized, Object... args) throws Throwable {\n    try {\n        // 放行到下一个 slot，做限流、降级等判断\n        fireEntry(context, resourceWrapper, node, count, prioritized, args);\n\n        // 请求通过了, 线程计数器 +1 ，用作线程隔离\n        node.increaseThreadNum();\n        // 请求计数器 +1 用作限流\n        node.addPassRequest(count);\n\n        if (context.getCurEntry().getOriginNode() != null) {\n            // 如果有 origin，来源计数器也都要 +1\n            context.getCurEntry().getOriginNode().increaseThreadNum();\n            context.getCurEntry().getOriginNode().addPassRequest(count);\n        }\n\n        if (resourceWrapper.getEntryType() == EntryType.IN) {\n            // 如果是入口资源，还要给全局计数器 +1.\n            Constants.ENTRY_NODE.increaseThreadNum();\n            Constants.ENTRY_NODE.addPassRequest(count);\n        }\n\n        // 请求通过后的回调.\n        for (ProcessorSlotEntryCallback<DefaultNode> handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {\n            handler.onPass(context, resourceWrapper, node, count, args);\n        }\n    } catch (Throwable e) {\n        // 各种异常处理就省略了。。。\n        context.getCurEntry().setError(e);\n\n        throw e;\n    }\n}\n```\n\n\n\n另外，需要注意的是，所有的计数+1动作都包括两部分，以` node.addPassRequest(count);`为例：\n\n```java\n@Override\npublic void addPassRequest(int count) {\n    // DefaultNode的计数器，代表当前链路的 计数器\n    super.addPassRequest(count);\n    // ClusterNode计数器，代表当前资源的 总计数器\n    this.clusterNode.addPassRequest(count);\n}\n```\n\n具体计数方式，我们后续再看。\n\n接下来，进入规则校验的相关slot了，依次是：\n\n- AuthoritySlot：负责授权规则（来源控制）\n- SystemSlot：负责系统保护规则\n- ParamFlowSlot：负责热点参数限流规则\n- FlowSlot：负责限流规则\n- DegradeSlot：负责降级规则\n\n\n\n## AuthoritySlot\n\n负责请求来源origin的授权规则判断，如图：\n\n![image-20210925152626648](Sentinel源码分析.assets/image-20210925152626648.png)\n\n核心API：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count, boolean prioritized, Object... args)\n    throws Throwable {\n    // 校验黑白名单\n    checkBlackWhiteAuthority(resourceWrapper, context);\n    // 进入下一个 slot\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n```\n\n黑白名单校验的逻辑：\n\n```java\nvoid checkBlackWhiteAuthority(ResourceWrapper resource, Context context) throws AuthorityException {\n    // 获取授权规则\n    Map<String, Set<AuthorityRule>> authorityRules = AuthorityRuleManager.getAuthorityRules();\n\n    if (authorityRules == null) {\n        return;\n    }\n\n    Set<AuthorityRule> rules = authorityRules.get(resource.getName());\n    if (rules == null) {\n        return;\n    }\n\t// 遍历规则并判断\n    for (AuthorityRule rule : rules) {\n        if (!AuthorityRuleChecker.passCheck(rule, context)) {\n            // 规则不通过，直接抛出异常\n            throw new AuthorityException(context.getOrigin(), rule);\n        }\n    }\n}\n```\n\n再看下`AuthorityRuleChecker.passCheck(rule, context)`方法：\n\n```java\nstatic boolean passCheck(AuthorityRule rule, Context context) {\n    // 得到请求来源 origin\n    String requester = context.getOrigin();\n\n    // 来源为空，或者规则为空，都直接放行\n    if (StringUtil.isEmpty(requester) || StringUtil.isEmpty(rule.getLimitApp())) {\n        return true;\n    }\n\n    // rule.getLimitApp()得到的就是 白名单 或 黑名单 的字符串，这里先用 indexOf方法判断\n    int pos = rule.getLimitApp().indexOf(requester);\n    boolean contain = pos > -1;\n\n    if (contain) {\n        // 如果包含 origin，还要进一步做精确判断，把名单列表以\",\"分割，逐个判断\n        boolean exactlyMatch = false;\n        String[] appArray = rule.getLimitApp().split(\",\");\n        for (String app : appArray) {\n            if (requester.equals(app)) {\n                exactlyMatch = true;\n                break;\n            }\n        }\n        contain = exactlyMatch;\n    }\n\t// 如果是黑名单，并且包含origin，则返回false\n    int strategy = rule.getStrategy();\n    if (strategy == RuleConstant.AUTHORITY_BLACK && contain) {\n        return false;\n    }\n\t// 如果是白名单，并且不包含origin，则返回false\n    if (strategy == RuleConstant.AUTHORITY_WHITE && !contain) {\n        return false;\n    }\n\t// 其它情况返回true\n    return true;\n}\n```\n\n\n\n## SystemSlot\n\nSystemSlot是对系统保护的规则校验：\n\n![image-20210925153228036](Sentinel源码分析.assets/image-20210925153228036.png)\n\n核心API：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, \n                  int count,boolean prioritized, Object... args) throws Throwable {\n    // 系统规则校验\n    SystemRuleManager.checkSystem(resourceWrapper);\n    // 进入下一个 slot\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n```\n\n来看下`SystemRuleManager.checkSystem(resourceWrapper);`的代码：\n\n```java\npublic static void checkSystem(ResourceWrapper resourceWrapper) throws BlockException {\n    if (resourceWrapper == null) {\n        return;\n    }\n    // Ensure the checking switch is on.\n    if (!checkSystemStatus.get()) {\n        return;\n    }\n\n    // 只针对入口资源做校验，其它直接返回\n    if (resourceWrapper.getEntryType() != EntryType.IN) {\n        return;\n    }\n\n    // 全局 QPS校验\n    double currentQps = Constants.ENTRY_NODE == null ? 0.0 : Constants.ENTRY_NODE.successQps();\n    if (currentQps > qps) {\n        throw new SystemBlockException(resourceWrapper.getName(), \"qps\");\n    }\n\n    // 全局 线程数 校验\n    int currentThread = Constants.ENTRY_NODE == null ? 0 : Constants.ENTRY_NODE.curThreadNum();\n    if (currentThread > maxThread) {\n        throw new SystemBlockException(resourceWrapper.getName(), \"thread\");\n    }\n\t// 全局平均 RT校验\n    double rt = Constants.ENTRY_NODE == null ? 0 : Constants.ENTRY_NODE.avgRt();\n    if (rt > maxRt) {\n        throw new SystemBlockException(resourceWrapper.getName(), \"rt\");\n    }\n\n    // 全局 系统负载 校验\n    if (highestSystemLoadIsSet && getCurrentSystemAvgLoad() > highestSystemLoad) {\n        if (!checkBbr(currentThread)) {\n            throw new SystemBlockException(resourceWrapper.getName(), \"load\");\n        }\n    }\n\n    // 全局 CPU使用率 校验\n    if (highestCpuUsageIsSet && getCurrentCpuUsage() > highestCpuUsage) {\n        throw new SystemBlockException(resourceWrapper.getName(), \"cpu\");\n    }\n}\n```\n\n\n\n## ParamFlowSlot\n\nParamFlowSlot就是热点参数限流，如图：\n\n![image-20210925153719891](Sentinel源码分析.assets/image-20210925153719891.png)\n\n是针对进入资源的请求，针对不同的请求参数值分别统计QPS的限流方式。\n\n- 这里的单机阈值，就是最大令牌数量：maxCount\n\n- 这里的统计窗口时长，就是统计时长：duration\n\n含义是每隔duration时间长度内，最多生产maxCount个令牌，上图配置的含义是每1秒钟生产2个令牌。\n\n\n\n核心API：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node,\n                  int count, boolean prioritized, Object... args) throws Throwable {\n    // 如果没有设置热点规则，直接放行\n    if (!ParamFlowRuleManager.hasRules(resourceWrapper.getName())) {\n        fireEntry(context, resourceWrapper, node, count, prioritized, args);\n        return;\n    }\n\t// 热点规则判断\n    checkFlow(resourceWrapper, count, args);\n    // 进入下一个 slot\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n```\n\n\n\n### 令牌桶\n\n热点规则判断采用了令牌桶算法来实现参数限流，为每一个不同参数值设置令牌桶，Sentinel的令牌桶有两部分组成：\n\n![image-20210925163744108](Sentinel源码分析.assets/image-20210925163744108.png)\n\n这两个Map的key都是请求的参数值，value却不同，其中：\n\n- tokenCounters：用来记录剩余令牌数量\n- timeCounters：用来记录上一个请求的时间\n\n\n\n当一个携带参数的请求到来后，基本判断流程是这样的：\n\n![sentinel](Sentinel源码分析.assets/sentinel.jpg)\n\n\n\n\n\n\n\n\n\n## FlowSlot\n\nFlowSlot是负责限流规则的判断，如图：\n\n![image-20210925172542274](Sentinel源码分析.assets/image-20210925172542274.png)\n\n包括：\n\n- 三种流控模式：直接模式、关联模式、链路模式\n- 三种流控效果：快速失败、warm up、排队等待\n\n\n\n三种流控模式，从底层**数据统计**角度，分为两类：\n\n- 对进入资源的所有请求（ClusterNode）做限流统计：直接模式、关联模式\n- 对进入资源的部分链路（DefaultNode）做限流统计：链路模式\n\n\n\n三种流控效果，从**限流算法**来看，分为两类：\n\n- 滑动时间窗口算法：快速失败、warm up\n- 漏桶算法：排队等待效果\n\n\n\n### 核心流程\n\n核心API如下：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args) throws Throwable {\n    // 限流规则检测\n    checkFlow(resourceWrapper, context, node, count, prioritized);\n\t// 放行\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n```\n\ncheckFlow方法：\n\n```java\nvoid checkFlow(ResourceWrapper resource, Context context, DefaultNode node, int count, boolean prioritized)\n    throws BlockException {\n    // checker是 FlowRuleChecker 类的一个对象\n    checker.checkFlow(ruleProvider, resource, context, node, count, prioritized);\n}\n```\n\n跟入FlowRuleChecker：\n\n```java\npublic void checkFlow(Function<String, Collection<FlowRule>> ruleProvider, \n                      ResourceWrapper resource,Context context, DefaultNode node,\n                      int count, boolean prioritized) throws BlockException {\n        if (ruleProvider == null || resource == null) {\n            return;\n        }\n        // 获取当前资源的所有限流规则\n        Collection<FlowRule> rules = ruleProvider.apply(resource.getName());\n        if (rules != null) {\n            for (FlowRule rule : rules) {\n                // 遍历，逐个规则做校验\n                if (!canPassCheck(rule, context, node, count, prioritized)) {\n                    throw new FlowException(rule.getLimitApp(), rule);\n                }\n            }\n        }\n    }\n```\n\n\n\n这里的FlowRule就是限流规则接口，其中的几个成员变量，刚好对应表单参数：\n\n```java\npublic class FlowRule extends AbstractRule {\n    /**\n     * 阈值类型 (0: 线程, 1: QPS).\n     */\n    private int grade = RuleConstant.FLOW_GRADE_QPS;\n    /**\n     * 阈值.\n     */\n    private double count;\n    /**\n     * 三种限流模式.\n     *\n     * {@link RuleConstant#STRATEGY_DIRECT} 直连模式;\n     * {@link RuleConstant#STRATEGY_RELATE} 关联模式;\n     * {@link RuleConstant#STRATEGY_CHAIN} 链路模式.\n     */\n    private int strategy = RuleConstant.STRATEGY_DIRECT;\n    /**\n     * 关联模式关联的资源名称.\n     */\n    private String refResource;\n    /**\n     * 3种流控效果.\n     * 0. 快速失败, 1. warm up, 2. 排队等待, 3. warm up + 排队等待\n     */\n    private int controlBehavior = RuleConstant.CONTROL_BEHAVIOR_DEFAULT;\n\t// 预热时长\n    private int warmUpPeriodSec = 10;\n    /**\n     * 队列最大等待时间.\n     */\n    private int maxQueueingTimeMs = 500;\n    // 。。。 略\n}\n```\n\n\n\n校验的逻辑定义在`FlowRuleChecker`的`canPassCheck`方法中：\n\n```java\npublic boolean canPassCheck(/*@NonNull*/ FlowRule rule, Context context, DefaultNode node, int acquireCount,\n                            boolean prioritized) {\n    // 获取限流资源名称\n    String limitApp = rule.getLimitApp();\n    if (limitApp == null) {\n        return true;\n    }\n\t// 校验规则\n    return passLocalCheck(rule, context, node, acquireCount, prioritized);\n}\n```\n\n进入`passLocalCheck()`：\n\n```java\nprivate static boolean passLocalCheck(FlowRule rule, Context context, DefaultNode node,\n                                      int acquireCount,  boolean prioritized) {\n    // 基于限流模式判断要统计的节点， \n    // 如果是直连模式，关联模式，对ClusterNode统计，如果是链路模式，则对DefaultNode统计\n    Node selectedNode = selectNodeByRequesterAndStrategy(rule, context, node);\n    if (selectedNode == null) {\n        return true;\n    }\n\t// 判断规则\n    return rule.getRater().canPass(selectedNode, acquireCount, prioritized);\n}\n```\n\n\n\n这里对规则的判断先要通过`FlowRule#getRater()`获取流量控制器`TrafficShapingController`，然后再做限流。\n\n而`TrafficShapingController`有3种实现：\n\n![image-20210925175221211](Sentinel源码分析.assets/image-20210925175221211.png)\n\n- DefaultController：快速失败，默认的方式，基于滑动时间窗口算法\n- WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的\n- RateLimiterController：排队等待模式，基于漏桶算法\n\n\n\n最终的限流判断都在TrafficShapingController的canPass方法中。\n\n\n\n### 滑动时间窗口\n\n滑动时间窗口的功能分两部分来看：\n\n- 一是时间区间窗口的QPS计数功能，这个是在StatisticSlot中调用的\n- 二是对滑动窗口内的时间区间窗口QPS累加，这个是在FlowRule中调用的\n\n\n\n先来看时间区间窗口的QPS计数功能。\n\n#### 时间窗口请求量统计\n\n回顾2.5章节中的StatisticSlot部分，有这样一段代码：\n\n![image-20210925180522926](Sentinel源码分析.assets/image-20210925180522926.png)\n\n\n\n就是在统计通过该节点的QPS，我们跟入看看，这里进入了DefaultNode内部：\n\n![image-20210925180619492](Sentinel源码分析.assets/image-20210925180619492.png)\n\n发现同时对`DefaultNode`和`ClusterNode`在做QPS统计，我们知道`DefaultNode`和`ClusterNode`都是`StatisticNode`的子类，这里调用`addPassRequest()`方法，最终都会进入`StatisticNode`中。\n\n随便跟入一个：\n\n![image-20210925180810181](Sentinel源码分析.assets/image-20210925180810181.png)\n\n这里有秒、分两种纬度的统计，对应两个计数器。找到对应的成员变量，可以看到：\n\n![image-20210925180954856](Sentinel源码分析.assets/image-20210925180954856.png)\n\n两个计数器都是ArrayMetric类型，并且传入了两个参数：\n\n```java\n// intervalInMs：是滑动窗口的时间间隔，默认为 1 秒\n// sampleCount: 时间窗口的分隔数量，默认为 2，就是把 1秒分为 2个小时间窗\npublic ArrayMetric(int sampleCount, int intervalInMs) {\n    this.data = new OccupiableBucketLeapArray(sampleCount, intervalInMs);\n}\n```\n\n如图：\n\n![image-20210925181359203](Sentinel源码分析.assets/image-20210925181359203.png)\n\n\n\n接下来，我们进入`ArrayMetric`类的`addPass`方法：\n\n```java\n@Override\npublic void addPass(int count) {\n    // 获取当前时间所在的时间窗\n    WindowWrap<MetricBucket> wrap = data.currentWindow();\n    // 计数器 +1\n    wrap.value().addPass(count);\n}\n```\n\n\n\n那么，计数器如何知道当前所在的窗口是哪个呢？\n\n这里的data是一个LeapArray：\n\n![image-20210925181714605](Sentinel源码分析.assets/image-20210925181714605.png)\n\nLeapArray的四个属性：\n\n```java\npublic abstract class LeapArray<T> {\n    // 小窗口的时间长度，默认是500ms ，值 = intervalInMs / sampleCount\n    protected int windowLengthInMs;\n    // 滑动窗口内的 小窗口 数量，默认为 2\n    protected int sampleCount;\n    // 滑动窗口的时间间隔，默认为 1000ms\n    protected int intervalInMs;\n    // 滑动窗口的时间间隔，单位为秒，默认为 1\n    private double intervalInSecond;\n}\n```\n\n\n\nLeapArray是一个环形数组，因为时间是无限的，数组长度不可能无限，因此数组中每一个格子放入一个时间窗（window），当数组放满后，角标归0，覆盖最初的window。\n\n![image-20210925182127206](Sentinel源码分析.assets/image-20210925182127206.png)\n\n因为滑动窗口最多分成sampleCount数量的小窗口，因此数组长度只要大于sampleCount，那么最近的一个滑动窗口内的2个小窗口就永远不会被覆盖，就不用担心旧数据被覆盖的问题了。\n\n\n\n\n\n我们跟入` data.currentWindow();`方法：\n\n```java\npublic WindowWrap<T> currentWindow(long timeMillis) {\n    if (timeMillis < 0) {\n        return null;\n    }\n\t// 计算当前时间对应的数组角标\n    int idx = calculateTimeIdx(timeMillis);\n    // 计算当前时间所在窗口的开始时间.\n    long windowStart = calculateWindowStart(timeMillis);\n\n    /*\n         * 先根据角标获取数组中保存的 oldWindow 对象，可能是旧数据，需要判断.\n         *\n         * (1) oldWindow 不存在, 说明是第一次，创建新 window并存入，然后返回即可\n         * (2) oldWindow的 starTime = 本次请求的 windowStar, 说明正是要找的窗口，直接返回.\n         * (3) oldWindow的 starTime < 本次请求的 windowStar, 说明是旧数据，需要被覆盖，创建 \n         *     新窗口，覆盖旧窗口\n         */\n    while (true) {\n        WindowWrap<T> old = array.get(idx);\n        if (old == null) {\n            // 创建新 window\n            WindowWrap<T> window = new WindowWrap<T>(windowLengthInMs, windowStart, newEmptyBucket(timeMillis));\n            // 基于CAS写入数组，避免线程安全问题\n            if (array.compareAndSet(idx, null, window)) {\n                // 写入成功，返回新的 window\n                return window;\n            } else {\n                // 写入失败，说明有并发更新，等待其它人更新完成即可\n                Thread.yield();\n            }\n        } else if (windowStart == old.windowStart()) {\n            return old;\n        } else if (windowStart > old.windowStart()) {\n            if (updateLock.tryLock()) {\n                try {\n                    // 获取并发锁，覆盖旧窗口并返回\n                    return resetWindowTo(old, windowStart);\n                } finally {\n                    updateLock.unlock();\n                }\n            } else {\n                // 获取锁失败，等待其它线程处理就可以了\n                Thread.yield();\n            }\n        } else if (windowStart < old.windowStart()) {\n            // 这种情况不应该存在，写这里只是以防万一。\n            return new WindowWrap<T>(windowLengthInMs, windowStart, newEmptyBucket(timeMillis));\n        }\n    }\n}\n```\n\n\n\n找到当前时间所在窗口（WindowWrap）后，只要调用WindowWrap对象中的add方法，计数器+1即可。\n\n这里只负责统计每个窗口的请求量，不负责拦截。限流拦截要看FlowSlot中的逻辑。\n\n\n\n#### 滑动窗口QPS计算\n\n在2.9.1小节我们讲过，FlowSlot的限流判断最终都由`TrafficShapingController`接口中的`canPass`方法来实现。该接口有三个实现类：\n\n- DefaultController：快速失败，默认的方式，基于滑动时间窗口算法\n- WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的\n- RateLimiterController：排队等待模式，基于漏桶算法\n\n\n\n因此，我们跟入默认的DefaultController中的canPass方法来分析：\n\n```java\n@Override\npublic boolean canPass(Node node, int acquireCount, boolean prioritized) {\n    // 计算目前为止滑动窗口内已经存在的请求量\n    int curCount = avgUsedTokens(node);\n    // 判断：已使用请求量 + 需要的请求量（1） 是否大于 窗口的请求阈值\n    if (curCount + acquireCount > count) {\n        // 大于，说明超出阈值，返回false\n        if (prioritized && grade == RuleConstant.FLOW_GRADE_QPS) {\n            long currentTime;\n            long waitInMs;\n            currentTime = TimeUtil.currentTimeMillis();\n            waitInMs = node.tryOccupyNext(currentTime, acquireCount, count);\n            if (waitInMs < OccupyTimeoutProperty.getOccupyTimeout()) {\n                node.addWaitingRequest(currentTime + waitInMs, acquireCount);\n                node.addOccupiedPass(acquireCount);\n                sleep(waitInMs);\n\n                // PriorityWaitException indicates that the request will pass after waiting for {@link @waitInMs}.\n                throw new PriorityWaitException(waitInMs);\n            }\n        }\n        return false;\n    }\n    // 小于等于，说明在阈值范围内，返回true\n    return true;\n}\n```\n\n\n\n因此，判断的关键就是`int curCount = avgUsedTokens(node);`\n\n```java\nprivate int avgUsedTokens(Node node) {\n    if (node == null) {\n        return DEFAULT_AVG_USED_TOKENS;\n    }\n    return grade == RuleConstant.FLOW_GRADE_THREAD ? node.curThreadNum() : (int)(node.passQps());\n}\n```\n\n因为我们采用的是限流，走`node.passQps()`逻辑：\n\n```java\n// 这里又进入了 StatisticNode类\n@Override\npublic double passQps() {\n    // 请求量 ÷ 滑动窗口时间间隔 ，得到的就是QPS\n    return rollingCounterInSecond.pass() / rollingCounterInSecond.getWindowIntervalInSec();\n}\n```\n\n那么`rollingCounterInSecond.pass()`是如何得到请求量的呢？\n\n```java\n// rollingCounterInSecond 本质是ArrayMetric，之前说过\n@Override\npublic long pass() {\n    // 获取当前窗口\n    data.currentWindow();\n    long pass = 0;\n    // 获取 当前时间的 滑动窗口范围内 的所有小窗口\n    List<MetricBucket> list = data.values();\n\t// 遍历\n    for (MetricBucket window : list) {\n        // 累加求和\n        pass += window.pass();\n    }\n    // 返回\n    return pass;\n}\n```\n\n来看看`data.values()`如何获取 滑动窗口范围内 的所有小窗口：\n\n```java\n// 此处进入LeapArray类中：\n\npublic List<T> values(long timeMillis) {\n    if (timeMillis < 0) {\n        return new ArrayList<T>();\n    }\n    // 创建空集合，大小等于 LeapArray长度\n    int size = array.length();\n    List<T> result = new ArrayList<T>(size);\n\t// 遍历 LeapArray\n    for (int i = 0; i < size; i++) {\n        // 获取每一个小窗口\n        WindowWrap<T> windowWrap = array.get(i);\n        // 判断这个小窗口是否在 滑动窗口时间范围内（1秒内）\n        if (windowWrap == null || isWindowDeprecated(timeMillis, windowWrap)) {\n            // 不在范围内，则跳过\n            continue;\n        }\n        // 在范围内，则添加到集合中\n        result.add(windowWrap.value());\n    }\n    // 返回集合\n    return result;\n}\n```\n\n那么，`isWindowDeprecated(timeMillis, windowWrap)`又是如何判断窗口是否符合要求呢？\n\n```java\npublic boolean isWindowDeprecated(long time, WindowWrap<T> windowWrap) {\n    // 当前时间 - 窗口开始时间  是否大于 滑动窗口的最大间隔（1秒）\n    // 也就是说，我们要统计的时 距离当前时间1秒内的 小窗口的 count之和\n    return time - windowWrap.windowStart() > intervalInMs;\n}\n```\n\n\n\n\n\n\n\n### 漏桶\n\n上一节我们讲过，FlowSlot的限流判断最终都由`TrafficShapingController`接口中的`canPass`方法来实现。该接口有三个实现类：\n\n- DefaultController：快速失败，默认的方式，基于滑动时间窗口算法\n- WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的\n- RateLimiterController：排队等待模式，基于漏桶算法\n\n\n\n因此，我们跟入默认的RateLimiterController中的canPass方法来分析：\n\n```java\n@Override\npublic boolean canPass(Node node, int acquireCount, boolean prioritized) {\n    // Pass when acquire count is less or equal than 0.\n    if (acquireCount <= 0) {\n        return true;\n    }\n    // 阈值小于等于 0 ，阻止请求\n    if (count <= 0) {\n        return false;\n    }\n\t// 获取当前时间\n    long currentTime = TimeUtil.currentTimeMillis();\n    // 计算两次请求之间允许的最小时间间隔\n    long costTime = Math.round(1.0 * (acquireCount) / count * 1000);\n\n    // 计算本次请求 允许执行的时间点 = 最近一次请求的可执行时间 + 两次请求的最小间隔\n    long expectedTime = costTime + latestPassedTime.get();\n\t// 如果允许执行的时间点小于当前时间，说明可以立即执行\n    if (expectedTime <= currentTime) {\n        // 更新上一次的请求的执行时间\n        latestPassedTime.set(currentTime);\n        return true;\n    } else {\n        // 不能立即执行，需要计算 预期等待时长\n        // 预期等待时长 = 两次请求的最小间隔 +最近一次请求的可执行时间 - 当前时间\n        long waitTime = costTime + latestPassedTime.get() - TimeUtil.currentTimeMillis();\n        // 如果预期等待时间超出阈值，则拒绝请求\n        if (waitTime > maxQueueingTimeMs) {\n            return false;\n        } else {\n            // 预期等待时间小于阈值，更新最近一次请求的可执行时间，加上costTime\n            long oldTime = latestPassedTime.addAndGet(costTime);\n            try {\n                // 保险起见，再判断一次预期等待时间，是否超过阈值\n                waitTime = oldTime - TimeUtil.currentTimeMillis();\n                if (waitTime > maxQueueingTimeMs) {\n                    // 如果超过，则把刚才 加 的时间再 减回来\n                    latestPassedTime.addAndGet(-costTime);\n                    // 拒绝\n                    return false;\n                }\n                // in race condition waitTime may <= 0\n                if (waitTime > 0) {\n                    // 预期等待时间在阈值范围内，休眠要等待的时间，醒来后继续执行\n                    Thread.sleep(waitTime);\n                }\n                return true;\n            } catch (InterruptedException e) {\n            }\n        }\n    }\n    return false;\n}\n```\n\n\n\n与我们之前分析的漏桶算法基本一致：\n\n![image-20210925210716675](Sentinel源码分析.assets/image-20210925210716675.png)\n\n\n\n## DegradeSlot\n\n最后一关，就是降级规则判断了。\n\nSentinel的降级是基于状态机来实现的：\n\n![image-20210925211020881](Sentinel源码分析.assets/image-20210925211020881.png)\n\n\n\n对应的实现在DegradeSlot类中，核心API：\n\n```java\n@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, \n                  int count, boolean prioritized, Object... args) throws Throwable {\n    // 熔断降级规则判断\n    performChecking(context, resourceWrapper);\n\t// 继续下一个slot\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n```\n\n继续进入`performChecking`方法：\n\n```java\nvoid performChecking(Context context, ResourceWrapper r) throws BlockException {\n    // 获取当前资源上的所有的断路器 CircuitBreaker\n    List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n    if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n        return;\n    }\n    for (CircuitBreaker cb : circuitBreakers) {\n        // 遍历断路器，逐个判断\n        if (!cb.tryPass(context)) {\n            throw new DegradeException(cb.getRule().getLimitApp(), cb.getRule());\n        }\n    }\n}\n```\n\n\n\n### CircuitBreaker\n\n我们进入CircuitBreaker的tryPass方法中：\n\n```java\n@Override\npublic boolean tryPass(Context context) {\n    // 判断状态机状态\n    if (currentState.get() == State.CLOSED) {\n        // 如果是closed状态，直接放行\n        return true;\n    }\n    if (currentState.get() == State.OPEN) {\n        // 如果是OPEN状态，断路器打开\n        // 继续判断OPEN时间窗是否结束，如果是则把状态从OPEN切换到 HALF_OPEN，返回true\n        return retryTimeoutArrived() && fromOpenToHalfOpen(context);\n    }\n    // OPEN状态，并且时间窗未到，返回false\n    return false;\n}\n```\n\n有关时间窗的判断在`retryTimeoutArrived()`方法：\n\n```java\nprotected boolean retryTimeoutArrived() {\n    // 当前时间 大于 下一次 HalfOpen的重试时间\n    return TimeUtil.currentTimeMillis() >= nextRetryTimestamp;\n}\n```\n\nOPEN到HALF_OPEN切换在`fromOpenToHalfOpen(context)`方法：\n\n```java\nprotected boolean fromOpenToHalfOpen(Context context) {\n    // 基于CAS修改状态，从 OPEN到 HALF_OPEN\n    if (currentState.compareAndSet(State.OPEN, State.HALF_OPEN)) {\n        // 状态变更的事件通知\n        notifyObservers(State.OPEN, State.HALF_OPEN, null);\n        // 得到当前资源\n        Entry entry = context.getCurEntry();\n        // 给资源设置监听器，在资源Entry销毁时（资源业务执行完毕时）触发\n        entry.whenTerminate(new BiConsumer<Context, Entry>() {\n            @Override\n            public void accept(Context context, Entry entry) {\n                // 判断 资源业务是否异常\n                if (entry.getBlockError() != null) {\n                    // 如果异常，则再次进入OPEN状态\n                    currentState.compareAndSet(State.HALF_OPEN, State.OPEN);\n                    notifyObservers(State.HALF_OPEN, State.OPEN, 1.0d);\n                }\n            }\n        });\n        return true;\n    }\n    return false;\n}\n```\n\n\n\n这里出现了从OPEN到HALF_OPEN、从HALF_OPEN到OPEN的变化，但是还有几个没有：\n\n- 从CLOSED到OPEN\n- 从HALF_OPEN到CLOSED\n\n### 触发断路器\n\n请求经过所有插槽 后，一定会执行exit方法，而在DegradeSlot的exit方法中：\n\n![image-20210925213440686](Sentinel源码分析.assets/image-20210925213440686.png)\n\n会调用CircuitBreaker的onRequestComplete方法。而CircuitBreaker有两个实现：\n\n![image-20210925213939035](Sentinel源码分析.assets/image-20210925213939035.png)\n\n\n\n我们这里以异常比例熔断为例来看，进入`ExceptionCircuitBreaker`的`onRequestComplete`方法：\n\n```java\n@Override\npublic void onRequestComplete(Context context) {\n    // 获取资源 Entry\n    Entry entry = context.getCurEntry();\n    if (entry == null) {\n        return;\n    }\n    // 尝试获取 资源中的 异常\n    Throwable error = entry.getError();\n    // 获取计数器，同样采用了滑动窗口来计数\n    SimpleErrorCounter counter = stat.currentWindow().value();\n    if (error != null) {\n        // 如果出现异常，则 error计数器 +1\n        counter.getErrorCount().add(1);\n    }\n    // 不管是否出现异常，total计数器 +1\n    counter.getTotalCount().add(1);\n\t// 判断异常比例是否超出阈值\n    handleStateChangeWhenThresholdExceeded(error);\n}\n```\n\n来看阈值判断的方法：\n\n```java\nprivate void handleStateChangeWhenThresholdExceeded(Throwable error) {\n    // 如果当前已经是OPEN状态，不做处理\n    if (currentState.get() == State.OPEN) {\n        return;\n    }\n\t// 如果已经是 HALF_OPEN 状态，判断是否需求切换状态\n    if (currentState.get() == State.HALF_OPEN) {\n        if (error == null) {\n            // 没有异常，则从 HALF_OPEN 到 CLOSED\n            fromHalfOpenToClose();\n        } else {\n            // 有异常，再次进入OPEN\n            fromHalfOpenToOpen(1.0d);\n        }\n        return;\n    }\n\t// 说明当前是CLOSE状态，需要判断是否触发阈值\n    List<SimpleErrorCounter> counters = stat.values();\n    long errCount = 0;\n    long totalCount = 0;\n    // 累加计算 异常请求数量、总请求数量\n    for (SimpleErrorCounter counter : counters) {\n        errCount += counter.errorCount.sum();\n        totalCount += counter.totalCount.sum();\n    }\n    // 如果总请求数量未达到阈值，什么都不做\n    if (totalCount < minRequestAmount) {\n        return;\n    }\n    double curCount = errCount;\n    if (strategy == DEGRADE_GRADE_EXCEPTION_RATIO) {\n        // 计算请求的异常比例\n        curCount = errCount * 1.0d / totalCount;\n    }\n    // 如果比例超过阈值，切换到 OPEN\n    if (curCount > threshold) {\n        transformToOpen(curCount);\n    }\n}\n```\n\n\n","tags":["springcloud","sentinel"],"categories":["JAVA","CLOUD","SENTINEL"]},{"title":"JVM自动内存管理","url":"/note/JAVA/JVM/JVM自动内存管理/","content":"\n![image-20230527161626806](JVM自动内存管理.assets/image-20230527161626806.png)\n\n\n\n# 运行时数据区\n\n\n\n<img src=\"JVM自动内存管理.assets/image-20230528132339486.png\" alt=\"image-20230528132339486\" style=\"zoom:67%;\" />\n\n```base64\\n```\n\n\n\n如上图， Java虚拟机规范定义了字节码执行期间使用的各种运行时数据区，即JVM在执行Java程序的过程中，会把它管理的内存划分为若干个不同的数据区域。\n\n从线程共享角度来说，可以分为两类：\n\n* 1、所有线程共享的数据区\n\n> 方法区，运行时常量池，Java堆\n\n**这些数据区域是在Java虚拟机启动时创建的，只有当Java虚拟机退出时才会被销毁**；\n\n* 2、线程私有的数据区\n\n> 程序计数器，Java虚拟机栈，本地方法栈\n\n**这些数据区域是每个线程的私有数据区，每个线程都有，不与其他线程共享；**\n\n**每个线程的数据区在线程创建时创建，在线程退出时销毁；**\n\n* 3、另外，还有一种特殊的数据区\n\n直接内存——使用Native函数库直接分配的堆外内存；\n\n\n\n\n\n上面图片展示的是JVM规范定义的运行时数据概念模型，实际上JVM的实现可能有所差别，下面在介绍各内存数据区时会给出一些HotSpot虚拟机实现的不同点和调整参数。\n\n\n\n## 程序计数器\n\n![image-20230528132847634](JVM自动内存管理.assets/image-20230528132847634.png)\n\n是什么：是一块较小的内存空间，存储当前线程所执行字节码的行数\n\n存什么：存储当前线程所执行字节码的行数，如果是Java方法存的是字节码指令的地址，如果是Native方法，存的是空（undefined）\n\n规范是什么：在《java虚拟机规范》中是唯一一个没有规定任何OOM异常的区域\n\n有没有异常：在《java虚拟机规范》中是唯一一个没有规定任何OOM异常的区域\n\n\n\n我们知道Java是运行在JVM上的，Java程序在运行的时候，会被编译器编译成字节码文件，然后交给JVM运行。\n\n然后我们知道一个程序在操作系统层面是对应一个进程，而在进程内，又有很多个线程在运行。\n\n那么我们又知道 CPU会不停的在线程间切换\n\n那么就会有一个问题，CPU切走之后，在切回来，怎么知道我们的程序运行到了哪个地方呢？\n\n这就要求要把切换前后的上下文记录下来，简单的说，就是要记录在切换之前CPU执行到了哪一行。\n\n记录在哪里呢？对于JVM来说，就是记录在：程序计数器中。\n\n程序计数器中记录的是什么？ 简单的说就是我们的程序代码（编译后的汇编）对应执行到的那一行的行数。\n\n由于记录的是线程级别的行数，所以这个程序计数器是线程私有的。\n\n- 如果当前线程执行的是Java方法，程序计数器保存的就是：JVM正在执行的字节码指令的地址；\n- 如果执行的是Native方法，程序计数器保存的就是：空（undefined）（因为这里说的是程序计数器是JVM的内存区域，JVM可不知道Native方法执行到了哪一行，对于Native方法的程序技术，是交给对应的语言（比如C，C++）操作系统负责了）\n\n\n\n唯一一个JVM规范中没有规定会抛出 OOM 情况的区域；\n\n\n\n## Java虚拟机栈\n\n![image-20230528132912936](JVM自动内存管理.assets/image-20230528132912936.png)\n\n是什么：我们常说堆栈堆栈，其中的栈就是指的： Java虚拟机栈； 堆指的就是Java堆（后面会说）；这俩部分是最重要的部分\n\n存什么：主要是针对Java方法服务，线程在运行过程中对Java方法的执行和结束就对应栈帧的入栈和出栈\n\n规范是什么：《Java虚拟机规范》对该部分规定了两个异常\n\n有没有异常：有 StackOverflowError 和 OOM\n\n\n\n我们常说堆栈堆栈，其中的栈就是指的： Java虚拟机栈； 堆指的就是Java堆（后面会说）；这俩部分是最重要的部分\n\nJava虚拟机栈：主要是为Java方法提供服务。\n\n对于Java方法的，从调用到执行结束，对应其栈帧在JVM栈上的入栈到出栈的过程；\n\nJVM规范中对该区域，规定了两种可能的异常状况：\n\n* StackOverflowError: 如果线程请求分配的栈深度超过JVM栈允许的最大深度时抛出\n* OOM：如果JVM栈可以动态扩展，当然扩展的动作目前无法申请到足够的内存去完成扩展，或者在建立新的线程时没有足够的内存去创建对应的虚拟机栈，那JVM将会抛出OOM异常\n\n\n\n## 本地方法栈\n\n![image-20230528132936277](JVM自动内存管理.assets/image-20230528132936277.png)\n\n是什么：和Java虚拟机栈一样，只不过本地方法栈是对native方法服务\n\n存什么：主要是针对Native方法服务，线程在运行过程中对本地方法的执行和结束就对应栈帧的入栈和出栈\n\n规范是什么：《Java虚拟机规范》对该区域使用的语言，使用方式与数据结构没有任何强制规定，各厂商可自由实现\n\n有没有异常：与虚拟机栈一样，会有StackOverflowError和OOM\n\n\n\n本地方法栈（Native Method Stack）与 Java虚拟机栈类似；\n\nJava虚拟机栈为JVM执行Java方法（也就是字节码）服务；本地方法栈则为Native方法服务；\n\n《Java虚拟机规范》中对该部分没有强制规定，所以JVM可以自由实现；(HotSpot VM直接把本地方法栈和Java虚拟机栈合并为一个；)\n\n\n\n## Java堆\n\n是什么：我们常说堆栈堆栈，其中的栈就是指的： Java虚拟机栈（上面已经说过）； 堆指的就是Java堆；这俩部分是最重要的部分\n\n存什么：用于存放几乎所有对象实例；(”几乎“是因为，随JIT编译技术和逃逸分析技术发展，栈上分配，标量替换，都可以不在堆上分配）；\n\n规范是什么：《Java虚拟机规范》并没有对堆进行分代划分；《Java虚拟机规范》规定堆的内存空间可以处于物理不连续的空间，但是逻辑上要是连续的空间。Java堆可以动态扩展。\n\n有没有异常：如果实际所需的堆超过了垃圾收集器能提供的最大容量，那Java虚拟机将会抛出一个OutOfMemoryError异常；\n\n动态扩容：《Java虚拟机规范》中说堆需要实现可以动态扩容。\n\nJVM调优：我们常说的JVM调优调优：其实就是对GC堆以及GC的参数设置调整，就是JVM调优的主要内容；\n\n\n\n分代收集理论：\n\n从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以Java堆中经常会出现“新生代”“老年代”“永久代”“Eden空间”“From Survivor空间”“To Survivor空间”等名词，这些概念在本书后续章节中还会反复登场亮相，在这里笔者想先说明的是这些区域划分仅仅是一部分垃圾收集器的共同特性或者说设计风格而已，而非某个Java虚拟机具体实现的固有内存布局，更不是《Java虚拟机规范》里对Java堆的进一步细致划分。\n\n不少资料上经常写着类似于“Java虚拟机的堆内存分为新生代、老年代、永久代、Eden、Survivor……”这样的内容。在十年之前（以G1收集器的出现为分界），作为业界绝对主流的HotSpot虚拟机，它内部的垃圾收集器全部都基于“经典分代（新生代（Eden+2个Survivor）+老年代）”来设计，需要新生代、老年代收集器搭配才能工作，在这种背景下，上述说法还算是不会产生太大歧义。\n\n但是到了今天，垃圾收集器技术与十年前已不可同日而语，HotSpot里面也出现了不采用分代设计的新垃圾收集器（ZGC），再按照上面的提法就有很多需要商榷的地方了。\n\n不过无论从什么角度，无论如何划分，都不会改变Java堆中存储的都只能是对象的实例这一特性，将Java堆细分的目的只是为了更好地回收内存，或者更快地分配内存。\n\n\n\n**内存分配（连续空间）**\n\n和JVM栈一样，Java堆所使用的物理内存不需要保证是连续的，逻辑连续即可；\n\nJVM规范允许Java堆被实现成固定大小的或者是根据计算动态扩展和收缩的：\n\n不论是固定大小还是动态展缩，JVM实现都应当提供调节JJava堆初始内存空间大小的手段； 并且在动态展缩的情况下，还应该提供调节最大和最小内存空间的手段；\n\n为什么要求逻辑上是连续的？\n\n主要是为了提高内存利用率，想象一下，如果内存不是连续的，现在有两块不是连续的内存空间，一个大小是10KB，一个大小是3KB；现在我创建了两个对象，一个大小是4KB，一个大小是7KB； 怎么存呢？ 没法存吧。但是如果内存是连续的？就可以存下来。\n\n\n\n**HotSpot VM相关参数**\n\n目前主流的JVM都把Java堆实现成动态扩展的，如HotSpot VM：\n\n* 初始空间大小\n\n通过\"-Xms\"或\"-XX:InitialHeapSize\"参数指定Java堆初始空间大小；（默认为1/64的物理内存空间；）\n\n* 最大空间大小\n\n通过\"-Xmx\"或\"-XX:MaxHeapSize\"参数指定ava堆内存分配池的最大空间大小；（默认为1/4的物理内存空间；）\n\nParallel垃圾收集器默认的最大堆大小是当小于等于192MB物理内存时，为物理内存的一半，否则为物理内存的四分之一；\n\n* 各年代内存的占用空间与可用空间的比例\n\n通过\"-XX:MinHeapFreeRatio\"和\"-XX:MaxHeapFreeRatio\"参数设置堆中各年代内存的占用空间与可用空间的比例保持在特定范围内；\n\n默认：\n\n\"-XX:MinHeapFreeRatio=40\"：即一个年代（新生代或老年代）内存空余小于40%时，JVM会从未分配的堆内存中分配给该年代，以保持该年代40%的空余内存，直到分配完\"-Xmx\"指定的堆内存最大限制；\n\n\"-XX:MaxHeapFreeRatio=70\"：即一个年代（新生代或老年代）内存空余大于70%时，JVM会缩减该年代内存，以保持该年代70%的空余内存，直到缩减到\"-Xms\"指定的堆内存最小限制；\n\n这两个参数不适用于Parallel垃圾收集器（通过“-XX:YoungGenerationSizeIncrement”、“-XX:TenuredGenerationSizeIncrement”能及“-XX:AdaptiveSizeDecrementScaleFactor”调节）\n\n* 年轻代与老年代的大小比例\n\n通过\"-XX:NewRatio\"：控制年轻代与老年代的大小比例；\n\n默认设置\"-XX:NewRatio=2\"表新生代和老年代之间的比例为1：2；\n\n换句话说，eden和survivor空间组合的年轻代大小将是总堆大小的三分之一；\n\n* 年轻代空间大小\n\n通过\"-Xmn\"参数指定年轻代（nursery）的堆的初始和最大大小；\n\n或通过\"-XX：NewSize\"和\"-XX：MaxNewSize\"限制年轻代的最小大小和最大大小；\n\n* 永久代空间大小\n\n通过\"-XX：MaxPermSize（JDK7）\"或\"-XX：MaxMetaspaceSize（JDK8）\"参数指定永久代的最大内存大小；\n\n通过\"-XX：PermSize（JDK7）\"或\"-XX：MetaspaceSize（JDK8）\"参数指定永久代的内存阈值--超过将触发垃圾回收；\n\n注：JDK8中永久代已被删除，类元数据存储空间在本地内存中分配；([http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/considerations.html#sthref62](http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/considerations.html#sthref62))\n\n\n\n## 方法区\n\n\n\n是什么：在《Java虚拟机规范》中是将方法区作为堆的一个逻辑部分。但是它有一个别名“非堆”，目的是为了与Java堆区分开。\n\n存什么：主要保存的是：运行时常量池；类的结构信息（字段，方法，接口等）等\n\n规范是什么：在《Java虚拟机规范》中是将方法区作为堆的一个逻辑部分；《Java虚拟机规范》对方法去的约束是非常宽松的，除了和堆一样可以不适用连续的物理内存和可以实现动态扩展之外，还可以选择不实现垃圾回收。\n\n有没有异常：如果方法区的内存空间不能满足内存分配请求，那Java虚拟机将抛出一个OutOfMemoryError异常；\n\n\n\n**方法区与永久代**\n\n说到方法区，不得不提一下“永久代”这个概念，尤其是在JDK 8以前，许多Java程序员都习惯在HotSpot虚拟机上开发、部署程序，很多人都更愿意把方法区称呼为“永久代”（PermanentGeneration），或将两者混为一谈。\n\n本质上，“方法区”与”永久代“这两者并不是等价的，因为仅仅是当时的HotSpot虚拟机设计团队选择把收集器的分代设计扩展至方法区，或者说使用永久代来实现方法区而已，这样使得HotSpot的垃圾收集器能够像管理Java堆一样管理这部分内存，省去专门为方法区编写内存管理代码的工作。\n\n但是对于其他虚拟机实现，譬如BEA JRockit、IBM J9等来说，是不存在永久代的概念的。\n\n原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一。\n\n但现在回头来看，当年使用永久代来实现方法区的决定并不是一个好主意，这种设计导致了Java应用更容易遇到内存溢出的问题（永久代有-XX：MaxPermSize的上限，即使不设置也有默认大小，而J9和JRockit只要没有触碰到进程可用内存的上限，例如32位系统中的4GB限制，就不会出问题），而且有极少数方法（例如String::intern()）会因永久代的原因而导致不同虚拟机下有不同的表现。\n\n当Oracle收购BEA获得了JRockit的所有权后，准备把JRockit中的优秀功能，譬如Java M ission Control管理工具，移植到HotSpot虚拟机时，但因为两者对方法区实现的差异而面临诸多困难。\n\n考虑到HotSpot未来的发展，在JDK 6的时候HotSpot开发团队就有放弃永久代，逐步改为采用本地内存（Native Memory）来实现方法区的计划了，到了JDK 7的HotSpot，已经把原本放在永久代的字符串常量池、静态变量等移出，而到了JDK 8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的元空间（Meta-space）来代替，把JDK 7中永久代还剩余的内容（主要是类型信息）全部移到元空间中。\n\n\n\n\n\n\n\n## 运行时常量池\n是什么：运行常量池(Runtime Constant Pool）是方法区的一部分；\n\n存什么：方法区：存储的内容是类的结构信息（字段，方法，接口等），还有运行时常量池；运行时常量池主要保存：在编译期间出现的常量。\n\n规范是什么：《java虚拟机规范》对该区域没有做任何细节的要求，各厂商可自由实现\n\n有没有异常：如果方法区无法满足新的内存分配需求时，会抛出OOM异常\n\n\n\n\n\n## 直接内存\n**是什么**：直接内存(Direct Memory）不是JVM运行时数据区，也不是JVM规范中定义的内存区域；是使用Native函数库直接分配的堆外内存；\n\n**存什么**：由程序员手动申请，手动存储，手动释放，存什么由程序员定。\n\n**规范是什么**：不属于《java虚拟机规范》的内容\n\n**有没有异常**：使用直接内存（堆外内存）这容易导致各个内存区域总和大于物理内存限制，导致JVM出现OOM异常；  \n\n**为啥要有**：因为避免了在Java堆中来回复制数据，能在一些场景中显著提高性能；\n\n\n\n\n\n\n\n# 垃圾收集器\n\n\n\n\n\n\n\n","tags":["JVM","自动内存管理"],"categories":["JAVA","JVM"]},{"title":"JVM知识总览","url":"/note/JAVA/JVM/JVM知识总览/","content":"\n![image-20230527160506767](JVM知识总览.assets/image-20230527160506767.png)\n\n\n\n之前在学习JUC的时候，就曾经说过，在学习任何一门新技术的时候，都要对这个技术有一个总体的感觉。\n\n- 跳出去看全景\n- 钻进来看本质\n\n## 跳出去看全景\n\n这篇全景是根据：《深入理解Java虚拟机》第三版 整理而来。\n\n其实也没有整理多少，完全是人家的目录拿过来了。\n\n站在巨人的肩膀上。\n\n对应的xmind文件下载：[JVM.xmind](./JVM知识总览.assets/JVM.xmind)\n\n![image-20230527161203271](JVM知识总览.assets/image-20230527161203271.png)\n\n\n\n## 钻进来看本质\n\n\n\n拿我个人来说，我已经烦透了去讲述或被讲述一堆概念和结论，而不分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的。在大学里，这样的教材很流行，直接导致了芸芸学子成绩很高，但解决问题的能力很差。其实，知其然知其所以然，才算真的学明白了。\n\n我属于理论派，我认为工程上的解决方案，一定要有理论做基础。所以在学习任何一门新技术的过程中，我都会探索它背后的理论是什么。比如，当看到 Java SDK 里面的条件变量 Condition 的时候，我会下意识地问，“它是从哪儿来的？是 Java 的特有概念，还是一个通用的编程概念？”当我知道它来自管程的时候，我又会问，“管程被提出的背景和解决的问题是什么？”这样一路探索下来，我发现 Java 语言里的并发技术基本都是有理论基础的，并且这些理论在其他编程语言里也有类似的实现。所以我认为，技术的本质是背后的理论模型。\n\n","tags":["JVM总览"],"categories":["JAVA","JVM"]},{"title":"feign的基本用法","url":"/note/JAVA/RPC/FEIGN/feign的基本用法/","content":"\n\n\n\n\n\n```java\n@FeignClient(value = \"bds-server\", url = \"${remote.bds-url}\")\npublic interface BasicDataFeign {\n\n    //http://fns-yapi.sit.sf-express.com/project/17/interface/api/7236\n    @PostMapping(\"/site/pageSiteByCity\")\n    Result<Page<RemoteSiteCodeResponse>> getSiteList(RemoteSiteRequest request);\n\n    @GetMapping(\"/site/siteById\")\n    Result<RemoteSiteResponse> siteById(@RequestParam(\"siteId\") Long siteId);\n\n}\n\n```\n\n\n## GET请求传单个参数\n发送GET请求的时候，直接使用是不对的。比如下面这样，就是错误的\n\n```java\n    @GetMapping(\"/site/siteById\")\n    Result<RemoteSiteResponse> siteById(Long siteId);\n```\n必须要加上`@RequestParam(\"siteId\")` 注解。才可以。\n\n加上注解之后，get请求的参数才会加上。否则是没有后面的参数的。\n\n```java\nhttp://10.206.173.207/bds-server/site/siteById?siteId=57383\n```\n\n\n## GET请求传多个参数\n那如果要传多个参数呢？\n\n\n\n### 方法一\n```java\n@FeignClient(name = \"demoFeignClient\")\npublic interface DemoFeignClient {\n    @GetMapping(\"/test\")\n    public User test(@SpringQueryMap User user);\n}\n```\n\n\n### 方法二\n把参数平铺出来，每个参数加上@RequestParam注解。\n\n```java\n@FeignClient(name = \"demoFeignClient\")\npublic interface DemoFeignClient {\n  @GetMapping(value = \"/test\")\n  public User test(@RequestParam(\"id\") Long id, @RequestParam(\"name\") String name);\n}\n```\n\n\n### 方法三\n使用Map的方式\n\n```java\n@FeignClient(name = \"demoFeignClient\")\npublic interface DemoFeignClient {\n  @GetMapping(value = \"/test\")\n  public User test(@RequestParam Map<String, Object> map);\n}\n```","tags":["feign","get请求"],"categories":["JAVA","RPC","FEIGN"]},{"title":"windows停止某一个端口的进程","url":"/note/SYSTEM/WINDOWS/windows停止某一个端口的进程/","content":"\n\n\n\n\n## 1.查找端口对应的进程\n\n比如要停止端口为9090的进程\n\n\n\n```sh\nC:\\Users\\BG402180>netstat -ano\n活动连接\n  协议   本地地址               外部地址                状态           PID\n  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       1044\n  TCP    0.0.0.0:443            0.0.0.0:0              LISTENING       19336\n  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4\n  TCP    0.0.0.0:902            0.0.0.0:0              LISTENING       19168\n  TCP    0.0.0.0:912            0.0.0.0:0              LISTENING       19168\n  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       20788\n  TCP    0.0.0.0:5040           0.0.0.0:0              LISTENING       6372\n  TCP    0.0.0.0:7680           0.0.0.0:0              LISTENING       7524\n  TCP    0.0.0.0:9020           0.0.0.0:0              LISTENING       14364\n  TCP    0.0.0.0:9021           0.0.0.0:0              LISTENING       6472\n  TCP    0.0.0.0:9090           0.0.0.0:0              LISTENING       13320\n  TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       876\n  TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       720\n  TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       1460\n  TCP    0.0.0.0:49667          0.0.0.0:0              LISTENING       1820\n```\n\n\n\n## 2.找到端口9090对应的PID\n\n```sh\n  TCP    0.0.0.0:9090           0.0.0.0:0              LISTENING       13320\n```\n\n\n\n## 3.找到pid对应的具体进程名是哪一个\n\n查到13320对应的是javaw.exe这个进程\n\n```sh\nC:\\Users\\BG402180> tasklist | findstr \"13320\"\njavaw.exe                    13320 Console                    2    225,548 K\n```\n\n\n\n## 4.停止这个进程\n\n```sh\nC:\\Users\\BG402180>taskkill /f /t /im javaw.exe\n成功: 已终止 PID 13320 (属于 PID 17924 子进程)的进程。\n```\n\n","tags":["停止进程"],"categories":["SYSTEM","WINDOWS"]},{"title":"Redis的Sentinel","url":"/note/JAVA/数据库/REDIS/Redis的Sentinel/","content":"\n![image-20230526174932259](Redis的Sentinel.assets/image-20230525152233130.png)\n\n# 主从切换\n\n当主节点发生故障宕机了，如果没有第三方干涉，此时是没有主节点的。Redis服务就不可用。\n\n\n\n## 手动主从切换\n\n手动在Redis节点上执行：\n\n- replicaof no one：会将当前Redis节点设置为主节点\n- 在从节点上执行：replicaof ip port 让从节点追随新的主节点\n\n\n\n<img src=\"Redis的Sentinel.assets/image-20230524223849926.png\" alt=\"image-20230524223849926\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n\n\n## 怎么实现自动切换\n\n- Sentinel可以实现自动切换\n\n当主节点发生故障的时候，Sentinel会监测到主节点下线，Sentinel系统会选举出一个新的主节点，并修改其他的从节点追随新的主节点。\n\n这一系列操作会由Sentinel系统自动操作，不需要人为的干预。\n\n\n\n\n\n上面说了，Redis实现自动主从切换，有一个方案就是：Sentinel，下面就看看什么是Sentinel\n\n# 什么是Sentinel\n\nSentinel是Redis高可用的解决方案之一：Sentinel是一套系统，这套系统用来监视我们的Redis服务，当Redis服务中的主节点宕机之后，Sentinel系统会感知到，并自动执行主从切换。\n\n\n\n# Sentinel系统工作总览\n\n## 正常运行阶段\n\n<img src=\"Redis的Sentinel.assets/image-20230524150451031.png\" alt=\"image-20230524150451031\" style=\"zoom:67%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyOCUyMiUyMHRhcmdldCUzRCUyMjEzJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwdmFsdWUlM0QlMjIlRTclOUIlOTElRTglQTclODYlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIyJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjE2NjIlMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQnN0cm9rZUNvbG9yJTNEJTIzRkYzMzMzJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI4JTIyJTIwdGFyZ2V0JTNEJTIyMTQlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NBcnJheSUyMGFzJTNEJTIycG9pbnRzJTIyJTNFJTNDbXhQb2ludCUyMHglM0QlMjItMTU4JTIyJTIweSUzRCUyMjMxNiUyMiUyRiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTI3NyUyMiUyMHklM0QlMjIzMTYlMjIlMkYlM0UlM0MlMkZBcnJheSUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjUlMjIlMjB2YWx1ZSUzRCUyMiVFNyU5QiU5MSVFOCVBNyU4NiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjQlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0wLjI5MTIlMjIlMjB5JTNEJTIyLTEzJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjB5JTNEJTIyLTExJTIyJTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCc3Ryb2tlQ29sb3IlM0QlMjNGRjMzMzMlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjIxNSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNyUyMiUyMHZhbHVlJTNEJTIyJUU3JTlCJTkxJUU4JUE3JTg2JTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjNGRjMzMzMlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyNiUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMC4xMDM2JTIyJTIweSUzRCUyMi04JTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjglMjIlMjB2YWx1ZSUzRCUyMlNlbnRpbmVsJUU3JUIzJUJCJUU3JUJCJTlGJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yODAlMjIlMjB5JTNEJTIyMTUwJTIyJTIwd2lkdGglM0QlMjIyNDQlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjklMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JleGl0WCUzRDAuNTElM0JleGl0WSUzRDEuMDE0JTNCZXhpdER4JTNEMCUzQmV4aXREeSUzRDAlM0JleGl0UGVyaW1ldGVyJTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTMlMjIlMjB0YXJnZXQlM0QlMjIxNCUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTAlMjIlMjB2YWx1ZSUzRCUyMiVFNCVCOCVCQiVFNCVCQiU4RSVFNSVBNCU4RCVFNSU4OCVCNiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjklMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjAuMjMzMiUyMiUyMHklM0QlMjIzJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjExJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZXhpdFglM0QwLjUyNyUzQmV4aXRZJTNEMS4wMTQlM0JleGl0RHglM0QwJTNCZXhpdER5JTNEMCUzQmV4aXRQZXJpbWV0ZXIlM0QwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIxMyUyMiUyMHRhcmdldCUzRCUyMjE1JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMiUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJUU0JUJCJThFJUU1JUE0JThEJUU1JTg4JUI2JTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyMTElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjAuMTY3NiUyMiUyMHklM0QlMjItMiUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMyUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJTIyJTIwc3R5bGUlM0QlMjJhc3BlY3QlM0RmaXhlZCUzQmh0bWwlM0QxJTNCcG9pbnRzJTNEJTVCJTVEJTNCYWxpZ24lM0RjZW50ZXIlM0JpbWFnZSUzQmZvbnRTaXplJTNEMTIlM0JpbWFnZSUzRGltZyUyRmxpYiUyRm1zY2FlJTJGQ2FjaGVfUmVkaXNfUHJvZHVjdC5zdmclM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTI0MCUyMiUyMHklM0QlMjIyMjMlMjIlMjB3aWR0aCUzRCUyMjUwJTIyJTIwaGVpZ2h0JTNEJTIyNDIlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxNCUyMiUyMHZhbHVlJTNEJTIyJUU0JUJCJThFLTElMjIlMjBzdHlsZSUzRCUyMmFzcGVjdCUzRGZpeGVkJTNCaHRtbCUzRDElM0Jwb2ludHMlM0QlNUIlNUQlM0JhbGlnbiUzRGNlbnRlciUzQmltYWdlJTNCZm9udFNpemUlM0QxMiUzQmltYWdlJTNEaW1nJTJGbGliJTJGbXNjYWUlMkZDYWNoZV9SZWRpc19Qcm9kdWN0LnN2ZyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzAyJTIyJTIweSUzRCUyMjM1NCUyMiUyMHdpZHRoJTNEJTIyNTAlMjIlMjBoZWlnaHQlM0QlMjI0MiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE1JTIyJTIwdmFsdWUlM0QlMjIlRTQlQkIlOEUtMSUyMiUyMHN0eWxlJTNEJTIyYXNwZWN0JTNEZml4ZWQlM0JodG1sJTNEMSUzQnBvaW50cyUzRCU1QiU1RCUzQmFsaWduJTNEY2VudGVyJTNCaW1hZ2UlM0Jmb250U2l6ZSUzRDEyJTNCaW1hZ2UlM0RpbWclMkZsaWIlMkZtc2NhZSUyRkNhY2hlX1JlZGlzX1Byb2R1Y3Quc3ZnJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xNDIlMjIlMjB5JTNEJTIyMzU0JTIyJTIwd2lkdGglM0QlMjI1MCUyMiUyMGhlaWdodCUzRCUyMjQyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n## 察觉异常阶段\n\n<img src=\"Redis的Sentinel.assets/image-20230524160400944.png\" alt=\"image-20230524160400944\" style=\"zoom:67%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyM0ZGMzMzMyUzQmRhc2hlZCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjIxMyUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMyUyMiUyMHZhbHVlJTNEJTIyJUU1JUFGJTlGJUU4JUE3JTg5JUU0JUI4JUJCJUU1JUFFJTk1JUU2JTlDJUJBJTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjNGRjMzMzMlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyMiUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMC4xNjYyJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyOCUyMiUyMHRhcmdldCUzRCUyMjE0JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDQXJyYXklMjBhcyUzRCUyMnBvaW50cyUyMiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTE1OCUyMiUyMHklM0QlMjIzMzAlMjIlMkYlM0UlM0NteFBvaW50JTIweCUzRCUyMi0yNzclMjIlMjB5JTNEJTIyMzMwJTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1JTIyJTIwdmFsdWUlM0QlMjIlRTclOUIlOTElRTglQTclODYlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjI0JTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMC4yOTEyJTIyJTIweSUzRCUyMi0xMyUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIweSUzRCUyMi0xMSUyMiUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNiUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQnN0cm9rZUNvbG9yJTNEJTIzRkYzMzMzJTNCZW50cnlYJTNEMC41MDYlM0JlbnRyeVklM0QwLjAxOCUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0JlbnRyeVBlcmltZXRlciUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjIxNSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ0FycmF5JTIwYXMlM0QlMjJwb2ludHMlMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMi0xNTglMjIlMjB5JTNEJTIyMjYxJTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjItODMlMjIlMjB5JTNEJTIyMjYxJTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjItODMlMjIlMjB5JTNEJTIyMzQyJTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjItMTE3JTIyJTIweSUzRCUyMjM0MiUyMiUyRiUzRSUzQyUyRkFycmF5JTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNyUyMiUyMHZhbHVlJTNEJTIyJUU3JTlCJTkxJUU4JUE3JTg2JTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjNGRjMzMzMlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyNiUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMC4xMDM2JTIyJTIweSUzRCUyMi04JTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjglMjIlMjB2YWx1ZSUzRCUyMlNlbnRpbmVsJUU3JUIzJUJCJUU3JUJCJTlGJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yODAlMjIlMjB5JTNEJTIyMTUwJTIyJTIwd2lkdGglM0QlMjIyNDQlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjklMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JleGl0WCUzRDAuNTElM0JleGl0WSUzRDEuMDE0JTNCZXhpdER4JTNEMCUzQmV4aXREeSUzRDAlM0JleGl0UGVyaW1ldGVyJTNEMCUzQmRhc2hlZCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjEzJTIyJTIwdGFyZ2V0JTNEJTIyMTQlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwdmFsdWUlM0QlMjIlRTQlQjglQkIlRTQlQkIlOEUlRTUlQTQlOEQlRTUlODglQjYlRTclQkIlODglRTYlQUQlQTIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjI5JTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjIzMzIlMjIlMjB5JTNEJTIyMyUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmV4aXRYJTNEMC41MjclM0JleGl0WSUzRDEuMDE0JTNCZXhpdER4JTNEMCUzQmV4aXREeSUzRDAlM0JleGl0UGVyaW1ldGVyJTNEMCUzQmRhc2hlZCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjEzJTIyJTIwdGFyZ2V0JTNEJTIyMTUlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEyJTIyJTIwdmFsdWUlM0QlMjIlRTQlQjglQkIlRTQlQkIlOEUlRTUlQTQlOEQlRTUlODglQjYlRTclQkIlODglRTYlQUQlQTIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIxMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMC4xNjc2JTIyJTIweSUzRCUyMi0yJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyOCUyMiUyMHklM0QlMjI0JTIyJTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMyUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJTIyJTIwc3R5bGUlM0QlMjJhc3BlY3QlM0RmaXhlZCUzQmh0bWwlM0QxJTNCcG9pbnRzJTNEJTVCJTVEJTNCYWxpZ24lM0RjZW50ZXIlM0JpbWFnZSUzQmZvbnRTaXplJTNEMTIlM0JpbWFnZSUzRGltZyUyRmxpYiUyRm1zY2FlJTJGQ2FjaGVfUmVkaXNfUHJvZHVjdC5zdmclM0JvcGFjaXR5JTNEMzAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTI0MCUyMiUyMHklM0QlMjIyMzMlMjIlMjB3aWR0aCUzRCUyMjUwJTIyJTIwaGVpZ2h0JTNEJTIyNDIlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxNCUyMiUyMHZhbHVlJTNEJTIyJUU0JUJCJThFLTElMjIlMjBzdHlsZSUzRCUyMmFzcGVjdCUzRGZpeGVkJTNCaHRtbCUzRDElM0Jwb2ludHMlM0QlNUIlNUQlM0JhbGlnbiUzRGNlbnRlciUzQmltYWdlJTNCZm9udFNpemUlM0QxMiUzQmltYWdlJTNEaW1nJTJGbGliJTJGbXNjYWUlMkZDYWNoZV9SZWRpc19Qcm9kdWN0LnN2ZyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzAyJTIyJTIweSUzRCUyMjM1NCUyMiUyMHdpZHRoJTNEJTIyNTAlMjIlMjBoZWlnaHQlM0QlMjI0MiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE1JTIyJTIwdmFsdWUlM0QlMjIlRTQlQkIlOEUtMSUyMiUyMHN0eWxlJTNEJTIyYXNwZWN0JTNEZml4ZWQlM0JodG1sJTNEMSUzQnBvaW50cyUzRCU1QiU1RCUzQmFsaWduJTNEY2VudGVyJTNCaW1hZ2UlM0Jmb250U2l6ZSUzRDEyJTNCaW1hZ2UlM0RpbWclMkZsaWIlMkZtc2NhZSUyRkNhY2hlX1JlZGlzX1Byb2R1Y3Quc3ZnJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xNDIlMjIlMjB5JTNEJTIyMzU0JTIyJTIwd2lkdGglM0QlMjI1MCUyMiUyMGhlaWdodCUzRCUyMjQyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n\n\n## 主从切换阶段\n\n<img src=\"Redis的Sentinel.assets/image-20230524161045110.png\" alt=\"image-20230524161045110\" style=\"zoom:67%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyM0ZGMzMzMyUzQmRhc2hlZCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjI5JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwdmFsdWUlM0QlMjIlRTclQUQlODklRTUlQkUlODUlRTUlODYlOEQlRTYlQUMlQTElRTQlQjglOEElRTclQkElQkYlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIyJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjE2NjIlMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyOCUyMiUyMHRhcmdldCUzRCUyMjEyJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1JTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmZvbnQlMjBjb2xvciUzRCUyNnF1b3QlM0IlMjMwMDAwMDAlMjZxdW90JTNCJTI2Z3QlM0IlRTglQUUlQkUlRTclQkQlQUUlRTQlQjglQkElRTYlOTYlQjAlRTclOUElODQlRTQlQjglQkIlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjQlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjAuMTg0NCUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIweSUzRCUyMi00JTIyJTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCc3Ryb2tlQ29sb3IlM0QlMjNGRjMzMzMlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjIxMyUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ0FycmF5JTIwYXMlM0QlMjJwb2ludHMlMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMi0xNTglMjIlMjB5JTNEJTIyMjEzJTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjItMjYlMjIlMjB5JTNEJTIyMjEzJTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3JTIyJTIwdmFsdWUlM0QlMjIlRTglQUUlQkUlRTclQkQlQUUlRTQlQjglQkElRTYlOTYlQjAlRTQlQjglQkIlRTclOUElODQlRTQlQkIlOEUlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjI2JTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMC4wMDA0JTIyJTIweSUzRCUyMi0yMCUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4JTIyJTIwdmFsdWUlM0QlMjJTZW50aW5lbCVFNyVCMyVCQiVFNyVCQiU5RiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjgwJTIyJTIweSUzRCUyMjE1MCUyMiUyMHdpZHRoJTNEJTIyMjQ0JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5JTIyJTIwdmFsdWUlM0QlMjIlRTQlQjglQkIlMjIlMjBzdHlsZSUzRCUyMmFzcGVjdCUzRGZpeGVkJTNCaHRtbCUzRDElM0Jwb2ludHMlM0QlNUIlNUQlM0JhbGlnbiUzRGNlbnRlciUzQmltYWdlJTNCZm9udFNpemUlM0QxMiUzQmltYWdlJTNEaW1nJTJGbGliJTJGbXNjYWUlMkZDYWNoZV9SZWRpc19Qcm9kdWN0LnN2ZyUzQm9wYWNpdHklM0QzMCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzEwJTIyJTIweSUzRCUyMjIxOSUyMiUyMHdpZHRoJTNEJTIyNTAlMjIlMjBoZWlnaHQlM0QlMjI0MiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjEyJTIyJTIwdGFyZ2V0JTNEJTIyMTMlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjExJTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmZvbnQlMjBjb2xvciUzRCUyNnF1b3QlM0IlMjMwMDAwMDAlMjZxdW90JTNCJTI2Z3QlM0IlRTQlQjglQkIlRTQlQkIlOEUlRTUlQTQlOEQlRTUlODglQjYlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjEwJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMC4zMTQ4JTIyJTIweSUzRCUyMi00JTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEyJTIyJTIwdmFsdWUlM0QlMjIlRTQlQkIlOEUtMSUyMiUyMHN0eWxlJTNEJTIyYXNwZWN0JTNEZml4ZWQlM0JodG1sJTNEMSUzQnBvaW50cyUzRCU1QiU1RCUzQmFsaWduJTNEY2VudGVyJTNCaW1hZ2UlM0Jmb250U2l6ZSUzRDEyJTNCaW1hZ2UlM0RpbWclMkZsaWIlMkZtc2NhZSUyRkNhY2hlX1JlZGlzX1Byb2R1Y3Quc3ZnJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xODMlMjIlMjB5JTNEJTIyMjc3JTIyJTIwd2lkdGglM0QlMjI1MCUyMiUyMGhlaWdodCUzRCUyMjQyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTMlMjIlMjB2YWx1ZSUzRCUyMiVFNCVCQiU4RS0xJTIyJTIwc3R5bGUlM0QlMjJhc3BlY3QlM0RmaXhlZCUzQmh0bWwlM0QxJTNCcG9pbnRzJTNEJTVCJTVEJTNCYWxpZ24lM0RjZW50ZXIlM0JpbWFnZSUzQmZvbnRTaXplJTNEMTIlM0JpbWFnZSUzRGltZyUyRmxpYiUyRm1zY2FlJTJGQ2FjaGVfUmVkaXNfUHJvZHVjdC5zdmclM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTUxJTIyJTIweSUzRCUyMjMzNyUyMiUyMHdpZHRoJTNEJTIyNTAlMjIlMjBoZWlnaHQlM0QlMjI0MiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0MlMkZyb290JTNFJTNDJTJGbXhHcmFwaE1vZGVsJTNF\n```\n\n\n\n\n\n## 重新上线阶段\n\n<img src=\"Redis的Sentinel.assets/image-20230524161227649.png\" alt=\"image-20230524161227649\" style=\"zoom:67%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjI5JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwdmFsdWUlM0QlMjIlRTklODclOEQlRTYlOTYlQjAlRTQlQjglOEElRTclQkElQkYlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIyJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjE2NjIlMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyOCUyMiUyMHRhcmdldCUzRCUyMjE0JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1JTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmZvbnQlMjBjb2xvciUzRCUyNnF1b3QlM0IlMjMwMDAwMDAlMjZxdW90JTNCJTI2Z3QlM0IlRTclOUIlOTElRTglQTclODYlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjQlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjAuMTg0NCUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIweSUzRCUyMi00JTIyJTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCc3Ryb2tlQ29sb3IlM0QlMjNGRjMzMzMlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjIxNSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ0FycmF5JTIwYXMlM0QlMjJwb2ludHMlMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMi0xNTglMjIlMjB5JTNEJTIyMjEzJTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjItMjYlMjIlMjB5JTNEJTIyMjEzJTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3JTIyJTIwdmFsdWUlM0QlMjIlRTclOUIlOTElRTglQTclODYlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQmZvbnRDb2xvciUzRCUyM0ZGMzMzMyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjI2JTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMC4wMDA0JTIyJTIweSUzRCUyMi0yMCUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4JTIyJTIwdmFsdWUlM0QlMjJTZW50aW5lbCVFNyVCMyVCQiVFNyVCQiU5RiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjgwJTIyJTIweSUzRCUyMjE1MCUyMiUyMHdpZHRoJTNEJTIyMjQ0JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5JTIyJTIwdmFsdWUlM0QlMjIlRTQlQjglQkIlMjIlMjBzdHlsZSUzRCUyMmFzcGVjdCUzRGZpeGVkJTNCaHRtbCUzRDElM0Jwb2ludHMlM0QlNUIlNUQlM0JhbGlnbiUzRGNlbnRlciUzQmltYWdlJTNCZm9udFNpemUlM0QxMiUzQmltYWdlJTNEaW1nJTJGbGliJTJGbXNjYWUlMkZDYWNoZV9SZWRpc19Qcm9kdWN0LnN2ZyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjk5JTIyJTIweSUzRCUyMjIxOSUyMiUyMHdpZHRoJTNEJTIyNTAlMjIlMjBoZWlnaHQlM0QlMjI0MiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjE0JTIyJTIwdGFyZ2V0JTNEJTIyMTUlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjExJTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmZvbnQlMjBjb2xvciUzRCUyNnF1b3QlM0IlMjMwMDAwMDAlMjZxdW90JTNCJTI2Z3QlM0IlRTQlQjglQkIlRTQlQkIlOEUlRTUlQTQlOEQlRTUlODglQjYlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjEwJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMC4zMTQ4JTIyJTIweSUzRCUyMi00JTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEyJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjE0JTIyJTIwdGFyZ2V0JTNEJTIyOSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTMlMjIlMjB2YWx1ZSUzRCUyMiVFNCVCRCU5QyVFNCVCOCVCQSVFNiU5NiVCMCVFNCVCOCVCQiVFNyU5QSU4NCVFNCVCQiU4RSVFRiVCQyU4QyVFNCVCOCVCQiVFNCVCQiU4RSVFNSVBNCU4RCVFNSU4OCVCNiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzRkYzMzMzJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjEyJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjEwMzklMjIlMjB5JTNEJTIyLTklMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMHglM0QlMjI3JTIyJTIweSUzRCUyMi03JTIyJTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxNCUyMiUyMHZhbHVlJTNEJTIyJUU0JUJCJThFLTElMjIlMjBzdHlsZSUzRCUyMmFzcGVjdCUzRGZpeGVkJTNCaHRtbCUzRDElM0Jwb2ludHMlM0QlNUIlNUQlM0JhbGlnbiUzRGNlbnRlciUzQmltYWdlJTNCZm9udFNpemUlM0QxMiUzQmltYWdlJTNEaW1nJTJGbGliJTJGbXNjYWUlMkZDYWNoZV9SZWRpc19Qcm9kdWN0LnN2ZyUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTgzJTIyJTIweSUzRCUyMjI5NSUyMiUyMHdpZHRoJTNEJTIyNTAlMjIlMjBoZWlnaHQlM0QlMjI0MiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE1JTIyJTIwdmFsdWUlM0QlMjIlRTQlQkIlOEUtMSUyMiUyMHN0eWxlJTNEJTIyYXNwZWN0JTNEZml4ZWQlM0JodG1sJTNEMSUzQnBvaW50cyUzRCU1QiU1RCUzQmFsaWduJTNEY2VudGVyJTNCaW1hZ2UlM0Jmb250U2l6ZSUzRDEyJTNCaW1hZ2UlM0RpbWclMkZsaWIlMkZtc2NhZSUyRkNhY2hlX1JlZGlzX1Byb2R1Y3Quc3ZnJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi01MSUyMiUyMHklM0QlMjIzMzclMjIlMjB3aWR0aCUzRCUyMjUwJTIyJTIwaGVpZ2h0JTNEJTIyNDIlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDJTJGcm9vdCUzRSUzQyUyRm14R3JhcGhNb2RlbCUzRQ==\n```\n\n\n\n\n\n# Sentinel系统工作全流程\n\n\n\n## 服务启动与连接构建阶段\n\n\n\n### 启动Sentinel\n\n```shell\n$ redis-sentinel /path/to/your/sentinel.conf\n# 或者\n$ redis-server /path/to/your/sentinel.conf --sentinel\n```\n\n- Sentinel系统本质就是运行在特殊模式下的Redis服务\n\n\n\n### 初始化Sentinel服务\n\n- Sentinel本质上是运行在特殊模式下的Redis服务\n\n那么它和正常的Redis服务有哪些区别呢？区别记住两点就好了\n\n- 第一点：Sentinel不需要存储业务k-v，所以启动的时候不需要加载RDB和AOF\n- 第二点：Sentinel不需要提供业务功能，所以键值类操作，事务，脚本，RDB，AOF类等Redis的指令，在Sentinel模式下是不能用的\n\n那么Sentinel有哪些服务呢？记住一点就行啦\n\n- 发布订阅的指令和info指令：因为sentinel服务之间是通过发布订阅来进行通信的。\n\n\n\n### 初始化Sentinel的内存结构\n\n- 就是在内存中构建出Sentinel的存储结构，类比与Redis服务，启动之后也会初始化一个dict，用来存储键值。\n- Sentinel模式下的服务也会初始化一个结构，用来存储Sentinel运行过程中需要存储的数据，这个结构包括\n  - Sentinel的状态：sentinelState\n  - Sentinel的实例：sentinelRedisIntance\n  - Sentinel的基本单元：sentinelAddr\n\n这些结构的源码如下\n\n```c\nstruct sentinelState {\n    // 当前纪元，用于实现故障转移\n    uint64_t current_epoch;\n    \n    // 保存了所有被这个sentinel监视的主服务器\n    // 字典的键是主服务器的名字\n    // 字典的值则是一个指向sentinelRedisInstance结构的指针\n    dict *masters;\n    \n    // 是否进入了TILT模式？\n    int tilt;\n    \n    // 目前正在执行的脚本的数量\n    int running_scripts;\n\n    // 进入TILT模式的时间\n    mstime_t tilt_start_time;\n    \n    // 最后一次执行时间处理器的时间\n    mstime_t previous_time;\n    \n    // 一个FIFO队列，包含了所有需要执行的用户脚本\n    list *scripts_queue;\n} sentinel;\n```\n\n\n\n```c\ntypedef struct sentinelRedisInstance {\n    // 标识值，记录了实例的类型，以及该实例的当前状态\n    int flags;\n    \n    // 实例的名字\n    // 主服务器的名字由用户在配置文件中设置\n    // 从服务器以及Sentinel的名字由Sentinel自动设置\n    // 格式为ip:port，例如\"127.0.0.1:26379\"\n    char *name;\n    \n    // 实例的运行ID\n    char *runid;\n\n    // 配置纪元，用于实现故障转移\n    uint64_t config_epoch;\n    \n    // 实例的地址\n    sentinelAddr *addr;\n    \n    // SENTINEL down-after-milliseconds选项设定的值\n    // 实例无响应多少毫秒之后才会被判断为主观下线（subjectively down）\n    mstime_t down_after_period;\n    \n    // SENTINEL monitor <master-name> <IP> <port> <quorum>选项中的quorum参数\n    // 判断这个实例为客观下线（objectively down）所需的支持投票数量\n    int quorum;\n    \n    // SENTINEL parallel-syncs <master-name> <number>选项的值\n    // 在执行故障转移操作时，可以同时对新的主服务器进行同步的从服务器数量\n    int parallel_syncs;\n    \n    // SENTINEL failover-timeout <master-name> <ms>选项的值\n    // 刷新故障迁移状态的最大时限\n    mstime_t failover_timeout;\n    // ...\n} sentinelRedisInstance;\n```\n\n\n\n```c\ntypedef struct sentinelAddr {\n    char *ip;\n    int port;\n} sentinelAddr;\n```\n\n\n\n我们通过一个具体的例子，来看一下这三个结构之间的关系\n\n下面是一个Sentinel的配置文件，表示当前Sentinel要监听两个主节点\n\n```xml-dtd\n#####################\n# master1 configure #\n#####################\nsentinel monitor master1 127.0.0.1 6379 2\nsentinel down-after-milliseconds master1 30000\nsentinel parallel-syncs master1 1\nsentinel failover-timeout master1 900000\n#####################\n# master2 configure #\n#####################\nsentinel monitor master2 127.0.0.1 12345 5\nsentinel down-after-milliseconds master2 50000\nsentinel parallel-syncs master2 5\nsentinel failover-timeout master2 450000\n```\n\n\n\n这份配置，在Sentinel启动之后，他们的内存结构如图\n\n<font color='red'>这张图很重要，我们之后会不停的对这张图进行更新，以便于我们理解Sentinel是怎么通信的</font>\n\n![image-20230524230551629](Redis的Sentinel.assets/image-20230524230551629.png)\n\n```base64\\n```\n\n\n\n\n\n### 创建Sentinel与主节点之间的网络连接\n\n当Sentinel内存结构创建完成之后，开始连接主节点。\n\nSentinel怎么知道连接到哪个主节点的？\n\n当然是在Sentinel的配置文件配置的啦。\n\n比如下面的配置文件\n\n```xml-dtd\n#####################\n# master1 configure #\n#####################\nsentinel monitor master1 127.0.0.1 6379 2\nsentinel down-after-milliseconds master1 30000\nsentinel parallel-syncs master1 1\nsentinel failover-timeout master1 900000\n#####################\n# master2 configure #\n#####################\nsentinel monitor master2 127.0.0.1 12345 5\nsentinel down-after-milliseconds master2 50000\nsentinel parallel-syncs master2 5\nsentinel failover-timeout master2 450000\n```\n\nSentinel服务就会向 master1 和 master2 分别创建两个网络连接\n\n- 命令连接\n- 订阅连接\n\n<img src=\"Redis的Sentinel.assets/image-20230524225803615.png\" alt=\"image-20230524225803615\" style=\"zoom:67%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JleGl0WCUzRDAuMjUlM0JleGl0WSUzRDElM0JleGl0RHglM0QwJTNCZXhpdER5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTAlMjIlMjB0YXJnZXQlM0QlMjIxMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ0FycmF5JTIwYXMlM0QlMjJwb2ludHMlMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMi0xNzElMjIlMjB5JTNEJTIyLTU5JTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwdmFsdWUlM0QlMjIlRTUlOTElQkQlRTQlQkIlQTQlRTglQkYlOUUlRTYlOEUlQTUlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIyJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjM1NzElMjIlMjB5JTNEJTIyNiUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMCUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0JleGl0WCUzRDAuMjUlM0JleGl0WSUzRDElM0JleGl0RHglM0QwJTNCZXhpdER5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTAlMjIlMjB0YXJnZXQlM0QlMjIxMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ0FycmF5JTIwYXMlM0QlMjJwb2ludHMlMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMi0xMDQlMjIlMjB5JTNEJTIyNDElMjIlMkYlM0UlM0MlMkZBcnJheSUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjUlMjIlMjB2YWx1ZSUzRCUyMiVFOCVBRSVBMiVFOSU5OCU4NSVFOCVCRiU5RSVFNiU4RSVBNSUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjQlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0wLjMzODYlMjIlMjB5JTNEJTIyLTUlMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNiUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmV4aXRYJTNEMC43NSUzQmV4aXRZJTNEMSUzQmV4aXREeCUzRDAlM0JleGl0RHklM0QwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIxMCUyMiUyMHRhcmdldCUzRCUyMjEyJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDQXJyYXklMjBhcyUzRCUyMnBvaW50cyUyMiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTQzJTIyJTIweSUzRCUyMi01OSUyMiUyRiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTQzJTIyJTIweSUzRCUyMjQxJTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3JTIyJTIwdmFsdWUlM0QlMjIlRTglQUUlQTIlRTklOTglODUlRTglQkYlOUUlRTYlOEUlQTUlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjI2JTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjAxNDYlMjIlMjB5JTNEJTIyNCUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMCUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0JleGl0WCUzRDAuNzUlM0JleGl0WSUzRDElM0JleGl0RHglM0QwJTNCZXhpdER5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTAlMjIlMjB0YXJnZXQlM0QlMjIxMiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ0FycmF5JTIwYXMlM0QlMjJwb2ludHMlMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMjE1JTIyJTIweSUzRCUyMi01OSUyMiUyRiUzRSUzQyUyRkFycmF5JTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOSUyMiUyMHZhbHVlJTNEJTIyJUU1JTkxJUJEJUU0JUJCJUE0JUU4JUJGJTlFJUU2JThFJUE1JTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyOCUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMC4yMjE2JTIyJTIweSUzRCUyMi00JTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwdmFsdWUlM0QlMjJTZW50aW5lbCVFNiU5QyU4RCVFNSU4QSVBMSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE0MSUyMiUyMHklM0QlMjItOTUlMjIlMjB3aWR0aCUzRCUyMjE0OSUyMiUyMGhlaWdodCUzRCUyMjM2JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTElMjIlMjB2YWx1ZSUzRCUyMm1hc3Rlci0xJTIyJTIwc3R5bGUlM0QlMjJlbGxpcHNlJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMTElMjIlMjB5JTNEJTIyNDElMjIlMjB3aWR0aCUzRCUyMjk2JTIyJTIwaGVpZ2h0JTNEJTIyNDMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMiUyMiUyMHZhbHVlJTNEJTIybWFzdGVyLTIlMjIlMjBzdHlsZSUzRCUyMmVsbGlwc2UlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTMzJTIyJTIweSUzRCUyMjQxJTIyJTIwd2lkdGglM0QlMjI5NiUyMiUyMGhlaWdodCUzRCUyMjQzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n**为什么要创建两个连接？**\n\n《Redis设计与实现》给的理由我不赞同，我觉得就是单纯的为了指责区分，两个连接的各司其职。他们的工作内容不同，各司其职，效率高。\n\n\n\n### 获取主节点信息\n\n当连接创建完成之后，Sentinel服务器就开始工作了。\n\nSentinel服务器使用定时任务，默认10s一次，通过命令连接向被监视的主节点发送INFO命令，获取主节点的信息\n\n<img src=\"Redis的Sentinel.assets/image-20230524231349461.png\" alt=\"image-20230524231349461\" style=\"zoom: 50%;\" />\n\n```base64\\n```\n\n通过返回的信息，我们可以看到，此时Sentinel可以得到主节点和当前主节点的所有从节点的信息。\n\n此时Sentinel就会将这个部分保存在自己的内存结构中。比如\n\n<img src=\"Redis的Sentinel.assets/image-20230524232131749.png\" alt=\"image-20230524232131749\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n- 其中slave也是使用 sentinelRedisInstance来表示的，只不过它的标识位是：`SRI_SLAVE`；主节点的标识位是：`SRI_MASTER`\n- 其中slave的name是系统生成的，无法指定，格式是：`ip:port`\n\n\n\n### 创建Sentinel与从节点之间的网络连接\n\n经过上一步，Sentinel已经知道了当前主节点下有哪些从节点，所以Sentinel会对这些从节点也建立连接\n\n同样的，连接也是两个\n\n- 命令连接\n- 订阅连接\n\n如下图\n\n<img src=\"Redis的Sentinel.assets/image-20230524232943050.png\" alt=\"image-20230524232943050\" style=\"zoom:50%;\" />\n\n```base64\\n```\n\n\n\n\n\n### 获取从节点信息\n\n当和从节点创建连接之后\n\nSentinel服务会定时，每隔10s，使用命令连接向从节点发送`INFO`命令，获取从节点信息\n\n<img src=\"Redis的Sentinel.assets/image-20230524233850117.png\" alt=\"image-20230524233850117\" style=\"zoom:50%;\" />\n\n```base64\\n```\n\nSentinel通过命令连接向每一个从节点都发送INFO，就可以拿到这个从节点更多的信息。\n\n比如：当前从节点的runid，当前从节点所追随的主节点信息，当前从节点的主从复制的信息等。\n\n此时Sentinel就会将这个部分更新在自己的内存结构中。如下\n\n<img src=\"Redis的Sentinel.assets/image-20230524234950764.png\" alt=\"image-20230524234950764\" style=\"zoom:80%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMiUyNmx0JTNCZm9udCUyMGNvbG9yJTNEJTI2cXVvdCUzQiUyMzAwMDAwMCUyNnF1b3QlM0IlMjZndCUzQnNlbnRpbmVsUmVkaXNJbnN0YW5jZSUyNmx0JTNCJTJGZm9udCUyNmd0JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zNDMlMjIlMjB5JTNEJTIyMTczJTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMlMjIlMjB2YWx1ZSUzRCUyMmZsYWdzJUVGJUJDJTlBU1JJX01BU1RFUiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM0MyUyMiUyMHklM0QlMjIxOTYlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNCUyMiUyMHZhbHVlJTNEJTIybmFtZSVFRiVCQyU5QSVFMiU4MCU5Q21hc3RlcjElRTIlODAlOUQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zNDMlMjIlMjB5JTNEJTIyMjE5JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjUlMjIlMjB2YWx1ZSUzRCUyMnJ1bmlkJUVGJUJDJTlBJUUyJTgwJTlDZThoYThkMDhhM2g4MGE4ZmEuLi5zczk4ZCVFMiU4MCU5RCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM0MyUyMiUyMHklM0QlMjIyNDIlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNiUyMiUyMHZhbHVlJTNEJTIyY29uZmlnX2Vwb2NoJUVGJUJDJTlBMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM0MyUyMiUyMHklM0QlMjIyNjUlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjIxNCUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOCUyMiUyMHZhbHVlJTNEJTIyYWRkciUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM0MyUyMiUyMHklM0QlMjIyODglMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOSUyMiUyMHZhbHVlJTNEJTIyZG93bl9hZnRlcl9wZXJpb2QlRUYlQkMlOUEzMDAwMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM0MyUyMiUyMHklM0QlMjIzMTElMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTAlMjIlMjB2YWx1ZSUzRCUyMnF1b3J1bSVFRiVCQyU5QTIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zNDMlMjIlMjB5JTNEJTIyMzM0JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjExJTIyJTIwdmFsdWUlM0QlMjJwYXJhbGxlbF9zeW5jcyVFRiVCQyU5QTElMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zNDMlMjIlMjB5JTNEJTIyMzU3JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEyJTIyJTIwdmFsdWUlM0QlMjJmYWlsb3Zlcl90aW1lb3V0JUVGJUJDJTlBOTAwMDAwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzQzJTIyJTIweSUzRCUyMjM4MCUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMyUyMiUyMHZhbHVlJTNEJTIyLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zNDMlMjIlMjB5JTNEJTIyNDAzJTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE0JTIyJTIwdmFsdWUlM0QlMjJzZW50aW5lbEFkZHIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM4JTIyJTIweSUzRCUyMjI0MiUyMiUyMHdpZHRoJTNEJTIyOTclMjIlMjBoZWlnaHQlM0QlMjIyMCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE1JTIyJTIwdmFsdWUlM0QlMjJpcCVFRiVCQyU5QSUyNnF1b3QlM0IxMjcuMC4wLjElMjZxdW90JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzglMjIlMjB5JTNEJTIyMjYyJTIyJTIwd2lkdGglM0QlMjI5NyUyMiUyMGhlaWdodCUzRCUyMjIwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTYlMjIlMjB2YWx1ZSUzRCUyMnBvcnQlRUYlQkMlOUElRTIlODAlOUM2Mzc5JUUyJTgwJTlEJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzglMjIlMjB5JTNEJTIyMjgyJTIyJTIwd2lkdGglM0QlMjI5NyUyMiUyMGhlaWdodCUzRCUyMjIwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTclMjIlMjB2YWx1ZSUzRCUyMiUyNmx0JTNCZGl2JTIwc3R5bGUlM0QlMjZxdW90JTNCZm9udC1zaXplJTNBJTIwMTFweCUyNnF1b3QlM0IlMjZndCUzQiUyNmx0JTNCZm9udCUyMHN0eWxlJTNEJTI2cXVvdCUzQmZvbnQtc2l6ZSUzQSUyMDExcHglMjZxdW90JTNCJTI2Z3QlM0IlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyMHN0eWxlJTNEJTI2cXVvdCUzQmZvbnQtc2l6ZSUzQSUyMDExcHglMjZxdW90JTNCJTI2Z3QlM0IlMjZsdCUzQmZvbnQlMjBzdHlsZSUzRCUyNnF1b3QlM0Jmb250LXNpemUlM0ElMjAxMXB4JTI2cXVvdCUzQiUyNmd0JTNCJTIzJTIwbWFzdGVyMSUyMGNvbmZpZ3VyZSUyMCUyMyUyNmx0JTNCJTJGZm9udCUyNmd0JTNCJTI2bHQlM0IlMkZkaXYlMjZndCUzQiUyNmx0JTNCZGl2JTIwc3R5bGUlM0QlMjZxdW90JTNCZm9udC1zaXplJTNBJTIwMTFweCUyNnF1b3QlM0IlMjZndCUzQiUyNmx0JTNCZm9udCUyMHN0eWxlJTNEJTI2cXVvdCUzQmZvbnQtc2l6ZSUzQSUyMDExcHglMjZxdW90JTNCJTI2Z3QlM0IlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyMHN0eWxlJTNEJTI2cXVvdCUzQmZvbnQtc2l6ZSUzQSUyMDExcHglMjZxdW90JTNCJTI2Z3QlM0IlMjZsdCUzQmZvbnQlMjBzdHlsZSUzRCUyNnF1b3QlM0Jmb250LXNpemUlM0ElMjAxMXB4JTI2cXVvdCUzQiUyNmd0JTNCc2VudGluZWwlMjBtb25pdG9yJTIwbWFzdGVyMSUyMDEyNy4wLjAuMSUyMDYzNzklMjAyJTI2bHQlM0IlMkZmb250JTI2Z3QlM0IlMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjBzdHlsZSUzRCUyNnF1b3QlM0Jmb250LXNpemUlM0ElMjAxMXB4JTI2cXVvdCUzQiUyNmd0JTNCJTI2bHQlM0Jmb250JTIwc3R5bGUlM0QlMjZxdW90JTNCZm9udC1zaXplJTNBJTIwMTFweCUyNnF1b3QlM0IlMjZndCUzQnNlbnRpbmVsJTIwZG93bi1hZnRlci1taWxsaXNlY29uZHMlMjBtYXN0ZXIxJTIwMzAwMDAlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyMHN0eWxlJTNEJTI2cXVvdCUzQmZvbnQtc2l6ZSUzQSUyMDExcHglMjZxdW90JTNCJTI2Z3QlM0IlMjZsdCUzQmZvbnQlMjBzdHlsZSUzRCUyNnF1b3QlM0Jmb250LXNpemUlM0ElMjAxMXB4JTI2cXVvdCUzQiUyNmd0JTNCc2VudGluZWwlMjBwYXJhbGxlbC1zeW5jcyUyMG1hc3RlcjElMjAxJTI2bHQlM0IlMkZmb250JTI2Z3QlM0IlMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjBzdHlsZSUzRCUyNnF1b3QlM0Jmb250LXNpemUlM0ElMjAxMXB4JTI2cXVvdCUzQiUyNmd0JTNCJTI2bHQlM0Jmb250JTIwc3R5bGUlM0QlMjZxdW90JTNCZm9udC1zaXplJTNBJTIwMTFweCUyNnF1b3QlM0IlMjZndCUzQnNlbnRpbmVsJTIwZmFpbG92ZXItdGltZW91dCUyMG1hc3RlcjElMjA5MDAwMDAlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjIlMjBzdHlsZSUzRCUyMnRleHQlM0JodG1sJTNEMSUzQnN0cm9rZUNvbG9yJTNEJTIzNjY2NjY2JTNCZmlsbENvbG9yJTNEJTIzZjVmNWY1JTNCYWxpZ24lM0RsZWZ0JTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0Jmb250Q29sb3IlM0QlMjMzMzMzMzMlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTYwMCUyMiUyMHklM0QlMjIyNDIlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjEwMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE4JTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmZvbnQlMjBjb2xvciUzRCUyNnF1b3QlM0IlMjMwMDAwMDAlMjZxdW90JTNCJTI2Z3QlM0JzZW50aW5lbFJlZGlzSW5zdGFuY2UlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzMzJTIyJTIweSUzRCUyMjU2MSUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxOSUyMiUyMHZhbHVlJTNEJTIyZmxhZ3MlRUYlQkMlOUFTUklfTUFTVEVSJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzMzJTIyJTIweSUzRCUyMjU4NCUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyMCUyMiUyMHZhbHVlJTNEJTIybmFtZSVFRiVCQyU5QSVFMiU4MCU5Q21hc3RlcjIlRTIlODAlOUQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zMzMlMjIlMjB5JTNEJTIyNjA3JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIxJTIyJTIwdmFsdWUlM0QlMjJydW5pZCVFRiVCQyU5QSVFMiU4MCU5Q2RkOWZhczk1dmE1M2xrZ2ZhLi4uc2RmdXMlRTIlODAlOUQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zMzMlMjIlMjB5JTNEJTIyNjMwJTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIyJTIyJTIwdmFsdWUlM0QlMjJjb25maWdfZXBvY2glRUYlQkMlOUEwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzMzJTIyJTIweSUzRCUyMjY1MyUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyMyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjI0JTIyJTIwdGFyZ2V0JTNEJTIyMzAlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI0JTIyJTIwdmFsdWUlM0QlMjJhZGRyJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzMzJTIyJTIweSUzRCUyMjY3NiUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNSUyMiUyMHZhbHVlJTNEJTIyZG93bl9hZnRlcl9wZXJpb2QlRUYlQkMlOUE1MDAwMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTMzMyUyMiUyMHklM0QlMjI2OTklMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjYlMjIlMjB2YWx1ZSUzRCUyMnF1b3J1bSVFRiVCQyU5QTUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zMzMlMjIlMjB5JTNEJTIyNzIyJTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI3JTIyJTIwdmFsdWUlM0QlMjJwYXJhbGxlbF9zeW5jcyVFRiVCQyU5QTUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zMzMlMjIlMjB5JTNEJTIyNzQ1JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI4JTIyJTIwdmFsdWUlM0QlMjJmYWlsb3Zlcl90aW1lb3V0JUVGJUJDJTlBNDUwMDAwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzMzJTIyJTIweSUzRCUyMjc2OCUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyOSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0zMzMlMjIlMjB5JTNEJTIyNzkxJTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMwJTIyJTIwdmFsdWUlM0QlMjJzZW50aW5lbEFkZHIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIxJTIyJTIweSUzRCUyMjYzOSUyMiUyMHdpZHRoJTNEJTIyOTclMjIlMjBoZWlnaHQlM0QlMjIyMCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMxJTIyJTIwdmFsdWUlM0QlMjJpcCVFRiVCQyU5QSUyNnF1b3QlM0IxMjcuMC4wLjElMjZxdW90JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjElMjIlMjB5JTNEJTIyNjU5JTIyJTIwd2lkdGglM0QlMjI5NyUyMiUyMGhlaWdodCUzRCUyMjIwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzIlMjIlMjB2YWx1ZSUzRCUyMnBvcnQlRUYlQkMlOUElRTIlODAlOUMxMjM0NSVFMiU4MCU5RCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIxJTIyJTIweSUzRCUyMjY3OSUyMiUyMHdpZHRoJTNEJTIyOTclMjIlMjBoZWlnaHQlM0QlMjIyMCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMzJTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmRpdiUyMHN0eWxlJTNEJTI2cXVvdCUzQmZvbnQtc2l6ZSUzQSUyMDExcHglMjZxdW90JTNCJTI2Z3QlM0IlMjZsdCUzQmRpdiUyNmd0JTNCJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTIzJTI2bHQlM0IlMkZkaXYlMjZndCUzQiUyNmx0JTNCZGl2JTI2Z3QlM0IlMjMlMjBtYXN0ZXIyJTIwY29uZmlndXJlJTIwJTIzJTI2bHQlM0IlMkZkaXYlMjZndCUzQiUyNmx0JTNCZGl2JTI2Z3QlM0IlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjMlMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjZndCUzQnNlbnRpbmVsJTIwbW9uaXRvciUyMG1hc3RlcjIlMjAxMjcuMC4wLjElMjAxMjM0NSUyMDUlMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjZndCUzQnNlbnRpbmVsJTIwZG93bi1hZnRlci1taWxsaXNlY29uZHMlMjBtYXN0ZXIyJTIwNTAwMDAlMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjZndCUzQnNlbnRpbmVsJTIwcGFyYWxsZWwtc3luY3MlMjBtYXN0ZXIyJTIwNSUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyNmd0JTNCc2VudGluZWwlMjBmYWlsb3Zlci10aW1lb3V0JTIwbWFzdGVyMiUyMDQ1MDAwMCUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyMzY2NjY2NiUzQmZpbGxDb2xvciUzRCUyM2Y1ZjVmNSUzQmFsaWduJTNEbGVmdCUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQnJvdW5kZWQlM0QwJTNCZm9udENvbG9yJTNEJTIzMzMzMzMzJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi01OTclMjIlMjB5JTNEJTIyNjMwJTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIxMDElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzNCUyMiUyMHZhbHVlJTNEJTIyc2VudGluZWxTdGF0ZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTk5JTIyJTIweSUzRCUyMjE2OSUyMiUyMHdpZHRoJTNEJTIyMTMwJTIyJTIwaGVpZ2h0JTNEJTIyNDAlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzNSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjM2JTIyJTIwdGFyZ2V0JTNEJTIyMzglMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM2JTIyJTIwdmFsdWUlM0QlMjJtYXN0ZXJzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTk5JTIyJTIweSUzRCUyMjIwOSUyMiUyMHdpZHRoJTNEJTIyMTMwJTIyJTIwaGVpZ2h0JTNEJTIyMzglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzNyUyMiUyMHZhbHVlJTNEJTIyLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTk5OSUyMiUyMHklM0QlMjIyNDclMjIlMjB3aWR0aCUzRCUyMjEzMCUyMiUyMGhlaWdodCUzRCUyMjQxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzglMjIlMjB2YWx1ZSUzRCUyMmRpY3QlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTgwMCUyMiUyMHklM0QlMjIxNjguNSUyMiUyMHdpZHRoJTNEJTIyMTMwJTIyJTIwaGVpZ2h0JTNEJTIyNDAlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzOSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjQwJTIyJTIwdGFyZ2V0JTNEJTIyMiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDAlMjIlMjB2YWx1ZSUzRCUyMm1hc3RlcjElMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04MDAlMjIlMjB5JTNEJTIyMjA4LjUlMjIlMjB3aWR0aCUzRCUyMjEzMCUyMiUyMGhlaWdodCUzRCUyMjM4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDElMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwJTNCZW50cnlZJTNEMC41JTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQmZvbnRTaXplJTNENyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNDIlMjIlMjB0YXJnZXQlM0QlMjIxOCUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ0FycmF5JTIwYXMlM0QlMjJwb2ludHMlMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMi02MTMlMjIlMjB5JTNEJTIyMjY3JTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjItNjEzJTIyJTIweSUzRCUyMjU3MiUyMiUyRiUzRSUzQyUyRkFycmF5JTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDIlMjIlMjB2YWx1ZSUzRCUyMm1hc3RlcjIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04MDAlMjIlMjB5JTNEJTIyMjQ2LjUlMjIlMjB3aWR0aCUzRCUyMjEzMCUyMiUyMGhlaWdodCUzRCUyMjQxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDMlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwJTNCZW50cnlZJTNEMC41JTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQmZvbnRTaXplJTNENyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNDQlMjIlMjB0YXJnZXQlM0QlMjI0NiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDQlMjIlMjB2YWx1ZSUzRCUyMnNsYXZlcyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM0MyUyMiUyMHklM0QlMjI0MjYlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDUlMjIlMjB2YWx1ZSUzRCUyMi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzQzJTIyJTIweSUzRCUyMjQ0OSUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0NiUyMiUyMHZhbHVlJTNEJTIyZGljdCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjElMjIlMjB5JTNEJTIyMzcyJTIyJTIwd2lkdGglM0QlMjIxMzAlMjIlMjBoZWlnaHQlM0QlMjI0MCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ3JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMCUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250U2l6ZSUzRDclM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjQ4JTIyJTIwdGFyZ2V0JTNEJTIyNTMlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ4JTIyJTIwdmFsdWUlM0QlMjIxMjcuMC4wLjElMjAxMTExMSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIxJTIyJTIweSUzRCUyMjQxMiUyMiUyMHdpZHRoJTNEJTIyMTMwJTIyJTIwaGVpZ2h0JTNEJTIyMzglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0OSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udFNpemUlM0Q3JTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI1MCUyMiUyMHRhcmdldCUzRCUyMjU3JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1MCUyMiUyMHZhbHVlJTNEJTIyMTI3LjAuMC4xJTIwMjIyMjIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMSUyMiUyMHklM0QlMjI0NTAlMjIlMjB3aWR0aCUzRCUyMjEzMCUyMiUyMGhlaWdodCUzRCUyMjQxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTElMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwJTNCZW50cnlZJTNEMC41JTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQmZvbnRTaXplJTNENyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNTIlMjIlMjB0YXJnZXQlM0QlMjI2MCUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTIlMjIlMjB2YWx1ZSUzRCUyMjEyNy4wLjAuMSUyMDMzMzMzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjElMjIlMjB5JTNEJTIyNDkxJTIyJTIwd2lkdGglM0QlMjIxMzAlMjIlMjBoZWlnaHQlM0QlMjI0MSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjUzJTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmZvbnQlMjBjb2xvciUzRCUyNnF1b3QlM0IlMjMwMDAwMDAlMjZxdW90JTNCJTI2Z3QlM0JzZW50aW5lbFJlZGlzSW5zdGFuY2UlMjZsdCUzQiUyRmZvbnQlMjZndCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMzglMjIlMjB5JTNEJTIyMjM5JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjU0JTIyJTIwdmFsdWUlM0QlMjJmbGFncyVFRiVCQyU5QVNSSV9TTEFWRSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjM4JTIyJTIweSUzRCUyMjI2MiUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1NSUyMiUyMHZhbHVlJTNEJTIybmFtZSVFRiVCQyU5QSVFMiU4MCU5QzEyNy4wLjAuMSUzQTExMTExJUUyJTgwJTlEJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMzglMjIlMjB5JTNEJTIyMjg1JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjU2JTIyJTIwdmFsdWUlM0QlMjJydW5pZCVFRiVCQyU5QSUyNnF1b3QlM0I2ZGZhZ2Y3aWRmZ2QuLi5oZ3NkZyUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjIzMDglMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTclMjIlMjB2YWx1ZSUzRCUyMiUyNmx0JTNCZm9udCUyMGNvbG9yJTNEJTI2cXVvdCUzQiUyMzAwMDAwMCUyNnF1b3QlM0IlMjZndCUzQnNlbnRpbmVsUmVkaXNJbnN0YW5jZSUyNmx0JTNCJTJGZm9udCUyNmd0JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI1MzYlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTglMjIlMjB2YWx1ZSUzRCUyMmZsYWdzJUVGJUJDJTlBU1JJX1NMQVZFJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMzglMjIlMjB5JTNEJTIyNTU5JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjU5JTIyJTIwdmFsdWUlM0QlMjJuYW1lJUVGJUJDJTlBJUUyJTgwJTlDMTI3LjAuMC4xJTNBMjIyMjIlRTIlODAlOUQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI1ODIlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjAlMjIlMjB2YWx1ZSUzRCUyMiUyNmx0JTNCZm9udCUyMGNvbG9yJTNEJTI2cXVvdCUzQiUyMzAwMDAwMCUyNnF1b3QlM0IlMjZndCUzQnNlbnRpbmVsUmVkaXNJbnN0YW5jZSUyNmx0JTNCJTJGZm9udCUyNmd0JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI4NTIlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjElMjIlMjB2YWx1ZSUzRCUyMmZsYWdzJUVGJUJDJTlBU1JJX1NMQVZFJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMzglMjIlMjB5JTNEJTIyODc1JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjYyJTIyJTIwdmFsdWUlM0QlMjJuYW1lJUVGJUJDJTlBJUUyJTgwJTlDMTI3LjAuMC4xJTNBMzMzMzMlRTIlODAlOUQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI4OTglMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjMlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwJTNCZW50cnlZJTNEMC41JTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQmZvbnRTaXplJTNENyUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNjQlMjIlMjB0YXJnZXQlM0QlMjI2NiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjQlMjIlMjB2YWx1ZSUzRCUyMnNsYXZlcyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTMzMyUyMiUyMHklM0QlMjI4MTQlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjUlMjIlMjB2YWx1ZSUzRCUyMi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzMzJTIyJTIweSUzRCUyMjgzNyUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2NiUyMiUyMHZhbHVlJTNEJTIyZGljdCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMyUyMiUyMHklM0QlMjI3NTYlMjIlMjB3aWR0aCUzRCUyMjEzMCUyMiUyMGhlaWdodCUzRCUyMjQwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjclMjIlMjB2YWx1ZSUzRCUyMiVFNyU5QyU4MSVFNyU5NSVBNS4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMyUyMiUyMHklM0QlMjI3OTYlMjIlMjB3aWR0aCUzRCUyMjEzMCUyMiUyMGhlaWdodCUzRCUyMjM4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjglMjIlMjB2YWx1ZSUzRCUyMnNsYXZlX21hc3Rlcl9ob3N0JUVGJUJDJTlBJTI2cXVvdCUzQjEyNy4wLjAuMSUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjIzMzElMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjklMjIlMjB2YWx1ZSUzRCUyMnNsYXZlX21hc3Rlcl9wb3J0JUVGJUJDJTlBJUUyJTgwJTlENjM3OSVFMiU4MCU5QyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjM4JTIyJTIweSUzRCUyMjM1NCUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3MCUyMiUyMHZhbHVlJTNEJTIyc2xhdmVfbWFzdGVyX2xpbmtfc3RhdHVzJUVGJUJDJTlBJTI2bHQlM0JiciUyNmd0JTNCU0VOVElORUxfTUFTVEVSX0xJTktfU1RBVFVTX1VQJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMzglMjIlMjB5JTNEJTIyMzc3JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIzMC41JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzElMjIlMjB2YWx1ZSUzRCUyMnNsYXZlX3JlcGxfb2Zmc2V0JUVGJUJDJTlBMTE4ODclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI0MDcuNSUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3MiUyMiUyMHZhbHVlJTNEJTIyc2xhdmVfcHJpb3JpdHklRUYlQkMlOUExMDAlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI0MzAuNSUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3MyUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMzglMjIlMjB5JTNEJTIyNDUzLjUlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzQlMjIlMjB2YWx1ZSUzRCUyMnJ1bmlkJUVGJUJDJTlBJTI2cXVvdCUzQmhmaGFkODlmYWQ5ZS4uLmhnc2RnJTI2cXVvdCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjM4JTIyJTIweSUzRCUyMjYwNSUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3NSUyMiUyMHZhbHVlJTNEJTIyc2xhdmVfbWFzdGVyX2hvc3QlRUYlQkMlOUElMjZxdW90JTNCMTI3LjAuMC4xJTI2cXVvdCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjM4JTIyJTIweSUzRCUyMjYyOCUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3NiUyMiUyMHZhbHVlJTNEJTIyc2xhdmVfbWFzdGVyX3BvcnQlRUYlQkMlOUElRTIlODAlOUQ2Mzc5JUUyJTgwJTlDJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMzglMjIlMjB5JTNEJTIyNjUxJTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjc3JTIyJTIwdmFsdWUlM0QlMjJzbGF2ZV9tYXN0ZXJfbGlua19zdGF0dXMlRUYlQkMlOUElMjZsdCUzQmJyJTI2Z3QlM0JTRU5USU5FTF9NQVNURVJfTElOS19TVEFUVVNfVVAlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI2NzQlMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjMwLjUlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3OCUyMiUyMHZhbHVlJTNEJTIyc2xhdmVfcmVwbF9vZmZzZXQlRUYlQkMlOUExMTgwMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjM4JTIyJTIweSUzRCUyMjcwNC41JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjc5JTIyJTIwdmFsdWUlM0QlMjJzbGF2ZV9wcmlvcml0eSVFRiVCQyU5QTEwMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjM4JTIyJTIweSUzRCUyMjcyNy41JTIyJTIwd2lkdGglM0QlMjIyNDklMjIlMjBoZWlnaHQlM0QlMjIyMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjgwJTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI3NTAuNSUyMiUyMHdpZHRoJTNEJTIyMjQ5JTIyJTIwaGVpZ2h0JTNEJTIyMjMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4MSUyMiUyMHZhbHVlJTNEJTIyJUU3JTlDJTgxJUU3JTk1JUE1Li4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzOCUyMiUyMHklM0QlMjI5MjElMjIlMjB3aWR0aCUzRCUyMjI0OSUyMiUyMGhlaWdodCUzRCUyMjIzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n\n\n### 向主节点和从节点发送频道信息\n\n在默认情况下，Sentinel每隔2秒中，使用命令连接向所有被监视的主节点和从节点发送以下格式的命令\n\n```shell\nPUBLISH __sentinel__:hello \"<s_ip>,<s_port>,<s_runid>,<s_epoch>,<m_name>,<m_ip>,<m_port>,<m_epoch>\"\n```\n\n这个命令表示Sentinel向hello频道发送一个消息，消息内容包括\n\n- Sentinel服务的信息\n  - s_ip\n  - s_port\n  - s_runid\n  - s_epoch\n- Master节点的信息\n  - m_name\n  - m_ip\n  - m_port\n  - m_epoch\n\n\n\n### 接收来自主节点和从节点的频道信息\n\nSentinel服务器会启动两个连接，一个命令连接，一个订阅连接\n\n其中订阅连接会一直订阅 `__sentinel__:hello`这个频道的消息\n\n对于每个与Sentinel连接的节点：\n\n- Sentinel 通过命令连接向 `__sentinel__:hello`频道发送信息\n- Sentinel 通过订阅连接从 `__sentinel__:hello`频道接收信息\n\n由于Sentinel是向同一个频道发送的消息，所以在这个频道内的所有Sentinel都可以收到这个消息，然后它会进行以下判断\n\n<img src=\"Redis的Sentinel.assets/image-20230525102049894.png\" alt=\"image-20230525102049894\" style=\"zoom:60%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNSUyMiUyMHRhcmdldCUzRCUyMjglMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMlMjIlMjB2YWx1ZSUzRCUyMiVFNiU5OCVBRiUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjIlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjAuMzc3NCUyMiUyMHklM0QlMjIxNCUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIwYXMlM0QlMjJvZmZzZXQlMjIlMkYlM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjUlMjIlMjB0YXJnZXQlM0QlMjIxMCUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNSUyMiUyMHZhbHVlJTNEJTIyJUU1JTg4JUE0JUU2JTk2JUFEJUU4JUJGJTk5JUU0JUI4JUFBJUU2JUI2JTg4JUU2JTgxJUFGJUU2JTk4JUFGJUU1JTkwJUE2JUU2JTk4JUFGJUU4JTg3JUFBJUU1JUI3JUIxJUU1JThGJTkxJUU3JTlBJTg0JTIyJTIwc3R5bGUlM0QlMjJyaG9tYnVzJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi02NTYlMjIlMjB5JTNEJTIyMjk5JTIyJTIwd2lkdGglM0QlMjIyMzAlMjIlMjBoZWlnaHQlM0QlMjI1OSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjYlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNyUyMiUyMHRhcmdldCUzRCUyMjUlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjclMjIlMjB2YWx1ZSUzRCUyMiVFNiU4RSVBNSVFNiU5NCVCNiVFNSU4OCVCMCVFNCVCOCU4MCVFNCVCOCVBQSVFNiVCNiU4OCVFNiU4MSVBRiUyMiUyMHN0eWxlJTNEJTIyZWxsaXBzZSUzQnNoYXBlJTNEY2xvdWQlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTYwMSUyMiUyMHklM0QlMjIxNzUlMjIlMjB3aWR0aCUzRCUyMjEyMCUyMiUyMGhlaWdodCUzRCUyMjgwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOCUyMiUyMHZhbHVlJTNEJTIyJUU3JUJCJTkzJUU2JTlEJTlGJTIyJTIwc3R5bGUlM0QlMjJlbGxpcHNlJTNCc2hhcGUlM0Rkb3VibGVFbGxpcHNlJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFzcGVjdCUzRGZpeGVkJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTc2MyUyMiUyMHklM0QlMjI0MDUlMjIlMjB3aWR0aCUzRCUyMjU2JTIyJTIwaGVpZ2h0JTNEJTIyNTYlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjEwJTIyJTIwdGFyZ2V0JTNEJTIyMTIlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwdmFsdWUlM0QlMjIlRTYlOUIlQjQlRTYlOTYlQjBTZW50aW5lbHMlRTUlQUQlOTclRTUlODUlQjglMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QxJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi00MDIlMjIlMjB5JTNEJTIyNDEyLjUlMjIlMjB3aWR0aCUzRCUyMjEyMCUyMiUyMGhlaWdodCUzRCUyMjQxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTElMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTIlMjIlMjB0YXJnZXQlM0QlMjIxMyUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTIlMjIlMjB2YWx1ZSUzRCUyMiVFOSU4MCU5QSVFOCVCRiU4NyVFNSU4NSVCNiVFNCVCOCVBRCVFNyU5QSU4NG1hc3RlciVFNCVCRiVBMSVFNiU4MSVBRiVFRiVCQyU4QyVFNyU4NCVCNiVFNSU5MCU4RSVFNSU5QyVBOCVFOCU4NyVBQSVFNSVCNyVCMSVFNyU5QSU4NGRpY3QlRTQlQjglQUQlRTYlOUYlQTUlRTUlODglQjAlRTUlQUYlQjklRTUlQkElOTQlRTclOUElODRtYXN0ZXIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QxJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi00MDIlMjIlMjB5JTNEJTIyNDg5JTIyJTIwd2lkdGglM0QlMjIxMjAlMjIlMjBoZWlnaHQlM0QlMjI1MyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEzJTIyJTIwdmFsdWUlM0QlMjIlRTYlOUIlQjQlRTYlOTYlQjAlRTglQUYlQTVNYXN0ZXIlRTUlQUYlQjklRTUlQkElOTQlRTclOUElODRpbnN0YW5jZSVFNSVBRSU5RSVFNCVCRSU4QiVFNyU5QSU4NFNlbnRpbmVscyVFNSVCMSU5RSVFNiU4MCVBNyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQwMiUyMiUyMHklM0QlMjI1NzElMjIlMjB3aWR0aCUzRCUyMjEyMCUyMiUyMGhlaWdodCUzRCUyMjUzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n举例：当接受到如下消息的时候：\n\n```sh\n1) \"message\"\n2) \"__sentinel__:hello\"\n3) \"127.0.0.1,26379,e955b4c85598ef5b5f055bc7ebfd5e828dbed4fa,0,mymaster,127.0.0.1,6379,0\"\n1) \"message\"\n2) \"__sentinel__:hello\"\n3) \"127.0.0.1,26381,6241bf5cf9bfc8ecd15d6eb6cc3185edfbb24903,0,mymaster,127.0.0.1,6379,0\"\n1) \"message\"\n2) \"__sentinel__:hello\"\n3) \"127.0.0.1,26380,a9b22fb79ae8fad28e4ea77d20398f77f6b89377,0,mymaster,127.0.0.1,6379,0\"\n```\n\n会更新Sentinel字典如下\n\n<img src=\"Redis的Sentinel.assets/image-20230525102854209.png\" alt=\"image-20230525102854209\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n\n\n### 创建连向其他Sentinel的命令连接\n\n通过上面的 hello 频道，当前Sentinel可以发现其他的Sentinel，当当前Sentinel发现了其他的Sentinel的时候，就会创建一个连接其他Sentinel的命令连接\n\n<img src=\"Redis的Sentinel.assets/image-20230525103359595.png\" alt=\"image-20230525103359595\" style=\"zoom: 67%;\" />\n\n```base64\\n```\n\nSentinel与Sentinel之间的命令连接的作用主要是：进行信息交换，对Sentinel实现主观下线检测和客观下线检测，这两种检测都会使用Sentinel之间的命令连接来进行通信。\n\n为什么不创建订阅连接\n\n因为不需要。首先要明白为什么要有订阅连接，是因为Sentinel通过订阅连接订阅 hello 消息，通过这个消息可以发现其他的 Sentinel 服务，但是在已知的Sentinel服务之间，就不需要在订阅了，直接使用命令连接就可以啦。\n\n\n\n\n\n### 总结\n\n通过以上的步骤：\n\n- Sentinel的启动\n- Sentinel服务的初始化\n- 初始化了Sentinel的内存结构\n- 通过配置文件，Sentinel就知道要监视哪些主节点\n- 然后创建Sentinel的主节点之间的网络连接\n- 通过网络连接，就获取到主节点信息\n- 通过主节点返回的信息获取到主节点下所有的从节点信息\n- 创建Sentinel与从节点之间的网络连接\n- 通过网络网点，获取从节点的详细信息\n- 向主节点和从节点发送频道信息\n- Sentinel通过接收来自其他Sentinel发送的频道信息，可以获取到监听当前主节点的有哪些Sentinel\n- 然后Sentinel与Sentinel之间创建命令连接\n\n之后Sentinel与节点之间的连接网络就已经全部完成了。\n\n下面就开始工作了。\n\n\n\n## 察觉异常阶段\n\n\n\n### 检测主观下线状态\n\n\n\n每隔1S中，每一个Sentinel都会通过命令连接，向它所连接的其他服务（主节点，从节点，其他Sentinel节点）发送 PING 命令\n\n在任意一个节点接收到 PING 命令，会返回两种信息\n\n- 有效信息：返回 PONG， 返回 LOADING， 返回 MASTERDOWN\n- 无效信息：除了上面3个的其他信息\n\n\n\n**Sentinel如何判断主节点是否下线**\n\n是通过配置文件中配置的`sentinel down-after-milliseconds master1 30000`\n\n表示：当在30000毫秒（30秒）内，Sentinel是1秒钟检测1次，相当于检测了30次，这个主节点都没有给Sentinel响应\n\n则当前Sentinel就主观的判断这个主节点已经下线了。\n\n\n\n**不同的Sentinel对同一个主节点的判定时间可能不同**\n\n因为不同的Sentinel服务使用的是不同的配置文件配置的。\n\n\n\n**同一个Sentinel对不同的主节点的判定时间可能不同**\n\n因为在一个Sentinel的配置文件中，可以配置多个主节点，每个主节点都不一样。比如下面这个配置\n\n- 当前Sentinel服务对master1的判定是30000毫秒，对master2的判定是50000毫秒\n\n```xml-dtd\n#####################\n# master1 configure #\n#####################\nsentinel monitor master1 127.0.0.1 6379 2\nsentinel down-after-milliseconds master1 30000\nsentinel parallel-syncs master1 1\nsentinel failover-timeout master1 900000\n#####################\n# master2 configure #\n#####################\nsentinel monitor master2 127.0.0.1 12345 5\nsentinel down-after-milliseconds master2 50000\nsentinel parallel-syncs master2 5\nsentinel failover-timeout master2 45000\n```\n\n\n\n**打上主观下线的标记**\n\n当前Sentinel判定某一个主节点下线之后，会修改它的数据内存结构，将这个主节点的标记，标为：SRI_S_DOWN\n\nSRI_S_DOWN：Sentinel Redis Instance Subject Down（Sentinel Redis 实例 主观 下线）\n\n如下图，假设当前Sentinel判定master2发生了宕机\n\n<img src=\"Redis的Sentinel.assets/image-20230525112736223.png\" alt=\"image-20230525112736223\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n### 检测客观下线状态\n\n\n\n当Sentinel将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线了，它会向同样监视这一主服务器的其他Sentinel进行询问，看它们是否也认为主服务器已经进入了下线状态（可以是主观下线或者客观下线）。\n\n当Sentinel从其他Sentinel那里接收到**足够数量的已下线判断**之后，Sentinel就会将从服务器判定为客观下线，并对主服务器执行故障转移操作。\n\n\n\n**向其他服务器询问该主节点是否下线**\n\n- is-master-down-by-addr\n\n```sh\nSENTINEL is-master-down-by-addr <ip> <port> <current_epoch> <runid>\n```\n\n\n\n**其他Sentinel接收到命令的时候，返回响应**\n\n```sh\n1) <down_state>\n2) <leader_runid>\n3) <leader_epoch>\n```\n\n\n\n**当前Sentinel判断是否要可观下线**\n\n当前Sentinel接收到其他Sentinel节点的响应，通过配置文件中`quorum`的配置，判定是否下线。\n\n\n\n比如下面的配置文件\n\n- sentinel monitor master1 127.0.0.1 6379 2 最后的数字2 就表示至少有2个sentinel说你下线了，才会判定下线。\n- sentinel monitor master2 127.0.0.1 12345 5 最后的数字5，则表示最少有5个。\n\n```xml-dtd\n#####################\n# master1 configure #\n#####################\nsentinel monitor master1 127.0.0.1 6379 2\nsentinel down-after-milliseconds master1 30000\nsentinel parallel-syncs master1 1\nsentinel failover-timeout master1 900000\n#####################\n# master2 configure #\n#####################\nsentinel monitor master2 127.0.0.1 12345 5\nsentinel down-after-milliseconds master2 50000\nsentinel parallel-syncs master2 5\nsentinel failover-timeout master2 45000\n```\n\n\n\n不同的Sentinel针对同一个主节点的判定条件可能不同。\n\n同一个Sentinel针对不同的主节点的判定条件可能不同。\n\n\n\n**流程图**\n\n```mermaid\nsequenceDiagram\nSentinel01->>Sentinel01: 发现主节点01下线了\nSentinel01->>Sentinel02: SENTINEL is-master-down-by-addr <ip> <port> <current_epoch> <runid>\nSentinel02->>Sentinel01: 1) <down_state><br/>2) <leader_runid><br/>3) <leader_epoch>\nSentinel01->>Sentinel01: down_state==1表示Sentinel02也认为主节点01下线了\nSentinel01->>Sentinel01: 修改主节点01的标记为：SRI_O_DOWN（客观下线）\nSentinel01->>Sentinel01: down_state != 1,表示Sentinel02不认为主节点01下线了\nSentinel01->>Sentinel01: 修改主节点01的标记为：SRI_MASTER(恢复正常)\nSentinel01->>Sentinel01: 等待下一次检测节点01\n\n```\n\n\n\n\n\n**打上客观下线的标记**\n\n当多个Sentinel都认为这个主节点下线之后，Sentinel就会修改它的内存结构，对这个主节点再次添加一个标记：SRI_O_DOWN\n\nSRI_O_DOWN：Sentinel Redis Instance Objective Down（Sentinel Redis 实例 客观 下线）\n\n<img src=\"Redis的Sentinel.assets/image-20230525140436615.png\" alt=\"image-20230525140436615\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n\n\n\n\n### 总结\n\n这一个阶段是Redis异常察觉的阶段，简单的说就是：\n\n当Sentinel监听一个主节点的时候，在规定时间内，主节点没有响应，Sentinel会认为这个主节点已经下线了。主观下线\n\n然后这个Sentinel会向别的Sentinel确认是否下线\n\n超过一定数据量的Sentinel认为这个主节点下线了，则标记为：客观下线。准备进行故障转移。\n\n否则这个主节点就没有下线，标记为：正常，等待下一次检测。\n\n\n\n\n\n\n\n## 主从切换阶段\n\n当一个主服务器被判断为客观下线时，监视这个下线主服务器的各个Sentinel会进行协商，选举出一个领头Sentinel，并由领头Sentinel对下线主服务器执行故障转移操作\n\n\n\n### 选举Sentinel Leader\n\n选举规则\n\n- 1、每个Sentinel都有被选举为Leader的机会\n- 2、不管选举是否成功，纪元都要+1\n- 3、在一轮选举中，每一个Sentinel都有一次投票的机会，投票之后不允许变更\n- 4、第一个标记主节点客观下线Sentinel（源Sentinel）会要求别的Sentinel（目标Sentinel）投自己一票\n- 5、当一个目标Sentinel收到这个要求，会投源Sentinel一票，会带上`源Sentinel的runid`和`纪元`，表示我在这一轮（`纪元`）中投这个Sentinel（`源Sentinel的runid`）一票，投票成功之后，这个目标Sentinel就会拒绝投票给别的Sentinel\n- 6、源Sentinel得到目标Sentinel的票之后，会比较`源Sentinel的runid`是不是自己，`纪元`对不对的上。如果全匹配，自己的票数+1；\n- 7、等大家投票结束，如果有某个Sentinel被得到了半数以上的票，则这个Sentinel就是Ledaer\n- 8、如果在一定时间内，没有选出Ledaer，则等下一轮重新投票，直到选出Leader为止。\n\n\n\n第4步的命令：\n\n- 要求别的Sentinel投 <IP：127.0.0.1> <端口：6379> <当前纪元：0> <runID ： e955b4c85598ef5b5f055bc7ebfd5e828dbed4fa> 一票\n\n```sh\nSENTINEL is-master-down-by-addr 127.0.0.1 6379 0 e955b4c85598ef5b5f055bc7ebfd5e828dbed4fa\n```\n\n\n\n第5步的命令：\n\n- 目标Sentinel投了源Sentinel： 1 表示我投你； e955b4c85598ef5b5f055bc7ebfd5e828dbed4fa 表示源Sentinel的runid ； 0 表示源Sentinel的纪元\n\n```sh\n1) 1\n2) e955b4c85598ef5b5f055bc7ebfd5e828dbed4fa\n3) 0\n```\n\n\n\n\n\n### 故障转移\n\n\n\n经过上一步，选出了Sentinel的Leader。\n\nLeader会开始执行故障转移的操作。\n\n\n\n故障转移的操作，大致分为三个步骤\n\n1、选出新的主节点\n\n2、将别的从节点修改为：追随新的主节点\n\n3、对老的主节点设置，当它复活的时候，追随新的主节点\n\n\n\n**选出新的主节点**\n\n怎么选呢？遵循两个原则\n\n- 1、在所有存活的从节点中，找到距离最后一次检测最近的从节点。说明里面数据是最新的，可能是一个或多个\n- 2、如果是多个，则根据这些从节点中的复制偏移量再次选择。选最新的。\n\n\n\n**将这个从节点设置为主节点**\n\n由Sentinel执行 `replicaof on one` 命令，将这个从节点设为主节点\n\n\n\n**对别的从节点设置追随新的主节点**\n\n对别的从节点执行 `replicaof 新的主节点ip 新的主节点端口`\n\n\n\n**对老的主节点设置追随新的主节点**\n\n由于老的主节点已经下线，无法对它执行`replicaof`命令。\n\n所以Sentinel的做法是：将这部分信息写入老的主节点所在的内存结构中（SentinelRedisInstance）\n\n等老的主节点重新上线之后，会执行`replicaof`，追随新的主节点\n\n\n\n### 总结\n\n故障转移，比较简单。\n\n有一个点，提一下：故障转移完成之后，由于从节点指向了新的主节点，所以主从复制会重新开启一次全量同步。\n\n因为主从同步：会校验 runid 和 offset\n\n```sh\n# 首次同步\nPSYNC ? -1\n# 增量同步\nPSYNC runid 120\n# 命令广播阶段\n...\n```\n\n\n\n","tags":["sentinel","redis"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redis的cluster","url":"/note/JAVA/数据库/REDIS/Redis的cluster/","content":"\n![image-20230526174007842](Redis的cluster.assets/image-20230526174007842.png)\n\n\n\n都有Sentinel模式了，为什么还要有集群模式？\n\n是因为Sentinel是主从架构，主从架构只是对主提供了高可用，但是对外提供服务的只有主这一个Redis服务。无法解决单点的容量问题。\n\n所以有了分布式架构的Redis集群模式，它有以下特性\n\n- 多节点分布式架构\n- 数据分散均衡\n- 故障转移高可用\n- 可水平扩展节点数量\n\n\n\n下图是一个简单的Redis集群模型\n\n- 这个集群中有三个Redis节点，三个节点之间都有连接，可以互相通信\n- 每一个节点都有一个主从结构，当主故障之后，从节点会用于故障转移，保证集群的高可用\n- Client可以连接集群中的任意一个节点，进行业务操作\n\n![image-20230526104920461](Redis的cluster.assets/image-20230526104920461.png)\n\n```base64\\n```\n\n\n\n本文我们来看一看：Redis集群模式的具体实现\n\n\n\n# 集群启动阶段\n\n\n\n## 启动集群模式\n\n\n\n首先使用集群模式启动三个独立的节点\n\n<img src=\"Redis的cluster.assets/image-20230526113429539.png\" alt=\"image-20230526113429539\" style=\"zoom:80%;\" />\n\n\n\n\n\n按照集群方式启动3个节点，端口分别是：7001，7002， 7003\n\n\n\n启动之后，这三个节点是相互独立的集群。\n\n\n\n那要怎么样才能让这些独立的集群节点组成一个集群呢？\n\n- 在当前节点执行下面的命令\n\n```sh\nCLUSTER MEET <ip> <port>\n```\n\n- 会让当前节点主动与目标`<ip><port>`节点进行握手连接\n\n举个例子，比如我们连接7001，然后将7002和7003加入当前集群\n\n```sh\n# 连接7001，目前集群中只有7001自己\n$ redis-cli -c -p 7001\n127.0.0.1:7001> CLUSTER NODES\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected\n\n# 7001 让 7002 加入当前集群\n127.0.0.1:7001> CLUSTER MEET 127.0.0.1 7002\nOK\n\n# 加入成功之后，集群中就有两个节点了\n127.0.0.1:7001> CLUSTER NODES\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7002 master - 0 1388204746210 0 connected\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected\n\n# 把7003也加入集群中来\n127.0.0.1:7001> CLUSTER MEET 127.0.0.1 7003\nOK\n\n# 加入成功之后，集群中就有三个节点了\n127.0.0.1:7001> CLUSTER NODES\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7002 master - 0 1388204848376 0 connected\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7003 master - 0 1388204847977 0 connected\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected\n```\n\n\n\n关于 CLUSTER MEET 命令，这里就不在详细的介绍了，关于启动Redis集群的这一部分，了解就好了。\n\nRedis提供了简单的脚本，在utils下面有一个create_cluster的脚本，可以快速的创建Redis集群，根本不需要这么麻烦。\n\n而且，在公司中，也不会由开发维护Redis集群，所以这部分了解一下就好啦。\n\n\n\n## 集群模式的内存结构\n\n\n\n集群中的每一个节点都保存了一个clusterState结构\n\n\n\nclusterState结构，这个结构记录了在当前节点的视角下，集群目前所处的状态，例如集群是在线还是下线，集群包含多少个节点，集群当前的配置纪元\n\n```c\ntypedef struct clusterState {\n  // 指向当前节点的指针\n  clusterNode *myself;\n  // 集群当前的配置纪元，用于实现故障转移\n  uint64_t currentEpoch;\n  // 集群当前的状态：是在线还是下线\n  int state;\n  // 集群中至少处理着一个槽的节点的数量\n  int size;\n  // 集群节点名单（包括myself节点）\n  // 字典的键为节点的名字，字典的值为节点对应的clusterNode结构\n  dict *nodes;\n  // ...\n  // 记录当前集群中槽指派的信息。 这是一个长度为16384的指针数组，指向节点\n  clusterNode *slots[16384];\n  // ...\n} clusterState;\n```\n\n\n\n每一个节点都会使用clusterNode记录自己的状态和信息，同时会为集群中别的节点也创建clusterNode，用于保存别的节点的状态和信息。\n\n```c\nstruct clusterNode {\n  // 创建节点的时间\n  mstime_t ctime;\n  // 节点的名字，由40个十六进制字符组成\n  // 例如68eef66df23420a5862208ef5b1a7005b806f2ff\n  char name[REDIS_CLUSTER_NAMELEN];\n  // 节点标识\n  // 使用各种不同的标识值记录节点的角色（比如主节点或者从节点），\n  // 以及节点目前所处的状态（比如在线或者下线）。\n  int flags;\n  // 节点当前的配置纪元，用于实现故障转移\n  uint64_t configEpoch;\n  // 节点的IP地址\n  char ip[REDIS_IP_STR_LEN];\n  // 节点的端口号\n  int port;\n  // 保存连接节点所需的有关信息\n  clusterLink *link;\n  // ...\n  // 记录当前节点被指派了哪些槽\n  unsigned char slots[16384/8];\n  // 记录当前节点被指派的槽数量\n  int numslots;\n  // ...\n\n};\n```\n\n\n\nclusterNode中包含link属性，link属性是一个clusterLink结构，如下\n\n```c\ntypedef struct clusterLink {\n  // 连接的创建时间\n  mstime_t ctime;\n  // TCP 套接字描述符\n  int fd;\n  // 输出缓冲区，保存着等待发送给其他节点的消息（message）。\n  sds sndbuf;\n  // 输入缓冲区，保存着从其他节点接收到的消息。\n  sds rcvbuf;\n  // 与这个连接相关联的节点，如果没有的话就为NULL \n  struct clusterNode *node;\n} clusterLink;\n```\n\n\n\n我们以7001,7002,7003三个节点为例，描述一下集群中的内存结构\n\n<img src=\"Redis的cluster.assets/Redis集群内存结构.jpg\" alt=\"Redis集群内存结构\" style=\"zoom:50%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkNWU4ZDQlM0JzdHJva2VDb2xvciUzRCUyMzgyYjM2NiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNjU1JTIyJTIweSUzRCUyMi00NyUyMiUyMHdpZHRoJTNEJTIyMzA4JTIyJTIwaGVpZ2h0JTNEJTIyMTc2JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDElM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjQlMjIlMjB0YXJnZXQlM0QlMjIyMyUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNCUyMiUyMHZhbHVlJTNEJTIyUmVkaXMtMSVFRiVCQyU5QTcwMDElMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QxJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi02MzIlMjIlMjB5JTNEJTIyLTMwJTIyJTIwd2lkdGglM0QlMjI5NSUyMiUyMGhlaWdodCUzRCUyMjI3JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjYlMjIlMjB0YXJnZXQlM0QlMjI2NSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNiUyMiUyMHZhbHVlJTNEJTIyUmVkaXMtMiVFRiVCQyU5QTcwMDIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QxJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi00NjYlMjIlMjB5JTNEJTIyLTMwJTIyJTIwd2lkdGglM0QlMjI5NSUyMiUyMGhlaWdodCUzRCUyMjI3JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0JleGl0WCUzRDAlM0JleGl0WSUzRDAuNSUzQmV4aXREeCUzRDAlM0JleGl0RHklM0QwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI4JTIyJTIwdGFyZ2V0JTNEJTIyNjAlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjglMjIlMjB2YWx1ZSUzRCUyMlJlZGlzLTMlRUYlQkMlOUE3MDAzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNTQ0JTIyJTIweSUzRCUyMjM1JTIyJTIwd2lkdGglM0QlMjI5NSUyMiUyMGhlaWdodCUzRCUyMjI3JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIxMiUyMiUyMHRhcmdldCUzRCUyMjQlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0JkYXNoZWQlM0QxJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIxMiUyMiUyMHRhcmdldCUzRCUyMjYlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjExJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0JkYXNoZWQlM0QxJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIxMiUyMiUyMHRhcmdldCUzRCUyMjglMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEyJTIyJTIwdmFsdWUlM0QlMjJDbGllbnQlMjIlMjBzdHlsZSUzRCUyMmVsbGlwc2UlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTUzNyUyMiUyMHklM0QlMjItMTM2JTIyJTIwd2lkdGglM0QlMjI4MSUyMiUyMGhlaWdodCUzRCUyMjM4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTMlMjIlMjB2YWx1ZSUzRCUyMiUyNmx0JTNCZm9udCUyMHN0eWxlJTNEJTI2cXVvdCUzQmZvbnQtc2l6ZSUzQSUyMDdweCUyNnF1b3QlM0IlMjZndCUzQiVFNSVBRSVBMiVFNiU4OCVCNyVFNyVBQiVBRiVFNSU4RiVBRiVFNCVCQiVBNSVFOCVCRiU5RSVFNiU4RSVBNSVFOSU5QiU4NiVFNyVCRSVBNCVFNCVCOCVBRCVFNCVCQiVCQiVFNiU4NCU4RiVFNCVCOCU4MCVFNCVCOCVBQSVFOCU4QSU4MiVFNyU4MiVCOSUyNmx0JTNCJTJGZm9udCUyNmd0JTNCJTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyM2Q3OWIwMCUzQmZpbGxDb2xvciUzRCUyM2ZmZTZjYyUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTU1NiUyMiUyMHklM0QlMjItODklMjIlMjB3aWR0aCUzRCUyMjExNC43NSUyMiUyMGhlaWdodCUzRCUyMjE2JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTQlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTYlMjIlMjB0YXJnZXQlM0QlMjI0JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxNSUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJUU0JUJCJThFJTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyMTQlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0wLjI4MzElMjIlMjB5JTNEJTIyLTMlMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTYlMjIlMjB2YWx1ZSUzRCUyMlJlZGlzLTElMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QxJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCZGFzaGVkJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNjUwJTIyJTIweSUzRCUyMjMwJTIyJTIwd2lkdGglM0QlMjI1NyUyMiUyMGhlaWdodCUzRCUyMjIyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTclMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTklMjIlMjB0YXJnZXQlM0QlMjI4JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxOCUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJUU0JUJCJThFJTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyMTclMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjAuNDM5MyUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIweSUzRCUyMjglMjIlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE5JTIyJTIwdmFsdWUlM0QlMjJSZWRpcy0zJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQmRhc2hlZCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTUyNSUyMiUyMHklM0QlMjI5NyUyMiUyMHdpZHRoJTNEJTIyNTclMjIlMjBoZWlnaHQlM0QlMjIyMiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIwJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMjIlMjIlMjB0YXJnZXQlM0QlMjI2JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyMSUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJUU0JUJCJThFJTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyMjAlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0wLjcyNSUyMiUyMHklM0QlMjIxJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTglMjIlMjB5JTNEJTIyLTklMjIlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIyJTIyJTIwdmFsdWUlM0QlMjJSZWRpcy0yJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQmRhc2hlZCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQxNSUyMiUyMHklM0QlMjI0NiUyMiUyMHdpZHRoJTNEJTIyNTclMjIlMjBoZWlnaHQlM0QlMjIyMiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIzJTIyJTIwdmFsdWUlM0QlMjJjbHVzdGVyU3RhdGUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTk2NiUyMiUyMHklM0QlMjIxMjAlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjQlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMjUlMjIlMjB0YXJnZXQlM0QlMjIzOSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjUlMjIlMjB2YWx1ZSUzRCUyMm15c2VsZiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTk2NiUyMiUyMHklM0QlMjIxMzglMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjYlMjIlMjB2YWx1ZSUzRCUyMmN1cnJlbnRFcG9jaCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTk2NiUyMiUyMHklM0QlMjIxNTYlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjclMjIlMjB2YWx1ZSUzRCUyMnN0YXRlJTI2bHQlM0JiciUyNmd0JTNCUkVESVNfQ0xVU1RFUl9GQUlMJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTY2JTIyJTIweSUzRCUyMjE3NCUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMzMlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyOCUyMiUyMHZhbHVlJTNEJTIyc2l6ZSVFRiVCQyU5QTAlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi05NjYlMjIlMjB5JTNEJTIyMjA3JTIyJTIwd2lkdGglM0QlMjIxMzclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI5JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMCUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQmV4aXRYJTNEMSUzQmV4aXRZJTNEMC41JTNCZXhpdER4JTNEMCUzQmV4aXREeSUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjMwJTIyJTIwdGFyZ2V0JTNEJTIyMzIlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMwJTIyJTIwdmFsdWUlM0QlMjJub2RlcyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTk2NiUyMiUyMHklM0QlMjIyMjUlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzElMjIlMjB2YWx1ZSUzRCUyMi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTY2JTIyJTIweSUzRCUyMjI0MyUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzMiUyMiUyMHZhbHVlJTNEJTIyZGljdCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODUzJTIyJTIweSUzRCUyMjMwNyUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzMyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAuNSUzQmVudHJ5WSUzRDAlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjM0JTIyJTIwdGFyZ2V0JTNEJTIyMzklMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM0JTIyJTIwdmFsdWUlM0QlMjIlMjZxdW90JTNCMWpkYWtzai4uLnNkYXMlMjZxdW90JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODUzJTIyJTIweSUzRCUyMjMyNSUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzNSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAuNSUzQmVudHJ5WSUzRDAlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjM2JTIyJTIwdGFyZ2V0JTNEJTIyNDYlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM2JTIyJTIwdmFsdWUlM0QlMjIlMjZxdW90JTNCMmpmYWkuLi5zZGthc2QlMjZxdW90JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODUzJTIyJTIweSUzRCUyMjM0MyUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzNyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAuNSUzQmVudHJ5WSUzRDAlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjM4JTIyJTIwdGFyZ2V0JTNEJTIyNTMlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM4JTIyJTIwdmFsdWUlM0QlMjIlMjZxdW90JTNCM2pkamFzdW5hZC4ucyUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04NTMlMjIlMjB5JTNEJTIyMzYxJTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM5JTIyJTIwdmFsdWUlM0QlMjJjbHVzdGVyTm9kZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzE2JTIyJTIweSUzRCUyMjQzMiUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0MCUyMiUyMHZhbHVlJTNEJTIybmFtZSUyNmx0JTNCYnIlMjZndCUzQiUyNnF1b3QlM0IxamRha3NqLi4uc2RhcyUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MTYlMjIlMjB5JTNEJTIyNDUwJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQxJTIyJTIwdmFsdWUlM0QlMjJmbGFncyUyNmx0JTNCYnIlMjZndCUzQlJFRElTX05PREVfTUFTVEVSJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzE2JTIyJTIweSUzRCUyMjQ4MSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0MiUyMiUyMHZhbHVlJTNEJTIyY29uZmlnRXBvY2glMjZsdCUzQmJyJTI2Z3QlM0IwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzE2JTIyJTIweSUzRCUyMjUxMiUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0MyUyMiUyMHZhbHVlJTNEJTIyaXAlMjZsdCUzQmJyJTI2Z3QlM0IlMjZxdW90JTNCMTI3LjAuMC4xJTI2cXVvdCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTcxNiUyMiUyMHklM0QlMjI1NDMlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDQlMjIlMjB2YWx1ZSUzRCUyMnBvcnQlMjZsdCUzQmJyJTI2Z3QlM0I3MDAxJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzE2JTIyJTIweSUzRCUyMjU3NCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0NSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzE2JTIyJTIweSUzRCUyMjYwNSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0NiUyMiUyMHZhbHVlJTNEJTIyY2x1c3Rlck5vZGUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ4NSUyMiUyMHklM0QlMjI0MzIlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDclMjIlMjB2YWx1ZSUzRCUyMm5hbWUlMjZsdCUzQmJyJTI2Z3QlM0IlMjZxdW90JTNCMmpmYWkuLi5zZGthc2QlMjZxdW90JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDg1JTIyJTIweSUzRCUyMjQ1MCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0OCUyMiUyMHZhbHVlJTNEJTIyZmxhZ3MlMjZsdCUzQmJyJTI2Z3QlM0JSRURJU19OT0RFX01BU1RFUiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ4NSUyMiUyMHklM0QlMjI0ODElMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDklMjIlMjB2YWx1ZSUzRCUyMmNvbmZpZ0Vwb2NoJTI2bHQlM0JiciUyNmd0JTNCMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ4NSUyMiUyMHklM0QlMjI1MTIlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTAlMjIlMjB2YWx1ZSUzRCUyMmlwJTI2bHQlM0JiciUyNmd0JTNCJTI2cXVvdCUzQjEyNy4wLjAuMSUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi00ODUlMjIlMjB5JTNEJTIyNTQzJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjUxJTIyJTIwdmFsdWUlM0QlMjJwb3J0JTI2bHQlM0JiciUyNmd0JTNCNzAwMiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ4NSUyMiUyMHklM0QlMjI1NzQlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTIlMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ4NSUyMiUyMHklM0QlMjI2MDUlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTMlMjIlMjB2YWx1ZSUzRCUyMmNsdXN0ZXJOb2RlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMjAlMjIlMjB5JTNEJTIyNDMyJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjU0JTIyJTIwdmFsdWUlM0QlMjJuYW1lJTI2bHQlM0JiciUyNmd0JTNCJTI2cXVvdCUzQjNqZGphc3VuYWQuLnMlMjZxdW90JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjIwJTIyJTIweSUzRCUyMjQ1MCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1NSUyMiUyMHZhbHVlJTNEJTIyZmxhZ3MlMjZsdCUzQmJyJTI2Z3QlM0JSRURJU19OT0RFX01BU1RFUiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIyMCUyMiUyMHklM0QlMjI0ODElMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTYlMjIlMjB2YWx1ZSUzRCUyMmNvbmZpZ0Vwb2NoJTI2bHQlM0JiciUyNmd0JTNCMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIyMCUyMiUyMHklM0QlMjI1MTIlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTclMjIlMjB2YWx1ZSUzRCUyMmlwJTI2bHQlM0JiciUyNmd0JTNCJTI2cXVvdCUzQjEyNy4wLjAuMSUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMjAlMjIlMjB5JTNEJTIyNTQzJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjU4JTIyJTIwdmFsdWUlM0QlMjJwb3J0JTI2bHQlM0JiciUyNmd0JTNCNzAwMyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIyMCUyMiUyMHklM0QlMjI1NzQlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTklMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIyMCUyMiUyMHklM0QlMjI2MDUlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjAlMjIlMjB2YWx1ZSUzRCUyMmNsdXN0ZXJTdGF0ZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNTcwJTIyJTIweSUzRCUyMjE1NiUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2MSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI2MiUyMiUyMHRhcmdldCUzRCUyMjUzJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2MiUyMiUyMHZhbHVlJTNEJTIybXlzZWxmJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNTcwJTIyJTIweSUzRCUyMjE3NCUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2MyUyMiUyMHZhbHVlJTNEJTIyZGljdCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNTcwJTIyJTIweSUzRCUyMjIzNCUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2NCUyMiUyMHZhbHVlJTNEJTIyJUU3JTlDJTgxJUU3JTk1JUE1Li4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNTcwJTIyJTIweSUzRCUyMjI1MiUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2NSUyMiUyMHZhbHVlJTNEJTIyY2x1c3RlclN0YXRlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xNjAlMjIlMjB5JTNEJTIyNTIlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjYlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNjclMjIlMjB0YXJnZXQlM0QlMjI0NiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjclMjIlMjB2YWx1ZSUzRCUyMm15c2VsZiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE2MCUyMiUyMHklM0QlMjI3MCUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2OCUyMiUyMHZhbHVlJTNEJTIyY3VycmVudEVwb2NoJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTYwJTIyJTIweSUzRCUyMjg4JTIyJTIwd2lkdGglM0QlMjIxMzclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjY5JTIyJTIwdmFsdWUlM0QlMjJzdGF0ZSUyNmx0JTNCYnIlMjZndCUzQlJFRElTX0NMVVNURVJfRkFJTCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE2MCUyMiUyMHklM0QlMjIxMDYlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjMzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzAlMjIlMjB2YWx1ZSUzRCUyMnNpemUlRUYlQkMlOUEwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTYwJTIyJTIweSUzRCUyMjEzOSUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3MSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI3MiUyMiUyMHRhcmdldCUzRCUyMjc0JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3MiUyMiUyMHZhbHVlJTNEJTIybm9kZXMlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xNjAlMjIlMjB5JTNEJTIyMTU3JTIyJTIwd2lkdGglM0QlMjIxMzclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjczJTIyJTIwdmFsdWUlM0QlMjIuLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE2MCUyMiUyMHklM0QlMjIxNzUlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzQlMjIlMjB2YWx1ZSUzRCUyMmRpY3QlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzYlMjIlMjB5JTNEJTIyMjM0JTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjc1JTIyJTIwdmFsdWUlM0QlMjIlRTclOUMlODElRTclOTUlQTUuLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjM2JTIyJTIweSUzRCUyMjI1MiUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3NiUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI3NyUyMiUyMHRhcmdldCUzRCUyMjYzJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3NyUyMiUyMHZhbHVlJTNEJTIyJUU3JTlDJTgxJUU3JTk1JUE1Li4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi01NzAlMjIlMjB5JTNEJTIyMTkyJTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjc4JTIyJTIwdmFsdWUlM0QlMjIlRTQlQjklOUYlRTQlQkMlOUElRTYlOEMlODclRTUlOTAlOTElRTQlQjglODklRTQlQjglQUFjbHVzdGVyTm9kZSVFRiVCQyU4QyVFOCVCRiU5OSVFOSU4NyU4QyVFNCVCOCU4RCVFNyU5NCVCQiVFNCVCQSU4NiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTU3MCUyMiUyMHklM0QlMjIyNzAlMjIlMjB3aWR0aCUzRCUyMjEwNiUyMiUyMGhlaWdodCUzRCUyMjUxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzklMjIlMjB2YWx1ZSUzRCUyMiVFNCVCOSU5RiVFNCVCQyU5QSVFNiU4QyU4NyVFNSU5MCU5MSVFNCVCOCU4OSVFNCVCOCVBQWNsdXN0ZXJOb2RlJUVGJUJDJThDJUU4JUJGJTk5JUU5JTg3JThDJUU0JUI4JThEJUU3JTk0JUJCJUU0JUJBJTg2JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIzNiUyMiUyMHklM0QlMjIyNzAlMjIlMjB3aWR0aCUzRCUyMjEwNiUyMiUyMGhlaWdodCUzRCUyMjUxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyODAlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwdGFyZ2V0JTNEJTIyODklMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIweCUzRCUyMi03MTYlMjIlMjB5JTNEJTIyNjg4LjIzMTUzODQ2MTUzODUlMjIlMjBhcyUzRCUyMnNvdXJjZVBvaW50JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyODElMjIlMjB2YWx1ZSUzRCUyMmxpbmslMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MTYlMjIlMjB5JTNEJTIyNjM2JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjgyJTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MTYlMjIlMjB5JTNEJTIyNjY3JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjgzJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMSUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQmV4aXRYJTNEMSUzQmV4aXRZJTNEMC41JTNCZXhpdER4JTNEMCUzQmV4aXREeSUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjg0JTIyJTIwdGFyZ2V0JTNEJTIyOTklMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjg0JTIyJTIwdmFsdWUlM0QlMjJsaW5rJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDg1JTIyJTIweSUzRCUyMjYzNiUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4NSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDg1JTIyJTIweSUzRCUyMjY2NyUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4NiUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI4NyUyMiUyMHRhcmdldCUzRCUyMjEwMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyODclMjIlMjB2YWx1ZSUzRCUyMmxpbmslMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMjAlMjIlMjB5JTNEJTIyNjM2JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjg4JTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMjAlMjIlMjB5JTNEJTIyNjY3JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjg5JTIyJTIwdmFsdWUlM0QlMjJjbHVzdGVyTGluayUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODkzJTIyJTIweSUzRCUyMjc2OS43NyUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5MCUyMiUyMHZhbHVlJTNEJTIyZmQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04OTMlMjIlMjB5JTNEJTIyNzg3Ljc3JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjkxJTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODkzJTIyJTIweSUzRCUyMjgxOC43NyUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5MiUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0JleGl0WCUzRDAlM0JleGl0WSUzRDAuNSUzQmV4aXREeCUzRDAlM0JleGl0RHklM0QwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI5MyUyMiUyMHRhcmdldCUzRCUyMjM5JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDQXJyYXklMjBhcyUzRCUyMnBvaW50cyUyMiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTk1OSUyMiUyMHklM0QlMjI4NjUlMjIlMkYlM0UlM0NteFBvaW50JTIweCUzRCUyMi05NTklMjIlMjB5JTNEJTIyNDQxJTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5MyUyMiUyMHZhbHVlJTNEJTIybm9kZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTg5MyUyMiUyMHklM0QlMjI4NDkuNzclMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOTQlMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTg5MyUyMiUyMHklM0QlMjI4ODAuNzclMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOTUlMjIlMjB2YWx1ZSUzRCUyMmNsdXN0ZXJMaW5rJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi00ODcuNSUyMiUyMHklM0QlMjI3NzMlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOTYlMjIlMjB2YWx1ZSUzRCUyMmZkJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDg3LjUlMjIlMjB5JTNEJTIyNzkxJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjk3JTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDg3LjUlMjIlMjB5JTNEJTIyODIyJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjk4JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMCUzQmVudHJ5WSUzRDAuNzUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0JleGl0WCUzRDAlM0JleGl0WSUzRDAuNSUzQmV4aXREeCUzRDAlM0JleGl0RHklM0QwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI5OSUyMiUyMHRhcmdldCUzRCUyMjQ2JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5OSUyMiUyMHZhbHVlJTNEJTIybm9kZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ4Ny41JTIyJTIweSUzRCUyMjg1MyUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMDAlMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ4Ny41JTIyJTIweSUzRCUyMjg4NCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMDElMjIlMjB2YWx1ZSUzRCUyMmNsdXN0ZXJMaW5rJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjElMjIlMjB5JTNEJTIyNzY2LjUlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTAyJTIyJTIwdmFsdWUlM0QlMjJmZCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMSUyMiUyMHklM0QlMjI3ODQuNSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMDMlMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjElMjIlMjB5JTNEJTIyODE1LjUlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTA0JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMSUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTA1JTIyJTIwdGFyZ2V0JTNEJTIyNTMlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NBcnJheSUyMGFzJTNEJTIycG9pbnRzJTIyJTNFJTNDbXhQb2ludCUyMHglM0QlMjIxNzAlMjIlMjB5JTNEJTIyODYyJTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjIxNzAlMjIlMjB5JTNEJTIyNDQxJTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMDUlMjIlMjB2YWx1ZSUzRCUyMm5vZGUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjElMjIlMjB5JTNEJTIyODQ2LjUlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTA2JTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjElMjIlMjB5JTNEJTIyODc3LjUlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n集群启动之后，会创建如上的内存结构，但是此时集群还是不可用的。\n\n也就是：clusterState结构中的 state ： **REDIS_CLUSTER_FAIL**\n\n说明集群服务还没有上线。\n\n\n\n那么怎么让集群上线，并且正常的对外提供服务呢？ \n\n需要将Redis的槽指派完成之后，Redis集群才可以正常对外提供服务。\n\n\n\n# 槽指派阶段\n\n\n\n## 什么是槽（hash、代理、预分区）\n\n如果你知道什么是槽，这部分可以不看。\n\n在这部分，我们说的多点。从以下的角度来看什么是槽\n\n- 一是：什么是hash，一致性hash有哪些方法，哈希环是什么\n- 二是：Redis代理，为什么要有Redis代理\n- 三是：什么是预分区\n\n为什么要说这么多？\n\n因为：Redis集群就是预分区，预先准备了16384（2的14次方）个槽，这就是预分区。\n\n同时Redis集群使用hash进行数据均衡。所以讲了hash；\n\n最后：为了Redis代理是封装了对集群的访问\n\n好处有两个：一是封装了集群的变更，不管集群怎么懂，对外的代理地址都不变。二是Client连接过多减少Redis节点的压力。\n\n\n\n\n\n哈希环\n\n新加节点的时候，也会丢失数据。会导致缓存击穿。\n\n所以哈希环更适合缓存的场景，而不是做数据库的场景。\n\n\n\n虚拟节点解决数据倾斜的问题。\n\n\n\n\n\nRedis代理\n\n为什么要代理：因为直连Redis，如果连接数过多，会对Redis Server造成压力\n\n代理产品\n\ntw\n\npredixy\n\ncluster\n\ncodis\n\n\n\n预分区\n\n在传统的开发中，有两个实例，我们一般哈希取模是除以2；\n\n预分区就是目前有2个实例，但是我们预分区10个，就是假设未来有10个实例。我们先提前分区号。\n\n好处是什么？\n\n不需要全量的数据rehash，只需要移动对应的槽位就可以了。\n\n\n\n## 槽指派\n\n\n\n通过上面我们知道，当集群启动之后，如果不指定槽，集群是无法对外服务的。\n\n可以通过 INFO 命令查看集群的状态：\n\n- cluster_state:fail ： 表示集群目前还没有上线。因为还没有指派槽位\n- cluster_slots_assigned:0：表示已经被指派的槽位，目前为 0 表示一个都没有指派。当指派完了，这个值应该是 16384\n\n```sh\n127.0.0.1:7001> CLUSTER INFO\ncluster_state:fail\ncluster_slots_assigned:0\ncluster_slots_ok:0\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:3\ncluster_size:0\ncluster_current_epoch:0\ncluster_stats_messages_sent:110\ncluster_stats_messages_received:28\n```\n\n那么要怎么指派呢？ \n\n使用命令\n\n```sh\nCLUSTER ADDSLOTS <slot> [slot ...]\n```\n\n比如下面的示例，将0-5000这些槽位指派给7001负责\n\n```sh\n127.0.0.1:7001> CLUSTER ADDSLOTS 0 1 2 3 4 ... 5000\nOK\n127.0.0.1:7001> CLUSTER NODES\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388316664849 0 connected\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388316665850 0 connected\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000\n```\n\n使用同样的命令，将剩下的 5001-16383 的槽位指派给 7002 和 7003\n\n最终集群的状态就是下面的这个样子，我们可以看到\n\n- cluster_state:ok : 集群的状态从 fail 变成了ok，表示已经开始工作了。\n- cluster_slots_assigned:16384：所有的槽位都已经指派完了。\n\n```sh\n127.0.0.1:7001> CLUSTER INFO\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:3\ncluster_size:3\ncluster_current_epoch:0\ncluster_stats_messages_sent:2699\ncluster_stats_messages_received:2617\n127.0.0.1:7001> CLUSTER NODES\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388317426165 0 connected 10001-16383\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388317427167 0 connected 5001-10000\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000\n```\n\n\n\n现在集群就可以正常工作了。\n\n在使用这个集群之前，我们先看一个指派完成之后，集群的内存结构会发生什么变化呢？\n\n\n\n## 槽指派的内存结构\n\n当执行了槽指派的命令`CLUSTER ADDSLOTS <slot> [slot ...]`指派成功之后\n\n该消息会被广播，集群内的其他所有节点，都知道哪个节点负责哪些操作。\n\n他们的之间的内存结构是什么样子的呢？\n\n\n\n**当前节点记录自己的槽指派信息**\n\n\n\n在前面，说到 clusterNode 的内存结构的时候，里面有两个属性，是下面这两个\n\n```c\nstruct clusterNode {\n  // ...\n  // 记录当前节点被指派了哪些槽\n  unsigned char slots[16384/8];\n  // 记录当前节点被指派的槽数量\n  int numslots;\n  // ...\n};\n```\n\n\n\n当对该节点指派槽位之后，这两个属性就会记录槽位信息。\n\n- slots： 是一个数组，这个数组长度是： 16384 / 8 = 2048 个字节， 每一个字节是 8 位，每 1 位表示一个槽。如果某一位的值是1，说明这个位所代表的的槽位就被指派了。\n- numslots ： 是一个数量。表示当前节点被指派了多少个槽位。\n\n\n\n比如针对 7001 这个节点来说，我们对它指派了 0-5000； 对于 7002 节点，指派了 5001-10000； 对于 7003 节点，指派了 10001-16383；\n\n那么它们的内存结构就是下面这个样子的。\n\n\n\n<img src=\"Redis的cluster.assets/image-20230526143618580.png\" alt=\"image-20230526143618580\" style=\"zoom: 80%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkNWU4ZDQlM0JzdHJva2VDb2xvciUzRCUyMzgyYjM2NiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNjU1JTIyJTIweSUzRCUyMi0xMC41JTIyJTIwd2lkdGglM0QlMjIzMDglMjIlMjBoZWlnaHQlM0QlMjIxNzYlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMSUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNCUyMiUyMHRhcmdldCUzRCUyMjIzJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwdmFsdWUlM0QlMjJSZWRpcy0xJUVGJUJDJTlBNzAwMSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTYzMiUyMiUyMHklM0QlMjI2LjUlMjIlMjB3aWR0aCUzRCUyMjk1JTIyJTIwaGVpZ2h0JTNEJTIyMjclMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMCUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNiUyMiUyMHRhcmdldCUzRCUyMjYzJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2JTIyJTIwdmFsdWUlM0QlMjJSZWRpcy0yJUVGJUJDJTlBNzAwMiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ2NiUyMiUyMHklM0QlMjI2LjUlMjIlMjB3aWR0aCUzRCUyMjk1JTIyJTIwaGVpZ2h0JTNEJTIyMjclMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMCUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQmV4aXRYJTNEMCUzQmV4aXRZJTNEMC41JTNCZXhpdER4JTNEMCUzQmV4aXREeSUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjglMjIlMjB0YXJnZXQlM0QlMjI2MCUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOCUyMiUyMHZhbHVlJTNEJTIyUmVkaXMtMyVFRiVCQyU5QTcwMDMlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QxJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi01NDQlMjIlMjB5JTNEJTIyNzEuNSUyMiUyMHdpZHRoJTNEJTIyOTUlMjIlMjBoZWlnaHQlM0QlMjIyNyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjklMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTIlMjIlMjB0YXJnZXQlM0QlMjI0JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCZGFzaGVkJTNEMSUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTIlMjIlMjB0YXJnZXQlM0QlMjI2JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMSUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCZGFzaGVkJTNEMSUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTIlMjIlMjB0YXJnZXQlM0QlMjI4JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMiUyMiUyMHZhbHVlJTNEJTIyQ2xpZW50JTIyJTIwc3R5bGUlM0QlMjJlbGxpcHNlJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi01MzclMjIlMjB5JTNEJTIyLTk5LjUlMjIlMjB3aWR0aCUzRCUyMjgxJTIyJTIwaGVpZ2h0JTNEJTIyMzglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMyUyMiUyMHZhbHVlJTNEJTIyJTI2bHQlM0Jmb250JTIwc3R5bGUlM0QlMjZxdW90JTNCZm9udC1zaXplJTNBJTIwN3B4JTI2cXVvdCUzQiUyNmd0JTNCJUU1JUFFJUEyJUU2JTg4JUI3JUU3JUFCJUFGJUU1JThGJUFGJUU0JUJCJUE1JUU4JUJGJTlFJUU2JThFJUE1JUU5JTlCJTg2JUU3JUJFJUE0JUU0JUI4JUFEJUU0JUJCJUJCJUU2JTg0JThGJUU0JUI4JTgwJUU0JUI4JUFBJUU4JThBJTgyJUU3JTgyJUI5JTI2bHQlM0IlMkZmb250JTI2Z3QlM0IlMjIlMjBzdHlsZSUzRCUyMnRleHQlM0JodG1sJTNEMSUzQnN0cm9rZUNvbG9yJTNEJTIzZDc5YjAwJTNCZmlsbENvbG9yJTNEJTIzZmZlNmNjJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0Jyb3VuZGVkJTNEMCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNTU2JTIyJTIweSUzRCUyMi01Mi41JTIyJTIwd2lkdGglM0QlMjIxMTQuNzUlMjIlMjBoZWlnaHQlM0QlMjIxNiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE0JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjE2JTIyJTIwdGFyZ2V0JTNEJTIyNCUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTUlMjIlMjB2YWx1ZSUzRCUyMiVFNCVCOCVCQiVFNCVCQiU4RSUyMiUyMHN0eWxlJTNEJTIyZWRnZUxhYmVsJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0JyZXNpemFibGUlM0QwJTNCcG9pbnRzJTNEJTVCJTVEJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMGNvbm5lY3RhYmxlJTNEJTIyMCUyMiUyMHBhcmVudCUzRCUyMjE0JTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMC4yODMxJTIyJTIweSUzRCUyMi0zJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE2JTIyJTIwdmFsdWUlM0QlMjJSZWRpcy0xJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQmRhc2hlZCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTY1MCUyMiUyMHklM0QlMjI2Ni41JTIyJTIwd2lkdGglM0QlMjI1NyUyMiUyMGhlaWdodCUzRCUyMjIyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTclMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMTklMjIlMjB0YXJnZXQlM0QlMjI4JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxOCUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJUU0JUJCJThFJTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyMTclMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjAuNDM5MyUyMiUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NteFBvaW50JTIweSUzRCUyMjglMjIlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE5JTIyJTIwdmFsdWUlM0QlMjJSZWRpcy0zJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQmRhc2hlZCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTUyNSUyMiUyMHklM0QlMjIxMzMuNSUyMiUyMHdpZHRoJTNEJTIyNTclMjIlMjBoZWlnaHQlM0QlMjIyMiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIwJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMjIlMjIlMjB0YXJnZXQlM0QlMjI2JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyMSUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JUJCJUU0JUJCJThFJTIyJTIwc3R5bGUlM0QlMjJlZGdlTGFiZWwlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQnJlc2l6YWJsZSUzRDAlM0Jwb2ludHMlM0QlNUIlNUQlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwY29ubmVjdGFibGUlM0QlMjIwJTIyJTIwcGFyZW50JTNEJTIyMjAlMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0wLjcyNSUyMiUyMHklM0QlMjIxJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTglMjIlMjB5JTNEJTIyLTklMjIlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIyJTIyJTIwdmFsdWUlM0QlMjJSZWRpcy0yJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQmRhc2hlZCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQxNSUyMiUyMHklM0QlMjI4Mi41JTIyJTIwd2lkdGglM0QlMjI1NyUyMiUyMGhlaWdodCUzRCUyMjIyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjMlMjIlMjB2YWx1ZSUzRCUyMmNsdXN0ZXJTdGF0ZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTY2JTIyJTIweSUzRCUyMjEyMCUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIyNSUyMiUyMHRhcmdldCUzRCUyMjM5JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNSUyMiUyMHZhbHVlJTNEJTIybXlzZWxmJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTY2JTIyJTIweSUzRCUyMjEzOCUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNiUyMiUyMHZhbHVlJTNEJTIyY3VycmVudEVwb2NoJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTY2JTIyJTIweSUzRCUyMjE1NiUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNyUyMiUyMHZhbHVlJTNEJTIyc3RhdGUlMjZsdCUzQmJyJTI2Z3QlM0JSRURJU19DTFVTVEVSX0ZBSUwlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi05NjYlMjIlMjB5JTNEJTIyMTc0JTIyJTIwd2lkdGglM0QlMjIxMzclMjIlMjBoZWlnaHQlM0QlMjIzMyUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI4JTIyJTIwdmFsdWUlM0QlMjJzaXplJUVGJUJDJTlBMCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTk2NiUyMiUyMHklM0QlMjIyMDclMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjklMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwLjUlM0JlbnRyeVklM0QwJTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCZXhpdFglM0QxJTNCZXhpdFklM0QwLjUlM0JleGl0RHglM0QwJTNCZXhpdER5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMzAlMjIlMjB0YXJnZXQlM0QlMjIzMiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzAlMjIlMjB2YWx1ZSUzRCUyMm5vZGVzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItOTY2JTIyJTIweSUzRCUyMjIyNSUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzMSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi05NjYlMjIlMjB5JTNEJTIyMjQzJTIyJTIwd2lkdGglM0QlMjIxMzclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMyJTIyJTIwdmFsdWUlM0QlMjJkaWN0JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04MzglMjIlMjB5JTNEJTIyMjcwJTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMzJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMCUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMzQlMjIlMjB0YXJnZXQlM0QlMjIzOSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzQlMjIlMjB2YWx1ZSUzRCUyMiUyNnF1b3QlM0IxamRha3NqLi4uc2RhcyUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04MzglMjIlMjB5JTNEJTIyMjg4JTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM1JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMCUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMzYlMjIlMjB0YXJnZXQlM0QlMjI0NiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzYlMjIlMjB2YWx1ZSUzRCUyMiUyNnF1b3QlM0IyamZhaS4uLnNka2FzZCUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04MzglMjIlMjB5JTNEJTIyMzA2JTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM3JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMC41JTNCZW50cnlZJTNEMCUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMzglMjIlMjB0YXJnZXQlM0QlMjI1MyUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzglMjIlMjB2YWx1ZSUzRCUyMiUyNnF1b3QlM0IzamRqYXN1bmFkLi5zJTI2cXVvdCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTgzOCUyMiUyMHklM0QlMjIzMjQlMjIlMjB3aWR0aCUzRCUyMjEwNiUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzklMjIlMjB2YWx1ZSUzRCUyMmNsdXN0ZXJOb2RlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MDElMjIlMjB5JTNEJTIyMzk1JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQwJTIyJTIwdmFsdWUlM0QlMjJuYW1lJTI2bHQlM0JiciUyNmd0JTNCJTI2cXVvdCUzQjFqZGFrc2ouLi5zZGFzJTI2cXVvdCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTcwMSUyMiUyMHklM0QlMjI0MTMlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDElMjIlMjB2YWx1ZSUzRCUyMmZsYWdzJTI2bHQlM0JiciUyNmd0JTNCUkVESVNfTk9ERV9NQVNURVIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MDElMjIlMjB5JTNEJTIyNDQ0JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQyJTIyJTIwdmFsdWUlM0QlMjJjb25maWdFcG9jaCUyNmx0JTNCYnIlMjZndCUzQjAlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MDElMjIlMjB5JTNEJTIyNDc1JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQzJTIyJTIwdmFsdWUlM0QlMjJpcCUyNmx0JTNCYnIlMjZndCUzQiUyNnF1b3QlM0IxMjcuMC4wLjElMjZxdW90JTNCJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzAxJTIyJTIweSUzRCUyMjUwNiUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0NCUyMiUyMHZhbHVlJTNEJTIycG9ydCUyNmx0JTNCYnIlMjZndCUzQjcwMDElMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MDElMjIlMjB5JTNEJTIyNTM3JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ1JTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi03MDElMjIlMjB5JTNEJTIyNTY4JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ2JTIyJTIwdmFsdWUlM0QlMjJjbHVzdGVyTm9kZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDcwJTIyJTIweSUzRCUyMjM5NSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0NyUyMiUyMHZhbHVlJTNEJTIybmFtZSUyNmx0JTNCYnIlMjZndCUzQiUyNnF1b3QlM0IyamZhaS4uLnNka2FzZCUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi00NzAlMjIlMjB5JTNEJTIyNDEzJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ4JTIyJTIwdmFsdWUlM0QlMjJmbGFncyUyNmx0JTNCYnIlMjZndCUzQlJFRElTX05PREVfTUFTVEVSJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDcwJTIyJTIweSUzRCUyMjQ0NCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0OSUyMiUyMHZhbHVlJTNEJTIyY29uZmlnRXBvY2glMjZsdCUzQmJyJTI2Z3QlM0IwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDcwJTIyJTIweSUzRCUyMjQ3NSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1MCUyMiUyMHZhbHVlJTNEJTIyaXAlMjZsdCUzQmJyJTI2Z3QlM0IlMjZxdW90JTNCMTI3LjAuMC4xJTI2cXVvdCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ3MCUyMiUyMHklM0QlMjI1MDYlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTElMjIlMjB2YWx1ZSUzRCUyMnBvcnQlMjZsdCUzQmJyJTI2Z3QlM0I3MDAyJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDcwJTIyJTIweSUzRCUyMjUzNyUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1MiUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDcwJTIyJTIweSUzRCUyMjU2OCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1MyUyMiUyMHZhbHVlJTNEJTIyY2x1c3Rlck5vZGUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIwNSUyMiUyMHklM0QlMjIzOTUlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTQlMjIlMjB2YWx1ZSUzRCUyMm5hbWUlMjZsdCUzQmJyJTI2Z3QlM0IlMjZxdW90JTNCM2pkamFzdW5hZC4ucyUyNnF1b3QlM0IlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMDUlMjIlMjB5JTNEJTIyNDEzJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjU1JTIyJTIwdmFsdWUlM0QlMjJmbGFncyUyNmx0JTNCYnIlMjZndCUzQlJFRElTX05PREVfTUFTVEVSJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjA1JTIyJTIweSUzRCUyMjQ0NCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1NiUyMiUyMHZhbHVlJTNEJTIyY29uZmlnRXBvY2glMjZsdCUzQmJyJTI2Z3QlM0IwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjA1JTIyJTIweSUzRCUyMjQ3NSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1NyUyMiUyMHZhbHVlJTNEJTIyaXAlMjZsdCUzQmJyJTI2Z3QlM0IlMjZxdW90JTNCMTI3LjAuMC4xJTI2cXVvdCUzQiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIwNSUyMiUyMHklM0QlMjI1MDYlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTglMjIlMjB2YWx1ZSUzRCUyMnBvcnQlMjZsdCUzQmJyJTI2Z3QlM0I3MDAzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjA1JTIyJTIweSUzRCUyMjUzNyUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1OSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjA1JTIyJTIweSUzRCUyMjU2OCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2MCUyMiUyMHZhbHVlJTNEJTIyY2x1c3RlclN0YXRlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi01NzAlMjIlMjB5JTNEJTIyMTkyLjUlMjIlMjB3aWR0aCUzRCUyMjEwNiUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjElMjIlMjB2YWx1ZSUzRCUyMmRpY3QlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM4MCUyMiUyMHklM0QlMjIxOTUuNSUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2MiUyMiUyMHZhbHVlJTNEJTIyJUU3JTlDJTgxJUU3JTk1JUE1Li4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzgwJTIyJTIweSUzRCUyMjIxMy41JTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjYzJTIyJTIwdmFsdWUlM0QlMjJjbHVzdGVyU3RhdGUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE2MCUyMiUyMHklM0QlMjI4OC41JTIyJTIwd2lkdGglM0QlMjIxMzclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjY0JTIyJTIwdmFsdWUlM0QlMjJteXNlbGYlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xNjAlMjIlMjB5JTNEJTIyMTA2LjUlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjUlMjIlMjB2YWx1ZSUzRCUyMmN1cnJlbnRFcG9jaCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE2MCUyMiUyMHklM0QlMjIxMjQuNSUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2NiUyMiUyMHZhbHVlJTNEJTIyc3RhdGUlMjZsdCUzQmJyJTI2Z3QlM0JSRURJU19DTFVTVEVSX0ZBSUwlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xNjAlMjIlMjB5JTNEJTIyMTQyLjUlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjMzJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNjclMjIlMjB2YWx1ZSUzRCUyMnNpemUlRUYlQkMlOUEwJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTYwJTIyJTIweSUzRCUyMjE3NS41JTIyJTIwd2lkdGglM0QlMjIxMzclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjY4JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjY5JTIyJTIwdGFyZ2V0JTNEJTIyNzElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjY5JTIyJTIwdmFsdWUlM0QlMjJub2RlcyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE2MCUyMiUyMHklM0QlMjIxOTMuNSUyMiUyMHdpZHRoJTNEJTIyMTM3JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3MCUyMiUyMHZhbHVlJTNEJTIyLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xNjAlMjIlMjB5JTNEJTIyMjExLjUlMjIlMjB3aWR0aCUzRCUyMjEzNyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzElMjIlMjB2YWx1ZSUzRCUyMmRpY3QlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzYlMjIlMjB5JTNEJTIyMjcwLjUlMjIlMjB3aWR0aCUzRCUyMjEwNiUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzIlMjIlMjB2YWx1ZSUzRCUyMiVFNyU5QyU4MSVFNyU5NSVBNS4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzYlMjIlMjB5JTNEJTIyMjg4LjUlMjIlMjB3aWR0aCUzRCUyMjEwNiUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzMlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JzdHJva2VDb2xvciUzRCUyMzAwMDAwMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNzQlMjIlMjB0YXJnZXQlM0QlMjI2MSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNzQlMjIlMjB2YWx1ZSUzRCUyMiVFNyU5QyU4MSVFNyU5NSVBNS4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNTcwJTIyJTIweSUzRCUyMjIxMS41JTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjc1JTIyJTIwdmFsdWUlM0QlMjIlRTQlQjklOUYlRTQlQkMlOUElRTYlOEMlODclRTUlOTAlOTElRTQlQjglODklRTQlQjglQUFjbHVzdGVyTm9kZSVFRiVCQyU4QyVFOCVCRiU5OSVFOSU4NyU4QyVFNCVCOCU4RCVFNyU5NCVCQiVFNCVCQSU4NiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTM4MCUyMiUyMHklM0QlMjIyMzEuNSUyMiUyMHdpZHRoJTNEJTIyMTA2JTIyJTIwaGVpZ2h0JTNEJTIyNTElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3NiUyMiUyMHZhbHVlJTNEJTIyJUU0JUI5JTlGJUU0JUJDJTlBJUU2JThDJTg3JUU1JTkwJTkxJUU0JUI4JTg5JUU0JUI4JUFBY2x1c3Rlck5vZGUlRUYlQkMlOEMlRTglQkYlOTklRTklODclOEMlRTQlQjglOEQlRTclOTQlQkIlRTQlQkElODYlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjM2JTIyJTIweSUzRCUyMjMwNi41JTIyJTIwd2lkdGglM0QlMjIxMDYlMjIlMjBoZWlnaHQlM0QlMjI1MSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjc3JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMSUzQmVudHJ5WSUzRDAuNzUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjc4JTIyJTIwdGFyZ2V0JTNEJTIyODQlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjc4JTIyJTIwdmFsdWUlM0QlMjJsaW5rJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzAxJTIyJTIweSUzRCUyMjU5OSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3OSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzAxJTIyJTIweSUzRCUyMjYzMCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4MCUyMiUyMHZhbHVlJTNEJTIybGluayVFRiVCQyU5QSVFNyU5QyU4MSVFNyU5NSVBNSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ3MCUyMiUyMHklM0QlMjI1OTklMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyODElMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTQ3MCUyMiUyMHklM0QlMjI2MzAlMjIlMjB3aWR0aCUzRCUyMjEzOCUyMiUyMGhlaWdodCUzRCUyMjMxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyODIlMjIlMjB2YWx1ZSUzRCUyMmxpbmslRUYlQkMlOUElRTclOUMlODElRTclOTUlQTUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMDUlMjIlMjB5JTNEJTIyNTk5JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjgzJTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0yMDUlMjIlMjB5JTNEJTIyNjMwJTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjg0JTIyJTIwdmFsdWUlM0QlMjJjbHVzdGVyTGluayUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODc1JTIyJTIweSUzRCUyMjUzMCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4NSUyMiUyMHZhbHVlJTNEJTIyZmQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04NzUlMjIlMjB5JTNEJTIyNTQ4JTIyJTIwd2lkdGglM0QlMjIxMzglMjIlMjBoZWlnaHQlM0QlMjIzMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjg2JTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODc1JTIyJTIweSUzRCUyMjU3OSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4NyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCZm9udENvbG9yJTNEJTIzMDAwMDAwJTNCc3Ryb2tlQ29sb3IlM0QlMjMwMDAwMDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjg4JTIyJTIwdGFyZ2V0JTNEJTIyMzklMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NBcnJheSUyMGFzJTNEJTIycG9pbnRzJTIyJTNFJTNDbXhQb2ludCUyMHglM0QlMjItODkxJTIyJTIweSUzRCUyMjYzMCUyMiUyRiUzRSUzQ214UG9pbnQlMjB4JTNEJTIyLTg5MSUyMiUyMHklM0QlMjI0MDQlMjIlMkYlM0UlM0MlMkZBcnJheSUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjg4JTIyJTIwdmFsdWUlM0QlMjJub2RlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODc1JTIyJTIweSUzRCUyMjYxMCUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4OSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItODc1JTIyJTIweSUzRCUyMjY0MSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5MCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCZXhpdFglM0QxJTNCZXhpdFklM0QwLjUlM0JleGl0RHglM0QwJTNCZXhpdER5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyOTElMjIlMjB0YXJnZXQlM0QlMjI5OSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOTElMjIlMjB2YWx1ZSUzRCUyMnNsb3RzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzAxJTIyJTIweSUzRCUyMjY2MSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5MiUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzAxJTIyJTIweSUzRCUyMjY5MiUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5MyUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI5NCUyMiUyMHRhcmdldCUzRCUyMjEwMiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOTQlMjIlMjB2YWx1ZSUzRCUyMnNsb3RzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDcwJTIyJTIweSUzRCUyMjY2MSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5NSUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNDcwJTIyJTIweSUzRCUyMjY5MiUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5NiUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmZvbnRDb2xvciUzRCUyMzAwMDAwMCUzQnN0cm9rZUNvbG9yJTNEJTIzMDAwMDAwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI5NyUyMiUyMHRhcmdldCUzRCUyMjEwMyUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOTclMjIlMjB2YWx1ZSUzRCUyMnNsb3RzJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjA1JTIyJTIweSUzRCUyMjY2MSUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5OCUyMiUyMHZhbHVlJTNEJTIyLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMjA1JTIyJTIweSUzRCUyMjY5MiUyMiUyMHdpZHRoJTNEJTIyMTM4JTIyJTIwaGVpZ2h0JTNEJTIyMzElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5OSUyMiUyMHZhbHVlJTNEJTIyJTIyJTIwc3R5bGUlM0QlMjJzaGFwZSUzRGltYWdlJTNCdmVydGljYWxMYWJlbFBvc2l0aW9uJTNEYm90dG9tJTNCbGFiZWxCYWNrZ3JvdW5kQ29sb3IlM0QlMjNmZmZmZmYlM0J2ZXJ0aWNhbEFsaWduJTNEdG9wJTNCYXNwZWN0JTNEZml4ZWQlM0JpbWFnZUFzcGVjdCUzRDAlM0JpbWFnZSUzRGRhdGElM0FpbWFnZSUyRnBuZyUyQ2lWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUJwVUFBQUJqQ0FZQUFBQjYzSWdJQUFBZ0FFbEVRVlI0QWUyZGE3S2pJQkNGNzdxeUlOZVQxV1FsODglMkZGT05WQUt5cmdnYUJpT0ZOMUp5UzIybndjbXBlUHYybWFwbiUyRiUyRiUyRnNrSCUyRjBVSXRNQ0hQdGpDSVFkeThLc3A5VUE5JTJCSG9vVGJlZ0klMkZwZVN1QlolMkJ6MVphMWVUSml1Y09GbVJGVTRBdDZTdXlBb25nRnRTVjJTRkU4QXRxU3V5d2duZ2xqM3Fxc2M4NDRxb1kwbkdkVGltamtMR0tUcDF0aW5qUDBuOCUyRmYzeGp3eW9BV3FBR3FBR3FBRnFnQnFnQnFnQmFvQWFvQWFvQVdxQUdxQUdxQUZxZ0JxZ0JxZ0Jhb0Fhb0FhQ0dqRHJTYkpHSll0SyUyRkJjblFENXhOdHhDQWlSd1B3SEdxUHZMZ0I2UUFBbVF3RjBFMkFiY1JaN25KUUVTSUFFU0lJRm5FV0NmNFZubFJXOUpnQVJJb0VVQzJwYVkxU1Q5MHFLakxmaEVQaTJVQW4wZ0FSS0lFV0NNaXBIaDd5UkFBaVR3JTJCd1RZQnZ4JTJCR1RPSEpFQUNKRUFDSkZDREFQc01OU2p5R0NSQUFpVFFOd0Z0Uzdpb0JPaEFZUUdtTkNFQkVpQ0J5d2t3UmwyT25DY2tBUklnZ1dZSXNBMW9waWpvQ0FtUUFBbVFBQWswVFlCOWhxYUxoODZSQUFtUXdDTUlhRnZDUlNXZ3VCUVdZRW9URWlBQkVyaWNBR1BVNWNoNVFoSWdBUkpvaGdEYmdHYUtnbzZRQUFtUUFBbVFRTk1FMkdkb3Vuam9IQW1RQUFrOGdvQzJKVnhVQW9wTFlRR21OQ0VCRWlDQnl3a3dSbDJPbkNja0FSSWdnV1lJc0Exb3Bpam9DQW1RQUFtUUFBazBUWUI5aHFhTGg4NlJBQW1Rd0NNSWFGdkNSU1dndUJRV1lFb1RFaUFCRXJpY0FHUFU1Y2g1UWhJZ0FSSm9oZ0RiZ0dhS2dvNlFBQW1RQUFtUVFOTUUyR2RvdW5qb0hBbVFBQWs4Z29DMkpSVVdsVDdUZXhpbXozaFN2c2ZQTkF5ZktYejR6elM4VGp5M3k1TENPaW1IUEN3SmZFSGdNdzElMkZmNU5vZFAzM210N2hTb09mNnpOc2p1bk84WHBINmlOJTJCYUZyV0pjQVlWWmZuYzQ3RyUyQnYlMkJjc21yTjB4TzFjMVZXMlViTnBOa0d6Q2lZSUFFU09DVEElMkJIJTJCSWlBWWs4TU1FMkdmNHRjSmxUUCUyQjFFdjJ0JTJGUHlBUGtzS3BJTnhxcllsRlJhVnBta2EzOVByNzI5NmZUMkxIU2d0ZCUyQnclMkZXVHphYlI2bjkwc211aXRNb08lMkJPdmZ5Z3NKWmZtQ0tCVmdoSWtENVglMkY2dWNTbjNrb3RJS1NRdGZHS05hS0lVN2ZHRDl2NFA2YjV6ell1MWNCYTNUTm9wdHdGVUM0M2xJNEJjSU1QNyUyRlFpa3lEeVJRU29COWhsSnlyZTdIbU41cXlkQXZJZkNqJTJCaXdwM0I4YnAycGJVbWRSU2FReW5MVzRJeUw4bTRiOWlwS3NacGxGcFZNV3N6eVJLQ3p2SnlZZlNHQWN4MG4lMkJQcCUyRjNOTHhpbW5wYXhpNE8wajhXQ0o5VzJqRiUyRkdhTmlaSmJmV2Y4WEZzV3BUdXMlMkZ0Vk9zbU90MzdGU2piQU91bHhyUDJBY0J4djhIbFhPbjhmOUJKVVJYR3lIUWM1JTJCQk1iMFJFU0p1ZEJqVHFVOUVHQSUyQjIlMkJURk5hMXNDTHlxTm45Z2o2RnlobXR1N0R1NllHTiUyRlRPJTJGczVlUVdMU3A5aGV2MjlJZ3RSJTJCU0pVV1BsN2NvOW1DSWdtWGklMkY3NXg0VkYxNm9iTVpqMEpIOFJhWFIxQTk5WEo3VWs0em41UDFZSUFRaE4yJTJGR0dIVlFSS3olMkZlMERDSlBmdTRoN3JQN1d6YUVjdXloaGU1czUwaVRseWwlMkZpUTB0QW9qMGQlMkJyUjZqJTJCc3AlMkJaSEdxRDdpNE5xZDYxT2cwR2NZekF5WklnQVRxRUdEOFh6aWVIZjlqajRtWkglMkI4ZGVtTEo0cDVKZFJyJTJGTnhUNGxRUU9DWFE3Ym1STVg3Unhka3pYTSUyQldlUiUyRmVUejk1aU92VnBTNzl3JTJGUGpWSEtjNWMzck1hVyUyQmkwVG5VOE9maDNNcVBhVnJiRW5CUlNlNEllazJ2WVppR0wlMkY3a0VYbHk0aTNzOFowNnJwM0FrSW1JMExuTk1WZmIlMkZBbU1nMFV1UDJnbDBnb3JZY0pOVHlJZ2xUbDY5OXVUTWlLJTJCNWkwcXlZU2dtUWpVaFNUSDRvV3VzUDFZSUh4YWFjZjhaWXlLa1FuODNtMzlIeWU1T0VUdTFOU0olMkZtMWJIS0MxJTJGcW4zJTJCdCUyQnRkcnpISEh2dnVKVE9lNmhQWjBRakF5TnpjWTkzMFlJTUVqSWZXYXdkZUxTSjZtNEE2bW9vMjRCMXFPSTNFcWhPZ1BGJTJGa3JHQ1J2VHE4ViUyRmFrOVY0ZmpQdWZ5JTJGbmpwWnQ3MzJVS0JodUlJRTFBZllabG40dDNMOWNJMnpzVzk1ODBQenFrak5qdWhCeTdTYmNkbXlwOWh6VGUlMkIxekZJNGZ2NTdqbkolMkI4Rm51YTFmTGFuZkNhaUt4WjlIZnhpN1lsMktLU0VUVUFhUnNJVnQlMkZ0eXA4ZlZQek5vJTJGWlMlMkZSOU5PclZpeU1mZjdYRHhoMk1DRndWcFdTeE5YY1I5N0NoaWtkR0ppRTBBdXQlMkJoVGxYUGpUdFNIRGZaYUVDJTJGNmZUUE9tMnY5VjhlRjZzWGhaaUolMkZmMEZIb2NGMlh2OTcxWTdydiUyQjJiZEJjMiUyRkczZTg5ZXhONEl6RzdiN3hOUW54NCUyRjV5S1FUalhLTmlDZ0glMkY1RUFqVUpNUDZ2YVdwOHJoWCUyRlA4UDNUeGpwTlA2dkM0YmZTT0NZQVBzTXk0SUhOUDl4akRScTBkeDhrTGtnT1RBR3JCM1RzODhUUU5oelRPJTJCeXoxRTRmblRhM1YwczYzNkg2cmpxUHpibU5PVVJYdzhaMzYlMkZkalRNQlJmJTJGYzNYZmFsa0NMU3ZaSzBUakVJTEROandJNjZ6RmI4JTJGNVdYR0V4dUJYRDhNYjVDTjhtRk5hM3glMkJIJTJCalJDNEtFakxpdmwyRHE0JTJCQWFrZnlIbDBkVDFVanpNbSUyQlhwdTNPc1hYclVqTWtabG9PeXklMkZtJTJGNE9BYTd6dGZHYlBlMTklMkZyZnFYYmlmVUIzOTl2Mm9xQ0RUcnc5M2xHN0pXM1dhM3ElMkY3ZDFRY0RldlU0MnlEZGhGSyUyRjVBQW5VSk1QNXZlTmFOJTJGM2FlWUhPSzNLJTJCZHh2OWNUTFFuQWZZWnJsdFVhbXMlMkJhSnF1NnRObm55ZFVMWHVPNlQzMk9ZckdqelhtT0lFeHA5eEJGWjNZJTJGVXlEUE40OXBPSHRieiUyQm1hVzFMRGhlVnBKTW54biUyRndpTjRuTjA2ZnQlMkJEOVRPOW9JZmoyZ1hTeVFsa1J4UXM0Y0x5Q254Uld3YTdjcFVVQ1NVM1ZjaGhkN1BuMmZPQjVYSjVqOVJpYjVITWRzTjFWaWQlMkZtZ2Z0JTJGUzRBeEtvTmdqJTJGViUyRmk4Y3h5RzQ3WmIlMkJlNjMlMkJYMm5FWEhlVDBBZlZxcjRoV2JMOHl2YWdrTnVheHJBY0RqSzIwJTJCZmk3SFJIJTJCUUFJa1VJTUE0ejlHc1REJTJCYzFFSncwc3JFcWhCZ09QR3F4YVZ3SG1hcndzVlBjOVZmZnFDODRRWTlEenU3TEhQVWRKJTJGY0p5JTJCbWVQRXhwempGSHV5bXRrZlhldjRNVTFyVzNLNHFMU3EzJTJCYWxXWnRuSE92amRFS2ZwWSUyRlk4VThxTDNmYlhnWHJiMSUyQmx2MWk4V2gxbiUyRlVWaHJYJTJGbHQ4Y1NPRHRJRjd3M29wd2wxb21RWUNjNmprMGk2JTJGYkRlY01mQzRUbDNOdmFrekVxb3p3NnJQODdPbzVCTEI3czdQV0gzdXQlMkZqOXB4SGZ3c3JUaE84b2k3MEZWYnRyMUpYTkZsZE9hMmMxRkphMSUyRnlrMjFBRWc4M2tzRDNCQmolMkZNWWFGOGIlMkZLSTZKTTIlMkZHZTMlMkZ1RU9Vd3JFdWlQQVBzTUZ5d3FOVGdmTkYzVnB5ODVUNmdhOWh6VGUlMkJ4ekZQUWZkQTR6Tms3VjdkRTVUcU94d2pHbjBXekdYVXBpJTJGMk9hMXJZa2IxSEpnQnVoenBxOHdQTWxkemk5aHVrTnJncU5uJTJGYzBoQmFuME45MEVTdXFtbEMwT3Y1TllSMWIwdUk2QXVNa3R4TWJqWW5PWk1Ga2VFJTJCZmolMkJqdHdJdXNJTDA5ajcxNk9yak82UnBROFNYOGw3b3llM3NlTkQlMkZZb3BLOUV5bjI0am56WnJya290Tk05TWNDNFp5dmh5ZjZpMUdsOVNWM0VMRTl6elByJTJGMDdlTGdiR09tQTdlJTJGM2hKJTJCciUyRnRrelJXTnVuZGc0NzQ2b04lMkJOTTlwaUJ5RjVNY1J0cjJ1UnZIUlNXSWJIOXRBSVNGUmlTd0ljRDRiNEZnWTRjcjQ3OCUyQklzck1IN2p4dk1TMWx6eFNKampvMmhTdGZQMkpQa29nWCUyRnlKQkNvVCUyQkowJTJCQTJPNmxVWmJNYjFhMiUyRkg0bUU1OTV1Z3pIZWJDNDhkdjV6aSUyRkduT2FiZ2Y0TGlYTjNPTTFyUm14bjlxV0ZDd3FyUThVJTJCaWFCUkRxQjZHS1NmNHpZYldYeUNMMGg5dUlzZHdBYndCSlh2JTJGb255a2dyckl4ZGFIb3FBYXVGMSUyRnZqTFhEYW9HMEdJRWUzSDBwbFB0Q1NkVjlXbm1WaDlMME1hT2FyVGc1MFppYkNVb3RJUHFCdjhvTjFJZzRmYjZjTFl2Tk1udSUyQmZsJTJGNnhRT2psN05ISnZtTFVOJTJGVWxaMkhnZCUyQnIlMkZUdHd1QnZhM3FFVHRMRm9vYUR2TTNlcnVrY2ptNG9uWE5CeTF0OHNKYmVwb2tVZ3VTUExib1NQNzdmRTdiYVA2YWdPMmhjN3ZKSUFRWVB4ZktMVVglMkY4M0VqbHdzT0hoanUzbk1CWTZuT28zJTJGUzdreVJRSVlnZCUyRm9NekNtTDZYZFZreGZ6VHQ5TTNaNGRFeW5QblAxdWRnSFVwSHg0RXByZ2QzMDdyemc0JTJGRyUyQkhYT2E5UW13ZjZLJTJCUFZyVG1vbmxVOXVTNm90S2N2djZzSnJzWDA3NlhjcFdUSCUyQnVZWHM4TGlwdGlmem9kd2txa2F1Y2pRWlNJaEVrVXBtQlJTVVRwSUxuQ2ElMkJVcjJpYndBY0dtYSUyRnlVOUNKV0RucXZyaEFIUXk0dnYyUEJVSSUyRmEwOU9hMEIlMkZjaDVnMzclMkJxTDMzVyUyRngxYkZ3TnZYMVJ5Zm9oJTJCaiUyRiUyRkFlTHJMclBjRHRlUERtSWElMkZZNlp6WiUyRjBqNzlONmVSY0x5VHN6MDQ5VjlVN21ra2Z2d1F3OFFzQzFUVWZOJTJCbnl1VHR1b3J0cUF1YkNaSUlFTUFveiUyRkhxek1zY01GOGQlMkIwTmNGQWI4ZiUyRmglMkJNVHlWMm44ZDhyV0NaSkFDTHdFMzBHeG5TdnJOdUs2ZFhHRGpWak9zZWNubDVjMG95eGpzZUN4dnFyJTJCb2JwYyUyQiUyQmclMkZoSWZQODVhaTkzUmJQTDROJTJCMzdFTiUyQlBPYzI4YzNDdVdQME9mTmJVZE9Ed1YlMkYlMkJrYlVtMVJTVXBVSE4zVXF4QXY4Nmg3VlFHJTJCNXZ1MkZ4VSUyQmhyeUl3NlFyc0R5WHEyRDU5JTJCNVJpV2xKVjNWanRxNEFKWGVqZ1hwNyUyRktEQmVueWdMdVJ4SThGd2szdUh2dFZBJTJGcGpNNURoJTJCSGYxQlZ4VWd1cjMwZU1rMjZuJTJGTzd3dUJ0NiUyQnFMUno3TndmcUIyZmIwN2JZUjlsSEdwWkRWTmdjVXJPTEZlaXIlMkI1Qzh0MHhWVFB3Q0lHanVyZzVScSUyQlRpajIxQWRzaTUzY1NRQWd3JTJGdnVVR296JTJGWSUyRnp4JTJCb2RqR00wYXh5aEtncDhra0NUd0MzMEd4blMlMkZpTnVLNlRabVZ4ZzdQRGltVTUlMkY1JTJCdlQzOE5PcDhlTmglMkZ5Q3lxQ1RsczVzSHlScHp4aGU2Zk45MzZRZHJlcGVYYVRJWEJjdnZWUmVWJTJGZzRuRmdTJTJCOTZ6OGtHZlIzeVJZSmlieDNJVEUzOSUyRkJZOG1peDQ5diUyQklXR041NjdCMjdSQ1ZGNWgxTDhlWW54akxuOW93dENrSmFzSHZlcjN1NjBKaWhoazhwNjU1UjVKMVIyZm5JNkVRbCUyRklnRjNCJTJGSEhBdUV1ZnclMkY5b2FzWXhmcnZxUlNyJTJGOTRPTnFrTWN4OWQ5dlQ2ciUyRmxtMnlGTFBCbDNLdjN0Tzk0cUttVjZvS1hVZ01BY0txYXRyQTYlMkJXelRPdldwTTglMkZMZ3o2N2FnQWVYRTEyJTJGa1lER0tzYiUyRjl1TCUyRmtTelFkaURXamh3ZG45dEpvRE1DUDlGbllFejNWTnRXbjE0WGxYYVQ5dXF4bHQzQjJPSFJGNHBwSHRubmdQc2NLZyUyRiUyRjgyajhXTFNvRk9zcm9IME5jZERZSnVaVyUyRlV6NDZkaTVmWnNIcGJVdFNTNHFqWiUyRjNOQXdEOVBjeUw5VjhKVzJ0alR6bXBtUmhTWUlsRjVVZXBMRnpYUjNkJTJCMDdjWTVQc2dneDRTaGZrVTR0S05rQ2xGaWl0SHFzc0tvbmJ4Zm5KNjBSRTglMkJ5Q2FMVHhWN1ElMkZGZ2cxVzAlMkYlMkYxSUQlMkI5SHpBJTJGaGZYRnpmcGZOQ1clMkZGcjkzM0YxTWZDd3ZtOTMlMkZJWDZUJTJCMjRVczFwTzFLZDVvTzIwUFM3MDNjb1RaTzk0Q2c0dHN6cDRFdk9ma0dqMjNvSGZPJTJCdURRQ1kwSVFFZGdRWSUyRngyU2x1TCUyRnJwVDJQNkR0UUtmeGZ3JTJCTXY1QkFtc0RQOUJrWTAxMUJ0eFhURHlmNnpZVnRvVWVTYlhUNzlKaE9mV2JwYzFQNmgwJTJCNEVIdXJ0Y1Fhd1c2T3M4NlkwOXlKVm5Jenk5TTF2U2trYlV1U2kwcXlEM3JqaENuUVU2OE90Uk1YMFVseE01Y2d6JTJGZFBMUVJzS0lCZkZSWm9Uck5MQ2NoN0hRYnpqaVFwcDlpN2xsWXVTV1Z1YlZKNWRqQTNQMWdud2dhJTJCJTJCTlhtdWoxVnY0eUxQeFlJWiUyQndQVCUyRlFibzNMclM2T0xTclAlMkJjdk9EMWYlMkY1OEpwd01iRExSU1ZsTU9XeTdsTTd4MjJEN1p2RkxyQ1ElMkZWT1B2TFBGNFk0QnZWdnJvSSUyRlhhUnZWYnhzd1YyZ21TQ0NEQU9NJTJGOGs2OWElMkJLJTJGTGJieDg1ayUyQnNVZm9jMUVwUTlzMEpZRmpBciUyRlhaMkJNYnltbWY5dDJ6QXIlMkJtVDQ5OVlub2N5NTNONjklMkZQSDZVYXduVDclMkZmVjdjc2NaNDB4cDMzMEhUVHY3R2RLMGolMkJqYVpzeGJVc09GNVcySEdMZnVhZ1VJOFBmcnlJZ2Q5YkpZdEZoQlhjVHFrdHcyWHRvVjcxVGsxZnBpYlRpV3lJOVY3RDhpQiUyQnBxOGpkQVYyZVl4TiUyRk5yJTJGZ2NVNWRQUFlBTUFrVDBJQU83JTJGQ0RobGg5YVgxaFlDa1lMRDlnJTJGVjhPYTFNdUh2UzlxTFJBd1ZoM3FwM2RGVjRMTjV1S3Q0WFNrWmNCUVhpZWNNUXVXa0luRTlXdEglMkJ1c2E3YU9QdGtHSEJIaWRoSUlFMkQ4RDNNeHYxNFYlMkY5MTVZdU0zT3luRU1VcWlwTGlKQkxJSSUyRkhLZmdURTlJWVdMWTNwOG5Ca2ZPNnk4JTJGOEUlMkJQZlc1S3VIZ2w2enhZNjA1VHZFRUhYUHFPVXZtUkg5TTA5cVdQSGhSYVp6ZTclMkZmME1WYzJ5ZVRFNkc1JTJGU3kwRUJIVjclMkJLUENPalNrd1FVRXh1azl2Q09UVkJvTURqVGdBa0ZxVWVrd3FCd0ZIYk45UHdBU25hNG4yTDdORHpxcDdGYlVnM2Z5dVlZZENZdyUyRkZnZ3ZFT3dscCUyQmduUm4xYlg3Q0ZnZCUyQnIlMkZ4c1p1aGdZNyUyQnh2N1BYcm8lMkJzJTJGdGFQRmFEJTJGUnR1T2dmWWkxcDU5aGVpWGFsUEU5VE1rMldKMDlhbXZWVGo4ZnJWSE5SUDVuUDIxQVBodnVRUUxtRVpzY08zaENhQ3YlMkI2NVhFNlF2ZkRzWjJrcnRPNDc5WHNFeVNBRVRnJTJCWDBHOXVuWEJkMVdUTGZ2YlUxYzZCMGJPNnd6OWVDWVRuMnVpeExWcDUzTHpScyUyRlZwcmpGSWZSTWFlemkxMElzODc3NXR1UDlWTzBMWG53b3BJdG9ISHpyTXFpd3QyVTlmYXJ3dHIlMkJ6dSUyRjNFSkM3YXFLVFVhYVJPaGg0UUEyWkMxQ1JFeDNlbVdmT3NWOVUlMkJnUUd0ZCUyRmxKeTlJaTVaM0U4bG9BSlhpJTJGckZBZUklMkJDNjUlMkIxcHhqMVhYMEJGNVhNTzE3aXozcCUyQlpQMzNaZWRpNEM0VyUyQkRhaDlNUHJQN1hqRnlyZWR1aUVYNmc1dE5zMmJhN1IxJTJCWTMlMkY5U3BkeWl0N0RJNiUyQkxyZnd6V3EyY2o5N0trTnlHVkRleElRQW96JTJGdmc0YWklMkYlMkJ1VHhKcVk4eTRRNTVDRWR6bzU0bGpsQTBOZmlXQktJRmY2RE13cHZ2RjIxaE1OJTJCSFlQcFlzRkxxRFl3YyUyRk81cCUyQmNKJTJCZSUyQnRSQ2xFOVFuNlhqUnplWHVadlh5Sm5qTkc0T2s4VEdrR2I5M09qaVU5RzZ3NE0xdldMZ3ZtaGI4dmhGSmMyY1ZOeSUyRjF6QUZYJTJGU3NSb1dmQ3F0d2QlMkI1V21ZQXBhN000c25tc2psdGczQVdVN2ZsVGc1ZVZyUVJBZTVYRjhweHZ1U01PZVhmWHNpaWxkeWFaSzdNREF2MHVQMkNRZHZteWpmaHJHbHlHOUJiY1EyYks1Y2NDb1dicjZaODl4YWp2Nmd1NnFDU0slMkJMMzZiM1V1ejNXMkhYM3BEQzJ4RGFnRkQ2JTJGJTJGMUk1ZnhqbHRoMTRGdHJRZGNxVFJkTmJsTiUyRiUyQjQ3cVdwcjJFYWh2RGY2JTJGVUh2JTJGOVNGN1RZUnEwWmI3JTJGMTFBWnM4ODd2SklBUVlQejNLYlVYJTJGMDJzZnczVHgzJTJCWnMxNDRLciUyRjc3c2ZTRCUyQiUyQmp4TExGMzBtZ05vRmY2RE13cHZ1cWFDJTJCbW16dUVUWDhmR3p2NHVablRENDdwMU9kY2l2Q2lrbUZXT0g3OGVvN1RXd2c5R25QcTJKU0xTcE5aaEpPUyUyRnBsRkpWJTJCMnRkTyUyRjBQRFdabkxuOFdSUlozaCUyRnBzOTdzTzlRMHBkN3Y5YU5sdSUyRmpYUG5WZHZNWkR4NTJFY204cThuc2szcEhoSDlHTzNrOW1NWlVKdERFWjExZVd0dVY1R2M1UWs0bnd1NGxFNEYlMkJmblNCYVRsbUl2WGd4ajJScThkdjZpbEdsZFFYMW4lMkJSdU1RS2lVWGh2M2dNOUtySHclMkJzJTJGdGVPVkpYclYyTHpMNWlXemNtR0htUUNjRGVhRURxUmlXak8lMkZKeDZObDlScWNqJTJCM2FIeGtNM3Y2TzRtZTJvRGZLVFhtNUVvQ2pQOCUyQjdkeXh3MFh4M3l3aXVZdGVjc2Rja3IySDkxSDhFbUthQk00azhBdDlCc1owWHlHTnh2UUpienY4M016cEI4ZDA2bk11eGJ4RnBjZzh4VHltVEl6eHl1WTRFJTJGTWpzWE9KTHNYUDdWV1ZmcFpqNlFkck9wUWxiVXNLRjVWa29uMlkzakt4TCUyQjgwJTJCbndtTTNrZUF4JTJGeUlQczNXJTJCRFF4RmYyc2RNN0tLeTBGYmVTd0IwRWNqc1JYJTJGcjRZNEh3U3hyTjdNNFkxVXhSWE93STYlMkYlMkZGd0glMkZvZEJkcjV5cHluYlpSYkFPdUVoalBRd0slMkZRSUR4JTJGeGRLa1hrZ2dWSUM3RE9Va210MVA4YjBWa3VHZmdtQkg5Vm5TZUglMkIyRGhWMjVMQ1JTVkxjUGMlMkJvNUxWT3Jnd1JJeUI5OEhBJTJCNWNiS3F6eUkzQlBFamlMZ0swWG90SDEzJTJGNTlUdGtldU9lUXJvJTJCYmVPbGk5Z200UXkwQ2pGRzFTRDd0T0t6JTJGVHl1eGR2dzlVVHRYWlpKdDFFeWFiY0NNZ2drU0lJRkRBb3olMkZoNGhvUUFJJTJGVElCOWhsOHJYTWIwWHl2UjM4clBEJTJCaXpwRUE2R0tkcVclMkZMVm9wS3lsZHY3WHNQbSUyRlRhNnNkYm4lMkJKNEdPVWY0Q1dLMXpoSThqc0lLYnVTUEpFQUNKSEF6QWNhb213dUFweWNCRWlDQkd3bXdEYmdSUGs5TkFpUkFBaVJBQWc4aXdEN0Rnd3FMcnBJQUNaQkFvd1MwTGFteXFOUm9IcXU1cGJDcUhaQUhJZ0VTSUlHS0JCaWpLc0xrb1VpQUJFamdZUVRZQmp5c3dPZ3VDWkFBQ1pBQUNkeEVnSDJHbThEenRDUkFBaVR3UXdTMExmbjc5JTJCJTJGZjVyRloyOGRvOGJ2QTRoOFpVQVBVQURWQURWQUQxQUExUUExUUE5UUFOVUFOVUFQVUFEVkFEVkFEMUFBMVFBMVFBOVJBcnhvdzYwbXlVQ1lBJTJCQzlPb0FVJTJCOU1HV0R6bVFnMTlUcVFmcXdkZERhYm9GSGRIM1VnTFAydSUyRkpXcnVhTkZuaHhNbUtySEFDdUNWMVJWWTRBZHlTdWlJcm5BQnVTVjJSRlU0QXQlMkJ4UlZ6M21HVmRFSFVzeXJzTXhkUlF5VHRHcHMwMFo4JTJGRjNBRSUyQkZCWmllWmtJZkxGcHlJQWUlMkZrbEVQMUlPdmg5SjBDenFpNzZVRW5yWGZrN1YyTldteXdvbVRGVm5oQkhCTDZvcXNjQUs0SlhWRlZqZ0IzSks2SWl1Y0FHN1pvNjU2ekRPdWlEcVdaRnlIWSUyQm9vWkp5aVUyZWJNdWFpRXNCVFlRR21wNW5RQjR1V0hNakJyMlRVQSUyRlhnNjZFMDNZS082SHNwZ1dmdDkyU3RYVTJhckhEaVpFVldPQUhja3JvaUs1d0Fia2xka1JWT0FMZWtyc2dLSjRCYjlxaXJIdk9NSzZLT0pSblg0Wmc2Q2htbjZOVFpwb3k1cUFUd1ZGaUE2V2ttOU1HaUpRZHk4Q3NaOVVBOSUyQkhvb1RiZWdJJTJGcGVTdUJaJTJCejFaYTFlVEppdWNPRm1SRlU0QXQ2U3V5QW9uZ0Z0U1YyU0ZFOEF0cVN1eXdnbmdsajNxcXNjODQ0cW9ZMG5HZFRpbWprTEdLVHAxdGlsakxpb0JQQlVXWUhxYUNYMndhTW1CSFB4S1JqMVFENzRlU3RNdDZJaSUyQmx4SjQxbjVQMXRyVnBNa0tKMDVXWklVVHdDMnBLN0xDQ2VDVzFCVlo0UVJ3UyUyQnFLckhBQ3VHV1B1dW94ejdnaTZsaVNjUjJPcWFPUWNZcE9uVzNLdU5LaTBqaTloOWMwdkQlMkZUT05aeE1IcVU4VE45Z3VjUUg0YnBIZDRZUFJ5eVFXRWh0bWZaMEFkTGxoekl3YTlqMUFQMTRPdWhOTjJDanVoN0tZRm43ZmRrclYxTm1xeHc0bVJGVmpnQjNKSzZJaXVjQUc1SlhaRVZUZ0MzcEs3SUNpZUFXJTJGYW9xeDd6akN1aWppVVoxJTJCR1lPZ29acCUyQmpVMmFhTUt5MHFUZE5uJTJCSnYlMkJYdThwdU42RCUyQmp5JTJCcDJFWWtuJTJCdjE5JTJGMDklMkZlYWhzJTJGMm9PUDBkdHZlWHpteFBlNDBLYXo5bHV0JTJCb1ElMkJXTlRtUWcxJTJGcnFBZnF3ZGREYWJvRkhkSDNVZ0xQMnUlMkZKV3J1YU5Gbmh4TW1LckhBQ3VDVjFSVlk0QWR5U3VpSXJuQUJ1U1YyUkZVNEF0JTJCeFJWejNtR1ZkRUhVc3lyc014ZFJReVR0R3BzMDBaMTExVTJxJTJGME9HOWx3U2UwRUJUSXpNR3RUbWJ4S25nZXQ2Z1UzQlk0VDhaUENpdGpsJTJCcW05TUVpSlFkeThDc1g5VUE5JTJCSG9vVGJlZ0klMkZwZVN1QlolMkJ6MVphMWVUSml1Y09GbVJGVTRBdDZTdXlBb25nRnRTVjJTRkU4QXRxU3V5d2duZ2xqM3Fxc2M4NDRxb1kwbkdkVGltamtMR0tUcDF0aWxqYkZGcCUyRkpoSHk2WHVJakozRU1uQ1VlaE9JM01Ia2IzRDZOdTdpSDVsVVduOEROUHJUNWpvblZmcDI2dTB3T29VJTJGJTJCWW80Z3RRTU5WOU1McDZPUWFXeGVzMVJCNXZhSDAlMkJ3NGZoNWZzZ2ozRzhzU3hNTmolMkZUOFBjWHVCdHZLYmVxSEQ3RHFnemsyT3UlMkZZZHJkR0RpZGRBZmZPRTZmNGJXdUc0bnlxTW5CeEpaZDN0Y3NRdldrcGclMkJtaE1mUHROYmszM1IxdlJnJTJGNzJtWTQ3YmNoU29YQmR4Y0w4QTRKUXliaXElMkZpVUlidmN5MEg5Nm11djlrQmx3RDltRnFJNTF2ZkclMkZ4JTJCZW5tdDhuemNscFRVOVpKOTJ0ZEhXNnpXYlVBTCUyRlJKZldBMng4dDB5NldQZnVxeURMZlh6ZG1XbVB4eVhYVW5zS2RuSGVIUmpmMVNKeEQlMkZiWU5WTXZ6a09TanBnaDJPcUVvMlU3Q1B0NERxMlg5JTJCJTJGVDZKcWlGVUozOU5pZTJIOEZOYTU0NUdyOXVtWjFWd0h3UEhOYWF4bVI5cExYSnBuc0J3TXBjeDJlUjl6aiUyRnZUJTJCMzJPNCUyRlNxQk1IOGtMRSUyRiUyRndvd2JuMmVBU3ozcG5XODY2TWMxeGZWTWJhb1pITyUyRnFpJTJGYkwlMkZIRm5xM2xkOSUyRmo1M25PblVveWFXNGY0ZWNtYWNlM21VUiUyRkplNnkwZ0w3anA3dVBVN2o1ek45UG0lMkZ6TGl3NWRtaXlYSzMxczZvUFV2SE1Zd3k5aVdvSkZnZVBNS3p0dzklMkZmTUwyOXUlMkJQbXp0OWxaYUYwbDA4ZHBDVmNNSXMlMkJ5eDVmcHFTeiUyRkVvOGRsTGVsUlk0UmRXeWtPTjc5VURQSiUyQldSMG1jOUg1YkhaNzVDQyUyQk5tb2V1Q3hUV1RYeHZBbGNFMGpkUG5yVEVqVUJDVkYlMkZoR2N5NVoxRnc4c0Iyc3YlMkJrdkljcDZaYUY1TEl0VDk4ZFhJJTJCYUNHRnVXM3lhNHR4RFBWVGFOZjlZdnIzaUdqOXFTa3JwZXNvOVpWTDI3dlk5ak1sdGFZdFZpdjhUSDF3d3IzeW1YUHZKTnpIcXRnMDMwOHdKbHBqOGRsVjFKN0NuWnglMkZoemEzOVVpY1ElMkYyMkRWU0w4NWpzbHNhWU9WdmJqSWpQM2ZvemVtdXJaJTJGZjRES3Zzb2djVkZqU1gyNmFoJTJGSjIybXh2WENjWERJZXVXcWZQbG0xTXM0NnFvbjNiejlOSHlaclplV1FQVTlrNWxReTUlMkZtSzVtSEs4a1BHR1cxaGslMkZNTVplWGVySTVMNm92WDdtWXNLcVVEbk9tMEpTWWMwM3ZqVyUyQlBuZWNpaWtpbXd3Q0tPJTJCejJHc0c3Z0daYzd6OXpkQ05jdUt0bXJ4c0xudE50aTclMkJlcXh5SHV3OUlCRHV1eW5nJTJCQjR6c2R5RGxpV3BDOXF2cndHWkxuQ25ocGZxcnFnN3M2YnFjSjVSRjVYMXMxSDh3RVFualJTRElybXRqNTVzQlU4eUhHd0ozSERvekRQbGJ6UVNkU1FuZUhwYmJWMXFUSmMwR2NhaUslMkJHc1VVeE5pQyUyRkRiQlBSNUw5UXJoOCUyQk81cXlRUCUyQktoV1Y0JTJGeXFyRXoxcGFrNm5Oc1clMkJ4M0kzbDNjY3d1ZGp4QUh3OWdkV3UlMkZ4TmRhTTZ4OHAxejZ5RGRuMWw4ZHRCUGFxVDVsZ0tiNXFVdFdzYjZZNnV2cyUyRm1pc01QUjM5ZVB1Mkc3YWczQ2ZWRnk5cHQlMkJzVUNLZnJiQ0thY3E1ZlVuJTJGUG9KbyUyRnJrVlZrWDlESnVMMCUyQkpWeVRqWjhkeU5IZDN2d1hoODFUNm5qQjFtTWVmUEtWeVc3MWJHV1hPdGF6WnhXbDB5T1M0cGg4aFl3bWxuUDg2TTJMdTJTZkszcjRQeGZjVHRlSnd1eVUlMkZsdWJ5ZGtrcDhpdVQlMkZkc1lSdjB5ZTdiWjklMkJWc2cxUEZPR0JFZHh4bWo0MDlvVVdsOHY0T1B2JTJGTGRqQyUyRjIlMkJGYlROSHAzaGF5M3VHJTJGakolMkZuNHMlMkZoNW5yQ29wRmQxaFRyaE4xV0tWT2R0VTBEVktxWUxUdnRnYms5b2clMkZacjJzMU4xZXdFdVh3SGc1QnVpemhZamNPR3I5eVJJdThlZTclMkZ0M1RtUjA1dTlhdm9nd1NKMXJwMmI3b2VhUHFRYWFuTlhuWGZUak85UE5SJTJCU3Q2eks0eXBDZGRaNlV0TUh1VUk5OUtoQmN5YW55MUJaMWZMQk5oemh1aWMlMkJtSEs2WTBJRmlsTU54bGVCQnZsdXRUVCUyRm43RlByYktmeiUyQjBuRUQ5YWlPZSUyQno0Mm5UeTJ2T2UlMkZIYlVsSlhTJTJGWlIlMkI1U2tqeUg0cGE0ZTBsN1AzTUpKUnBpNWVwYlclMkYwU24xbERySHkzVFByWU45Mmx1enJvSmxGaWRWQzVoRDU3WkhWN2Z6UlVFUE52eHpvdmlkTWwlMkI2UWY2M3RSdjNubUVrcTB4ZXJ1JTJGbjJJMFBKYk82eUt0T2d5Y2xhOEVwJTJGeTRxZndsTWVuaDhaMHNmbWVxJTJGYXhzUHBqdGFqZHBKRHh6Y202Mm5qVTFOZXo5TEhMSkZnTzJlMXlTWCUyRmFqRmRDZGRaNTdZNlpqQVZnZnVTSVpMeFR3enhuc21MYyUyRkRnU24lMkJ0cFZzY2w5Y1VWbiUyQm9ZV0ZTeUhZM3dJNkdXUjZtMm5vRUFBQ0FBU1VSQlZHWWwzNmswUDA3S1BqdHhkOVdHcnlrbm5OajU3SG5lM3EzanVyTnJqRmNxMUczZmZTcXM3NDZ5Q0M3MkNLbGJKbGZ1Q0g2dWpJTVRKMjd3SzQ4SU9IVlJhWEtQMmd0T2tMc09YMFJMMWZTd0VaUjBXczBqRUElMkJDcCUyQnhXMDRmOHpySjF2SjRQYWQ0YlRLdXY5WHdZcDloNnR5bVhrQmlkSjdWOGtQT0VCeUR1UkluT1RCMGZYQXdOMWducmclMkZYeDdMcTVLbUk5c1gxRWFLSWNkUEdtcWZncTNtZkUyRG5uR2Z2VUtmdjV6T3NFNGtjVDhYenRkc3ZmVGkwdmwzRVRzNlQ5aXJZbEpYVzlaQjk3aDRUayUyQmQ3MlBxNklwbGcxMkMlMkZ4eWJYRnl2Zk0zUldSMVB4aTMxMGRkUDNxU0pkMkFSTkk5Y2VxaGY1b29DRGNUMjNWd2Z2N3pYRlNTRXdvYWROSzlyRyUyQjNOdSUyRlQ1RnFpVlVaWDgzZFdmRks2bDFXJTJGSFI5NTZ6eHlGWDdPRmpkc1ZLUjZDY3l2am1abGJyUzR1ZFolMkJ0amxGU3FIa25ZNWY1NVA2bmxwbko3ekJlWEhXcFB4VEcxSk9INnJlUHVFZVFhbzNGdldjWDU5MFVKVEhSOHZLaGxJNFVsRVBaZzglMkYxVW13eU0zRTZpWnU4cDltTjclMkJ1enJtclM1aGhCTSUyRm56bFg4QjB2cmlPeVV1SDI0R1hmRlZiWjNzdGVObGdGSG4zblRIUjdLQXUxZkZpOG1VOTZQRm5yVEt2NTRDcWVUREtGN3NwSUJmVnFQdXhBZUQ4Y0JJWlRmSkJ6NnQwdzBZbkF4Y2VhUG94dmVkN3NjbXcwVmMwSGw5JTJGa1luUEVxV28lMkJSSTV2SHQlMkJsNVJLeHFlYkRnZTdzNGtRNE50Yng0WGd3RjUlMkJrcnJ2UXVVTjl4R1plakc0c3ZrcEdBTjlMOHF2NzFDbDdQZHJtRSUyRkhkMlRRYnp6ZFp1dnZycWVVbG1aUHkwSmdWYlV0SzZuckpQb3YlMkJtOVJIYTZ4UzRqeW9pOTNweW1jRmxlT3lRNCUyQnNidSUyRm5MZmpYS2Fqc1NtSlB5VDdMSW5pVCUyRmRIV1dLMUwwdnVXdmt0SkRMdXJnd2Z4JTJCJTJGeiUyQnZWYzgyMlJUdWlxc3R5NVBaJTJCa3FOMzdxZkU0c2p1aDJmNzVIZnp0N0h5MyUyQjNsaHB2dWZQb3pvNUcxNFFyN3h6dFpJOFN4JTJCNyUyRkNIbDhNVTgwZTU4OGtQc25MSGY5U0JtZTNnZVJrMml4NTRObGdRWkx5em1WSWl4SzVjbXg1SHElMkJKRjJ4TzVKT3RaOHllZEIzbFRIaDR0S3FidG43SG5jQyUyQlNEQ3oyZVIlMkJKUTRncDR0VFNOS21DbjlzdW42NGo0TGZTeThhdVV3dnJxSVBOalh1S1BnVW1KclpZUHV6d2NDTVczUDgwSCUyRnlUbUVYRHhxNXF2OE1GMjdPSzN2NTdoZ3l5V3p0S05UZ1F1b0dyNklPZVdSYVZSSGdIbjNyRWx4emNUazRuRnBsbyUyQmFFZDZ6diUyQlN6Y05VTFI5aUp4TGZZaDE4M2FlZUR5NkdDZnZBS3AlMkZFNHREdjRrY2RIJTJGREJYTWlQT2o0bzFjMG5FS2RzVzlWWWZKVnNBTDV2Y3B1MXo5M2NkNzZ2ZmtocjZsVGZWMzYwOCUyQlhzUEdOdFNicGNESzFkNTdka255UHU2V09TMWNMdmpuN0pjbllaQ3lGOWxIUjVucVVyekxjbE56M3E2dTUlMkIza0olMkZuY0xLN2pwZHRkd2ZiWTNWdWlTWGI5ZjJtNWZ6JTJCcW4yV0RrTjM5YSUyRjklMkJtczAyMnhLcW5yUzM3T2l1M0NLR2VjWERJZXVXb2ZwZFViSzgzMyUyRkpreE5qdUwxZXhMZzRuTDhneVV3emZ0Y2dodHZEOWRIcWZuOHdENVVWc3kzazh5cHVhNmxOdjZNOTFta1BIM2pPUDF4WmFFTWs0dkt1bWtRbkMyZHpTRFRGa28ydDE0WkNxVURFQ1hqSHplb1VmV3JXVmgzeW56TjhWdUY5NWFyNzg3VVFWOVhWdm1mbE5ZdWZ0dDdXMkhJYkhDN1hpSDhsJTJGTGg2MVBPUk9lcCUyRm5nTzNXd29IS3FENlBWOU44cmZlZE9kUjlrTWNmWDdRRUR3VlhUQnpPZzJONXRPTHJiSUNPUElhenB3NnBleUhrSCUyQjVoTXlhTThCbkVJTExDb1pHcHkwR011bjNLYmFxSyUyQk9zTzZQc2dWbnBKdldWalZ1enBkclBVMXNqaHBVclY4c0dVUlgxQzEyOE9MVzdWODJHVE5mZ1U2YVNzZGhRNXlSM3dWUHdEZmQlMkI1bTdITTM5NTN2JTJGZzhIc2V4VTMzMCUyRkdrcWZtdWVNdHFTa3JwZnNrMFIlMkZwejZld3VxdWZvbGZjQzJ6eXZCTnM5UmpIYnk3bjZmc1Y1OFpaVmNTZThyM2NmMiUyQmx2cWpEYkphbGVYODVZNSUyQjgzeHltMmlXMWIzOSUyQncybFpsbVYxRnZOMjFteFBUZCUyQjJqd2t4byUyQkI4Y2hWJTJCJTJGVEtTdk05ZjdZeXpwb2RhaXR4VmwzYTVSSW9oMVhkeUd5WFYlMkJlRCUyQnRObGNYbyUyQkQ1QWZ0U1hqdkxrdTViYjZ2SE1jNlRzQ2xQdWpkQ3g1ZyUyQnJMTWllZFhsVHlZWG5wOGZPZWh0ZDYwV2plN0tEcVpQQ3lyRFJieEJOdTM4VGNxZGwzJTJGSVFldGNkRnBUall4QmFnRXVqZTV3YyUyRlc0YWh1eURPOWNFOTQxSW44bU12MTNGTzFPVVFlRXpFUVlBVU4ycjZZSUpjc05LbG4lMkYxWnk0YzV5SDdrYnNhWDkzak1jZnFZNTl1R0Z6RnFjMUNONmFkWm1RZnVtcXpGUWM4N0w2NmJSVFc3d0pTcUV6VTU2TlZBd2ZOOUJoUDNKYiUyQmg3ZlU1TEVTUWhabFpSN0ZHSnpDSTB6UGM3YnY2TVglMkIyRXBjeiUyRkpoOW54TjN4ZlBaZ1NZVDUya3RyeTBwcWVzbCUyQjhRTDRVNTlQSUhWbmYwU3Y5UmFacFhubSUyQmFxeHpwNGR6OVAyUyUyQmZlV1ZYRW50SzlwbjdFVTMxUjl0a3RaVGxrakxNYiUyQmszcXclMkJ0czNKekZUZjA3NVhROHRrbXE1SjZxM2s2SzdibnhzODVqbVNNUjY3YXAxZFdtdSUyRjVNMk44YzVhdVpsOGFURnlXWjZBYzVycFIwQzVidEhuOTZaSjVtTGtJZ2Z5b0xSbTdpNmhkZXhpYVcxSlc0Yzg3eDVFYmo0QnlmNDZPOCUyQnFMNmpoelVXazV5V3NZcG1IMTl6SVR3bkpnNVAxS202S1E1YkRwN2E3UTN4JTJGYlA1ZTdpMkhYYVhYN0J5Zkg5MmZMJTJCVVZoNWV3VHNwM0ZsTkhKME9QVThrR1BOMzhDbFVCdFQlMkZQQm5VQ3VCRnJkc2FNbjlqN1A5V0djN0lLcGFEaCUyQloxMU5INlR6dkF1aUZ5OHFqZU1ZZlI5YVNyTzFPTmh6MktzVjR1JTJGWUNsJTJGeFZjc0hUMkl1ZWR4UTZUNVZmUmhsa0tlUEdaSkZ0Y0c4ODB6T2thb2I5WHpRT094Zk5HQVg5OHhkcVlsRnZubyUyQktGbnZFNGhUS2EyYUkzRlJ5UU1LSmdIdXNTUGRIODlqbnQzNyUyQjFuMUpMOHRLYW5ySmZ1RWVkJTJCcGoyZXh1cjVmNHBkWXk2enlmYk01NjdFTzN0M1A4elVsNmZ5eUs0azklMkJmdTAyQjl0bGRXMlRIVWN2eHZUN0Eyclhoam5INzVwVnJmMzczMVM3ZFpCMVpHNU9IbCUyQjRzMjk0NURjJTJCRmt5SHJscUgxWEJhZTFnNXB6QzFmblclMkZDTVhLNnJ0V2F6MCUyQkMxJTJCWHBabllKejVUYnU4Wmd2MHB3dmo5SHdlSUQ5cVM4WkNBcCUyRnJVbTc2ZWVjNFVuMllQNEZ5ZjVTT1RjYUElMkJ1TGQ2SkM1cU9RNkllYXhUSiUyRkpOTEt5UU9MZEhtWGJmeEZJNExGNE0lMkZsWTRqTU5pY2w4czVlWkdOUkpWJTJGODRidkRBUlNVZnluRWFxQVI2a0RPREh4SVl4STh6ZmRCOFRwTmJQSTFvcVpvUHduNjNPTHE4eUMxeWV1Tm1OUiUyQldUSWRUaVFXdVdqNW9rSTBPUkJNYXJlWERMdk11emlTZXZEZnZVczhIcTdzZGglMkZsUmhPRTdoTVNSZWo3STBkemo5dVlyS2UxaXJ3bjFibEVwcE0yNlBzeDRiU0toQWJVc0daam92bmY3cm43TW4wQiUyQjFiWTUzMDBJTzc1QVFQdyUyRjFYY0YxTmpuS1hrdWJrdEs2bnJKUHV0Q3VMVzlmeGlyaGR4RiUyRlpMbGhQYlJuVVY5bEJLTlpPNVRYSTRueFoxaWZ6THpiY3FuWkIlMkIlMkZZRGZwQyUyRnA1cXpNMnpLcTUlMkZtakRyRlpsS2w5dTZUZDdYalROcXBYJTJCdmVQVk5DdnhzU3pHbmRLJTJGOGlRV1RBYmlaOGw0NUtwOU5BJTJCOXNkSjh6NTlTQnlKUDNwaHRYT0lXVmxzbkx2NSUyQldaNkJjdmltWFE1amklMkZXbnklMkJQMGZCNGdQMnBMeGtwQ1FyNiUyQmRpTSUyQjElMkJWWjIxZndoQ2FqZktNcjV4bUFjbiUyQlVqbGNjWSUyRlhGR3FtT3N4ZVZWdWZRMWNYNTNSJTJGJTJCVnRzaFdONEw0bThyVDh0VlNIOSUyRm9YZCUyQlBHVlJxYkVYeVFPVlFFdExSYVBmYTMyaUUweHl2ck44Mk9ZbDFibXI0NFBvTlh6M2pSMllKWFJ5SVllVUwzVTR5RGpVdmpzcHZvQVREMmExZk5pV2Z6ek9iQzNyYWRLY016U0JaMDY1WEhFYjRuUVdoMjF1VTJWMXFnOUFuTkxHT3RySGNBTyUyRjNhTGQyZlVKOEgzTHVaa3I2QXA4YnpHZTclMkZqZSUyQkVQOWV2SmRXeEpEa2FycjMlMkJ4enJ6NmV4V3JMT1ZVbWZlbnF1M0xzaTlWV1JZSHZnVWxSdGVxTlZhcU9XU1pYOWtlJTJGMDdtVzRmYnpPSSUyRmJQWkIlMkJ1cjNvTkR3JTJCM3glMkJ2TjEyMTFiOSUyRmxxNjI2a25wdDc2dXRtY1BmQSUyRkVUJTJCdGpZaHdmR0k5Y3RZJTJGbW9EZFdtdSUyRjVNMk44Y3d1cjJkRjdFcGZsR1NpSFZKMjNkT0x0Y294ZTZKamZ4T241UEVCJTJCMUphTWxZUiUyQlN0dDBOQ2NvJTJGUkhzd2xVNUtoa3JXJTJGM0VHS3UxZm9icWkyNVR4b1dMU25JN2xEeVc2VFVONzlEN2pmUTB0dURsWkdXUHhGdU9veW1UcWVERXE0TVVuVkhVSSUyQlIlMkZLcXo4UGRkNzJJbnElMkJBcXNiZzlsb1pZUGE0OWtaZmplS3pVa3o2bkhlbTM5UFkzRDVrVG5sNFZyQU9lN1FkYlBGWlY4TG4lMkY3UmRTYUhPUWRaZk1UQmpZY3JsaFVTckcyN3NRN0N6VTVMRmwzc1NRWVp4WXJUZFh4QVloZmdVRklYUiUyRjBhTEZQYllqMmVwUTk2bkNJbkJ1SVU2cWowS0tSSEZXM1h4cGY3WW5ocSUyQkhtM0FQNVZkdTd1YXNmTnF0dHhuUGZ4N3ZUOWN2cnU3WWt6Q05kMTB2M2tUcDRiM3YlMkZIRlloeHRmR3NKWlpmZWRiajNYdzduN2VvdWZ2eW00NWpwJTJCcUY2OVNkY3llMGZrZjZFajBxS3VsRkZ3WlhOcHZYczQlMkJQMkZpTlhieXgxRiUyQk90eUg5WTltMDdWMDVZNFQwTXg4emt2NzkyM1h3WmxKTUpFdWslMkZwMTBDa2hjNXlzY1NSblBITFZQb3ExTjFhYTclMkZtemxYSFc3RkJiaWJQMHNjc2xVQTVhTiUyQkloTk40dTc4N25mdGdmODdzNFBaOEh5SSUyRmFrckdTOEQ0VGJhRllTYm5kTzQ3MGZQV1RRTG52TmVjZlFOSU42WGpqV3NwMzFYSG1vcEwzM0VQM0NMelA1NzI4VyUyQmxsMzZ2MDBrOTU1OUw3UGIzTm5Ranh4WlNOMzRtdnFRcWYycFk0SkxCSllRR21hUk1udUw5SVZFUldBZE1uS05nS1ZBSTlhalVPN29BYUdNS3ZtQnJscVlxN2YlMkZWOFNGZGNwUExzbkt2MWd3dW9FWm1ZczFUajRNNzFGeGtJV2c3aE82cHElMkJ4RHJmS2VDYkRVZiUyRkxMVGVocGg0cHRLdW80UE5uN0ZHY2lackdaRE5uVjgyT1pzODEyNVJJUjVxZzlJbkRydzc1YjRLZ2dSM3plb2MlMkZhNW5idnolMkZkNTR2Z1hZN3ZkVHkydWJiYUF0MmU1aXZoJTJGVXBaSjltdGRIRTZ3YTdwZjRoZDRFSzk4aEx3MzQxbDBkZEV4dTdlZDVSUlJOQW1VWDNMZG12SEklMkJoUHBaOXR6eE90cWRydnpDMERLNHROJTJGc081QkkzNjZyQiUyRlR2RmQlMkZ0ck5TUnlLZnE3TXB4aUdPU0ZUOFAlMkZBeU9SNjdheDZFOUpWNjF6R29yS2NjN0h1dVhIVTVodFJ5JTJCeWRSbGVVYkt3ZWtxWGxhaGRqbjAyNEo2UDglMkYzWFp5ZWo0emt4eG1UOFV6TlM5aHlDNVYxMCUyQk5JcE55YjFuRnVmVm1LVEhXY3RhaGtHOEhsYXAlMkZYYXpEdlFQcklGUnp2SWZKWU9qbXBkVFRTQjFpOE9rcTVBZ3NmNXdHTFNwUHpNZmo0UGxlWWtRNjVGdGdSb3V6dFNDVndCNjNxZzl6cEZzbXJuRzU4RDFPb25HdjVvSTFKckpNWTdQQ2R3U0ZVWUM3b2hQS3Y1dFU1UkU1bU9ZU3Y2cXZsZzhhSFdGbm9CSHZJeFhvJTJCS0ZsOUx2emZGUFhITTVWa0hSJTJCQSUyQkpXSWYzVjhzQmtiNVVLQjkyZVR5JTJGU2RQdlU0N0U3cm5Ib0RkJTJGczBHRiUyRkYlMkI0d1lPJTJCYyUyQlk1JTJCYVpUJTJCZlh4T29IemZIYzNYM0NaJTJCbmx0Y1d3RUZiVWxMWFMlMkZhUk8xN3ZiTyUyQjNXSUxmRzJEVmRMJTJGRWg5WUFLOSUyQmRWZnJBTjdIdHJRN091Z3Axb2t5WFI4WjFaJTJGZnpWcVVVJTJGbkpRZGlXeEozJTJCZjlGaE0yJTJGTVF5dDUwdFNwRVYzYlg5cHRYSHNTJTJGM0s2cmR2cjNjVWh1eSUyQjJzckIlMkY1OWRidWQwWWRMSXVmSmVPUnElMkZicGxaWFR1SDZnNDV1ciUyQnd6cTM4MmZaOVNsWUphZ2NzaHZsJTJCZDZHNWxyM00lMkZ6ZlJlbjU3eEIlMkJiSFdaRHhUV3hLTzM2NlAxZm80RWlyM2RuV2NYMSUyQldJbE1kWnkwcVNXZDZHTjdoUjJXWmpraDRVR0pPRzdydFpQRUhTdGtNaCUyQiUyQmFrSmM2bXVjdzdsUUlIVHBwcExDU1J1aEcxMkhicmNBZWRPU3ElMkJ1RDdDbFVDdTBNMUg4dzVFMW94WlJrdTUybyUyQnhNckJaTlZWJTJCb2lXcXZuZ2w0T2ZQdENDbUZieklSYTg1U1J1VyUyQnpPdW1vJTJCbUZQSnU5TEN6NSUyQjI5VDZzbDVvJTJCekVYZyUyQkY4JTJCT0RibkRldmVGa2ZzZlhJVjlhQzMzdjV0JTJGVWpYaWFxYW5BdkNTNkJ4S2xhdkQlMkJyVUtUcFM5MUhmMVY0JTJCTSUyRmE1M1hmamE3aCUyQjJpeEoyN3pWazkwUzkxMEgxNiUyRmd4UVUlMkJxaVY5MVQ3TEdVdFM4VHlYSE8xZ242VHVYWjNPcXVzRiUyQjV5aWo0TjhsMnh1Z1ZVc2ZwbjhwR053ZDdxS2xYR3lITzFPM2JGeTdVbXdTJTJCdTJYZEhQaXhYWiUyRkh1eTdBcGlUMkYlMkZSZ2ZYSVY2WDkwZG5PSnRFSTZ4bXI1dyUyRmwlMkZlYlp3Y1NpUlpZR1IlMkZDJTJGU0R4bkxyeXk2JTJCa3J0djlUNG50cGZIVDZTNXJ2dWVxZldyT0klMkZoRjF6cXJnSyUyQjc4dkZ0WERxc3E2dkdIQ1huQ1dRaTg2ZHduak1QZ3BnN3pSeVZRM2E3SEt0THhxZElmJTJGcUxPRDFuRmN5UDJKUHhURzFPQk50Q3c3VDJQTU44eWpvSnNOeWIxWEZKZlhIa1ZNZDVpMHFLZmZ4TWd6eml6bjlqdkhGR0M5dyUyQkprOGVmUmQ5VjRzZUMlMkY1MEFTQ3k0dnlZUmFXNTh5aVRaZmI1Ym5KRnprdmVPJTJCWHozSERSQXR2OCUyRk9WWEtTYzdtUzhEZ2FPeXF1V0R1VHJBM09VbWQ3cnQlMkYxN21KVzJxcFhVV2ElMkZrZ1I1VVh2Y25WbVc5JTJGd2ROb1clMkI1U0NaOWY5cXZwd3pwMzlwc0duS3YwWU00biUyQmIyVmc5OXBXcDU3S085dSUyQjVOM3QlMkIxdm5ER3d6aWdMNVglMkZINE5pZWU0a05UaEd1bnNZSHBQVTRhRGw0QzN4em5YaFBTOG5zbFZ2UGglMkIyeDglMkJMVWx1Rjk4Vlh5a2VmN3VyenQzWEpYeGVVdGRkVDNVJTJCSzU2NXlKcHRCNnFBdHhwJTJCJTJCekI1WDF5M24xWk8lMkJHeHJKd1cxSlMxJTJGUDNPVVVmJTJCNnglMkIlMkZVc0xyQ1FUcmZaTGZNQ3RzUEo5MG5UYU4ydlZXeDJVWEJzdXQlMkZmenRKVENuJTJCbXl5NDg5ODdqUXYyQUo2cyUyRm91ZFo5c1R2Nm8yRlN1Z2dSR3plcSUyRnpuOXVKSjlGdSUyQjA3TkQydXRzNmFNWXpmazlhJTJCNGhYOU8lMkJYOG9xbHRCenY3RE9VMTl2enh1ZWw4ZFB5WE9JSU1oNjVhcCUyQno2bURyckt6MnRkNTlNYzc2NFhHS01EcExIJTJCdllrMU1PMmtZdDlVbU9sV3FYUyUyRnJUMiUyRnEzMWtzOFRxJTJGdHZ0RFZHbENGYjg5bjNQNDQ4dm1NUldnbDlVWDIwMWlSdmFpa0RlTGY2MlVla1RUUFE2OFdsVndkME03N24zMnAxbXlMVkpGeGRKbHo3Mmx5TDklMkJNVFM3UG5aQzRBWExXb0kzQ0NtNHMlMkZGR0NvQ3dreWJIdHBMbmZ5ZHdmdEs0UGVoV1FubiUyRjlHZTVNTHFMWmU1ZjNpd2tPYzk3WDU3WTg0aE9KZFRuWXhzZ3VZcWtmVHRlSkxOWDJ3WjRxVVNhQmhkVHFQcGk2NmhZWW5TYmxSWGdwVlZiM3dVekElMkIlMkZYaWI1SkhiS1ltMWV2N1lHWmZiTjBFWTBsdEg4WmdXYVFYZmV2Nk1FNXZzJTJCQ0sxd25SY0YwZjVJaUpPbkd3Q0g5dmZDMzF2U3klMkZkM00lMkZKNTU3ZzRmRXhSWTJkdXIlMkZWJTJCMmo1eXY3ckY5ZVd6OFNPdHExSlNWMVBXJTJCZmMlMkZTeHpYUHA5N1pZYVM1TSUyRkRJWDElMkJBeHVEZGRLU3Y3bVZPT1o3UlZhMiUyQlNiZGNOZFhEMkx0aTN1THFmTjN2akVqbGxseGQ3N0FsSzlwRTlaWktnZ2Y3b0NsZXJyTzd2TjY4d21TOXRzcnElMkZmNzhuMVdhOEtxdTNwN2FEQmZGVGFPZU9SNjdhcDA5V2liaVFHRmVHV1YwMTVpZzVUNmllNSUyRjBXem5QZU1lTFdaZVZRMGk2WDlLZno0M1JaZnNoNE8lMkI4WW51dHFkeHhaVnU3dDZ2aTdlWEY4VVduODJJbkdlWkozbk1iUiUyQnpOM3ZJVHY3dkFiMU5pQ1JUVHd6RmNDeUdSJTJGYW9yYkJWMXdJamg2dnNDR2N5dDk0SVNCbiUyQmlEaFVJTzVPQlhEJTJCcUJldkQxVUpwdVFVZjB2WlRBcyUyRlo3c3RhdUprMVdPSEd5SWl1Y0FHNUpYWkVWVGdDM3BLN0lDaWVBVzFKWFpJVVR3QzE3MUZXUGVjWVZVY2VTak90d1RCMkZqRk4wNm14VHhzZUxTdTZPb1Zmb1hVcTYwRFRmZFJKZVZESXV5eFVlWXJlN1N1ODRRJTJCTm5UTjR4WVk4Z1Y3VU0wenQxVzhQeHFZSVdDaXU0OGFJZjZZTUZUUTdrNEZjNTZvRjY4UFZRbW01QlIlMkZTOWxNQ3o5bnV5MXE0bVRWWTRjYklpSzV3QWJrbGRrUlZPQUxla3JzZ0tKNEJiVWxka2hSUEFMWHZVVlk5NXhoVlJ4NUtNNjNCTUhZV01VM1RxYkZQRzZVVWxXVFFDRm1tVzU2Y2VPRGQlMkJrbyUyQnlPdGo3dHMwSzZ6WUhUbm0wVkg1dXlNRXlJd2R5OEdzUDlkQ09Idnh5eVVtM1VJWTUlMkZ2cTI5TjJuMFg3NnllVjFOVjJ5d29tVEZWbmhCSEJMNm9xc2NBSzRKWFZGVmpnQjNKSzZJaXVjQUc3Wm82NTZ6RE91aURxV1pGeUhZJTJCb29aSnlpVTJlYk1rNHZLdFU1MSUyQk9Qb3JEdXpBaDlzUFRKZ1J6OGVrZzlVQSUyQiUyQkhrclRMZWlJdnBjU2VOWiUyQlQ5YmExYVRKQ2lkT1ZtU0ZFOEF0cVN1eXdnbmdsdFFWV2VFRWNFdnFpcXh3QXJobGo3cnFNYyUyQjRJdXBZa25FZGpxbWprSEdLVHAxdHlwaUxTZ0JQaFFXWW5tWkNIeXhhY2lBSHY1SlJEOVNEcjRmU2RBczZvdSUyQmxCSjYxMzVPMWRqVnBzc0tKa3hWWjRRUndTJTJCcUtySEFDdUNWMVJWWTRBZHlTdWlJcm5BQnUyYU91ZXN3enJvZzZsbVJjaDJQcUtHU2NvbE5ubXpMJTJCJTJCJTJGZnYzeVJmJTJCRWNHMUFBMVFBMVFBOVFBTlVBTlVBUFVBRFZBRFZBRDFBQTFRQTFRQTlRQU5VQU5VQVBVQURWQURWQURJUTJZOVNSWm81S04lMkZCY24wQUlmJTJCbURMaHh6SXdhJTJCcDFBUDE0T3VoTk4yQ2p1aDdLWUZuN2Zka3JWMU5tcXh3NG1SRlZqZ0IzSks2SWl1Y0FHNUpYWkVWVGdDM3BLN0lDaWVBVyUyRmFvcXg3empDdWlqaVVaMSUyQkdZT2dvWnAlMkJqVTJhYU0lMkJmZzdnS2ZDQWt4UE02RVBGaTA1a0lOZnlhZ0g2c0hYUTJtNkJSM1I5MUlDejlydnlWcTdtalJaNGNUSmlxeHdBcmdsZFVWV09BSGNrcm9pSzV3QWJrbGRrUlZPQUxmc1VWYzk1aGxYUkIxTE1xN0RNWFVVTWs3UnFiTk5HWE5SQ2VDcHNBRFQwMHpvZzBWTER1VGdWekxxZ1hydzlWQ2Fia0ZIOUwyVXdMUDJlN0xXcmlaTlZqaHhzaUlybkFCdVNWMlJGVTRBdDZTdXlBb25nRnRTVjJTRkU4QXRlOVJWajNuR0ZWSEhrb3pyY0V3ZGhZeFRkT3BzVThaY1ZBSjRLaXpBOURRVCUyQm1EUmtnTTUlMkJKV01lcUFlZkQyVXBsdlFFWDB2SmZDcyUyRlo2c3RhdEpreFZPbkt6SUNpZUFXMUpYWklVVHdDMnBLN0xDQ2VDVzFCVlo0UVJ3eXg1MTFXT2VjVVhVc1NUak9oeFRSeUhqRkowNjI1UXhGNVVBbmdvTE1EM05oRDVZdE9SQURuNGxveDZvQjE4UHBla1dkRVRmU3drOGE3OG5hJTJCMXEwbVNGRXljcnNzSUo0SmJVRlZuaEJIQkw2b3FzY0FLNEpYVkZWamdCM0xKSFhmV1laMXdSZFN6SnVBN0gxRkhJT0VXbnpqWmxuTCUyQm85SGxQdzN1TWVqRyUyQmgybjRqRlBjSXJwcnN4c1UxcDBPMGdkTG54ekl3YSUyQkgxQVAxNE91aE5OMkNqdWg3S1lGbjdmZGtyVjFObXF4dzRtUkZWamdCM0pLNklpdWNBRzVKWFpFVlRnQzNwSzdJQ2llQVclMkZhb3F4N3pqQ3VpamlVWjElMkJHWU9nb1pwJTJCalUyYWFNc3hlVnh2ZHJrcDFmNzAlMkZRRTkwdUMwdSUyRjhrOWgzWmtmJTJCbURwa3dNNSUyQlBXUWVxQWVmRDJVcGx2UUVYMHZKZkNzJTJGWjZzdGF0Smt4Vk9uS3pJQ2llQVcxSlhaSVVUd0MycEs3TENDZUNXMUJWWjRRUnd5eDUxMVdPZWNVWFVzU1RqT2h4VFJ5SGpGSjA2MjVSeDVxTFNPTDFmZjlQZkVGNVFFdGZzb3RJd3hTM3FaT0RLb3lpc0s4JTJCNVBSZDlzRVRJZ1J6OHVrRTlVQSUyQiUyQkhrclRMZWlJdnBjU2VOWiUyQlQ5YmExYVRKQ2lkT1ZtU0ZFOEF0cVN1eXdnbmdsdFFWV2VFRWNFdnFpcXh3QXJobGo3cnFNYyUyQjRJdXBZa25FZGpxbWprSEdLVHAxdHlqaHZVV2w4VDYlMkIlMkZ2eW14cG1RWGxWN3Z3T1B2eHVrekRGUGl5WGwxY25iQ1VSVFdDWWVlcHM4d3ZRQW85TUhTSndkeThPc2g5ZENKSHZ4Q3owbTNFRjl6JTJGUFZ0NmJ0UG8lMkYzMGs4dnJhcnBraFJNbks3TENDZUNXMUJWWjRRUndTJTJCcUtySEFDdUNWMVJWWTRnVVBMVWZUMDkyZWV2UFQzOXpLdjdVanRkT3BjUSUyQnJFRmJmMW1PZUslMkJLQkRrVEdFNlNzak12NEtIN1J6S2VPc1JTVnpGNUpiTURMdlRocUdhZGolMkJ5WjFNRXFDRHY5dHR3Qm9LbE9tcmpPbzJKdU0wZmo3VDUlMkZPZTNvTSUyQlN2RDRVWUgwd1pZMk9aQ0RYJTJCJTJCcGgxJTJGVmcxJTJGS09la1c0bXVPdjc0dGZmZHB0SjklMkJjbmxkVFplc2NPSmtSVlk0QWR5U3VpSXJuQUJ1U1YyUkZVNEF0NlN1eUFvbmtHUDVNWE52M2tLU3UyRCUyQmxiaGl2dTVjUTQ2M2RXeDd6SE1kY3ZoUnlCaG5WV3BKeHFYazhQMiUyQllaeXhxUFNaQnZNdXBXVUJaRnlTczdlZjRXJTJGNkM5NnBOSnM4TGxHM01SbW50eTY0bVFVNGVUOVZBT1NHRW4yd1FNaUJIUHlxUVQzOHFoNzhVczVKdHhCZmMlMkZ6MWJlbTdUNlA5OUpQTDYycTZaSVVUSnl1eXdnbmdsdFFWV2VFRWNFdnFpcXh3QXJnbGRVVldPQUhZOGpPNDk4SnY1dDNjNzdGMXBicHpEYkMzZFF4N3pITWRjdmhSeUJoblZXcEp4cVhrOFAyJTJCWkl3dktwa1RCZDZWdEZsWkNpOHFqZFBuc3duZ2VCWnZ0enl0TWRHckl5NWZWUEtRMGdjTGd4ekl3YXNXRSUyRlhRamg3OGNzbEp0MUNHT2Y3NnR2VGRwOUYlMkIlMkJzbmxkVFZkc3NLSmt4Vlo0UVJ3UyUyQnFLckhBQ3VDVjFSVlk0QWR5U3VpSXJuRURDMHIwWCUyRmk4d2x6blpDJTJCZGpGOFdmTmclMkJZOExiT3BoN3pYSWNjZmhReXhsbVZXcEp4S1RsOHYlMkI4Wmc0dEtlaUx2ZGxIbnBTd2l2VjdMWSUyRkJlb2NmZlpkeVJnMmYlMkJPc3ZUR3BNV09rcjB3UXFKSE1qQkR5blVRenQ2OE1zbEo5MUNHZWI0Njl2U2Q1OUclMkIlMkJrbmw5ZlZkTWtLSjA1V1pJVVR3QzJwSzdMQ0NlQ1cxQlZaNFFSd1MlMkJxS3JIQUNjVXVubzclMkZJN1VqbW92aSUyRlYlMkZEZDc2Zk5BOGE5cmJPbHh6elhJWWNmaFl4eFZxV1daRnhLRHQlMkJ2QW1Oc1VVbFBaRjVtdCUyRmJQQk9GSWdGWkwlMkYxMU0lMkJ0dVRQazlyVEJ6WDZ4OSUyRjU5R25EeFlHT1pDRFZ5MTRwNUtEMFVLOThNc2xKMDNmYzJqVnMzMHk5MUlLUGVhWnJFb0o0UHRSVjJTRkU4QXRxU3V5d2duZ2x0UVZXZUVFY0V2cWlxeHdBbEZMTXhlNWVZMkhiNnpiUTFPYXA4MEQlMkJnNmNrTlk4eGVZWmRmc3Y1ZmtFak1sREtrTXlUbUw2YWlNWmY0VVAycmtHWTJoUnlkeU5OQXpUSzdDQ3owVWxxS3pDUmkxMGxPaURMUnR5SUFlJTJGbGxJUDdlakJMNWVjZEF0bG1PT3ZiMHZmZlJydHA1OWNYbGZUSlN1Y09GbVJGVTRBdDZTdXlBb25nRnRTVjJTRkU4QXRxU3V5d2dsRUxlMmRTSDlUYUFIRjdCUjduOGcwbWZjd1JRJTJGYzhJWWU4M3gxY1pEeCUyQmNUSiUyQkJtTWp4ZVZwREYlMkZ2YWZSTk9yNzIwSk5RVWNqdElWZ1ZyJTJGa0dPY3pPZVVNcDEyaDBFSkhpVDZvU0tkWDRnb1dYMWpVZzZWQkR1UndTYjN3VDVLVGJpRzI1ZmpyMjlKM24wYjc2U2VYMTlWMHlRb25UbFpraFJQQUxha3Jzc0lKNEpiVUZWbmhCSEJMNm9xc2NBSlJTenN4dlolMkZIbkhkd2kwcWh4JTJCT2ROdDh4biUyRnljUkk5NVBvZGslMkZLaGtIR2RUYXdzWjF5SVpQMDROeG9lTFNwJTJGQkJXRFRxTyUyQkRzWEhpOVpxR1lYbXYwaTR0NzFUaW90SyUyQkpGdm9LTkVIV3k3a1FBNSUyQkRhVWUydEdEWHk0NTZSYktNTWRmMzVhJTJCJTJCelRhVHolMkI1dks2bVMxWTRjYklpSzV3QWJrbGRrUlZPQUxla3JzZ0tKNEJiVWxka2hST0lXdGFZTkkwZXZORU5QZWI1NnFJZzQlMkZPSmslMkZFekdLY1hsVDdETkx6ZCUyRlVXbVVZOHNLdkZPcGJMU2JxR2pSQjlzMlpFRE9maTFtSHBvUnc5JTJCdWVTa1d5akRISDk5VyUyRnJ1MDJnJTJGJTJGZVR5dXBvdVdlSEV5WXFzY0FLNEpYVkZWamdCM0pLNklpdWNBRzVKWFpFVlRpQnEyZVBFZEk5NWpncmdwQTFrZkJKWTc3Qms3TUU0S1ZtRGNXSlJhWnclMkI3OCUyRml1bW5VdWFpMEFLbVFhcUdqUkI5c1FaSURPZmhWMkoybGpRQUFCbTlKUkVGVW1ucG9SdzklMkJ1ZVNrV3lqREhIOTlXJTJGcnUwMmclMkYlMkZlVHl1cG91V2VIRXlZcXNjQUs0SlhWRlZqZ0IzSks2SWl1Y0FHNUpYWkVWVGlCcVdXUFNOSHJ3UmpmMG1PZXJpNEtNenlkT3hzOWduRmhVMm1UQU5PcGNWTnBRJTJCZTVyQ3gwbCUyQm1ETGtCekl3YSUyRk4xRU03ZXZETEpTZmRRaG5tJTJCT3ZiMG5lZlJ2dnBKNWZYMVhUSkNpZE9WbVNGRThBdHFTdXl3Z25nbHRRVldlRUVjRXZxaXF4d0FsRkxPekg5TjBVZnJ1VGVxZlRTSnpSNVIzcjJPNVg2eXJOWGJKY2tlOVRWSldDOWs1Q3hCJTJCT2taQTNHZFJhViUyQkU2bHNpSnVvYU5FSDJ6WmtRTTUlMkJMV1llbWhIRDM2NTVLUmJLTU1jZjMxYiUyQnU3VGFEJTJGOTVQSzZtaTVaNGNUSmlxeHdBcmdsZFVWV09BSGNrcm9pSzV3QWJrbGRrUlZPSUdvNXZsJTJCVExBNkZGbzFrSjkwZVduUjY2cUtTNXFtblBFY0ZjTklHTWo0SnJIZFlNdlpnbkpTc3diak9vbElvQW51Wk5vNiUyQjNwTjdPNU8zNVJuSjB4cVRGanBLOU1HS2tCekl3UTlIMUVNN2V2RExKU2ZkUWhubSUyQk92YjBuZWZSdnZwSjVmWDFYVEpDaWRPVm1TRkU4QXRxU3V5d2duZ2x0UVZXZUVFY0V2cWlxeHdBbkZMcDZPJTJGeUp5bHZWSiUyRiUyRjBRbU9lQnA4NEJ4YiUyQnRzNlRIUGRjamhSeUZqbkZXcEpSbVhrc1AzcThDWWkwb0E3dE1hRTFlQXNTc0lmTmZvZzZWQkR1VEFldUVUNkVBUCUyQiUyQnhpdjdRUVh6RlA5MWIwZmMlMkJrNVYlMkJlWEY1WGN5VXJuRGhaa1JWT0FMZWtyc2dLSjRCYlVsZGtoUlBBTGFrcnNzSUpKQ3pINmYzNm0lMkY3JTJCaHNsN1k3eXolMkYwekQzOSUyRjBGN2tBJTJGclM1cDRTM2RUYjFtT2M2NVBDamtESE9xdFNTakV2SjRmdDl6N2pPb2hJZmY0ZVhtVyUyRlpRa2VKUHRnU0lRZHlZTjMwQ2JTamg3MVgyQzh0MUduTTA3MFZmZDh6YWZtWEo1ZlgxVnpKQ2lkT1ZtU0ZFOEF0cVN1eXdnbmdsdFFWV2VFRWNFdnFpcXh3QW1uTDJIdVQzTyUyQlJtNWllZTZlUzBPZ3h6MmtWMU45S3h2V1pibzlJeGxzaTliOSUyRnliak9vbElzQ3J2czh2RjNvWElmcDQ5N3ZxdGNHZkU1ZURiZ09WZEowQWRiTXVSQURuNGRwUjdhMFlOZkxqbnBGc293eDElMkZmbHI3N05OcFBQN204cnFaTFZqaHhzaUlybkFCdVNWMlJGVTRBdDZTdXlBb25nRnRTVjJTRkUwQXM3YnREWHRQZ0p0N0d6M3Q2SmQ2MUpNYzhadzRPOGJhT1RZOTVya01PUHdvWjQ2eEtMY200bEJ5JTJCM3plTXVhZ0VjSzdibUxoYmJPVTIyOEJmN0ZGNDlNRVdGRG1RZzE5bHFZZGYxWU5meWpucEZ1SnJqciUyQiUyQkxYMzNhYlNmZm5KNVhVMlhySERpWkVWV09BSGNrcm9pSzV3QWJrbGRrUlZPQUxla3JzZ0tKNUJyT1g0R3M1Qms1JTJCR1dCYWJZY2VyT05jVE9jdTd2UGViNVhLTDdvNVB4bmtudFg4aTROdEg5OFVvWlg3Nm9KSTRPNzRQYmN2YjV1JTJGV1hGaG9UJTJCbUFsUUE3azRBY0Q2b0Y2OFBWUW1tNUJSJTJGUzlsTUN6OW51eTFxNG1UVlk0Y2JJaUs1d0Fia2xka1JWT0FMZWtyc2dLSjRCYlVsZGtoUlBBTFh2VVZZOTV4aFZSeDVLTTYzQk1IWVdNVTNUcWJGUEclMkJZdEtuOCUyRjBIb1pwY0g4dmVla2Q4azZsdjljMERLJTJGNTdwellIVGwxc2xmM0tBcXI3bEh6amtZZkxDOXlJQWUlMkY1bEFQMUlPdmg5SjBDenFpNzZVRW5yWGZrN1YyTldteXdvbVRGVm5oQkhCTDZvcXNjQUs0SlhWRlZqZ0IzSks2SWl1Y0FHN1pvNjU2ekRPdWlEcVdaRnlIWSUyQm9vWkp5aVUyZWJNczViVkhvTms3M0phSnllZGElMkZSZDlBVTFuZEglMkJXNXYlMkJtRDVrUU01JTJCRFdKZXFBZWZEMlVwbHZRRVgwdkpmQ3MlMkZaNnN0YXRKa3hWT25LeklDaWVBVzFKWFpJVVR3QzJwSzdMQ0NlQ1cxQlZaNFFSd3l4NTExV09lY1VYVXNTVGpPaHhUUnlIakZKMDYyNVF4dnFoVTU3eVBQSXJDdXRONSUyQm1EcGt3TTUlMkJQV1FlcUFlZkQyVXBsdlFFWDB2SmZDcyUyRlo2c3RhdEpreFZPbkt6SUNpZUFXMUpYWklVVHdDMnBLN0xDQ2VDVzFCVlo0UVJ3eXg1MTFXT2VjVVhVc1NUak9oeFRSeUhqRkowNjI1UXhGNVVBbmdvTE1EM05oRDVZdE9SQURuNGxveDZvQjE4UHBla1dkRVRmU3drOGE3OG5hJTJCMXEwbVNGRXljcnNzSUo0SmJVRlZuaEJIQkw2b3FzY0FLNEpYVkZWamdCM0xKSFhmV1laMXdSZFN6SnVBN0gxRkhJT0VXbnpqWmwlMkZQZnYzNyUyRjVQVWZ5SSUyRiUyRklnQnFnQnFnQmFvQWFvQWFvQVdxQUdxQUdxQUZxZ0JxZ0JxZ0Jhb0Fhb0Fhb0FXcUFHcUFHcUFGcXdOZUFXVSUyQlNOU3BKOEYlMkJjUUF0ODZJTXRIM0lnQjclMkJtVWclMkZVZzYlMkJIMG5RTE9xTHZwUVNldGQlMkJUdFhZMWFiTENpWk1WV2VFRWNFdnFpcXh3QXJnbGRVVldPQUhja3JvaUs1d0FidG1qcm5yTU02NklPcFprWElkajZpaGtuS0pUWjVzeSUyRmc4aWMxJTJCSmxjRUtMUUFBQUFCSlJVNUVya0pnZ2clM0QlM0QlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTkwNCUyMiUyMHklM0QlMjI3ODcuNSUyMiUyMHdpZHRoJTNEJTIyODcyJTIyJTIwaGVpZ2h0JTNEJTIyNTEuMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMDAlMjIlMjB2YWx1ZSUzRCUyMiUyMiUyMHN0eWxlJTNEJTIyc2hhcGUlM0RjdXJseUJyYWNrZXQlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCcm91bmRlZCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQnJvdGF0aW9uJTNELTkwJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi01NjkuNSUyMiUyMHklM0QlMjI1NDglMjIlMjB3aWR0aCUzRCUyMjI5JTIyJTIwaGVpZ2h0JTNEJTIyNjI1JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTAxJTIyJTIwdmFsdWUlM0QlMjI3MDAxJUU4JUEyJUFCJUU2JThDJTg3JUU2JUI0JUJFJUU0JUJBJTg2NTAwJUU0JUI4JUFBJUU2JTkzJThEJUU0JUJEJTlDJUVGJUJDJThDJUU2JTg5JTgwJUU0JUJCJUE1JUU4JUJGJTk5NTAwJUU0JUI4JUFBJUU0JUJEJThEJUU3JTlBJTg0JUU1JTgwJUJDJUU1JUIwJUIxJUU2JTk4JUFGJTIwMSUyMCVFRiVCQyU4QyVFNSU4NSVCNiVFNCVCQiU5NiVFNyU5QSU4NCVFNiU5OCVBRjAlMjIlMjBzdHlsZSUzRCUyMnRleHQlM0JodG1sJTNEMSUzQnN0cm9rZUNvbG9yJTNEJTIzZDc5YjAwJTNCZmlsbENvbG9yJTNEJTIzZmZlNmNjJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0Jyb3VuZGVkJTNEMCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItNzQ3JTIyJTIweSUzRCUyMjg3NC41JTIyJTIwd2lkdGglM0QlMjIzOTAlMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwMiUyMiUyMHZhbHVlJTNEJTIyJUU3JTlDJTgxJUU3JTk1JUE1JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzEyJTIyJTIweSUzRCUyMjczMiUyMiUyMHdpZHRoJTNEJTIyOTElMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwMyUyMiUyMHZhbHVlJTNEJTIyJUU3JTlDJTgxJUU3JTk1JUE1JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0Jmb250Q29sb3IlM0QlMjMwMDAwMDAlM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMzYlMjIlMjB5JTNEJTIyNzMyJTIyJTIwd2lkdGglM0QlMjI5MSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n**集群记录所有槽的指派信息**\n\n\n\n上面说了 clusterNode 中有两个属性 `slots` 和 `numslots` 用来记录当前节点的槽信息。\n\n另外，在 `clusterState` 中也有一个槽信息。\n\n```c\ntypedef struct clusterState {\n  // ...\n  // 记录当前集群中槽指派的信息。 这是一个长度为16384的指针数组，指向节点  \n  clusterNode *slots[16384];\n  // ...\n} clusterState;\n```\n\n\n\n<img src=\"Redis的cluster.assets/image-20230526144949266.png\" alt=\"image-20230526144949266\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n**为什么要将槽位信息即保存在 clusterNode 中又保存在 clusterState 中？**\n\n主要是为了减少复杂度。想想下面这个场景\n\n- 当客户端向集群发送命令之后，假设连接的是7001，但是对key进行hash之后，发现这个槽位不是7001负责的。此时就需要找到是哪个节点负责。\n\n如果不在 clusterState 中保存槽位信息\n\n- 就需要遍历所有的 clusterNode 才能找到这个 槽位 是哪个节点负责。\n\n但是目前 clusterState 中保存了槽位信息\n\n- 就只需要 O(1) 的复杂度，可以直接拿到这个 槽位 对应的节点。\n\n那么 clusterNode 中保存的槽位信息有啥用呢？\n\n- 主要是为了集群内节点的通信，当需要把当前节点负责的槽位信息 广播给别的节点的时候，只需要把 clusterNode 中的 slots 数组发出去就行了。\n\n\n\n**槽指派的命令实现**\n\n\n\n```c\ndef CLUSTER_ADDSLOTS(*all_input_slots):\n    # 遍历所有输入槽，检查它们是否都是未指派槽\n    for i in all_input_slots:\n        # 如果有哪怕一个槽已经被指派给了某个节点\n        # 那么向客户端返回错误，并终止命令执行\n        if clusterState.slots[i] != NULL:\n            reply_error()\n            return\n    # 如果所有输入槽都是未指派槽\n    # 那么再次遍历所有输入槽，将这些槽指派给当前节点\n    for i in all_input_slots:\n        # 设置clusterState结构的slots数组\n        # 将slots[i]的指针指向代表当前节点的clusterNode结构\n        clusterState.slots[i] = clusterState.myself\n        # 访问代表当前节点的clusterNode结构的slots数组\n        # 将数组在索引i上的二进制位设置为1\n        setSlotBit(clusterState.myself.slots, i)\n```\n\n\n\n\n\n# 命令处理阶段\n\n\n\n经过上面步骤\n\n- 集群的启动\n- 集群的内存结构\n- 集群的槽分配\n\n之后，此时集群已经处于上线状态（clusterState 中的 state 属性为 ok），已经可以开始处理命令啦。\n\n\n\n<img src=\"Redis的cluster.assets/image-20230526151838783.png\" alt=\"image-20230526151838783\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n**计算槽的hash算法源码**\n\n```c\ndef slot_number(key):\n    return CRC16(key) & 16383\n```\n\n\n\n**判断槽是否由当前节点负责**\n\n1、得到key所属的槽之后，假设结果是：i；取 clusterState 中的 slots 属性的 i 位置的指针。\n\n2、判断 slots[i] 指针所指向的节点是不是当前节点\n\n3、是：当前节点处理\n\n4、不是：可以得到需要 MOVED 的目的节点\n\n\n\n**槽与key的关系**\n\n为什么要说这个？\n\n思考一下：我们现在是集群模式，对比 Redis单点模式。数据的存储方式是不是不一样？\n\n- Redis单点模式：没有槽的概念，key是直接保存在DB中的字典结构里的。结构就是：Redis->DB->dict->key\n- 集群模式：有槽的概念，相当于：集群节点Node->clusterState->slots_to_keys->key\n\n存储结构是不一样的。 \n\n\n\n问：\n\n在Redis中，单机Redis保存key是可以保存在DB0到DB15，总共16个DB中的，每个DB中是维护了一个dict字典结构，在字典结构中保存了用户的键值对的键； 但是对于Redis的集群模式，为什么只能使用DB0？ 为什么Redis的集群模式要使用跳表来维护槽与键的关系？ 直接使用dict字典不行吗？ 使用跳表有什么好处呢？\n\n答：\n\n在Redis集群模式中，只能使用DB0存储数据。这是因为Redis集群采用了分片机制，将整个数据集划分为16384个槽（slot），每个节点负责维护其中的一部分槽，从而实现对数据的分布式存储和负载均衡。反向思考一下：如果我在集群模式中使用多个DB，那么对于集群中的节点来说，我不仅要维护节点与槽的关系，还要维护槽与DB的关系，还要维护槽与KEY的关系，还有KEY的DB的关系，这样岂不是很复杂，和Redis的设计理念不符合，所以，干脆只使用DB0这一个库。\n\n在Redis集群模式中，使用跳表来维护槽与键的关系有以下好处：\n\n1. 查询速度快：跳表可以实现O(log n)的查询效率，比哈希表更高效。\n2. 灵活性高：跳表支持范围查找、插入和删除等操作，比哈希表更具灵活性。\n3. 内存占用少：跳表不需要像哈希表一样维护大量的桶结构，因此占用的内存更少。\n4. 易于扩展：跳表支持动态扩容，可以根据需要自动调整大小，而哈希表则需要重新计算哈希值并重新分配桶结构，更加复杂。\n\n综上所述，虽然使用字典结构也可以实现槽与键之间的映射关系，但采用跳表具有更高的查询速度和灵活性，更适合应对Redis集群模式下大规模数据集的存储和管理。\n\n\n\n\n\n# 集群操作阶段\n\n\n\n上面说了集群接收客户端的命令，并进行处理。\n\n接下来我们看看针对集群有哪些操作\n\n- 重分片就是一个重要的概念。\n\n\n\n## 重分片\n\n**什么是重分片？**\n\n简单的说，就是重新分配槽。\n\n**特点是**\n\n- 将某些分配给节点A的部分槽重新分配给节点B\n- 数据也会跟着一起转移\n- 重分片的时候，集群仍然可以对外提供服务。\n\n**举个例子**\n\n在上面的部门，我们创建了一个集群，集群中包含三个节点 7001， 7002， 7003；\n\n其中针对 7001 这个节点来说，负责 0-5000； 对于 7002 节点，负责 5001-10000； 对于 7003 节点，负责 10001-16383；\n\n现在我们向集群中重新加入一个节点：7004，并将原本7003负责的10001-16383中的15001-16383交给7004节点负责。\n\n```sh\n$ redis-cli -c -p 7001\n# 将7004 加入了集群\n127.0.0.1:7001> CLUSTER MEET 127.0.0.1 7004\nOK\n# 集群中现在已经有 4 个节点了\n127.0.0.1:7001> cluster nodes\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388635782831 0 connected 5001-10000\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388635782831 0 connected 10001-16383\n04579925484ce537d3410d7ce97bd2e260c459a2 127.0.0.1:7003 master - 0 1388635782330 0 connected\n# 通过重新分片操作，将原本指派给节点7002的槽15001至16383改为指派给节点7003\n# 观察集群信息\n127.0.0.1:7001> cluster nodes\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master -0 0 0 connected 0-5000\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master -0 1388635782831 0 connected 5001-10000\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master -0 1388635782831 0 connected 10001-15000\n04579925484ce537d3410d7ce97bd2e260c459a2 127.0.0.1:7003 master -0 1388635782330 0 connected 15001-16383\n```\n\n\n\n**重新分片的实现原理**\n\n重新分片，只需要知道有这个功能就好了，一般操作不到。\n\n\n\n<img src=\"Redis的cluster.assets/image-20230526170732783.png\" alt=\"image-20230526170732783\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n\n\n## ASK错误\n\n\n\n我们在 重新分片 开头的时候说过：集群在进行重新分片的时候，集群是可以正常对外提供服务的。 \n\n那么：集群是怎么做到的呢？\n\n\n\n在重分片的过程中，会出现这样的一个情况：原本属于槽 slot 的数据，在迁移过程中，一部分存在于源节点，一部分存在于目标节点。\n\n当操作一个key的时候，会执行如下的步骤\n\n\n\n<img src=\"Redis的cluster.assets/image-20230526172433704.png\" alt=\"image-20230526172433704\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n问\n\nRedis在5.0.7中，当集群正在执行重新分片的时候，还会产生 ASK 错误吗？ 什么时候会产生呢？ 产生了ASK错误之后集群是怎么处理呢？\n\n答\n\n在Redis 5.0.7中，如果集群正在执行重新分片操作，还是可能会产生ASK错误。当节点收到一个槽位所属的哈希槽不在该节点上的请求时，就会返回ASK错误，告诉客户端应该访问哪个节点。\n\nASK错误通常发生在以下情况：\n\n1. 集群正在重新分片过程中：当槽位被移动到另一个节点上后，旧的节点就无法处理请求了，会返回ASK错误。\n2. 节点故障：如果某个节点故障或下线，与该节点相关的槽位就需要被重新分配到其他节点上，此时也会产生ASK错误。\n\n当发生ASK错误时，客户端需要根据错误信息转发请求到正确的节点上。具体来说，客户端应该按照以下步骤处理ASK错误：\n\n1. 解析ASK错误：从ASK错误中获取正确的节点和槽位信息。\n2. 发送MOVED命令：向正确的节点发送MOVED命令，并附带要访问的槽位号和源节点的ID。\n3. 重试命令：客户端接收到MOVED命令后，应该重新发送之前的命令，并将正确的节点和槽位信息包含在命令中。\n4. 执行命令：客户端向正确的节点发送命令后，节点就可以正常处理请求了。\n\n需要注意的是，由于ASK错误会增加客户端和集群之间的通信开销，并且可能会对性能产生影响，因此在进行重新分片等操作时，应该尽量避免产生ASK错误。\n\n问\n\n最新的Redis版本支持 ASK 错误自动转向吗？ 还是ASK错误必须抛给Client进行处理？\n\n答\n\n从Redis 5.0版本开始，Redis集群支持ASK错误自动转向功能。这个功能是通过将ASK错误的处理移动到了客户端库中实现的。当客户端库收到一个ASK错误时，它会自动解析错误信息，并将请求重定向到正确的节点上。因此，客户端不需要进行额外的处理，就可以处理ASK错误。\n\n然而，需要注意的是，自动转向功能并不是默认开启的。如果要使用自动转向功能，需要在连接集群之前，将客户端库的相应参数设置为`true`。\n\n\n\n## 集群的缺点（hashtag）\n\n数据是分散在各个集群中的：聚合操作很难实现；事务不支持\n\n解决办法：redis提供了hashtag\n\n\n\n**实操**\n\n<img src=\"Redis的cluster.assets/image-20230525183346531.png\" alt=\"image-20230525183346531\" style=\"zoom: 67%;\" />\n\n\n\n集群模式对事务的支持\n\n<img src=\"Redis的cluster.assets/image-20230525183651562.png\" alt=\"image-20230525183651562\" style=\"zoom: 67%;\" />\n\n使用hashtag\n\n<img src=\"Redis的cluster.assets/image-20230525183907296.png\" alt=\"image-20230525183907296\" style=\"zoom: 67%;\" />\n\n\n\n\n\n# 故障处理阶段\n\n\n\n## 集群的高可用（节点主从）\n\n\n\n\n\n## 故障转移\n\n\n\n\n\n\n","tags":["redis","集群"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redis的主从复制","url":"/note/JAVA/数据库/REDIS/Redis的主从复制/","content":"\n![image-20230526174007842](Redis的主从复制.assets/image-20230525152059427.png)\n\n阅读本文需要掌握的知识\n\n- Redis的持久化RDB和AOF\n\n# 为什么会有主从\n\n因为单机会有问题呀，所以就要有主从。\n\n对于单机单实例的Redis会有什么问题？\n\n- 单机：单点故障\n- 单机：存储空间有限\n- 单机：连接数有限\n- 单机：数据量的大的时候内存IO压力大\n\n怎么解决这些问题\n\n- 分布式架构解决方案的AKF原则：可用性，可扩展性，容错性\t\n  - X轴：全量镜像的实例扩展\n  - Y轴：水平拆分，按应用场景做数据分离\n  - Z轴：垂直拆分，对同一个场景的数据再次拆分\n\n实例多了，此时可以解决单机的这些问题，但是又引入了一些别的问题\n\n- 数据一致性（CAP中的C）\n- 可用性（CAP中的A）\n- 分区容错性（CAP中的P）\n\n对于Redis来说\n\n- 使用主从复制解决数据一致性\n- 使用Sentinel和集群模式解决可用性\n- CAP中的只能满足其二\n\n这篇文章，我们主要看看Redis的主从复制怎么保证一致性的。\n\n\n\n# 什么是数据一致性\n\n数据一致性有\n\n- 强一致性：等待所有的实例都同步完成才给客户端响应，此时数据不会丢，但是性能低\n- 最终一致性（弱一致性）：只等待主节点写入成功就直接返回，从节点异步从主节点同步数据，发生主从切换的时候，数据可能会丢失。性能高\n\n\n\n# 如何配置主从\n\n- 在4.0之前是使用：salveof\n- 在4.0之后，slaveof命令被替换成了replicaof（通过源码可以看到其实是将 slaveof 和 replicaof ，其实底层都是执行的 replicaofCommand 这个函数）\n\n\n\n![image-20230524105807542](Redis的主从复制.assets/image-20230524105807542.png)\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMiVFNCVCOCVCQiVFNiU5QyU4RCVFNSU4QSVBMSVFNSU5OSVBOCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTI3OSUyMiUyMHklM0QlMjIxMjQlMjIlMjB3aWR0aCUzRCUyMjgyJTIyJTIwaGVpZ2h0JTNEJTIyMzklMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjUlMjIlMjB0YXJnZXQlM0QlMjIyJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwdmFsdWUlM0QlMjJyZXBsaWNhb2YlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIzJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIwLjIlMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMHglM0QlMjIxMyUyMiUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNSUyMiUyMHZhbHVlJTNEJTIyJUU0JUJCJThFJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTA2JTIyJTIweSUzRCUyMjEyNCUyMiUyMHdpZHRoJTNEJTIyODIlMjIlMjBoZWlnaHQlM0QlMjIzOSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0MlMkZyb290JTNFJTNDJTJGbXhHcmFwaE1vZGVsJTNF\n```\n\n\n\n# 主从复制的流程\n\n\n\nRedis使用默认的异步复制，其特点是低延迟和高性能，是绝大多数 Redis 用例的自然复制模式。\n\n当存在两个Redis实例，并且他们设置了主从关系，他们之间就会开始主从复制\n\n\n\n## 正常的复制流程\n\n- 主节点开启了RDB\n- 复制偏移量：offset，执行复制的双方，都会维护这个偏移量，当发送了N个字节的数据后，偏移量就会加上N\n- 主服务的复制积压缓冲区：默认1M，用来记录RDB发送后执行的写入命令\n- 服务器运行的ID：runid\n\n\n\n```mermaid\nsequenceDiagram\nnote over 从节点,主节点: 第一阶段：全量同步阶段\n从节点->>主节点: 执行PSYNC，由于是首次同步：PSYNC ? -1\n主节点->>主节点: 接收从节点的请求，发现是PSYNC ? -1，全量同步\n主节点->>主节点: 此时主节点会立即生成一次RDB文件，并落磁盘\nnote right of 主节点: RDB落磁盘，磁盘IO\n主节点->>主节点: 并使用复制积压缓冲区记录从现在开始执行的所有写命令，用于增量同步\n主节点->>从节点: 把本地存储的全量RDB文件发送给从节点，同时携带runID和offset\nnote right of 主节点: RDB传输给从节点，网络IO\n从节点->>从节点: 接收到RDB文件，存储在自己本地，同时保存runID和offset\nnote right of 从节点: RDB落磁盘\n从节点->>从节点: 开始解析RDB文件，恢复数据\n从节点->>主节点: RDB恢复完之后，再次同步：PSYNC <runID> <offset> 请求主节点进行同步\nnote over 从节点,主节点: 第二阶段：增量同步阶段\n主节点->>主节点: 接收从节点的请求，发现runID是我本机的并且缓冲区中offset也存在了，增量同步\n主节点->>主节点: runID不是我本机的或者offset不在了，全量同步\n主节点->>从节点: 根据从节点的offset，使用通用协议将增量数据（存在主节点缓冲区中的）传给从节点\nnote right of 主节点: 因为增量数据存在缓存中的，默认大小1M，所以需要判断offset是否在缓存中\n从节点->>从节点: 接收到通用协议的增量数据，不会存储在自己本地的RDB文件中\n从节点->>从节点: 将增量数据直接解析，将这部分数据恢复到自己的内存中\nnote over 从节点,主节点: 第三阶段：命令广播阶段\n从节点->>主节点: 增量同步完成之后，主从服务器就会进入命令传播阶段\n主节点->>从节点: 这时主服务器只要一直将自己执行的写命令发送给从服务器\n从节点->>从节点: 从服务器只要一直接收并执行主服务器发来的写命令<br/>就可以保证主从服务器一直保持一致了\nnote right of 主节点: 此时主节点仍然会记录复制积压缓冲区，用于从节点的断线重连恢复\n```\n\n\n\n<img src=\"Redis的主从复制.assets/image-20230524140156924.png\" alt=\"image-20230524140156924\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n\n\n## 没有磁盘参与（没有RDB）的主从复制流程\n\n- 主节点没有开启RDB快照\n\n正常情况下，一个全量重同步要求在磁盘上创建一个 RDB 文件，然后将它从磁盘加载进内存，然后 slave以此进行数据同步。\n\n如果磁盘性能很低的话，这对 master 是一个压力很大的操作。Redis 2.8.18 是第一个支持无磁盘复制的版本。在此设置中，子进程直接发送 RDB 文件给 slave，无需使用磁盘作为中间储存介质。\n\n\n\n## 关闭RDB但是开启AOF的主从复制流程\n\n每一次同步都会重新生成AOF文件。就是没有增量同步的概念了。\n\n这是因为：RDB文件中记录了主从的关系；可以实现增量同步； 而AOF中没有记录主从关系，所以每次都是增量同步。\n\n这个可以看看源码确认一下\n\n\n\n# 心跳检测\n\n在命令传播阶段，从服务器默认会以每秒一次的频率，向主服务器发送命令：\n\n```shell\nREPLCONF ACK <replication_offset>\n```\n\n发送心跳检测有三个作用\n\n- 检测主从服务器的网络连接状态\n- 实现min-slave机制\n\n```xml\nmin-slaves-to-write 3\nmin-slaves-max-lag 10\n//表示从节点数量少于3个，或者3个从节点的延迟大于10秒，则主节点拒绝写入。\n```\n\n- 检测命令丢失：短暂的断线重连，会导致命令广播时效，此时通过offset会检测命令丢失，然后使用主节点的缓冲区增量同步\n\n\n\n# 主从复制对于过期key怎么处理\n\n一个key拥有过期时间，通过主从复制到从节点之后。\n\n此时主节点和从节点都有这个拥有过期时间的key；\n\n可以这个key到期之后，主节点和从节点分别会怎么处理呢？\n\n**主节点处理方式**\n\n当 Key 到期时，主节点会根据自身配置执行相应的策略来删除该 Key。具体来说，Redis 支持两种策略：\n\n- 被动删除：当主节点接收到客户端请求对已经过期的 Key 进行读写操作时，主动检查并删除该 Key。\n- 主动删除：主节点会周期性地对过期数据进行扫描和清理，以及通过 BGREWRITEAOF 命令将过期数据记录到 AOF 文件中，以便在数据恢复时能够正确处理过期数据。\n\n**从节点处理方式**\n\n与主节点不同的是，从节点不能直接删除key，因为从节点只能通过主节点同步数据，没有写入权限，只能间接删除 Key。\n\n具体来说，当主节点删除某个 Key ，会把这个命令发给从节点，从节点就会执行该命令，删除相应的 Key。\n\n如果从节点在 Key 过期之后，一直没有收到主节点的命令日志（即主节点在过期之前没有执行相关删除操作），那么这个 Key 就会一直留在从节点中\n\n\n\n\n\n# 主从复制的源码分析\n\n\n\n待补充\n\n![image-20230525224914189](Redis的主从复制.assets/image-20230525224914189.png)\n\n# 一些问答\n\n问\n\nRedis的主从复制是通过RDB文件来实现的，如果主的数据很多，假设为10GB，此时生成的RDB文件也是10GB吗？那么传给从节点的时候，也是10GB吗？另外，从节点宕机之后，当再次重启的时候，主节点还是要发送RDB文件给这个从节点，此时发动的RDB文件是全量的，还是增量的？\n\n答\n\n在 Redis 的主从复制中，通过 RDB 文件来进行数据同步。答案如下：\n\n1. 主节点生成的 RDB 文件大小与其保存的数据量成正比关系，因此如果主节点的数据量很大，那么生成的 RDB 文件也会很大。\n2. 从节点初始化时，需要将主节点上的 RDB 文件传输到本地进行加载。在 Redis 复制中，一般情况下是采用增量同步的方式，即首先进行全量同步，然后再进行增量同步。因此，当从节点刚开始进行复制时，需要下载完整的 RDB 文件。\n3. 当从节点宕机重启时，如果它断开连接的时间太长，可能会导致与主节点的同步信息丢失。这种情况下，从节点需要重新进行全量同步，即接收全新的 RDB 文件，并从最近的复制偏移量处开始进行增量同步。如果与主节点的同步信息没有丢失，那么就可以直接从上次同步的位置继续进行增量同步。\n\n需要注意的是，Redis 不仅支持 RDB 文件方式进行同步，还支持 AOF（Append Only File）文件方式进行同步。AOF 文件记录了所有写入 Redis 的命令，在主节点执行命令时，会将命令写入 AOF 文件并发送给从节点进行同步，因此 AOF 方式可以更快地进行数据同步，但也需要更多的磁盘空间。\n\n问\n\n如何实现的增量同步？ 是主节点只发送一部分RDB文件到从节点吗？\n\n答\n\nRedis 复制采用增量同步的方式，其基本流程如下：\n\n1. 从节点向主节点发送 SYNC 命令，请求与主节点建立连接。\n2. 主节点接收到 SYNC 命令后，开启一个后台线程，将当前数据库中的数据保存为 RDB 文件，并将 RDB 文件发送给从节点。\n3. 从节点接收到 RDB 文件之后，将其加载到内存中，然后向主节点发送 PSYNC 命令，请求继续复制数据。PSYNC 命令包含两个参数：第一个参数是主节点的 ID，第二个参数是从节点的复制偏移量（也可以是主节点的运行 ID）。\n4. 主节点接收到 PSYNC 命令后，判断从节点和主节点的同步状态。如果从节点的复制偏移量小于等于主节点的复制偏移量，那么主节点将以增量同步的方式继续复制数据；否则，主节点会以全量同步的方式重新开始复制数据。\n\n在增量同步的过程中，主节点不会将整个 RDB 文件发送给从节点，而是根据从节点的复制偏移量，只向从节点发送部分数据。具体地说，主节点会将自己执行的写命令以及对应的键值对发送给从节点。从节点接收到这些写命令后，在本地进行执行，从而实现了数据的增量同步。\n\n需要注意的是，由于 Redis 是单线程的，在进行复制时会有一定的性能瓶颈。因此，如果数据量很大或者写入操作很频繁，可能会影响主节点的性能和响应速度。在这种情况下，可以考虑使用 Redis Cluster 或者其他分布式数据库系统，以提高系统的吞吐量和并发性能。\n\n问\n\n那么从节点会将这部分增量数据，也保存在自己的RDB中嘛？\n\n答\n\n在 Redis 的增量同步过程中，从节点不会将复制的增量数据保存到自己的 RDB 文件中。因为 RDB 文件是由主节点生成并发送给从节点的，从节点只需要将接收到的 RDB 文件加载到内存中即可。\n\n增量同步的过程中，主节点会将自己执行的写命令以及对应的键值对发送给从节点，从节点接收到这些写命令后，在本地进行执行。因此，如果从节点需要将接收到的增量数据保存到自己的 RDB 文件中，需要自己开发相关的逻辑实现。一般来说，这种需求可能不那么常见，因为增量同步已经可以很好的保证了主从节点之间的数据一致性，而且从节点的主要作用是提高系统的读性能和容错能力，因此一般不需要在从节点上保存完整的数据备份。\n\n问\n\n那么当主节点宕机的时候，从节点被选为新的主节点，此时从节点要重新生成RDB文件嘛？\n\n答\n\n当 Redis 的主节点宕机时，如果存在从节点，从节点会尝试自动切换为新的主节点。在成为新的主节点之后，从节点需要重新生成 RDB 文件以保存当前的数据状态。\n\n因为 Redis 的 RDB 文件是由主节点生成并发送给从节点，当从节点成为新的主节点时，原先的 RDB 文件已经失效了。为了保证数据的完整性和一致性，从节点需要重新持久化当前的数据状态，并生成新的 RDB 文件。同时，从节点也需要通知其他从节点和客户端进行状态同步，确保整个集群的数据状态一致。\n\n在一些情况下，从节点可能会因为网络问题等原因与主节点失去联系，此时如果有新的写入操作，从节点可能无法同步这些操作。为了避免这种情况发生，可以设置主从节点之间的心跳检测和故障转移机制，及时发现主节点的故障并将从节点切换为新的主节点。这样就可以更好地保证集群的高可用性和数据一致性。\n\n问\n\nRedis的主从复制，在首次通过RDB同步完成之后，之后的同步都是增量同步吗？都是使用主节点中的缓存replication backlog来实现的吗？ 还是说：当同步完成之后，主节点的缓存replication backlog就不用了，而是使用命令广播的形式，主节点发生一个命令，就传给一个命令给从节点，从而实现主从复制？ 是哪一种方式？\n\n答\n\n这个回答不好，我就不贴了，我会看完源码之后，在写进来。\n\n\n\n","tags":["redis","主从复制","RDB"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redis的持久化RDB和AOF","url":"/note/JAVA/数据库/REDIS/Redis的持久化RDB和AOF/","content":"\n![image-20230526174932259](Redis的持久化RDB和AOF.assets/image-20230526174932259.png)\n\n为什么要有持久化？\n\n因为redis不仅可以用来做缓存，还可以用来做数据库。\n\n而作为数据库的时候，就要求数据不能丢失。\n\n数据不能丢失，就要有持久化。\n\n还有一个别的原因，就是redis的主从复制也需要。\n\n\n\n持久化的技术方案\n\n- 快照\n- 日志\n\n快照具有时点性，但是存储的是全量数据；日志具有实时性，但是存储的数据有限。\n\n对于Mysql来说，binlog就是快照，redolog就是日志；\n\n对于Redis来说，RDB就是快照，AOF就是日志；\n\n\n\n我们现在知道RDB是快照日志，现在有个问题：假设我的Redis中有10G的数据，在8点整的时候，生成RDB文件，生成文件的时候肯定不可能一下就生成RDB文件，假设这个过程持续10分钟，那么在这10分钟内Redis也会产生数据。那么问题来了：RDB文件中存储的是8点的数据，还是8:10的数据？\n\n这个问题就是：时点混乱的问题。\n\n怎么解决呢？\n\n- 在生成RDB的时候，阻塞式的生成，数据肯定是时点性的，但是此时Redis服务就不可用了。\n- 在生成RDB的时候，不阻塞，Redis服务继续提供服务，但是此时时点性怎么保证呢？\n\n有没有一种技术：既可以满足时点性， 又可以非阻塞？\n\n\n\nLinux中管道和进程的概念\n\n管道的特性是：将一个命令的输出作为另一个命令的输入。\n\n管道的实现原理是：开启新的进程，通过进程间通信实现。\n\n进程的概念：\n\n进程间的数据隔离：进程间的数据隔离是默认的，默认就是隔离的。\n\n进程间的数据通信：如果需要通信，需要特殊手段，比如 export 命令，类似于我们配置Java的环境变量\n\n进程间的数据变更：在进程间对同一个变量进行变更，数据不互通\n\n\n\n虚拟地址\n\n虚拟地址是操作系统为每个进程单独分配的地址空间。\n\n第一点，它让每个进程认为自己独占整个系统内存空间，有助于简化程序设计和管理，并提高了内存利用率。\n\n第二点，虚拟地址可以支持多任务处理和资源共享，不同的进程可以同时运行在同一个系统上，并且它们往往需要访问大量的数据和共享资源。通过将虚拟地址映射到各种实际的物理地址，所有进程都可以访问相同的物理内存位置，而又不会相互干扰，从而加强了系统的可靠性和稳定性。\n\n第三点，虚拟地址还有助于保护系统和进程的安全性，由于虚拟地址并不是真实地址，所以可以防止恶意程序破坏操作系统。\n\n\n\n写时复制copy-on-write（COW）\n\n写时复制是一种内存机制，由于优化重复的数据复制和修改操作。简单的说：当使用COW机制的时候，多个进程可以共享同一个内存区域，当其中某一个进程需要对共享内存区域进行修改的时候，会使用COW机制，将需要修改的这一部分内存区域进行复制，然后对复制后的内存区域进行修改，并修改当前进程的指针指向这块新复制的内存。从而不影响另一个进程的数据。\n\n当使用写时复制技术时，多个进程可以共享同一个资源，只有在其中一个进程真正需要进行写操作时，才会对该资源进行复制并修改。具体来说，当进程尝试写入共享内存时，操作系统会将该内存页复制一份并分配新的物理地址，这样每个进程都可以拥有自己的内存副本，从而避免了多个进程同时进行写操作造成的冲突。\n\n写时复制技术可以带来许多好处。首先，它可以减少内存开销，因为多个进程可以共享大部分内存空间，只有部分发生变化的内存才需要进行复制和修改。其次，它可以提高程序性能，因为不需要频繁地进行锁定和解锁等同步操作，从而避免了进程之间的竞争和调度延迟。此外，写时复制还有助于增强系统可靠性和安全性，因为每个进程都可以访问自己的内存副本，避免了错误和恶意代码对其他进程的影响。\n\n\n\nfork系统调用实现：既可以满足时点性， 又可以非阻塞！\n\nfork是一个系统调用，用于创建一个新的进程。当一个进程调用 fork 系统调用时，操作系统会复制一份当前进程的内存空间到一个新的进程中，新的进程是一个完全独立的进程，拥有新的PID，同时用于和主进程相同的内存区域。\n\n由于COW机制的存在，使用系统调用，既可以满足时点性，又可以满足非阻塞。\n\n\n\nRedis怎么触发fork系统调用：save和bgsave\n\nsave：是阻塞式的生成RDB文件\n\nbgsave：就是使用fork的方式，非阻塞的生成RDB文件\n\n注意：bgsave可以由用户手动执行。也可以通过配置文件配置让Redis自动执行，但是在配置文件中不叫bgsave，而是叫save；（Redis在这部分处理的不好，容易产生歧义）\n\n\n\nRDB快照文件\n\n格式：\n\n弊端：具有时点性，也就是说并不是实时数据。\n\n好处：二进制存储的，恢复特别快。\n\n怎么解决RDB快照的弊端的？也就是怎么让日志文件具有时点性。\n\n就是：AOF\n\n\n\nAOF：Append Only File\n\n通过名字就可以看出来，Append Only File，只会向文件中写，写的是什么呢？就是实时发生的各种写操作。\n\n通过AOF就可以实时的持久化Redis的实时数据。\n\n弊端：AOF中记录的是命令的原文，恢复起来很慢\n\n优点：可以记录实时数据\n\n\n\nAOF的重写\n\n- 是为了减少AOF的文件大小\n\n\n\nAOF和RDB中会存储相同的数据吗？\n\nAOF中存储的是全量数据吗？\n\nRedis服务重启后，AOF中的数据是全量的？ 追加写到之前的文件的。\n\nAOF中包含RDB的头文件是什么意思？aof-use-rdb-preamble\n\n\n\nAOF日志\n\n日志格式：\n\n什么时候存：\n\nAOF的刷新模式：no，always，everysec\n\nAOF的老模式和新模式：其实就是是否开启了aof-use-rdb-preamble，没开就是老模式，开了就是新模式\n\nAOF的重写：\n\nAOF的文件会无限扩大吗？还是达到一定量就拆分？\n\n在RDB和AOF同时开启的情况下，RDB已经存了时点备份，AOF中也会记录全量数据吗？\n\n在实际的生产环境中，RDB和AOF是怎么配置的呢？\n\nRDB的源码分析\n\n- 生成的源码分析\n- 载入的源码分析\n- 定时生成RDB的源码分析\n\nAOF的源码分析\n\n\n\n\n\nRDB生成的命令伪代码\n\n```c\n// SAVE的伪代码\ndef SAVE():\n    # 创建RDB文件\n    rdbSave()\n        \n        \n// BGSAVE的伪代码        \ndef BGSAVE():\n    # 创建子进程\n    pid = fork()\n    if pid == 0:\n        # 子进程负责创建RDB文件\n        rdbSave()\n        # 完成之后向父进程发送信号\n        signal_parent()\n    elif pid > 0:\n        # 父进程继续处理命令请求，并通过轮询等待子进程的信号\n        handle_request_and_wait_signal()\n    else:\n        # 处理出错情况\n        handle_fork_error()\n```\n\nAOF生成的命令伪代码\n\n```c\ndef eventLoop():\n    while True:\n        # 处理文件事件，接收命令请求以及发送命令回复\n        # 处理命令请求时可能会有新内容被追加到 aof_buf 缓冲区中\n        processFileEvents()\n        # 处理时间事件\n        processTimeEvents()\n        # 考虑是否要将 aof_buf 中的内容写入和保存到 AOF 文件里面\n        flushAppendOnlyFile()\n```\n\nAOF的重写伪代码\n\n```c\ndef aof_rewrite(new_aof_file_name):\n    # 创建新 AOF 文件\n    f = create_file(new_aof_file_name)\n    # 遍历数据库\n    for db in redisServer.db:\n        # 忽略空数据库\n        if db.is_empty(): continue\n        # 写入SELECT命令，指定数据库号码\n        f.write_command(\"SELECT\" + db.id)\n        # 遍历数据库中的所有键\n        for key in db:\n            # 忽略已过期的键\n            if key.is_expired(): continue\n            # 根据键的类型对键进行重写\n            if key.type == String:\n                rewrite_string(key)\n            elif key.type == List:\n                rewrite_list(key)\n            elif key.type == Hash:\n                rewrite_hash(key)\n            elif key.type == Set:\n                rewrite_set(key)\n            elif key.type == SortedSet:\n                rewrite_sorted_set(key)\n            # 如果键带有过期时间，那么过期时间也要被重写\n            if key.have_expire_time():\n                rewrite_expire_time(key)\n    # 写入完毕，关闭文件\n    f.close()\ndef rewrite_string(key):\n    # 使用GET命令获取字符串键的值\n    value = GET(key)\n    # 使用SET命令重写字符串键\n    f.write_command(SET, key, value)\ndef rewrite_list(key):\n    # 使用LRANGE命令获取列表键包含的所有元素\n    item1, item2, ..., itemN = LRANGE(key, 0, -1)\n    # 使用RPUSH命令重写列表键\n    f.write_command(RPUSH, key, item1, item2, ..., itemN)\ndef rewrite_hash(key):\n    # 使用HGETALL命令获取哈希键包含的所有键值对\n    field1, value1, field2, value2, ..., fieldN, valueN = HGETALL(key)\n    # 使用HMSET命令重写哈希键\n    f.write_command(HMSET, key, field1, value1, field2, value2, ..., fieldN, valueN)\ndef rewrite_set(key);\n    # 使用SMEMBERS命令获取集合键包含的所有元素\n    elem1, elem2, ..., elemN = SMEMBERS(key)\n    # 使用SADD命令重写集合键\n    f.write_command(SADD, key, elem1, elem2, ..., elemN)\ndef rewrite_sorted_set(key):\n    # 使用ZRANGE命令获取有序集合键包含的所有元素\n    member1, score1, member2, score2, ..., memberN, scoreN = ZRANGE(key, 0, -1, \"WITHSCORES\")\n    # 使用ZADD命令重写有序集合键\n    f.write_command(ZADD, key, score1, member1, score2, member2, ..., scoreN, memberN)\ndef rewrite_expire_time(key):\n    # 获取毫秒精度的键过期时间戳\n    timestamp = get_expire_time_in_unixstamp(key)\n    # 使用PEXPIREAT命令重写键的过期时间\n    f.write_command(PEXPIREAT, key, timestamp)\n```\n\n\n\n\n\n对于Redis的日志，如果只是作为缓存，rdb就够了。如果是把Redis当做数据库来用的话，由于要保证数据不丢失，就需要配置AOF\n\n\n\n\n\n\n\n\n\n\n\n\n\ncall 命令开始\n\nproc开始处理..\n\npropagate() 方法： 命令执行完之后，执行这个方法\n\n- 这个方法回写AOP（AppendOnlyFile）\n- 还有可能会replication\n\nfeedAppendOnlyFile\n\n\n\n会将命令协议化之后，积攒到 server.aof_buf\n\n如果当前有子进程在重写，会将server.aof_buf传给子进程\n\n\n\n循环处理事件\n\n其中有一个定时任务，这个任务做了什么？\n\n1、客户端的处理\n\n2、db的过期key的处理\n\n3、rehash的处理\n\n4、bgrdb\n\n5、bgrewriteaof\n\n6、前台刷写aof\n\n7、集群的相关处理\n\n\n\n\n\nnumevents = aeapiloop.....\n\n\n\n后台的 bgsave 和 bgrewriteaofCommand\n\n- 子进程怎么从主进程中获取增量的cmd\n\n\n\nrewriteAppendOnlyFileBackGround\n\n- aofCreatePipes\n  - pipe是什么？ 底层是FIFO，由操作系统完成提供\n  - 有什么用呢？使用pipe用于父子进程间的通信\n- redisFork\n  - fork出一个子进程\n  - 对于fork出的子进程来说，childpid==0\n  - 对于父进程来说，chilep==具体的值\n  - 由于copy-on-write的存在，fork出的子进程可以拿到fork这一时刻主进程之前的所有数据\n  - 但是fork之后的子进程，是无法拿到主进程之后的变动数据的？那么怎么拿呢？\n    - 就是上面说的 pipe 管道，通过pipe就可以实时的拿到主进程的实时变动数据。\n\n- setcpuaffinity：设置子进程的亲密度\n  - 避免子进程执行的时候，不停地cpu之间来回切换，性能消耗。\n- rewriteAppendOnlyFile(tempFIle)\n  - aewait() + aofReadDifferentFromparent() ：子进程从主进程中获取差异\n  - 子进程给主进程发一个：！，然后等待主进程给自己发一个：！\n    - 目的是因为：子进程说，别给我发了，我得先处理一下了。 主进程说：好的，不给你发了。\n  - 子进程：rename && exit\n  - 父进程收到子进程exit的信号之后，开始处理自己手头上剩余的工作\n- sendChildCowInfo：子进程开启进程间的通信，通过pipe\n\n- 子程序退出之后，主进程：checkChildernDone\n  - backGroundRewriteDonehandler：这里面主要是主线程把手里的工作都处理掉。然后rename(tmpfile, server.aof_filename)\n\n补充：copy-on-write\n\n- 在linux中，fork实现了 copy-on-write 机制。\n\n\n\n\n\n\n\n\n\n","tags":["redis","RDB","AOF"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redisson源码分析之分布式锁实现","url":"/note/JAVA/数据库/REDIS/Redisson源码分析之分布式锁实现/","content":"\n\n\n\n\n\n\n","tags":["redisson","源码"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redis源码分析之命令的处理流程","url":"/note/JAVA/数据库/REDIS/Redis源码分析之命令的处理流程/","content":"\n\n\n在之前的文章中，我们知道了一个请求到了Redis中是怎么被解析和执行的。\n\n具体参考：《Redis源码分析之请求的处理流程》\n\n这篇文章，来看看，一个具体的命令是怎么被执行的，怎么保存到redis中的以及怎么从redis中读取出来；\n\n会通过 String类型 和 Hash 类型两种类型的源码进行解读；\n\n\n\nSET K1 V1\n\n\n\n## String 类型\n\n\n\n\n\n## Hash 类型\n\n整体流程\n\n\n\n解决Key的Hash冲突\n\n- 链地址法\n- 源码位置在哪里\n\n\n\n解决filed的Hash冲突\n\n- 线性探测法\n- 源码位置在哪里\n\n\n\n\n\n- 1、执行`t_hash.c:530`中的`hsetCommand`这是 HSET 命令的入口\n- 2、hashTypeLookupWriteOrCreate：通过key查找robj（RedisObject）是否存在，不存在则创建，如果存在但不是HASH类型，程序终止\n- 3、hashTypeTryConversion：判断hash的底层实现是否需要转换：ZIPLIST->HT\n- 4、hashTypeSet：然后开始遍历field-value，存到哈希表中\n- 5、addReplyLongLong和addReply：根据指令的不同（HSET和HMSET），将响应返回给客户端\n- 6、signalModifiedKey，notifyKeyspaceEvent：一些通知事件：key变更，空间变更等。\n\n下面我们来分三个方向，仔细的分析\n第一个方向是：看看redis把保存在哪里了（对应上面的第 2 步）？\n第二个方向是：看看redis是怎么保存filed-value这些键值对的（对应上面的第 4 步）？\n第三个方向是：看看key 和 filed-value 是怎么关联起来的？\n\n第一个方向，在第2步中：\n\n- lookupKeyWrite：会先通过key查找 o（RedisObject）是否存在\n- createHashObject：o 不存在：就会创建一个RedisObject\n- dbAdd：创建好之后会把RedisObject保存到db中，然后返回 o\n  - sdsdup：把key复制成一个SDS\n  - dictAdd：把key和value（这个value是filed:value的集合）保存到dict中\n    - dictAddRaw：先把key保存下来，如果key保存失败了直接返回NULL，保存成功了返回key的entry对象\n      - _dictKeyIndex：获取key在哈希表(这里的哈希表指的是：dict下的ht[0]中的table)中的索引，如果已经存在返回-1，不存在返回index\n      - zmalloc：对entry分配内存并设置指针：将table[index]指向entry；entry的next指针指向table[index]，互相指向\n      - dictSetKey：将key的值保存在entry中；\n      - 返回entry\n    - dictSetVal：将value（这里的value是指filed-value的集合）也保存在entry中\n    - 返回DICT_OK\n  - 后续别的操作，和阻塞，集群之类的有关，没有细看 \n- o 存在：接着判断 o 的 type 是不是 OBJ_HASH，不是OBJ_HASH的话，返回NULL\n\n第二个方向。在第 4 步中：\n\n- 会判断编码是ZIPLIST，还是HT，这里我们看HT的逻辑\n- dictFind：查找当前filed在hashTable中是否存在，如果存在返回dictEntry\n- 如果已经存在了，获取该filed对应的value的值，然后free掉，就是释放掉，然后用当前新的value值，进行更新\n- 如果不存在，将filed封装成SDS，value也封装成SDS，调用222步骤中提到的dictAdd方法，保存下来\n\n第三个方向：\n\n我没有看到，应该看 HGET 指令，但是这个Hash 类型耽误了我两天时间，先不看了。后面有时间在研究吧。\n\n\n\n\n\n\n\n","tags":["源码","redis"],"categories":["JAVA","数据库","REDIS"]},{"title":"mac电脑设置权限后不生效","url":"/note/SYSTEM/MACOS/mac电脑设置权限后不生效/","content":"\n最近给我的mac电脑安装 软件的时候，需要授权，但是我已经给权限了，软件一直识别不出来。\n\n![image-20230515193042875](mac电脑设置权限后不生效.assets/image-20230515193042875.png)\n\n\n\n# 原因\n\n这是因为我之前安装过 Bartender 4， 后来卸载了，卸载之后，设置中的授权是不会删除的。\n\n然后我又重新安装了 Bartender 4，就需要重新授权。\n\n当我们打开设置进行授权的时候，显示的其实是：之前卸载的那个软件的授权，而不是我们新安装的这个软件的授权。\n\n\n\n# 解决办法\n\n## 将老的授权取消\n\n<img src=\"mac电脑设置权限后不生效.assets/image-20230515193330035.png\" alt=\"image-20230515193330035\" style=\"zoom:50%;\" />\n\n\n\n## 对新的重新添加授权\n\n\n\n<img src=\"mac电脑设置权限后不生效.assets/image-20230515193509028.png\" alt=\"image-20230515193509028\" style=\"zoom: 33%;\" />\n\n\n\n## 搞定\n\n<img src=\"mac电脑设置权限后不生效.assets/image-20230515193530353.png\" alt=\"image-20230515193530353\" style=\"zoom: 33%;\" />\n\n","tags":["macOS"],"categories":["SYSTEM","MACOS"]},{"title":"Redis源码分析之请求的处理流程","url":"/note/JAVA/数据库/REDIS/Redis源码分析之请求的处理流程/","content":"\n\n\nRedis拿到用户的指令之后，是怎么开始处理的\n\n\n\n## 前置知识点\n\n知识点1、Redis的通信协议：http://doc.redisfans.com/topic/protocol.html\n\n知识点2、当有Client连接Redis的时候，Redis会对这个Client创建一个Client对象保存在内存中，而这个Client对象在底层就是Socket\n\n知识点3、Socket在Linux底层就是一个文件描述符\n\n\n\n## 整体流程\n\n1、用户发送命令：通过Client发送一个Redis指令，就是向这个Scoket这个文件描述符写入数据\n\n2、Redis执行命令：就是检查该Socket对应的文件描述符上是否有数据可读，如果有，则会从该文件描述符上读取 Redis 命令请求数据。然后开始执行命令。\n\n3、Client接收响应：当 Redis执行完成之后，会将执行结果写入Socket所在的文件描述符，Client同样的，会读取该Socket上的数据，将其解析并显示给用户。\n\n\n\n这里我们只看Redis是如何执行命令的，就是第2步的具体源码实现。\n\n\n\n## 主要方法\n\n```c\n//Redis接收并请求处理：从Socket中读取到命令的字节数组; 将命令转换成Redis的数据类型; 执行命令\n//Redis5.X和Redis6.X的这个方法入参不一样了。因为6.X引入了IO线程\nvoid readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {\n   \t\n    //请求处理-读取Socket-1：从网卡中读取的是字节数组，对于Redis来说都要转换成sds（为什么？因为用户输入的命令一定是字符串的，而Redis中String类型的底层实现就是sds），这里引入了sds；\n    qblen = sdslen(c->querybuf);\n  \n    /*请求处理-读取Socket-8：这里开始真正的读取\n    * fd：表示要读取的Socket对应的文件描述符\n    * c->querybuf+qblen：表示输入缓冲区中（client中的：sds querybuf）数据存储的起始位置\n    * eadlen：表示读多少，默认是1024x16（如果一次读不完，就分多次读）*/\n    nread = read(fd, c->querybuf+qblen, readlen);\n    if (nread == -1) {\n        //-1表示读取有错误\n\n    } else if (nread == 0) {\n        //0表示已经读完了，Socket中已经没有数据了\n\n    } else if (c->flags & CLIENT_MASTER) {\n        //读了一次之后，Socket中，还有数据\n\n    }\n\n    //请求处理-解析命令-1：处理读取到的数据\n    processInputBufferAndReplicate(c);\n}\n```\n\n- 在Redis6.X之前，readQueryFromClient这个方法主要步骤是：读取Socket，解析命令，执行命令\n- 在Redis6.X之后，由于引入了IO线程，所以readQueryFromClient这个方法主要步骤是：分配IO线程，读取Socket，解析命令，执行命令\n\n\n\n由于我看的源码是：Redis 5.0.7，所以我们分为三步来分析：\n\n- 读取Socket\n- 解析命令\n- 执行命令\n\n\n\n## 第一步：读取Socket\n\n### 1、请求处理-读取Socket-1：读取Socket的方法入口\n\n- 从Socket中读取的是字节数组，对于Redis来说都要转换成sds，这里引入了sds；\n\n- 为什么要转换成sds\n  - 因为用户输入的命令一定是字符串的，而Redis中String类型的底层实现就是sds，参考《Redis基本类型与底层实现》\n- 什么是sds\n  - 后面会说\n\n\n```c\n//请求处理-读取Socket-1：从Socket中读取的是字节数组，对于Redis来说都要转换成sds（为什么？因为用户输入的命令一定是字符串的，而Redis中String类型的底层实现就是sds），这里引入了sds；\nqblen = sdslen(c->querybuf);\n```\n\n### 2、请求处理-读取Socket-2：client的定义\n\n- querybuf是指从socket中读取的数据，也就是用户输入的命令\n- argc表示用户输入的命令的个数\n- argv表示用户输入的命令的数组\n\n- 这里可以看到 client 中引用 sds，那么什么是sds\n  - 后面会说\n- client 中还引用了 RedisObject，什么是RedisObject\n  - 后面会说\n- 我们知道从Socket中读取，肯定读取到的都是字节数组，为什么这个使用了 sds 和 RedisObject，字节数组是怎么转成 sds 和 RedisObject的？\n  - 后面会说\n  - 为什么要转成redisOBject呢？因为 argc 和 argv 这两个参数表示用户输入的命令啊。而argv参数是redisObject类型的呀\n\n```c\n//请求处理-读取Socket-2：client的定义\ntypedef struct client {\n    //.....省略\n  \n    //querybuf是指从socket中读取的数据，也就是用户输入的命令，querybuf的类型是【sds】，sds是什么？\n    sds querybuf;\n\n    //.....省略\n  \n    //argc表示用户输入的命令的个数：这里就和Redis的【通信协议（前置知识点中）】有关了。先指定数量\n    int argc;\n    //argv表示用户输入的命令的数组：类型是【RedisObject】，这里就和Redis的【通信协议（前置知识点中）】有关了。在指定具体参数。【RedisObject】是什么？\n    robj **argv;\n   \n  \t//.....省略\n} client;\n```\n\n\n\n### 3、请求处理-读取Socket-3：redisOBject的定义\n\n- 在Redis中，命令，key，value等等都会被封装成 RedisObject\n\n```c\n//请求处理-读取Socket-3：redisOBject的定义，在Redis中，命令，key，value等等都会被封装成 RedisObject\ntypedef struct redisObject {\n    unsigned type:4;\n    unsigned encoding:4;\n    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or\n                            * LFU data (least significant 8 bits frequency\n                            * and most significant 16 bits access time). */\n    int refcount;\n    void *ptr;\n} robj;\n```\n\n在这里我们解释了什么是redisObject\n\n\n\n### 4、请求处理-读取Socket-4：client是怎么创建的\n\n- 其中的querybuf是个sds，这个sds是怎么来的\n\n```c\n//请求处理-读取Socket-4：client是怎么创建的，其中的querybuf是个sds，这个sds是怎么来的\nclient *createClient(int fd) {\n    client *c = zmalloc(sizeof(client));\n  \t//....省略\n  \n    //请求处理-读取Socket-5：client在初始化的时候，会先初始化一个空的sds\n    c->querybuf = sdsempty();\n  \n  \t//....省略\n  \n}\n```\n\n\n\n### 5、请求处理-读取Socket-5：初始化一个空的sds\n\n- client在初始化的时候，会先初始化一个空的sds\n\n- 我们进去看看sds到底是什么\n\n```c\n//请求处理-读取Socket-5：client在初始化的时候，会先初始化一个空的sds\nc->querybuf = sdsempty();\n```\n\n\n\n### 6、请求处理-读取Socket-6：初始化一个空的sds\n\n```c\n/* Create an empty (zero length) sds string. Even in this case the string\n * always has an implicit null term. */\n//请求处理-读取Socket-6：初始化一个空的sds\nsds sdsempty(void) {\n    //继续进入sdsnewlen这个方法\n    return sdsnewlen(\"\",0);\n}\n```\n\n### 7、请求处理-读取Socket-7：初始化sds\n\n- 此时sds是一个空的字节数组\n\n```c\n/*请求处理-读取Socket-7：初始化sds\n    此时sds是一个空的字节数组*/\nsds sdsnewlen(const void *init, size_t initlen) {\n    void *sh;\n    //这里定义了一个sds，这是sds出现的源头, 下面都是为了初始化这个sds\n    sds s;\n \t\t//....省略 \n    \n  \t//+1是因为后面有一个默认的 \\0 占一个字节\n    sh = s_malloc(hdrlen+initlen+1);\n  \t//省略\n  \n  \t//通过后面这一对初始化的逻辑，可以看到 sds 就是一个字节数组，结尾用 '\\0' 表示\n}\n```\n\n至此，sds是什么我们就知道了；但是\n\n- 从socket中读取的是字节数据，怎么转成sds和redisObject的，我们还不知道\n- 接着看\n\n\n\n### 8、请求处理-读取Socket-8：开始真正的读取Socket\n\n- fd：表示要读取的Socket对应的文件描述符\n- c->querybuf+qblen：表示输入缓冲区中（client中的：sds querybuf）数据存储的起始位置\n- eadlen：表示读多少，默认是1024x16（如果一次读不完，就分多次读）\n\n```c\n/*请求处理-读取Socket-8：这里开始真正的读取\n* fd：表示要读取的Socket对应的文件描述符\n* c->querybuf+qblen：表示输入缓冲区中（client中的：sds querybuf）数据存储的起始位置\n* eadlen：表示读多少，默认是1024x16（如果一次读不完，就分多次读）*/\nnread = read(fd, c->querybuf+qblen, readlen);\nif (nread == -1) {\n\t  //-1表示读取有错误\n\n  \t//省略\n} else if (nread == 0) {\n    //0表示已经读完了，Socket中已经没有数据了\n\n  \t//省略\n} else if (c->flags & CLIENT_MASTER) {\n    //读了一次之后，Socket中，还有数据\n    \n  \t//省略\n}\n```\n\n经过上面的步骤，此时socket中的数据（也就是用户输入的命令）此时已经完全写入到client中的querybuf中了。\n\n这一步就解答了：从socket中读取的是字节数据，怎么转成sds和redisObject的\n\n- 从socket中读的是字节数据，而我们的sds经过初始化，是一个空的字节数组，所以讲读取到的字节数组直接存到sds中；\n\n<img src=\"Redis源码分析之请求的处理流程.assets/image-20230516111105442.png\" alt=\"image-20230516111105442\" style=\"zoom:50%;\" />\n\n```base64\\n```\n\n这张图对上面的步骤做了一个简单的总结，图中肯定和redis源码不一致，简单理解这个思想就好。\n\n- 用户输入一个redis命令\n- client会把命令进行转换，转成redis的新的通信协议\n- 然后会将通信协议内容写入socket\n- 当读取的时候，redis会将socket中的内容读取字节数组sds中\n\n\n\n至此，第一步就结束了。不过我们有一个遗留额问题：从socket中读取的是字节数据，怎么redisObject的\n\n\n\n\n\n## 第二步：解析命令\n\n将第一步残留的问题拿过来\n\n- 从socket中读取的是字节数据，怎么转成 redisObject 的？\n- 先复习一下什么是redisObject，在：[3、请求处理-读取Socket-3：redisOBject的定义](#3、请求处理-读取Socket-3：redisOBject的定义)中我们知道了什么是redisObject\n\n\n\n### 9、请求处理-解析命令-1：处理读取到的数据\n\n```c\n//请求处理-解析命令-1：开始对读取到的socket数据，进行处理\nprocessInputBufferAndReplicate(c);\n```\n\n\n\n### 10、请求处理-解析命令-2：处理输入缓冲区\n\n- 就是处理我们从socket中读取的到数据，也就是client中的querybuf这个sds\n\n```c\n//请求处理-解析命令-2：处理输入缓冲区，就是处理我们从socket中读取的到数据，也就是client中的querybuf这个sds\nprocessInputBuffer(c);\n```\n\n\n\n### 11、请求处理-解析命令-3：解析通信协议，创建redisObject\n\n```c\n//请求处理-解析命令-3：处理输入缓冲区\nvoid processInputBuffer(client *c) {\n\t\t//省略...\n  \n    //循环，一个字节一个字节的处理，这里需要解析【通信协议】\n    while(c->qb_pos < sdslen(c->querybuf)) {\n       \n      \t//省略...\n      \n        //开始【解析协议】\n        if (!c->reqtype) {\n            if (c->querybuf[c->qb_pos] == '*') {\n                c->reqtype = PROTO_REQ_MULTIBULK;\n            } else {\n                c->reqtype = PROTO_REQ_INLINE;\n            }\n        }\n\t\t\t\t\n      \t//省略...\n      \n        //请求处理-解析命令-4：：根据请求类型，开始转换（就是创建RedisObject），这俩方法随便挑一个进去\n        if (c->reqtype == PROTO_REQ_INLINE) {\n            if (processInlineBuffer(c) != C_OK) break;\n        } else if (c->reqtype == PROTO_REQ_MULTIBULK) {\n            if (processMultibulkBuffer(c) != C_OK) break;\n        } else {\n            serverPanic(\"Unknown request type\");\n        }\n      \t//省略...\n        if (c->argc == 0) {\n          \t//argc == 0 表示用户没有输入参数\n            resetClient(c);\n        } else {\n            //请求处理-开始处理-1：转换完成redisObject之后，开始processCommand，执行命令\n            if (processCommand(c) == C_OK) {\n               //省略...\n            }\n        }\n    }//while循环结束\n  \n  //省略...\n}\n```\n\n\n\n### 12、请求处理-解析命令-4：将querybuf转成redisObject\n\n- 根据请求类型，开始转换（就是创建RedisObject），这俩方法随便挑一个进去，都可以\n- 我选的是：processMultibulkBuffer\n\n```c\n//请求处理-解析命令-4：：根据请求类型，开始转换（就是创建RedisObject），这俩方法随便挑一个进去\nif (c->reqtype == PROTO_REQ_INLINE) {\n    if (processInlineBuffer(c) != C_OK) break;\n} else if (c->reqtype == PROTO_REQ_MULTIBULK) {\n    if (processMultibulkBuffer(c) != C_OK) break;\n} else {\n    serverPanic(\"Unknown request type\");\n}\n```\n\n\n\n### 13、请求处理-解析命令-5：为redisObject初始化空间\n\n```c\n//请求处理-解析命令-5：为redisObject初始化空间\n//argv 是存在client中的，表示用户输入的命令\nif (c->argv) zfree(c->argv);\nc->argv = zmalloc(sizeof(robj*)*c->multibulklen);\n```\n\n\n\n### 14、请求处理-解析命令-6：开始创建RedisObject\n\n- createObject 是通用的创建对象的方法\n- createStringObject 是创建String类型的RedisObject \n- 入参都有：querybuf，表示使用字节数组创建 redisObject\n\n```c\nif (c->qb_pos == 0 &&\n                c->bulklen >= PROTO_MBULK_BIG_ARG &&\n                sdslen(c->querybuf) == (size_t)(c->bulklen+2))\n{\n    //请求处理-解析命令-6：createObject：开始创建RedisObject，对用户输入的命令分别创建RedisObejct\n    c->argv[c->argc++] = createObject(OBJ_STRING,c->querybuf);\n   \n} else {\n    //请求处理-解析命令-6：createStringObject：开始创建RedisObject，对用户输入的命令分别创建RedisObejct\n    c->argv[c->argc++] = createStringObject(c->querybuf+c->qb_pos,c->bulklen);\n\n}\n```\n\n到了这一步我们有几个疑问？\n\n- redisObject是什么？\n- 为什么要引入redisObject？\n- redisObject有什么用？\n\n\n\n### 15、请求处理-解析命令-7：redisObject的结构\n\n- [3、请求处理-读取Socket-3：redisOBject的定义](#3、请求处理-读取Socket-3：redisOBject的定义)中我们知道了什么是redisObject\n\n```c\n//请求处理-读取Socket-3：redisOBject的定义，在Redis中，命令，key，value等等都会被封装成 RedisObject\n//请求处理-解析命令-7：redisObject的结构\ntypedef struct redisObject {\n    unsigned type:4;\n    unsigned encoding:4;\n    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or\n                            * LFU data (least significant 8 bits frequency\n                            * and most significant 16 bits access time). */\n    int refcount;\n    void *ptr;\n} robj;\n```\n\n- type : 当前redisObject的类型，有五种：String，List，Set，Hash，SortedSet\n- encoding : 每一种类型都有一种或者多种编码，编码表示了该类型的具体底层实现\n- ptr ：该redisObject的指针，指向它的具体数据的字节数组\n\n关于redis的Object是什么，可以具体参考：《Redis基本类型与底层实现》\n\n### 16、请求处理-解析命令-8：初始化并创建RedisObject\n\n```c\n/*请求处理-解析命令-8：开始创建RedisObject*/\nrobj *createObject(int type, void *ptr) {\n    /*为redisObject初始化空间*/\n    robj *o = zmalloc(sizeof(*o));\n    //初始化空间完成之后，为redisObject的属性赋值，相当于实例化redisObject\n    o->type = type;\n    o->encoding = OBJ_ENCODING_RAW;\n    o->ptr = ptr;\n    o->refcount = 1;\n\n    //省略...\n    return o;\n}\n```\n\n### 17、请求处理-解析命令-9：将redisObject放在client的argv中\n\n- 创建完成之后返回redisObject，将redisObject放在client中的argv属性中\n- 由于它在一个循环里面，所以至此，所有的参数都初始化成了redisObject，并存放在了client中的argv中\n\n```c\n{\n    //请求处理-解析命令-6：createObject：开始创建RedisObject，对用户输入的命令分别创建RedisObejct\n    //请求处理-解析命令-9：创建完成之后返回redisObject，将redisObject放在client中的argv属性中\n    c->argv[c->argc++] = createObject(OBJ_STRING,c->querybuf);\n    \n} else {\n    //请求处理-解析命令-6：createStringObject：开始创建RedisObject，对用户输入的命令分别创建RedisObejct\n    //请求处理-解析命令-9：创建完成之后返回redisObject，将redisObject放在client中的argv属性中\n    c->argv[c->argc++] =\n        createStringObject(c->querybuf+c->qb_pos,c->bulklen);\n  \n}\n```\n\n至此，所有的参数都初始化成了redisObject，并存放在了client中的argv中\n\n<img src=\"Redis源码分析之请求的处理流程.assets/image-20230516111830546.png\" alt=\"image-20230516111830546\" style=\"zoom:50%;\" />\n\n```base64\\n```\n\n\n\n上图总结了第二步骤，redis会解析 querybuf 中的 sds 字节数组，解析协议，并将用户输入的参数封装成redisObject。\n\n同样的，上图和源码肯定不能一样。只是用于辅助理解流程。\n\n### 扩展：题外话\n\n和redisObject有关的更详细的说明，以及五种的类型底层实现数据结构，请参考《Redis基本类型与底层实现》\n\n\n\n## 第三步：执行命令\n\n经过刚才的两步，我们把用户的命令从socket中读出来了，并且把命令封装成了redisObject\n\n现在我们就来看看redis是怎么执行命令的。\n\n### 18、请求处理-执行命令-1：开始processCommand，执行命令\n\n- 转换完成redisObject之后，开始processCommand，执行命令\n\n```c\n//请求处理-执行命令-1：转换完成redisObject之后，开始processCommand，执行命令\nif (processCommand(c) == C_OK) {\n    //省略...\n}\n```\n\n\n\n### 19、请求处理-执行命令-2：找command\n\n- 通过命令argv[0] 去找command\n\n```c\n//请求处理-执行命令-2：通过命令argv[0] 去找command\nc->cmd = c->lastcmd = lookupCommand(c->argv[0]->ptr);\n```\n\n\n\n### 20、请求处理-执行命令-3：怎么找的command\n\n```c\n//请求处理-执行命令-3：怎么找的命令\n//server在初始化的时候，初始化了一个：redisCommandTable；通过这个table找的\n//比如通过\"set\"可以找到对应的命令是：setCommand，然后就可以去执行setCommand了\nstruct redisCommand redisCommandTable[] = {\n    //省略...\n  \t{\"set\",setCommand,-3,\"wm\",0,NULL,1,1,1,0,0},\n    //省略...\n}\n```\n\n\n\n### 21、请求处理-执行命令-4：真正执行command\n\n```c\n//请求处理-执行命令-4：这里开始真正的调用command\ncall(c,CMD_CALL_FULL);\n```\n\n\n\n### 22、请求处理-执行命令-5：command开始处理\n\n```c\n//请求处理-执行命令-5：这里开始处理了\nc->cmd->proc(c);\n```\n\n\n\n### 23、请求处理-执行命令-6：执行到string的setCommand中\n\n- 因为set命令是string类型的，所以就会执行到string的setCommand中\n\n```c\n/* SET key value [NX] [XX] [EX <seconds>] [PX <milliseconds>] */\n//请求处理-执行命令-6：因为set命令是string类型的，所以就会执行到string的setCommand中\nvoid setCommand(client *c) {\n\t//省略中....\n}\n```\n\n\n\n以上就是命令的执行过程，具体命令是怎么set和get数据的，在另一个文章中《Redis源码分析之命令的处理流程》\n\n\n\n\n\n\n\n\n\n\n\n\n\n一个命令是怎么执行的\n\n\n\n数据是怎么被SET进去的\n\n五个类型都要看一下\n\n\n\n数据是怎么被GET出来的\n\n五个类型都要看一下\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["源码","redis"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redis源码分析之DB的初始化","url":"/note/JAVA/数据库/REDIS/Redis源码分析之DB的初始化/","content":"\n\n\n我们知道在Redis中，有16个db，这16个db是redis存放数据的基础，所以我们看一下这16个db是怎么初始化的\n\n## 1、Redisdb初始化：初始化空间\n\n```c\n//初始化Redis的DB所占用的内存空间\nserver.db = zmalloc(sizeof(redisDb)*server.dbnum);\n```\n\n## 2、redisDB的数据结构：db的结构\n\n```c\n/* Redis database representation. There are multiple databases identified\n * by integers from 0 (the default database) up to the max configured\n * database. The database number is the 'id' field in the structure. */\ntypedef struct redisDb {\n    dict *dict;                 /* The keyspace for this DB */\n    dict *expires;              /* Timeout of keys with a timeout set */\n    dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP)*/\n    dict *ready_keys;           /* Blocked keys that received a PUSH */\n    dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */\n    int id;                     /* Database ID */\n    long long avg_ttl;          /* Average TTL, just for stats */\n    list *defrag_later;         /* List of key names to attempt to defrag one by one, gradually. */\n} redisDb;\n```\n\n\n\n## 3、开始init16个库：循环初始化16个库\n\n```c\n    //DB初始化-3：这里开始init 16个库\n    for (j = 0; j < server.dbnum; j++) {\n        //DB初始化-4：dict，expires，blocking_keys，ready_keys，watched_keys其实底层都是字典dict，所以都要初始化，只不过类型不同\n        server.db[j].dict = dictCreate(&dbDictType,NULL);\n        server.db[j].expires = dictCreate(&keyptrDictType,NULL);\n        server.db[j].blocking_keys = dictCreate(&keylistDictType,NULL);\n        server.db[j].ready_keys = dictCreate(&objectKeyPointerValueDictType,NULL);\n        server.db[j].watched_keys = dictCreate(&keylistDictType,NULL);\n        server.db[j].id = j;\n        server.db[j].avg_ttl = 0;\n        server.db[j].defrag_later = listCreate();\n    }\n```\n\n## 4、初始化：dict，expires，blocking_keys，ready_keys，watched_keys\n\ndict，expires，blocking_keys，ready_keys，watched_keys其实底层都是字典dict，所以都要初始化，只不过类型不同\n\n\n\n## 5、DB初始化-5：初始化dict字典\n\n```c\n/* Create a new hash table */\n//DB初始化-5：初始化dict字典\ndict *dictCreate(dictType *type,\n        void *privDataPtr)\n{\n    dict *d = zmalloc(sizeof(*d));\n\n    _dictInit(d,type,privDataPtr);\n    return d;\n}\n```\n\n\n\n## 6、DB初始化-6：dict字典的inti，默认初始化先都是NULL\n\n```c\n/* Initialize the hash table */\n//DB初始化-6：dict字典的inti，默认初始化先都是NULL\nint _dictInit(dict *d, dictType *type,\n        void *privDataPtr)\n{\n    _dictReset(&d->ht[0]);\n    _dictReset(&d->ht[1]);\n    d->type = type;\n    d->privdata = privDataPtr;\n    d->rehashidx = -1;\n    d->iterators = 0;\n    return DICT_OK;\n}\n```\n\n\n\n## 7、DB初始化-7：dict的结构\n\n```c\n//DB初始化-7：dict的结构\ntypedef struct dict {\n    //标识当前字典的类型，而且type中还有一些定义的函数\n    dictType *type;\n    //这里会存一些type中函数的可选参数\n    void *privdata;\n    //默认固定初始化2个，ht[0]是redis默认用的，ht[1]是渐进式rehash用的\n    dictht ht[2];\n    //rehash的标识\n    long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n    unsigned long iterators; /* number of iterators currently running */\n} dict;\n```\n\n\n\n## 8、DB初始化-8：dictht的结构\n\n```c\n/* This is our hash table structure. Every dictionary has two of this as we\n * implement incremental rehashing, for the old to the new table. */\n//DB初始化-8：dictht的结构\ntypedef struct dictht {\n    //底层实现，哈希表\n    dictEntry **table;\n    //哈希表的大小槽位，默认初始化是4个，超过了就扩容\n    unsigned long size;\n    //掩码，用来计算hash的，一直都是 size-1\n    unsigned long sizemask;\n    //当前hash表被使用了几个槽位\n    unsigned long used;\n} dictht;\n```\n\n## 9、DB初始化-9：哈希表的存储节点\n\n```c\n//DB初始化-9：哈希表的存储节点\ntypedef struct dictEntry {\n    //key值\n    void *key;\n    //value值\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n        double d;\n    } v;\n    //下一个节点：当hash冲突的时候，会使用链地址法\n    struct dictEntry *next;\n} dictEntry;\n```\n\n至此，Redis中存放数据的结构，这部分初始化的任务就结束了。\n\n## 10、redisDB的图示结构\n\n图示结构如下\n\n<img src=\"Redis源码分析之DB的初始化.assets/image-20230517172405358.png\" alt=\"image-20230517172405358\" style=\"zoom:80%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMnJlZGlzREIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMTMlMjIlMjB5JTNEJTIyLTU2OCUyMiUyMHdpZHRoJTNEJTIyMTY0JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMCUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjQlMjIlMjB0YXJnZXQlM0QlMjI5JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwdmFsdWUlM0QlMjIqJTIwZGljdCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMTMlMjIlMjB5JTNEJTIyLTU0NCUyMiUyMHdpZHRoJTNEJTIyMTY0JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1JTIyJTIwdmFsdWUlM0QlMjIqJTI2YW1wJTNCbmJzcCUzQmJsb2NraW5nX2tleXMlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTEzJTIyJTIweSUzRCUyMi01MjAlMjIlMjB3aWR0aCUzRCUyMjE2NCUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNiUyMiUyMHZhbHVlJTNEJTIyKiUyNmFtcCUzQm5ic3AlM0J3YXRjaGVkX2tleXMlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTEzJTIyJTIweSUzRCUyMi00OTIlMjIlMjB3aWR0aCUzRCUyMjE2NCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNyUyMiUyMHZhbHVlJTNEJTIyLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMTMlMjIlMjB5JTNEJTIyLTQ2OCUyMiUyMHdpZHRoJTNEJTIyMTY0JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4JTIyJTIwdmFsdWUlM0QlMjJyZWRpcyUyMERCJTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyM2Q3OWIwMCUzQmZpbGxDb2xvciUzRCUyM2ZmZTZjYyUzQmFsaWduJTNEbGVmdCUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQnJvdW5kZWQlM0QwJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMTMlMjIlMjB5JTNEJTIyLTYxOSUyMiUyMHdpZHRoJTNEJTIyMTU5JTIyJTIwaGVpZ2h0JTNEJTIyMzQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5JTIyJTIwdmFsdWUlM0QlMjJkaWN0JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIxMjklMjIlMjB5JTNEJTIyLTU2NiUyMiUyMHdpZHRoJTNEJTIyNzglMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwdmFsdWUlM0QlMjJ0eXBlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMTI5JTIyJTIweSUzRCUyMi01NDIlMjIlMjB3aWR0aCUzRCUyMjc4JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMSUyMiUyMHZhbHVlJTNEJTIycHJpdmRhdGElMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIxMjklMjIlMjB5JTNEJTIyLTUxOCUyMiUyMHdpZHRoJTNEJTIyNzglMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEyJTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMCUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjE2JTIyJTIwdGFyZ2V0JTNEJTIyMTglMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEzJTIyJTIwdmFsdWUlM0QlMjJodCU1QjAlNUQlMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIxMiUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMC4yMTQ5JTIyJTIweSUzRCUyMi0xJTIyJTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUzRSUzQ214UG9pbnQlMjBhcyUzRCUyMm9mZnNldCUyMiUyRiUzRSUzQyUyRm14R2VvbWV0cnklM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE0JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCZW50cnlYJTNEMCUzQmVudHJ5WSUzRDAuNSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjE2JTIyJTIwdGFyZ2V0JTNEJTIyMjQlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE1JTIyJTIwdmFsdWUlM0QlMjJodDElMjIlMjBzdHlsZSUzRCUyMmVkZ2VMYWJlbCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCcmVzaXphYmxlJTNEMCUzQnBvaW50cyUzRCU1QiU1RCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBjb25uZWN0YWJsZSUzRCUyMjAlMjIlMjBwYXJlbnQlM0QlMjIxNCUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMC4wMzQ0JTIyJTIweSUzRCUyMjElMjIlMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTNFJTNDbXhQb2ludCUyMGFzJTNEJTIyb2Zmc2V0JTIyJTJGJTNFJTNDJTJGbXhHZW9tZXRyeSUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTYlMjIlMjB2YWx1ZSUzRCUyMmh0JTVCMiU1RCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjEyOSUyMiUyMHklM0QlMjItNDk0JTIyJTIwd2lkdGglM0QlMjI3OCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTclMjIlMjB2YWx1ZSUzRCUyMnRyZWhhc2hpZHglMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIxMjklMjIlMjB5JTNEJTIyLTQ3MCUyMiUyMHdpZHRoJTNEJTIyNzglMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE4JTIyJTIwdmFsdWUlM0QlMjJkaWN0aHQlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjI4NSUyMiUyMHklM0QlMjItNjM1JTIyJTIwd2lkdGglM0QlMjI3OCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTklMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwJTNCZW50cnlZJTNEMC41JTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMjAlMjIlMjB0YXJnZXQlM0QlMjIyOSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjAlMjIlMjB2YWx1ZSUzRCUyMnRhYmxlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjg1JTIyJTIweSUzRCUyMi02MTElMjIlMjB3aWR0aCUzRCUyMjc4JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyMSUyMiUyMHZhbHVlJTNEJTIyc2l6ZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjI4NSUyMiUyMHklM0QlMjItNTg3JTIyJTIwd2lkdGglM0QlMjI3OCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjIlMjIlMjB2YWx1ZSUzRCUyMnNpemVtYXNrJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjg1JTIyJTIweSUzRCUyMi01NjMlMjIlMjB3aWR0aCUzRCUyMjc4JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyMyUyMiUyMHZhbHVlJTNEJTIydXNlZCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjI4NSUyMiUyMHklM0QlMjItNTM5JTIyJTIwd2lkdGglM0QlMjI3OCUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjQlMjIlMjB2YWx1ZSUzRCUyMmRpY3RodCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjg1JTIyJTIweSUzRCUyMi00NDglMjIlMjB3aWR0aCUzRCUyMjc4JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNSUyMiUyMHZhbHVlJTNEJTIydGFibGUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyODUlMjIlMjB5JTNEJTIyLTQyNCUyMiUyMHdpZHRoJTNEJTIyNzglMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI2JTIyJTIwdmFsdWUlM0QlMjJzaXplJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjg1JTIyJTIweSUzRCUyMi00MDAlMjIlMjB3aWR0aCUzRCUyMjc4JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNyUyMiUyMHZhbHVlJTNEJTIyc2l6ZW1hc2slMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyODUlMjIlMjB5JTNEJTIyLTM3NiUyMiUyMHdpZHRoJTNEJTIyNzglMjIlMjBoZWlnaHQlM0QlMjIyNCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI4JTIyJTIwdmFsdWUlM0QlMjJ1c2VkJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjg1JTIyJTIweSUzRCUyMi0zNTIlMjIlMjB3aWR0aCUzRCUyMjc4JTIyJTIwaGVpZ2h0JTNEJTIyMjQlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyOSUyMiUyMHZhbHVlJTNEJTIyZGljdEVudHJ5KiU1QiU1RCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNDEzJTIyJTIweSUzRCUyMi02MzglMjIlMjB3aWR0aCUzRCUyMjEwNSUyMiUyMGhlaWdodCUzRCUyMjI0JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzAlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JleGl0WCUzRDElM0JleGl0WSUzRDAuMjUlM0JleGl0RHglM0QwJTNCZXhpdER5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyMzElMjIlMjB0YXJnZXQlM0QlMjIzMiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzElMjIlMjB2YWx1ZSUzRCUyMjAlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI0MTMlMjIlMjB5JTNEJTIyLTYxOCUyMiUyMHdpZHRoJTNEJTIyMTA1JTIyJTIwaGVpZ2h0JTNEJTIyMjIlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzMiUyMiUyMHZhbHVlJTNEJTIyZGljdEVudHJ5JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI1NzclMjIlMjB5JTNEJTIyLTU0OCUyMiUyMHdpZHRoJTNEJTIyOTclMjIlMjBoZWlnaHQlM0QlMjIyNiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMzJTIyJTIwdmFsdWUlM0QlMjJrZXklRUYlQkMlOUElMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEbGVmdCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI1NzclMjIlMjB5JTNEJTIyLTUyMiUyMiUyMHdpZHRoJTNEJTIyOTclMjIlMjBoZWlnaHQlM0QlMjI0NiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM0JTIyJTIwdmFsdWUlM0QlMjJ2YWx1ZSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RsZWZ0JTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjU3NyUyMiUyMHklM0QlMjItNDc2JTIyJTIwd2lkdGglM0QlMjI5NyUyMiUyMGhlaWdodCUzRCUyMjQ0JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzUlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QxJTNCZW50cnlZJTNEMC43NSUzQmVudHJ5RHglM0QwJTNCZW50cnlEeSUzRDAlM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjM2JTIyJTIwdGFyZ2V0JTNEJTIyMzElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM2JTIyJTIwdmFsdWUlM0QlMjJuZXh0JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNTc3JTIyJTIweSUzRCUyMi00MzQlMjIlMjB3aWR0aCUzRCUyMjk3JTIyJTIwaGVpZ2h0JTNEJTIyMjYlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzNyUyMiUyMHZhbHVlJTNEJTIyMSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjQxMyUyMiUyMHklM0QlMjItNTk2JTIyJTIwd2lkdGglM0QlMjIxMDUlMjIlMjBoZWlnaHQlM0QlMjIyMiUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM4JTIyJTIwdmFsdWUlM0QlMjIyJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNDEzJTIyJTIweSUzRCUyMi01NzQlMjIlMjB3aWR0aCUzRCUyMjEwNSUyMiUyMGhlaWdodCUzRCUyMjIyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzklMjIlMjB2YWx1ZSUzRCUyMjMlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI0MTMlMjIlMjB5JTNEJTIyLTU1MiUyMiUyMHdpZHRoJTNEJTIyMTA1JTIyJTIwaGVpZ2h0JTNEJTIyMjIlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0MCUyMiUyMHZhbHVlJTNEJTIycm9iaiUyMiUyMHN0eWxlJTNEJTIyZWxsaXBzZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2Q1ZThkNCUzQnN0cm9rZUNvbG9yJTNEJTIzODJiMzY2JTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjYxNiUyMiUyMHklM0QlMjItNTE4JTIyJTIwd2lkdGglM0QlMjIzOSUyMiUyMGhlaWdodCUzRCUyMjM5JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDElMjIlMjB2YWx1ZSUzRCUyMnJvYmolMjIlMjBzdHlsZSUzRCUyMmVsbGlwc2UlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkNWU4ZDQlM0JzdHJva2VDb2xvciUzRCUyMzgyYjM2NiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI2MjIlMjIlMjB5JTNEJTIyLTQ3My41JTIyJTIwd2lkdGglM0QlMjIzOSUyMiUyMGhlaWdodCUzRCUyMjM5JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n","tags":["源码","redis"],"categories":["JAVA","数据库","REDIS"]},{"title":"vscode的快捷键","url":"/note/TOOLS/VSCODE/vscode的快捷键/","content":"\n\n\n最近在看Redis的源码，用idea不行，所以使用了vscode；\n\nvscode 的快捷键和idea不同。 \n\n\n\n我也不学vscode的快捷键了。把比较常用的几个改成和IDEA一样就可以了。在如下地方改了就好\n\n<img src=\"vscode的快捷键.assets/image-20230516172541972.png\" alt=\"image-20230516172541972\" style=\"zoom:50%;\" />\n\n| 快捷键             | 原来的       | 改之后的          |\n| ------------------ | ------------ | ----------------- |\n| 引用：查找所有引用 | 忘了...      | command B         |\n| 返回               | ctrl -       | command option <- |\n| 前进               | ctrl shift - | command option -> |\n\n\n\n\n\nVscode 原版命令大全\n\nhttps://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf\n\n![image-20230513224527718](vscode的快捷键.assets/image-20230513224527718.png)","tags":["vscode","快捷键"],"categories":["TOOLS","VSCODE"]},{"title":"vscode的客户端在国内快速下载","url":"/note/TOOLS/VSCODE/vscode的客户端在国内快速下载/","content":"\n\n\n最近在阅读redis的源码，网上推荐的源码阅读工具是 source insight 4.0, 可惜的是mac没有，我在虚拟机重装了半天，也破解不了。\n\n烦死了\n\n\n\n就用了vscode\n\n\n\n去官网下载，慢的要死。\n\n\n\n找到一个办法，可以两秒钟下载；\n\n官网的下载地址：\n\n- https://az764295.vo.msecnd.net/stable/b3e4e68a0bc097f0ae7907b217c1119af9e03435/VSCode-darwin-universal.zip\n\n将下载地址进行替换\n\n- https://vscode.cdn.azure.cn/stable/b3e4e68a0bc097f0ae7907b217c1119af9e03435/VSCode-darwin-universal.zip\n\n\n\nemmm..... 快的一比，网速太快，请系好安全带。\n","tags":["vscode"],"categories":["TOOLS","VSCODE"]},{"title":"大厂面试之Java基础篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Java基础篇/","content":"\n## 1.Java的特点\n\n\n\n**Java是一门面向对象的编程语言**。面向对象和面向过程的区别参考下一个问题。\n\n\n\n**Java具有平台独立性和移植性**。\n\n\n\n- Java有一句口号：`Write once, run anywhere`，一次编写、到处运行。这也是Java的魅力所在。而实现这种特性的正是Java虚拟机JVM。已编译的Java程序可以在任何带有JVM的平台上运行。你可以在windows平台编写代码，然后拿到linux上运行。只要你在编写完代码后，将代码编译成.class文件，再把class文件打成Java包，这个jar包就可以在不同的平台上运行了。\n\n\n\n**Java具有稳健性**。\n\n\n\n- Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。\n\n- 异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用`try/catch/finally`语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。\n\n\n\n## 2.Java 与 C++ 的区别\n\n\n\nJava 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 兼容 C ，不但支持面向对象也支持面向过程。\n\n\n\nJava 通过虚拟机从而实现跨平台特性， C++ 依赖于特定的平台。\n\n\n\nJava 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。\n\n\n\nJava 支持自动垃圾回收，而 C++ 需要手动回收。\n\n\n\nJava 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。\n\n\n\n## 3.面向对象和面向过程的区别？\n\n\n\n面向对象和面向过程是一种软件开发思想。\n\n\n\n- 面向过程就是分析出解决问题所需要的步骤，然后用函数按这些步骤实现，使用的时候依次调用就可以了。\n\n- 面向对象是把构成问题事务分解成各个对象，分别设计这些对象，然后将他们组装成有完整功能的系统。面向过程只用函数实现，面向对象是用类实现各个功能模块。\n\n\n\n以五子棋为例，面向过程的设计思路就是首先分析问题的步骤：\n\n\n\n1、开始游戏，2、黑子先走，3、绘制画面，4、判断输赢，5、轮到白子，6、绘制画面，7、判断输赢，8、返回步骤2，9、输出最后结果。 把上面每个步骤用分别的函数来实现，问题就解决了。\n\n\n\n而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为：\n\n\n\n1、黑白双方\n\n\n\n2、棋盘系统，负责绘制画面\n\n\n\n3、规则系统，负责判定诸如犯规、输赢等。\n\n\n\n黑白双方负责接受用户的输入，并告知棋盘系统棋子布局发生变化，棋盘系统接收到了棋子的变化的信息就负责在屏幕上面显示出这种变化，同时利用规则系统来对棋局进行判定。\n\n\n\n## 4.JDK/JRE/JVM三者的关系\n\n\n\n**JVM**\n\n\n\n英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。Java 能够跨平台运行的核心在于 JVM 。\n\n\n\n![img](大厂面试之Java基础篇.assets/1676356804547-8a9b7154-388f-4023-ab0e-85288c1a2d6c.webp)\n\n\n\n所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。也就是说class文件并不直接与机器的操作系统交互，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。\n\n\n\n针对不同的系统有不同的 jvm 实现，有 Linux 版本的 jvm 实现，也有Windows 版本的 jvm 实现，但是同一段代码在编译后的字节码是一样的。这就是Java能够跨平台，实现一次编写，多处运行的原因所在。\n\n\n\n**JRE**\n\n\n\n英文名称（Java Runtime Environment），就是Java 运行时环境。我们编写的Java程序必须要在JRE才能运行。它主要包含两个部分，JVM 和 Java 核心类库。\n\n\n\n![img](大厂面试之Java基础篇.assets/1676356806545-747ebc8f-f2a9-4dce-a34f-7a75c22fbbf1.png)\n\n\n\nJRE是Java的运行环境，并不是一个开发环境，所以没有包含任何开发工具，如编译器和调试器等。\n\n\n\n如果你只是想运行Java程序，而不是开发Java程序的话，那么你只需要安装JRE即可。\n\n\n\n**JDK**\n\n\n\n英文名称（Java Development Kit），就是 Java 开发工具包\n\n\n\n学过Java的同学，都应该安装过JDK。当我们安装完JDK之后，目录结构是这样的\n\n\n\n可以看到，JDK目录下有个JRE，也就是JDK中已经集成了 JRE，不用单独安装JRE。\n\n\n\n另外，JDK中还有一些好用的工具，如jinfo，jps，jstack等。\n\n\n\n最后，总结一下JDK/JRE/JVM，他们三者的关系\n\n\n\n**JRE = JVM + Java 核心类库**\n\n\n\n**JDK = JRE + Java工具 + 编译器 + 调试器**\n\n\n\n![img](大厂面试之Java基础篇.assets/1676356808527-9378b532-29c7-474c-9e91-76eb2dad0a56.png)\n\n\n\n## 5.面向对象有哪些特性？\n\n\n\n面向对象四大特性：封装，继承，多态，抽象\n\n\n\n1、封装就是将类的信息隐藏在类内部，不允许外部程序直接访问，而是通过该类的方法实现对隐藏信息的操作和访问。 良好的封装能够减少耦合。\n\n\n\n2、继承是从已有的类中派生出新的类，新的类继承父类的属性和行为，并能扩展新的能力，大大增加程序的重用性和易维护性。在Java中是单继承的，也就是说一个子类只有一个父类。\n\n\n\n3、多态是同一个行为具有多个不同表现形式的能力。在不修改程序代码的情况下改变程序运行时绑定的代码。实现多态的三要素：继承、重写、父类引用指向子类对象。\n\n\n\n- 静态多态性：通过重载实现，相同的方法有不同的參数列表，可以根据参数的不同，做出不同的处理。\n\n- 动态多态性：在子类中重写父类的方法。运行期间判断所引用对象的实际类型，根据其实际类型调用相应的方法。\n\n\n\n4、抽象。把客观事物用代码抽象出来。\n\n\n\n## 6.Java的基本数据类型有哪些？\n\n\n\n- byte，8bit\n\n- char，16bit\n\n- short，16bit\n\n- int，32bit\n\n- float，32bit\n\n- long，64bit\n\n- double，64bit\n\n- boolean，只有两个值：true、false，可以使⽤用 1 bit 来存储\n\n\n\n![img](大厂面试之Java基础篇.assets/1676356813264-e1ca0046-0a52-416a-822a-d6a167fc36e7.png)\n\n\n\n在Java规范中，没有明确指出boolean的大小。在《Java虚拟机规范》给出了单个boolean占4个字节，和boolean数组1个字节的定义，具体 **还要看虚拟机实现是否按照规范来**，因此boolean占用1个字节或者4个字节都是有可能的。\n\n\n\n## 7.为什么不能用浮点型表示金额？\n\n\n\n由于计算机中保存的小数其实是十进制的小数的近似值，并不是准确值，所以，千万不要在代码中使用浮点数来表示金额等重要的指标。\n\n\n\n建议使用BigDecimal或者Long来表示金额。\n\n\n\n## 8.什么是值传递和引用传递？\n\n\n\n值传递是对基本型变量而言的，传递的是该变量的一个副本，改变副本不影响原变量。\n\n\n\n引用传递一般是对于对象型变量而言的，传递的是该对象地址的一个副本，并不是原对象本身，两者指向同一片内存空间。所以对引用对象进行操作会同时改变原对象。\n\n\n\n**java中不存在引用传递，只有值传递**。即不存在变量a指向变量b，变量b指向对象的这种情况。\n\n\n\n## 9.了解Java的包装类型吗？为什么需要包装类？\n\n\n\nJava 是一种面向对象语言，很多地方都需要使用对象而不是基本数据类型。比如，在集合类中，我们是无法将 int 、double 等类型放进去的。因为集合的容器要求元素是 Object 类型。\n\n\n\n为了让基本类型也具有对象的特征，就出现了包装类型。相当于将基本类型包装起来，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作。\n\n\n\n## 10.自动装箱和拆箱\n\n\n\nJava中基础数据类型与它们对应的包装类见下表：\n\n\n\n![img](大厂面试之Java基础篇.assets/1676356815969-603b452c-c881-45bd-a48c-56f7a21838c7.png)\n\n\n\n装箱：将基础类型转化为包装类型。\n\n\n\n拆箱：将包装类型转化为基础类型。\n\n\n\n当基础类型与它们的包装类有如下几种情况时，编译器会**自动**帮我们进行装箱或拆箱：\n\n\n\n- 赋值操作（装箱或拆箱）\n\n- 进行加减乘除混合运算 （拆箱）\n\n- 进行>,<,==比较运算（拆箱）\n\n- 调用equals进行比较（装箱）\n\n- ArrayList、HashMap等集合类添加基础类型数据时（装箱）\n\n\n\n示例代码：\n\n\n\n```java\nInteger x = 1; // 装箱 调⽤ Integer.valueOf(1)\nint y = x; // 拆箱 调⽤了 X.intValue()\n```\n\n\n\n下面看一道常见的面试题：\n\n\n\n```java\nInteger a = 100;\nInteger b = 100;\nSystem.out.println(a == b);\n\nInteger c = 200;\nInteger d = 200;\nSystem.out.println(c == d);\n```\n\n\n\n输出：\n\n\n\n```java\ntrue\nfalse\n```\n\n\n\n为什么第三个输出是false？看看 Integer 类的源码就知道啦。\n\n\n\n```java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n\n\n`Integer c = 200;` 会调用 调⽤`Integer.valueOf(200)`。而从Integer的valueOf()源码可以看到，这里的实现并不是简单的new Integer，而是用IntegerCache做一个cache。\n\n\n\n```java\nprivate static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n    static final Integer cache[];\n\n    static {\n        // high value may be configured by property\n        int h = 127;\n        String integerCacheHighPropValue =\n            sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n        if (integerCacheHighPropValue != null) {\n            try {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                // Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            } catch( NumberFormatException nfe) {\n                // If the property cannot be parsed into an int, ignore it.\n            }\n        }\n        high = h;\n    }\n    ...\n}\n```\n\n\n\n这是IntegerCache静态代码块中的一段，默认Integer cache 的下限是-128，上限默认127。当赋值100给Integer时，刚好在这个范围内，所以从cache中取对应的Integer并返回，所以a和b返回的是同一个对象，所以比较是相等的，当赋值200给Integer时，不在cache 的范围内，所以会new Integer并返回，当然比较的结果是不相等的。\n\n\n\n## 11.String 为什么不可变？\n\n\n\n先看看什么是不可变的对象。\n\n\n\n如果一个对象，在它创建完成之后，不能再改变它的状态，那么这个对象就是不可变的。不能改变状态的意思是，不能改变对象内的成员变量，包括基本数据类型的值不能改变，引用类型的变量不能指向其他的对象，引用类型指向的对象的状态也不能改变。\n\n\n\n接着来看Java8 String类的源码：\n\n\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n}\n```\n\n\n\n从源码可以看出，String对象其实在内部就是一个个字符，存储在这个value数组里面的。\n\n\n\nvalue数组用final修饰，final 修饰的变量，值不能被修改。因此value不可以指向其他对象。\n\n\n\nString类内部所有的字段都是私有的，也就是被private修饰。而且String没有对外提供修改内部状态的方法，因此value数组不能改变。\n\n\n\n所以，String是不可变的。\n\n\n\n那为什么String要设计成不可变的？\n\n\n\n主要有以下几点原因：\n\n\n\n1、**线程安全**。同一个字符串实例可以被多个线程共享，因为字符串不可变，本身就是线程安全的。\n\n\n\n2、**支持hash映射和缓存。**因为String的hash值经常会使用到，比如作为 Map 的键，不可变的特性使得 hash 值也不会变，不需要重新计算。\n\n\n\n3、**出于安全考虑**。网络地址URL、文件路径path、密码通常情况下都是以String类型保存，假若String不是固定不变的，将会引起各种安全隐患。比如将密码用String的类型保存，那么它将一直留在内存中，直到垃圾收集器把它清除。假如String类不是固定不变的，那么这个密码可能会被改变，导致出现安全隐患。\n\n\n\n4、**字符串常量池优化**。String对象创建之后，会缓存到字符串常量池中，下次需要创建同样的对象时，可以直接返回缓存的引用。\n\n\n\n既然我们的String是不可变的，它内部还有很多substring， replace， replaceAll这些操作的方法。这些方法好像会改变String对象？怎么解释呢？\n\n\n\n其实不是的，我们每次调用replace等方法，其实会在堆内存中创建了一个新的对象。然后其value数组引用指向不同的对象。\n\n\n\n## 12.String, StringBuffer 和 StringBuilder区别\n\n\n\n**1. 可变性**\n\n\n\n- String 不可变\n\n- StringBuffer 和 StringBuilder 可变\n\n\n\n**2. 线程安全**\n\n\n\n- String 不可变，因此是线程安全的\n\n- StringBuilder 不是线程安全的\n\n- StringBuffer 是线程安全的，内部使用 synchronized 进行同步\n\n\n\n## 13.什么是StringJoiner？\n\n\n\nStringJoiner是 Java 8 新增的一个 API，它基于 StringBuilder 实现，用于实现对字符串之间通过分隔符拼接的场景。\n\n\n\nStringJoiner 有两个构造方法，第一个构造要求依次传入分隔符、前缀和后缀。第二个构造则只要求传入分隔符即可（前缀和后缀默认为空字符串）。\n\n\n\n```java\nStringJoiner(CharSequence delimiter, CharSequence prefix, CharSequence suffix)\nStringJoiner(CharSequence delimiter)\n```\n\n\n\n有些字符串拼接场景，使用 StringBuffer 或 StringBuilder 则显得比较繁琐。\n\n\n\n比如下面的例子：\n\n\n\n```java\nList<Integer> values = Arrays.asList(1, 3, 5);\nStringBuilder sb = new StringBuilder(\"(\");\n\nfor (int i = 0; i < values.size(); i++) {\n\tsb.append(values.get(i));\n\tif (i != values.size() -1) {\n\t\tsb.append(\",\");\n\t}\n}\n\nsb.append(\")\");\n```\n\n\n\n而通过StringJoiner来实现拼接List的各个元素，代码看起来更加简洁。\n\n\n\n```java\nList<Integer> values = Arrays.asList(1, 3, 5);\nStringJoiner sj = new StringJoiner(\",\", \"(\", \")\");\n\nfor (Integer value : values) {\n\tsj.add(value.toString());\n}\n```\n\n\n\n另外，像平时经常使用的Collectors.joining(\",\")，底层就是通过StringJoiner实现的。\n\n\n\n源码如下：\n\n\n\n```java\npublic static Collector<CharSequence, ?, String> joining(\n    CharSequence delimiter,CharSequence prefix,CharSequence suffix) {\n    return new CollectorImpl<>(\n            () -> new StringJoiner(delimiter, prefix, suffix),\n            StringJoiner::add, StringJoiner::merge,\n            StringJoiner::toString, CH_NOID);\n}\n```\n\n\n\n## 14.String 类的常用方法有哪些？\n\n\n\n1、indexOf()：返回指定字符的索引。\n\n\n\n2、charAt()：返回指定索引处的字符。\n\n\n\n3、replace()：字符串替换。\n\n\n\n4、trim()：去除字符串两端空白。\n\n\n\n5、split()：分割字符串，返回一个分割后的字符串数组。\n\n\n\n6、getBytes()：返回字符串的 byte 类型数组。\n\n\n\n7、length()：返回字符串长度。\n\n\n\n8、toLowerCase()：将字符串转成小写字母。\n\n\n\n9、toUpperCase()：将字符串转成大写字符。\n\n\n\n10、substring()：截取字符串。\n\n\n\n11、equals()：字符串比较。\n\n\n\n## 15.new String(\"dabin\")会创建几个对象？\n\n\n\n使用这种方式会创建两个字符串对象（前提是字符串常量池中没有 \"dabin\" 这个字符串对象）。\n\n\n\n- \"dabin\" 属于字符串字面量，因此编译时期会在字符串常量池中创建一个字符串对象，指向这个 \"dabin\" 字符串字面量；\n\n- 使用 new 的方式会在堆中创建一个字符串对象。\n\n\n\n## 16.什么是字符串常量池？\n\n\n\n字符串常量池（String Pool）保存着所有字符串字面量，这些字面量在编译时期就确定。字符串常量池位于堆内存中，专门用来存储字符串常量。在创建字符串时，JVM首先会检查字符串常量池，如果该字符串已经存在池中，则返回其引用，如果不存在，则创建此字符串并放入池中，并返回其引用。\n\n\n\n## 17.Object常用方法有哪些？\n\n\n\nJava面试经常会出现的一道题目，Object的常用方法。下面给大家整理一下。\n\n\n\nObject常用方法有：`toString()`、`equals()`、`hashCode()`、`clone()`等。\n\n\n\n**toString**\n\n\n\n默认输出对象地址。\n\n\n\n```java\npublic class Person {\n    private int age;\n    private String name;\n\n    public Person(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Person(18, \"程序员小官\").toString());\n    }\n    //output\n    //me.tyson.java.core.Person@4554617c\n}\n```\n\n\n\n可以重写toString方法，按照重写逻辑输出对象值。\n\n\n\n```java\npublic class Person {\n    private int age;\n    private String name;\n\n    public Person(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return name + \":\" + age;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Person(18, \"程序员小官\").toString());\n    }\n    //output\n    //程序员小官:18\n}\n```\n\n\n\n**equals**\n\n\n\n默认比较两个引用变量是否指向同一个对象（内存地址）。\n\n\n\n```java\npublic class Person {\n    private int age;\n    private String name;\n\n    public Person(int age, String name) {\n       this.age = age;\n       this.name = name;\n    }\n\n    public static void main(String[] args) {\n        String name = \"程序员小官\";\n        Person p1 = new Person(18, name);\n        Person p2 = new Person(18, name);\n\n        System.out.println(p1.equals(p2));\n    }\n    //output\n    //false\n}\n```\n\n\n\n可以重写equals方法，按照age和name是否相等来判断：\n\n\n\n```java\npublic class Person {\n    private int age;\n    private String name;\n\n    public Person(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o instanceof Person) {\n            Person p = (Person) o;\n            return age == p.age && name.equals(p.name);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        String name = \"程序员小官\";\n        Person p1 = new Person(18, name);\n        Person p2 = new Person(18, name);\n\n        System.out.println(p1.equals(p2));\n    }\n    //output\n    //true\n}\n```\n\n\n\n**hashCode**\n\n\n\n将与对象相关的信息映射成一个哈希值，默认的实现hashCode值是根据内存地址换算出来。\n\n\n\n```java\npublic class Cat {\n    public static void main(String[] args) {\n        System.out.println(new Cat().hashCode());\n    }\n    //out\n    //1349277854\n}\n```\n\n\n\n**clone**\n\n\n\nJava赋值是复制对象引用，如果我们想要得到一个对象的副本，使用赋值操作是无法达到目的的。Object对象有个clone()方法，实现了对\n\n\n\n象中各个属性的复制，但它的可见范围是protected的。\n\n\n\n```java\nprotected native Object clone() throws CloneNotSupportedException;\n```\n\n\n\n所以实体类使用克隆的前提是：\n\n\n\n- 实现Cloneable接口，这是一个标记接口，自身没有方法，这应该是一种约定。调用clone方法时，会判断有没有实现Cloneable接口，没有实现Cloneable的话会抛异常CloneNotSupportedException。\n\n- 覆盖clone()方法，可见性提升为public。\n\n\n\n```java\npublic class Cat implements Cloneable {\n    private String name;\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n\n    public static void main(String[] args) throws CloneNotSupportedException {\n        Cat c = new Cat();\n        c.name = \"程序员小官\";\n        Cat cloneCat = (Cat) c.clone();\n        c.name = \"小官\";\n        System.out.println(cloneCat.name);\n    }\n    //output\n    //程序员小官\n}\n```\n\n\n\n**getClass**\n\n\n\n返回此 Object 的运行时类，常用于java反射机制。\n\n\n\n```java\npublic class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    public static void main(String[] args) {\n        Person p = new Person(\"程序员小官\");\n        Class clz = p.getClass();\n        System.out.println(clz);\n        //获取类名\n        System.out.println(clz.getName());\n    }\n    /**\n     * class com.tyson.basic.Person\n     * com.tyson.basic.Person\n     */\n}\n```\n\n\n\n**wait**\n\n\n\n当前线程调用对象的wait()方法之后，当前线程会释放对象锁，进入等待状态。等待其他线程调用此对象的notify()/notifyAll()唤醒或者等待超时时间wait(long timeout)自动唤醒。线程需要获取obj对象锁之后才能调用 obj.wait()。\n\n\n\n**notify**\n\n\n\nobj.notify()唤醒在此对象上等待的单个线程，选择是任意性的。notifyAll()唤醒在此对象上等待的所有线程。\n\n\n\n## 18.讲讲深拷贝和浅拷贝？\n\n\n\n**浅拷贝**：拷⻉对象和原始对象的引⽤类型引用同⼀个对象。\n\n\n\n以下例子，Cat对象里面有个Person对象，调用clone之后，克隆对象和原对象的Person引用的是同一个对象，这就是浅拷贝。\n\n\n\n```java\npublic class Cat implements Cloneable {\n    private String name;\n    private Person owner;\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n\n    public static void main(String[] args) throws CloneNotSupportedException {\n        Cat c = new Cat();\n        Person p = new Person(18, \"程序员小官\");\n        c.owner = p;\n\n        Cat cloneCat = (Cat) c.clone();\n        p.setName(\"小官\");\n        System.out.println(cloneCat.owner.getName());\n    }\n    //output\n    //小官\n}\n```\n\n\n\n**深拷贝**：拷贝对象和原始对象的引用类型引用不同的对象。\n\n\n\n以下例子，在clone函数中不仅调用了super.clone，而且调用Person对象的clone方法（Person也要实现Cloneable接口并重写clone方法），从而实现了深拷贝。可以看到，拷贝对象的值不会受到原对象的影响。\n\n\n\n```java\npublic class Cat implements Cloneable {\n    private String name;\n    private Person owner;\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        Cat c = null;\n        c = (Cat) super.clone();\n        c.owner = (Person) owner.clone();//拷贝Person对象\n        return c;\n    }\n\n    public static void main(String[] args) throws CloneNotSupportedException {\n        Cat c = new Cat();\n        Person p = new Person(18, \"程序员小官\");\n        c.owner = p;\n\n        Cat cloneCat = (Cat) c.clone();\n        p.setName(\"小官\");\n        System.out.println(cloneCat.owner.getName());\n    }\n    //output\n    //程序员小官\n}\n```\n\n\n\n## 19.两个对象的hashCode()相同，则 equals()是否也一定为 true？\n\n\n\nequals与hashcode的关系：\n\n\n\n1、如果两个对象调用equals比较返回true，那么它们的hashCode值一定要相同；\n\n\n\n2、如果两个对象的hashCode相同，它们并不一定相同。\n\n\n\nhashcode方法主要是用来**提升对象比较的效率**，先进行hashcode()的比较，如果不相同，那就不必在进行equals的比较，这样就大大减少了equals比较的次数，当比较对象的数量很大的时候能提升效率。\n\n\n\n之所以重写`equals()`要重写`hashcode()`，是为了保证`equals()`方法返回true的情况下hashcode值也要一致，如果重写了`equals()`没有重写`hashcode()`，就会出现两个对象相等但`hashcode()`不相等的情况。这样，当用其中的一个对象作为键保存到hashMap、hashTable或hashSet中，再以另一个对象作为键值去查找他们的时候，则会查找不到。\n\n\n\n## 20.Java创建对象有几种方式？\n\n\n\nJava创建对象有以下几种方式：\n\n\n\n- 用new语句创建对象。\n\n- 使用反射，使用Class.newInstance()创建对象。\n\n- 调用对象的clone()方法。\n\n- 运用反序列化手段，调用java.io.ObjectInputStream对象的readObject()方法。\n\n\n\n## 21.说说类实例化的顺序\n\n\n\nJava中类实例化顺序：\n\n\n\n1、静态属性，静态代码块。\n\n\n\n2、普通属性，普通代码块。\n\n\n\n3、构造方法。\n\n\n\n```java\npublic class LifeCycle {\n    // 静态属性\n    private static String staticField = getStaticField();\n\n    // 静态代码块\n    static {\n        System.out.println(staticField);\n        System.out.println(\"静态代码块初始化\");\n    }\n\n    // 普通属性\n    private String field = getField();\n\n    // 普通代码块\n    {\n        System.out.println(field);\n        System.out.println(\"普通代码块初始化\");\n    }\n\n    // 构造方法\n    public LifeCycle() {\n        System.out.println(\"构造方法初始化\");\n    }\n\n    // 静态方法\n    public static String getStaticField() {\n        String statiFiled = \"静态属性初始化\";\n        return statiFiled;\n    }\n\n    // 普通方法\n    public String getField() {\n        String filed = \"普通属性初始化\";\n        return filed;\n    }\n\n    public static void main(String[] argc) {\n        new LifeCycle();\n    }\n\n    /**\n     *      静态属性初始化\n     *      静态代码块初始化\n     *      普通属性初始化\n     *      普通代码块初始化\n     *      构造方法初始化\n     */\n}\n```\n\n\n\n## 22.equals和==有什么区别？\n\n\n\n- 对于基本数据类型，==比较的是他们的值。基本数据类型没有equal方法；\n\n- 对于复合数据类型，==比较的是它们的存放地址(是否是同一个对象)。`equals()`默认比较地址值，重写的话按照重写逻辑去比较。\n\n\n\n## 23.常见的关键字有哪些？\n\n\n\n**static**\n\n\n\nstatic可以用来修饰类的成员方法、类的成员变量。\n\n\n\nstatic变量也称作**静态变量**，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。\n\n\n\n以下例子，age为非静态变量，则p1打印结果是：`Name:zhangsan, Age:10`；若age使用static修饰，则p1打印结果是：`Name:zhangsan, Age:12`，因为static变量在内存只有一个副本。\n\n\n\n```java\npublic class Person {\n    String name;\n    int age;\n    \n    public String toString() {\n        return \"Name:\" + name + \", Age:\" + age;\n    }\n    \n    public static void main(String[] args) {\n        Person p1 = new Person();\n        p1.name = \"zhangsan\";\n        p1.age = 10;\n        Person p2 = new Person();\n        p2.name = \"lisi\";\n        p2.age = 12;\n        System.out.println(p1);\n        System.out.println(p2);\n    }\n    /**Output\n     * Name:zhangsan, Age:10\n     * Name:lisi, Age:12\n     *///~\n}\n```\n\n\n\nstatic方法一般称作**静态方法**。静态方法不依赖于任何对象就可以进行访问，通过类名即可调用静态方法。\n\n\n\n```java\npublic class Utils {\n    public static void print(String s) {\n        System.out.println(\"hello world: \" + s);\n    }\n\n    public static void main(String[] args) {\n        Utils.print(\"程序员小官\");\n    }\n}\n```\n\n\n\n**静态代码块**只会在类加载的时候执行一次。以下例子，startDate和endDate在类加载的时候进行赋值。\n\n\n\n```java\nclass Person  {\n    private Date birthDate;\n    private static Date startDate, endDate;\n    static{\n        startDate = Date.valueOf(\"2008\");\n        endDate = Date.valueOf(\"2021\");\n    }\n\n    public Person(Date birthDate) {\n        this.birthDate = birthDate;\n    }\n}\n```\n\n\n\n**静态内部类**\n\n\n\n**在静态方法里**，使用⾮静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。⽽静态内部类不需要。\n\n\n\n```java\npublic class OuterClass {\n    class InnerClass {\n    }\n    static class StaticInnerClass {\n    }\n    public static void main(String[] args) {\n        // 在静态方法里，不能直接使用OuterClass.this去创建InnerClass的实例\n        // 需要先创建OuterClass的实例o，然后通过o创建InnerClass的实例\n        // InnerClass innerClass = new InnerClass();\n        OuterClass outerClass = new OuterClass();\n        InnerClass innerClass = outerClass.new InnerClass();\n        StaticInnerClass staticInnerClass = new StaticInnerClass();\n\n        outerClass.test();\n    }\n    \n    public void nonStaticMethod() {\n        InnerClass innerClass = new InnerClass();\n        System.out.println(\"nonStaticMethod...\");\n    }\n}\n```\n\n\n\n**final**\n\n\n\n1、**基本数据**类型用final修饰，则不能修改，是常量；**对象引用**用final修饰，则引用只能指向该对象，不能指向别的对象，但是对象本身可以修改。\n\n\n\n2、final修饰的方法不能被子类重写\n\n\n\n3、final修饰的类不能被继承。\n\n\n\n**this**\n\n\n\n`this.属性名称`指访问类中的成员变量，可以用来区分成员变量和局部变量。如下代码所示，`this.name`访问类Person当前实例的变量。\n\n\n\n```java\n/**\n * @description:\n * @author: 程序员小官\n * @time: 2021-08-17 00:29\n */\npublic class Person {\n    String name;\n    int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n```\n\n\n\n`this.方法名称`用来访问本类的方法。以下代码中，`this.born()`调用类 Person 的当前实例的方法。\n\n\n\n```java\n/**\n * @description:\n * @author: 程序员小官\n * @time: 2021-08-17 00:29\n */\npublic class Person {\n    String name;\n    int age;\n\n    public Person(String name, int age) {\n        this.born();\n        this.name = name;\n        this.age = age;\n    }\n\n    void born() {\n    }\n}\n```\n\n\n\n**super**\n\n\n\nsuper 关键字用于在子类中访问父类的变量和方法。\n\n\n\n```java\nclass A {\n    protected String name = \"小官\";\n\n    public void getName() {\n        System.out.println(\"父类:\" + name);\n    }\n}\n\npublic class B extends A {\n    @Override\n    public void getName() {\n        System.out.println(super.name);\n        super.getName();\n    }\n\n    public static void main(String[] args) {\n        B b = new B();\n        b.getName();\n    }\n    /**\n     * 小官\n     * 父类:小官\n     */\n}\n```\n\n\n\n在子类B中，我们重写了父类的`getName()`方法，如果在重写的`getName()`方法中我们要调用父类的相同方法，必须要通过super关键字显式指出。\n\n\n\n## 24.final, finally, finalize 的区别\n\n\n\nfinal 用于修饰属性、方法和类, 分别表示属性不能被重新赋值，方法不可被覆盖，类不可被继承。\n\n\n\nfinally 是异常处理语句结构的一部分，一般以`try-catch-finally`出现，`finally`代码块表示总是被执行。\n\n\n\nfinalize 是Object类的一个方法，该方法一般由垃圾回收器来调用，当我们调用`System.gc()`方法的时候，由垃圾回收器调用`finalize()`方法，回收垃圾，JVM并不保证此方法总被调用。\n\n\n\n## 25.final关键字的作用？\n\n\n\nfinal 修饰的类不能被继承。\n\n\n\nfinal 修饰的方法不能被重写。\n\n\n\nfinal 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。\n\n\n\n## 26.方法重载和重写的区别？\n\n\n\n**同个类中的多个方法可以有相同的方法名称，但是有不同的参数列表，这就称为方法重载。**参数列表又叫参数签名，包括参数的类型、参数的个数、参数的顺序，只要有一个不同就叫做参数列表不同。\n\n\n\n重载是面向对象的一个基本特性。\n\n\n\n```java\npublic class OverrideTest {\n    void setPerson() { }\n    \n    void setPerson(String name) {\n        //set name\n    }\n    \n    void setPerson(String name, int age) {\n        //set name and age\n    }\n}\n```\n\n\n\n**方法的重写描述的是父类和子类之间的。当父类的功能无法满足子类的需求，可以在子类对方法进行重写。**方法重写时， 方法名与形参列表必须一致。\n\n\n\n如下代码，Person为父类，Student为子类，在Student中重写了dailyTask方法。\n\n\n\n```java\npublic class Person {\n    private String name;\n    \n    public void dailyTask() {\n        System.out.println(\"work eat sleep\");\n    }\n}\n\n\npublic class Student extends Person {\n    @Override\n    public void dailyTask() {\n        System.out.println(\"study eat sleep\");\n    }\n}\n```\n\n\n\n## 27.接口与抽象类区别？\n\n\n\n1、**语法层面**上的区别\n\n\n\n- 抽象类可以有方法实现，而接口的方法中只能是抽象方法（Java 8 开始接口方法可以有默认实现）；\n\n- 抽象类中的成员变量可以是各种类型的，接口中的成员变量只能是public static final类型；\n\n- 接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；\n\n- 一个类只能继承一个抽象类，而一个类却可以实现多个接口。\n\n\n\n2、**设计层面**上的区别\n\n\n\n- 抽象层次不同。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口只是对类行为进行抽象。继承抽象类是一种\"是不是\"的关系，而接口实现则是 \"有没有\"的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是具备不具备的关系，比如鸟是否能飞。\n\n- 继承抽象类的是具有相似特点的类，而实现接口的却可以不同的类。\n\n\n\n门和警报的例子：\n\n\n\n```java\nclass AlarmDoor extends Door implements Alarm {\n    //code\n}\n\nclass BMWCar extends Car implements Alarm {\n    //code\n}\n```\n\n\n\n## 28.常见的Exception有哪些？\n\n\n\n**常见的RuntimeException**：\n\n\n\n1、`ClassCastException` //类型转换异常\n\n\n\n2、`IndexOutOfBoundsException` //数组越界异常\n\n\n\n3、`NullPointerException` //空指针\n\n\n\n4、`ArrayStoreException` //数组存储异常\n\n\n\n5、`NumberFormatException` //数字格式化异常\n\n\n\n6、`ArithmeticException` //数学运算异常\n\n\n\n**unchecked Exception**：\n\n\n\n1、`NoSuchFieldException` //反射异常，没有对应的字段\n\n\n\n2、`ClassNotFoundException` //类没有找到异常\n\n\n\n3、`IllegalAccessException` //安全权限异常，可能是反射时调用了private方法\n\n\n\n## 29.Error和Exception的区别？\n\n\n\n**Error**：JVM 无法解决的严重问题，如栈溢出`StackOverflowError`、内存溢出`OOM`等。程序无法处理的错误。\n\n\n\n**Exception**：其它因编程错误或偶然的外在因素导致的一般性问题。可以在代码中进行处理。如：空指针异常、数组下标越界等。\n\n\n\n## 30.运行时异常和非运行时异常（checked）的区别？\n\n\n\n`unchecked exception`包括`RuntimeException`和`Error`类，其他所有异常称为检查（checked）异常。\n\n\n\n1. `RuntimeException`由程序错误导致，应该修正程序避免这类异常发生。\n\n1. `checked Exception`由具体的环境（读取的文件不存在或文件为空或sql异常）导致的异常。必须进行处理，不然编译不通过，可以catch或者throws。\n\n\n\n## 31.throw和throws的区别？\n\n\n\n**throw**：用于抛出一个具体的异常对象。\n\n\n\n**throws**：用在方法签名中，用于声明该方法可能抛出的异常。子类方法抛出的异常范围更加小，或者根本不抛异常。\n\n\n\n## 32.通过故事讲清楚NIO\n\n\n\n下面通过一个例子来讲解下。\n\n\n\n假设某银行只有10个职员。该银行的业务流程分为以下4个步骤：\n\n\n\n1） 顾客填申请表（5分钟）；\n\n\n\n2） 职员审核（1分钟）；\n\n\n\n3） 职员叫保安去金库取钱（3分钟）；\n\n\n\n4） 职员打印票据，并将钱和票据返回给顾客（1分钟）。\n\n\n\n下面我们看看银行不同的工作方式对其工作效率到底有何影响。\n\n\n\n首先是BIO方式。\n\n\n\n每来一个顾客，马上由一位职员来接待处理，并且这个职员需要负责以上4个完整流程。当超过10个顾客时，剩余的顾客需要排队等候。\n\n\n\n一个职员处理一个顾客需要10分钟（5+1+3+1）时间。一个小时（60分钟）能处理6个顾客，一共10个职员，那就是只能处理60个顾客。\n\n\n\n可以看到银行职员的工作状态并不饱和，比如在第1步，其实是处于等待中。\n\n\n\n这种工作其实就是BIO，每次来一个请求（顾客），就分配到线程池中由一个线程（职员）处理，如果超出了线程池的最大上限（10个），就扔到队列等待 。\n\n\n\n那么如何提高银行的吞吐量呢？\n\n\n\n思路就是：**分而治之**，将任务拆分开来，由专门的人负责专门的任务。\n\n\n\n具体来讲，银行专门指派一名职员A，A的工作就是每当有顾客到银行，他就递上表格让顾客填写。每当有顾客填好表后，A就将其随机指派给剩余的9名职员完成后续步骤。\n\n\n\n这种方式下，假设顾客非常多，职员A的工作处于饱和中，他不断的将填好表的顾客带到柜台处理。\n\n\n\n柜台一个职员5分钟能处理完一个顾客，一个小时9名职员能处理：9*（60/5）=108。\n\n\n\n可见工作方式的转变能带来效率的极大提升。\n\n\n\n这种工作方式其实就NIO的思路。\n\n\n\n下图是非常经典的NIO说明图，`mainReactor`线程负责监听server socket，接收新连接，并将建立的socket分派给`subReactor`\n\n\n\n`subReactor`可以是一个线程，也可以是线程池，负责多路分离已连接的socket，读写网络数据。这里的读写网络数据可类比顾客填表这一耗时动作，对具体的业务处理功能，其扔给worker线程池完成\n\n\n\n可以看到典型NIO有三类线程，分别是`mainReactor`线程、`subReactor`线程、`work`线程。\n\n\n\n不同的线程干专业的事情，最终每个线程都没空着，系统的吞吐量自然就上去了。\n\n\n\n![img](大厂面试之Java基础篇.assets/1676356829100-94d92ec1-934b-4b5c-8403-8a3ec43089f4.png)\n\n\n\n**那这个流程还有没有什么可以提高的地方呢？**\n\n\n\n可以看到，在这个业务流程里边第3个步骤，职员叫保安去金库取钱（3分钟）。这3分钟柜台职员是在等待中度过的，可以把这3分钟利用起来。\n\n\n\n还是分而治之的思路，指派1个职员B来专门负责第3步骤。\n\n\n\n每当柜台员工完成第2步时，就通知职员B来负责与保安沟通取钱。这时候柜台员工可以继续处理下一个顾客。\n\n\n\n当职员B拿到钱之后，通知顾客钱已经到柜台了，让顾客重新排队处理，当柜台职员再次服务该顾客时，发现该顾客前3步已经完成，直接执行第4步即可。\n\n\n\n在当今web服务中，经常需要通过RPC或者Http等方式调用第三方服务，这里对应的就是第3步，如果这步耗时较长，通过异步方式将能极大降低资源使用率。\n\n\n\nNIO+异步的方式能让少量的线程做大量的事情。这适用于很多应用场景，比如代理服务、api服务、长连接服务等等。这些应用如果用同步方式将耗费大量机器资源。\n\n\n\n不过虽然NIO+异步能提高系统吞吐量，但其并不能让一个请求的等待时间下降，相反可能会增加等待时间。\n\n\n\n最后，NIO基本思想总结起来就是：**分而治之，将任务拆分开来，由专门的人负责专门的任务**\n\n\n\n## 33.BIO/NIO/AIO区别的区别？\n\n\n\n**同步阻塞IO** : 用户进程发起一个IO操作以后，必须等待IO操作的真正完成后，才能继续运行。\n\n\n\n**同步非阻塞IO**: 客户端与服务器通过Channel连接，采用多路复用器轮询注册的`Channel`。提高吞吐量和可靠性。用户进程发起一个IO操作以后，可做其它事情，但用户进程需要轮询IO操作是否完成，这样造成不必要的CPU资源浪费。\n\n\n\n**异步非阻塞IO**: 非阻塞异步通信模式，NIO的升级版，采用异步通道实现异步通信，其read和write方法均是异步方法。用户进程发起一个IO操作，然后立即返回，等IO操作真正的完成以后，应用程序会得到IO操作完成的通知。类似Future模式。\n\n\n\n## 34.守护线程是什么？\n\n\n\n守护线程是运行在后台的一种特殊进程。\n\n\n\n它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。\n\n\n\n在 Java 中垃圾回收线程就是特殊的守护线程。\n\n\n\n## 35.Java支持多继承吗？\n\n\n\njava中，**类不支持**多继承。**接口才支持**多继承。接口的作用是拓展对象功能。当一个子接口继承了多个父接口时，说明子接口拓展了多个功能。当一个类实现该接口时，就拓展了多个的功能。\n\n\n\nJava不支持多继承的原因：\n\n\n\n- 出于安全性的考虑，如果子类继承的多个父类里面有相同的方法或者属性，子类将不知道具体要继承哪个。\n\n- Java提供了接口和内部类以达到实现多继承功能，弥补单继承的缺陷。\n\n\n\n## 36.如何实现对象克隆？\n\n\n\n实现`Cloneable`接口，重写 `clone()` 方法。这种方式是浅拷贝，即如果类中属性有自定义引用类型，只拷贝引用，不拷贝引用指向的对象。如果对象的属性的Class也实现 `Cloneable` 接口，那么在克隆对象时也会克隆属性，即深拷贝。\n\n\n\n结合序列化，深拷贝。\n\n\n\n通过`org.apache.commons`中的工具类`BeanUtils`和`PropertyUtils`进行对象复制。\n\n\n\n## 37.同步和异步的区别？\n\n\n\n同步：发出一个调用时，在没有得到结果之前，该调用就不返回。\n\n\n\n异步：在调用发出后，被调用者返回结果之后会通知调用者，或通过回调函数处理这个调用。\n\n\n\n## 38.阻塞和非阻塞的区别？\n\n\n\n阻塞和非阻塞关注的是线程的状态。\n\n\n\n阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会恢复运行。\n\n\n\n非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。\n\n\n\n举个例子，理解下同步、阻塞、异步、非阻塞的区别：\n\n \n\n同步就是烧开水，要自己来看开没开；异步就是水开了，然后水壶响了通知你水开了（回调通知）。阻塞是烧开水的过程中，你不能干其他事情，必须在旁边等着；非阻塞是烧开水的过程里可以干其他事情。\n\n\n\n## 39.Java8的新特性有哪些？\n\n\n\nLambda 表达式：Lambda允许把函数作为一个方法的参数\n\n\n\nStream API ：新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中\n\n\n\n默认方法：默认方法就是一个在接口里面有了一个实现的方法。\n\n\n\nOptional 类 ：Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。\n\n\n\nDate Time API ：加强对日期与时间的处理。\n\n\n\n## 40.什么是序列化和反序列化？\n\n\n\n序列化：把内存中的对象转换为字节序列的过程。\n\n\n\n反序列化：把字节序列恢复为Java对象的过程。\n\n\n\n## 41.如何实现序列化\n\n\n\n实现`Serializable`接口即可。序列化的时候（如`objectOutputStream.writeObject(user)`），会判断user是否实现了`Serializable`，如果对象没有实现`Serializable`接口，在序列化的时候会抛出`NotSerializableException`异常。源码如下：\n\n\n\n```java\n// remaining cases\nif (obj instanceof String) {\n    writeString((String) obj, unshared);\n} else if (cl.isArray()) {\n    writeArray(obj, desc, unshared);\n} else if (obj instanceof Enum) {\n    writeEnum((Enum<?>) obj, desc, unshared);\n} else if (obj instanceof Serializable) {\n    writeOrdinaryObject(obj, desc, unshared);\n} else {\n    if (extendedDebugInfo) {\n        throw new NotSerializableException(\n            cl.getName() + \"\\n\" + debugInfoStack.toString());\n    } else {\n        throw new NotSerializableException(cl.getName());\n    }\n}\n```\n\n\n\n## 42.transient关键字的作用？\n\n\n\nJava语言的关键字，变量修饰符，如果用transient声明一个实例变量，当对象存储时，它的值不需要维持。\n\n\n\n也就是说被transient修饰的成员变量，在序列化的时候其值会被忽略，在被反序列化后， transient 变量的值被设为初始值， 如 int 型的是 0，对象型的是 null。\n\n\n\n## 43.什么是反射？\n\n\n\n动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。\n\n\n\n在运行状态中，对于任意一个类，能够知道这个类的所有属性和方法。对于任意一个对象，能够调用它的任意一个方法和属性。\n\n\n\n## 44.反射有哪些应用场景呢？\n\n\n\n1、JDBC连接数据库时使用`Class.forName()`通过反射加载数据库的驱动程序\n\n\n\n2、Eclispe、IDEA等开发工具利用反射动态解析对象的类型与结构，动态提示对象的属性和方法\n\n\n\n3、Web服务器中利用反射调用了Sevlet的`service`方法\n\n\n\n4、JDK动态代理底层依赖反射实现\n\n\n\n## 45.讲讲什么是泛型？\n\n\n\nJava泛型是JDK 5中引⼊的⼀个新特性， 允许在定义类和接口的时候使⽤类型参数。声明的类型参数在使⽤时⽤具体的类型来替换。\n\n\n\n泛型最⼤的好处是可以提⾼代码的复⽤性。以List接口为例，我们可以将String、 Integer等类型放⼊List中， 如不⽤泛型， 存放String类型要写⼀个List接口， 存放Integer要写另外⼀个List接口， 泛型可以很好的解决这个问题。\n\n\n\n## 46.String为什么不可变？\n\n\n\n先看看什么是不可变的对象。\n\n\n\n如果一个对象，在它创建完成之后，不能再改变它的状态，那么这个对象就是不可变的。\n\n\n\n不能改变状态的意思是，不能改变对象内的成员变量，包括基本数据类型的值不能改变，引用类型的变量不能指向其他的对象，引用类型指向的对象的状态也不能改变。\n\n\n\n接着来看Java8 String类的源码：\n\n\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    / The value is used for character storage. */\n    private final char value[];\n\n    / Cache the hash code for the string */\n    private int hash; // Default to 0\n}\n```\n\n\n\n从源码可以看出，String对象其实在内部就是一个个字符，存储在这个value数组里面的。\n\n\n\nvalue数组用final修饰，final 修饰的变量，值不能被修改。因此value不可以指向其他对象。\n\n\n\nString类内部所有的字段都是私有的，也就是被private修饰。而且String没有对外提供修改内部状态的方法，因此value数组不能改变。\n\n\n\n所以，String是不可变的。\n\n\n\n那为什么String要设计成不可变的？\n\n\n\n主要有以下几点原因：\n\n\n\n1、线程安全。同一个字符串实例可以被多个线程共享，因为字符串不可变，本身就是线程安全的。\n\n\n\n2、支持hash映射和缓存。因为String的hash值经常会使用到，比如作为 Map 的键，不可变的特性使得 hash 值也不会变，不需要重新计算。\n\n\n\n3、出于安全考虑。网络地址URL、文件路径path、密码通常情况下都是以String类型保存，假若String不是固定不变的，将会引起各种安全隐患。比如将密码用String的类型保存，那么它将一直留在内存中，直到垃圾收集器把它清除。假如String类不是固定不变的，那么这个密码可能会被改变，导致出现安全隐患。\n\n\n\n4、字符串常量池优化。String对象创建之后，会缓存到字符串常量池中，下次需要创建同样的对象时，可以直接返回缓存的引用。\n\n\n\n既然我们的String是不可变的，那它内部还有很多substring， replace， replaceAll这些操作的方法。\n\n\n\n这些方法好像会改变String对象？怎么解释呢？\n\n\n\n其实不是的，我们每次调用replace等方法，其实会在堆内存中创建了一个新的对象。然后其value数组引用指向不同的对象。\n\n\n\n## 47.如何停止一个正在运行的线程？\n\n\n\n有几种方式。\n\n\n\n1、**使用线程的stop方法**。\n\n\n\n使用stop()方法可以强制终止线程。不过stop是一个被废弃掉的方法，不推荐使用。\n\n\n\n使用Stop方法，会一直向上传播ThreadDeath异常，从而使得目标线程解锁所有锁住的监视器，即释放掉所有的对象锁。使得之前被锁住的对象得不到同步的处理，因此可能会造成数据不一致的问题。\n\n\n\n2、**使用interrupt方法中断线程**，该方法只是告诉线程要终止，但最终何时终止取决于计算机。调用interrupt方法仅仅是在当前线程中打了一个停止的标记，并不是真的停止线程。\n\n\n\n接着调用 Thread.currentThread().isInterrupted()方法，可以用来判断当前线程是否被终止，通过这个判断我们可以做一些业务逻辑处理，通常如果isInterrupted返回true的话，会抛一个中断异常，然后通过try-catch捕获。\n\n\n\n3、**设置标志位**\n\n\n\n设置标志位，当标识位为某个值时，使线程正常退出。设置标志位是用到了共享变量的方式，为了保证共享变量在内存中的可见性，可以使用volatile修饰它，这样的话，变量取值始终会从主存中获取最新值。\n\n\n\n但是这种volatile标记共享变量的方式，在线程发生阻塞时是无法完成响应的。比如调用Thread.sleep() 方法之后，线程处于不可运行状态，即便是主线程修改了共享变量的值，该线程此时根本无法检查循环标志，所以也就无法实现线程中断。\n\n\n\n因此，interrupt() 加上手动抛异常的方式是目前中断一个正在运行的线程**最为正确**的方式了。\n\n\n\n## 48.什么是跨域？\n\n\n\n简单来讲，跨域是指从一个域名的网页去请求另一个域名的资源。由于有**同源策略**的关系，一般是不允许这么直接访问的。但是，很多场景经常会有跨域访问的需求，比如，在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域问题。\n\n\n\n**那什么是同源策略呢**？\n\n\n\n所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。\n\n\n\n同源策略限制以下几种行为：\n\n\n\n```plain\n1. Cookie、LocalStorage 和 IndexDB 无法读取\n2. DOM 和 Js对象无法获得\n3. AJAX 请求不能发送\n```\n\n\n\n**为什么要有同源策略**？\n\n\n\n举个例子，假如你刚刚在网银输入账号密码，查看了自己的余额，然后再去访问其他带颜色的网站，这个网站可以访问刚刚的网银站点，并且获取账号密码，那后果可想而知。因此，从安全的角度来讲，同源策略是有利于保护网站信息的。\n\n\n\n## 49.跨域问题怎么解决呢？\n\n\n\n嗯，有以下几种方法：\n\n\n\n**CORS**，跨域资源共享\n\n\n\nCORS（Cross-origin resource sharing），跨域资源共享。CORS 其实是浏览器制定的一个规范，浏览器会自动进行 CORS 通信，它的实现主要在服务端，通过一些 HTTP Header 来限制可以访问的域，例如页面 A 需要访问 B 服务器上的数据，如果 B 服务器 上声明了允许 A 的域名访问，那么从 A 到 B 的跨域请求就可以完成。\n\n\n\n**@CrossOrigin注解**\n\n\n\n如果项目使用的是Springboot，可以在Controller类上添加一个 [@CrossOrigin(origins ]() =\"*\") 注解就可以实现对当前controller 的跨域访问了，当然这个标签也可以加到方法上，或者直接加到入口类上对所有接口进行跨域处理。注意SpringMVC的版本要在4.2或以上版本才支持@CrossOrigin。 \n\n\n\n**nginx反向代理接口跨域**\n\n\n\nnginx反向代理跨域原理如下： 首先同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。\n\n\n\nnginx反向代理接口跨域实现思路如下：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。\n\n\n\n```javascript\n// proxy服务器\nserver {\n    listen       81;\n    server_name  www.domain1.com;\n    location / {\n        proxy_pass   http://www.domain2.com:8080;  #反向代理\n        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名\n        index  index.html index.htm;\n        \n        add_header Access-Control-Allow-Origin http://www.domain1.com;\n    }\n}\n```\n\n\n\n这样我们的前端代理只要访问 http:www.domain1.com:81/*就可以了。\n\n\n\n**通过jsonp跨域**\n\n\n\n通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，这是浏览器允许的操作，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。","tags":["我要进大厂","面试","Java基础"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之Dubbo篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Dubbo篇/","content":"\n## Dubbo基础\n\n\n\n### 什么是 Dubbo?\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359349389-3b26809d-5180-47ca-a050-37fa8e2c205b.png)\n\n\n\n[Apache Dubboopen in new window](https://github.com/apache/dubbo) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 框架。\n\n\n\n根据 [Dubbo 官方文档open in new window](https://dubbo.apache.org/zh/)的介绍，Dubbo 提供了六大核心能力\n\n\n\n1. 面向接口代理的高性能RPC调用。\n\n1. 智能容错和负载均衡。\n\n1. 服务自动注册和发现。\n\n1. 高度可扩展能力。\n\n1. 运行期流量调度。\n\n1. 可视化的服务治理与运维。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359351683-b36fe28d-e2ce-41a4-820b-5c24f24df12f.png)\n\n\n\n简单来说就是： **Dubbo 不光可以帮助我们调用远程服务，还提供了一些其他开箱即用的功能比如智能负载均衡。**\n\n\n\nDubbo 目前已经有接近 34.4 k 的 Star 。\n\n\n\n在 **2020 年度 OSC 中国开源项目** 评选活动中，Dubbo 位列开发框架和基础组件类项目的第7名。相比几年前来说，热度和排名有所下降。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359353552-6736954c-9a79-4cae-a580-12432619e642.png)\n\n\n\nDubbo 是由阿里开源，后来加入了 Apache 。正是由于 Dubbo 的出现，才使得越来越多的公司开始使用以及接受分布式架构。\n\n\n\n### 为什么要用 Dubbo?\n\n\n\n随着互联网的发展，网站的规模越来越大，用户数量越来越多。单一应用架构 、垂直应用架构无法满足我们的需求，这个时候分布式服务架构就诞生了。\n\n\n\n分布式服务架构下，系统被拆分成不同的服务比如短信服务、安全服务，每个服务独立提供系统的某个核心服务。\n\n\n\n我们可以使用 Java RMI（Java Remote Method Invocation）、Hessian这种支持远程调用的框架来简单地暴露和引用远程服务。但是！当服务越来越多之后，服务调用关系越来越复杂。当应用访问压力越来越大后，负载均衡以及服务监控的需求也迫在眉睫。我们可以用 F5 这类硬件来做负载均衡，但这样增加了成本，并且存在单点故障的风险。\n\n\n\n不过，Dubbo 的出现让上述问题得到了解决。**Dubbo 帮助我们解决了什么问题呢？**\n\n\n\n1. **负载均衡** ： 同一个服务部署在不同的机器时该调用哪一台机器上的服务。\n\n1. **服务调用链路生成** ： 随着系统的发展，服务越来越多，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。Dubbo 可以为我们解决服务之间互相是如何调用的。\n\n1. **服务访问压力以及时长统计、资源调度和治理** ：基于访问压力实时管理集群容量，提高集群利用率。\n\n1. ......\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359356040-a5126733-bab3-4598-b469-260bace4ff66.jpeg)\n\n\n\n另外，Dubbo 除了能够应用在分布式系统中，也可以应用在现在比较火的微服务系统中。不过，由于 Spring Cloud 在微服务中应用更加广泛，所以，我觉得一般我们提 Dubbo 的话，大部分是分布式系统的情况。\n\n\n\n**我们刚刚提到了分布式这个概念，下面再给大家介绍一下什么是分布式？为什么要分布式？**\n\n\n\n## 分布式基础\n\n\n\n### 什么是分布式?\n\n\n\n分布式或者说 SOA 分布式重要的就是面向服务，说简单的分布式就是我们把整个系统拆分成不同的服务然后将这些服务放在不同的服务器上减轻单体服务的压力提高并发量和性能。比如电商系统可以简单地拆分成订单系统、商品系统、登录系统等等，拆分之后的每个服务可以部署在不同的机器上，如果某一个服务的访问量比较大的话也可以将这个服务同时部署在多台机器上。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359358415-18e212de-b835-4017-9421-54898ff6272a.png)\n\n\n\n### 为什么要分布式?\n\n\n\n从开发角度来讲单体应用的代码都集中在一起，而分布式系统的代码根据业务被拆分。所以，每个团队可以负责一个服务的开发，这样提升了开发效率。另外，代码根据业务拆分之后更加便于维护和扩展。\n\n\n\n另外，我觉得将系统拆分成分布式之后不光便于系统扩展和维护，更能提高整个系统的性能。你想一想嘛？把整个系统拆分成不同的服务/系统，然后每个服务/系统 单独部署在一台服务器上，是不是很大程度上提高了系统性能呢？\n\n\n\n## Dubbo 架构\n\n\n\n### Dubbo 架构中的核心角色有哪些？\n\n\n\n[官方文档中的框架设计章节open in new window](https://dubbo.apache.org/zh/docs/v2.7/dev/design/) 已经介绍的非常详细了，我这里把一些比较重要的点再提一下。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359360549-25268d81-29bd-4741-bda9-f94c9bfd3781.jpeg)\n\n\n\n上述节点简单介绍以及他们之间的关系：\n\n\n\n- **Container：** 服务运行容器，负责加载、运行服务提供者。必须。\n\n- **Provider：** 暴露服务的服务提供方，会向注册中心注册自己提供的服务。必须。\n\n- **Consumer：** 调用远程服务的服务消费方，会向注册中心订阅自己所需的服务。必须。\n\n- **Registry：** 服务注册与发现的注册中心。注册中心会返回服务提供者地址列表给消费者。非必须。\n\n- **Monitor：** 统计服务的调用次数和调用时间的监控中心。服务消费者和提供者会定时发送统计数据到监控中心。 非必须。\n\n\n\n### Dubbo 中的 Invoker 概念了解么？\n\n\n\n`Invoker` 是 Dubbo 领域模型中非常重要的一个概念，你如果阅读过 Dubbo 源码的话，你会无数次看到这玩意。就比如下面我要说的负载均衡这块的源码中就有大量 `Invoker` 的身影。\n\n\n\n简单来说，`Invoker` 就是 Dubbo 对远程调用的抽象。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359362298-c369d9b9-08dc-4ade-af1c-a165e1852e77.jpeg)\n\n\n\n按照 Dubbo 官方的话来说，`Invoker` 分为\n\n\n\n- 服务提供 `Invoker`\n\n- 服务消费 `Invoker`\n\n\n\n假如我们需要调用一个远程方法，我们需要动态代理来屏蔽远程调用的细节吧！我们屏蔽掉的这些细节就依赖对应的 `Invoker` 实现， `Invoker` 实现了真正的远程服务调用。\n\n\n\n### Dubbo 的工作原理了解么？\n\n\n\n下图是 Dubbo 的整体设计，从下至上分为十层，各层均为单向依赖。\n\n\n\n左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359364376-0963cf90-8faa-4c5b-9fa1-6a30b31efd89.jpeg)\n\n\n\n- **config 配置层**：Dubbo相关的配置。支持代码配置，同时也支持基于 Spring 来做配置，以 `ServiceConfig`, `ReferenceConfig` 为中心\n\n- **proxy 服务代理层**：调用远程方法像调用本地的方法一样简单的一个关键，真实调用过程依赖代理类，以 `ServiceProxy` 为中心。\n\n- **registry 注册中心层**：封装服务地址的注册与发现。\n\n- **cluster 路由层**：封装多个提供者的路由及负载均衡，并桥接注册中心，以 `Invoker` 为中心。\n\n- **monitor 监控层**：RPC 调用次数和调用时间监控，以 `Statistics` 为中心。\n\n- **protocol 远程调用层**：封装 RPC 调用，以 `Invocation`, `Result` 为中心。\n\n- **exchange 信息交换层**：封装请求响应模式，同步转异步，以 `Request`, `Response` 为中心。\n\n- **transport 网络传输层**：抽象 mina 和 netty 为统一接口，以 `Message` 为中心。\n\n- **serialize 数据序列化层** ：对需要在网络传输的数据进行序列化。\n\n\n\n### Dubbo 的 SPI 机制了解么？ 如何扩展 Dubbo 中的默认实现？\n\n\n\nSPI（Service Provider Interface） 机制被大量用在开源项目中，它可以帮助我们动态寻找服务/功能（比如负载均衡策略）的实现。\n\n\n\nSPI 的具体原理是这样的：我们将接口的实现类放在配置文件中，我们在程序运行过程中读取配置文件，通过反射加载实现类。这样，我们可以在运行的时候，动态替换接口的实现类。和 IoC 的解耦思想是类似的。\n\n\n\nJava 本身就提供了 SPI 机制的实现。不过，Dubbo 没有直接用，而是对 Java原生的 SPI机制进行了增强，以便更好满足自己的需求。\n\n\n\n**那我们如何扩展 Dubbo 中的默认实现呢？**\n\n\n\n比如说我们想要实现自己的负载均衡策略，我们创建对应的实现类 `XxxLoadBalance` 实现 `LoadBalance` 接口或者 `AbstractLoadBalance` 类。\n\n\n\n```java\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.cluster.LoadBalance;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.RpcException; \n \npublic class XxxLoadBalance implements LoadBalance {\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, Invocation invocation) throws RpcException {\n        // ...\n    }\n}\n```\n\n\n\n我们将这个实现类的路径写入到`resources` 目录下的 `META-INF/dubbo/org.apache.dubbo.rpc.cluster.LoadBalance`文件中即可。\n\n\n\n```java\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxLoadBalance.java (实现LoadBalance接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.cluster.LoadBalance (纯文本文件，内容为：xxx=com.xxx.XxxLoadBalance)\n```\n\n\n\n```\norg.apache.dubbo.rpc.cluster.LoadBalance\n```\n\n\n\n```latex\nxxx=com.xxx.XxxLoadBalance\n```\n\n\n\n其他还有很多可供扩展的选择，你可以在[官方文档@SPI扩展实现open in new window](https://dubbo.apache.org/zh/docs/v2.7/dev/impls/)这里找到。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359368289-a51c7b7c-f943-4fa2-b9eb-990e83df2d18.png)\n\n\n\n### Dubbo 的微内核架构了解吗？\n\n\n\nDubbo 采用 微内核（Microkernel） + 插件（Plugin） 模式，简单来说就是微内核架构。微内核只负责组装插件。\n\n\n\n**何为微内核架构呢？** 《软件架构模式》 这本书是这样介绍的：\n\n\n\n微内核架构模式（有时被称为插件架构模式）是实现基于产品应用程序的一种自然模式。基于产品的应用程序是已经打包好并且拥有不同版本，可作为第三方插件下载的。然后，很多公司也在开发、发布自己内部商业应用像有版本号、说明及可加载插件式的应用软件（这也是这种模式的特征）。微内核系统可让用户添加额外的应用如插件，到核心应用，继而提供了可扩展性和功能分离的用法。\n\n\n\n微内核架构包含两类组件：**核心系统（core system）** 和 **插件模块（plug-in modules）**。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359375030-83bfa061-2f78-4afb-ab6e-9dba87986167.png)\n\n\n\n核心系统提供系统所需核心能力，插件模块可以扩展系统的功能。因此， 基于微内核架构的系统，非常易于扩展功能。\n\n\n\n我们常见的一些IDE，都可以看作是基于微内核架构设计的。绝大多数 IDE比如IDEA、VSCode都提供了插件来丰富自己的功能。\n\n\n\n正是因为Dubbo基于微内核架构，才使得我们可以随心所欲替换Dubbo的功能点。比如你觉得Dubbo 的序列化模块实现的不满足自己要求，没关系啊！你自己实现一个序列化模块就好了啊！\n\n\n\n通常情况下，微核心都会采用 Factory、IoC、OSGi 等方式管理插件生命周期。Dubbo 不想依赖 Spring 等 IoC 容器，也不想自己造一个小的 IoC 容器（过度设计），因此采用了一种最简单的 Factory 方式管理插件 ：**JDK 标准的 SPI 扩展机制** （`java.util.ServiceLoader`）。\n\n\n\n### 关于Dubbo架构的一些自测小问题\n\n\n\n#### 注册中心的作用了解么？\n\n\n\n注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互。\n\n\n\n#### 服务提供者宕机后，注册中心会做什么？\n\n\n\n注册中心会立即推送事件通知消费者。\n\n\n\n#### 监控中心的作用呢？\n\n\n\n监控中心负责统计各服务调用次数，调用时间等。\n\n\n\n#### 注册中心和监控中心都宕机的话，服务都会挂掉吗？\n\n\n\n不会。两者都宕机也不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表。注册中心和监控中心都是可选的，服务消费者可以直连服务提供者。\n\n\n\n## Dubbo 的负载均衡策略\n\n\n\n### 什么是负载均衡？\n\n\n\n先来看一下稍微官方点的解释。下面这段话摘自维基百科对负载均衡的定义：\n\n\n\n负载均衡改善了跨多个计算资源（例如计算机，计算机集群，网络链接，中央处理单元或磁盘驱动）的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源的过载。使用具有负载平衡而不是单个组件的多个组件可以通过冗余提高可靠性和可用性。负载平衡通常涉及专用软件或硬件。\n\n\n\n**上面讲的大家可能不太好理解，再用通俗的话给大家说一下。**\n\n\n\n我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。\n\n\n\n### Dubbo 提供的负载均衡策略有哪些？\n\n\n\n在集群负载均衡时，Dubbo 提供了多种均衡策略，默认为 `random` 随机调用。我们还可以自行扩展负载均衡策略（参考Dubbo SPI机制）。\n\n\n\n在 Dubbo 中，所有负载均衡实现类均继承自 `AbstractLoadBalance`，该类实现了 `LoadBalance` 接口，并封装了一些公共的逻辑。\n\n\n\n```java\npublic abstract class AbstractLoadBalance implements LoadBalance {\n\n    static int calculateWarmupWeight(int uptime, int warmup, int weight) {\n    }\n\n    @Override\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n    }\n\n    protected abstract <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation);\n\n\n    int getWeight(Invoker<?> invoker, Invocation invocation) {\n\n    }\n}\n```\n\n\n\n`AbstractLoadBalance` 的实现类有下面这些：\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359378575-03613bcc-c51a-4009-9ea1-5deb645dd38d.png)\n\n\n\n官方文档对负载均衡这部分的介绍非常详细，推荐小伙伴们看看，地址：[https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#m-zhdocsv27devsourceloadbalanceopen in new window](https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#m-zhdocsv27devsourceloadbalance) 。\n\n\n\n#### RandomLoadBalance\n\n\n\n根据权重随机选择（对加权随机算法的实现）。这是Dubbo默认采用的一种负载均衡策略。\n\n\n\n`RandomLoadBalance` 具体的实现原理非常简单，假如有两个提供相同服务的服务器 S1,S2，S1的权重为7，S2的权重为3。\n\n\n\n我们把这些权重值分布在坐标区间会得到：S1->[0, 7) ，S2->[7, 10)。我们生成[0, 10) 之间的随机数，随机数落到对应的区间，我们就选择对应的服务器来处理请求。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359380653-286f20fc-ecd0-4644-9f40-ec630a446eb1.png)\n\n\n\n`RandomLoadBalance` 的源码非常简单，简单花几分钟时间看一下。\n\n\n\n以下源码来自 Dubbo master 分支上的最新的版本 2.7.9。\n\n\n\n```java\npublic class RandomLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"random\";\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n\n        int length = invokers.size();\n        boolean sameWeight = true;\n        int[] weights = new int[length]; \n        int totalWeight = 0;\n        // 下面这个for循环的主要作用就是计算所有该服务的提供者的权重之和 totalWeight（），\n        // 除此之外，还会检测每个服务提供者的权重是否相同\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            totalWeight += weight;\n            weights[i] = totalWeight;\n            if (sameWeight && totalWeight != weight * (i + 1)) {\n                sameWeight = false;\n            }\n        }\n        if (totalWeight > 0 && !sameWeight) {\n            // 随机生成一个 [0, totalWeight) 区间内的数字\n            int offset = ThreadLocalRandom.current().nextInt(totalWeight);\n            // 判断会落在哪个服务提供者的区间\n            for (int i = 0; i < length; i++) {\n                if (offset < weights[i]) {\n                    return invokers.get(i);\n                }\n            }\n  \n        return invokers.get(ThreadLocalRandom.current().nextInt(length));\n    }\n\n}\n```\n\n\n\n#### LeastActiveLoadBalance\n\n\n\n`LeastActiveLoadBalance` 直译过来就是**最小活跃数负载均衡**。\n\n\n\n这个名字起得有点不直观，不仔细看官方对活跃数的定义，你压根不知道这玩意是干嘛的。\n\n\n\n我这么说吧！初始状态下所有服务提供者的活跃数均为 0（每个服务提供者的中特定方法都对应一个活跃数，我在后面的源码中会提到），每收到一个请求后，对应的服务提供者的活跃数 +1，当这个请求处理完之后，活跃数 -1。\n\n\n\n因此，**Dubbo 就认为谁的活跃数越少，谁的处理速度就越快，性能也越好，这样的话，我就优先把请求给活跃数少的服务提供者处理。**\n\n\n\n**如果有多个服务提供者的活跃数相等怎么办？**\n\n\n\n很简单，那就再走一遍 `RandomLoadBalance` 。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359383374-d9578b01-5f78-46fd-a68a-0161f141f3d3.png)\n\n\n\n```java\npublic class LeastActiveLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"leastactive\";\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size();\n        int leastActive = -1;\n        int leastCount = 0;\n        int[] leastIndexes = new int[length];\n        int[] weights = new int[length];\n        int totalWeight = 0;\n        int firstWeight = 0;\n        boolean sameWeight = true;\n        // 这个 for 循环的主要作用是遍历 invokers 列表，找出活跃数最小的 Invoker\n        // 如果有多个 Invoker 具有相同的最小活跃数，还会记录下这些 Invoker 在 invokers 集合中的下标，并累加它们的权重，比较它们的权重值是否相等\n        for (int i = 0; i < length; i++) {\n            Invoker<T> invoker = invokers.get(i);\n            // 获取 invoker 对应的活跃(active)数\n            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();\n            int afterWarmup = getWeight(invoker, invocation);\n            weights[i] = afterWarmup;\n            if (leastActive == -1 || active < leastActive) {\n                leastActive = active;\n                leastCount = 1;\n                leastIndexes[0] = i;\n                totalWeight = afterWarmup;\n                firstWeight = afterWarmup;\n                sameWeight = true;\n            } else if (active == leastActive) {\n                leastIndexes[leastCount++] = i;\n                totalWeight += afterWarmup;\n                if (sameWeight && afterWarmup != firstWeight) {\n                    sameWeight = false;\n                }\n            }\n        }\n       // 如果只有一个 Invoker 具有最小的活跃数，此时直接返回该 Invoker 即可\n        if (leastCount == 1) {\n            return invokers.get(leastIndexes[0]);\n        }\n        // 如果有多个 Invoker 具有相同的最小活跃数，但它们之间的权重不同\n        // 这里的处理方式就和  RandomLoadBalance 一致了\n        if (!sameWeight && totalWeight > 0) {\n            int offsetWeight = ThreadLocalRandom.current().nextInt(totalWeight);\n            for (int i = 0; i < leastCount; i++) {\n                int leastIndex = leastIndexes[i];\n                offsetWeight -= weights[leastIndex];\n                if (offsetWeight < 0) {\n                    return invokers.get(leastIndex);\n                }\n            }\n        }\n        return invokers.get(leastIndexes[ThreadLocalRandom.current().nextInt(leastCount)]);\n    }\n}\n```\n\n\n\n活跃数是通过 `RpcStatus` 中的一个 `ConcurrentMap` 保存的，根据 URL 以及服务提供者被调用的方法的名称，我们便可以获取到对应的活跃数。也就是说服务提供者中的每一个方法的活跃数都是互相独立的。\n\n\n\n```java\npublic class RpcStatus {\n    \n    private static final ConcurrentMap<String, ConcurrentMap<String, RpcStatus>> METHOD_STATISTICS =\n            new ConcurrentHashMap<String, ConcurrentMap<String, RpcStatus>>();\n\n   public static RpcStatus getStatus(URL url, String methodName) {\n        String uri = url.toIdentityString();\n        ConcurrentMap<String, RpcStatus> map = METHOD_STATISTICS.computeIfAbsent(uri, k -> new ConcurrentHashMap<>());\n        return map.computeIfAbsent(methodName, k -> new RpcStatus());\n    }\n    public int getActive() {\n        return active.get();\n    }\n\n}\n```\n\n\n\n#### ConsistentHashLoadBalance\n\n\n\n`ConsistentHashLoadBalance` 小伙伴们应该也不会陌生，在分库分表、各种集群中就经常使用这个负载均衡策略。\n\n\n\n`ConsistentHashLoadBalance` 即**一致性Hash负载均衡策略**。 `ConsistentHashLoadBalance` 中没有权重的概念，具体是哪个服务提供者处理请求是由你的请求的参数决定的，也就是说相同参数的请求总是发到同一个服务提供者。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359387116-a87140a8-039a-4999-a693-d2bfbb395611.jpeg)\n\n\n\n另外，Dubbo 为了避免数据倾斜问题（节点不够分散，大量请求落到同一节点），还引入了虚拟节点的概念。通过虚拟节点可以让节点更加分散，有效均衡各个节点的请求量。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359388989-9ebaf86b-49f0-45a6-85e0-ac3f375e0fbb.jpeg)\n\n\n\n官方有详细的源码分析：[https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#23-consistenthashloadbalanceopen in new window](https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#23-consistenthashloadbalance) 。这里还有一个相关的 [PR#5440open in new window](https://github.com/apache/dubbo/pull/5440) 来修复老版本中 ConsistentHashLoadBalance 存在的一些Bug。感兴趣的小伙伴，可以多花点时间研究一下。我这里不多分析了，这个作业留给你们！\n\n\n\n#### RoundRobinLoadBalance\n\n\n\n加权轮询负载均衡。\n\n\n\n轮询就是把请求依次分配给每个服务提供者。加权轮询就是在轮询的基础上，让更多的请求落到权重更大的服务提供者上。比如假如有两个提供相同服务的服务器 S1,S2，S1的权重为7，S2的权重为3。\n\n\n\n如果我们有 10 次请求，那么 7 次会被 S1处理，3次被 S2处理。\n\n\n\n但是，如果是 `RandomLoadBalance` 的话，很可能存在10次请求有9次都被 S1 处理的情况（概率性问题）。\n\n\n\nDubbo 中的 `RoundRobinLoadBalance` 的代码实现被修改重建了好几次，Dubbo-2.6.5 版本的 `RoundRobinLoadBalance` 为平滑加权轮询算法。\n\n\n\n## Dubbo序列化协议\n\n\n\n### Dubbo 支持哪些序列化方式呢？\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359391257-7c2f32e5-df13-4a38-afea-37cb305e6be1.png)\n\n\n\nDubbo 支持多种序列化方式：JDK自带的序列化、hessian2、JSON、Kryo、FST、Protostuff，ProtoBuf等等。\n\n\n\nDubbo 默认使用的序列化方式是 hessian2。\n\n\n\n### 谈谈你对这些序列化协议了解？\n\n\n\n一般我们不会直接使用 JDK 自带的序列化方式。主要原因有两个：\n\n\n\n1. **不支持跨语言调用** : 如果调用的是其他语言开发的服务的时候就不支持了。\n\n1. **性能差** ：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。\n\n\n\nJSON 序列化由于性能问题，我们一般也不会考虑使用。\n\n\n\n像 Protostuff，ProtoBuf、hessian2这些都是跨语言的序列化方式，如果有跨语言需求的话可以考虑使用。\n\n\n\nKryo和FST这两种序列化方式是 Dubbo 后来才引入的，性能非常好。不过，这两者都是专门针对 Java 语言的。Dubbo 官网的一篇文章中提到说推荐使用 Kryo 作为生产环境的序列化方式。(文章地址：[https://dubbo.apache.org/zh/docs/v2.7/user/references/protocol/rest/open in new window](https://dubbo.apache.org/zh/docs/v2.7/user/references/protocol/rest/))\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359394142-e4f0103d-1a6f-411d-9564-c90ce82f1785.png)\n\n\n\nDubbo 官方文档中还有一个关于这些[序列化协议的性能对比图open in new window](https://dubbo.apache.org/zh/docs/v2.7/user/serialization/#m-zhdocsv27userserialization)可供参考。\n\n\n\n![img](大厂面试之Dubbo篇.assets/1676359395902-d17c7bcf-0daf-4707-b1bd-c41180d72995.png)","tags":["我要进大厂","Dubbo","面试"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之ElasticSearch篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之ElasticSearch篇/","content":"\n## ES 的分布式架构原理能说一下么（ES 是如何实现分布式的啊）？\n\n\n\n### 面试官心理分析\n\n\n\n在搜索这块，lucene 是最流行的搜索库。几年前业内一般都问，你了解 lucene 吗？你知道倒排索引的原理吗？现在早已经 out 了，因为现在很多项目都是直接用基于 lucene 的分布式搜索引擎—— ElasticSearch，简称为 ES。\n\n\n\n而现在分布式搜索基本已经成为大部分互联网行业的 Java 系统的标配，其中尤为流行的就是 ES，前几年 ES 没火的时候，大家一般用 solr。但是这两年基本大部分企业和项目都开始转向 ES 了。\n\n\n\n所以互联网面试，肯定会跟你聊聊分布式搜索引擎，也就一定会聊聊 ES，如果你确实不知道，那你真的就 out 了。\n\n\n\n如果面试官问你第一个问题，确实一般都会问你 ES 的分布式架构设计能介绍一下么？就看看你对分布式搜索引擎架构的一个基本理解。\n\n\n\n### 面试题剖析\n\n\n\nElasticSearch 设计的理念就是分布式搜索引擎，底层其实还是基于 lucene 的。核心思想就是在多台机器上启动多个 ES 进程实例，组成了一个 ES 集群。\n\n\n\nES 中存储数据的**基本单位是索引**，比如说你现在要在 ES 中存储一些订单数据，你就应该在 ES 中创建一个索引 `order_idx` ，所有的订单数据就都写到这个索引里面去，一个索引差不多就是相当于是 mysql 里的一张表。\n\n\n\n```java\nindex -> type -> mapping -> document -> fieldCopy to clipboardErrorCopied复制复制失败复制成功\n```\n\n\n\n这样吧，为了做个更直白的介绍，我在这里做个类比。但是切记，不要划等号，类比只是为了便于理解。\n\n\n\nindex 相当于 mysql 里的一张表。而 type 没法跟 mysql 里去对比，一个 index 里可以有多个 type，每个 type 的字段都是差不多的，但是有一些略微的差别。假设有一个 index，是订单 index，里面专门是放订单数据的。就好比说你在 mysql 中建表，有些订单是实物商品的订单，比如一件衣服、一双鞋子；有些订单是虚拟商品的订单，比如游戏点卡，话费充值。就两种订单大部分字段是一样的，但是少部分字段可能有略微的一些差别。\n\n\n\n所以就会在订单 index 里，建两个 type，一个是实物商品订单 type，一个是虚拟商品订单 type，这两个 type 大部分字段是一样的，少部分字段是不一样的。\n\n\n\n很多情况下，一个 index 里可能就一个 type，但是确实如果说是一个 index 里有多个 type 的情况（**注意**， `mapping types` 这个概念在 ElasticSearch 7. X 已被完全移除，详细说明可以参考[官方文档](https://github.com/elastic/elasticsearch/blob/6.5/docs/reference/mapping/removal_of_types.asciidoc)），你可以认为 index 是一个类别的表，具体的每个 type 代表了 mysql 中的一个表。每个 type 有一个 mapping，如果你认为一个 type 是具体的一个表，index 就代表多个 type 同属于的一个类型，而 mapping 就是这个 type 的**表结构定义**，你在 mysql 中创建一个表，肯定是要定义表结构的，里面有哪些字段，每个字段是什么类型。实际上你往 index 里的一个 type 里面写的一条数据，叫做一条 document，一条 document 就代表了 mysql 中某个表里的一行，每个 document 有多个 field，每个 field 就代表了这个 document 中的一个字段的值。\n\n\n\n![img](大厂面试之ElasticSearch篇.assets/1676359411145-f7e9166d-2959-48b7-87b7-76429112d9ef.png)\n\n\n\n你搞一个索引，这个索引可以拆分成多个 `shard` ，每个 shard 存储部分数据。拆分多个 shard 是有好处的，一是**支持横向扩展**，比如你数据量是 3T，3 个 shard，每个 shard 就 1T 的数据，若现在数据量增加到 4T，怎么扩展，很简单，重新建一个有 4 个 shard 的索引，将数据导进去；二是**提高性能**，数据分布在多个 shard，即多台服务器上，所有的操作，都会在多台机器上并行分布式执行，提高了吞吐量和性能。\n\n\n\n接着就是这个 shard 的数据实际是有多个备份，就是说每个 shard 都有一个 `primary shard` ，负责写入数据，但是还有几个 `replica shard` 。 `primary shard` 写入数据之后，会将数据同步到其他几个 `replica shard` 上去。\n\n\n\n![img](大厂面试之ElasticSearch篇.assets/1676359413851-ec4747bd-b36a-45fa-a1d1-88e34a79bba4.png)\n\n\n\n通过这个 replica 的方案，每个 shard 的数据都有多个备份，如果某个机器宕机了，没关系啊，还有别的数据副本在别的机器上呢。高可用了吧。\n\n\n\nES 集群多个节点，会自动选举一个节点为 master 节点，这个 master 节点其实就是干一些管理的工作的，比如维护索引元数据、负责切换 primary shard 和 replica shard 身份等。要是 master 节点宕机了，那么会重新选举一个节点为 master 节点。\n\n\n\n如果是非 master 节点宕机了，那么会由 master 节点，让那个宕机节点上的 primary shard 的身份转移到其他机器上的 replica shard。接着你要是修复了那个宕机机器，重启了之后，master 节点会控制将缺失的 replica shard 分配过去，同步后续修改的数据之类的，让集群恢复正常。\n\n\n\n说得更简单一点，就是说如果某个非 master 节点宕机了。那么此节点上的 primary shard 不就没了。那好，master 会让 primary shard 对应的 replica shard（在其他机器上）切换为 primary shard。如果宕机的机器修复了，修复后的节点也不再是 primary shard，而是 replica shard。\n\n\n\n其实上述就是 ElasticSearch 作为分布式搜索引擎最基本的一个架构设计。\n\n\n\n## ES 写入数据的工作原理是什么啊？ES 查询数据的工作原理是什么啊？底层的 Lucene 介绍一下呗？倒排索引了解吗？\n\n\n\n### 面试官心理分析\n\n\n\n问这个，其实面试官就是要看看你了解不了解 es 的一些基本原理，因为用 es 无非就是写入数据，搜索数据。你要是不明白你发起一个写入和搜索请求的时候，es 在干什么，那你真的是......\n\n\n\n对 es 基本就是个黑盒，你还能干啥？你唯一能干的就是用 es 的 api 读写数据了。要是出点什么问题，你啥都不知道，那还能指望你什么呢？\n\n\n\n### 面试题剖析\n\n\n\n#### es 写数据过程\n\n\n\n- 客户端选择一个 node 发送请求过去，这个 node 就是 `coordinating node` （协调节点）。\n- `coordinating node` 对 document 进行**路由**，将请求转发给对应的 node（有 primary shard）。\n- 实际的 node 上的 `primary shard` 处理请求，然后将数据同步到 `replica node` 。\n- `coordinating node` 如果发现 `primary node` 和所有 `replica node` 都搞定之后，就返回响应结果给客户端。\n\n\n\n![img](大厂面试之ElasticSearch篇.assets/1676359417424-4d0a13e1-7582-4bdb-beba-ea6b0905ec6b.png)\n\n\n\n#### es 读数据过程\n\n\n\n可以通过 `doc id` 来查询，会根据 `doc id` 进行 hash，判断出来当时把 `doc id` 分配到了哪个 shard 上面去，从那个 shard 去查询。\n\n\n\n- 客户端发送请求到**任意**一个 node，成为 `coordinate node` 。\n- `coordinate node` 对 `doc id` 进行哈希路由，将请求转发到对应的 node，此时会使用 `round-robin` **随机轮询算法**，在 `primary shard` 以及其所有 replica 中随机选择一个，让读请求负载均衡。\n- 接收请求的 node 返回 document 给 `coordinate node` 。\n- `coordinate node` 返回 document 给客户端。\n\n\n\n#### es 搜索数据过程\n\n\n\nes 最强大的是做全文检索，就是比如你有三条数据：\n\n\n\n```java\njava真好玩儿啊\njava好难学啊\nj2ee特别牛Copy to clipboardErrorCopied复制复制失败复制成功\n```\n\n\n\n你根据 `java` 关键词来搜索，将包含 `java` 的 `document` 给搜索出来。es 就会给你返回：java 真好玩儿啊，java 好难学啊。\n\n\n\n- 客户端发送请求到一个 `coordinate node` 。\n- 协调节点将搜索请求转发到**所有**的 shard 对应的 `primary shard` 或 `replica shard` ，都可以。\n- query phase：每个 shard 将自己的搜索结果（其实就是一些 `doc id` ）返回给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果。\n- fetch phase：接着由协调节点根据 `doc id` 去各个节点上**拉取实际**的 `document` 数据，最终返回给客户端。\n\n\n\n写请求是写入 primary shard，然后同步给所有的 replica shard；读请求可以从 primary shard 或 replica shard 读取，采用的是随机轮询算法。\n\n\n\n#### 写数据底层原理\n\n\n\n![img](大厂面试之ElasticSearch篇.assets/1676359420640-08bd71c0-d91b-4fee-b438-a6ecaaf5643e.png)\n\n\n\n先写入内存 buffer，在 buffer 里的时候数据是搜索不到的；同时将数据写入 translog 日志文件。\n\n\n\n如果 buffer 快满了，或者到一定时间，就会将内存 buffer 数据 `refresh` 到一个新的 `segment file` 中，但是此时数据不是直接进入 `segment file` 磁盘文件，而是先进入 `os cache` 。这个过程就是 `refresh` 。\n\n\n\n每隔 1 秒钟，es 将 buffer 中的数据写入一个**新的** `segment file` ，每秒钟会产生一个**新的磁盘文件** `segment file` ，这个 `segment file` 中就存储最近 1 秒内 buffer 中写入的数据。\n\n\n\n但是如果 buffer 里面此时没有数据，那当然不会执行 refresh 操作，如果 buffer 里面有数据，默认 1 秒钟执行一次 refresh 操作，刷入一个新的 segment file 中。\n\n\n\n操作系统里面，磁盘文件其实都有一个东西，叫做 `os cache` ，即操作系统缓存，就是说数据写入磁盘文件之前，会先进入 `os cache` ，先进入操作系统级别的一个内存缓存中去。只要 `buffer` 中的数据被 refresh 操作刷入 `os cache` 中，这个数据就可以被搜索到了。\n\n\n\n为什么叫 es 是**准实时**的？ `NRT` ，全称 `near real-time` 。默认是每隔 1 秒 refresh 一次的，所以 es 是准实时的，因为写入的数据 1 秒之后才能被看到。可以通过 es 的 `restful api` 或者 `java api` ，**手动**执行一次 refresh 操作，就是手动将 buffer 中的数据刷入 `os cache` 中，让数据立马就可以被搜索到。只要数据被输入 `os cache` 中，buffer 就会被清空了，因为不需要保留 buffer 了，数据在 translog 里面已经持久化到磁盘去一份了。\n\n\n\n重复上面的步骤，新的数据不断进入 buffer 和 translog，不断将 `buffer` 数据写入一个又一个新的 `segment file` 中去，每次 `refresh` 完 buffer 清空，translog 保留。随着这个过程推进，translog 会变得越来越大。当 translog 达到一定长度的时候，就会触发 `commit` 操作。\n\n\n\ncommit 操作发生第一步，就是将 buffer 中现有数据 `refresh` 到 `os cache` 中去，清空 buffer。然后，将一个 `commit point` 写入磁盘文件，里面标识着这个 `commit point` 对应的所有 `segment file` ，同时强行将 `os cache` 中目前所有的数据都 `fsync` 到磁盘文件中去。最后**清空** 现有 translog 日志文件，重启一个 translog，此时 commit 操作完成。\n\n\n\n这个 commit 操作叫做 `flush` 。默认 30 分钟自动执行一次 `flush` ，但如果 translog 过大，也会触发 `flush` 。flush 操作就对应着 commit 的全过程，我们可以通过 es api，手动执行 flush 操作，手动将 os cache 中的数据 fsync 强刷到磁盘上去。\n\n\n\ntranslog 日志文件的作用是什么？你执行 commit 操作之前，数据要么是停留在 buffer 中，要么是停留在 os cache 中，无论是 buffer 还是 os cache 都是内存，一旦这台机器死了，内存中的数据就全丢了。所以需要将数据对应的操作写入一个专门的日志文件 `translog` 中，一旦此时机器宕机，再次重启的时候，es 会自动读取 translog 日志文件中的数据，恢复到内存 buffer 和 os cache 中去。\n\n\n\ntranslog 其实也是先写入 os cache 的，默认每隔 5 秒刷一次到磁盘中去，所以默认情况下，可能有 5 秒的数据会仅仅停留在 buffer 或者 translog 文件的 os cache 中，如果此时机器挂了，会**丢失** 5 秒钟的数据。但是这样性能比较好，最多丢 5 秒的数据。也可以将 translog 设置成每次写操作必须是直接 `fsync` 到磁盘，但是性能会差很多。\n\n\n\n- `index.translog.sync_interval` 控制 translog 多久 fsync 到磁盘,最小为 100ms；\n- `index.translog.durability` translog 是每 5 秒钟刷新一次还是每次请求都 fsync，这个参数有 2 个取值：request(每次请求都执行 fsync,es 要等 translog fsync 到磁盘后才会返回成功)和 async(默认值，translog 每隔 5 秒钟 fsync 一次)。\n\n\n\n实际上你在这里，如果面试官没有问你 es 丢数据的问题，你可以在这里给面试官炫一把，你说，其实 es 第一是准实时的，数据写入 1 秒后可以搜索到；可能会丢失数据的。有 5 秒的数据，停留在 buffer、translog os cache、segment file os cache 中，而不在磁盘上，此时如果宕机，会导致 5 秒的**数据丢失**。\n\n\n\n**总结一下**，数据先写入内存 buffer，然后每隔 1s，将数据 refresh 到 os cache，到了 os cache 数据就能被搜索到（所以我们才说 es 从写入到能被搜索到，中间有 1s 的延迟）。每隔 5s，将数据写入 translog 文件（这样如果机器宕机，内存数据全没，最多会有 5s 的数据丢失），translog 大到一定程度，或者默认每隔 30mins，会触发 commit 操作，将缓冲区的数据都 flush 到 segment file 磁盘文件中。\n\n\n\n数据写入 segment file 之后，同时就建立好了倒排索引。\n\n\n\n#### 删除/更新数据底层原理\n\n\n\n如果是删除操作，commit 的时候会生成一个 `.del` 文件，里面将某个 doc 标识为 `deleted` 状态，那么搜索的时候根据 `.del` 文件就知道这个 doc 是否被删除了。\n\n\n\n如果是更新操作，就是将原来的 doc 标识为 `deleted` 状态，然后新写入一条数据。\n\n\n\nbuffer 每 refresh 一次，就会产生一个 `segment file` ，所以默认情况下是 1 秒钟一个 `segment file` ，这样下来 `segment file` 会越来越多，此时会定期执行 merge。每次 merge 的时候，会将多个 `segment file` 合并成一个，同时这里会将标识为 `deleted` 的 doc 给**物理删除掉**，然后将新的 `segment file` 写入磁盘，这里会写一个 `commit point` ，标识所有新的 `segment file` ，然后打开 `segment file` 供搜索使用，同时删除旧的 `segment file` 。\n\n\n\n#### 底层 lucene\n\n\n\n简单来说，lucene 就是一个 jar 包，里面包含了封装好的各种建立倒排索引的算法代码。我们用 Java 开发的时候，引入 lucene jar，然后基于 lucene 的 api 去开发就可以了。\n\n\n\n通过 lucene，我们可以将已有的数据建立索引，lucene 会在本地磁盘上面，给我们组织索引的数据结构。\n\n\n\n#### 倒排索引\n\n\n\n在搜索引擎中，每个文档都有一个对应的文档 ID，文档内容被表示为一系列关键词的集合。例如，文档 1 经过分词，提取了 20 个关键词，每个关键词都会记录它在文档中出现的次数和出现位置。\n\n\n\n那么，倒排索引就是**关键词到文档** ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现了关键词。\n\n\n\n举个栗子。\n\n\n\n有以下文档：\n\n| DocId | Doc                                            |\n| ----- | ---------------------------------------------- |\n| 1     | 谷歌地图之父跳槽 Facebook                      |\n| 2     | 谷歌地图之父加盟 Facebook                      |\n| 3     | 谷歌地图创始人拉斯离开谷歌加盟 Facebook        |\n| 4     | 谷歌地图之父跳槽 Facebook 与 Wave 项目取消有关 |\n| 5     | 谷歌地图之父拉斯加盟社交网站 Facebook          |\n\n\n\n对文档进行分词之后，得到以下**倒排索引**。\n\n| WordId | Word     | DocIds        |\n| ------ | -------- | ------------- |\n| 1      | 谷歌     | 1, 2, 3, 4, 5 |\n| 2      | 地图     | 1, 2, 3, 4, 5 |\n| 3      | 之父     | 1, 2, 4, 5    |\n| 4      | 跳槽     | 1, 4          |\n| 5      | Facebook | 1, 2, 3, 4, 5 |\n| 6      | 加盟     | 2, 3, 5       |\n| 7      | 创始人   | 3             |\n| 8      | 拉斯     | 3, 5          |\n| 9      | 离开     | 3             |\n| 10     | 与       | 4             |\n| ..     | ..       | ..            |\n\n\n\n另外，实用的倒排索引还可以记录更多的信息，比如文档频率信息，表示在文档集合中有多少个文档包含某个单词。\n\n\n\n那么，有了倒排索引，搜索引擎可以很方便地响应用户的查询。比如用户输入查询 `Facebook` ，搜索系统查找倒排索引，从中读出包含这个单词的文档，这些文档就是提供给用户的搜索结果。\n\n\n\n要注意倒排索引的两个重要细节：\n\n\n\n- 倒排索引中的所有词项对应一个或多个文档；\n- 倒排索引中的词项**根据字典顺序升序排列**\n\n\n\n上面只是一个简单的栗子，并没有严格按照字典顺序升序排列。\n\n\n\n## ES 在数据量很大的情况下（数十亿级别）如何提高查询效率啊？\n\n\n\n### 面试官心理分析\n\n\n\n这个问题是肯定要问的，说白了，就是看你有没有实际干过 es，因为啥？其实 es 性能并没有你想象中那么好的。很多时候数据量大了，特别是有几亿条数据的时候，可能你会懵逼的发现，跑个搜索怎么一下 `5~10s` ，坑爹了。第一次搜索的时候，是 `5~10s` ，后面反而就快了，可能就几百毫秒。\n\n\n\n你就很懵，每个用户第一次访问都会比较慢，比较卡么？所以你要是没玩儿过 es，或者就是自己玩玩儿 demo，被问到这个问题容易懵逼，显示出你对 es 确实玩儿的不怎么样？\n\n\n\n### 面试题剖析\n\n\n\n说实话，es 性能优化是没有什么银弹的，啥意思呢？就是**不要期待着随手调一个参数，就可以万能的应对所有的性能慢的场景**。也许有的场景是你换个参数，或者调整一下语法，就可以搞定，但是绝对不是所有场景都可以这样。\n\n\n\n#### 性能优化的杀手锏——filesystem cache\n\n\n\n你往 es 里写的数据，实际上都写到磁盘文件里去了，**查询的时候**，操作系统会将磁盘文件里的数据自动缓存到 `filesystem cache` 里面去。\n\n\n\n![img](大厂面试之ElasticSearch篇.assets/1676359429199-1ad7a5a0-6bc3-466c-9d06-fcc0198b17f1.png)\n\n\n\nes 的搜索引擎严重依赖于底层的 `filesystem cache` ，你如果给 `filesystem cache` 更多的内存，尽量让内存可以容纳所有的 `idx segment file` 索引数据文件，那么你搜索的时候就基本都是走内存的，性能会非常高。\n\n\n\n性能差距究竟可以有多大？我们之前很多的测试和压测，如果走磁盘一般肯定上秒，搜索性能绝对是秒级别的，1 秒、5 秒、10 秒。但如果是走 `filesystem cache` ，是走纯内存的，那么一般来说性能比走磁盘要高一个数量级，基本上就是毫秒级的，从几毫秒到几百毫秒不等。\n\n\n\n这里有个真实的案例。某个公司 es 节点有 3 台机器，每台机器看起来内存很多，64G，总内存就是 `64 * 3 = 192G` 。每台机器给 es jvm heap 是 `32G` ，那么剩下来留给 `filesystem cache` 的就是每台机器才 `32G` ，总共集群里给 `filesystem cache` 的就是 `32 * 3 = 96G` 内存。而此时，整个磁盘上索引数据文件，在 3 台机器上一共占用了 `1T` 的磁盘容量，es 数据量是 `1T` ，那么每台机器的数据量是 `300G` 。这样性能好吗？ `filesystem cache` 的内存才 100G，十分之一的数据可以放内存，其他的都在磁盘，然后你执行搜索操作，大部分操作都是走磁盘，性能肯定差。\n\n\n\n归根结底，你要让 es 性能要好，最佳的情况下，就是你的机器的内存，至少可以容纳你的总数据量的一半。\n\n\n\n根据我们自己的生产环境实践经验，最佳的情况下，是仅仅在 es 中就存少量的数据，就是你要**用来搜索的那些索引**，如果内存留给 `filesystem cache` 的是 100G，那么你就将索引数据控制在 `100G` 以内，这样的话，你的数据几乎全部走内存来搜索，性能非常之高，一般可以在 1 秒以内。\n\n\n\n比如说你现在有一行数据。 `id,name,age ....` 30 个字段。但是你现在搜索，只需要根据 `id,name,age` 三个字段来搜索。如果你傻乎乎往 es 里写入一行数据所有的字段，就会导致说 `90%` 的数据是不用来搜索的，结果硬是占据了 es 机器上的 `filesystem cache` 的空间，单条数据的数据量越大，就会导致 `filesystem cahce` 能缓存的数据就越少。其实，仅仅写入 es 中要用来检索的**少数几个字段**就可以了，比如说就写入 es `id,name,age` 三个字段，然后你可以把其他的字段数据存在 mysql/hbase 里，我们一般是建议用 `es + hbase` 这么一个架构。\n\n\n\nhbase 的特点是**适用于海量数据的在线存储**，就是对 hbase 可以写入海量数据，但是不要做复杂的搜索，做很简单的一些根据 id 或者范围进行查询的这么一个操作就可以了。从 es 中根据 name 和 age 去搜索，拿到的结果可能就 20 个 `doc id` ，然后根据 `doc id` 到 hbase 里去查询每个 `doc id` 对应的**完整的数据**，给查出来，再返回给前端。\n\n\n\n写入 es 的数据最好小于等于，或者是略微大于 es 的 filesystem cache 的内存容量。然后你从 es 检索可能就花费 20ms，然后再根据 es 返回的 id 去 hbase 里查询，查 20 条数据，可能也就耗费个 30ms，可能你原来那么玩儿，1T 数据都放 es，会每次查询都是 5~10s，现在可能性能就会很高，每次查询就是 50ms。\n\n\n\n#### 数据预热\n\n\n\n假如说，哪怕是你就按照上述的方案去做了，es 集群中每个机器写入的数据量还是超过了 `filesystem cache` 一倍，比如说你写入一台机器 60G 数据，结果 `filesystem cache` 就 30G，还是有 30G 数据留在了磁盘上。\n\n\n\n其实可以做**数据预热**。\n\n\n\n举个例子，拿微博来说，你可以把一些大 V，平时看的人很多的数据，你自己提前后台搞个系统，每隔一会儿，自己的后台系统去搜索一下热数据，刷到 `filesystem cache` 里去，后面用户实际上来看这个热数据的时候，他们就是直接从内存里搜索了，很快。\n\n\n\n或者是电商，你可以将平时查看最多的一些商品，比如说 iphone 8，热数据提前后台搞个程序，每隔 1 分钟自己主动访问一次，刷到 `filesystem cache` 里去。\n\n\n\n对于那些你觉得比较热的、经常会有人访问的数据，最好**做一个专门的缓存预热子系统**，就是对热数据每隔一段时间，就提前访问一下，让数据进入 `filesystem cache` 里面去。这样下次别人访问的时候，性能一定会好很多。\n\n\n\n#### 冷热分离\n\n\n\nes 可以做类似于 mysql 的水平拆分，就是说将大量的访问很少、频率很低的数据，单独写一个索引，然后将访问很频繁的热数据单独写一个索引。最好是将**冷数据写入一个索引中，然后热数据写入另外一个索引中**，这样可以确保热数据在被预热之后，尽量都让他们留在 `filesystem os cache` 里，**别让冷数据给冲刷掉**。\n\n\n\n你看，假设你有 6 台机器，2 个索引，一个放冷数据，一个放热数据，每个索引 3 个 shard。3 台机器放热数据 index，另外 3 台机器放冷数据 index。然后这样的话，你大量的时间是在访问热数据 index，热数据可能就占总数据量的 10%，此时数据量很少，几乎全都保留在 `filesystem cache` 里面了，就可以确保热数据的访问性能是很高的。但是对于冷数据而言，是在别的 index 里的，跟热数据 index 不在相同的机器上，大家互相之间都没什么联系了。如果有人访问冷数据，可能大量数据是在磁盘上的，此时性能差点，就 10% 的人去访问冷数据，90% 的人在访问热数据，也无所谓了。\n\n\n\n#### document 模型设计\n\n\n\n对于 MySQL，我们经常有一些复杂的关联查询。在 es 里该怎么玩儿，es 里面的复杂的关联查询尽量别用，一旦用了性能一般都不太好。\n\n\n\n最好是先在 Java 系统里就完成关联，将关联好的数据直接写入 es 中。搜索的时候，就不需要利用 es 的搜索语法来完成 join 之类的关联搜索了。\n\n\n\ndocument 模型设计是非常重要的，很多操作，不要在搜索的时候才想去执行各种复杂的乱七八糟的操作。es 能支持的操作就那么多，不要考虑用 es 做一些它不好操作的事情。如果真的有那种操作，尽量在 document 模型设计的时候，写入的时候就完成。另外对于一些太复杂的操作，比如 join/nested/parent-child 搜索都要尽量避免，性能都很差的。\n\n\n\n#### 分页性能优化\n\n\n\nes 的分页是较坑的，为啥呢？举个例子吧，假如你每页是 10 条数据，你现在要查询第 100 页，实际上是会把每个 shard 上存储的前 1000 条数据都查到一个协调节点上，如果你有个 5 个 shard，那么就有 5000 条数据，接着协调节点对这 5000 条数据进行一些合并、处理，再获取到最终第 100 页的 10 条数据。\n\n\n\n分布式的，你要查第 100 页的 10 条数据，不可能说从 5 个 shard，每个 shard 就查 2 条数据，最后到协调节点合并成 10 条数据吧？你**必须**得从每个 shard 都查 1000 条数据过来，然后根据你的需求进行排序、筛选等等操作，最后再次分页，拿到里面第 100 页的数据。你翻页的时候，翻的越深，每个 shard 返回的数据就越多，而且协调节点处理的时间越长，非常坑爹。所以用 es 做分页的时候，你会发现越翻到后面，就越是慢。\n\n\n\n我们之前也是遇到过这个问题，用 es 作分页，前几页就几十毫秒，翻到 10 页或者几十页的时候，基本上就要 5~10 秒才能查出来一页数据了。\n\n\n\n**有什么解决方案吗？**\n\n\n\n##### 不允许深度分页（默认深度分页性能很差）\n\n\n\n跟产品经理说，你系统不允许翻那么深的页，默认翻的越深，性能就越差。\n\n\n\n##### 类似于 app 里的推荐商品不断下拉出来一页一页的\n\n\n\n类似于微博中，下拉刷微博，刷出来一页一页的，你可以用 `scroll api` ，关于如何使用，自行上网搜索。\n\n\n\nscroll 会一次性给你生成**所有数据的一个快照**，然后每次滑动向后翻页就是通过**游标** `scroll_id` 移动，获取下一页下一页这样子，性能会比上面说的那种分页性能要高很多很多，基本上都是毫秒级的。\n\n\n\n但是，唯一的一点就是，这个适合于那种类似微博下拉翻页的，**不能随意跳到任何一页的场景**。也就是说，你不能先进入第 10 页，然后去第 120 页，然后又回到第 58 页，不能随意乱跳页。所以现在很多产品，都是不允许你随意翻页的，app，也有一些网站，做的就是你只能往下拉，一页一页的翻。\n\n\n\n初始化时必须指定 `scroll` 参数，告诉 es 要保存此次搜索的上下文多长时间。你需要确保用户不会持续不断翻页翻几个小时，否则可能因为超时而失败。\n\n\n\n除了用 `scroll api` ，你也可以用 `search_after` 来做， `search_after` 的思想是使用前一页的结果来帮助检索下一页的数据，显然，这种方式也不允许你随意翻页，你只能一页页往后翻。初始化时，需要使用一个唯一值的字段作为 sort 字段。\n\n\n\n## ES 生产集群的部署架构是什么？每个索引的数据量大概有多少？每个索引大概有多少个分片？\n\n\n\n### 面试官心理分析\n\n\n\n这个问题，包括后面的 redis 什么的，谈到 es、redis、mysql 分库分表等等技术，面试必问！就是你生产环境咋部署的？说白了，这个问题没啥技术含量，就是看你有没有在真正的生产环境里干过这事儿！\n\n\n\n有些同学可能是没在生产环境中干过的，没实际去拿线上机器部署过 es 集群，也没实际玩儿过，也没往 es 集群里面导入过几千万甚至是几亿的数据量，可能你就不太清楚这里面的一些生产项目中的细节。\n\n\n\n如果你是自己就玩儿过 demo，没碰过真实的 es 集群，那你可能此时会懵。别懵，你一定要云淡风轻的回答出来这个问题，表示你确实干过这事儿。\n\n\n\n### 面试题剖析\n\n\n\n其实这个问题没啥，如果你确实干过 es，那你肯定了解你们生产 es 集群的实际情况，部署了几台机器？有多少个索引？每个索引有多大数据量？每个索引给了多少个分片？你肯定知道！\n\n\n\n但是如果你确实没干过，也别虚，我给你说一个基本的版本，你到时候就简单说一下就好了。\n\n\n\n- es 生产集群我们部署了 5 台机器，每台机器是 6 核 64G 的，集群总内存是 320G。\n- 我们 es 集群的日增量数据大概是 2000 万条，每天日增量数据大概是 500MB，每月增量数据大概是 6 亿，15G。目前系统已经运行了几个月，现在 es 集群里数据总量大概是 100G 左右。\n- 目前线上有 5 个索引（这个结合你们自己业务来，看看自己有哪些数据可以放 es 的），每个索引的数据量大概是 20G，所以这个数据量之内，我们每个索引分配的是 8 个 shard，比默认的 5 个 shard 多了 3 个 shard。","tags":["我要进大厂","面试","ElasticSearch"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之Mybatis篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Mybatis篇/","content":"\n## 1.说说什么是MyBatis?\n\n\n\nMybatis 是一个半 ORM（对象关系映射）框架，它内部封装了 JDBC，开发时只需要关注 SQL 语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程。程序员直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。\n\n\n\nMyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。\n\n\n\n**再说一下缺点**\n\n\n\nSQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求\n\n\n\nSQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库\n\n\n\n**ORM是什么?**\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357342716-3056ec46-4f52-4fc3-b582-d792227d1d5b.png)\n\n\n\nORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单来说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。\n\n\n\n**为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？**\n\n\n\nHibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。\n\n\n\n而Mybatis在查询关联对象或关联集合对象时，需要手动编写SQL来完成，所以，被称之为半自动ORM映射工具。\n\n\n\n**JDBC编程有哪些不足之处，MyBatis是如何解决的？**\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357344652-277b3cb6-ead5-4a19-91f8-b8b80752d58c.png)\n\n\n\nJDBC编程的不足\n\n\n\n1、数据连接创建、释放频繁造成系统资源浪费从而影响系统性能\n\n\n\n- 解决：在mybatis-config.xml中配置数据链接池，使用连接池统一管理数据库连接。\n\n\n\n2、sql语句写在代码中造成代码不易维护\n\n\n\n- 解决：将sql语句配置在XXXXmapper.xml文件中与java代码分离。\n\n\n\n3、向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。\n\n\n\n- 解决：Mybatis自动将java对象映射至sql语句。\n\n\n\n4、对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。\n\n\n\n- 解决：Mybatis自动将sql执行结果映射至java对象。\n\n\n\n## 2.Hibernate 和 MyBatis 有什么区别？\n\n\n\nPS:直接用Hibernate的应该不多了吧，毕竟大家都是“敏捷开发”，但架不住面试爱问。\n\n\n\n**相同点**\n\n\n\n都是对jdbc的封装，都是应用于持久层的框架。\n\n\n\n**不同点**\n\n\n\n映射关系\n\n\n\n- MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单\n\n- Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂\n\n\n\n**SQL优化和移植性**\n\n\n\n- Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。\n\n- MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。\n\n\n\n**MyBatis和Hibernate的适用场景?**\n\n\n\nHibernate 是标准的ORM框架，SQL编写量较少，但不够灵活，适合于需求相对稳定，中小型的软件项目，比如：办公自动化系统\n\n\n\nMyBatis 是半ORM框架，需要编写较多SQL，但是比较灵活，适合于需求变化频繁，快速迭代的项目，比如：电商网站\n\n\n\n## 3.MyBatis使用过程？生命周期？\n\n\n\nMyBatis基本使用的过程大概可以分为这么几步：\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357347708-cdbed4ee-d6d9-4a1c-a351-7207ee3a6c04.png)\n\n\n\n使用步骤\n\n\n\n1、 创建SqlSessionFactory，可以从配置或者直接编码来创建SqlSessionFactory\n\n\n\n```java\nString resource = \"org/mybatis/example/mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n```\n\n\n\n2、 通过SqlSessionFactory创建SqlSession，SqlSession（会话）可以理解为程序和数据库之间的桥梁\n\n\n\n```java\nSqlSession session = sqlSessionFactory.openSession();\n```\n\n\n\n3、 通过sqlsession执行数据库操作，可以通过 SqlSession 实例来直接执行已映射的 SQL 语句：\n\n\n\n```java\nBlog blog = (Blog)session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101);\n```\n\n\n\n更常用的方式是先获取Mapper(映射)，然后再执行SQL语句：\n\n\n\n```java\nBlogMapper mapper = session.getMapper(BlogMapper.class);\nBlog blog = mapper.selectBlog(101);\n```\n\n\n\n4、 调用session.commit()提交事务；如果是更新、删除语句，我们还需要提交一下事务。\n\n\n\n5、 调用session.close()关闭会话，最后一定要记得关闭会话。\n\n\n\n**MyBatis生命周期？**\n\n\n\n上面提到了几个MyBatis的组件，一般说的MyBatis生命周期就是这些组件的生命周期。\n\n\n\nSqlSessionFactoryBuilder：一旦创建了 SqlSessionFactory，就不再需要它了。因此 SqlSessionFactoryBuilder 实例的生命周期只存在于方法的内部。\n\n\n\nSqlSessionFactory：SqlSessionFactory 是用来创建SqlSession的，相当于一个数据库连接池，每次创建SqlSessionFactory都会使用数据库资源，多次创建和销毁是对资源的浪费。所以SqlSessionFactory是应用级的生命周期，而且应该是单例的。\n\n\n\nSqlSession：SqlSession相当于JDBC中的Connection，SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的生命周期是一次请求或一个方法。\n\n\n\nMapper：映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的，它的生命周期在sqlsession事务方法之内，一般会控制在方法级。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357350234-ce33711c-227a-49a2-bce5-fd7bd89b570d.png)\n\n\n\n当然，万物皆可集成Spring，MyBatis通常也是和Spring集成使用，Spring可以帮助我们创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到我们的 bean 中，我们不需要关心它们的创建过程和生命周期，那就是另外的故事了。\n\n\n\n## 4.在mapper中如何传递多个参数？\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357352583-7a8662c3-6a95-4e8a-8bc9-7bf18c469aca.png)\n\n\n\n**方法1：顺序传参法**\n\n\n\n```java\npublic User selectUser(String name, int deptId);\n\n<select id=\"selectUser\" resultMap=\"UserResultMap\">\n    select * from user\n    where user_name = #{0} and dept_id = #{1}\n</select>\n```\n\n\n\n`#{}`里面的数字代表传入参数的顺序。\n\n\n\n这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。\n\n\n\n**方法2：@Param注解传参法**\n\n\n\n```java\npublic User selectUser(@Param(\"userName\") String name, int @Param(\"deptId\") deptId);\n\n<select id=\"selectUser\" resultMap=\"UserResultMap\">\n    select * from user\n    where user_name = #{userName} and dept_id = #{deptId}\n</select>\n```\n\n\n\n`#{}`里面的名称对应的是注解@Param括号里面修饰的名称。\n\n\n\n这种方法在参数不多的情况还是比较直观的，（推荐使用）。\n\n\n\n**方法3：Map传参法**\n\n\n\n```java\npublic User selectUser(Map<String, Object> params);\n\n<select id=\"selectUser\" parameterType=\"java.util.Map\" resultMap=\"UserResultMap\">\n    select * from user\n    where user_name = #{userName} and dept_id = #{deptId}\n</select>\n```\n\n\n\n`#{}`里面的名称对应的是Map里面的key名称。\n\n\n\n这种方法适合传递多个参数，且参数易变能灵活传递的情况。\n\n\n\n**方法4：Java Bean传参法**\n\n\n\n```java\npublic User selectUser(User user);\n\n<select id=\"selectUser\" parameterType=\"com.jourwon.pojo.User\" resultMap=\"UserResultMap\">\n    select * from user\n    where user_name = #{userName} and dept_id = #{deptId}\n</select>\n```\n\n\n\n`#{}`里面的名称对应的是User类里面的成员属性。\n\n\n\n这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方便，推荐使用。（推荐使用）。\n\n\n\n## 5.实体类属性名和表中字段名不一样 ，怎么办?\n\n\n\n第1种：通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。\n\n\n\n```xml\n<select id=\"getOrder\" parameterType=\"int\" resultType=\"com.jourwon.pojo.Order\">\n       select order_id id, order_no orderno ,order_price price form orders where order_id=#{id};\n</select>\n```\n\n\n\n第2种：通过resultMap  中的来映射字段名和实体类属性名的一一对应的关系。\n\n\n\n```xml\n<select id=\"getOrder\" parameterType=\"int\" resultMap=\"orderResultMap\">\n select * from orders where order_id=#{id}\n</select>\n    \n<resultMap type=\"com.jourwon.pojo.Order\" id=\"orderResultMap\">\n    <!–用id属性来映射主键字段–>\n    <id property=\"id\" column=\"order_id\">\n    <!–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–>\n <result property =\"orderno\" column =\"order_no\"/>\n <result property=\"price\" column=\"order_price\" />\n</reslutMap>\n```\n\n\n\n## 6.Mybatis是否可以映射Enum枚举类？\n\n\n\nMybatis当然可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。\n\n\n\nTypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。\n\n\n\n## 7.#{}和${}的区别?\n\n\n\n- `#{}`是占位符，预编译处理；`${}`是拼接符，字符串替换，没有预编译处理。\n\n- Mybatis在处理`#{}`时，`#{}`传入参数是以字符串传入，会将SQL中的`#{}`替换为?号，调用PreparedStatement的set方法来赋值。\n\n- `#{}` 可以有效的防止SQL注入，提高系统安全性；`${}` 不能防止SQL 注入\n\n- `#{}` 的变量替换是在DBMS 中；`${}` 的变量替换是在 DBMS 外\n\n\n\n## 8.模糊查询like语句该怎么写?\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357357394-2529f66c-31e0-40ee-a2ae-8de2ab1c557e.png)\n\n\n\n1、 `’%${question}%’` 可能引起SQL注入，不推荐\n\n\n\n2、`\"%\"#{question}\"%\"`注意：因为#{…}解析成sql语句时候，会在变量外侧自动加单引号’ '，所以这里 % 需要使用双引号\" \"，不能使用单引号 ’ '，不然会查不到任何结果。\n\n\n\n3、 `CONCAT(’%’,#{question},’%’)` 使用CONCAT()函数，（推荐✨）\n\n\n\n4、 使用`bind`标签（不推荐）\n\n\n\n```xml\n<select id=\"listUserLikeUsername\" resultType=\"com.jourwon.pojo.User\">\n&emsp;&emsp;<bind name=\"pattern\" value=\"'%' + username + '%'\" />\n&emsp;&emsp;select id,sex,age,username,password from person where username LIKE #{pattern}\n</select>\n```\n\n\n\n## 9.Mybatis能执行一对一、一对多的关联查询吗？\n\n\n\n当然可以，不止支持一对一、一对多的关联查询，还支持多对多、多对一的关联查询。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357359284-434538a4-6424-4527-86f9-afe9977bd2aa.png)\n\n\n\n**一对一**`**<association>**`：比如订单和支付是一对一的关系，这种关联的实现：\n\n\n\n实体类:\n\n\n\n```java\npublic class Order {\n    private Integer orderId;\n    private String orderDesc;\n\n    /**\n     * 支付对象\n     */\n    private Pay pay;\n    //……\n}\n```\n\n\n\n结果映射\n\n\n\n```xml\n<!-- 订单resultMap -->\n<resultMap id=\"peopleResultMap\" type=\"cn.fighter3.entity.Order\">\n    <id property=\"orderId\" column=\"order_id\" />\n    <result property=\"orderDesc\" column=\"order_desc\"/>\n    <!--一对一结果映射-->\n    <association property=\"pay\" javaType=\"cn.fighter3.entity.Pay\">\n        <id column=\"payId\" property=\"pay_id\"/>\n        <result column=\"account\" property=\"account\"/>\n    </association>\n</resultMap>\n```\n\n\n\n查询就是普通的关联查\n\n\n\n```xml\n    <select id=\"getTeacher\" resultMap=\"getTeacherMap\" parameterType=\"int\">\n        select * from order o \n         left join pay p on o.order_id=p.order_id\n        where  o.order_id=#{orderId}\n    </select>\n```\n\n\n\n**一对多**：比如商品分类和商品，是一对多的关系。\n\n\n\n查询就是一个普通的关联查询\n\n\n\n```xml\n        <!-- 关联查询分类和产品表 -->\n        <select id=\"listCategory\" resultMap=\"categoryBean\">\n            select c.*, p.* from category_ c left join product_ p on c.id = p.cid\n        </select>\n```\n\n\n\n实体类\n\n\n\n```java\npublic class Category {\n    private int categoryId;\n    private String categoryName;\n  \n    /**\n    * 商品列表\n    **/\n    List<Product> products;\n    //……\n}\n```\n\n\n\n结果映射\n\n\n\n```xml\n        <resultMap type=\"Category\" id=\"categoryBean\">\n            <id column=\"categoryId\" property=\"category_id\" />\n            <result column=\"categoryName\" property=\"category_name\" />\n     \n            <!-- 一对多的关系 -->\n            <!-- property: 指的是集合属性的值, ofType：指的是集合中元素的类型 -->\n            <collection property=\"products\" ofType=\"Product\">\n                <id column=\"product_id\" property=\"productId\" />\n                <result column=\"productName\" property=\"productName\" />\n                <result column=\"price\" property=\"price\" />\n            </collection>\n        </resultMap>\n```\n\n\n\n那么多对一、多对多怎么实现呢？还是利用和，篇幅所限，这里就不展开了。\n\n\n\n## 10.Mybatis是否支持延迟加载？原理？\n\n\n\nMybatis支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。\n\n\n\n它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。\n\n\n\n当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。\n\n\n\n## 11.如何获取生成的主键?\n\n\n\n新增标签中添加：keyProperty=\" ID \"  即可\n\n\n\n```xml\n<insert id=\"insert\" useGeneratedKeys=\"true\" keyProperty=\"userId\" >\n    insert into user( \n    user_name, user_password, create_time) \n    values(#{userName}, #{userPassword} , #{createTime, jdbcType= TIMESTAMP})\n</insert>\n```\n\n\n\n这时候就可以完成回填主键\n\n\n\n```xml\nmapper.insert(user);\nuser.getId;\n```\n\n\n\n## 12.MyBatis支持动态SQL吗？\n\n\n\nMyBatis中有一些支持动态SQL的标签，它们的原理是使用OGNL从SQL参数对象中计算表达式的值，根据表达式的值动态拼接SQL，以此来完成动态SQL的功能。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357369188-5d4e1cf8-b88d-4163-898f-501ddfed8c29.png)\n\n\n\n**if**：根据条件来组成where子句\n\n\n\n```xml\n<select id=\"findActiveBlogWithTitleLike\"\n     resultType=\"Blog\">\n  SELECT * FROM BLOG\n  WHERE state = ‘ACTIVE’\n  <if test=\"title != null\">\n    AND title like #{title}\n  </if>\n</select>\n```\n\n\n\n**choose (when, otherwise)**：这个和Java 中的 switch 语句有点像\n\n\n\n```xml\n<select id=\"findActiveBlogLike\"\n     resultType=\"Blog\">\n  SELECT * FROM BLOG WHERE state = ‘ACTIVE’\n  <choose>\n    <when test=\"title != null\">\n      AND title like #{title}\n    </when>\n    <when test=\"author != null and author.name != null\">\n      AND author_name like #{author.name}\n    </when>\n    <otherwise>\n      AND featured = 1\n    </otherwise>\n  </choose>\n</select>\n```\n\n\n\n**trim (where, set)**：\n\n\n\n```xml\n<select id=\"findActiveBlogLike\"\n     resultType=\"Blog\">\n  SELECT * FROM BLOG\n  <where>\n    <if test=\"state != null\">\n         state = #{state}\n    </if>\n    <if test=\"title != null\">\n        AND title like #{title}\n    </if>\n    <if test=\"author != null and author.name != null\">\n        AND author_name like #{author.name}\n    </if>\n  </where>\n</select>\n```\n\n\n\n： 可以用在动态更新的时候\n\n\n\n```xml\n<update id=\"updateAuthorIfNecessary\">\n  update Author\n    <set>\n      <if test=\"username != null\">username=#{username},</if>\n      <if test=\"password != null\">password=#{password},</if>\n      <if test=\"email != null\">email=#{email},</if>\n      <if test=\"bio != null\">bio=#{bio}</if>\n    </set>\n  where id=#{id}\n</update>\n```\n\n\n\n：可以用在所有的查询条件都是动态的情况\n\n\n\n**foreach**：看到名字就知道了，这个是用来循环的，可以对集合进行遍历\n\n\n\n```xml\n<select id=\"selectPostIn\" resultType=\"domain.blog.Post\">\n  SELECT *\n  FROM POST P\n  <where>\n    <foreach item=\"item\" index=\"index\" collection=\"list\"\n        open=\"ID in (\" separator=\",\" close=\")\" nullable=\"true\">\n          #{item}\n    </foreach>\n  </where>\n</select>\n```\n\n\n\n## 13.MyBatis如何执行批量操作？\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357372197-9eddc769-670b-4c3b-97ea-14234d952607.png)\n\n\n\n**第一种方法：使用foreach标签**\n\n\n\nforeach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主要有item，index，collection，open，separator，close。\n\n\n\n- item： 表示集合中每一个元素进行迭代时的别名，随便起的变量名；\n\n- index：指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；\n\n- open：表示该语句以什么开始，常用“(”；\n\n- separator ：表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；\n\n- close：表示以什么结束，常用“)”。\n\n\n\n在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有以下3种情况：\n\n\n\n1、如果传入的是单参数且参数类型是一个List的时候，collection属性值为list\n\n\n\n2、如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array\n\n\n\n3、如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的， map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key\n\n\n\n看看批量保存的两种用法：\n\n\n\n```xml\n<!-- MySQL下批量保存，可以foreach遍历 mysql支持values(),(),()语法 --> //推荐使用\n<insert id=\"addEmpsBatch\">\n    INSERT INTO emp(ename,gender,email,did)\n    VALUES\n    <foreach collection=\"emps\" item=\"emp\" separator=\",\">\n        (#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})\n    </foreach>\n</insert>\n<!-- 这种方式需要数据库连接属性allowMutiQueries=true的支持\n 如jdbc.url=jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true -->  \n<insert id=\"addEmpsBatch\">\n    <foreach collection=\"emps\" item=\"emp\" separator=\";\">                                 \n        INSERT INTO emp(ename,gender,email,did)\n        VALUES(#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})\n    </foreach>\n</insert>\n```\n\n\n\n**第二种方法：使用ExecutorType.BATCH**\n\n\n\nMybatis内置的ExecutorType有3种，默认为simple，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优；但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，在某些情况下不符合业务的需求。\n\n\n\n具体用法如下：\n\n\n\n```java\n//批量保存方法测试\n@Test  \npublic void testBatch() throws IOException{\n    SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();\n    //可以执行批量操作的sqlSession\n    SqlSession openSession = sqlSessionFactory.openSession(ExecutorType.BATCH);\n\n    //批量保存执行前时间\n    long start = System.currentTimeMillis();\n    try {\n        EmployeeMapper mapper = openSession.getMapper(EmployeeMapper.class);\n        for (int i = 0; i < 1000; i++) {\n            mapper.addEmp(new Employee(UUID.randomUUID().toString().substring(0, 5), \"b\", \"1\"));\n        }\n\n        openSession.commit();\n        long end = System.currentTimeMillis();\n        //批量保存执行后的时间\n        System.out.println(\"执行时长\" + (end - start));\n        //批量 预编译sql一次==》设置参数==》10000次==》执行1次   677\n        //非批量  （预编译=设置参数=执行 ）==》10000次   1121\n\n    } finally {\n        openSession.close();\n    }\n}\n```\n\n\n\nmapper和mapper.xml如下\n\n\n\n```java\npublic interface EmployeeMapper {   \n    //批量保存员工\n    Long addEmp(Employee employee);\n}\n```\n\n\n\n```xml\n<mapper namespace=\"com.jourwon.mapper.EmployeeMapper\"\n     <!--批量保存员工 -->\n    <insert id=\"addEmp\">\n        insert into employee(lastName,email,gender)\n        values(#{lastName},#{email},#{gender})\n    </insert>\n</mapper>\n```\n\n\n\n## 14.说说Mybatis的一级、二级缓存？\n\n\n\n1、一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为SqlSession，各个SqlSession之间的缓存相互隔离，当 Session flush 或 close 之后，该 SqlSession 中的所有 Cache 就将清空，MyBatis默认打开一级缓存。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357375860-44815fcb-93c5-4c96-9ad8-6265772ba2e9.png)\n\n\n\n2、二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同之处在于其存储作用域为 Mapper(Namespace)，可以在多个SqlSession之间共享，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357377683-2b9b9e61-6247-4a13-80d9-733a760fd94d.png)\n\n\n\n## 15.能说说MyBatis的工作原理吗？\n\n\n\n我们已经大概知道了MyBatis的工作流程，按工作原理，可以分为两大步：`生成会话工厂`、`会话运行`。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357380006-2186012c-289b-429d-8b26-f06e958832d0.png)\n\n\n\nMyBatis是一个成熟的框架，篇幅限制，这里抓大放小，来看看它的主要工作流程。\n\n\n\n**构建会话工厂**\n\n\n\n构造会话工厂也可以分为两步：\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357382815-f146adc5-c1ad-4952-9ac1-f144d7f16a30.png)\n\n\n\n**1、获取配置**\n\n\n\n获取配置这一步经过了几步转化，最终由生成了一个配置类Configuration实例，这个配置类实例非常重要，主要作用包括：\n\n\n\n-  读取配置文件，包括基础配置文件和映射文件 \n\n-  初始化基础配置，比如MyBatis的别名，还有其它的一些重要的类对象，像插件、映射器、ObjectFactory等等 \n\n-  提供一个单例，作为会话工厂构建的重要参数 \n\n-  它的构建过程也会初始化一些环境变量，比如数据源 \n\n```java\n public SqlSessionFactory build(Reader reader, String environment, Properties properties) {\n        SqlSessionFactory var5;\n        //省略异常处理\n            //xml配置构建器\n            XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);\n            //通过转化的Configuration构建SqlSessionFactory\n            var5 = this.build(parser.parse());\n }\n```\n\n \n\n\n\n**2、构建SqlSessionFactory**\n\n\n\nSqlSessionFactory只是一个接口，构建出来的实际上是它的实现类的实例，一般我们用的都是它的实现类DefaultSqlSessionFactory\n\n\n\n```java\n    public SqlSessionFactory build(Configuration config) {\n        return new DefaultSqlSessionFactory(config);\n    }\n```\n\n\n\n**会话运行**\n\n\n\n会话运行是MyBatis最复杂的部分，它的运行离不开四大组件的配合：\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357386735-529aa023-5211-457d-b253-ce67038bcb6d.png)\n\n\n\n**1、Executor（执行器）**\n\n\n\nExecutor起到了至关重要的作用，SqlSession只是一个门面，相当于客服，真正干活的是是Executor，就像是默默无闻的工程师。它提供了相应的查询和更新方法，以及事务方法。\n\n\n\n```java\nEnvironment environment = this.configuration.getEnvironment();\nTransactionFactory transactionFactory = this.getTransactionFactoryFromEnvironment(environment);\ntx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n//通过Configuration创建executor\nExecutor executor = this.configuration.newExecutor(tx, execType);\nvar8 = new DefaultSqlSession(this.configuration, executor, autoCommit);\n```\n\n\n\n**2、StatementHandler（数据库会话器）**\n\n\n\nStatementHandler，顾名思义，处理数据库会话的。我们以SimpleExecutor为例，看一下它的查询方法，先生成了一个StatementHandler实例，再拿这个handler去执行query。\n\n\n\n```java\n     public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n        Statement stmt = null;\n\n        List var9;\n        try {\n            Configuration configuration = ms.getConfiguration();\n            StatementHandler handler = configuration.newStatementHandler(this.wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n            stmt = this.prepareStatement(handler, ms.getStatementLog());\n            var9 = handler.query(stmt, resultHandler);\n        } finally {\n            this.closeStatement(stmt);\n        }\n\n        return var9;\n    }\n```\n\n\n\n再以最常用的PreparedStatementHandler看一下它的query方法，其实在上面的`prepareStatement`已经对参数进行了预编译处理，到了这里，就直接执行sql，使用ResultHandler处理返回结果。\n\n\n\n```java\n    public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n        PreparedStatement ps = (PreparedStatement)statement;\n        ps.execute();\n        return this.resultSetHandler.handleResultSets(ps);\n    }\n```\n\n\n\n**3、ParameterHandler （参数处理器）**\n\n\n\nPreparedStatementHandler里对sql进行了预编译处理\n\n\n\n```java\n    public void parameterize(Statement statement) throws SQLException {\n        this.parameterHandler.setParameters((PreparedStatement)statement);\n    }\n```\n\n\n\n这里用的就是ParameterHandler，setParameters的作用就是设置预编译SQL语句的参数。\n\n\n\n里面还会用到typeHandler类型处理器，对类型进行处理。\n\n\n\n```java\npublic interface ParameterHandler {\n    Object getParameterObject();\n\n    void setParameters(PreparedStatement var1) throws SQLException;\n}\n```\n\n\n\n**4、ResultSetHandler（结果处理器）**\n\n\n\n我们前面也看到了，最后的结果要通过ResultSetHandler来进行处理，handleResultSets这个方法就是用来包装结果集的。Mybatis为我们提供了一个DefaultResultSetHandler，通常都是用这个实现类去进行结果的处理的。\n\n\n\n```java\npublic interface ResultSetHandler {\n    <E> List<E> handleResultSets(Statement var1) throws SQLException;\n\n    <E> Cursor<E> handleCursorResultSets(Statement var1) throws SQLException;\n\n    void handleOutputParameters(CallableStatement var1) throws SQLException;\n}\n```\n\n\n\n它会使用typeHandle处理类型，然后用ObjectFactory提供的规则组装对象，返回给调用者。\n\n\n\n整体上总结一下会话运行：\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357389841-4e99d9e8-50cb-424c-8dbe-fb950c916ad3.png)\n\n\n\nPS：以上源码分析比较简单，在真正的源码大佬面前可能过不了关，有条件的建议Debug一下MyBatis的源码。\n\n\n\n我们最后把整个的工作流程串联起来，简单总结一下：\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357391815-8a28eda7-579d-4b2b-aa1f-45837e72004f.png)\n\n\n\n1、读取 MyBatis 配置文件——mybatis-config.xml 、加载映射文件——映射文件即 SQL 映射文件，文件中配置了操作数据库的 SQL 语句。最后生成一个配置对象。\n\n\n\n2、构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。\n\n\n\n3、创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。\n\n\n\n4、Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。\n\n\n\n5、StatementHandler：数据库会话器，串联起参数映射的处理和运行结果映射的处理。\n\n\n\n6、参数处理：对输入参数的类型进行处理，并预编译。\n\n\n\n7、结果处理：对返回结果的类型进行处理，根据对象映射规则，返回相应的对象。\n\n\n\n## 16.MyBatis的功能架构是什么样的？\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357394480-99d32015-c33a-4257-8eae-6088e11ce43a.png)\n\n\n\n我们一般把Mybatis的功能架构分为三层：\n\n\n\n1、API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。\n\n\n\n2、数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。\n\n\n\n3、基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。\n\n\n\n## 17.为什么Mapper接口不需要实现类？\n\n\n\n四个字回答：**动态代理**，我们来看一下获取Mapper的过程：\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357396643-40b34777-a89d-486e-8936-ccdcf689727a.png)\n\n\n\n**获取Mapper**\n\n\n\n我们都知道定义的Mapper接口是没有实现类的，Mapper映射其实是通过**动态代理**实现的。\n\n\n\n```plain\nBlogMapper mapper = session.getMapper(BlogMapper.class);\n```\n\n\n\n七拐八绕地进去看一下，发现获取Mapper的过程，需要先获取MapperProxyFactory——Mapper代理工厂。\n\n\n\n```java\n    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n        MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory)this.knownMappers.get(type);\n        if (mapperProxyFactory == null) {\n            throw new BindingException(\"Type \" + type + \" is not known to the MapperRegistry.\");\n        } else {\n            try {\n                return mapperProxyFactory.newInstance(sqlSession);\n            } catch (Exception var5) {\n                throw new BindingException(\"Error getting mapper instance. Cause: \" + var5, var5);\n            }\n        }\n    }\n```\n\n\n\n```java\npublic class MapperProxyFactory<T> {\n    private final Class<T> mapperInterface;\n    ……\n    protected T newInstance(MapperProxy<T> mapperProxy) {\n        return Proxy.newProxyInstance(this.mapperInterface.getClassLoader(), new Class[]{this.mapperInterface}, mapperProxy);\n    }\n\n    public T newInstance(SqlSession sqlSession) {\n        MapperProxy<T> mapperProxy = new MapperProxy(sqlSession, this.mapperInterface, this.methodCache);\n        return this.newInstance(mapperProxy);\n    }\n}\n```\n\n\n\n这里可以看到动态代理对接口的绑定，它的作用就是生成动态代理对象（占位），而代理的方法被放到了MapperProxy中。\n\n\n\nMapperProxy里，通常会生成一个MapperMethod对象，它是通过cachedMapperMethod方法对其进行初始化的，然后执行excute方法。\n\n\n\n```java\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        try {\n            return Object.class.equals(method.getDeclaringClass()) ? method.invoke(this, args) : this.cachedInvoker(method).invoke(proxy, method, args, this.sqlSession);\n        } catch (Throwable var5) {\n            throw ExceptionUtil.unwrapThrowable(var5);\n        }\n    }\n```\n\n\n\n**MapperMethod**\n\n\n\nMapperMethod里的excute方法，会真正去执行sql。这里用到了命令模式，其实绕一圈，最终它还是通过SqlSession的实例去运行对象的sql。\n\n\n\n```java\n  public Object execute(SqlSession sqlSession, Object[] args) {\n        Object result;\n        Object param;\n        ……\n        case SELECT:\n            if (this.method.returnsVoid() && this.method.hasResultHandler()) {\n                this.executeWithResultHandler(sqlSession, args);\n                result = null;\n            } else if (this.method.returnsMany()) {\n                result = this.executeForMany(sqlSession, args);\n            } else if (this.method.returnsMap()) {\n                result = this.executeForMap(sqlSession, args);\n            } else if (this.method.returnsCursor()) {\n                result = this.executeForCursor(sqlSession, args);\n            } else {\n                param = this.method.convertArgsToSqlCommandParam(args);\n                result = sqlSession.selectOne(this.command.getName(), param);\n                if (this.method.returnsOptional() && (result == null || !this.method.getReturnType().equals(result.getClass()))) {\n                    result = Optional.ofNullable(result);\n                }\n            }\n            break;\n           ……\n    }\n```\n\n\n\n**MapperProxy**\n\n\n\n**MapperProxyFactory**\n\n\n\nMapperProxyFactory的作用是生成MapperProxy（Mapper代理对象）。\n\n\n\n## 18.Mybatis都有哪些Executor执行器？\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357400608-ee02532b-8bde-4fb6-8ceb-ddc252c0d35c.png)\n\n\n\nMybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。\n\n\n\n**SimpleExecutor**：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。\n\n\n\n**ReuseExecutor**：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map<String, Statement>内，供下一次使用。简言之，就是重复使用Statement对象。\n\n\n\n**BatchExecutor**：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。\n\n\n\n作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。\n\n\n\n**Mybatis中如何指定使用哪一种Executor执行器？**\n\n\n\n在Mybatis配置文件中，在设置（settings）可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数，如SqlSession openSession(ExecutorType execType)。\n\n\n\n配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新。\n\n\n\n## 19.说说Mybatis的插件运行原理，如何编写一个插件？\n\n\n\n**插件的运行原理？**\n\n\n\nMybatis会话的运行需要ParameterHandler、ResultSetHandler、StatementHandler、Executor这四大对象的配合，插件的原理就是在这四大对象调度的时候，插入一些我我们自己的代码。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357402568-5df1cdae-02ae-4299-aab1-4c1d96ac21f8.png)\n\n\n\nMybatis使用JDK的动态代理，为目标对象生成代理对象。它提供了一个工具类`Plugin`，实现了`InvocationHandler`接口。\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357405086-4aebdf9c-1c7e-4b50-9c91-697d3516618d.png)\n\n\n\n使用`Plugin`生成代理对象，代理对象在调用方法的时候，就会进入invoke方法，在invoke方法中，如果存在签名的拦截方法，插件的intercept方法就会在这里被我们调用，然后就返回结果。如果不存在签名方法，那么将直接反射调用我们要执行的方法。\n\n\n\n**如何编写一个插件？**\n\n\n\n我们自己编写MyBatis 插件，只需要实现拦截器接口 Interceptor (org.apache.ibatis. plugin Interceptor ），在实现类中对拦截对象和方法进行处理。\n\n\n\n实现Mybatis的Interceptor接口并重写intercept()方法\n\n\n\n这里我们只是在目标对象执行目标方法的前后进行了打印；\n\n\n\n```java\npublic class MyInterceptor implements Interceptor {\n    Properties props=null;\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        System.out.println(\"before……\");\n        //如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法\n        // 如果不是它就会调用下个插件代理对象的invoke方法\n        Object obj=invocation.proceed();\n        System.out.println(\"after……\");\n        return obj;\n    }\n}\n```\n\n\n\n然后再给插件编写注解，确定要拦截的对象，要拦截的方法\n\n\n\n```java\n@Intercepts({@Signature(\n        type = Executor.class,  //确定要拦截的对象\n        method = \"update\",        //确定要拦截的方法\n        args = {MappedStatement.class,Object.class}   //拦截方法的参数\n)})\npublic class MyInterceptor implements Interceptor {\n    Properties props=null;\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        System.out.println(\"before……\");\n        //如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法\n        // 如果不是它就会调用下个插件代理对象的invoke方法\n        Object obj=invocation.proceed();\n        System.out.println(\"after……\");\n        return obj;\n    }\n}\n```\n\n\n\n最后，再MyBatis配置文件里面配置插件\n\n\n\n```xml\n<plugins>\n    <plugin interceptor=\"xxx.MyPlugin\">\n       <property name=\"dbType\",value=\"mysql\"/>\n    </plugin>\n</plugins>\n```\n\n\n\n## 20.MyBatis是如何进行分页的？分页插件的原理是什么？\n\n\n\n**MyBatis是如何分页的？**\n\n\n\nMyBatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。\n\n\n\n**分页插件的原理是什么？**\n\n\n\n分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，拦截Executor的query方法\n\n\n\n在执行查询的时候，拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。\n\n\n\n举例：select  *from student，拦截sql后重写为：select t.* from (select * from student) t limit 0, 10\n\n\n\n可以看一下一个大概的MyBatis通用分页拦截器：\n\n\n\n![img](大厂面试之Mybatis篇.assets/1676357408088-8ee7d334-a6d9-477b-ad1c-28617b6ba499.png)","tags":["我要进大厂","面试","Mybatis"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之RPC篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之RPC篇/","content":"\n\n\n## 1.何为 RPC?\n\n\n\n**RPC（Remote Procedure Call）** 即远程过程调用，通过名字我们就能看出 RPC 关注的是远程调用而非本地调用。\n\n\n\n**为什么要 RPC ？** 因为，两个不同的服务器上的服务提供的方法不在一个内存空间，所以，需要通过网络编程才能传递方法调用所需要的参数。并且，方法调用的结果也需要通过网络编程来接收。但是，如果我们自己手动网络编程来实现这个调用过程的话工作量是非常大的，因为，我们需要考虑底层传输方式（TCP还是UDP）、序列化方式等等方面。\n\n\n\n**RPC 能帮助我们做什么呢？** 简单来说，通过 RPC 可以帮助我们调用远程计算机上某个服务的方法，这个过程就像调用本地方法一样简单。并且！我们不需要了解底层网络编程的具体细节。\n\n\n\n举个例子：两个不同的服务 A、B 部署在两台不同的机器上，服务 A 如果想要调用服务 B 中的某个方法的话就可以通过 RPC 来做。\n\n\n\n一言蔽之：**RPC 的出现就是为了让你调用远程方法像调用本地方法一样简单。**\n\n\n\n## 2.RPC 的原理是什么?\n\n\n\n为了能够帮助小伙伴们理解 RPC 原理，我们可以将整个 RPC的 核心功能看作是下面👇 6 个部分实现的：\n\n\n\n1. **客户端（服务消费端）** ：调用远程方法的一端。\n\n1. **客户端 Stub（桩）** ： 这其实就是一代理类。代理类主要做的事情很简单，就是把你调用方法、类、方法参数等信息传递到服务端。\n\n1. **网络传输** ： 网络传输就是你要把你调用的方法的信息比如说参数啊这些东西传输到服务端，然后服务端执行完之后再把返回结果通过网络传输给你传输回来。网络传输的实现方式有很多种比如最近基本的 Socket或者性能以及封装更加优秀的 Netty（推荐）。\n\n1. **服务端 Stub（桩）** ：这个桩就不是代理类了。我觉得理解为桩实际不太好，大家注意一下就好。这里的服务端 Stub 实际指的就是接收到客户端执行方法的请求后，去指定对应的方法然后返回结果给客户端的类。\n\n1. **服务端（服务提供端）** ：提供远程方法的一端。\n\n\n\n具体原理图如下，后面我会串起来将整个RPC的过程给大家说一下。\n\n\n\n![img](大厂面试之RPC篇.assets/1676359321212-e8d19790-57db-4640-be77-f9bf69f72708.png)\n\n\n\n1. 服务消费端（client）以本地调用的方式调用远程服务；\n\n1. 客户端 Stub（client stub） 接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体（序列化）：`RpcRequest`；\n\n1. 客户端 Stub（client stub） 找到远程服务的地址，并将消息发送到服务提供端；\n\n1. 服务端 Stub（桩）收到消息将消息反序列化为Java对象: `RpcRequest`；\n\n1. 服务端 Stub（桩）根据`RpcRequest`中的类、方法、方法参数等信息调用本地的方法；\n\n1. 服务端 Stub（桩）得到方法执行结果并将组装成能够进行网络传输的消息体：`RpcResponse`（序列化）发送至消费方；\n\n1. 客户端 Stub（client stub）接收到消息并将消息反序列化为Java对象:`RpcResponse` ，这样也就得到了最终结果。over!\n\n\n\n相信小伙伴们看完上面的讲解之后，已经了解了 RPC 的原理。\n\n\n\n虽然篇幅不多，但是基本把 RPC 框架的核心原理讲清楚了！另外，对于上面的技术细节，我会在后面的章节介绍到。\n\n\n\n**最后，对于 RPC 的原理，希望小伙伴不单单要理解，还要能够自己画出来并且能够给别人讲出来。因为，在面试中这个问题在面试官问到 RPC 相关内容的时候基本都会碰到。**\n\n\n\n## 3.有哪些常见的 RPC 框架？\n\n\n\n我们这里说的 RPC 框架指的是可以让客户端直接调用服务端方法，就像调用本地方法一样简单的框架，比如我下面介绍的 Dubbo、Motan、gRPC这些。 如果需要和 HTTP 协议打交道，解析和封装 HTTP 请求和响应。这类框架并不能算是“RPC 框架”，比如Feign。\n\n\n\n### Dubbo\n\n\n\n![img](大厂面试之RPC篇.assets/1676359323547-5e78ffa8-e6e0-4390-84cd-a5c9a3c69bf9.png)\n\n\n\nApache Dubbo 是一款微服务框架，为大规模微服务实践提供高性能 RPC 通信、流量治理、可观测性等解决方案， 涵盖 Java、Golang 等多种语言 SDK 实现。\n\n\n\nDubbo 提供了从服务定义、服务发现、服务通信到流量管控等几乎所有的服务治理能力，支持 Triple 协议（基于 HTTP/2 之上定义的下一代 RPC 通信协议）、应用级服务发现、Dubbo Mesh （Dubbo3 赋予了很多云原生友好的新特性）等特性。\n\n\n\n![img](大厂面试之RPC篇.assets/1676359326406-60142e7e-1706-4934-a7af-a0efe46e0e00.png)\n\n\n\nDubbo 是由阿里开源，后来加入了 Apache 。正式由于 Dubbo 的出现，才使得越来越多的公司开始使用以及接受分布式架构。\n\n\n\nDubbo 算的是比较优秀的国产开源项目了，它的源码也是非常值得学习和阅读的！\n\n\n\n- Github ：[https://github.com/apache/incubator-dubboopen in new window](https://github.com/apache/incubator-dubbo)\n\n- 官网：https://dubbo.apache.org/zh/\n\n\n\n### Motan\n\n\n\nMotan 是新浪微博开源的一款 RPC 框架，据说在新浪微博正支撑着千亿次调用。不过笔者倒是很少看到有公司使用，而且网上的资料也比较少。\n\n\n\n很多人喜欢拿 Motan 和 Dubbo 作比较，毕竟都是国内大公司开源的。笔者在查阅了很多资料，以及简单查看了其源码之后发现：**Motan 更像是一个精简版的 Dubbo，可能是借鉴了 Dubbo 的思想，Motan 的设计更加精简，功能更加纯粹。**\n\n\n\n不过，我不推荐你在实际项目中使用 Motan。如果你要是公司实际使用的话，还是推荐 Dubbo ，其社区活跃度以及生态都要好很多。\n\n\n\n- 从 Motan 看 RPC 框架设计：[http://kriszhang.com/motan-rpc-impl/open in new window](http://kriszhang.com/motan-rpc-impl/)\n\n- Motan 中文文档：[https://github.com/weibocom/motan/wiki/zh_overviewopen in new window](https://github.com/weibocom/motan/wiki/zh_overview)\n\n\n\n### gRPC\n\n\n\n![img](大厂面试之RPC篇.assets/1676359329007-b40694c6-d064-445f-a6eb-c4137e676fec.png)\n\n\n\ngRPC 是 Google 开源的一个高性能、通用的开源 RPC 框架。其由主要面向移动应用开发并基于 HTTP/2 协议标准而设计（支持双向流、消息头压缩等功能，更加节省带宽），基于 ProtoBuf 序列化协议开发，并且支持众多开发语言。\n\n\n\n**何谓 ProtoBuf？** [ProtoBuf（ Protocol Buffer）open in new window](https://github.com/protocolbuffers/protobuf) 是一种更加灵活、高效的数据格式，可用于通讯协议、数据存储等领域，基本支持所有主流编程语言且与平台无关。不过，通过 ProtoBuf 定义接口和数据类型还挺繁琐的，这是一个小问题。\n\n\n\n![img](大厂面试之RPC篇.assets/1676359332798-7c5145ad-685a-4a79-8586-f6517c538272.png)\n\n\n\n不得不说，gRPC 的通信层的设计还是非常优秀的，[Dubbo-go 3.0open in new window](https://dubbogo.github.io/) 的通信层改进主要借鉴了 gRPC。\n\n\n\n不过，gRPC 的设计导致其几乎没有服务治理能力。如果你想要解决这个问题的话，就需要依赖其他组件比如腾讯的 PolarisMesh（北极星）了。\n\n\n\n- Github：[https://github.com/grpc/grpcopen in new window](https://github.com/grpc/grpc)\n\n- 官网：[https://grpc.io/open in new window](https://grpc.io/)\n\n\n\n### Thrift\n\n\n\nApache Thrift 是 Facebook 开源的跨语言的 RPC 通信框架，目前已经捐献给 Apache 基金会管理，由于其跨语言特性和出色的性能，在很多互联网公司得到应用，有能力的公司甚至会基于 thrift 研发一套分布式服务框架，增加诸如服务注册、服务发现等功能。\n\n\n\n`Thrift`支持多种不同的**编程语言**，包括`C++`、`Java`、`Python`、`PHP`、`Ruby`等（相比于 gRPC 支持的语言更多 ）。\n\n\n\n- 官网：[https://thrift.apache.org/open in new window](https://thrift.apache.org/)\n\n- Thrift 简单介绍：[https://www.jianshu.com/p/8f25d057a5a9open in new window](https://www.jianshu.com/p/8f25d057a5a9)\n\n\n\n### 总结\n\n\n\ngRPC 和 Thrift 虽然支持跨语言的 RPC 调用，但是它们只提供了最基本的 RPC 框架功能，缺乏一系列配套的服务化组件和服务治理功能的支撑。\n\n\n\nDubbo 不论是从功能完善程度、生态系统还是社区活跃度来说都是最优秀的。而且，Dubbo在国内有很多成功的案例比如当当网、滴滴等等，是一款经得起生产考验的成熟稳定的 RPC 框架。最重要的是你还能找到非常多的 Dubbo 参考资料，学习成本相对也较低。\n\n\n\n下图展示了 Dubbo 的生态系统。\n\n\n\n![img](大厂面试之RPC篇.assets/1676359335613-637723c9-aef6-4bd1-abb7-d8cae1706688.png)\n\n\n\nDubbo 也是 Spring Cloud Alibaba 里面的一个组件。\n\n\n\n![img](大厂面试之RPC篇.assets/1676359337396-777a75f4-72e2-45ae-a339-9dba55db95b5.png)\n\n\n\n但是，Dubbo 和 Motan 主要是给 Java 语言使用。虽然，Dubbo 和 Motan 目前也能兼容部分语言，但是不太推荐。如果需要跨多种语言调用的话，可以考虑使用 gRPC。\n\n\n\n综上，如果是 Java 后端技术栈，并且你在纠结选择哪一种 RPC 框架的话，我推荐你考虑一下 Dubbo。\n\n","tags":["我要进大厂","面试","RPC"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之Netty篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Netty篇/","content":"\n## 1. Netty是什么，它的主要特点是什么？\n\n\n\n`Netty`是一个高性能、异步事件驱动的网络编程框架，它基于`NIO`技术实现，提供了简单易用的 `API`，用于构建各种类型的网络应用程序。其主要特点包括：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838097661-896d68a7-1860-460f-ad92-c0017cde09be.png)\n\n\n\n- 高性能：`Netty`使用异步`I/O`，非阻塞式处理方式，可处理大量并发连接，提高系统性能。\n- 易于使用：`Netty`提供了高度抽象的`API`，可以快速构建各种类型的网络应用程序，如`Web`服务、消息推送、实时游戏等。\n- 灵活可扩展：`Netty`提供了许多可插拔的组件，可以根据需要自由组合，以满足各种业务场景。\n\n\n\n## 2. Netty 应用场景了解么？\n\n\n\n`Netty` 在网络编程中应用非常广泛，常用于开发高性能、高吞吐量、低延迟的网络应用程序，应用场景如下：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838100010-77efe7e6-6031-4816-b54c-308762b0afcf.png)\n\n\n\n- 服务器间高性能通信，比如`RPC、HTTP、WebSocket`等协议的实现\n- 分布式系统的消息传输，比如`Kafka、ActiveMQ`等消息队列\n- 游戏服务器，支持高并发的游戏服务端开发\n- 实时流数据的处理，比如音视频流处理、实时数据传输等\n- 其他高性能的网络应用程序开发\n\n\n\n**阿里分布式服务框架 Dubbo， 消息中间件RocketMQ都是使用 Netty 作为通讯的基础。**\n\n\n\n## 3. Netty 核心组件有哪些？分别有什么作用？\n\n\n\nNetty的核心组件包括以下几个部分：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838102324-63a1b057-4168-4191-9e60-0d918bba8186.png)\n\n\n\n- Channel：用于网络通信的通道，可以理解为`Java NIO`中的`SocketChannel`。\n- ChannelFuture：异步操作的结果，可以添加监听器以便在操作完成时得到通知。\n- EventLoop：事件循环器，用于处理所有`I/O`事件和请求。`Netty`的`I/O`操作都是异步非阻塞的，它们由`EventLoop`处理并以事件的方式触发回调函数。\n- EventLoopGroup：由一个或多个`EventLoop`组成的组，用于处理所有的`Channel`的`I/O`操作，可以将其看作是一个线程池。\n- ChannelHandler：用于处理`Channel`上的`I/O`事件和请求，包括编码、解码、业务逻辑等，可以理解为`NIO`中的`ChannelHandler`。\n- ChannelPipeline：由一组`ChannelHandler`组成的管道，用于处理`Channel`上的所有`I/O`事件和请求，`Netty`中的数据处理通常是通过将一个数据包装成一个`ByteBuf`对象，并且通过一个 `ChannelPipeline`来传递处理，以达到业务逻辑与网络通信的解耦。\n- ByteBuf：`Netty`提供的字节容器，可以对字节进行高效操作，包括读写、查找等。\n- Codec：用于在`ChannelPipeline`中进行数据编码和解码的组件，如字符串编解码器、对象序列化编解码器等。\n\n\n\n这些核心组件共同构成了Netty的核心架构，可以帮助开发人员快速地实现高性能、高并发的网络应用程序。\n\n\n\n## 4. Netty的线程模型是怎样的？如何优化性能？\n\n\n\n`Netty`的线程模型是基于事件驱动的`Reactor`模型，它使用少量的线程来处理大量的连接和数据传输，以提高性能和吞吐量。在`Netty`中，每个连接都分配了一个单独的`EventLoop`线程，该线程负责处理所有与该连接相关的事件，包括数据传输、握手和关闭等。多个连接可以共享同一个`EventLoop`线程，从而减少线程的创建和销毁开销，提高资源利用率。\n\n\n\n为了进一步优化性能，`Netty`提供了一些线程模型和线程池配置选项，以适应不同的应用场景和性能要求。例如，可以使用不同的`EventLoopGroup`实现不同的线程模型，如**单线程模型、多线程模型和主从线程模型**等。同时，**还可以设置不同的线程池参数，如线程数、任务队列大小、线程优先级**等，以调整线程池的工作负载和性能表现。\n\n\n\n在实际使用中，**还可以通过优化网络协议、数据结构、业务逻辑等方面来提高Netty的性能**。例如，可以使用零拷贝技术避免数据拷贝，使用内存池减少内存分配和回收的开销，避免使用阻塞IO和同步操作等，从而提高应用的吞吐量和性能表现。\n\n\n\n## 5. EventloopGroup了解么?和 EventLoop 啥关系?\n\n\n\n`EventLoopGroup`和`EventLoop`是 `Netty` 中两个重要的组件。\n\n\n\n`EventLoopGroup` 表示一组`EventLoop`，它们共同负责处理客户端连接的`I/O`事件。在 `Netty`中，通常会为不同的 `I/O` 操作创建不同的 `EventLoopGroup`。\n\n\n\n`EventLoop` 是`Netty` 中的一个核心组件，它代表了一个不断循环的`I/O` 线程。它负责处理一个或多个 `Channel` 的 `I/O` 操作，包括数据的读取、写入和状态的更改。一个`EventLoop`可以处理多个`Channel`，而一个`Channel` 只会被一个 `EventLoop`所处理。\n\n\n\n在 `Netty` 中，一个应用程序通常会创建两个`EventLoopGroup`：一个用于处理客户端连接，一个用于处理服务器端连接。当客户端连接到服务器时，服务器端的`EventLoopGroup`会将连接分配给一个`EventLoop` 进行处理，以便保证所有的`I/O` 操作都能得到及时、高效地处理。\n\n\n\n## 6. Netty 的零拷贝了解么？\n\n\n\n零拷贝`（Zero Copy）`是一种技术，可以避免在数据传输过程中对数据的多次拷贝操作，从而提高数据传输的效率和性能。在网络编程中，零拷贝技术可以减少数据在内核空间和用户空间之间的拷贝次数，从而提高数据传输效率和降低 `CPU` 的使用率。\n\n\n\n`Netty`通过使用 `Direct Memory`和`FileChannel` 的方式实现零拷贝。当应用程序将数据写入 `Channel` 时，`Netty` 会将数据直接写入到内存缓冲区中，然后通过操作系统提供的 `sendfile` 或者`writev` 等零拷贝技术，将数据从内存缓冲区中传输到网络中，从而避免了中间的多次拷贝操作。同样，当应用程序从 `Channel` 中读取数据时，`Netty` 也会将数据直接读取到内存缓冲区中，然后通过零拷贝技术将数据从内存缓冲区传输到用户空间。\n\n\n\n通过使用零拷贝技术，`Netty` 可以避免在数据传输过程中对数据进行多次的拷贝操作，从而提高数据传输的效率和性能。特别是在处理大量数据传输的场景中，零拷贝技术可以大幅度减少 `CPU`的使用率，降低系统的负载。\n\n\n\n## 7. Netty 长连接、心跳机制了解么？\n\n\n\n在网络编程中，长连接是指客户端与服务器之间建立的连接可以保持一段时间，以便在需要时可以快速地进行数据交换。与短连接相比，长连接可以避免频繁建立和关闭连接的开销，从而提高数据传输的效率和性能。\n\n\n\nNetty 提供了一种长连接的实现方式，即通过 `Channel` 的 `keepalive` 选项来保持连接的状态。当启用了`keepalive` 选项后，客户端和服务器之间的连接将会自动保持一段时间，如果在这段时间内没有数据交换，客户端和服务器之间的连接将会被关闭。通过这种方式，可以实现长连接，避免频繁建立和关闭连接的开销。\n\n\n\n除了 `keepalive` 选项之外，`Netty`还提供了一种**心跳机制**来保持连接的状态。心跳机制可以**通过定期向对方发送心跳消息，来检测连接是否正常**。如果在一段时间内没有收到心跳消息，就认为连接已经断开，并进行重新连接。`Netty` 提供了一个`IdleStateHandler` 类，可以用来实现心跳机制。`IdleStateHandler`可以设置多个超时时间，当连接空闲时间超过设定的时间时，会触发一个事件，可以在事件处理方法中进行相应的处理，比如发送心跳消息。\n\n\n\n**通过使用长连接和心跳机制，可以保证客户端与服务器之间的连接处于正常的状态，从而提高数据传输的效率和性**能。特别是在处理大量数据传输的场景中，长连接和心跳机制可以降低建立和关闭连接的开销，减少网络负载，提高系统的稳定性。\n\n\n\n## 8. Netty 服务端和客户端的启动过程了解么？\n\n\n\n`Netty` 是一个基于`NIO` 的异步事件驱动框架，它的服务端和客户端的启动过程大致相同，都需要完成以下几个步骤：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838106897-eafd92ee-2b67-4959-9d85-0774afa2ca3f.png)\n\n\n\n1. 创建 `EventLoopGroup` 对象。`EventLoopGroup` 是`Netty`的核心组件之一，它用于管理和调度事件的处理。`Netty`通过`EventLoopGroup`来创建多个`EventLoop`对象，并将每个 `EventLoop` 与一个线程绑定。在服务端中，一般会创建两个 `EventLoopGroup`对象，分别用于接收客户端的连接请求和处理客户端的数据。\n2. 创建 `ServerBootstrap`或 `Bootstrap` 对象。`ServerBootstrap 和 Bootstrap`是 `Netty` 提供的服务端和客户端启动器，它们封装了启动过程中的各种参数和配置，方便使用者进行设置。在创建 `ServerBootstrap` 或 `Bootstrap`对象时，需要指定相应的 `EventLoopGroup` 对象，并进行一些基本的配置，比如传输协议、端口号、处理器等。\n3. 配置`Channel`的参数。`Channel` 是`Netty`中的一个抽象概念，它代表了一个网络连接。在启动过程中，需要对 `Channel`的一些参数进行配置，比如传输协议、缓冲区大小、心跳检测等。\n4. 绑定 `ChannelHandler。ChannelHandler` 是 `Netty` 中用于处理事件的组件，它可以处理客户端的连接请求、接收客户端的数据、发送数据给客户端等。在启动过程中，需要将 `ChannelHandler`绑定到相应的 `Channel`上，以便处理相应的事件。\n5. 启动服务端或客户端。在完成以上配置后，就可以启动服务端或客户端了。在启动过程中，会创建相应的`Channel`，并对其进行一些基本的初始化，比如注册监听器、绑定端口等。启动完成后，就可以开始接收客户端的请求或向服务器发送数据了。\n\n\n\n总的来说，`Netty` 的服务端和客户端启动过程比较简单，只需要进行一些基本的配置和设置，就可以完成相应的功能。通过使用 `Netty`，可以方便地开发高性能、高可靠性的网络应用程序。\n\n\n\n## 9. Netty 的 Channel 和 EventLoop 之间的关系是什么？\n\n\n\n在`Netty`中，`Channel`代表一个开放的网络连接，它可以用来读取和写入数据。而`EventLoop`则代表一个执行任务的线程，它负责处理`Channel`上的所有事件和操作。\n\n\n\n每个`Channel`都与一个`EventLoop`关联，而一个`EventLoop`可以关联多个`Channel`。当一个`Channel`上有事件发生时，**比如数据可读或者可写**，它会将该事件提交给关联的`EventLoop`来处理。`EventLoop`会将该事件加入到它自己的任务队列中，然后按照顺序处理队列中的任务。\n\n\n\n值得注意的是，一个`EventLoop`实例可能会被多个`Channel`所共享，因此它需要能够处理多个`Channel`上的事件，并确保在处理每个`Channel`的事件时不会被阻塞。为此，Netty采用了事件循环（`EventLoop`）模型，它通过异步I/O和事件驱动的方式，实现了高效、可扩展的网络编程。\n\n\n\n## 10. 什么是 Netty 的 ChannelPipeline，它是如何工作的？\n\n\n\n在`Netty`中，每个`Channel`都有一个与之关联的`ChannelPipeline`，用于处理该`Channel`上的事件和请求。`ChannelPipeline`是一种基于事件驱动的处理机制，它由多个处理器（`Handler`）组成，每个处理器负责处理一个或多个事件类型，将事件转换为下一个处理器所需的数据格式。\n\n\n\n当一个事件被触发时，它将从`ChannelPipeline`的第一个处理器（称为第一个`InboundHandler`）开始流经所有的处理器，直到到达最后一个处理器或者被中途拦截（通过抛出异常或调用`ChannelHandlerContext.fireXXX()`方法实现）。在这个过程中，每个处理器都可以对事件进行处理，也可以修改事件的传递方式，比如在处理完事件后将其转发到下一个处理器，或者直接将事件发送回到该`Channel`的对端。\n\n\n\n`ChannelPipeline`的工作方式可以用以下三个概念来描述：\n\n\n\n- 入站（`Inbound`）事件：由`Channel`接收到的事件，例如读取到新的数据、连接建立完成等等。入站事件将从`ChannelPipeline`的第一个`InboundHandler`开始流动，直到最后一个`InboundHandler`。\n- 出站（`Outbound`）事件：由`Channel`发送出去的事件，例如向对端发送数据、关闭连接等等。出站事件将从`ChannelPipeline`的最后一个`OutboundHandler`开始流动，直到第一个`OutboundHandler`。\n- `ChannelHandlerContext`：表示处理器和`ChannelPipeline`之间的关联关系。每个`ChannelHandler`都有一个`ChannelHandlerContext`，通过该对象可以实现在`ChannelPipeline`中的事件流中向前或向后传递事件，也可以通过该对象访问`Channel、ChannelPipeline和其他ChannelHandler`等。\n\n\n\n通过使用ChannelPipeline，Netty实现了高度可配置和可扩展的网络通信模型，使得开发人员可以根据自己的需求选择和组合不同的处理器，以构建出高效、稳定、安全的网络通信系统。\n\n\n\n## 11. Netty 中的 ByteBuf 是什么，它和 Java 的 ByteBuffer 有什么区别？\n\n\n\n`Netty` 的`ByteBuf` 是一个可扩展的字节容器，它提供了许多高级的 `API`，用于方便地处理字节数据。`ByteBuf`与 `Java NIO` 的 `ByteBuffer` 相比，有以下区别：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838110288-abd19f68-8a40-4270-9caa-631d7216abdd.png)\n\n\n\n- 容量可扩展：`ByteBuf`的容量可以动态扩展，而 `ByteBuffer` 的容量是固定的。\n- 内存分配：`ByteBuf`内部采用了内存池的方式，可以有效地减少内存分配和释放的开销。\n- 读写操作：`ByteBuf`提供了多个读写指针，可以方便地读写字节数据。\n- 零拷贝：`ByteBuf` 支持零拷贝技术，可以减少数据复制的次数。\n\n\n\n```java\nByteBuf buffer = Unpooled.buffer(10);\nbuffer.writeBytes(\"hello\".getBytes());\n\nwhile (buffer.isReadable()) {\n  System.out.print((char) buffer.readByte());\n}\n```\n\n\n\n在上面的示例代码中，我们使用 `Unpooled.buffer()` 方法创建了一个`ByteBuf`对象 `buffer`，并使用 `writeBytes()` 方法将字符串 `\"hello\"`写入该对象。然后，我们通过 `isReadable()`方法判断该对象是否可读，使用 `readByte()` 方法读取其中的字节数据，并将其转换为字符输出。\n\n\n\n## 12. Netty 中的 ChannelHandlerContext 是什么，它的作用是什么？\n\n\n\n在`Netty`中，`ChannelHandlerContext`表示连接到`ChannelPipeline`中的一个`Handler`上下文。在`Netty的IO`事件模型中，`ChannelHandlerContext`充当了处理`I/O`事件的处理器和`ChannelPipeline`之间的桥梁，使处理器能够相互交互并访问`ChannelPipeline`中的其他处理器。\n\n\n\n每当`ChannelPipeline`中添加一个`Handler`时，`Netty`会创建一个`ChannelHandlerContext`对象，并将其与该`Handler`关联。这个对象包含了该`Handler`的相关信息，如所在的`ChannelPipeline`、所属的`Channel`等。在处理`I/O`事件时，`Netty`会将`I/O`事件转发给与该事件相应的`ChannelHandlerContext`，该上下文对象可以使`Handler`访问与该事件相关的任何信息，也可以在管道中转发事件。\n\n\n\n总之，`ChannelHandlerContext`是一个重要的`Netty`组件，它提供了一种简单的机制，让开发者在处理网络I/O事件时可以更加灵活和高效地操作管道中的`Handler`。\n\n\n\n## 13. 什么是 Netty 的 ChannelFuture，它的作用是什么？\n\n\n\n在`Netty`中，`ChannelFuture`表示异步的`I/O`操作的结果。当执行一个异步操作（如发送数据到一个远程服务器）时，`ChannelFuture`会立即返回，并在将来的某个时候通知操作的结果，而不是等待操作完成。这种异步操作的特点使得Netty可以在同时处理多个连接时实现高性能和低延迟的网络应用程序。\n\n\n\n具体来说，`ChannelFuture`用于在异步操作完成后通知应用程序结果。在异步操作执行后，`Netty`将一个`ChannelFuture`对象返回给调用方。调用方可以通过添加一个回调（`ChannelFutureListener`）来处理结果。例如，当异步写操作完成时，可以添加一个`ChannelFutureListener`以检查操作的状态并采取相应的措施。\n\n\n\n`ChannelFuture`还提供了许多有用的方法，**如检查操作是否成功、等待操作完成、添加监听器等**。通过这些方法，应用程序可以更好地控制异步操作的状态和结果。\n\n\n\n总之，`ChannelFuture`是`Netty`中异步`I/O`操作的基础，它提供了一种简单而有效的机制，使得开发者可以方便地处理`I/O`操作的结果。\n\n\n\n## 14. Netty 中的 ChannelHandler 是什么，它的作用是什么？\n\n\n\n在 `Netty` 中，`ChannelHandler`是一个接口，用于处理入站和出站数据流。它可以通过实现以下方法来处理数据流：\n\n\n\n- `channelRead(ChannelHandlerContext ctx, Object msg)`: 处理接收到的数据，这个方法通常会被用于解码数据并将其转换为实际的业务对象。\n- `channelReadComplete(ChannelHandlerContext ctx)`: 读取数据完成时被调用，可以用于向远程节点发送数据。\n- `exceptionCaught(ChannelHandlerContext ctx, Throwable cause)`: 发生异常时被调用，可以在这个方法中处理异常或关闭连接。\n- `channelActive(ChannelHandlerContext ctx)`: 当连接建立时被调用。\n- `channelInactive(ChannelHandlerContext ctx)`: 当连接关闭时被调用。\n\n\n\n`ChannelHandler` 可以添加到 `ChannelPipeline` 中，`ChannelPipeline` 是一个用于维护 `ChannelHandler` 调用顺序的容器。在数据流进入或离开 `Channel` 时，`ChannelPipeline` 中的 `ChannelHandler` 会按照添加的顺序依次调用它们的方法来处理数据流。\n\n\n\n`ChannelHandler` 的主要作用是将网络协议的细节与应用程序的逻辑分离开来，使得应用程序能够专注于处理业务逻辑，而不需要关注网络协议的实现细节。\n\n\n\n## 15. Netty 中的各种 Codec 是什么，它们的作用是什么？\n\n\n\n在 `Netty` 中，`Codec`是一种将二进制数据与 `Java` 对象之间进行编码和解码的组件。它们可以将数据从字节流解码为 `Java` 对象，也可以将 `Java` 对象编码为字节流进行传输。\n\n\n\n以下是 Netty 中常用的 `Codec`：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838113932-321a462a-bfb3-43af-8b21-7c7a93afb83a.png)\n\n\n\n- `ByteToMessageCodec`：将字节流解码为 `Java`对象，同时也可以将`Java` 对象编码为字节流。可以用于处理自定义协议的消息解析和封装。\n- `MessageToByteEncoder`：将 `Java` 对象编码为字节流。通常用于发送消息时将消息转换为二进制数据。\n- `ByteToMessageDecoder`：将字节流解码为`Java` 对象。通常用于接收到数据后进行解码。\n- `StringEncoder 和 StringDecoder`：分别将字符串编码为字节流和将字节流解码为字符串。\n- `LengthFieldPrepender 和 LengthFieldBasedFrameDecoder`：用于处理 `TCP` 粘包和拆包问题。\n- `ObjectDecoder和ObjectEncoder`：将`Java`对象序列化为字节数据，并将字节数据反序列化为`Java`对象。\n\n\n\n这些 `Codec`组件可以通过组合使用来构建复杂的数据协议处理逻辑，以提高代码的可重用性和可维护性。\n\n\n\n## 16. 什么是 Netty 的 BootStrap，它的作用是什么？\n\n\n\n`Netty的Bootstrap`是一个用于启动和配置`Netty`客户端和服务器的工具类。它提供了一组简单易用的方法，使得创建和配置Netty应用程序变得更加容易。\n\n\n\n`Bootstrap`类提供了一些方法，可以设置服务器或客户端的选项和属性，以及为`ChannelPipeline`配置`handler`，以处理传入或传出的数据。一旦完成配置，使用`Bootstrap`启动客户端或服务器。\n\n\n\n在`Netty`应用程序中，`Bootstrap`有两个主要作用：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838116158-fbc99a7d-96a5-46a7-8556-653e09e897d4.png)\n\n\n\n- 作为`Netty`服务器启动的入口点：通过`Bootstrap`启动一个`Netty`服务器，可以在指定的端口上监听传入的连接，并且可以设置服务器的选项和属性。\n- 作为`Netty`客户端启动的入口点：通过`Bootstrap`启动一个`Netty`客户端，可以连接到远程服务器，并且可以设置客户端的选项和属性。\n\n\n\n## 17.Netty的IO模型是什么？与传统的BIO和NIO有什么不同？\n\n\n\n`Netty`的`IO`模型是基于事件驱动的`NIO（Non-blocking IO）`模型。在传统的`BIO（Blocking IO）`模型中，每个连接都需要一个独立的线程来处理读写事件，当连接数过多时，线程数量就会爆炸式增长，导致系统性能急剧下降。而在`NIO`模型中，一个线程可以同时处理多个连接的读写事件，大大降低了线程的数量和切换开销，提高了系统的并发性能和吞吐量。\n\n\n\n与传统的`NIO`模型相比，`Netty`的`NIO`模型有以下不同点：\n\n\n\n- `Netty`使用了`Reactor`模式，将`IO`事件分发给对应的`Handler`处理，使得应用程序可以更方便地处理网络事件。\n- `Netty`使用了多线程模型，将`Handler`的处理逻辑和`IO`线程分离，避免了`IO`线程被阻塞的情况。\n- `Netty`支持多种`Channel`类型，可以根据应用场景选择不同的`Channel`类型，如`NIO、EPoll、OIO`等。\n\n\n\n## 18. 如何在Netty中实现TCP粘包/拆包的处理？\n\n\n\n在`TCP`传输过程中，由于`TCP`并不了解上层应用协议的消息边界，**会将多个小消息组合成一个大消息，或者将一个大消息拆分成多个小消息发送。这种现象被称为TCP粘包/拆包问题**。在Netty中，可以通过以下几种方式来解决TCP粘包/拆包问题：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838252129-212e0ed8-b68e-443e-a73d-42cd6e5467b8.png)\n\n\n\n- **消息定长**：将消息固定长度发送，例如每个消息都是固定的`100`字节。在接收端，根据固定长度对消息进行拆分。\n\n\n\n```java\n// 编码器，将消息的长度固定为100字节\npipeline.addLast(\"frameEncoder\", new LengthFieldPrepender(2));\npipeline.addLast(\"messageEncoder\", new StringEncoder(CharsetUtil.UTF_8));\n// 解码器，根据固定长度对消息进行拆分\npipeline.addLast(\"frameDecoder\", new LengthFieldBasedFrameDecoder(100, 0, 2, 0, 2));\npipeline.addLast(\"messageDecoder\", new StringDecoder(CharsetUtil.UTF_8));\n```\n\n\n\n- **消息分隔符**：将消息以特定的分隔符分隔开，例如以\"`\\r\\n`\"作为分隔符。在接收端，根据分隔符对消息进行拆分。\n\n\n\n```java\n// 编码器，以\"\\r\\n\"作为消息分隔符\npipeline.addLast(\"frameEncoder\", new DelimiterBasedFrameEncoder(\"\\r\\n\"));\npipeline.addLast(\"messageEncoder\", new StringEncoder(CharsetUtil.UTF_8));\n// 解码器，根据\"\\r\\n\"对消息进行拆分\npipeline.addLast(\"frameDecoder\", new DelimiterBasedFrameDecoder(1024, Delimiters.lineDelimiter()));\npipeline.addLast(\"messageDecoder\", new StringDecoder(CharsetUtil.UTF_8));\n```\n\n\n\n- **消息头部加长度字段**：在消息的头部加上表示消息长度的字段，在发送端发送消息时先发送消息长度，再发送消息内容。在接收端，先读取消息头部的长度字段，再根据长度读取消息内容。\n\n\n\n```java\n// 编码器，将消息的长度加入消息头部\npipeline.addLast(\"frameEncoder\", new LengthFieldPrepender(2));\npipeline.addLast(\"messageEncoder\", new StringEncoder(CharsetUtil.UTF_8));\n// 解码器，先读取消息头部的长度字段，再根据长度读取消息内容\npipeline.addLast(\"frameDecoder\", new LengthFieldBasedFrameDecoder(1024, 0, 2, 0, 2));\npipeline.addLast(\"messageDecoder\", new StringDecoder(CharsetUtil.UTF_8));\n```\n\n\n\n## 19. Netty如何处理大文件的传输？\n\n\n\n在`Netty`中，可以通过使用`ChunkedWriteHandler`处理大文件的传输。`ChunkedWriteHandler`是一个编码器，可以将大文件切分成多个`Chunk`，并将它们以`ChunkedData`的形式写入管道，这样就可以避免一次性将整个文件读入内存，降低内存占用。\n\n\n\n具体使用方法如下：\n\n\n\n- 在服务端和客户端的`ChannelPipeline`中添加`ChunkedWriteHandler`。\n\n\n\n```java\npipeline.addLast(new ChunkedWriteHandler());\n```\n\n\n\n- 在服务端和客户端的业务逻辑处理器中，接收并处理`ChunkedData`。\n\n\n\n```java\npublic class MyServerHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof HttpRequest) {\n            HttpRequest request = (HttpRequest) msg;\n            // 处理HTTP请求\n            // ...\n        } else if (msg instanceof HttpContent) {\n            HttpContent content = (HttpContent) msg;\n            // 处理HTTP内容\n            if (content instanceof LastHttpContent) {\n                // 处理完整个HTTP请求\n                // ...\n            } else if (content instanceof HttpChunkedInput) {\n                HttpChunkedInput chunkedInput = (HttpChunkedInput) content;\n                // 处理ChunkedData\n                while (true) {\n                    HttpContent chunk = chunkedInput.readChunk(ctx.alloc());\n                    if (chunk == null) {\n                        break;\n                    }\n                    // 处理单个Chunk\n                    // ...\n                }\n            }\n        }\n    }\n}\n```\n\n\n\n- 在客户端向服务端发送数据时，将需要传输的文件包装成`ChunkedFile`并写入管道。\n\n\n\n```java\npublic void sendFile(Channel channel, File file) throws Exception {\n    RandomAccessFile raf = new RandomAccessFile(file, \"r\");\n    DefaultFileRegion fileRegion = new DefaultFileRegion(raf.getChannel(), 0, raf.length());\n    HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\");\n    HttpUtil.setContentLength(request, raf.length());\n    channel.write(request);\n    channel.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, file.length(), 8192)));\n}\n```\n\n\n\n在传输大文件时，还需要**注意以下几点**：\n\n\n\n- 使用`ChunkedFile`时需要指定`Chunk`的大小，根据实际情况选择合适的大小，一般建议不要超过`8KB`。\n- 为了避免大文件传输过程中对网络造成影响，可以在服务端和客户端的`ChannelPipeline`中添加`WriteBufferWaterMark`，限制写入缓冲区的大小。\n\n\n\n```java\npipeline.addLast(new WriteBufferWaterMark(8 * 1024, 32 * 1024));\n```\n\n\n\n## 20. 如何使用Netty实现心跳机制？\n\n\n\n在`Netty`中，可以通过实现一个定时任务来实现心跳机制。具体来说，就是在客户端和服务端之间定时互相发送心跳包，以检测连接是否仍然有效。\n\n\n\n**以下是使用Netty实现心跳机制的基本步骤**：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838257580-8c838aa5-c34a-4bab-8eb5-6e14fa72c162.png)\n\n\n\n- 定义心跳消息的类型。\n\n\n\n```java\npublic class HeartbeatMessage implements Serializable {\n    // ...\n}\n```\n\n\n\n- 在客户端和服务端的`ChannelPipeline`中添加`IdleStateHandler`，用于触发定时任务。\n\n\n\n```java\npipeline.addLast(new IdleStateHandler(0, 0, 60, TimeUnit.SECONDS));\n```\n\n\n\n- 在客户端和服务端的业务逻辑处理器中，重写`userEventTriggered`方法，在触发定时任务时发送心跳包。\n\n\n\n```java\npublic class MyServerHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n        if (evt instanceof IdleStateEvent) {\n            IdleStateEvent event = (IdleStateEvent) evt;\n            if (event.state() == IdleState.READER_IDLE) {\n                // 读空闲，发送心跳包\n                ctx.writeAndFlush(new HeartbeatMessage());\n            }\n        } else {\n            super.userEventTriggered(ctx, evt);\n        }\n    }\n}\n```\n\n\n\n- 在客户端和服务端的业务逻辑处理器中，重写`channelRead`方法，接收并处理心跳包。\n\n\n\n```java\npublic class MyClientHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof HeartbeatMessage) {\n            // 收到心跳包，不做处理\n            return;\n        }\n        // 处理其他消息\n        // ...\n    }\n}\n```\n\n\n\n需要注意的是，由于心跳包不需要传输大量数据，因此建议使用`Unpooled.EMPTY_BUFFER`作为心跳包的内容。另外，心跳间隔的时间应根据实际情况设置，一般建议设置为连接的超时时间的一半。\n\n\n\n## 21. Netty中如何实现SSL/TLS加密传输？\n\n\n\n在 `Netty` 中实现 `SSL/TLS`加密传输，需要通过`SSLHandler`来进行处理。通常情况下，`SSLHandler` 需要在`ChannelPipeline` 中作为最后一个`handler`添加。\n\n\n\n以下是实现`SSL/TLS` 加密传输的示例代码：\n\n\n\n```java\n// 创建 SSLContext 对象，用于构建 SSLEngine\nSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n\n// 初始化 SSLContext\nKeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\nKeyStore keyStore = KeyStore.getInstance(\"JKS\");\nkeyStore.load(new FileInputStream(\"server.jks\"), \"password\".toCharArray());\nkeyManagerFactory.init(keyStore, \"password\".toCharArray());\nTrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\ntrustManagerFactory.init(keyStore);\nsslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\n\n// 获取 SSLEngine\nSSLEngine sslEngine = sslContext.createSSLEngine();\nsslEngine.setUseClientMode(false);\n\n// 添加 SslHandler 到 ChannelPipeline 中\npipeline.addLast(\"ssl\", new SslHandler(sslEngine));\n```\n\n\n\n## 22. NioEventLoopGroup 默认的构造函数会起多少线程？\n\n\n\n默认情况下，`NioEventLoopGroup` 的构造函数会根据可用的处理器核心数 (`availableProcessors()`) 创建相应数量的线程。\n\n\n\n具体来说，`NioEventLoopGroup` 的默认构造函数内部调用了另一个构造函数，其参数 `nThreads`的默认值为`0`，表示使用默认线程数。而默认线程数的计算方式就是调用 `Runtime.getRuntime().availableProcessors()` 方法获取当前机器可用的处理器核心数。\n\n\n\n因此，如果你在一台四核的机器上创建了一个默认的 `NioEventLoopGroup` 实例，那么它就会使用四个线程。如果你想要修改线程数，可以调用`NioEventLoopGroup` 的其他构造函数，并传入自定义的线程数。\n\n\n\n## 23. 如何使用Netty实现WebSocket协议？\n\n\n\n在 `Netty` 中实现 `WebSocket` 协议，需要使用 `WebSocketServerProtocolHandler`进行处理。`WebSocketServerProtocolHandler`是一个`ChannelHandler`，可以将`HTTP` 升级为 `WebSocket` 并处理`WebSocket` 帧。\n\n\n\n以下是实现 `WebSocket` 协议的示例代码：\n\n\n\n```java\n// 添加 HTTP 请求解码器\npipeline.addLast(\"httpDecoder\", new HttpRequestDecoder());\n// 添加 HTTP 响应编码器\npipeline.addLast(\"httpEncoder\", new HttpResponseEncoder());\n// 添加 HTTP 聚合器\npipeline.addLast(\"httpAggregator\", new HttpObjectAggregator(65536));\n// 添加 WebSocket 服务器协议处理器\npipeline.addLast(\"webSocketHandler\", new WebSocketServerProtocolHandler(\"/ws\"));\n// 添加自定义的 WebSocket 处理器\npipeline.addLast(\"handler\", new MyWebSocketHandler());\n```\n\n\n\n在以上示例代码中，`WebSocketServerProtocolHandler`的参数 \"/ws\" 表示`WebSocket` 请求的 `URL` 路径，`MyWebSocketHandler` 是自定义的`WebSocket` 处理器。\n\n\n\n## 24. Netty 高性能表现在哪些方面？\n\n\n\n![img](大厂面试之Netty篇.assets/1680838274465-b1d9f883-088c-4710-b4a5-ea53fd08b319.png)\n\n\n\n- 异步非阻塞 `I/O` 模型：`Netty`使用基于`NIO`的异步非阻塞 `I/O`模型，可以大大提高网络通信效率，减少线程的阻塞等待时间，从而提高应用程序的响应速度和吞吐量。\n- 零拷贝技术：`Netty` 支持零拷贝技术，可以避免数据在内核和用户空间之间的多次复制，减少了数据拷贝的次数，从而提高了数据传输的效率和性能。\n- 线程模型优化：`Netty`的线程模型非常灵活，可以根据不同的业务场景选择不同的线程模型。例如，对于低延迟和高吞吐量的场景，可以选择 `Reactor` 线程模型，对于`I/O` 操作比较简单的场景，可以选择单线程模型。\n- 内存池技术：`Netty` 提供了一套基于内存池技术的 `ByteBuf` 缓冲区，可以重用已经分配的内存空间，减少内存的分配和回收次数，提高内存使用效率。\n- 处理器链式调用：`Netty`的 `ChannelHandler` 可以按照一定的顺序组成一个处理器链，当事件发生时，会按照处理器链的顺序依次调用处理器，从而实现对事件的处理。这种处理方式比传统的多线程处理方式更加高效，减少了线程上下文切换和锁竞争等问题。\n\n\n\n## 25. Netty 和 Tomcat 的区别？\n\n\n\n![img](大厂面试之Netty篇.assets/1680838282260-bc380a1a-aaed-481c-9968-393ea49f264d.png)\n\n\n\n`Netty 和 Tomcat` 都是 `Java Web`应用服务器，但是它们之间存在一些区别：\n\n\n\n- 底层网络通信模型不同：`Tomcat` 是基于阻塞的`BIO（Blocking I/O）`模型实现的，而 `Netty` 是基于`NIO（Non-Blocking I/O）`模型实现的。\n- 线程模型不同：`Tomcat` 使用传统的多线程模型，每个请求都会分配一个线程，而 `Netty`使用 `EventLoop`线程模型，每个 `EventLoop` 负责处理多个连接，通过线程池管理`EventLoop`。\n- 协议支持不同：`Tomcat`内置支持 `HTTP 和 HTTPS`协议，而 `Netty`不仅支持 `HTTP 和 HTTPS` 协议，还支持 `TCP、UDP 和 WebSocket` 等多种协议。\n- 代码复杂度不同：由于`Tomcat`支持的功能比较全面，所以其代码相对较为复杂，而 `Netty`的代码相对比较简洁、精简。\n- 应用场景不同：`Tomcat`适合于处理比较传统的 `Web`应用程序，如传统的 `MVC` 模式`Web`应用程序；而 `Netty`更适合于高性能、低延迟的网络应用程序，如游戏服务器、即时通讯服务器等。\n\n\n\n## 26. 服务端Netty的工作架构图\n\n\n\n```java\n             ┌───────┐        ┌───────┐\n             │ Channel │◀───────│ Socket│\n             │Pipeline │        │       │\n             └───────┘        └───────┘\n                   ▲                 │\n                   │                 │\n         ┌─────────┴─────────┐       │\n         │                   │       │\n         ▼                   ▼       ▼\n┌──────────────┐   ┌──────────────┐  ┌──────────────┐\n│EventLoopGroup│   │EventLoopGroup│  │EventLoopGroup│\n│       boss   │   │     work     │  │     work     │\n└──────────────┘   └──────────────┘  └──────────────┘\n         ▲                   ▲       ▲\n         │                   │       │\n┌────────┴─────────┐ ┌────────┴─────────┐\n│     NioServerSocketChannel   │   NioSocketChannel      │ ...\n└──────────────────┘ └──────────────────┘\n```\n\n\n\n整个服务端 Netty 的工作架构图包括了以下几个部分：\n\n\n\n- ChannelPipeline：管道处理器，用于处理入站或出站事件，对数据进行编解码、处理业务逻辑等。\n- Channel：通道，对应底层的 `Socket`连接，用于收发网络数据。\n- EventLoopGroup：事件循环组，包含了多个事件循环（`EventLoop`），每个事件循环负责处理多个通道上的事件。\n- EventLoop：事件循环，负责监听注册到该循环的多个通道上的事件，然后根据事件类型将事件派发给对应的处理器。\n- NioServerSocketChannel：NIO 服务端通道，用于接受客户端的连接。\n- NioSocketChannel：NIO 客户端通道，用于和服务端进行数据通信。\n\n\n\n在服务端启动时，会创建一个或多个 `EventLoopGroup`。其中一个 `EventLoopGroup`作为`boss`线程池，用于接受客户端的连接请求，并将连接请求分发给`work`线程池中的某个 `EventLoop`。`work`线程池中的`EventLoop`负责处理已经连接的客户端的数据通信。每个 `EventLoop`负责处理一个或多个 `NioSocketChannel`，并维护该通道的事件队列，当事件发生时，将事件添加到事件队列中，并将事件派发到管道处理器中进行处理。\n\n\n\n## 27. 简单聊聊：Netty的线程模型的三种使用方式？\n\n\n\nNetty的线程模型有三种使用方式，分别是单线程模型、多线程模型和主从多线程模型。\n\n\n\n![img](大厂面试之Netty篇.assets/1680838288407-fe11afb0-d30d-4cc8-8c1d-39c8af2323eb.png)\n\n\n\n- **单线程模型**：所有的`I/O`操作都由同一个线程来执行。虽然这种方式并不适合高并发的场景，但是它具有简单、快速的优点，适用于处理`I/O`操作非常快速的场景，例如传输小文件等。\n- **多线程模**型：所有的`I/O`操作都由一组线程来执行，其中一个线程负责监听客户端的连接请求，其他线程负责处理`I/O`操作。这种方式可以支持高并发，但是线程上下文切换的开销较大，适用于处理`I/O`操作较为耗时的场景。\n- **主从多线程模型**：所有的`I/O`操作都由一组`NIO`线程来执行，其中一个主线程负责监听客户端的连接请求，其他从线程负责处理`I/O`操作。这种方式将接受连接和处理`I/O`操作分开，避免了线程上下文切换的开销，同时又能支持高并发，适用于处理I/O操作耗时较长的场景。\n\n\n\n## 28. Netty 是如何保持长连接的\n\n\n\n![img](大厂面试之Netty篇.assets/1680838292642-86eb9044-304e-4126-bc79-0202489b7fb5.png)\n\n\n\n- **心跳机制**：使用心跳机制可以定期向服务器发送一个简短的数据包，以保持连接处于活动状态。如果在一段时间内没有收到心跳包，就可以认为连接已经断开，从而及时重新建立连接。`Netty`提供了`IdleStateHandler`处理器，可以方便地实现心跳机制。\n- **断线重连机制**：在网络不稳定的情况下，连接可能会不可避免地断开。为了避免因为网络异常导致应用程序不能正常工作，可以实现断线重连机制，定期检查连接状态，并在连接断开时尝试重新连接。`Netty`提供了`ChannelFutureListener`接口和`ChannelFuture`对象，可以方便地实现断线重连机制。\n- **基于HTTP/1.1协议的长连接**：`HTTP/1.1`协议支持长连接，可以在一个`TCP`连接上多次发送请求和响应。在`Netty`中，可以使用`HttpClientCodec和HttpObjectAggregator`处理器，实现基于`HTTP/1.1`协议的长连接。\n- **WebSocket协议**：`WebSocket`协议也支持长连接，可以在一个`TCP`连接上双向通信，实现实时数据交换。在`Netty`中，可以使用`WebSocketServerProtocolHandler`和`WebSocketClientProtocolHandler`处理器，实现`WebSocket`协议的长连接。\n\n\n\n## 29. Netty 发送消息有几种方式？\n\n\n\n在 `Netty` 中，发送消息主要有以下三种方式：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838295125-7abdcfc2-fdf4-4dc0-a851-1717e5ee1009.png)\n\n\n\n- **Channel.write(Object msg)** ：通过 `Channel` 写入消息，消息会被缓存到`Channel` 的发送缓冲区中，等待下一次调用 `flush()` 将消息发送出去。\n- **ChannelHandlerContext.write(Object msg)** ：通过 `ChannelHandlerContext` 写入消息，与`Channel.write(Object msg)` 相比，`ChannelHandlerContext.write(Object msg)` 会将消息写入到 `ChannelHandlerContext` 的发送缓冲区中，等待下一次调用 `flush()`将消息发送出去。\n- **ChannelHandlerContext.writeAndFlush(Object msg)** ：通过`ChannelHandlerContext` 写入并发送消息，等同于连续调用 `ChannelHandlerContext.write(Object msg)` 和`ChannelHandlerContext.flush()`。\n\n\n\n在使用上述三种方式发送消息时，需要注意到写操作可能会失败或被延迟，因此需要在发送消息时进行一定的错误处理或者设置超时时间。另外，也可以使用 `Netty`提供的 `ChannelFuture` 对象来监听操作结果或者进行异步操作。\n\n\n\n## 30. Netty 支持哪些心跳类型设置？\n\n\n\n在 `Netty` 中，可以通过以下几种方式实现心跳机制：\n\n\n\n![img](大厂面试之Netty篇.assets/1680838297717-d5f646d7-4cab-4b71-b4a4-4132a99cf933.png)\n\n\n\n- **IdleStateHandler** ：`Netty` 内置的空闲状态检测处理器，支持多种空闲状态检测（如读空闲、写空闲、读写空闲）。\n- **自定义心跳检测机制** ：可以通过自定义实现 `ChannelInboundHandler`接口的处理器来实现心跳检测，例如可以通过计时器或者线程来定期发送心跳包，或者通过对远程端口的连接状态进行检测等方式实现。\n- **使用心跳应答** ：在应用层面定义心跳请求和应答消息，通过 `ChannelInboundHandler` 处理器监听接收到的心跳请求消息，并返回心跳应答消息，来实现心跳检测。如果一段时间内未收到对方的心跳应答消息，则认为连接已经失效。\n\n\n\n需要注意的是，为了避免因心跳机制导致的网络负载过大或者频繁的连接断开和重连，应该根据具体业务场景选择适合的心跳类型和频率。\n\n\n\n## 31. Netty的内存管理机制是什么？\n\n\n\n`Netty` 的内存管理机制主要是通过 `ByteBuf`类实现的。`ByteBuf` 是 `Netty` 自己实现的一个可扩展的字节缓冲区类，它在 `JDK` 的 `ByteBuffer`的基础上做了很多优化和改进。\n\n\n\n`Netty` 的`ByteBuf` 的内存管理主要分为两种方式：\n\n\n\n- 堆内存：`ByteBuf` 以普通的字节数组为基础，在 `JVM` 堆上分配内存。这种方式适用于小型数据的传输，如传输的是文本、`XML` 等数据。\n- 直接内存：`ByteBuf` 使用操作系统的堆外内存，由操作系统分配和回收内存。这种方式适用于大型数据的传输，如传输的是音视频、大型图片等数据。\n\n\n\n对于堆内存，`Netty` 采用了类似于`JVM`的分代内存管理机制，将缓冲区分为三种类型**：堆缓冲区、直接缓冲区、复合缓冲区**。Netty 会根据不同的使用场景和内存需求来决定使用哪种类型的缓冲区，从而提高内存利用率。\n\n\n\n在使用 `ByteBuf`时，`Netty` 还实现了一些优化和特殊处理，如池化缓冲区、零拷贝等技术，以提高内存的利用率和性能的表现。\n\n\n\n## 32. Netty 中如何实现高可用和负载均衡？\n\n\n\n`Netty`本身并没有提供高可用和负载均衡的功能，但可以结合其他技术来实现这些功能。下面介绍一些常用的方案：\n\n\n\n- 高可用：通过在多台服务器上部署同一个应用程序实现高可用。可以使用负载均衡器来将请求分配给不同的服务器，当某台服务器出现故障时，负载均衡器可以将请求转发给其他可用的服务器。常用的负载均衡器包括`Nginx、HAProxy`等。\n- 负载均衡：负载均衡是将请求分配给多台服务器的过程，常用的负载均衡算法包括**轮询、随机、权重**等。在`Netty`中可以使用多个`EventLoop`来处理请求，将请求分配给不同的`EventLoop`，从而实现负载均衡。另外，可以使用第三方框架，如`Zookeeper、Consul`等，来实现服务注册、发现和负载均衡。\n- 高可用与负载均衡的结合：可以使用多台服务器来实现高可用和负载均衡。在每台服务器上部署同一个应用程序，并使用负载均衡器来分配请求。当某台服务器出现故障时，负载均衡器可以将请求转发给其他可用的服务器，从而保证高可用和负载均衡","tags":["我要进大厂","面试","Netty"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之RabbitMQ篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之RabbitMQ篇/","content":"\n## 1.什么是RabbitMQ？\n\n\n\nRabbitMQ是一个由erlang开发的消息队列。消息队列用于应用间的异步协作。\n\n\n\n![img](大厂面试之RabbitMQ篇.assets/1676359129228-38c37375-e0bf-440d-a37c-9745693d0cce.webp)\n\n\n\n## 2.RabbitMQ的组件\n\n\n\nMessage：由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key、priority、delivery-mode（是否持久性存储）等。\n\n\n\nPublisher：消息的生产者。\n\n\n\nExchange：接收消息并将消息路由到一个或多个Queue。default exchange 是默认的直连交换机，名字为空字符串，每个新建队列都会自动绑定到默认交换机上，绑定的路由键名称与队列名称相同。\n\n\n\nBinding：通过Binding将Exchange和Queue关联，这样Exchange就知道将消息路由到哪个Queue中。\n\n\n\nQueue：存储消息，队列的特性是先进先出。一个消息可分发到一个或多个队列。\n\n\n\nVirtual host：每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。当多个不同的用户使用同一个RabbitMQ server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange和queue。\n\n\n\nBroker：消息队列服务器实体。\n\n\n\n## 3.什么时候使用MQ\n\n\n\n对于一些不需要立即生效的操作，可以拆分出来，异步执行，使用消息队列实现。\n\n\n\n以常见的订单系统为例，用户点击下单按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发短信通知。这种场景下就可以用 MQ 。将短信通知放到 MQ 异步执行，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ， 让主流程快速完结，而由另外的线程消费MQ的消息。\n\n\n\n## 4.RabbitMQ的优缺点\n\n\n\n缺点：使用erlang实现，不利于二次开发和维护；性能较kafka差，持久化消息和ACK确认的情况下生产和消费消息单机吞吐量大约在1-2万左右，kafka单机吞吐量在十万级别。\n\n\n\n优点：有管理界面，方便使用；可靠性高；功能丰富，支持消息持久化、消息确认机制、多种消息分发机制。\n\n\n\n## 5.RabbitMQ 有哪些重要的角色？\n\n\n\nRabbitMQ 中重要的角色有：生产者、消费者和代理。\n\n\n\n1、生产者：消息的创建者，负责创建和推送数据到消息服务器；\n\n\n\n2、消费者：消息的接收方，用于处理数据和确认消息；\n\n\n\n3、代理：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。\n\n\n\n## 6.Exchange 类型\n\n\n\nExchange分发消息时根据类型的不同分发策略不同，目前共四种类型：direct、fanout、topic、headers 。headers 模式根据消息的headers进行路由，此外 headers 交换器和 direct 交换器完全一致，但性能差很多。\n\n\n\nExchange规则。\n\n\n\n![image-20230511170416217](大厂面试之RabbitMQ篇.assets/image-20230511170416217.png)\n\n\n\n**direct**\n\n\n\ndirect交换机会将消息路由到binding key 和 routing key完全匹配的队列中。它是完全匹配、单播的模式。\n\n\n\n![img](大厂面试之RabbitMQ篇.assets/1676359131990-932cebf1-f203-4fc5-a1b6-546e1bc53c48.webp)\n\n\n\n**fanout**\n\n\n\n所有发到 fanout 类型交换机的消息都会路由到所有与该交换机绑定的队列上去。fanout 类型转发消息是最快的。\n\n\n\n![img](大厂面试之RabbitMQ篇.assets/1676359134005-ba4421b2-021f-49b5-9006-afc10099d4fc.webp)\n\n\n\n**topic**\n\n\n\ntopic交换机使用routing key和binding key进行模糊匹配，匹配成功则将消息发送到相应的队列。routing key和binding key都是句点号“. ”分隔的字符串，binding key中可以存在两种特殊字符“*”与“##”，用于做模糊匹配，其中“*”用于匹配一个单词，“##”用于匹配多个单词。\n\n\n\n![img](大厂面试之RabbitMQ篇.assets/1676359135828-892a7f14-5a4a-46a7-bca6-82b74166581a.webp)\n\n\n\n**headers**\n\n\n\nheaders交换机是根据发送的消息内容中的headers属性进行路由的。在绑定Queue与Exchange时指定一组键值对；当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对；如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。\n\n\n\n## 7.消息丢失\n\n\n\n消息丢失场景：生产者生产消息到RabbitMQ Server消息丢失、RabbitMQ Server存储的消息丢失和RabbitMQ Server到消费者消息丢失。\n\n\n\n消息丢失从三个方面来解决：生产者确认机制、消费者手动确认消息和持久化。\n\n\n\n### 生产者确认机制\n\n\n\n生产者发送消息到队列，无法确保发送的消息成功的到达server。\n\n\n\n解决方法：\n\n\n\n1、事务机制。在一条消息发送之后会使发送端阻塞，等待RabbitMQ的回应，之后才能继续发送下一条消息。性能差。\n\n\n\n2、开启生产者确认机制，只要消息成功发送到交换机之后，RabbitMQ就会发送一个ack给生产者（即使消息没有Queue接收，也会发送ack）。如果消息没有成功发送到交换机，就会发送一条nack消息，提示发送失败。\n\n\n\n在 Springboot 是通过 publisher-confirms 参数来设置 confirm 模式：\n\n\n\n```yaml\nspring:\n    rabbitmq:   \n        ##开启 confirm 确认机制\n        publisher-confirms: true\n```\n\n\n\n在生产端提供一个回调方法，当服务端确认了一条或者多条消息后，生产者会回调这个方法，根据具体的结果对消息进行后续处理，比如重新发送、记录日志等。\n\n\n\n```java\n// 消息是否成功发送到Exchange\nfinal RabbitTemplate.ConfirmCallback confirmCallback = (CorrelationData correlationData, boolean ack, String cause) -> {\n            log.info(\"correlationData: \" + correlationData);\n            log.info(\"ack: \" + ack);\n            if(!ack) {\n                log.info(\"异常处理....\");\n            }\n    };\n\nrabbitTemplate.setConfirmCallback(confirmCallback);\n```\n\n\n\n### 路由不可达消息\n\n\n\n生产者确认机制只确保消息正确到达交换机，对于从交换机路由到Queue失败的消息，会被丢弃掉，导致消息丢失。\n\n\n\n对于不可路由的消息，有两种处理方式：Return消息机制和备份交换机。\n\n\n\n**Return消息机制**\n\n\n\nReturn消息机制提供了回调函数 ReturnCallback，当消息从交换机路由到Queue失败才会回调这个方法。需要将`mandatory` 设置为 `true` ，才能监听到路由不可达的消息。\n\n\n\n```yaml\nspring:\n    rabbitmq:\n        ##触发ReturnCallback必须设置mandatory=true, 否则Exchange没有找到Queue就会丢弃掉消息, 而不会触发ReturnCallback\n        template.mandatory: true\n```\n\n\n\n通过 ReturnCallback 监听路由不可达消息。\n\n\n\n```java\n    final RabbitTemplate.ReturnCallback returnCallback = (Message message, int replyCode, String replyText, String exchange, String routingKey) ->\n            log.info(\"return exchange: \" + exchange + \", routingKey: \"\n                    + routingKey + \", replyCode: \" + replyCode + \", replyText: \" + replyText);\nrabbitTemplate.setReturnCallback(returnCallback);\n```\n\n\n\n当消息从交换机路由到Queue失败时，会返回 `return exchange: , routingKey: MAIL, replyCode: 312, replyText: NO_ROUTE`。\n\n\n\n**备份交换机**\n\n\n\n备份交换机alternate-exchange 是一个普通的exchange，当你发送消息到对应的exchange时，没有匹配到queue，就会自动转移到备份交换机对应的queue，这样消息就不会丢失。\n\n\n\n### 消费者手动消息确认\n\n\n\n有可能消费者收到消息还没来得及处理MQ服务就宕机了，导致消息丢失。因为消息者默认采用自动ack，一旦消费者收到消息后会通知MQ Server这条消息已经处理好了，MQ 就会移除这条消息。\n\n\n\n解决方法：消费者设置为手动确认消息。消费者处理完逻辑之后再给broker回复ack，表示消息已经成功消费，可以从broker中删除。当消息者消费失败的时候，给broker回复nack，根据配置决定重新入队还是从broker移除，或者进入死信队列。只要没收到消费者的 acknowledgment，broker 就会一直保存着这条消息，但不会 requeue，也不会分配给其他 消费者。\n\n\n\n消费者设置手动ack：\n\n\n\n```java\n##设置消费端手动 ack\nspring.rabbitmq.listener.simple.acknowledge-mode=manual\n```\n\n\n\n消息处理完，手动确认：\n\n\n\n```java\n    @RabbitListener(queues = RabbitMqConfig.MAIL_QUEUE)\n    public void onMessage(Message message, Channel channel) throws IOException {\n\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long deliveryTag = message.getMessageProperties().getDeliveryTag();\n        //手工ack；第二个参数是multiple，设置为true，表示deliveryTag序列号之前（包括自身）的消息都已经收到，设为false则表示收到一条消息\n        channel.basicAck(deliveryTag, true);\n        System.out.println(\"mail listener receive: \" + new String(message.getBody()));\n    }\n```\n\n\n\n当消息消费失败时，消费端给broker回复nack，如果consumer设置了requeue为false，则nack后broker会删除消息或者进入死信队列，否则消息会重新入队。\n\n\n\n### 持久化\n\n\n\n如果RabbitMQ服务异常导致重启，将会导致消息丢失。RabbitMQ提供了持久化的机制，将内存中的消息持久化到硬盘上，即使重启RabbitMQ，消息也不会丢失。\n\n\n\n消息持久化需要满足以下条件：\n\n\n\n1、消息设置持久化。发布消息前，设置投递模式delivery mode为2，表示消息需要持久化。\n\n\n\n2、Queue设置持久化。\n\n\n\n3、交换机设置持久化。\n\n\n\n当发布一条消息到交换机上时，Rabbit会先把消息写入持久化日志，然后才向生产者发送响应。一旦从队列中消费了一条消息的话并且做了确认，RabbitMQ会在持久化日志中移除这条消息。在消费消息前，如果RabbitMQ重启的话，服务器会自动重建交换机和队列，加载持久化日志中的消息到相应的队列或者交换机上，保证消息不会丢失。\n\n\n\n### 镜像队列\n\n\n\n当MQ发生故障时，会导致服务不可用。引入RabbitMQ的镜像队列机制，将queue镜像到集群中其他的节点之上。如果集群中的一个节点失效了，能自动地切换到镜像中的另一个节点以保证服务的可用性。\n\n\n\n通常每一个镜像队列都包含一个master和多个slave，分别对应于不同的节点。发送到镜像队列的所有消息总是被直接发送到master和所有的slave之上。除了publish外所有动作都只会向master发送，然后由master将命令执行的结果广播给slave，从镜像队列中的消费操作实际上是在master上执行的。\n\n\n\n## 8.消息重复消费怎么处理？\n\n\n\n消息重复的原因有两个：1.生产时消息重复，2.消费时消息重复。\n\n\n\n生产者发送消息给MQ，在MQ确认的时候出现了网络波动，生产者没有收到确认，这时候生产者就会重新发送这条消息，导致MQ会接收到重复消息。\n\n\n\n消费者消费成功后，给MQ确认的时候出现了网络波动，MQ没有接收到确认，为了保证消息不丢失，MQ就会继续给消费者投递之前的消息。这时候消费者就接收到了两条一样的消息。由于重复消息是由于网络原因造成的，无法避免。\n\n\n\n解决方法：发送消息时让每个消息携带一个全局的唯一ID，在消费消息时先判断消息是否已经被消费过，保证消息消费逻辑的幂等性。具体消费过程为：\n\n\n\n1、消费者获取到消息后先根据id去查询redis/db是否存在该消息\n\n\n\n2、如果不存在，则正常消费，消费完毕后写入redis/db\n\n\n\n3、如果存在，则证明消息被消费过，直接丢弃\n\n\n\n## 9.消费端怎么进行限流？\n\n\n\n当 RabbitMQ 服务器积压大量消息时，队列里的消息会大量涌入消费端，可能导致消费端服务器奔溃。这种情况下需要对消费端限流。\n\n\n\nSpring RabbitMQ 提供参数 prefetch 可以设置单个请求处理的消息个数。如果消费者同时处理的消息到达最大值的时候，则该消费者会阻塞，不会消费新的消息，直到有消息 ack 才会消费新的消息。\n\n\n\n开启消费端限流：\n\n\n\n```properties\n##在单个请求中处理的消息个数，unack的最大数量\nspring.rabbitmq.listener.simple.prefetch=2\n```\n\n\n\n原生 RabbitMQ 还提供 prefetchSize 和 global 两个参数。Spring RabbitMQ没有这两个参数。\n\n\n\n```java\n//单条消息大小限制，0代表不限制\n//global：限制限流功能是channel级别的还是consumer级别。当设置为false，consumer级别，限流功能生效，设置为true没有了限流功能，因为channel级别尚未实现。\nvoid basicQos(int prefetchSize, int prefetchCount, boolean global) throws IOException;\n```\n\n\n\n## 10.什么是死信队列？\n\n\n\n消费失败的消息存放的队列。\n\n\n\n消息消费失败的原因：\n\n\n\n- 消息被拒绝并且消息没有重新入队（requeue=false）\n\n- 消息超时未消费\n\n- 达到最大队列长度\n\n\n\n设置死信队列的 exchange 和 queue，然后进行绑定：\n\n\n\n```java\n\t@Bean\n    public DirectExchange dlxExchange() {\n        return new DirectExchange(RabbitMqConfig.DLX_EXCHANGE);\n    }\n\n    @Bean\n    public Queue dlxQueue() {\n        return new Queue(RabbitMqConfig.DLX_QUEUE, true);\n    }\n\n    @Bean\n    public Binding bindingDeadExchange(Queue dlxQueue, DirectExchange deadExchange) {\n        return BindingBuilder.bind(dlxQueue).to(deadExchange).with(RabbitMqConfig.DLX_QUEUE);\n    }\n```\n\n\n\n在普通队列加上两个参数，绑定普通队列到死信队列。当消息消费失败时，消息会被路由到死信队列。\n\n\n\n```java\n    @Bean\n    public Queue sendSmsQueue() {\n        Map<String,Object> arguments = new HashMap<>(2);\n        // 绑定该队列到私信交换机\n        arguments.put(\"x-dead-letter-exchange\", RabbitMqConfig.DLX_EXCHANGE);\n        arguments.put(\"x-dead-letter-routing-key\", RabbitMqConfig.DLX_QUEUE);\n        return new Queue(RabbitMqConfig.MAIL_QUEUE, true, false, false, arguments);\n    }\n```\n\n\n\n生产者完整代码：\n\n\n\n```java\n@Component\n@Slf4j\npublic class MQProducer {\n\n    @Autowired\n    RabbitTemplate rabbitTemplate;\n\n    @Autowired\n    RandomUtil randomUtil;\n\n    @Autowired\n    UserService userService;\n\n    final RabbitTemplate.ConfirmCallback confirmCallback = (CorrelationData correlationData, boolean ack, String cause) -> {\n            log.info(\"correlationData: \" + correlationData);\n            log.info(\"ack: \" + ack);\n            if(!ack) {\n                log.info(\"异常处理....\");\n            }\n    };\n\n\n    final RabbitTemplate.ReturnCallback returnCallback = (Message message, int replyCode, String replyText, String exchange, String routingKey) ->\n            log.info(\"return exchange: \" + exchange + \", routingKey: \"\n                    + routingKey + \", replyCode: \" + replyCode + \", replyText: \" + replyText);\n\n    public void sendMail(String mail) {\n        //貌似线程不安全 范围100000 - 999999\n        Integer random = randomUtil.nextInt(100000, 999999);\n        Map<String, String> map = new HashMap<>(2);\n        String code = random.toString();\n        map.put(\"mail\", mail);\n        map.put(\"code\", code);\n\n        MessageProperties mp = new MessageProperties();\n        //在生产环境中这里不用Message，而是使用 fastJson 等工具将对象转换为 json 格式发送\n        Message msg = new Message(\"tyson\".getBytes(), mp);\n        msg.getMessageProperties().setExpiration(\"3000\");\n        //如果消费端要设置为手工 ACK ，那么生产端发送消息的时候一定发送 correlationData ，并且全局唯一，用以唯一标识消息。\n        CorrelationData correlationData = new CorrelationData(\"1234567890\"+new Date());\n\n        rabbitTemplate.setMandatory(true);\n        rabbitTemplate.setConfirmCallback(confirmCallback);\n        rabbitTemplate.setReturnCallback(returnCallback);\n        rabbitTemplate.convertAndSend(RabbitMqConfig.MAIL_QUEUE, msg, correlationData);\n\n        //存入redis\n        userService.updateMailSendState(mail, code, MailConfig.MAIL_STATE_WAIT);\n    }\n}\n```\n\n\n\n消费者完整代码：\n\n\n\n```java\n@Slf4j\n@Component\npublic class DeadListener {\n\n    @RabbitListener(queues = RabbitMqConfig.DLX_QUEUE)\n    public void onMessage(Message message, Channel channel) throws IOException {\n\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long deliveryTag = message.getMessageProperties().getDeliveryTag();\n        //手工ack\n        channel.basicAck(deliveryTag,false);\n        System.out.println(\"receive--1: \" + new String(message.getBody()));\n    }\n}\n```\n\n\n\n当普通队列中有死信时，RabbitMQ 就会自动的将这个消息重新发布到设置的死信交换机去，然后被路由到死信队列。可以监听死信队列中的消息做相应的处理。\n\n\n\n## 11.说说pull模式\n\n\n\npull模式主要是通过channel.basicGet方法来获取消息，示例代码如下：\n\n\n\n```java\nGetResponse response = channel.basicGet(QUEUE_NAME, false);\nSystem.out.println(new String(response.getBody()));\nchannel.basicAck(response.getEnvelope().getDeliveryTag(),false);\n```\n\n\n\n## 12.怎么设置消息的过期时间？\n\n\n\n在生产端发送消息的时候可以给消息设置过期时间，单位为毫秒(ms)\n\n\n\n```java\nMessage msg = new Message(\"tyson\".getBytes(), mp);\nmsg.getMessageProperties().setExpiration(\"3000\");\n```\n\n\n\n也可以在创建队列的时候指定队列的ttl，从消息入队列开始计算，超过该时间的消息将会被移除。","tags":["我要进大厂","面试","RabbitMQ"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之Redisson篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Redisson篇/","content":"\n![img](大厂面试之Redisson篇.assets/1678285942239-61b85c9b-1d8d-436f-8105-1d24050d5c77.png)\n\n\n\n在一个分布式系统中，由于涉及到多个实例同时对同一个资源加锁的问题，像传统的synchronized、ReentrantLock等单进程情况加锁的api就不再适用，需要使用分布式锁来保证多服务实例之间加锁的安全性。常见的分布式锁的实现方式有zookeeper和redis等。而由于redis分布式锁相对于比较简单，在实际的项目中，redis分布式锁被用于很多实际的业务场景中。\n\n\n\nredis分布式锁的实现中又以Redisson比较出名，所以本文来着重看一下Redisson是如何实现分布式锁的，以及Redisson提供了哪些其它的功能。\n\n\n\n## **一、如何保证加锁的原子性**\n\n\n\n说到redis的分布式锁，可能第一时间就想到了setNx命令，这个命令保证一个key同时只能有一个线程设置成功，这样就能实现加锁的互斥性。但是Redisson并没有通过setNx命令来实现加锁，而是自己实现了一套完成的加锁的逻辑。\n\n\n\nRedisson的加锁使用代码如下，接下来会有几节着重分析一下这段代码逻辑背后实现的原理。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285944365-f680eb2e-1228-45ec-b660-bfe8d3e1f7bb.png)\n\n\n\n先通过RedissonClient，传入锁的名称，拿到一个RLock，然后通过RLock实现加锁和释放锁。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285946558-c2eca9a0-37ef-40b6-91c6-ed434c611aa8.png)\n\n\n\ngetLock获得的RLock接口的实现是RedissonLock，所以我们看一下RedissonLock对lock()方法的实现。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285948170-b7a92120-3907-424a-88d1-b48cfe66c39b.png)\n\n\n\nlock方法会调用重载的lock方法，传入的leaseTime为-1，调用到这个lock方法，之后会调用tryAcquire实现加锁的逻辑。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285949805-79a66e8d-d4cb-4a23-9f67-73f8cff8166b.png)\n\n\n\ntryAcquire最后会调到tryAcquireAsync方法，传入了leaseTime和当前加锁线程的id。tryAcquire和tryAcquireAsync的区别就是tryAcquireAsync是异步执行，而tryAcquire是同步等待tryAcquireAsync的结果，也就是异步转同步的过程。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285951577-99f776c7-8214-4762-b38a-28e57502d5ac.png)\n\n\n\ntryAcquireAsync方法会根据leaseTime是不是-1来判断使用哪个分支加锁，其实不论走哪个分支，最后都是调用tryLockInnerAsync方法来实现加锁，只不过是参数不同罢了。但是我们这里的leaseTime其实就是-1，所以会走下面的分支，尽管传入到tryAcquireAsync的leaseTime是-1，但是在调用tryLockInnerAsync方法传入的leaseTime参数是internalLockLeaseTime，默认是30s。\n\n\n\ntryLockInnerAsync方法。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285953709-d3e33df2-28a8-46b9-976c-b7ffe204ee2e.png)\n\n\n\n通过tryLockInnerAsync方法的实现可以看出，最终加锁是通过一段lua脚本来实现加锁的，redis在执行lua脚本的时候是可以保证加锁的原子性的，所以Redisson实现加锁的原子性是依赖lua脚本来实现的。其实对于RedissonLock这个实现来说，最终实现加锁的逻辑都是通过tryLockInnerAsync来实现的。\n\n\n\n来一张图总结一下lock方法加锁的调用逻辑。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285955866-5c840e02-d381-427f-9a55-9b474c4ae6a0.png)\n\n\n\n## **二、如何通过lua脚本实现加锁**\n\n\n\n通过上面分析可以看出，redis是通过执行lua脚本来实现加锁，保证加锁的原子性。那么接下来分析一下这段lua脚本干了什么。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285957708-23602056-b336-4f46-9143-4230aaf035c0.png)\n\n\n\n其中这段脚本中的lua脚本中的参数的意思：\n\n\n\n- KEYS[1]：就是锁的名称，对于我们的demo来说，就是myLock\n\n- ARGV[1]：就是锁的过期时间，不指定的话默认是30s\n\n- ARGV[2]：代表了加锁的唯一标识，由UUID和线程id组成。一个Redisson客户端一个UUID，UUID代表了一个唯一的客户端。所以由UUID和线程id组成了加锁的唯一标识，可以理解为某个客户端的某个线程加锁。\n\n\n\n那么这些参数是怎么传过去的呢，其实是在这里。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285959473-d04d804a-71b6-451e-91c6-a0229679d6a5.png)\n\n\n\n- getName：方法就是获取锁的名称\n\n- leaseTime：就是传入的锁的过期时间，如果指定超时时间就是指定的时间，没指定默认是30s\n\n- getLockName：就是获取加锁的客户端线程的唯一标识。\n\n\n\n分析一下这段lua的加锁的逻辑。\n\n\n\n1）先调用redis的exists命令判断加锁的key存不存在，如果不存在的话，那么就进入if。不存在的意思就是还没有某个客户端的某个线程来加锁，第一次加锁肯定没有人来加锁，于是第一次if条件成立。\n\n\n\n2）然后调用redis的hincrby的命令，设置加锁的key和加锁的某个客户端的某个线程，加锁次数设置为1，加锁次数很关键，是实现可重入锁特性的一个关键数据。用hash数据结构保存。hincrby命令完成后就形成如下的数据结构。\n\n\n\n```java\nmyLock:{\n\n\"b983c153-7421-469a-addb-44fb92259a1b:1\":1\n\n}\n```\n\n\n\n3）最后调用redis的pexpire的命令，将加锁的key过期时间设置为30s。\n\n\n\n从这里可以看出，第一次有某个客户端的某个线程来加锁的逻辑还是挺简单的，就是判断有没有人加过锁，没有的话就自己去加锁，设置加锁的key，再存一下加锁的线程和加锁次数，设置一下锁的过期时间为30s。\n\n\n\n画一张图来看一下lua脚本加锁的逻辑干了什么。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678285962441-e6ab9f12-b269-43f6-ac79-3df5fb5042cb.png)\n\n\n\n至于第二段if是干什么的，我们后面再说。\n\n\n\n## **三、为什么需要设置加锁key的过期时间**\n\n\n\n通过上面的加锁逻辑可以知道，虽然我们没有手动设置锁的过期时间，但是Redisson默认会设置一个30s的过期时间，为什么需要过期时间呢？\n\n\n\n主要原因是为了防止死锁。当某个客户端获取到锁，还没来得及主动释放锁，那么此时假如客户端宕机了，又或者是释放锁失败了，那么如果没有设置过期时间，那么这个锁key会一直在，那么其它线程来加锁的时候会发现key已经被加锁了，那么其它线程一直会加锁失败，就会产生死锁的问题。\n\n\n\n## **四、如何自动延长加锁时间**\n\n\n\n通过上面的分析我们都知道，在加锁的时候，就算没有指定锁的过期时间，Redisson默认也会给锁设置30s的过期时间，主要是用来防止死锁。\n\n\n\n虽然设置了默认过期时间能够防止死锁，但是这也有一个问题，如果在30s内，任务没有结束，但是锁已经被释放了，失效了，一旦有其它线程加锁成功，那么就完全有可能出现线程安全数据错乱的问题。\n\n\n\n所以Redisson对于这种未指定超时时间的加锁，就实现了一个叫watchdog机制，也就是看门狗机制来自动延长加锁的时间。\n\n\n\n在客户端通过tryLockInnerAsync方法加锁成功之后，如果你没有指定锁过期的时间，那么客户端会起一个定时任务，来定时延长加锁时间，默认每10s执行一次。所以watchdog的本质其实就是一个定时任务。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286038735-cf02ff02-359d-4f70-820c-bc0c59acc9b7.png)\n\n\n\n最后会定期执行如下的一段lua脚本来实现加锁时间的延长。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286040535-d35c822f-6ba0-43f3-9fb5-aa3c285e3904.png)\n\n\n\n解释一下这段lua脚本中参数的意思，其实是跟加锁的参数的意思是一样\n\n\n\n- KEYS[1]：就是锁的名称，对于我们的demo来说，就是myLock\n\n- ARGV[1]：就是锁的过期时间\n\n- ARGV[2]：代表了加锁的唯一标识，b983c153-7421-469a-addb-44fb92259a1b:1。\n\n\n\n这段lua脚本的意思就是判断来续约的线程跟加锁的线程是同一个，如果是同一个，那么将锁的过期时间延长到30s，然后返回1，代表续约成功，不是的话就返回0，代表续约失败，下一次定时任务也就不会执行了。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286042597-7c8e0318-a5b8-4de7-b9e9-a436b9cb3f3a.png)\n\n\n\n注意：因为有了看门狗机制，所以说如果你没有设置过期时间（超时自动释放锁的逻辑后面会说）并且没有主动去释放锁，那么这个锁就永远不会被释放，因为定时任务会不断的去延长锁的过期时间，造成死锁的问题。但是如果发生宕机了，是不会造成死锁的，因为宕机了，服务都没了，那么看门狗的这个定时任务就没了，也自然不会去续约，等锁自动过期了也就自动释放锁了，跟上述说的为什么需要设置过期时间是一样的。\n\n\n\n## **五、如何实现可重入加锁**\n\n\n\n可重入加锁的意思就是同一个客户端同一个线程也能多次对同一个锁进行加锁。\n\n\n\n也就是同时可以执行多次 lock方法，流程都是一样的，最后也会调用到lua脚本，所以可重入加锁的逻辑最后也是通过加锁的lua脚本来实现的。\n\n\n\n上面加锁逻辑的lua脚本的前段我上面已经说过，下半部分也就是可重入加锁的逻辑。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286044838-6dceedcf-022a-42b1-812a-8ee2f14ca683.png)\n\n\n\n下面这段if的意思就是，判断当前已经加锁的key对应的加锁线程跟要来加锁的线程是不是同一个，如果是的话，就将这个线程对应的加锁次数加1，也就实现了可重入加锁，同时返回nil回去。\n\n\n\n可重入加锁成功之后，加锁key和对应的值可能是这样。\n\n\n\n```java\nmyLock:{\n\n\"b983c153-7421-469a-addb-44fb92259a1b:1\":2\n\n}\n```\n\n\n\n所以加锁lua脚本的第二段if的逻辑其实是实现可重入加锁的逻辑。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286046937-ee44b07a-e4a8-425b-87d7-155e368b0585.png)\n\n\n\n## **六、如何主动释放锁和避免其它线程释放了自己加的锁**\n\n\n\n当业务执行完成之后，肯定需要主动释放锁，那么为什么需要主动释放锁呢？\n\n\n\n第一，假设你任务执行完，没有手动释放锁，如果没有指定锁的超时时间，那么因为有看门狗机制，势必会导致这个锁无法释放，那么就可能造成死锁的问题。\n\n\n\n第二，如果你指定了锁超时时间（锁超时自动释放逻辑后面会说），虽然并不会造成死锁的问题，但是会造成资源浪费的问题。假设你设置的过期时间是30s，但是你的任务2s就完成了，那么这个锁还会白白被占有28s的时间，这28s内其它线程都无法成功加锁。\n\n\n\n所以任务完成之后，一定需要主动释放锁。\n\n\n\n那么Redisson是如何主动释放锁和避免其它线程释放了自己加的锁？\n\n\n\n主动释放锁是通过unlock方法来完成的，接下来就分析一下unlock方法的实现。unlock会调用unlockAsync，传入当然释放线程的id，代表了当前线程来释放锁，unlock其实也是将unlockAsync的异步操作转为同步操作。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286049150-8653227b-02ee-41ad-a26b-e797784f017c.png)\n\n\n\nunlockAsync最后会调用RedissonLock的unlockInnerAsync来实现释放锁的逻辑。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286050705-f75d2314-3002-467e-a2d2-168bd6ee8c27.png)\n\n\n\n也是执行一段lua脚本。\n\n\n\n1）先判断来释放锁的线程是不是加锁的线程，如果不是，那么直接返回nil，所以从这里可以看出，主要是通过一个if条件来防止线程释放了其它线程加的锁。\n\n\n\n2）如果来释放锁的线程是加锁的线程，那么就将加锁次数减1，然后拿到剩余的加锁次数 counter 变量。\n\n\n\n3）如果counter大于0，说明有重入加锁，锁还没有彻底的释放完，那么就设置一下锁的过期时间，然后返回0\n\n\n\n4）如果counter没大于0，说明当前这个锁已经彻底释放完了，于是就把锁对应的key给删除，然后发布一个锁已经释放的消息，然后返回1。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286053207-b267c8d3-c01f-46ff-a117-1bc36ee0f065.png)\n\n\n\n## **七、如何实现超时自动释放锁**\n\n\n\n前面我们说了不指定锁超时时间的话，那么会有看门狗线程不断的延长加锁时间，不会导致锁超时释放，自动过期。那么指定超时时间的话，是如何实现到了指定时间超时释放锁的呢？\n\n\n\n能够设置超时自动释放锁的方法。\n\n\n\n```java\nvoid lock(long leaseTime, TimeUnit unit)\nboolean tryLock(long waitTime, long leaseTime, TimeUnit unit)\n```\n\n\n\n通过传入leaseTime参数就可以指定锁超时的时间。\n\n\n\n无论指不指定超时时间，最终其实都会调用tryAcquireAsync方法，只不过当不指定超时时间时，leaseTime传入的是-1，也就是代表不指定超时时间，但是Redisson默认还是会设置30s的过期时间；当指定超时时间，那么leaseTime就是我们自己指定的时间，最终也是通过同一个加锁的lua脚本逻辑。\n\n\n\n指定和不指定超时时间的主要区别是，加锁成功之后的逻辑不一样，不指定超时时间时，会开启watchdog后台线程，不断的续约加锁时间，而指定超时时间，就不会去开启watchdog定时任务，这样就不会续约，加锁key到了过期时间就会自动删除，也就达到了释放锁的目的。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286055834-611497de-d646-40ee-bbe5-d07838f445e4.png)\n\n\n\n所以指定超时时间达到超时释放锁的功能主要还是通过redis自动过期来实现，因为指定了超时时间，加锁成功之后就不会开启watchdog机制来延长加锁的时间。\n\n\n\n在实际项目中，指不指定锁的超时时间是根据具体的业务来的，如果你能够比较准确的预估出代码执行的时间，那么可以指定锁超时释放时间来防止业务执行错误导致无法释放锁的问题，如果不能预估出代码执行的时间，那么可以不指定超时时间。\n\n\n\n## **八、如何实现不同线程加锁的互斥**\n\n\n\n上面我们分析了第一次加锁逻辑和可重入加锁的逻辑，因为lua脚本加锁的逻辑同时只有一个线程能够执行（redis是单线程的原因），所以一旦有线程加锁成功，那么另一个线程来加锁，前面两个if条件都不成立，最后通过调用redis的pttl命令返回锁的剩余的过期时间回去。\n\n\n\n这样，客户端就根据返回值来判断是否加锁成功，因为第一次加锁和可重入加锁的返回值都是nil，而加锁失败就返回了锁的剩余过期时间。\n\n\n\n所以加锁的lua脚本通过条件判断就实现了加锁的互斥操作，保证其它线程无法加锁成功。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286058207-4ae61891-a8ac-43b8-972c-e132391ec1ee.png)\n\n\n\n所以总的来说，加锁的lua脚本实现了第一次加锁、可重入加锁和加锁互斥的逻辑。\n\n\n\n## **九、加锁失败之后如何实现阻塞等待加锁**\n\n\n\n从上面分析，加锁失败之后，会走如下的代码。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286059779-fc863fdf-ea93-4988-b060-69ce377d48a3.png)\n\n\n\n从这里可以看出，最终会执行死循环（自旋）地的方式来不停地通过tryAcquire方法来尝试加锁，直到加锁成功之后才会跳出死循环，如果一直没有成功加锁，那么就会一直旋转下去，所谓的阻塞，实际上就是自旋加锁的方式。\n\n\n\n但是这种阻塞可能会产生问题，因为如果其它线程释放锁失败，那么这个阻塞加锁的线程会一直阻塞加锁，这肯定会出问题的。所以有没有能够可以指定阻塞的时间，如果超过一定时间还未加锁成功的话，那么就放弃加锁的方法。答案肯定是有的，接着往下看。\n\n\n\n## **十、如何实现阻塞等待一定时间还未加锁成功就放弃加锁**\n\n\n\n超时放弃加锁的方法\n\n\n\n```plain\nboolean tryLock(long waitTime, long leaseTime, TimeUnit unit)\nboolean tryLock(long time, TimeUnit unit)\n```\n\n\n\n通过waitTime参数或者time参数来指定超时时间。这两个方法的主要区别就是上面的方法支持指定锁超时时间，下面的方法不支持锁超时自动释放。\n\n\n\ntryLock(long time, TimeUnit unit)这个方法最后也是调用tryLock(long waitTime, long leaseTime, TimeUnit unit)方法的实现。代码如下。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286062351-ac78d153-2c3c-46f4-b8e9-38eac116fc74.png)\n\n\n\n其实通过源码就可以看出是怎么实现一定时间之内还未获取到锁就放弃加锁的逻辑，其实相比于一直获取锁，主要是加了超时的判断，如果超时了，那么就退出循环，放弃加锁，\n\n\n\n## **十一、如何实现公平锁**\n\n\n\n**1）什么是公平锁**\n\n\n\n所谓的公平锁就是指线程成功加锁的顺序跟线程来加锁的顺序是一样，实现了先来先成功加锁的特性，所以叫公平锁。就跟排队一样，不插队才叫公平。\n\n\n\n前面几节讲的RedissonLock的实现是非公平锁，但是里面的一些机制，比如看门狗都是一样的。\n\n\n\n**2）公平锁和非公平锁的比较**\n\n\n\n公平锁的优点是按序平均分配锁资源，不会出现线程饿死的情况，它的缺点是按序唤醒线程的开销大，执行性能不高。非公平锁的优点是执行效率高，谁先获取到锁，锁就属于谁，不会“按资排辈”以及顺序唤醒，但缺点是资源分配随机性强，可能会出现线程饿死的情况。\n\n\n\n**3）如何使用公平锁？**\n\n\n\n通过RedissonClient的getFairLock就可以获取到公平锁。Redisson对于公平锁的实现是RedissonFairLock类，通过RedissonFairLock来加锁，就能实现公平锁的特性，使用代码如下。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286071816-d66e0ee6-36ba-4d9c-9b03-94cd680fd0c4.png)\n\n\n\nRedissonFairLock承了RedissonLock，主要是重写了tryLockInnerAsync方法，也就是加锁逻辑的方法。\n\n\n\n下面来分析一下RedissonFairLock的加锁逻辑。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286073662-b29d9509-818d-441c-81fe-080bbe491658.png)\n\n\n\n这段加锁的逻辑很长，我就简单说一下这段lua脚本干了啥。\n\n\n\n当线程来加锁的时候，如果加锁失败了，那么会将线程扔到一个set集合中，这样就按照加锁的顺序给线程排队，set集合的头部的线程就代表了接下来能够加锁成功的线程。当有线程释放了锁之后，其它加锁失败的线程就会来继续加锁，加锁之前会先判断一下set集合的头部的线程跟当前要加锁的线程是不是同一个，如果是的话，那就加锁成功，如果不是的话，那么就加锁失败，这样就实现了加锁的顺序性。\n\n\n\n当然这段lua脚本还做了一些其它细节的事，这里就不再赘述。\n\n\n\n## **十二、如何实现读写锁**\n\n\n\n在实际的业务场景中，其实会有很多读多写少的场景，那么对于这种场景来说，使用独占锁来加锁，在高并发场景下会导致大量的线程加锁失败，阻塞，对系统的吞吐量有一定的影响，为了适配这种读多写少的场景，Redisson也实现了读写锁的功能。\n\n\n\n读写锁的特点：\n\n\n\n- 读与读是共享的，不互斥\n\n- 读与写互斥\n\n- 写与写互斥\n\n\n\nRedisson使用读写锁的代码。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286075818-13ace27c-b804-45a7-81ab-316258ad6d40.png)\n\n\n\nRedisson通过RedissonReadWriteLock类来实现读写锁的功能，通过这个类可以获取到读锁或者写锁，所以真正的加锁的逻辑是由读锁和写锁实现的。\n\n\n\n那么Redisson是如何具体实现读写锁的呢？\n\n\n\n前面说过，加锁成功之后会在redis中维护一个hash的数据结构，存储加锁线程和加锁次数。在读写锁的实现中，会往hash数据结构中多维护一个mode的字段，来表示当前加锁的模式。\n\n\n\n所以能够实现读写锁，最主要是因为维护了一个加锁模式的字段mode，这样有线程来加锁的时候，就能根据当前加锁的模式结合读写的特性来判断要不要让当前来加锁的线程加锁成功。\n\n\n\n- 如果没有加锁，那么不论是读锁还是写锁都能加成功，成功之后根据锁的类型维护mode字段。\n\n- 如果模式是读锁，那么加锁线程是来加读锁的，就让它加锁成功。\n\n- 如果模式是读锁，那么加锁线程是来加写锁的，就让它加锁失败。\n\n- 如果模式是写锁，那么加锁线程是来加写锁的，就让它加锁失败（加锁线程自己除外）。\n\n- 如果模式是写锁，那么加锁线程是来加读锁的，就让它加锁失败（加锁线程自己除外）。\n\n\n\n## **十三、如何实现批量加锁(联锁)**\n\n\n\n批量加锁的意思就是同时加几个锁，只有这些锁都算加成功了，才是真正的加锁成功。\n\n\n\n比如说，在一个下单的业务场景中，同时需要锁定订单、库存、商品，基于这种需要锁多种资源的场景中，Redisson提供了批量加锁的实现，对应的实现类是RedissonMultiLock。\n\n\n\nRedisson提供了批量加锁使用代码如下。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286078350-89f41863-5d5b-4b3f-b97d-fd0072d83484.png)\n\n\n\nRedisson对于批量加锁的实现其实很简单，源码如下\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286080173-52c0c120-c147-4026-bb87-fbef1aba5f9c.png)\n\n\n\n就是根据顺序去依次调用传入myLock1、myLock2、myLock3 加锁方法，然后如果都成功加锁了，那么multiLock就算加锁成功。\n\n\n\n## **十四、Redis分布式锁存在的问题**\n\n\n\n对于单Redis实例来说，如果Redis宕机了，那么整个系统就无法工作了。所以为了保证Redis的高可用性，一般会使用主从或者哨兵模式。但是如果使用了主从或者哨兵模式，此时Redis的分布式锁的功能可能就会出现问题。\n\n\n\n举个例子来说，假如现在使用了哨兵模式，如图。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286082389-a8b76b53-6646-4957-a015-33defb0bda64.png)\n\n\n\n基于这种模式，Redis客户端会在master节点上加锁，然后异步复制给slave节点。\n\n\n\n但是突然有一天，因为一些原因，master节点宕机了，那么哨兵节点感知到了master节点宕机了，那么就会从slave节点选择一个节点作为主节点，实现主从切换，如图：\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286084487-523cc83b-9035-44ee-baec-cf84998425fc.png)\n\n\n\n这种情况看似没什么问题，但是不幸的事发生了，那就是客户端对原先的主节点加锁，加成之后还没有来得及同步给从节点，主节点宕机了，从节点变成了主节点，此时从节点是没有加锁信息的，如果有其它的客户端来加锁，是能够加锁成功的，这不是很坑爹么。。\n\n\n\n那么如何解决这种问题呢？Redis官方提供了一种叫RedLock的算法，Redisson刚好实现了这种算法，接着往下看。\n\n\n\n## **十五、如何实现RedLock算法**\n\n\n\n在Redis的分布式环境中，我们假设有N个Redis master。这些节点完全互相独立，不存在主从复制或者其他集群协调机制。之前我们已经描述了在Redis单实例下怎么安全地获取和释放锁。我们确保将在每（N)个实例上使用此方法获取和释放锁。在这个样例中，我们假设有5个Redis master节点，这是一个比较合理的设置，所以我们需要在5台机器上面或者5台虚拟机上面运行这些实例，这样保证他们不会同时都宕掉。\n\n\n\n为了取到锁，客户端应该执行以下操作:\n\n\n\n1. 获取当前Unix时间，以毫秒为单位。\n\n1. 依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。\n\n1. 客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。\n\n1. 如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。\n\n1. 如果因为某些原因，获取锁失败（没有在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）。\n\n\n\nRedisson对RedLock算法的实现\n\n\n\n使用方法如下。\n\n\n\n```plain\nRLock lock1 = redissonInstance1.getLock(\"lock1\");\nRLock lock2 = redissonInstance2.getLock(\"lock2\");\nRLock lock3 = redissonInstance3.getLock(\"lock3\");\n \nRedissonRedLock lock = new RedissonRedLock(lock1, lock2, lock3);\n// 同时加锁：lock1 lock2 lock3\n// 红锁在大部分节点上加锁成功就算成功。\nlock.lock();\n...\nlock.unlock();\n```\n\n\n\nRedissonRedLock加锁过程如下：\n\n\n\n- 获取所有的redisson node节点信息，循环向所有的redisson node节点加锁，假设节点数为N，例子中N等于5。一个redisson node代表一个主从节点。\n\n- 如果在N个节点当中，有N/2 + 1个节点加锁成功了，那么整个RedissonRedLock加锁是成功的。\n\n- 如果在N个节点当中，小于N/2 + 1个节点加锁成功，那么整个RedissonRedLock加锁是失败的。\n\n- 如果中途发现各个节点加锁的总耗时，大于等于设置的最大等待时间，则直接返回失败。\n\n\n\nRedissonRedLock底层其实也就基于RedissonMultiLock实现的，RedissonMultiLock要求所有的加锁成功才算成功，RedissonRedLock要求只要有N/2 + 1个成功就算成功。\n\n\n\n![img](大厂面试之Redisson篇.assets/1678286087170-a40e30ab-b845-423c-aa20-1a2560f2ba84.png)","tags":["我要进大厂","面试","Redisson"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之Zookeeper篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Zookeeper篇/","content":"\n## 1.Zookeeper 是什么？能做什么？\n\n\n\nZookeeper 是一个**开源的**，是用于维护配置信息，命名，提供**分布式**同步和提供组服务的集中式服务。\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359277603-b5b69f98-9c1f-448a-b114-1a18f908b8cc.png)\n\n\n\n可以基于 Zookeeper 实现诸如**数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列**等功能。\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359279793-cea8a2fe-249c-42b2-85e6-b17a243e48ac.png)\n\n\n\nZookeeper 最常用的一个使用场景就是作为**注册中心**，生产者将自己提供的服务注册到 Zookeeper，然后消费者从 Zookeeper 中**拿到生产者的服务列表信息**，然后再去**调用生产者**的内容数据，比如 **Dubbo，Kafka** 都是使用 Zookeeper 作为注册中心的。\n\n\n\n## 2.说说 Zookeeper 的数据结构吧\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359282136-57a9f9c0-1ee4-4e30-bc1d-cd1adf5e6a29.png)\n\n\n\nZooKeeper 提供的名称空间与标准文件系统的名称空间非常相似。名称是由斜杠（“ /”）分隔的一系列路径元素。ZooKeeper 命名空间中的每个 znode 均由路径标识。**每个 znode 都有一个父对象**，其路径是 znode 的前缀，元素少一个；此规则的例外是 root（“ /”），它没有父项。此外，与标准文件系统完全一样，**如果 znode 有子节点，则无法删除它**。\n\n\n\nZooKeeper 与标准文件系统之间的主要区别在于，**每个 znode 都可以具有与之关联的数据**（每个文件也可以是目录，反之亦然），并且 znode 限于它们可以拥有的数据量。ZooKeeper 旨在存储协调数据：状态信息，配置，位置信息等。这种元信息通常以千字节（如果不是字节）来度量。**ZooKeeper 具有1M的内置完整性检查，以防止将其用作大型数据存储**，但是通常，它用于存储小得多的数据。\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359284368-e340a44b-ad0f-483b-9f4f-202cc8a4a7d2.png)\n\n\n\n**Znode的三种类型:**\n\n\n\n- **持久节点**（persistent node）节点会被持久\n\n- **临时节点**（ephemeral node），客户端断开连接后，ZooKeeper 会自动删除临时节点\n\n- **顺序节点**（sequential node），每次创建顺序节点时，ZooKeeper 都会在路径后面自动添加上10位的数字，从1开始，最大是2147483647 （2^32-1）\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359286605-0158dce7-a328-4562-b06d-68067f43dcb4.png)\n\n\n\n**Znode的四种形式:**\n\n\n\n- **持久节点**:如 create /test/a  \"hello\"，通过 create参数指定为持久节点\n\n- **持久顺序节点**:通过 create -s参数指定为顺序节点\n\n- **临时节点**:通过 create -e参数指定为顺序节点\n\n- **临时顺序节点**:通过 create -s -e参数指定为临时及顺序节点\n\n\n\n## 3.Znode里面都存储了什么？\n\n\n\nZnode包含了**存储数据(data)**、**访问权限(acl)**、**子节点引用(child)**、**节点状态信息(stat)**\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359288747-64c0ac73-1089-4a62-9cab-59e5fb43f5f1.png)\n\n\n\n**data**: znode存储的业务数据信息\n\n\n\n**acl**: 记录客户端对znode节点的访问权限，如IP等。\n\n\n\n**child**: 当前节点的子节点引用\n\n\n\n**stat**: 包含Znode节点的状态信息，比如事务id、版本号、时间戳等等。\n\n\n\n## 4.Zookeeper 的系统架构又是怎么样的？\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359291366-9c2e425c-0281-4255-850b-0d80d9511440.png)\n\n\n\nZooKeeper 分为**服务器端**（Server） 和**客户端**（Client），客户端可以连接到整个 ZooKeeper 服务的任意服务器上（除非 leaderServes 参数被显式设置，leader 不允许接受客户端连接），客户端使用并维护一个 **TCP 连接**，通过这个连接发送请求、接受响应、获取观察的事件以及发送信息。\n\n\n\n组成 ZooKeeper 服务的服务器必须彼此了解。它们维护一个内存中的状态图像，以及持久存储中的事务日志和快照，只要**大多数服务器可用，ZooKeeper 服务就可用**；\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359293005-e0f9cdba-c3c5-4b6b-91e2-cb53e481ee7c.png)\n\n\n\nZookeeper 集群中**Server有三种角色**，Leader、Follower 和 Observer\n\n\n\n- **Leader**:负责投投票的发起与决议，更新系统状态，写数据\n\n- **Follower**:用于接收客户端请求并用来返回结果，在选主过程中参与投票\n\n- **Observer**:可以接受客户端连接，将**写请求转发给leader**节点，但是不参与投票过程，只**同步leader状态**，主要存在目的就是**为了提高读取效率**\n\n\n\n将 server 分为三种是为了**避免太多的从节点参与过半写**的过程，导致影响性能，这样 Zookeeper 只要使用一个几台机器的小集群就可以实现高性能了，如果要横向扩展的话，只需要增加 Observer 节点即可。\n\n\n\nZookeeper 建议集群节点个数为奇数，只要**超过一半的机器**能够正常提供服务，那么整个集群都是可用的状态。\n\n\n\nZooKeeper 启动时，将从实例中选举一个 leader，**Leader 负责处理数据更新**等操作，一个更新操作成功的标志是当且仅当大多数 Server 在内存中成功修改数据。每个 Server 在内存中存储了一份数据。\n\n\n\nZookeeper 的数据一致性是依靠**ZAB协议**完成的。\n\n\n\n## 5.那你继续给我讲讲 ZAB 协议吧\n\n\n\nZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为 ZooKeeper 特殊设计的一种**支持崩溃恢复**的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n\n\nZAB 协议包括有两种模式，分别是 **崩溃恢复和消息广播**。\n\n\n\n1、**崩溃恢复**：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进人恢复模式并**选举产生新的 Leader** 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有**过半的机器与该 Leader 服务器完成了状态同步**之后，ZAB 协议**就会退出恢复模式**。剩下未同步完成的机器会继续同步，**直到同步完成并加入集群后该节点的服务才可用**。\n\n\n\n2、**消息广播**：当集群中**已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步**，那么整个服务框架就可以**进人消息广播模式**了。当一台同样遵守 ZAB 协议的服务器启动后加人到集群中时，如果此时集群中**已经存在一个 Leader 服务器在负责进行消息广播**，那么新加人的服务器就会**自觉地进人数据恢复模式**：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。ZooKeeper 设计成**只允许唯一的一个 Leader 服务器来进行事务请求**的处理。Leader 服务器在接收到客户端的事务请求后，会生成对应的事务提案并发起一轮广播协议；而如果集群中的**其他机器接收到客户端的事务**请求，那么这些非 Leader 服务器会**首先将这个事务请求转发给 Leader** 服务器。\n\n\n\n## 6.Zookeeper初始化是如何进行Leader选举的？\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359295689-6b0c6b6a-6506-4ad6-aa14-d45948010d7f.png)\n\n\n\n在集群初始化阶段，只有两台以以上的 ZK 启动才会发生leader选举，过程如下：\n\n\n\n(1) **每个 Server 发出一个投票**。初始选举 ZK1 和 ZK2 都会将自己作为 Leader 服务器来进行投票，每次投票会包含所推举的服务器的(**myid, ZXID**)，此时 ZK1 的投票为(1, 0)，ZK2 的投票为(2, 0)，然后各自**将这个投票发给集群中其他机器**。\n\n\n\n(2) 收到投票。集群的每个服务器收到投票后，首先**判断**该投票的**有效性**，如检查是否是本轮投票、是否来自 LOOKING 状态的服务器。\n\n\n\n(3) 处理投票。每个发起投票的服务器需要**将别人的投票和自己的投票进行比较**，规则如下:\n\n\n\n- 优先检查 ZXID。**ZXID 比较大的服务器优先作为 Leader**。**如果 ZXID 相同**，那么就比较 myid。**myid 较大的服务器作为Leader服务器**。\n\n\n\n(4) 统计投票。每次投票后，服务器都会统计投票信息，**判断是否已经有过半机器接受到相同的投票信息**，对于 ZK1、ZK2 而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出 ZK2 作为Leader。\n\n\n\n(5) 改变服务器状态。**一旦确定了 Leader，每个服务器就会更新自己的状态**，如果是Follower，那么就变更为 FOLLOWING，如果是 Leader，就变更为 LEADING。当新的 Zookeeper 节点 ZK3 启动时，发现已经有 Leader 了，不再选举，直接将直接的状态从 LOOKING 改为 FOLLOWING。\n\n\n\n## 7.如果Leader挂了，进入崩溃恢复，怎么选举Leader？\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359298155-2b6da59e-74f1-4e99-9c4a-0b53e717b39a.png)\n\n\n\n1、**变更状态**。Leader 挂后，余下的非 Observer 服务器都会讲自己的服务器状态变更为 LOOKING，然后开始进入 Leader 选举过程。\n\n\n\n2、每个**非 Observer** 的 Server 会**发出一个投票**。和启动过程一致。\n\n\n\n3、**接收**来自各个服务器的**投票**。与启动时过程相同。\n\n\n\n4、**处理投票**。与启动时过程相同。\n\n\n\n5、**统计投票**。与启动时过程相同。\n\n\n\n6、**改变服务器的状态**。与启动时过程相同。\n\n\n\n## 8.说说Wather监听机制和它的原理？\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359299813-55473a43-0f62-4a08-a1b6-cd157af1c390.png)\n\n\n\n具体的步骤如下:\n\n\n\n1、**服务注册**：Provider 启动时，会向 zookeeper 服务端**注册服务信息**，也就是创建一个节点。\n\n\n\n2、**服务发现**：Consumer 启动时，根据自身配置的依赖服务信息，向 zookeeper 服务端获取注册的服务信息并**设置 watch 监听**，获取到注册的服务信息之后，将服务提供者的信息**缓存在本地**，并进行服务的调用。\n\n\n\n3、**服务通知**：一旦服务提供者因某种原因宕机不再提供服务之后，客户端与 zookeeper **服务端断开**连接，zookeeper 服务端上服务提供者对应服务**节点会被删除**，随后 zookeeper 服务端会**异步向所有注册了该服务，且设置了 watch 监听的服务消费者**发出节点被删除的通知，消费者根据**收到的通知拉取最新服务列表**，**更新本地缓存**的服务列表。\n\n\n\n简单的理解就是 client 会对某个 znode 注册一个 watcher 事件，当该 **znode 发生变化**时，这些 client 会**收到 ZooKeeper 的通知**。\n\n\n\n**四个特性**：\n\n\n\n1、一次性：一旦一个Wather**触发**之后，Zookeeper**就会**将它从存储中**移除**，**如果还要继续监听**这个节点，就**需要**我们在客户端的监听回调中，**再次**对节点的监听watch事件**设置为True**。否则客户端只能接收到一次该节点的变更通知\n\n\n\n2、客户端串行：客户端的**Wather回调处理是串行同步**的过程，不要因为一个Wather的逻辑阻塞整个客户端\n\n\n\n3、轻量：Wather通知的单位是WathedEvent，**只包含通知状态、事件类型和节点路径，不包含具体的事件内容**，具体的时间内容需要客户端主动去重新获取数据\n\n\n\n4、异步:  Zookeeper服务器**发送watcher的通知事件到客户端是异步**的，不能期望能够监控到节点每次的变化，Zookeeper只能保证最终的一致性，而无法保证强一致性。\n\n\n\n## 9.Zookeeper有哪些特性呢？\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359301974-e02fd791-5bb1-4a9d-965d-2b2402c0aeeb.png)\n\n\n\n**顺序一致性**：leader会根据请求顺序生成 ZXID 来严格保证请求顺序的下发执行。\n\n\n\n**原子性**：所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，要么成功，要么就失败。\n\n\n\n**单一视图**：无论客户端连到哪一个 ZooKeeper 服务器上，看到的数据都是一致的。\n\n\n\n**可靠性**：一旦服务端成功地应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会被一直保留下来。\n\n\n\n**实时性**：Zookeeper 仅仅能保证在段时间内客户端最终一定能够从服务端上读取到最新的数据状态。\n\n\n\n## 10.Zookeeper 如何识别请求的先后顺序？\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359303980-9fe866e0-f449-4721-b57c-b7939cde3301.png)\n\n\n\nLeader 收到请求之后，会将每个请求分配一个全局唯一递增的事务ID：zxid，然后把请求放入到一个 **FIFO 的队列**中，之后就会按照 FIFO 的策略发送给所有的 Follower。\n\n\n\n## 11.选举 leader 后是怎么进行数据同步的\n\n\n\n![img](大厂面试之Zookeeper篇.assets/1676359306037-b25b5d96-f5a4-4ec8-b9b6-57daf6bfa4cc.png)\n\n\n\n前面提到写数据是由 leader 负责的，而 leader 会将每个请求分配一个 ZXID，放入一个队列中，依次执行，每次 leader  执行完一个请求后，会记录下执行的这个 ZXID。\n\n\n\n我们将这个队列中最大的 ZXID 称为 **maxZXID**，最小的 ZXID 称为 **minZXID**。\n\n\n\n将 Observer 和 follower 中最新的 ZXID **称为lastSyncZXID**\n\n\n\n****proposal : l其实就是将请求中的一些信息如请求头，请求体以及 ZXID 等信息封装到 proposal对象当中\\****\n\n\n\n**1、差异化同步**\n\n\n\n-  1).leader 向 Observer 和 follower 发送 DIFF 指令，之后就开始差异化同步 \n\n-  2).然后把差异数据 提议 proposal 发送给 Observer 和 follower , Observer 和 follower 返回ACK表示已经完成了同步 \n\n-  3).只要集群中过半的 Observer 和 follower 响应了 ACK 就发送一个 UPTODATE 命令 \n\n-  4).leader 返回 ACK，同步流程结束 \n\n- - **触发条件**:minZXID < lastSyncZXID < maxZXID\n\n- - **同步过程**:\n\n\n\n**2、回滚同步**\n\n\n\n-  1).直接回滚到 maxZXID \n\n- - **触发条件** maxZXID < lastSyncZXID\n\n- - **举个例子**：a，b，c三台服务服务器 a是leader，此时队列里面最大的 ZXID 为100，a 收到请求，该 ZXID 为101，还没来得及发送同步数据 a 就挂了，b 变为leader，然后 a 恢复了，此时就需要 a 先将之前 ZXID 为101的数据回滚\n\n\n\n**3、回滚+差异化同步**\n\n\n\n-  1).Observer 和 follower 将数据回滚 \n\n-  2).进行差异化同步 \n\n- - **触发条件**:如果Leader刚生成一个proposal，还没有来得及发送出去，此时Leader宕机，重新选举之后作为Follower，但是新的Leader没有这个proposal数据\n\n- - **举个例子**：a，b，c三台服务服务器 a是leader，此时队列里面最大的 ZXID 为100，a 收到请求，该 ZXID 为101，还没来得及发送同步数据 a 就挂了，b 变为leader，b 又处理了3个请求，则 b 队列中最大的 ZXID 为103，然后 a 恢复了，此时就需要 a 先将之前 ZXID 为101的数据回滚，再进行同步\n\n\n\n**4、全量同步**\n\n\n\n- 1).lastSyncZXID < minZXID\n\n- 2).Leader服务器上没有缓存队列，并且lastSyncZXID!=maxZXID \n\n- - **触发条件**\n\n- - **同步过程**：leader 向 Observer 和 follower 发送SNAP命令，进行数据全量同步\n\n\n\n## 12.Zookeeper 会有数据不一致的情况发生吗？\n\n\n\n还是会有的，因为 Zookeeper 采用的是**过半写**机制，意味着**3台服务器只要有两台写成功就代表整个集群写成功**，如果刚好有请求打在这台还**未写的服务器**上就查询不到该数据，就会有数据不一致的情况产生。","tags":["我要进大厂","面试","Zookeeper"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之RocketMQ篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之RocketMQ篇/","content":"\n## 1.为什么要使用消息队列呢？\n\n\n\n消息队列主要有三大用途，我们拿一个电商系统的下单举例：\n\n\n\n**解耦**：引入消息队列之前，下单完成之后，需要订单服务去调用库存服务减库存，调用营销服务加营销数据……引入消息队列之后，可以把订单完成的消息丢进队列里，下游服务自己去调用就行了，这样就完成了订单服务和其它服务的解耦合。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359151496-1e1c6e3c-dfb8-4062-b64c-c714714e7fad.png)\n\n\n\n**异步**：订单支付之后，我们要扣减库存、增加积分、发送消息等等，这样一来这个链路就长了，链路一长，响应时间就变长了。引入消息队列，除了`更新订单状态`，其它的都可以**异步**去做，这样一来就来，就能降低响应时间。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359161106-097b63db-7df5-4fdc-b0c6-93191ccc3dde.png)\n\n\n\n**削峰**：消息队列合一用来削峰，例如秒杀系统，平时流量很低，但是要做秒杀活动，秒杀的时候流量疯狂怼进来，我们的服务器，Redis，MySQL各自的承受能力都不一样，直接全部流量照单全收肯定有问题啊，严重点可能直接打挂了。\n\n\n\n我们可以把请求扔到队列里面，只放出我们服务能处理的流量，这样就能抗住短时间的大流量了。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359159655-1a873608-2dd7-4a2a-8c86-d83ddeb89fd5.png)\n\n\n\n解耦、异步、削峰，是消息队列最主要的三大作用。\n\n\n\n## 2.为什么要选择RocketMQ?\n\n\n\n市场上几大消息队列对比如下：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359163640-f4f7256c-6cae-4117-9166-9036456a38a9.png)\n\n\n\n**总结一下**：\n\n\n\n选择中间件的可以从这些维度来考虑：可靠性，性能，功能，可运维行，可拓展性，社区活跃度。目前常用的几个中间件，ActiveMQ作为“老古董”，市面上用的已经不多，其它几种：\n\n\n\nRabbitMQ：\n\n\n\n-  优点：轻量，迅捷，容易部署和使用，拥有灵活的路由配置 \n\n-  缺点：性能和吞吐量不太理想，不易进行二次开发 \n\n\n\nRocketMQ：\n\n\n\n- 优点：性能好，高吞吐量，稳定可靠，有活跃的中文社区\n\n- 缺点：兼容性上不是太好\n\n\n\nKafka：\n\n\n\n- 优点：拥有强大的性能及吞吐量，兼容性很好\n\n- 缺点：由于“攒一波再处理”导致延迟比较高\n\n\n\n我们的系统是面向用户的C端系统，具有一定的并发量，对性能也有比较高的要求，所以选择了低延迟、吞吐量比较高，可用性比较好的RocketMQ。\n\n\n\n## 3.RocketMQ有什么优缺点？\n\n\n\nRocketMQ优点：\n\n\n\n- 单机吞吐量：十万级\n\n- 可用性：非常高，分布式架构\n\n- 消息可靠性：经过参数优化配置，消息可以做到0丢失\n\n- 功能支持：MQ功能较为完善，还是分布式的，扩展性好\n\n- 支持10亿级别的消息堆积，不会因为堆积导致性能下降\n\n- 源码是Java，方便结合公司自己的业务二次开发\n\n- 天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况\n\n- **RoketMQ**在稳定性上可能更值得信赖，这些业务场景在阿里双11已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择**RocketMQ**\n\n\n\nRocketMQ缺点：\n\n\n\n- 支持的客户端语言不多，目前是Java及c++，其中c++不成熟\n\n- 没有在 MQ核心中去实现**JMS**等接口，有些系统要迁移需要修改大量代码\n\n\n\n## 4.消息队列有哪些消息模型？\n\n\n\n消息队列有两种模型：**队列模型**和**发布/订阅模型**。\n\n\n\n**队列模型**\n\n\n\n这是最初的一种消息队列模型，对应着消息队列“发-存-收”的模型。生产者往某个队列里面发送消息，一个队列可以存储多个生产者的消息，一个队列也可以有多个消费者，但是消费者之间是竞争关系，也就是说每条消息只能被一个消费者消费。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359168715-3eeb4345-de3c-4b05-add6-e63ff7113556.png)\n\n\n\n**发布/订阅模型**\n\n\n\n如果需要将一份消息数据分发给多个消费者，并且每个消费者都要求收到全量的消息。很显然，队列模型无法满足这个需求。解决的方式就是发布/订阅模型。\n\n\n\n在发布 - 订阅模型中，消息的发送方称为发布者（Publisher），消息的接收方称为订阅者（Subscriber），服务端存放消息的容器称为主题（Topic）。发布者将消息发送到主题中，订阅者在接收消息之前需要先“订阅主题”。“订阅”在这里既是一个动作，同时还可以认为是主题在消费时的一个逻辑副本，每份订阅中，订阅者都可以接收到主题的所有消息。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359170351-5586dc22-1e58-45c7-ad55-9248e838a59d.png)\n\n\n\n它和 “队列模式” 的异同：生产者就是发布者，队列就是主题，消费者就是订阅者，无本质区别。唯一的不同点在于：一份消息数据是否可以被多次消费。\n\n\n\n## 5.那RocketMQ的消息模型呢？\n\n\n\nRocketMQ使用的消息模型是标准的发布-订阅模型，在RocketMQ的术语表中，生产者、消费者和主题，与发布-订阅模型中的概念是完全一样的。\n\n\n\nRocketMQ本身的消息是由下面几部分组成：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359172230-39110103-3a6b-43fb-b4d3-4afa03f78741.png)\n\n\n\n**Message**\n\n\n\n**Message**（消息）就是要传输的信息。\n\n\n\n一条消息必须有一个主题（Topic），主题可以看做是你的信件要邮寄的地址。\n\n\n\n一条消息也可以拥有一个可选的标签（Tag）和额处的键值对，它们可以用于设置一个业务 Key 并在 Broker 上查找此消息以便在开发期间查找问题。\n\n\n\n**Topic**\n\n\n\n**Topic**（主题）可以看做消息的归类，它是消息的第一级类型。比如一个电商系统可以分为：交易消息、物流消息等，一条消息必须有一个 Topic 。\n\n\n\n**Topic** 与生产者和消费者的关系非常松散，一个 Topic 可以有0个、1个、多个生产者向其发送消息，一个生产者也可以同时向不同的 Topic 发送消息。\n\n\n\n一个 Topic 也可以被 0个、1个、多个消费者订阅。\n\n\n\n**Tag**\n\n\n\n**Tag**（标签）可以看作子主题，它是消息的第二级类型，用于为用户提供额外的灵活性。使用标签，同一业务模块不同目的的消息就可以用相同 Topic 而不同的 **Tag** 来标识。比如交易消息又可以分为：交易创建消息、交易完成消息等，一条消息可以没有 **Tag** 。\n\n\n\n标签有助于保持你的代码干净和连贯，并且还可以为 **RocketMQ** 提供的查询系统提供帮助。\n\n\n\n**Group**\n\n\n\nRocketMQ中，订阅者的概念是通过消费组（Consumer Group）来体现的。每个消费组都消费主题中一份完整的消息，不同消费组之间消费进度彼此不受影响，也就是说，一条消息被Consumer Group1消费过，也会再给Consumer Group2消费。\n\n\n\n消费组中包含多个消费者，同一个组内的消费者是竞争消费的关系，每个消费者负责消费组内的一部分消息。默认情况，如果一条消息被消费者Consumer1消费了，那同组的其他消费者就不会再收到这条消息。\n\n\n\n**Message Queue**\n\n\n\n**Message Queue**（消息队列），一个 Topic 下可以设置多个消息队列，Topic 包括多个 Message Queue ，如果一个 Consumer 需要获取 Topic下所有的消息，就要遍历所有的 Message Queue。\n\n\n\nRocketMQ还有一些其它的Queue——例如ConsumerQueue。\n\n\n\n**Offset**\n\n\n\n在Topic的消费过程中，由于消息需要被不同的组进行多次消费，所以消费完的消息并不会立即被删除，这就需要RocketMQ为每个消费组在每个队列上维护一个消费位置（Consumer Offset），这个位置之前的消息都被消费过，之后的消息都没有被消费过，每成功消费一条消息，消费位置就加一。\n\n\n\n也可以这么说，`Queue` 是一个长度无限的数组，**Offset** 就是下标。\n\n\n\nRocketMQ的消息模型中，这些就是比较关键的概念了。画张图总结一下：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359177217-fa688513-1880-45db-9a9a-97f043c5d820.png)\n\n\n\n## 6.消息的消费模式了解吗？\n\n\n\n消息消费模式有两种：**Clustering**（集群消费）和**Broadcasting**（广播消费）。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359178046-5f3b401e-dbfa-4b71-862b-44d241244515.png)\n\n\n\n默认情况下就是集群消费，这种模式下`一个消费者组共同消费一个主题的多个队列，一个队列只会被一个消费者消费`，如果某个消费者挂掉，分组内其它消费者会接替挂掉的消费者继续消费。\n\n\n\n而广播消费消息会发给消费者组中的每一个消费者进行消费。\n\n\n\n## 7.RoctetMQ基本架构了解吗？\n\n\n\n先看图，RocketMQ的基本架构：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359180377-154268ba-0358-43dd-b33a-f5e115647034.png)\n\n\n\nRocketMQ 一共有四个部分组成：NameServer，Broker，Producer 生产者，Consumer 消费者，它们对应了：发现、发、存、收，为了保证高可用，一般每一部分都是集群部署的。\n\n\n\n## 8.那能介绍一下这四部分吗？\n\n\n\n类比一下我们生活的邮政系统——\n\n\n\n邮政系统要正常运行，离不开下面这四个角色， 一是发信者，二 是收信者， 三是负责暂存传输的邮局， 四是负责协调各个地方邮局的管理机构。对应到 RocketMQ 中，这四个角色就是 Producer、 Consumer、 Broker 、NameServer。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359184359-7dedf125-c589-4aee-9ba0-ee5f8c07ec9e.png)\n\n\n\n### NameServer\n\n\n\nNameServer 是一个无状态的服务器，角色类似于 Kafka使用的 Zookeeper，但比 Zookeeper 更轻量。\n\n\n\n**特点**：\n\n\n\n- 每个 NameServer 结点之间是相互独立，彼此没有任何信息交互。\n\n- Nameserver 被设计成几乎是无状态的，通过部署多个结点来标识自己是一个伪集群，Producer 在发送消息前从 NameServer 中获取 Topic 的路由信息也就是发往哪个 Broker，Consumer 也会定时从 NameServer 获取 Topic 的路由信息，Broker 在启动时会向 NameServer 注册，并定时进行心跳连接，且定时同步维护的 Topic 到 NameServer。\n\n\n\n**功能主要有两个**：\n\n\n\n1、和Broker 结点保持长连接。\n\n\n\n2、维护 Topic 的路由信息。\n\n\n\n### Broker\n\n\n\n消息存储和中转角色，负责存储和转发消息。\n\n\n\nBroker 内部维护着一个个 Consumer Queue，用来存储消息的索引，真正存储消息的地方是 CommitLog（日志文件）。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359186834-c39aca1d-13e3-49ea-8ab8-98e7b01b12fb.png)\n\n\n\n单个 Broker 与所有的 Nameserver 保持着长连接和心跳，并会定时将 Topic 信息同步到 NameServer，和 NameServer 的通信底层是通过 Netty 实现的。\n\n\n\n### Producer\n\n\n\n消息生产者，业务端负责发送消息，由用户自行实现和分布式部署。\n\n\n\n**Producer**由用户进行分布式部署，消息由**Producer**通过多种负载均衡模式发送到**Broker**集群，发送低延时，支持快速失败。\n\n\n\n**RocketMQ** 提供了三种方式发送消息：同步、异步和单向\n\n\n\n- **同步发送**：同步发送指消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包。一般用于重要通知消息，例如重要通知邮件、营销短信。\n\n- **异步发送**：异步发送指发送方发出数据后，不等接收方发回响应，接着发送下个数据包，一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务。\n\n- **单向发送**：单向发送是指只负责发送消息而不等待服务器回应且没有回调函数触发，适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集。\n\n\n\n### Consumer\n\n\n\n消息消费者，负责消费消息，一般是后台系统负责异步消费。\n\n\n\n**Consumer**也由用户部署，支持PUSH和PULL两种消费模式，支持**集群消费**和**广播消费**，提供**实时的消息订阅机制**。\n\n\n\n**Pull**：拉取型消费者（Pull Consumer）主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程，所以 Pull 称为主动消费型。\n\n\n\n**Push**：推送型消费者（Push Consumer）封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现。所以 Push  称为被动消费类型，但其实从实现上看还是从消息服务器中拉取消息，不同于 Pull 的是 Push  首先要注册消费监听器，当监听器处触发后才开始消费消息。\n\n\n\n## 9.如何保证消息的可用性/可靠性/不丢失呢？\n\n\n\n消息可能在哪些阶段丢失呢？可能会在这三个阶段发生丢失：生产阶段、存储阶段、消费阶段。\n\n\n\n所以要从这三个阶段考虑：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359190120-cd05abf5-5cbc-4ff1-9cca-7a1d3ba734a5.png)\n\n\n\n### 生产\n\n\n\n在生产阶段，主要**通过请求确认机制，来保证消息的可靠传递**。\n\n\n\n1、同步发送的时候，要注意处理响应结果和异常。如果返回响应OK，表示消息成功发送到了Broker，如果响应失败，或者发生其它异常，都应该重试。\n\n\n\n2、异步发送的时候，应该在回调方法里检查，如果发送失败或者异常，都应该进行重试。\n\n\n\n3、如果发生超时的情况，也可以通过查询日志的API，来检查是否在Broker存储成功。\n\n\n\n### 存储\n\n\n\n存储阶段，可以通过**配置可靠性优先的 Broker 参数来避免因为宕机丢消息**，简单说就是可靠性优先的场景都应该使用同步。\n\n\n\n1、消息只要持久化到CommitLog（日志文件）中，即使Broker宕机，未消费的消息也能重新恢复再消费。\n\n\n\n2、Broker的刷盘机制：同步刷盘和异步刷盘，不管哪种刷盘都可以保证消息一定存储在pagecache中（内存中），但是同步刷盘更可靠，它是Producer发送消息后等数据持久化到磁盘之后再返回响应给Producer。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359192104-4a1ec703-951a-4b93-ac96-6e4472062522.png)\n\n\n\n3、Broker通过主从模式来保证高可用，Broker支持Master和Slave同步复制、Master和Slave异步复制模式，生产者的消息都是发送给Master，但是消费既可以从Master消费，也可以从Slave消费。同步复制模式可以保证即使Master宕机，消息肯定在Slave中有备份，保证了消息不会丢失。\n\n\n\n### 消费\n\n\n\n从Consumer角度分析，如何保证消息被成功消费？\n\n\n\nConsumer保证消息成功消费的关键在于确认的时机，不要在收到消息后就立即发送消费确认，而是应该在执行完所有消费业务逻辑之后，再发送消费确认。因为消息队列维护了消费的位置，逻辑执行失败了，没有确认，再去队列拉取消息，就还是之前的一条。\n\n\n\n## 10.如何处理消息重复的问题呢？\n\n\n\n对分布式消息队列来说，同时做到确保一定投递和不重复投递是很难的，就是所谓的“有且仅有一次” 。RocketMQ择了确保一定投递，保证消息不丢失，但有可能造成消息重复。\n\n\n\n处理消息重复问题，主要有业务端自己保证，主要的方式有两种：**业务幂等**和**消息去重**。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359194545-38e2fc62-e242-4714-9dbe-e010f4c514ac.png)\n\n\n\n**业务幂等**：第一种是保证消费逻辑的幂等性，也就是多次调用和一次调用的效果是一样的。这样一来，不管消息消费多少次，对业务都没有影响。\n\n\n\n**消息去重**：第二种是业务端，对重复的消息就不再消费了。这种方法，需要保证每条消息都有一个惟一的编号，通常是业务相关的，比如订单号，消费的记录需要落库，而且需要保证和消息确认这一步的原子性。\n\n\n\n具体做法是可以建立一个消费记录表，拿到这个消息做数据库的insert操作。给这个消息做一个唯一主键（primary key）或者唯一约束，那么就算出现重复消费的情况，就会导致主键冲突，那么就不再处理这条消息。\n\n\n\n## 11.怎么处理消息积压？\n\n\n\n发生了消息积压，这时候就得想办法赶紧把积压的消息消费完，就得考虑提高消费能力，一般有两种办法：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359196580-c164266a-ce5b-4bbc-97c7-ecce1f7cc35f.png)\n\n\n\n**消费者扩容**：如果当前Topic的Message Queue的数量大于消费者数量，就可以对消费者进行扩容，增加消费者，来提高消费能力，尽快把积压的消息消费玩。\n\n\n\n**消息迁移Queue扩容**：如果当前Topic的Message Queue的数量小于或者等于消费者数量，这种情况，再扩容消费者就没什么用，就得考虑扩容Message Queue。可以新建一个临时的Topic，临时的Topic多设置一些Message Queue，然后先用一些消费者把消费的数据丢到临时的Topic，因为不用业务处理，只是转发一下消息，还是很快的。接下来用扩容的消费者去消费新的Topic里的数据，消费完了之后，恢复原状。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359198415-42dd42e6-bbd8-4b7c-a498-c889219df6f8.png)\n\n\n\n## 12.顺序消息如何实现？\n\n\n\n顺序消息是指消息的消费顺序和产生顺序相同，在有些业务逻辑下，必须保证顺序，比如订单的生成、付款、发货，这个消息必须按顺序处理才行。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359200581-ba4eb743-8950-4666-a61a-523add132754.png)\n\n\n\n顺序消息分为全局顺序消息和部分顺序消息，全局顺序消息指某个 Topic 下的所有消息都要保证顺序；\n\n\n\n部分顺序消息只要保证每一组消息被顺序消费即可，比如订单消息，只要保证同一个订单 ID 个消息能按顺序消费即可。\n\n\n\n### 部分顺序消息\n\n\n\n部分顺序消息相对比较好实现，生产端需要做到把同 ID 的消息发送到同一个 Message Queue ；在消费过程中，要做到从同一个Message Queue读取的消息顺序处理——消费端不能并发处理顺序消息，这样才能达到部分有序。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359202404-12beaa34-9459-40f3-87d6-e068c2563989.png)\n\n\n\n发送端使用 MessageQueueSelector 类来控制 把消息发往哪个 Message Queue 。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359205695-4636e123-1762-44e0-8040-2a97c9fdaa75.png)\n\n\n\n消费端通过使用 MessageListenerOrderly 来解决单 Message Queue 的消息被并发处理的问题。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359208290-2b33ce57-caee-4580-b37c-dc313add0e3e.png)\n\n\n\n### 全局顺序消息\n\n\n\nRocketMQ 默认情况下不保证顺序，比如创建一个 Topic ，默认八个写队列，八个读队列，这时候一条消息可能被写入任意一个队列里；在数据的读取过程中，可能有多个 Consumer ，每个 Consumer 也可能启动多个线程并行处理，所以消息被哪个 Consumer 消费，被消费的顺序和写人的顺序是否一致是不确定的。\n\n\n\n要保证全局顺序消息， 需要先把 Topic 的读写队列数设置为 一，然后Producer Consumer 的并发设置，也要是一。简单来说，为了保证整个 Topic全局消息有序，只能消除所有的并发处理，各部分都设置成单线程处理 ，这时候就完全牺牲RocketMQ的高并发、高吞吐的特性了。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359212345-344587ec-2e2e-450f-a9fa-3226819dee71.png)\n\n\n\n## 13.如何实现消息过滤？\n\n\n\n有两种方案：\n\n\n\n一种是在 Broker 端按照 Consumer 的去重逻辑进行过滤，这样做的好处是避免了无用的消息传输到 Consumer 端，缺点是加重了 Broker 的负担，实现起来相对复杂。\n\n\n\n另一种是在 Consumer 端过滤，比如按照消息设置的 tag 去重，这样的好处是实现起来简单，缺点是有大量无用的消息到达了 Consumer 端只能丢弃不处理。\n\n\n\n一般采用Cosumer端过滤，如果希望提高吞吐量，可以采用Broker过滤。\n\n\n\n对消息的过滤有三种方式：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359214329-a61e7454-af35-46ab-8320-92766903ea97.png)\n\n\n\n根据Tag过滤：这是最常见的一种，用起来高效简单\n\n\n\n```java\nDefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_EXAMPLE\");\nconsumer.subscribe(\"TOPIC\", \"TAGA || TAGB || TAGC\");\n```\n\n\n\nSQL 表达式过滤：SQL表达式过滤更加灵活\n\n\n\n```java\nDefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_4\");\n// 只有订阅的消息有这个属性a, a >=0 and a <= 3\nconsumer.subscribe(\"TopicTest\", MessageSelector.bySql(\"a between 0 and 3\");\nconsumer.registerMessageListener(new MessageListenerConcurrently() {\n   @Override\n   public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n       return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n   }\n});\nconsumer.start();\n```\n\n\n\nFilter Server 方式：最灵活，也是最复杂的一种方式，允许用户自定义函数进行过滤\n\n\n\n## 14.延时消息了解吗？\n\n\n\n电商的订单超时自动取消，就是一个典型的利用延时消息的例子，用户提交了一个订单，就可以发送一个延时消息，1h后去检查这个订单的状态，如果还是未付款就取消订单释放库存。\n\n\n\nRocketMQ是支持延时消息的，只需要在生产消息的时候设置消息的延时级别：\n\n\n\n```java\n      // 实例化一个生产者来产生延时消息\n      DefaultMQProducer producer = new DefaultMQProducer(\"ExampleProducerGroup\");\n      // 启动生产者\n      producer.start();\n      int totalMessagesToSend = 100;\n      for (int i = 0; i < totalMessagesToSend; i++) {\n          Message message = new Message(\"TestTopic\", (\"Hello scheduled message \" + i).getBytes());\n          // 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)\n          message.setDelayTimeLevel(3);\n          // 发送消息\n          producer.send(message);\n      }\n```\n\n\n\n但是目前RocketMQ支持的延时级别是有限的：\n\n\n\n```java\nprivate String messageDelayLevel = \"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h\";\n```\n\n\n\n### RocketMQ怎么实现延时消息的？\n\n\n\n简单，八个字：`临时存储`+`定时任务`。\n\n\n\nBroker收到延时消息了，会先发送到主题（SCHEDULE_TOPIC_XXXX）的相应时间段的Message Queue中，然后通过一个定时任务轮询这些队列，到期后，把消息投递到目标Topic的队列中，然后消费者就可以正常消费这些消息。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359217644-ab2e499c-fc34-4902-a9ec-7e5375844ffd.png)\n\n\n\n## 15.怎么实现分布式消息事务的？半消息？\n\n\n\n半消息：是指暂时还不能被 Consumer 消费的消息，Producer 成功发送到 Broker 端的消息，但是此消息被标记为 “暂不可投递” 状态，只有等 Producer 端执行完本地事务后经过二次确认了之后，Consumer 才能消费此条消息。\n\n\n\n依赖半消息，可以实现分布式消息事务，其中的关键在于二次确认以及消息回查：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359220511-cea8e30e-d5e8-48c3-9050-a49d5e75654e.png)\n\n\n\n1、Producer 向 broker 发送半消息\n\n\n\n2、Producer 端收到响应，消息发送成功，此时消息是半消息，标记为 “不可投递” 状态，Consumer 消费不了。\n\n\n\n3、Producer 端执行本地事务。\n\n\n\n4、正常情况本地事务执行完成，Producer 向 Broker 发送 Commit/Rollback，如果是 Commit，Broker 端将半消息标记为正常消息，Consumer 可以消费，如果是 Rollback，Broker 丢弃此消息。\n\n\n\n5、异常情况，Broker 端迟迟等不到二次确认。在一定时间后，会查询所有的半消息，然后到 Producer 端查询半消息的执行情况。\n\n\n\n6、Producer 端查询本地事务的状态\n\n\n\n7、根据事务的状态提交 commit/rollback 到 broker 端。（5，6，7 是消息回查）\n\n\n\n8、消费者段消费到消息之后，执行本地事务，执行本地事务。\n\n\n\n## 16.死信队列知道吗？\n\n\n\n死信队列用于处理无法被正常消费的消息，即死信消息。\n\n\n\n当一条消息初次消费失败，**消息队列 RocketMQ 会自动进行消息重试**；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列 RocketMQ 不会立刻将消息丢弃，而是将其发送到该**消费者对应的特殊队列中**，该特殊队列称为**死信队列**。\n\n\n\n**死信消息的特点**：\n\n\n\n- 不会再被消费者正常消费。\n\n- 有效期与正常消息相同，均为 3 天，3 天后会被自动删除。因此，需要在死信消息产生后的 3 天内及时处理。\n\n\n\n**死信队列的特点**：\n\n\n\n- 一个死信队列对应一个 Group ID， 而不是对应单个消费者实例。\n\n- 如果一个 Group ID 未产生死信消息，消息队列 RocketMQ 不会为其创建相应的死信队列。\n\n- 一个死信队列包含了对应 Group ID 产生的所有死信消息，不论该消息属于哪个 Topic。\n\n\n\nRocketMQ 控制台提供对死信消息的查询、导出和重发的功能。\n\n\n\n## 17.如何保证RocketMQ的高可用？\n\n\n\nNameServer因为是无状态，且不相互通信的，所以只要集群部署就可以保证高可用。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359223269-a8f56974-097e-4cca-9c9a-b72c40ebb7cc.png)\n\n\n\nRocketMQ的高可用主要是在体现在Broker的读和写的高可用，Broker的高可用是通过`集群`和`主从`实现的。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359224841-e25a59bd-fda2-40d8-ae7a-809ab2197bce.png)\n\n\n\nBroker可以配置两种角色：Master和Slave，Master角色的Broker支持读和写，Slave角色的Broker只支持读，Master会向Slave同步消息。\n\n\n\n也就是说Producer只能向Master角色的Broker写入消息，Cosumer可以从Master和Slave角色的Broker读取消息。\n\n\n\nConsumer 的配置文件中，并不需要设置是从 Master 读还是从 Slave读，当 Master 不可用或者繁忙的时候， Consumer 的读请求会被自动切换到从 Slave。有了自动切换 Consumer 这种机制，当一个 Master 角色的机器出现故障后，Consumer 仍然可以从 Slave 读取消息，不影响 Consumer 读取消息，这就实现了读的高可用。\n\n\n\n如何达到发送端写的高可用性呢？在创建 Topic 的时候，把 Topic 的多个Message Queue 创建在多个 Broker 组上（相同 Broker 名称，不同 brokerId机器组成 Broker 组），这样当 Broker 组的 Master 不可用后，其他组Master 仍然可用， Producer 仍然可以发送消息 RocketMQ 目前还不支持把Slave自动转成 Master ，如果机器资源不足，需要把 Slave 转成 Master ，则要手动停止 Slave 色的 Broker ，更改配置文件，用新的配置文件启动 Broker。\n\n\n\n## 18.说一下RocketMQ的整体工作流程？\n\n\n\n简单来说，RocketMQ是一个分布式消息队列，也就是`消息队列`+`分布式系统`。\n\n\n\n作为消息队列，它是`发`-`存`-`收`的一个模型，对应的就是Producer、Broker、Cosumer；作为分布式系统，它要有服务端、客户端、注册中心，对应的就是Broker、Producer/Consumer、NameServer\n\n\n\n所以我们看一下它主要的工作流程：RocketMQ由NameServer注册中心集群、Producer生产者集群、Consumer消费者集群和若干Broker（RocketMQ进程）组成：\n\n\n\n1、Broker在启动的时候去向所有的NameServer注册，并保持长连接，每30s发送一次心跳\n\n\n\n2、Producer在发送消息的时候从NameServer获取Broker服务器地址，根据负载均衡算法选择一台服务器来发送消息\n\n\n\n3、Conusmer消费消息的时候同样从NameServer获取Broker地址，然后主动拉取消息来消费\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359227662-0db278bf-ebd6-4d8b-8341-4589d19f9c69.png)\n\n\n\n## 19.为什么RocketMQ不使用Zookeeper作为注册中心呢？\n\n\n\nKafka我们都知道采用Zookeeper作为注册中心——当然也开始逐渐去Zookeeper，RocketMQ不使用Zookeeper其实主要可能从这几方面来考虑：\n\n\n\n1、基于可用性的考虑，根据CAP理论，同时最多只能满足两个点，而Zookeeper满足的是CP，也就是说Zookeeper并不能保证服务的可用性，Zookeeper在进行选举的时候，整个选举的时间太长，期间整个集群都处于不可用的状态，而这对于一个注册中心来说肯定是不能接受的，作为服务发现来说就应该是为可用性而设计。\n\n\n\n2、基于性能的考虑，NameServer本身的实现非常轻量，而且可以通过增加机器的方式水平扩展，增加集群的抗压能力，而Zookeeper的写是不可扩展的，Zookeeper要解决这个问题只能通过划分领域，划分多个Zookeeper集群来解决，首先操作起来太复杂，其次这样还是又违反了CAP中的A的设计，导致服务之间是不连通的。\n\n\n\n3、持久化的机制来带的问题，ZooKeeper 的 ZAB 协议对每一个写请求，会在每个 ZooKeeper  节点上保持写一个事务日志，同时再加上定期的将内存数据镜像（Snapshot）到磁盘来保证数据的一致性和持久性，而对于一个简单的服务发现的场景来说，这其实没有太大的必要，这个实现方案太重了。而且本身存储的数据应该是高度定制化的。\n\n\n\n4、消息发送应该弱依赖注册中心，而RocketMQ的设计理念也正是基于此，生产者在第一次发送消息的时候从NameServer获取到Broker地址后缓存到本地，如果NameServer整个集群不可用，短时间内对于生产者和消费者并不会产生太大影响。\n\n\n\n## 20.Broker是怎么保存数据的呢？\n\n\n\nRocketMQ主要的存储文件包括CommitLog文件、ConsumeQueue文件、Indexfile文件。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359230215-486d2245-af30-438d-93db-bd713bfdd630.png)\n\n\n\n消息存储的整体的设计：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359231903-b174af69-d891-485a-b3d1-fa4ecfb1db6b.png)\n\n\n\n**CommitLog**：消息主体以及元数据的存储主体，存储Producer端写入的消息主体内容,消息内容不是定长的。单个文件大小默认1G, 文件名长度为20位，左边补零，剩余为起始偏移量，比如00000000000000000000代表了第一个文件，起始偏移量为0，文件大小为1G=1073741824；当第一个文件写满了，第二个文件为00000000001073741824，起始偏移量为1073741824，以此类推。消息主要是顺序写入日志文件，当文件满了，写入下一个文件。\n\n\n\nCommitLog文件保存于${Rocket_Home}/store/commitlog目录中，从图中我们可以明显看出来文件名的偏移量，每个文件默认1G，写满后自动生成一个新的文件。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359234946-8ed9b4d6-a493-4e41-b347-86824324c40d.png)\n\n\n\n**ConsumeQueue**：消息消费队列，引入的目的主要是提高消息消费的性能，由于RocketMQ是基于主题topic的订阅模式，消息消费是针对主题进行的，如果要遍历commitlog文件中根据topic检索消息是非常低效的。\n\n\n\nConsumer即可根据ConsumeQueue来查找待消费的消息。其中，ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定Topic下的队列消息在CommitLog中的起始物理偏移量offset，消息大小size和消息Tag的HashCode值。\n\n\n\nConsumeQueue文件可以看成是基于Topic的CommitLog索引文件，故ConsumeQueue文件夹的组织方式如下：topic/queue/file三层组织结构，具体存储路径为：$HOME/store/consumequeue/{topic}/{queueId}/{fileName}。同样ConsumeQueue文件采取定长设计，每一个条目共20个字节，分别为8字节的CommitLog物理偏移量、4字节的消息长度、8字节tag hashcode，单个文件由30W个条目组成，可以像数组一样随机访问每一个条目，每个ConsumeQueue文件大小约5.72M；\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359236891-39f0b816-a08a-40d1-bb6b-6dcab4a8939f.png)\n\n\n\n**IndexFile**：IndexFile（索引文件）提供了一种可以通过key或时间区间来查询消息的方法。Index文件的存储位置是：{fileName}，文件名fileName是以创建时的时间戳命名的，固定的单个IndexFile文件大小约为400M，一个IndexFile可以保存 2000W个索引，IndexFile的底层存储设计为在文件系统中实现HashMap结构，故RocketMQ的索引文件其底层实现为hash索引。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359238628-3dd1013d-9938-4e2a-9dbf-c567485913fa.png)\n\n\n\n总结一下：RocketMQ采用的是混合型的存储结构，即为Broker单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。\n\n\n\nRocketMQ的混合型存储结构(多个Topic的消息实体内容都存储于一个CommitLog中)针对Producer和Consumer分别采用了数据和索引部分相分离的存储结构，Producer发送消息至Broker端，然后Broker端使用同步或者异步的方式对消息刷盘持久化，保存至CommitLog中。\n\n\n\n只要消息被刷盘持久化至磁盘文件CommitLog中，那么Producer发送的消息就不会丢失。正因为如此，Consumer也就肯定有机会去消费这条消息。当无法拉取到消息后，可以等下一次消息拉取，同时服务端也支持长轮询模式，如果一个消息拉取请求未拉取到消息，Broker允许等待30s的时间，只要这段时间内有新消息到达，将直接返回给消费端。\n\n\n\n这里，RocketMQ的具体做法是，使用Broker端的后台服务线程—ReputMessageService不停地分发请求并异步构建ConsumeQueue（逻辑消费队列）和IndexFile（索引文件）数据。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359241134-f3b4a4e9-c23c-4cff-b6b5-b8fa605949d2.png)\n\n\n\n## 21.说说RocketMQ怎么对文件进行读写的？\n\n\n\nRocketMQ对文件的读写巧妙地利用了操作系统的一些高效文件读写方式——`PageCache`、`顺序读写`、`零拷贝`。\n\n\n\n**PageCache、顺序读取**\n\n\n\n在RocketMQ中，ConsumeQueue逻辑消费队列存储的数据较少，并且是顺序读取，在page cache机制的预读取作用下，Consume Queue文件的读性能几乎接近读内存，即使在有消息堆积情况下也不会影响性能。而对于CommitLog消息存储的日志数据文件来说，读取消息内容时候会产生较多的随机访问读取，严重影响性能。如果选择合适的系统IO调度算法，比如设置调度算法为“Deadline”（此时块存储采用SSD的话），随机读的性能也会有所提升。\n\n\n\n页缓存（PageCache)是OS对文件的缓存，用于加速对文件的读写。一般来说，程序对文件进行顺序读写的速度几乎接近于内存的读写速度，主要原因就是由于OS使用PageCache机制对读写访问操作进行了性能优化，将一部分的内存用作PageCache。对于数据的写入，OS会先写入至Cache内，随后通过异步的方式由pdflush内核线程将Cache内的数据刷盘至物理磁盘上。对于数据的读取，如果一次读取文件时出现未命中PageCache的情况，OS从物理磁盘上访问读取文件的同时，会顺序对其他相邻块的数据文件进行预读取。\n\n\n\n**零拷贝**\n\n\n\n另外，RocketMQ主要通过MappedByteBuffer对文件进行读写操作。其中，利用了NIO中的FileChannel模型将磁盘上的物理文件直接映射到用户态的内存地址中（这种Mmap的方式减少了传统IO，将磁盘文件数据在操作系统内核地址空间的缓冲区，和用户应用程序地址空间的缓冲区之间来回进行拷贝的性能开销），将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率（正因为需要使用内存映射机制，故RocketMQ的文件存储都使用定长结构来存储，方便一次将整个文件映射至内存）。\n\n\n\n### 说说什么是零拷贝?\n\n\n\n在操作系统中，使用传统的方式，数据需要经历几次拷贝，还要经历用户态/内核态切换。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359243905-a1ba76e4-eef1-4b9b-ba93-e0a6ab26e894.png)\n\n\n\n1、从磁盘复制数据到内核态内存；\n\n\n\n2、从内核态内存复制到用户态内存；\n\n\n\n3、然后从用户态内存复制到网络驱动的内核态内存；\n\n\n\n4、最后是从网络驱动的内核态内存复制到网卡中进行传输。\n\n\n\n所以，可以通过零拷贝的方式，**减少用户态与内核态的上下文切换**和**内存拷贝的次数**，用来提升I/O的性能。零拷贝比较常见的实现方式是**mmap**，这种机制在Java中是通过MappedByteBuffer实现的。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359245898-8701ce0e-882e-47e4-a3fd-1a16b44779d1.png)\n\n\n\n## 22.消息刷盘怎么实现的呢？\n\n\n\nRocketMQ提供了两种刷盘策略：同步刷盘和异步刷盘\n\n\n\n- 同步刷盘：在消息达到Broker的内存之后，必须刷到commitLog日志文件中才算成功，然后返回Producer数据已经发送成功。\n\n- 异步刷盘：异步刷盘是指消息达到Broker内存后就返回Producer数据已经发送成功，会唤醒一个线程去将数据持久化到CommitLog日志文件中。\n\n\n\n**Broker** 在消息的存取时直接操作的是内存（内存映射文件），这可以提供系统的吞吐量，但是无法避免机器掉电时数据丢失，所以需要持久化到磁盘中。\n\n\n\n刷盘的最终实现都是使用**NIO**中的 MappedByteBuffer.force() 将映射区的数据写入到磁盘，如果是同步刷盘的话，在**Broker**把消息写到**CommitLog**映射区后，就会等待写入完成。\n\n\n\n异步而言，只是唤醒对应的线程，不保证执行的时机，流程如图所示。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359248522-52a49716-d3c4-41fc-b4b0-4006fc0d3724.png)\n\n\n\n## 22.能说下 RocketMQ 的负载均衡是如何实现的？\n\n\n\nRocketMQ中的负载均衡都在Client端完成，具体来说的话，主要可以分为Producer端发送消息时候的负载均衡和Consumer端订阅消息的负载均衡。\n\n\n\n### Producer的负载均衡\n\n\n\nProducer端在发送消息的时候，会先根据Topic找到指定的TopicPublishInfo，在获取了TopicPublishInfo路由信息后，RocketMQ的客户端在默认方式下selectOneMessageQueue()方法会从TopicPublishInfo中的messageQueueList中选择一个队列（MessageQueue）进行发送消息。具这里有一个sendLatencyFaultEnable开关变量，如果开启，在随机递增取模的基础上，再过滤掉not available的Broker代理。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359250717-7c451bff-93c7-44c5-b548-201d2601123e.png)\n\n\n\n所谓的\"latencyFaultTolerance\"，是指对之前失败的，按一定的时间做退避。例如，如果上次请求的latency超过550Lms，就退避3000Lms；超过1000L，就退避60000L；如果关闭，采用随机递增取模的方式选择一个队列（MessageQueue）来发送消息，latencyFaultTolerance机制是实现消息发送高可用的核心关键所在。\n\n\n\n### Consumer的负载均衡\n\n\n\n在RocketMQ中，Consumer端的两种消费模式（Push/Pull）都是基于拉模式来获取消息的，而在Push模式只是对pull模式的一种封装，其本质实现为消息拉取线程在从服务器拉取到一批消息后，然后提交到消息消费线程池后，又“马不停蹄”的继续向服务器再次尝试拉取消息。如果未拉取到消息，则延迟一下又继续拉取。在两种基于拉模式的消费方式（Push/Pull）中，均需要Consumer端知道从Broker端的哪一个消息队列中去获取消息。因此，有必要在Consumer端来做负载均衡，即Broker端中多个MessageQueue分配给同一个ConsumerGroup中的哪些Consumer消费。\n\n\n\n**1、Consumer端的心跳包发送**\n\n\n\n在Consumer启动后，它就会通过定时任务不断地向RocketMQ集群中的所有Broker实例发送心跳包（其中包含了，消息消费分组名称、订阅关系集合、消息通信模式和客户端id的值等信息）。Broker端在收到Consumer的心跳消息后，会将它维护在ConsumerManager的本地缓存变量—consumerTable，同时并将封装后的客户端网络通道信息保存在本地缓存变量—channelInfoTable中，为之后做Consumer端的负载均衡提供可以依据的元数据信息。\n\n\n\n**2、Consumer端实现负载均衡的核心类—RebalanceImpl**\n\n\n\n在Consumer实例的启动流程中的启动MQClientInstance实例部分，会完成负载均衡服务线程—RebalanceService的启动（每隔20s执行一次）。\n\n\n\n通过查看源码可以发现，RebalanceService线程的run()方法最终调用的是RebalanceImpl类的rebalanceByTopic()方法，这个方法是实现Consumer端负载均衡的核心。\n\n\n\nrebalanceByTopic()方法会根据消费者通信类型为“广播模式”还是“集群模式”做不同的逻辑处理。这里主要来看下集群模式下的主要处理流程：\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359253301-75a66669-1976-4d95-84d2-14241cb6e13e.png)\n\n\n\n(1) 从rebalanceImpl实例的本地缓存变量—topicSubscribeInfoTable中，获取该Topic主题下的消息消费队列集合（mqSet）；\n\n\n\n(2) 根据topic和consumerGroup为参数调用mQClientFactory.findConsumerIdList()方法向Broker端发送通信请求，获取该消费组下消费者Id列表；\n\n\n\n(3) 先对Topic下的消息消费队列、消费者Id排序，然后用消息队列分配策略算法（默认为：消息队列的平均分配算法），计算出待拉取的消息队列。这里的平均分配算法，类似于分页的算法，将所有MessageQueue排好序类似于记录，将所有消费端Consumer排好序类似页数，并求出每一页需要包含的平均size和每个页面记录的范围range，最后遍历整个range而计算出当前Consumer端应该分配到的的MessageQueue。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359256179-f339ffb3-f3d9-4b8c-9d4f-2654819fd61a.png)\n\n\n\n(4) 然后，调用updateProcessQueueTableInRebalance()方法，具体的做法是，先将分配到的消息队列集合（mqSet）与processQueueTable做一个过滤比对。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359257791-31409212-1308-4f02-90a6-9f0f2d511f90.png)\n\n\n\n上图中processQueueTable标注的红色部分，表示与分配到的消息队列集合mqSet互不包含。将这些队列设置Dropped属性为true，然后查看这些队列是否可以移除出processQueueTable缓存变量，这里具体执行removeUnnecessaryMessageQueue()方法，即每隔1s 查看是否可以获取当前消费处理队列的锁，拿到的话返回true。如果等待1s后，仍然拿不到当前消费处理队列的锁则返回false。如果返回true，则从processQueueTable缓存变量中移除对应的Entry；\n\n\n\n上图中processQueueTable的绿色部分，表示与分配到的消息队列集合mqSet的交集。判断该ProcessQueue是否已经过期了，在Pull模式的不用管，如果是Push模式的，设置Dropped属性为true，并且调用removeUnnecessaryMessageQueue()方法，像上面一样尝试移除Entry；\n\n\n\n最后，为过滤后的消息队列集合（mqSet）中的每个MessageQueue创建一个ProcessQueue对象并存入RebalanceImpl的processQueueTable队列中（其中调用RebalanceImpl实例的computePullFromWhere(MessageQueue mq)方法获取该MessageQueue对象的下一个进度消费值offset，随后填充至接下来要创建的pullRequest对象属性中），并创建拉取请求对象—pullRequest添加到拉取列表—pullRequestList中，最后执行dispatchPullRequest()方法，将Pull消息的请求对象PullRequest依次放入PullMessageService服务线程的阻塞队列pullRequestQueue中，待该服务线程取出后向Broker端发起Pull消息的请求。其中，可以重点对比下，RebalancePushImpl和RebalancePullImpl两个实现类的dispatchPullRequest()方法不同，RebalancePullImpl类里面的该方法为空。\n\n\n\n消息消费队列在同一消费组不同消费者之间的负载均衡，其核心设计理念是在一个消息消费队列在同一时间只允许被同一消费组内的一个消费者消费，一个消息消费者能同时消费多个消息队列。\n\n\n\n## 23.RocketMQ消息长轮询了解吗？\n\n\n\n所谓的长轮询，就是Consumer 拉取消息，如果对应的 Queue 如果没有数据，Broker 不会立即返回，而是把 PullReuqest hold起来，等待 queue 有了消息后，或者长轮询阻塞时间到了，再重新处理该 queue 上的所有 PullRequest。\n\n\n\n![img](大厂面试之RocketMQ篇.assets/1676359259857-9f437c03-c4b0-4fa0-9f16-f58dbae2e2be.png)\n\n\n\n```\nPullMessageProcessor#processRequest\n```\n\n\n\n```java\n                //如果没有拉到数据\n                case ResponseCode.PULL_NOT_FOUND:\n                    // broker 和 consumer 都允许 suspend，默认开启\n                    if (brokerAllowSuspend && hasSuspendFlag) {\n                        long pollingTimeMills = suspendTimeoutMillisLong;\n                        if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n                            pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n                        }\n\n                        String topic = requestHeader.getTopic();\n                        long offset = requestHeader.getQueueOffset();\n                        int queueId = requestHeader.getQueueId();\n                        //封装一个PullRequest\n                        PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,\n                                this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);\n                        //把PullRequest挂起来\n                        this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);\n                        response = null;\n                        break;\n                    }\n```\n\n\n\n挂起的请求，有一个服务线程会不停地检查，看queue中是否有数据，或者超时。\n\n\n\n```\nPullRequestHoldService#run()\n```\n\n\n\n```java\n    @Override\n    public void run() {\n        log.info(\"{} service started\", this.getServiceName());\n        while (!this.isStopped()) {\n            try {\n                if (this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n                    this.waitForRunning(5 * 1000);\n                } else {\n                    this.waitForRunning(this.brokerController.getBrokerConfig().getShortPollingTimeMills());\n                }\n\n                long beginLockTimestamp = this.systemClock.now();\n                //检查hold住的请求\n                this.checkHoldRequest();\n                long costTime = this.systemClock.now() - beginLockTimestamp;\n                if (costTime > 5 * 1000) {\n                    log.info(\"[NOTIFYME] check hold request cost {} ms.\", costTime);\n                }\n            } catch (Throwable e) {\n                log.warn(this.getServiceName() + \" service has exception. \", e);\n            }\n        }\n\n        log.info(\"{} service end\", this.getServiceName());\n    }\n```","tags":["我要进大厂","面试","RocketMQ"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之Spring篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Spring篇/","content":"\n## 1.Spring是什么？特性？有哪些模块？\n\n\n\n![img](大厂面试之Spring篇.assets/1676357177487-e74a8aab-c1b8-4d91-88f3-eb594d569cb7.jpeg)\n\n\n\n一句话概括：**Spring 是一个轻量级、非入侵式的控制反转 (IoC) 和面向切面 (AOP) 的框架。**\n\n\n\n2003年，一个音乐家Rod Johnson决定发展一个轻量级的Java开发框架，`Spring`作为Java战场的龙骑兵渐渐崛起，并淘汰了`EJB`这个传统的重装骑兵。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357179957-f1f614de-4a6a-43a6-8f8a-a637e5580d6e.png)\n\n\n\n到了现在，企业级开发的标配基本就是 **Spring5** + **Spring Boot 2** + **JDK 8**\n\n\n\nSpring有哪些特性呢？\n\n\n\nSpring有很多优点：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357181692-9e3bcb90-dbbe-46e5-b637-785b70789212.png)\n\n\n\n**1、IOC 和 DI 的支持**\n\n\n\nSpring 的核心就是一个大的工厂容器，可以维护所有对象的创建和依赖关系，Spring 工厂用于生成 Bean，并且管理 Bean 的生命周期，实现**高内聚低耦合**的设计理念。\n\n\n\n**2、AOP 编程的支持**\n\n\n\nSpring 提供了**面向切面编程**，可以方便的实现对程序进行权限拦截、运行监控等切面功能。\n\n\n\n**3、声明式事务的支持**\n\n\n\n支持通过配置就来完成对事务的管理，而不需要通过硬编码的方式，以前重复的一些事务提交、回滚的JDBC代码，都可以不用自己写了。\n\n\n\n**4、快捷测试的支持**\n\n\n\nSpring 对 Junit 提供支持，可以通过**注解**快捷地测试 Spring 程序。\n\n\n\n**5、快速集成功能**\n\n\n\n方便集成各种优秀框架，Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz 等）的直接支持。\n\n\n\n**6、复杂API模板封装**\n\n\n\nSpring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等）都提供了模板化的封装，这些封装 API 的提供使得应用难度大大降低。\n\n\n\n## 2.Spring有哪些模块呢？\n\n\n\nSpring 框架是分模块存在，除了最核心的`Spring Core Container`是必要模块之外，其他模块都是`可选`，大约有 20 多个模块。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357184035-8ddcdab2-150c-4df8-b3f8-d737f908253f.png)\n\n\n\n最主要的七大模块：\n\n\n\n1、**Spring Core**：Spring 核心，它是框架最基础的部分，提供 IOC 和依赖注入 DI 特性。\n\n\n\n2、**Spring Context**：Spring 上下文容器，它是 BeanFactory 功能加强的一个子接口。\n\n\n\n3、**Spring Web**：它提供 Web 应用开发的支持。\n\n\n\n4、**Spring MVC**：它针对 Web 应用中 MVC 思想的实现。\n\n\n\n5、**Spring DAO**：提供对 JDBC 抽象层，简化了 JDBC 编码，同时，编码更具有健壮性。\n\n\n\n6、**Spring ORM**：它支持用于流行的 ORM 框架的整合，比如：Spring + Hibernate、Spring + iBatis、Spring + JDO 的整合等。\n\n\n\n7、**Spring AOP**：即面向切面编程，它提供了与 AOP 联盟兼容的编程实现。\n\n\n\n## 3.Spring有哪些常用注解呢？\n\n\n\nSpring有很多模块，甚至广义的SpringBoot、SpringCloud也算是Spring的一部分，我们来分模块，按功能来看一下一些常用的注解：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357187738-1abd6ce4-46ba-4794-8470-82c927c1ae0f.png)\n\n\n\n### **Web**\n\n\n\n@Controller：组合注解（组合了@Component注解），应用在MVC层（控制层）。\n\n\n\n@RestController：该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。\n\n\n\n@RequestMapping：用于映射Web请求，包括访问路径和参数。如果是Restful风格接口，还可以根据请求类型使用不同的注解：\n\n\n\n- [@GetMapping ]() \n\n- [@PostMapping ]() \n\n- [@PutMapping ]() \n\n- [@DeleteMapping ]() \n\n\n\n@RequestBody：允许request的参数在request体中，而不是在直接连接在地址后面。\n\n\n\n@PathVariable：用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。\n\n\n\n@RestController：该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。\n\n\n\n### **容器**\n\n\n\n@Component：表示一个带注释的类是一个“组件”，成为Spring管理的Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象。同时@Component还是一个元注解。\n\n\n\n@Service：组合注解（组合了@Component注解），应用在service层（业务逻辑层）。\n\n\n\n@Repository：组合注解（组合了@Component注解），应用在dao层（数据访问层）。\n\n\n\n@Autowired：Spring提供的工具（由Spring的依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入）。\n\n\n\n@Qualifier：该注解通常跟 [@Autowired ]() 一起使用，当想对注入的过程做更多的控制，[@Qualifier ]() 可帮助配置，比如两个以上相同类型的 Bean 时 Spring 无法抉择，用到此注解 \n\n\n\n@Configuration：声明当前类是一个配置类（相当于一个Spring配置的xml文件）\n\n\n\n@Value：可用在字段，构造器参数跟方法参数，指定一个默认值，支持 #{} 跟 ${} 两个方式。一般将 SpringbBoot 中的 application.properties 配置的属性值赋值给变量。\n\n\n\n@Bean：注解在方法上，声明当前方法的返回值为一个Bean。返回的Bean对应的类中可以定义init()方法和destroy()方法，然后在@Bean(initMethod=”init”,destroyMethod=”destroy”)定义，在构造之后执行init，在销毁之前执行destroy。\n\n\n\n@Scope:定义我们采用什么模式去创建Bean（方法上，得有@Bean） 其设置类型包括：Singleton 、Prototype、Request 、 Session、GlobalSession。\n\n\n\n### **AOP**\n\n\n\n@Aspect:声明一个切面（类上） 使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。\n\n\n\n- `@After` ：在方法执行之后执行（方法上）。\n\n- `@Before`：在方法执行之前执行（方法上）。\n\n- `@Around`：在方法执行之前与之后执行（方法上）。\n\n- `@PointCut`：声明切点 在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）。\n\n\n\n### **事务**\n\n\n\n@Transactional：在要开启事务的方法上使用@Transactional注解，即可声明式开启事务。\n\n\n\n## 4.Spring 中应用了哪些设计模式呢？\n\n\n\nSpring 框架中广泛使用了不同类型的设计模式，下面我们来看看到底有哪些设计模式?\n\n\n\n![img](大厂面试之Spring篇.assets/1676357192406-64ececfb-ee72-4a54-be04-5c2fe03149f6.png)\n\n\n\n1、**工厂模式** : Spring 容器本质是一个大工厂，使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。\n\n\n\n2、**代理模式** : Spring AOP 功能功能就是通过代理模式来实现的，分为动态代理和静态代理。\n\n\n\n3、**单例模式** : Spring 中的 Bean 默认都是单例的，这样有利于容器对Bean的管理。\n\n\n\n4、**模板模式** : Spring 中 JdbcTemplate、RestTemplate 等以 Template结尾的对数据库、网络等等进行操作的模板类，就使用到了模板模式。\n\n\n\n7、**观察者模式**: Spring 事件驱动模型就是观察者模式很经典的一个应用。\n\n\n\n8、**适配器模式** :Spring AOP 的增强或通知 (Advice) 使用到了适配器模式、Spring MVC 中也是用到了适配器模式适配 Controller。\n\n\n\n9、**策略模式**：Spring中有一个Resource接口，它的不同实现类，会根据不同的策略去访问资源。\n\n\n\n## 5.说一说什么是IOC？什么是DI?\n\n\n\nJava 是面向对象的编程语言，一个个实例对象相互合作组成了业务逻辑，原来，我们都是在代码里创建对象和对象的依赖。\n\n\n\n所谓的**IOC**（控制反转）：就是由容器来负责控制对象的生命周期和对象间的关系。以前是我们想要什么，就自己创建什么，现在是我们需要什么，容器就给我们送来什么。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357194841-64d29a58-1ab7-4099-a61a-78b2a411729c.png)\n\n\n\n也就是说，控制对象生命周期的不再是引用它的对象，而是容器。对具体对象，以前是它控制其它对象，现在所有对象都被容器控制，所以这就叫**控制反转**。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357198913-ca7b165f-37b6-49d3-bf58-06e46eb04c07.png)\n\n\n\n**DI（依赖注入）**：指的是容器在实例化对象的时候把它依赖的类注入给它。有的说法IOC和DI是一回事，有的说法是IOC是思想，DI是IOC的实现。\n\n\n\n**为什么要使用IOC呢？**\n\n\n\n最主要的是两个字**解耦**，硬编码会造成对象间的过度耦合，使用IOC之后，我们可以不用关心对象间的依赖，专心开发应用就行。\n\n\n\n## 6.能简单说一下Spring IOC的实现机制吗？\n\n\n\nPS:这道题陈哥在面试中被问到过，问法是“**你有自己实现过简单的Spring吗？**”\n\n\n\nSpring的IOC本质就是一个大工厂，我们想想一个工厂是怎么运行的呢？\n\n\n\n![img](大厂面试之Spring篇.assets/1676357200807-3f36debf-e563-4119-85ec-0a91d440cffa.png)\n\n\n\n1、**生产产品**：一个工厂最核心的功能就是生产产品。在Spring里，不用Bean自己来实例化，而是交给Spring，应该怎么实现呢？——答案毫无疑问，**反射**。\n\n\n\n那么这个厂子的生产管理是怎么做的？你应该也知道——**工厂模式**。\n\n\n\n2、**库存产品**：工厂一般都是有库房的，用来库存产品，毕竟生产的产品不能立马就拉走。Spring我们都知道是一个容器，这个容器里存的就是对象，不能每次来取对象，都得现场来反射创建对象，得把创建出的对象存起来。\n\n\n\n3、**订单处理**：还有最重要的一点，工厂根据什么来提供产品呢？订单。这些订单可能五花八门，有线上签签的、有到工厂签的、还有工厂销售上门签的……最后经过处理，指导工厂的出货。\n\n\n\n在Spring里，也有这样的订单，它就是我们bean的定义和依赖关系，可以是xml形式，也可以是我们最熟悉的注解形式。\n\n\n\n我们简单地实现一个mini版的Spring IOC：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357203134-d7228f43-2e6a-4690-bb9b-1bea0aef147b.png)\n\n\n\n**Bean定义：**\n\n\n\nBean通过一个配置文件定义，把它解析成一个类型。\n\n\n\n**beans.properties**\n\n\n\n偷懒，这里直接用了最方便解析的properties，这里直接用一个<key,value>类型的配置来代表Bean的定义，其中key是beanName，value是class\n\n\n\n```java\nuserDao:cn.fighter3.bean.UserDao\n```\n\n\n\n**BeanDefinition.java**\n\n\n\nbean定义类，配置文件中bean定义对应的实体\n\n\n\n```java\npublic class BeanDefinition {\n\n    private String beanName;\n\n    private Class beanClass;\n     //省略getter、setter  \n }\n```\n\n\n\n**ResourceLoader.java**\n\n\n\n资源加载器，用来完成配置文件中配置的加载\n\n\n\n```java\npublic class ResourceLoader {\n\n    public static Map<String, BeanDefinition> getResource() {\n        Map<String, BeanDefinition> beanDefinitionMap = new HashMap<>(16);\n        Properties properties = new Properties();\n        try {\n            InputStream inputStream = ResourceLoader.class.getResourceAsStream(\"/beans.properties\");\n            properties.load(inputStream);\n            Iterator<String> it = properties.stringPropertyNames().iterator();\n            while (it.hasNext()) {\n                String key = it.next();\n                String className = properties.getProperty(key);\n                BeanDefinition beanDefinition = new BeanDefinition();\n                beanDefinition.setBeanName(key);\n                Class clazz = Class.forName(className);\n                beanDefinition.setBeanClass(clazz);\n                beanDefinitionMap.put(key, beanDefinition);\n            }\n            inputStream.close();\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return beanDefinitionMap;\n    }\n\n}\n```\n\n\n\n**BeanRegister.java**\n\n\n\n对象注册器，这里用于单例bean的缓存，我们大幅简化，默认所有bean都是单例的。可以看到所谓单例注册，也很简单，不过是往HashMap里存对象。\n\n\n\n```java\npublic class BeanRegister {\n\n    //单例Bean缓存\n    private Map<String, Object> singletonMap = new HashMap<>(32);\n\n    /**\n     * 获取单例Bean\n     *\n     * @param beanName bean名称\n     * @return\n     */\n    public Object getSingletonBean(String beanName) {\n        return singletonMap.get(beanName);\n    }\n\n    /**\n     * 注册单例bean\n     *\n     * @param beanName\n     * @param bean\n     */\n    public void registerSingletonBean(String beanName, Object bean) {\n        if (singletonMap.containsKey(beanName)) {\n            return;\n        }\n        singletonMap.put(beanName, bean);\n    }\n\n}\n```\n\n\n\n**BeanFactory.java**\n\n\n\n![img](大厂面试之Spring篇.assets/1676357206485-ac9fe3ca-909a-4e20-a5ba-9bf6c66d9450.png)\n\n\n\n对象工厂，我们最**核心**的一个类，在它初始化的时候，创建了bean注册器，完成了资源的加载。\n\n\n\n获取bean的时候，先从单例缓存中取，如果没有取到，就创建并注册一个bean\n\n\n\n测试：UserDao.java 我们的Bean类，很简单\n\n\n\n```java\n  public class UserDao {\n  \n      public void queryUserInfo(){\n          System.out.println(\"A good man.\");\n      }\n  }\n```\n\n\n\n单元测试\n\n\n\n```java\n  public class ApiTest {\n      @Test\n      public void test_BeanFactory() {\n          //1.创建bean工厂(同时完成了加载资源、创建注册单例bean注册器的操作)\n          BeanFactory beanFactory = new BeanFactory();\n  \n          //2.第一次获取bean（通过反射创建bean，缓存bean）\n          UserDao userDao1 = (UserDao) beanFactory.getBean(\"userDao\");\n          userDao1.queryUserInfo();\n  \n          //3.第二次获取bean（从缓存中获取bean）\n          UserDao userDao2 = (UserDao) beanFactory.getBean(\"userDao\");\n          userDao2.queryUserInfo();\n      }\n  }\n```\n\n\n\n运行结果\n\n\n\n```java\n  A good man.\n  A good man.\n```\n\n\n\n至此，我们一个乞丐+破船版的Spring就完成了，代码也比较完整，有条件的可以跑一下。\n\n\n\nPS:因为时间+篇幅的限制，这个demo比较简陋，没有面向接口、没有解耦、边界检查、异常处理……健壮性、扩展性都有很大的不足\n\n\n\n## 7.说说BeanFactory和ApplicantContext?\n\n\n\n可以这么形容，BeanFactory是Spring的“心脏”，ApplicantContext是完整的“身躯”。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357209163-1bd4e4ad-a674-4a7c-9c95-dbec65f210ab.png)\n\n\n\nBeanFactory（Bean工厂）是Spring框架的基础设施，面向Spring本身。\n\n\n\nApplicantContext（应用上下文）建立在BeanFactoty基础上，面向使用Spring框架的开发者。\n\n\n\n### BeanFactory 接口\n\n\n\nBeanFactory是类的通用工厂，可以创建并管理各种类的对象。\n\n\n\nSpring为BeanFactory提供了很多种实现，最常用的是XmlBeanFactory，但在Spring 3.2中已被废弃，建议使用XmlBeanDefinitionReader、DefaultListableBeanFactory。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357211173-3c8b206d-0acd-4d4b-8ce2-28eda8c95d2b.png)\n\n\n\nBeanFactory接口位于类结构树的顶端，它最主要的方法就是getBean(String var1)，这个方法从容器中返回特定名称的Bean。\n\n\n\nBeanFactory的功能通过其它的接口得到了不断的扩展，比如AbstractAutowireCapableBeanFactory定义了将容器中的Bean按照某种规则（比如按名字匹配、按类型匹配等）进行自动装配的方法。\n\n\n\n这里看一个 XMLBeanFactory（已过期）  获取bean 的例子：\n\n\n\n```java\npublic class HelloWorldApp{ \n   public static void main(String[] args) { \n      BeanFactory factory = new XmlBeanFactory (new ClassPathResource(\"beans.xml\")); \n      HelloWorld obj = (HelloWorld) factory.getBean(\"helloWorld\");    \n      obj.getMessage();    \n   }\n}\n```\n\n\n\n### ApplicationContext 接口\n\n\n\nApplicationContext由BeanFactory派生而来，提供了更多面向实际应用的功能。可以这么说，使用BeanFactory就是手动档，使用ApplicationContext就是自动档。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357213686-eebbeffc-7efb-4064-a2a4-1e2a92eb07ca.png)\n\n\n\nApplicationContext 继承了HierachicalBeanFactory和ListableBeanFactory接口，在此基础上，还通过其他的接口扩展了BeanFactory的功能，包括：\n\n\n\n- Bean instantiation/wiring\n\n- Bean 的实例化/串联\n\n- 自动的 BeanPostProcessor 注册\n\n- 自动的 BeanFactoryPostProcessor 注册\n\n- 方便的 MessageSource 访问（i18n）\n\n- ApplicationEvent 的发布与 BeanFactory 懒加载的方式不同，它是预加载，所以，每一个 bean 都在 ApplicationContext 启动之后实例化\n\n\n\n这是 ApplicationContext 的使用例子：\n\n\n\n```java\npublic class HelloWorldApp{ \n   public static void main(String[] args) { \n      ApplicationContext context=new ClassPathXmlApplicationContext(\"beans.xml\"); \n      HelloWorld obj = (HelloWorld) context.getBean(\"helloWorld\");    \n      obj.getMessage();    \n   }\n}\n```\n\n\n\nApplicationContext 包含 BeanFactory 的所有特性，通常推荐使用前者。\n\n\n\n## 8.你知道Spring容器启动阶段会干什么吗？\n\n\n\nPS：这道题陈哥面试被问到过\n\n\n\nSpring的IOC容器工作的过程，其实可以划分为两个阶段：**容器启动阶段**和**Bean实例化阶段**。\n\n\n\n其中容器启动阶段主要做的工作是加载和解析配置文件，保存到对应的Bean定义中。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357216480-4a0b6b20-625a-4192-b442-17a0260d7985.png)\n\n\n\n容器启动开始，首先会通过某种途径加载Congiguration MetaData，在大部分情况下，容器需要依赖某些工具类（BeanDefinitionReader）对加载的Congiguration MetaData进行解析和分析，并将分析后的信息组为相应的BeanDefinition。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357218674-dec4ad88-d928-4223-bdeb-7fa444528104.png)\n\n\n\n最后把这些保存了Bean定义必要信息的BeanDefinition，注册到相应的BeanDefinitionRegistry，这样容器启动就完成了。\n\n\n\n## 9.能说一下Spring Bean生命周期吗？\n\n\n\n在Spring中，基本容器BeanFactory和扩展容器ApplicationContext的实例化时机不太一样，BeanFactory采用的是延迟初始化的方式，也就是只有在第一次getBean()的时候，才会实例化Bean；ApplicationContext启动之后会实例化所有的Bean定义。\n\n\n\nSpring IOC 中Bean的生命周期大致分为四个阶段：**实例化**（Instantiation）、**属性赋值**（Populate）、**初始化**（Initialization）、**销毁**（Destruction）。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357220388-b1afa206-6dd9-414c-af2b-7712cdb46ec5.png)Bean生命周期四个阶段\n\n\n\n我们再来看一个稍微详细一些的过程：\n\n\n\n1、**实例化**：第 1 步，实例化一个 Bean 对象\n\n\n\n2、**属性赋值**：第 2 步，为 Bean 设置相关属性和依赖\n\n\n\n3、**初始化**：初始化的阶段的步骤比较多，5、6步是真正的初始化，第 3、4 步为在初始化前执行，第 7 步在初始化后执行，初始化完成之后，Bean就可以被使用了\n\n\n\n4、**销毁**：第 8~10步，第8步其实也可以算到销毁阶段，但不是真正意义上的销毁，而是先在使用前注册了销毁的相关调用接口，为了后面第9、10步真正销毁 Bean 时再执行相应的方法\n\n\n\n![img](大厂面试之Spring篇.assets/1676357224115-854a5861-a8d6-4791-8191-a056d67e4f8c.png)\n\n\n\n简单总结一下，Bean生命周期里初始化的过程相对步骤会多一些，比如前置、后置的处理。\n\n\n\n最后通过一个实例来看一下具体的细节：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357226399-bb2222d7-bb73-4df9-a066-0ef4976f7d80.png)\n\n\n\n定义一个`PersonBean`类，实现`DisposableBean`,`InitializingBean`, `BeanFactoryAware`, `BeanNameAware`这4个接口，同时还有自定义的`init-method`和`destroy-method`。\n\n\n\n```java\npublic class PersonBean implements InitializingBean, BeanFactoryAware, BeanNameAware, DisposableBean {\n\n    /**\n     * 身份证号\n     */\n    private Integer no;\n\n    /**\n     * 姓名\n     */\n    private String name;\n\n    public PersonBean() {\n        System.out.println(\"1.调用构造方法：我出生了！\");\n    }\n\n    public Integer getNo() {\n        return no;\n    }\n\n    public void setNo(Integer no) {\n        this.no = no;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n        System.out.println(\"2.设置属性：我的名字叫\"+name);\n    }\n\n    @Override\n    public void setBeanName(String s) {\n        System.out.println(\"3.调用BeanNameAware#setBeanName方法:我要上学了，起了个学名\");\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        System.out.println(\"4.调用BeanFactoryAware#setBeanFactory方法：选好学校了\");\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        System.out.println(\"6.InitializingBean#afterPropertiesSet方法：入学登记\");\n    }\n\n    public void init() {\n        System.out.println(\"7.自定义init方法：努力上学ing\");\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        System.out.println(\"9.DisposableBean#destroy方法：平淡的一生落幕了\");\n    }\n\n    public void destroyMethod() {\n        System.out.println(\"10.自定义destroy方法:睡了，别想叫醒我\");\n    }\n\n    public void work(){\n        System.out.println(\"Bean使用中：工作，只有对社会没有用的人才放假。。\");\n    }\n\n}\n```\n\n\n\n定义一个`MyBeanPostProcessor`实现`BeanPostProcessor`接口。\n\n\n\n```java\npublic class MyBeanPostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"5.BeanPostProcessor.postProcessBeforeInitialization方法：到学校报名啦\");\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"8.BeanPostProcessor#postProcessAfterInitialization方法：终于毕业，拿到毕业证啦！\");\n        return bean;\n    }\n}\n```\n\n\n\n配置文件，指定`init-method`和`destroy-method`属性\n\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean name=\"myBeanPostProcessor\" class=\"cn.fighter3.spring.life.MyBeanPostProcessor\" />\n    <bean name=\"personBean\" class=\"cn.fighter3.spring.life.PersonBean\"\n          init-method=\"init\" destroy-method=\"destroyMethod\">\n        <property name=\"idNo\" value= \"80669865\"/>\n        <property name=\"name\" value=\"张铁钢\" />\n    </bean>\n\n</beans>\n```\n\n\n\n测试\n\n\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"spring-config.xml\");\n        PersonBean personBean = (PersonBean) context.getBean(\"personBean\");\n        personBean.work();\n        ((ClassPathXmlApplicationContext) context).destroy();\n    }\n}\n```\n\n\n\n运行结果：\n\n\n\n```java\n1.调用构造方法：我出生了！\n2.设置属性：我的名字叫张铁钢\n3.调用BeanNameAware#setBeanName方法:我要上学了，起了个学名\n4.调用BeanFactoryAware#setBeanFactory方法：选好学校了\n5.BeanPostProcessor#postProcessBeforeInitialization方法：到学校报名啦\n6.InitializingBean#afterPropertiesSet方法：入学登记\n7.自定义init方法：努力上学ing\n8.BeanPostProcessor#postProcessAfterInitialization方法：终于毕业，拿到毕业证啦！\nBean使用中：工作，只有对社会没有用的人才放假。。\n9.DisposableBean#destroy方法：平淡的一生落幕了\n10.自定义destroy方法:睡了，别想叫醒我\n```\n\n\n\n关于源码，Bean创建过程可以查看`AbstractBeanFactory#doGetBean`方法，在这个方法里可以看到Bean的实例化，赋值、初始化的过程，至于最终的销毁，可以看看`ConfigurableApplicationContext#close()`。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357232253-82469b47-6316-4220-9da1-d98e25974c82.png)\n\n\n\n## 10.Bean定义和依赖定义有哪些方式？\n\n\n\n有三种方式：**直接编码方式**、**配置文件方式**、**注解方式**。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357234145-b7e0e018-10df-40b1-b027-3208a208c7bb.png)\n\n\n\n1、直接编码方式：我们一般接触不到直接编码的方式，但其实其它的方式最终都要通过直接编码来实现。\n\n\n\n2、配置文件方式：通过xml、propreties类型的配置文件，配置相应的依赖关系，Spring读取配置文件，完成依赖关系的注入。\n\n\n\n3、注解方式：注解方式应该是我们用的最多的一种方式了，在相应的地方使用注解修饰，Spring会扫描注解，完成依赖关系的注入。\n\n\n\n## 11.有哪些依赖注入的方法？\n\n\n\nSpring支持**构造方法注入**、**属性注入**、**工厂方法注入**,其中工厂方法注入，又可以分为**静态工厂方法注入**和**非静态工厂方法注入**。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357236092-1cc89e59-ee2d-4690-98de-68f66d2adb54.png)\n\n\n\n**构造方法注入**\n\n\n\n通过调用类的构造方法，将接口实现类通过构造方法变量传入\n\n\n\n```java\n public CatDaoImpl(String message){\n   this. message = message;\n }\n```\n\n\n\n```java\n<bean id=\"CatDaoImpl\" class=\"com.CatDaoImpl\"> \n  <constructor-arg value=\" message \"></constructor-arg>\n</bean>\n```\n\n\n\n**属性注入**\n\n\n\n通过Setter方法完成调用类所需依赖的注入\n\n\n\n```java\n public class Id {\n    private int id;\n\n    public int getId() { return id; }\n \n    public void setId(int id) { this.id = id; }\n}\n```\n\n\n\n```xml\n<bean id=\"id\" class=\"com.id \"> \n  <property name=\"id\" value=\"123\"></property> \n</bean>\n```\n\n\n\n**工厂方法注入**\n\n\n\n**静态工厂注入**\n\n\n\n静态工厂顾名思义，就是通过调用静态工厂的方法来获取自己需要的对象，为了让 Spring 管理所有对象，我们不能直接通过\"工程类.静态方法()\"来获取对象，而是依然通过 Spring 注入的形式获取：\n\n\n\n```java\npublic class DaoFactory { //静态工厂\n \n   public static final FactoryDao getStaticFactoryDaoImpl(){\n      return new StaticFacotryDaoImpl();\n   }\n}\n \npublic class SpringAction {\n \n //注入对象\n private FactoryDao staticFactoryDao; \n \n //注入对象的 set 方法\n public void setStaticFactoryDao(FactoryDao staticFactoryDao) {\n     this.staticFactoryDao = staticFactoryDao;\n }\n \n}\n```\n\n\n\n```xml\n//factory-method=\"getStaticFactoryDaoImpl\"指定调用哪个工厂方法\n <bean name=\"springAction\" class=\" SpringAction\" >\n   <!--使用静态工厂的方法注入对象,对应下面的配置文件-->\n   <property name=\"staticFactoryDao\" ref=\"staticFactoryDao\"></property>\n </bean>\n \n <!--此处获取对象的方式是从工厂类中获取静态方法-->\n<bean name=\"staticFactoryDao\" class=\"DaoFactory\"\n  factory-method=\"getStaticFactoryDaoImpl\"></bean>\n```\n\n\n\n**非静态工厂注入**\n\n\n\n非静态工厂，也叫实例工厂，意思是工厂方法不是静态的，所以我们需要首先 new 一个工厂实例，再调用普通的实例方法。\n\n\n\n```java\n//非静态工厂 \npublic class DaoFactory { \n   public FactoryDao getFactoryDaoImpl(){\n     return new FactoryDaoImpl();\n   }\n }\n \npublic class SpringAction {\n  //注入对象\n  private FactoryDao factoryDao; \n  \n  public void setFactoryDao(FactoryDao factoryDao) {\n    this.factoryDao = factoryDao;\n  }\n}\n```\n\n\n\n```xml\n <bean name=\"springAction\" class=\"SpringAction\">\n   <!--使用非静态工厂的方法注入对象,对应下面的配置文件-->\n   <property name=\"factoryDao\" ref=\"factoryDao\"></property>\n </bean>\n \n <!--此处获取对象的方式是从工厂类中获取实例方法-->\n <bean name=\"daoFactory\" class=\"com.DaoFactory\"></bean>\n \n<bean name=\"factoryDao\" factory-bean=\"daoFactory\" factory-method=\"getFactoryDaoImpl\"></bean>\n```\n\n\n\n## 12.Spring有哪些自动装配的方式？\n\n\n\n**什么是自动装配？**\n\n\n\nSpring IOC容器知道所有Bean的配置信息，此外，通过Java反射机制还可以获知实现类的结构信息，如构造方法的结构、属性等信息。掌握所有Bean的这些信息后，Spring IOC容器就可以按照某种规则对容器中的Bean进行自动装配，而无须通过显式的方式进行依赖配置。\n\n\n\nSpring提供的这种方式，可以按照某些规则进行Bean的自动装配，元素提供了一个指定自动装配类型的属性：autowire=\"<自动装配类型>\"\n\n\n\n**Spring提供了哪几种自动装配类型？**\n\n\n\nSpring提供了4种自动装配类型：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357239724-f1d1fcd8-bf11-4588-9c4d-34bf2bc25d81.png)\n\n\n\n1、**byName**：根据名称进行自动匹配，假设Boss又一个名为car的属性，如果容器中刚好有一个名为car的bean，Spring就会自动将其装配给Boss的car属性\n\n\n\n2、**byType**：根据类型进行自动匹配，假设Boss有一个Car类型的属性，如果容器中刚好有一个Car类型的Bean，Spring就会自动将其装配给Boss这个属性\n\n\n\n3、**constructor**：与 byType类似， 只不过它是针对构造函数注入而言的。如果Boss有一个构造函数，构造函数包含一个Car类型的入参，如果容器中有一个Car类型的Bean，则Spring将自动把这个Bean作为Boss构造函数的入参；如果容器中没有找到和构造函数入参匹配类型的Bean，则Spring将抛出异常。\n\n\n\n4、**autodetect**：根据Bean的自省机制决定采用byType还是constructor进行自动装配，如果Bean提供了默认的构造函数，则采用byType，否则采用constructor。\n\n\n\n## 13.Spring 中的 Bean 的作用域有哪些?\n\n\n\nSpring的Bean主要支持五种作用域：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357242168-af36bc22-b0ab-492c-b488-0409cd0c8dd2.png)\n\n\n\n**singleton** : 在Spring容器仅存在一个Bean实例，Bean以单实例的方式存在，是Bean默认的作用域。\n\n\n\n**prototype** : 每次从容器重调用Bean时，都会返回一个新的实例。\n\n\n\n以下三个作用域于只在Web应用中适用：\n\n\n\n1、**request** : 每一次HTTP请求都会产生一个新的Bean，该Bean仅在当前HTTP Request内有效。\n\n\n\n2、**session** : 同一个HTTP Session共享一个Bean，不同的HTTP Session使用不同的Bean。\n\n\n\n3、**globalSession**：同一个全局Session共享一个Bean，只用于基于Protlet的Web应用，Spring5中已经不存在了。\n\n\n\n## 14.Spring 中的单例 Bean 会存在线程安全问题吗？\n\n\n\n首先结论在这：Spring中的单例Bean**不是线程安全的**。\n\n\n\n因为单例Bean，是全局只有一个Bean，所有线程共享。如果说单例Bean，是一个无状态的，也就是线程中的操作不会对Bean中的成员变量执行**查询**以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。\n\n\n\n假如这个Bean是有状态的，也就是会对Bean中的成员变量进行写操作，那么可能就存在线程安全的问题。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357244458-5cd1ac72-9e32-4635-b052-b24b7a390d34.png)\n\n\n\n**单例Bean线程安全问题怎么解决呢？**\n\n\n\n常见的有这么些解决办法：\n\n\n\n1、将Bean定义为多例；这样每一个线程请求过来都会创建一个新的Bean，但是这样容器就不好管理Bean，不能这么办。\n\n\n\n2、在Bean对象中尽量避免定义可变的成员变量；削足适履了属于是，也不能这么干。\n\n\n\n3、将Bean中的成员变量保存在ThreadLocal中⭐；我们知道ThredLoca能保证多线程下变量的隔离，可以在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal里，这是推荐的一种方式。\n\n\n\n## 15.说说循环依赖?\n\n\n\n**什么是循环依赖？**\n\n\n\n![img](大厂面试之Spring篇.assets/1676357246915-7cd478bd-da62-4d9a-9d48-634fee4920e2.png)\n\n\n\nSpring 循环依赖：简单说就是自己依赖自己，或者和别的Bean相互依赖。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357249160-f00f7e4c-3a90-4fc8-947a-53219a1f944b.png)\n\n\n\n只有单例的Bean才存在循环依赖的情况，**原型**(Prototype)情况下，Spring会直接抛出异常。原因很简单，AB循环依赖，A实例化的时候，发现依赖B，创建B实例，创建B的时候发现需要A，创建A1实例……无限套娃，直接把系统干垮。\n\n\n\n**Spring可以解决哪些情况的循环依赖？**\n\n\n\nSpring不支持基于构造器注入的循环依赖，但是假如AB循环依赖，如果一个是构造器注入，一个是setter注入呢？\n\n\n\n看看几种情形：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357251677-18313cc5-4bc2-45f1-8be4-1ca24552b2dd.png)\n\n\n\n第四种可以而第五种不可以的原因是 Spring 在创建 Bean 时默认会根据自然排序进行创建，所以 A 会先于 B 进行创建。\n\n\n\n所以简单总结，当循环依赖的实例都采用setter方法注入的时候，Spring可以支持，都采用构造器注入的时候，不支持，构造器注入和setter注入同时存在的时候，看天。\n\n\n\n## 16.那Spring怎么解决循环依赖的呢？\n\n\n\nPS：其实正确答案是开发人员做好设计，别让Bean循环依赖，但是没办法，面试官不想听这个。\n\n\n\n我们都知道，单例Bean初始化完成，要经历三步：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357254691-d06db734-9009-4277-b438-0fc14d38d774.png)\n\n\n\n注入就发生在第二步，**属性赋值**，结合这个过程，Spring 通过**三级缓存**解决了循环依赖：\n\n\n\n1、一级缓存 : Map<String,Object> **singletonObjects**，单例池，用于保存实例化、属性赋值（注入）、初始化完成的 bean 实例\n\n\n\n2、二级缓存 : Map<String,Object> **earlySingletonObjects**，早期曝光对象，用于保存实例化完成的 bean 实例\n\n\n\n3、三级缓存 : Map<String,ObjectFactory<?>> **singletonFactories**，早期曝光对象工厂，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357256628-90644818-a067-4698-881e-c3c2cb29aebd.png)\n\n\n\n我们来看一下三级缓存解决循环依赖的过程：\n\n\n\n当 A、B 两个类发生循环依赖时：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357258545-66367062-cbe9-4c66-a4a7-cc3771718d46.png)\n\n\n\n创建A实例，实例化的时候把A对象⼯⼚放⼊三级缓存，表示A开始实例化了，虽然我这个对象还不完整，但是先曝光出来让大家知道\n\n\n\n![img](大厂面试之Spring篇.assets/1676357260074-2c2657f6-e925-4196-80a6-9b164d2081a1.png)\n\n\n\nA注⼊属性时，发现依赖B，此时B还没有被创建出来，所以去实例化B\n\n\n\n同样，B注⼊属性时发现依赖A，它就会从缓存里找A对象。依次从⼀级到三级缓存查询A，从三级缓存通过对象⼯⼚拿到A，发现A虽然不太完善，但是存在，把A放⼊⼆级缓存，同时删除三级缓存中的A，此时，B已经实例化并且初始化完成，把B放入⼀级缓存。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357262074-034cd321-1945-4b39-ad51-632d9da5dfdb.png)\n\n\n\n接着A继续属性赋值，顺利从⼀级缓存拿到实例化且初始化完成的B对象，A对象创建也完成，删除⼆级缓存中的A，同时把A放⼊⼀级缓存\n\n\n\n最后，⼀级缓存中保存着实例化、初始化都完成的A、B对象\n\n\n\n![img](大厂面试之Spring篇.assets/1676357264062-3f230b7f-21c2-480b-bd5f-cbd454943116.png)\n\n\n\n所以，我们就知道为什么Spring能解决setter注入的循环依赖了，因为实例化和属性赋值是分开的，所以里面有操作的空间。如果都是构造器注入的化，那么都得在实例化这一步完成注入，所以自然是无法支持了。\n\n\n\n## 17.为什么要三级缓存？⼆级不⾏吗？\n\n\n\n不行，主要是为了**⽣成代理对象**。如果是没有代理的情况下，使用二级缓存解决循环依赖也是OK的。但是如果存在代理，三级没有问题，二级就不行了。\n\n\n\n因为三级缓存中放的是⽣成具体对象的匿名内部类，获取Object的时候，它可以⽣成代理对象，也可以返回普通对象。使⽤三级缓存主要是为了保证不管什么时候使⽤的都是⼀个对象。\n\n\n\n假设只有⼆级缓存的情况，往⼆级缓存中放的显示⼀个普通的Bean对象，Bean初始化过程中，通过 BeanPostProcessor 去⽣成代理对象之后，覆盖掉⼆级缓存中的普通Bean对象，那么可能就导致取到的Bean对象不一致了。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357266758-d99f7786-468c-4ec4-a0f2-76064e0e1996.png)\n\n\n\n## 18.@Autowired的实现原理？\n\n\n\n实现@Autowired的关键是：**AutowiredAnnotationBeanPostProcessor**\n\n\n\n在Bean的初始化阶段，会通过Bean后置处理器来进行一些前置和后置的处理。\n\n\n\n实现@Autowired的功能，也是通过后置处理器来完成的。这个后置处理器就是AutowiredAnnotationBeanPostProcessor。\n\n\n\nSpring在创建bean的过程中，最终会调用到doCreateBean()方法，在doCreateBean()方法中会调用populateBean()方法，来为bean进行属性填充，完成自动装配等工作。\n\n\n\n在populateBean()方法中一共调用了两次后置处理器，第一次是为了判断是否需要属性填充，如果不需要进行属性填充，那么就会直接进行return，如果需要进行属性填充，那么方法就会继续向下执行，后面会进行第二次后置处理器的调用，这个时候，就会调用到AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues()方法，在该方法中就会进行@Autowired注解的解析，然后实现自动装配。\n\n\n\n```java\n/**\n* 属性赋值\n**/\nprotected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) {\n            //………… \n            if (hasInstAwareBpps) {\n                if (pvs == null) {\n                    pvs = mbd.getPropertyValues();\n                }\n\n                PropertyValues pvsToUse;\n                for(Iterator var9 = this.getBeanPostProcessorCache().instantiationAware.iterator(); var9.hasNext(); pvs = pvsToUse) {\n                    InstantiationAwareBeanPostProcessor bp = (InstantiationAwareBeanPostProcessor)var9.next();\n                    pvsToUse = bp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);\n                    if (pvsToUse == null) {\n                        if (filteredPds == null) {\n                            filteredPds = this.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n                        }\n                        //执行后处理器，填充属性，完成自动装配\n                        //调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues()方法\n                        pvsToUse = bp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);\n                        if (pvsToUse == null) {\n                            return;\n                        }\n                    }\n                }\n            }\n           //…………\n    }\n```\n\n\n\npostProcessorPropertyValues()方法的源码如下，在该方法中，会先调用findAutowiringMetadata()方法解析出bean中带有@Autowired注解、@Inject和@Value注解的属性和方法。然后调用metadata.inject()方法，进行属性填充。\n\n\n\n```java\n    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) {\n        //@Autowired注解、@Inject和@Value注解的属性和方法\n        InjectionMetadata metadata = this.findAutowiringMetadata(beanName, bean.getClass(), pvs);\n\n        try {\n            //属性填充\n            metadata.inject(bean, beanName, pvs);\n            return pvs;\n        } catch (BeanCreationException var6) {\n            throw var6;\n        } catch (Throwable var7) {\n            throw new BeanCreationException(beanName, \"Injection of autowired dependencies failed\", var7);\n        }\n    }\n```\n\n\n\n## 19.说说什么是AOP？\n\n\n\nAOP：面向切面编程。简单说，就是把一些业务逻辑中的相同的代码抽取到一个独立的模块中，让业务逻辑更加清爽。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357269719-73552f31-9453-47e4-8d87-ee8c8273b020.png)\n\n\n\n具体来说，假如我现在要crud写一堆业务，可是如何业务代码前后前后进行打印日志和参数的校验呢？\n\n\n\n我们可以把`日志记录`和`数据校验`可重用的功能模块分离出来，然后在程序的执行的合适的地方动态地植入这些代码并执行。这样就简化了代码的书写。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357271706-f231fd5d-4f0f-495c-9ea4-6c6b24e47805.png)\n\n\n\n业务逻辑代码中没有参和通用逻辑的代码，业务模块更简洁，只包含核心业务代码。实现了业务逻辑和通用逻辑的代码分离，便于维护和升级，降低了业务逻辑和通用逻辑的耦合性。\n\n\n\nAOP 可以将遍布应用各处的功能分离出来形成可重用的组件。在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能。从而实现对业务逻辑的隔离，提高代码的模块化能力。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357274813-98e34ee4-aed6-44e9-9ec7-e16034a74625.png)\n\n\n\nAOP 的核心其实就是**动态代理**，如果是实现了接口的话就会使用 JDK 动态代理，否则使用 CGLIB 代理，主要应用于处理一些具有横切性质的系统级服务，如日志收集、事务管理、安全检查、缓存、对象池管理等。\n\n\n\n**AOP有哪些核心概念？**\n\n\n\n-  **切面**（Aspect）：类是对物体特征的抽象，切面就是对横切关注点的抽象 \n\n-  **连接点**（Joinpoint）：被拦截到的点，因为 Spring 只支持方法类型的连接点，所以在 Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器 \n\n-  **切点**（Pointcut）：对连接点进行拦截的定位 \n\n-  **通知**（Advice）：所谓通知指的就是指拦截到连接点之后要执行的代码，也可以称作**增强** \n\n-  **目标对象** （Target）：代理的目标对象 \n\n-  **织入**（Weabing）：织入是将增强添加到目标类的具体连接点上的过程。 \n\n- -  编译期织入：切面在目标类编译时被织入 \n\n- -  类加载期织入：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码。 \n\n- -  运行期织入：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面。\n    Spring采用运行期织入，而AspectJ采用编译期织入和类加载器织入。 \n\n-  **引介**（introduction）：引介是一种特殊的增强，可以动态地为类添加一些属性和方法 \n\n\n\n**AOP有哪些环绕方式？**\n\n\n\nAOP 一般有 **5 种**环绕方式：\n\n\n\n- 前置通知 ([@Before) ]() \n\n- 返回通知 ([@AfterReturning) ]() \n\n- 异常通知 ([@AfterThrowing) ]() \n\n- 后置通知 ([@After) ]() \n\n- 环绕通知 ([@Around) ]() \n\n\n\n![img](大厂面试之Spring篇.assets/1676357277036-09d39f8d-ad02-4f8e-96ad-4467bee05de8.png)\n\n\n\n多个切面的情况下，可以通过 [@Order ]() 指定先后顺序，数字越小，优先级越高。 \n\n\n\n## 20.说说你平时有用到AOP吗？\n\n\n\nPS：这道题陈哥的同事面试候选人的时候问到了，候选人说了一堆AOP原理，同事就势来一句，你能现场写一下AOP的应用吗？结果——场面一度很尴尬。虽然我对面试写这种百度就能出来的东西持保留意见，但是还是加上了这一问，毕竟招人最后都是要撸代码的。\n\n\n\n这里给出一个小例子，SpringBoot项目中，利用AOP打印接口的入参和出参日志，以及执行时间，还是比较快捷的。\n\n\n\n引入依赖：引入AOP依赖\n\n\n\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n自定义注解：自定义一个注解作为切点\n\n\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\n@Documented\npublic @interface WebLog {\n}\n```\n\n\n\n配置AOP切面：\n\n\n\n```java\n@Aspect\n@Component\npublic class WebLogAspect {\n\n    private final static Logger logger         = LoggerFactory.getLogger(WebLogAspect.class);\n\n    /**\n     * 以自定义 @WebLog 注解为切点\n     **/\n    @Pointcut(\"@annotation(cn.fighter3.spring.aop_demo.WebLog)\")\n    public void webLog() {}\n\n    /**\n     * 在切点之前织入\n     */\n    @Before(\"webLog()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        // 打印请求相关参数\n        logger.info(\"========================================== Start ==========================================\");\n        // 打印请求 url\n        logger.info(\"URL            : {}\", request.getRequestURL().toString());\n        // 打印 Http method\n        logger.info(\"HTTP Method    : {}\", request.getMethod());\n        // 打印调用 controller 的全路径以及执行方法\n        logger.info(\"Class Method   : {}.{}\", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());\n        // 打印请求的 IP\n        logger.info(\"IP             : {}\", request.getRemoteAddr());\n        // 打印请求入参\n        logger.info(\"Request Args   : {}\",new ObjectMapper().writeValueAsString(joinPoint.getArgs()));\n    }\n\n    /**\n     * 在切点之后织入\n     * @throws Throwable\n     */\n    @After(\"webLog()\")\n    public void doAfter() throws Throwable {\n        // 结束后打个分隔线，方便查看\n        logger.info(\"=========================================== End ===========================================\");\n    }\n\n    /**\n     * 环绕\n     */\n    @Around(\"webLog()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        //开始时间\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 打印出参\n        logger.info(\"Response Args  : {}\", new ObjectMapper().writeValueAsString(result));\n        // 执行耗时\n        logger.info(\"Time-Consuming : {} ms\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n}\n```\n\n\n\n@Aspect：标识切面\n\n\n\n@Pointcut：设置切点，这里以自定义注解为切点，定义切点有很多其它种方式，自定义注解是比较常用的一种。\n\n\n\n@Before：在切点之前织入，打印了一些入参信息\n\n\n\n@Around：环绕切点，打印返回参数和接口执行时间\n\n\n\n使用：只需要在接口上加上自定义注解\n\n\n\n```java\n    @GetMapping(\"/hello\")\n    @WebLog(desc = \"这是一个欢迎接口\")\n    public String hello(String name){\n        return \"Hello \"+name;\n    }\n```\n\n\n\n执行结果：可以看到日志打印了入参、出参和执行时间\n\n\n\n![img](大厂面试之Spring篇.assets/1676357280598-f0f2fd42-0b9a-4871-b1d9-c40f9cb3e6d4.png)\n\n\n\n## 21.说说JDK 动态代理和 CGLIB 代理 ？\n\n\n\nSpring的AOP是通过[动态代理](https://mp.weixin.qq.com/s?__biz=MzkwODE5ODM0Ng==&mid=2247490507&idx=1&sn=003af1086e53877662621632fa96284d&scene=21#wechat_redirect)来实现的，动态代理主要有两种方式JDK动态代理和Cglib动态代理，这两种动态代理的使用和原理有些不同。\n\n\n\n**JDK 动态代理**\n\n\n\n1、**Interface**：对于 JDK 动态代理，目标类需要实现一个Interface。\n\n\n\n2、**InvocationHandler**：InvocationHandler是一个接口，可以通过实现这个接口，定义横切逻辑，再通过反射机制（invoke）调用目标类的代码，在次过程，可能包装逻辑，对目标方法进行前置后置处理。\n\n\n\n3、**Proxy**：Proxy利用InvocationHandler动态创建一个符合目标类实现的接口的实例，生成目标类的代理对象。\n\n\n\n**CgLib 动态代理**\n\n\n\n1、使用JDK创建代理有一大限制，它只能为接口创建代理实例，而CgLib 动态代理就没有这个限制。\n\n\n\n2、CgLib 动态代理是使用字节码处理框架 **ASM**，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。\n\n\n\n3、**CgLib** 创建的动态代理对象性能比 JDK 创建的动态代理对象的性能高不少，但是 CGLib 在创建代理对象时所花费的时间却比 JDK 多得多，所以对于单例的对象，因为无需频繁创建对象，用 CGLib 合适，反之，使用 JDK 方式要更为合适一些。同时，由于 CGLib 由于是采用动态创建子类的方法，对于 final 方法，无法进行代理。\n\n\n\n我们来看一个常见的小场景，客服中转，解决用户问题：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357283032-1f9e6951-057f-4e7d-8056-fe12729598c4.png)\n\n\n\n**JDK动态代理实现：**\n\n\n\n![img](大厂面试之Spring篇.assets/1676357284988-a76cf436-d97e-4dc6-8fa2-a3abaa959063.png)\n\n\n\n接口\n\n\n\n```java\npublic interface ISolver {\n    void solve();\n}\n```\n\n\n\n目标类:需要实现对应接口\n\n\n\n```java\npublic class Solver implements ISolver {\n    @Override\n    public void solve() {\n        System.out.println(\"疯狂掉头发解决问题……\");\n    }\n}\n```\n\n\n\n动态代理工厂:ProxyFactory，直接用反射方式生成一个目标对象的代理对象，这里用了一个匿名内部类方式重写InvocationHandler方法，实现接口重写也差不多\n\n\n\n```java\npublic class ProxyFactory {\n\n    // 维护一个目标对象\n    private Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    // 为目标对象生成代理对象\n    public Object getProxyInstance() {\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        System.out.println(\"请问有什么可以帮到您？\");\n\n                        // 调用目标对象方法\n                        Object returnValue = method.invoke(target, args);\n\n                        System.out.println(\"问题已经解决啦！\");\n                        return null;\n                    }\n                });\n    }\n}\n```\n\n\n\n客户端：Client，生成一个代理对象实例，通过代理对象调用目标对象方法\n\n\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        //目标对象:程序员\n        ISolver developer = new Solver();\n        //代理：客服小姐姐\n        ISolver csProxy = (ISolver) new ProxyFactory(developer).getProxyInstance();\n        //目标方法：解决问题\n        csProxy.solve();\n    }\n}\n```\n\n\n\n**Cglib动态代理实现：**\n\n\n\n![img](大厂面试之Spring篇.assets/1676357288624-f32f8d0e-7a76-4c94-b6d8-a9fa7c974046.png)\n\n\n\n目标类：Solver，这里目标类不用再实现接口。\n\n\n\n```java\npublic class Solver {\n\n    public void solve() {\n        System.out.println(\"疯狂掉头发解决问题……\");\n    }\n}\n```\n\n\n\n动态代理工厂：\n\n\n\n```java\npublic class ProxyFactory implements MethodInterceptor {\n\n   //维护一个目标对象\n    private Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    //为目标对象生成代理对象\n    public Object getProxyInstance() {\n        //工具类\n        Enhancer en = new Enhancer();\n        //设置父类\n        en.setSuperclass(target.getClass());\n        //设置回调函数\n        en.setCallback(this);\n        //创建子类对象代理\n        return en.create();\n    }\n\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        System.out.println(\"请问有什么可以帮到您？\");\n        // 执行目标对象的方法\n        Object returnValue = method.invoke(target, args);\n        System.out.println(\"问题已经解决啦！\");\n        return null;\n    }\n\n}\n```\n\n\n\n客户端：Client\n\n\n\n```java\npublic class Client {\n    public static void main(String[] args) {\n        //目标对象:程序员\n        Solver developer = new Solver();\n        //代理：客服小姐姐\n        Solver csProxy = (Solver) new ProxyFactory(developer).getProxyInstance();\n        //目标方法：解决问题\n        csProxy.solve();\n    }\n}\n```\n\n\n\n## 22.说说Spring AOP 和 AspectJ AOP 区别?\n\n\n\n**Spring AOP**\n\n\n\nSpring AOP 属于`运行时增强`，主要具有如下特点：\n\n\n\n1、基于动态代理来实现，默认如果使用接口的，用 JDK 提供的动态代理实现，如果是方法则使用 CGLIB 实现\n\n\n\n2、Spring AOP 需要依赖 IOC 容器来管理，并且只能作用于 Spring 容器，使用纯 Java 代码实现\n\n\n\n3、在性能上，由于 Spring AOP 是基于**动态代理**来实现的，在容器启动时需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 的那么好。\n\n\n\n4、Spring AOP 致力于解决企业级开发中最普遍的 AOP(方法织入)。\n\n\n\n**AspectJ**\n\n\n\nAspectJ 是一个易用的功能强大的 AOP 框架，属于`编译时增强`，  可以单独使用，也可以整合到其它框架中，是 AOP 编程的完全解决方案。AspectJ 需要用到单独的编译器 ajc。\n\n\n\nAspectJ 属于**静态织入**，通过修改代码来实现，在实际运行之前就完成了织入，所以说它生成的类是没有额外运行时开销的，一般有如下几个织入的时机：\n\n\n\n1、编译期织入（Compile-time weaving）：如类 A 使用 AspectJ 添加了一个属性，类 B 引用了它，这个场景就需要编译期的时候就进行织入，否则没法编译类 B。\n\n\n\n2、编译后织入（Post-compile weaving）：也就是已经生成了 .class 文件，或已经打成 jar 包了，这种情况我们需要增强处理的话，就要用到编译后织入。\n\n\n\n3、类加载后织入（Load-time weaving）：指的是在加载类的时候进行织入，要实现这个时期的织入，有几种常见的方法\n\n\n\n整体对比如下：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357291532-d974c761-3c1c-4b25-9304-b02495ea8e7a.png)\n\n\n\nSpring 事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，Spring 是无法提供事务功能的。Spring 只提供统一事务管理接口，具体实现都是由各数据库自己实现，数据库事务的提交和回滚是通过数据库自己的事务机制实现。\n\n\n\n## 23.Spring 事务的种类？\n\n\n\nSpring 支持`编程式事务`管理和`声明式`事务管理两种方式：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357293456-647baa4c-0d48-48f8-b32d-688d04798225.png)\n\n\n\n**1、编程式事务**\n\n\n\n编程式事务管理使用 TransactionTemplate，需要显式执行事务。\n\n\n\n**2、声明式事务**\n\n\n\n声明式事务管理建立在 AOP 之上的。其本质是通过 AOP 功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前启动一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务\n\n\n\n优点是不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明或通过 [@Transactional ]() 注解的方式，便可以将事务规则应用到业务逻辑中，减少业务代码的污染。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。 \n\n\n\n## 24.Spring 的事务隔离级别？\n\n\n\nSpring的接口TransactionDefinition中定义了表示隔离级别的常量，当然其实主要还是对应数据库的事务隔离级别：\n\n\n\n1、**ISOLATION_DEFAULT**：使用后端数据库默认的隔离界别，MySQL 默认可重复读，Oracle 默认读已提交。\n\n\n\n2、**ISOLATION_READ_UNCOMMITTED**：读未提交\n\n\n\n3、**ISOLATION_READ_COMMITTED**：读已提交\n\n\n\n4、**ISOLATION_REPEATABLE_READ**：可重复读\n\n\n\n5、**ISOLATION_SERIALIZABLE**：串行化\n\n\n\n## 25.Spring 的事务传播机制？\n\n\n\nSpring 事务的传播机制说的是，当多个事务同时存在的时候——一般指的是多个事务方法相互调用时，Spring 如何处理这些事务的行为。\n\n\n\n事务传播机制是使用简单的 ThreadLocal 实现的，所以，如果调用的方法是在新线程调用的，事务传播实际上是会失效的。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357296072-a398ed12-61f7-41f6-a0de-0235c63da987.png)\n\n\n\nSpring默认的事务传播行为是PROPAFATION_REQUIRED，它适合绝大多数情况，如果多个ServiceX#methodX()都工作在事务环境下（均被Spring事务增强），且程序中存在调用链Service1#method1()->Service2#method2()->Service3#method3()，那么这3个服务类的三个方法通过Spring的事务传播机制都工作在同一个事务中。\n\n\n\n## 26.声明式事务实现原理了解吗？\n\n\n\n就是通过AOP/动态代理。\n\n\n\n**在Bean初始化阶段创建代理对象**：Spring容器在初始化每个单例bean的时候，会遍历容器中的所有BeanPostProcessor实现类，并执行其postProcessAfterInitialization方法，在执行AbstractAutoProxyCreator类的postProcessAfterInitialization方法时会遍历容器中所有的切面，查找与当前实例化bean匹配的切面，这里会获取事务属性切面，查找@Transactional注解及其属性值，然后根据得到的切面创建一个代理对象，默认是使用JDK动态代理创建代理，如果目标类是接口，则使用JDK动态代理，否则使用Cglib。\n\n\n\n**在执行目标方法时进行事务增强操作**：当通过代理对象调用Bean方法的时候，会触发对应的AOP增强拦截器，声明式事务是一种环绕增强，对应接口为`MethodInterceptor`，事务增强对该接口的实现为`TransactionInterceptor`，类图如下：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357298574-10f34fad-606d-40c6-ad90-70cd99503727.png)\n\n\n\n事务拦截器`TransactionInterceptor`在`invoke`方法中，通过调用父类`TransactionAspectSupport`的`invokeWithinTransaction`方法进行事务处理，包括开启事务、事务提交、异常回滚。\n\n\n\n## 27.声明式事务在哪些情况下会失效？\n\n\n\n![img](大厂面试之Spring篇.assets/1676357300378-f8c8e017-ab58-4a7f-8afe-731f60cd808d.png)\n\n\n\n**1、**[**@Transactional** ]() **应用在非 public 修饰的方法上** \n\n\n\n如果Transactional注解应用在非 public 修饰的方法上，Transactional将会失效。\n\n\n\n是因为在Spring AOP 代理时，TransactionInterceptor  （事务拦截器）在目标方法执行前后进行拦截，DynamicAdvisedInterceptor（CglibAopProxy  的内部类）的intercept方法 或  JdkDynamicAopProxy的invoke方法会间接调用AbstractFallbackTransactionAttributeSource的 **computeTransactionAttribute**方法，获取Transactional 注解的事务配置信息。\n\n\n\n```java\nprotected TransactionAttribute computeTransactionAttribute(Method method,\n    Class<?> targetClass) {\n        // Don't allow no-public methods as required.\n        if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {\n        return null;\n}\n```\n\n\n\n此方法会检查目标方法的修饰符是否为 public，不是 public则不会获取[@Transactional ]() 的属性配置信息。 \n\n\n\n**2、**[**@Transactional** ]() **注解属性 propagation 设置错误** \n\n\n\n- TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n\n- TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n\n- TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\n\n\n\n**3、**[**@Transactional** ]() **注解属性 rollbackFor 设置错误** \n\n\n\nrollbackFor 可以指定能够触发事务回滚的异常类型。Spring默认抛出了未检查unchecked异常（继承自 RuntimeException的异常）或者 Error才回滚事务，其他异常不会触发回滚事务。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357302489-9e7b9f08-a40a-4ca0-9344-5256de1b192f.png)\n\n\n\nSpring默认支持的异常回滚\n\n\n\n```java\n// 希望自定义的异常可以进行回滚\n@Transactional(propagation= Propagation.REQUIRED,rollbackFor= MyException.class\n```\n\n\n\n若在目标方法中抛出的异常是 rollbackFor 指定的异常的子类，事务同样会回滚。\n\n\n\n**4、同一个类中方法调用，导致@Transactional失效**\n\n\n\n开发中避免不了会对同一个类里面的方法调用，比如有一个类Test，它的一个方法A，A再调用本类的方法B（不论方法B是用public还是private修饰），但方法A没有声明注解事务，而B方法有。则外部调用方法A之后，方法B的事务是不会起作用的。这也是经常犯错误的一个地方。\n\n\n\n那为啥会出现这种情况？其实这还是由于使用Spring AOP代理造成的，因为只有当事务方法被当前类以外的代码调用时，才会由Spring生成的代理对象来管理。\n\n\n\n```java\n //@Transactional\n     @GetMapping(\"/test\")\n     private Integer A() throws Exception {\n         CityInfoDict cityInfoDict = new CityInfoDict();\n         cityInfoDict.setCityName(\"2\");\n         /**\n          * B 插入字段为 3的数据\n          */\n         this.insertB();\n        /**\n         * A 插入字段为 2的数据\n         */\n        int insert = cityInfoDictMapper.insert(cityInfoDict);\n        return insert;\n    }\n\n    @Transactional()\n    public Integer insertB() throws Exception {\n        CityInfoDict cityInfoDict = new CityInfoDict();\n        cityInfoDict.setCityName(\"3\");\n        cityInfoDict.setParentCityId(3);\n\n        return cityInfoDictMapper.insert(cityInfoDict);\n    }\n```\n\n\n\n这种情况是最常见的一种@Transactional注解失效场景\n\n\n\n```java\n@Transactional\nprivate Integer A() throws Exception {\n    int insert = 0;\n    try {\n        CityInfoDict cityInfoDict = new CityInfoDict();\n        cityInfoDict.setCityName(\"2\");\n        cityInfoDict.setParentCityId(2);\n        /**\n         * A 插入字段为 2的数据\n         */\n        insert = cityInfoDictMapper.insert(cityInfoDict);\n        /**\n         * B 插入字段为 3的数据\n        */\n        b.insertB();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n```\n\n\n\n如果B方法内部抛了异常，而A方法此时try catch了B方法的异常，那这个事务就不能正常回滚了，会抛出异常：\n\n\n\n```java\norg.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only\n```\n\n\n\n## 28.Spring MVC 的核心组件？\n\n\n\n1、**DispatcherServlet**：前置控制器，是整个流程控制的**核心**，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。\n\n\n\n2、**Handler**：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。\n\n\n\n3、**HandlerMapping**：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。\n\n\n\n4、**HandlerInterceptor**：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。\n\n\n\n5、**HandlerExecutionChain**：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。\n\n\n\n6、**HandlerAdapter**：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。\n\n\n\n7、**ModelAndView**：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。\n\n\n\n8、**ViewResolver**：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。\n\n\n\n## 29.Spring MVC 的工作流程？\n\n\n\n![img](大厂面试之Spring篇.assets/1676357306536-13ae7de6-1f90-435b-80fc-c2f35c61e4b1.png)\n\n\n\n1、客户端向服务端发送一次请求，这个请求会先到前端控制器DispatcherServlet(也叫中央控制器)。\n\n\n\n2、DispatcherServlet接收到请求后会调用HandlerMapping处理器映射器。由此得知，该请求该由哪个Controller来处理（并未调用Controller，只是得知）\n\n\n\n3、DispatcherServlet调用HandlerAdapter处理器适配器，告诉处理器适配器应该要去执行哪个Controller\n\n\n\n4、HandlerAdapter处理器适配器去执行Controller并得到ModelAndView(数据和视图)，并层层返回给DispatcherServlet\n\n\n\n5、DispatcherServlet将ModelAndView交给ViewReslover视图解析器解析，然后返回真正的视图。\n\n\n\n6、DispatcherServlet将模型数据填充到视图中\n\n\n\n7、DispatcherServlet将结果响应给客户端\n\n\n\n**Spring MVC** 虽然整体流程复杂，但是实际开发中很简单，大部分的组件不需要开发人员创建和管理，只需要通过配置文件的方式完成配置即可，真正需要开发人员进行处理的只有 **Handler（Controller）** 、**View** 、**Model**。\n\n\n\n当然我们现在大部分的开发都是前后端分离，Restful风格接口，后端只需要返回Json数据就行了。\n\n\n\n## 30.SpringMVC Restful风格的接口的流程是什么样的呢？\n\n\n\nPS:这是一道全新的八股，毕竟ModelAndView这种方式应该没人用了吧？现在都是前后端分离接口，八股也该更新换代了。\n\n\n\n我们都知道Restful接口，响应格式是json，这就用到了一个常用注解：[**@ResponseBody** ]() \n\n\n\n```java\n    @GetMapping(\"/user\")\n    @ResponseBody\n    public User user(){\n        return new User(1,\"张三\");\n    }\n```\n\n\n\n加入了这个注解后，整体的流程上和使用ModelAndView大体上相同，但是细节上有一些不同：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357308815-7b096331-16ae-4114-af89-c1c9a759d3d6.png)\n\n\n\n1、客户端向服务端发送一次请求，这个请求会先到前端控制器DispatcherServlet\n\n\n\n2、DispatcherServlet接收到请求后会调用HandlerMapping处理器映射器。由此得知，该请求该由哪个Controller来处理\n\n\n\n3、DispatcherServlet调用HandlerAdapter处理器适配器，告诉处理器适配器应该要去执行哪个Controller\n\n\n\n4、Controller被封装成了ServletInvocableHandlerMethod，HandlerAdapter处理器适配器去执行invokeAndHandle方法，完成对Controller的请求处理\n\n\n\n5、HandlerAdapter执行完对Controller的请求，会调用HandlerMethodReturnValueHandler去处理返回值，主要的过程：\n\n\n\n-  调用RequestResponseBodyMethodProcessor，创建ServletServerHttpResponse（Spring对原生ServerHttpResponse的封装）实例 \n\n-  使用HttpMessageConverter的write方法，将返回值写入ServletServerHttpResponse的OutputStream输出流中 \n\n-  在写入的过程中，会使用JsonGenerator（默认使用Jackson框架）对返回值进行Json序列化 \n\n\n\n6、执行完请求后，返回的ModealAndView为null，ServletServerHttpResponse里也已经写入了响应，所以不用关心View的处理\n\n\n\n## 31.介绍一下SpringBoot，有哪些优点？\n\n\n\nSpring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring  框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。\n\n\n\n![img](大厂面试之Spring篇.assets/1676357312002-31aa115d-ecc1-4811-92ad-c8e5c5b45935.png)\n\n\n\nSpring Boot 以`约定大于配置`核心思想开展工作，相比Spring具有如下优势：\n\n\n\n1、Spring Boot 可以快速创建独立的Spring应用程序。\n\n\n\n2、Spring Boot 内嵌了如Tomcat，Jetty和Undertow这样的容器，也就是说可以直接跑起来，用不着再做部署工作了。\n\n\n\n3、Spring Boot 无需再像Spring一样使用一堆繁琐的xml文件配置。\n\n\n\n4、Spring Boot  可以自动配置(核心)Spring。SpringBoot将原有的XML配置改为Java配置，将bean注入改为使用注解注入的方式(@Autowire)，并将多个xml、properties配置浓缩在一个appliaction.yml配置文件中。\n\n\n\n5、Spring Boot 提供了一些现有的功能，如量度工具，表单数据验证以及一些外部配置这样的一些第三方功能。\n\n\n\n6、Spring Boot 可以快速整合常用依赖（开发库，例如spring-webmvc、jackson-json、validation-api和tomcat等），提供的POM可以简化Maven的配置。当我们引入核心依赖时，SpringBoot会自引入其他依赖。\n\n\n\n## 32.SpringBoot自动配置原理了解吗？\n\n\n\nSpringBoot开启自动配置的注解是`@EnableAutoConfiguration` ，启动类上的注解`@SpringBootApplication`是一个复合注解，包含了@EnableAutoConfiguration：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357314316-9869cb9e-b65e-48f0-afd3-12af224dfbd0.png)\n\n\n\n`EnableAutoConfiguration` 只是一个简单的注解，自动装配核心功能的实现实际是通过 `AutoConfigurationImportSelector`类\n\n\n\n```java\n@AutoConfigurationPackage //将main同级的包下的所有组件注册到容器中\n@Import({AutoConfigurationImportSelector.class}) //加载自动装配类 xxxAutoconfiguration\npublic @interface EnableAutoConfiguration {\n    String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n    Class<?>[] exclude() default {};\n\n    String[] excludeName() default {};\n}\n```\n\n\n\n`AutoConfigurationImportSelector`实现了`ImportSelector`接口，这个接口的作用就是收集需要导入的配置类，配合`@Import(）`就可以将相应的类导入到Spring容器中\n\n\n\n获取注入类的方法是selectImports()，它实际调用的是`getAutoConfigurationEntry`，这个方法是获取自动装配类的关键，主要流程可以分为这么几步：\n\n\n\n1、获取注解的属性，用于后面的排除\n\n\n\n2、**获取所有需要自动装配的配置类的路径**：这一步是最关键的，从META-INF/spring.factories获取自动配置类的路径\n\n\n\n3、去掉重复的配置类和需要排除的重复类，把需要自动加载的配置类的路径存储起来\n\n\n\n```java\n    protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n        if (!this.isEnabled(annotationMetadata)) {\n            return EMPTY_ENTRY;\n        } else {\n            //1.获取到注解的属性\n            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n            //2.获取需要自动装配的所有配置类，读取META-INF/spring.factories，获取自动配置类路径\n            List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n            //3.1.移除重复的配置\n            configurations = this.removeDuplicates(configurations);\n            //3.2.处理需要排除的配置\n            Set<String> exclusions = this.getExclusions(annotationMetadata, attributes);\n            this.checkExcludedClasses(configurations, exclusions);\n            configurations.removeAll(exclusions);\n            configurations = this.getConfigurationClassFilter().filter(configurations);\n            this.fireAutoConfigurationImportEvents(configurations, exclusions);\n            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n        }\n    }\n```\n\n\n\n## 33.如何自定义一个SpringBoot Srarter?\n\n\n\n知道了自动配置原理，创建一个自定义SpringBoot Starter也很简单。\n\n\n\n1、创建一个项目，命名为demo-spring-boot-starter，引入SpringBoot相关依赖\n\n\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n```\n\n\n\n2、编写配置文件；这里定义了属性配置的前缀\n\n\n\n```java\n@ConfigurationProperties(prefix = \"hello\")\npublic class HelloProperties {\n\n    private String name;\n\n    //省略getter、setter\n}\n```\n\n\n\n3、自动装配；创建自动配置类HelloPropertiesConfigure\n\n\n\n```java\n@Configuration\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloPropertiesConfigure {\n}\n```\n\n\n\n4、配置自动类；在`/resources/META-INF/spring.factories`文件中添加自动配置类路径\n\n\n\n```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n  cn.fighter3.demo.starter.configure.HelloPropertiesConfigure\n```\n\n\n\n5、测试；至此，随手写的一个自定义SpringBoot-Starter就完成了，虽然比较简单，但是完成了主要的自动装配的能力。\n\n\n\n6、创建一个工程，引入自定义starter依赖\n\n\n\n```xml\n        <dependency>\n            <groupId>cn.fighter3</groupId>\n            <artifactId>demo-spring-boot-starter</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n```\n\n\n\n7、在配置文件里添加配置\n\n\n\n```java\nhello.name=张三\n```\n\n\n\n8、测试类\n\n\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class HelloTest {\n    @Autowired\n    HelloProperties helloProperties;\n\n    @Test\n    public void hello(){\n        System.out.println(\"你好，\"+helloProperties.getName());\n    }\n}\n```\n\n\n\n8、运行结果\n\n\n\n![img](大厂面试之Spring篇.assets/1676357318769-7365d52c-e692-4ed2-a8a4-3c1ac35504dc.png)\n\n\n\n## 34.Springboot 启动原理？\n\n\n\nSpringApplication 这个类主要做了以下四件事情：\n\n\n\n1、推断应用的类型是普通的项目还是 Web 项目\n\n\n\n2、查找并加载所有可用初始化器 ， 设置到 initializers 属性中\n\n\n\n3、找出所有的应用程序监听器，设置到 listeners 属性中\n\n\n\n4、推断并设置 main 方法的定义类，找到运行的主类\n\n\n\nSpringBoot 启动大致流程如下 ：\n\n\n\n![img](大厂面试之Spring篇.assets/1676357320577-538657c2-d51b-4979-a3bc-05553718715f.png)","tags":["我要进大厂","面试","Spring"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之分布式篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之分布式篇/","content":"\n# 分布式理论\n\n\n\n## 1. 说说CAP原则？\n\n\n\nCAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）这3个基本需求，最多只能同时满足其中的2个。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501656057-62380d8d-c4e6-4cce-bd09-2e1c694153f7.png)\n\n| 选项                              | 描述                                                         |\n| --------------------------------- | ------------------------------------------------------------ |\n| Consistency（一致性）             | 指数据在多个副本之间能够保持一致的特性（严格的一致性）       |\n| Availability（可用性）            | 指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据） |\n| Partition tolerance（分区容错性） | 分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障 |\n\n\n\n## 2. 为什么CAP不可兼得呢？\n\n\n\n首先对于分布式系统，分区是必然存在的，所谓分区指的是分布式系统可能出现的字区域网络不通，成为孤立区域的的情况。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501659293-e4b6c80c-0f7d-4928-9cd5-fc820b971096.png)\n\n\n\n那么分区容错性（**P**）就必须要满足，因为如果要牺牲分区容错性，就得把服务和资源放到一个机器，或者一个“同生共死”的集群，那就违背了分布式的初衷。\n\n\n\n那么满足分区容错的基础上，能不能同时满足`一致性`和`可用性`？\n\n\n\n假如现在有两个分区`N1`和`N2`，N1和N2分别有不同的分区存储D1和D2，以及不同的服务S1和S2。\n\n\n\n- 在满足`一致性` 的时候，N1和N2的数据要求值一样的，D1=D2。\n- 在满足`可用性`的时候，无论访问N1还是N2，都能获取及时的响应。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501661467-076fb255-1d26-4613-bf64-862469f27b86.png)\n\n\n\n假如现在有这样的场景：\n\n\n\n- 用户访问了N1，修改了D1的数据。\n- 用户再次访问，请求落在了N2。此时D1和D2的数据不一致。\n\n\n\n接下来：\n\n\n\n- 保证`一致性`：此时D1和D2数据不一致，要保证一致性就不能返回不一致的数据，`可用性`无法保证。\n- 保证`可用性`：立即响应，可用性得到了保证，但是此时响应的数据和D1不一致，`一致性`无法保证。\n\n\n\n所以，可以看出，分区容错的前提下，`一致性`和`可用性`是矛盾的。\n\n\n\n## 3. CAP对应的模型和应用？\n\n\n\n**CA without P**\n\n\n\n理论上放弃P（分区容错性），则C（强一致性）和A（可用性）是可以保证的。实际上分区是不可避免的，严格上CA指的是允许分区后各子系统依然保持CA。\n\n\n\nCA模型的常见应用：\n\n\n\n- 集群数据库\n- xFS文件系统\n\n\n\n**CP without A**\n\n\n\n放弃A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。\n\n\n\nCP模型的常见应用：\n\n\n\n- 分布式数据库\n- 分布式锁\n\n\n\n**AP wihtout C**\n\n\n\n要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。\n\n\n\nAP模型常见应用：\n\n\n\n- Web缓存\n- DNS\n\n\n\n举个大家更熟悉的例子，像我们熟悉的注册中心`ZooKeeper`、`Eureka`、`Nacos`中：\n\n\n\n- ZooKeeper 保证的是 CP\n- Eureka 保证的则是 AP\n- Nacos 不仅支持 CP 也支持 AP\n\n\n\n## 4. BASE理论了解吗？\n\n\n\nBASE（Basically Available、Soft state、Eventual consistency）是基于CAP理论逐步演化而来的，核心思想是即便不能达到强一致性（Strong consistency），也可以根据应用特点采用适当的方式来达到最终一致性（Eventual consistency）的效果。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501665063-2e887ac4-49ad-445e-837a-45813ae5a3af.png)\n\n\n\nBASE的主要含义：\n\n\n\n- **Basically Available（基本可用）**\n\n\n\n什么是基本可用呢？假设系统出现了不可预知的故障，但还是能用，只是相比较正常的系统而言，可能会有响应时间上的损失，或者功能上的降级。\n\n\n\n- **Soft State（软状态）**\n\n\n\n什么是硬状态呢？要求多个节点的数据副本都是一致的，这是一种“硬状态”。\n\n\n\n软状态也称为弱状态，相比较硬状态而言，允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。\n\n\n\n- **Eventually Consistent（最终一致性）**\n\n\n\n上面说了软状态，但是不应该一直都是软状态。在一定时间后，应该到达一个最终的状态，保证所有副本保持数据一致性，从而达到数据的最终一致性。这个时间取决于网络延时、系统负载、数据复制方案设计等等因素。\n\n\n\n# 分布式锁\n\n\n\n单体时代，可以直接用本地锁来实现对竞争资源的加锁，分布式环境下就要用到分布式锁了。\n\n\n\n## 5. 有哪些分布式锁的实现方案呢？\n\n\n\n常见的分布式锁实现方案有三种：`MySQL分布式锁`、`ZooKepper分布式锁`、`Redis分布式锁`。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501667556-b10012bd-6aa7-4249-a624-128441ff2d75.png)\n\n\n\n### **5.1 MySQL分布式锁如何实现呢？**\n\n\n\n用数据库实现分布式锁比较简单，就是创建一张锁表，数据库对字段作唯一性约束。\n\n\n\n加锁的时候，在锁表中增加一条记录即可；释放锁的时候删除记录就行。\n\n\n\n如果有并发请求同时提交到数据库，数据库会保证只有一个请求能够得到锁。\n\n\n\n这种属于数据库 IO 操作，效率不高，而且频繁操作会增大数据库的开销，因此这种方式在高并发、高性能的场景中用的不多。\n\n\n\n### **5.2 ZooKeeper如何实现分布式锁？**\n\n\n\nZooKeeper也是常见分布式锁实现方法。\n\n\n\nZooKeeper的数据节点和文件目录类似，例如有一个lock节点，在此节点下建立子节点是可以保证先后顺序的，即便是两个进程同时申请新建节点，也会按照先后顺序建立两个节点。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501669992-13668387-dbbf-4bfa-95b2-01ced50a4e01.png)\n\n\n\n所以我们可以用此特性实现分布式锁。以某个资源为目录，然后这个目录下面的节点就是我们需要获取锁的客户端，每个服务在目录下创建节点，如果它的节点，序号在目录下最小，那么就获取到锁，否则等待。释放锁，就是删除服务创建的节点。\n\n\n\nZK实际上是一个比较重的分布式组件，实际上应用没那么多了，所以用ZK实现分布式锁，其实相对也比较少。\n\n\n\n### **5.3 Redis怎么实现分布式锁？**\n\n\n\nRedis实现分布式锁，是当前应用最广泛的分布式锁实现方式。\n\n\n\nRedis执行命令是单线程的，Redis实现分布式锁就是利用这个特性。\n\n\n\n实现分布式锁最简单的一个命令：setNx(set if not exist)，如果不存在则更新：\n\n\n\n```sql\nsetNx resourceName value\n```\n\n\n\n加锁了之后如果机器宕机，那我这个锁就无法释放，所以需要加入过期时间，而且过期时间需要和setNx同一个原子操作，在Redis2.8之前需要用lua脚本，但是redis2.8之后redis支持nx和ex操作是同一原子操作。\n\n\n\n```sql\nset resourceName value ex 5 nx\n```\n\n\n\n- **Redission**\n\n\n\n当然，一般生产中都是使用Redission客户端，非常良好地封装了分布式锁的api，而且支持RedLock。\n\n\n\n# 分布式事务\n\n\n\n## 6.什么是分布式事务?\n\n\n\n分布式事务是相对本地事务而言的，对于本地事务，利用数据库本身的事务机制，就可以保证事务的ACID特性。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501672761-69ddb06e-6db3-433a-80b2-3cce046d987d.png)\n\n\n\n而在分布式环境下，会涉及到多个数据库。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501674780-470a39f7-292e-4a6a-b5d9-f498824c6fac.png)\n\n\n\n分布式事务其实就是将对同一库事务的概念扩大到了对多个库的事务。目的是为了保证分布式系统中的数据一致性。\n\n\n\n分布式事务处理的关键是：\n\n\n\n1. 需要记录事务在任何节点所做的所有动作；\n2. 事务进行的所有操作要么全部提交，要么全部回滚。\n\n\n\n## 7.分布式事务有哪些常见的实现方案？\n\n\n\n分布式常见的实现方案有 **2PC**、**3PC**、**TCC**、**本地消息表**、**MQ消息事务**、**最大努力通知**、**SAGA事务** 等等。\n\n\n\n### **7.1 说说2PC两阶段提交？**\n\n\n\n说到2PC，就不得先说分布式事务中的 XA 协议。\n\n\n\n在这个协议里，有三个角色：\n\n\n\n- **AP（Application）**：应用系统（服务）\n- **TM（Transaction Manager）**：事务管理器（全局事务管理）\n- **RM（Resource Manager）**：资源管理器（数据库）\n\n\n\n![img](大厂面试之分布式篇.assets/1677501677195-07ba7ef6-2a8e-49dd-af7f-bb86f476d439.png)\n\n\n\nXA协议采用**两阶段提交**方式来管理分布式事务。XA接口提供资源管理器与事务管理器之间进行通信的标准接口。\n\n\n\n两阶段提交的思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情况决定各参与者是否要提交操作还是回滚操作。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501679611-fbf6ffe1-ce7a-41b4-a12d-3bd7df4a047f.png)\n\n\n\n- 准备阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交\n- 提交阶段：事务协调器要求每个数据库提交数据，或者回滚数据。\n\n\n\n优点：尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于MySQL是从5.5开始支持。\n\n\n\n缺点:\n\n\n\n- 单点问题：事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。\n- 同步阻塞：在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。\n- 数据不一致：两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。\n\n\n\n### **7.2 3PC（三阶段提交）了解吗？**\n\n\n\n三阶段提交（`3PC`）是二阶段提交（`2PC`）的一种改进版本 ，为解决两阶段提交协议的单点故障和同步阻塞问题。\n\n\n\n三阶段提交有这么三个阶段：`CanCommit`，`PreCommit`，`DoCommit`三个阶段\n\n\n\n![img](大厂面试之分布式篇.assets/1677501682643-5b9abee7-6df6-41bf-8b21-4701ee6f4c98.png)\n\n\n\n-  **CanCommit**：准备阶段。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。 \n-  **PreCommit**：预提交阶段。协调者根据参与者在**准备阶段**的响应判断是否执行事务还是中断事务，参与者执行完操作之后返回ACK响应，同时开始等待最终指令。 \n-  **DoCommit**：提交阶段。协调者根据参与者在**准备阶段**的响应判断是否执行事务还是中断事务： \n-  \n\n- - 如果所有参与者都返回正确的`ACK`响应，则提交事务\n  - 如果参与者有一个或多个参与者收到错误的`ACK`响应或者超时，则中断事务\n  - 如果参与者无法及时接收到来自协调者的提交或者中断事务请求时，在等待超时之后，会继续进行事务提交\n\n\n\n可以看出，三阶段提交解决的只是两阶段提交中**单体故障**和**同步阻塞**的问题，因为加入了超时机制，这里的超时的机制作用于 **预提交阶段** 和 **提交阶段**。如果等待 **预提交请求** 超时，参与者直接回到准备阶段之前。如果等到**提交请求**超时，那参与者就会提交事务了。\n\n\n\n**无论是2PC还是3PC都不能保证分布式系统中的数据100%一致**。\n\n\n\n### **7.3 TCC了解吗？**\n\n\n\n**TCC（Try Confirm Cancel）** ，是两阶段提交的一个变种，针对每个操作，都需要有一个其对应的确认和取消操作，当操作成功时调用确认操作，当操作失败时调用取消操作，类似于二阶段提交，只不过是这里的提交和回滚是针对业务上的，所以基于TCC实现的分布式事务也可以看做是对业务的一种补偿机制。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501685429-dcfe5b4d-1462-4668-82e4-49c5b38ab424.png)\n\n\n\n- **Try**：尝试待执行的业务。订单系统将当前订单状态设置为支付中，库存系统校验当前剩余库存数量是否大于1，然后将可用库存数量设置为库存剩余数量-1，。\n- **Confirm**：确认执行业务，如果Try阶段执行成功，接着执行Confirm 阶段，将订单状态修改为支付成功，库存剩余数量修改为可用库存数量。\n- **Cancel**：取消待执行的业务，如果Try阶段执行失败，执行Cancel 阶段，将订单状态修改为支付失败，可用库存数量修改为库存剩余数量。\n\n\n\n**TCC** 是业务层面的分布式事务，保证最终一致性，不会一直持有资源的锁。\n\n\n\n- **优点：** 把数据库层的二阶段提交交给应用层来实现，规避了数据库的 2PC 性能低下问题\n- **缺点**：TCC 的 Try、Confirm 和 Cancel 操作功能需业务提供，开发成本高。TCC 对业务的侵入较大和业务紧耦合，需要根据特定的场景和业务逻辑来设计相应的操作\n\n\n\n### **7.4 本地消息表了解吗？**\n\n\n\n本地消息表的核心思想是将分布式事务拆分成本地事务进行处理。\n\n\n\n例如，可以在订单库新增一个消息表，将新增订单和新增消息放到一个事务里完成，然后通过轮询的方式去查询消息表，将消息推送到MQ，库存服务去消费MQ。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501687997-8127aed5-89ca-46da-8714-b725a1d2d5f7.png)\n\n\n\n**执行流程：**\n\n\n\n1. 订单服务，添加一条订单和一条消息，在一个事务里提交\n2. 订单服务，使用定时任务轮询查询状态为未同步的消息表，发送到MQ，如果发送失败，就重试发送\n3. 库存服务，接收MQ消息，修改库存表，需要保证幂等操作\n4. 如果修改成功，调用rpc接口修改订单系统消息表的状态为已完成或者直接删除这条消息\n5. 如果修改失败，可以不做处理，等待重试\n\n\n\n订单服务中的消息有可能由于业务问题会一直重复发送，所以为了避免这种情况可以记录一下发送次数，当达到次数限制之后报警，人工接入处理；库存服务需要保证幂等，避免同一条消息被多次消费造成数据不一致。\n\n\n\n本地消息表这种方案实现了最终一致性，需要在业务系统里增加消息表，业务逻辑中多一次插入的DB操作，所以性能会有损耗，而且最终一致性的间隔主要有定时任务的间隔时间决定\n\n\n\n### **7.5 MQ消息事务了解吗？**\n\n\n\n消息事务的原理是**将两个事务通过消息中间件进行异步解耦**。\n\n\n\n订单服务执行自己的本地事务，并发送MQ消息，库存服务接收消息，执行自己的本地事务，乍一看，好像跟本地消息表的实现方案类似，只是省去 了对本地消息表的操作和轮询发送MQ的操作，但实际上两种方案的实现是不一样的。\n\n\n\n消息事务一定要保证业务操作与消息发送的一致性，如果业务操作成功，这条消息也一定投递成功。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501690021-643e1ea2-04f2-4c97-94de-44f54fe382d5.png)\n\n\n\n**执行流程：**\n\n\n\n1. 发送prepare消息到消息中间件\n2. 发送成功后，执行本地事务\n3. 如果事务执行成功，则commit，消息中间件将消息下发至消费端\n4. 如果事务执行失败，则回滚，消息中间件将这条prepare消息删除\n5. 消费端接收到消息进行消费，如果消费失败，则不断重试\n\n\n\n消息事务依赖于消息中间件的事务消息，例如我们熟悉的RocketMQ就支持事务消息（半消息），也就是只有收到发送方确定才会正常投递的消息。\n\n\n\n这种方案也是实现了最终一致性，对比本地消息表实现方案，不需要再建消息表，对性能的损耗和业务的入侵更小。\n\n\n\n### **7.6 最大努力通知了解吗？**\n\n\n\n最大努力通知相比实现会简单一些，适用于一些对最终一致性实时性要求没那么高的业务，比如支付通知，短信通知。\n\n\n\n以支付通知为例，业务系统调用支付平台进行支付，支付平台进行支付，进行操作支付之后支付平台会去同步通知业务系统支付操作是否成功，如果不成功，会一直异步重试，但是会有一个最大通知次数，如果超过这个次数后还是通知失败，就不再通知，业务系统自行调用支付平台提供一个查询接口，供业务系统进行查询支付操作是否成功。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501692681-be8e9682-3e59-4192-aa3b-8b5d09c97e91.png)\n\n\n\n**执行流程：**\n\n\n\n1. 业务系统调用支付平台支付接口， 并在本地进行记录，支付状态为支付中\n2. 支付平台进行支付操作之后，无论成功还是失败，同步给业务系统一个结果通知\n3. 如果通知一直失败则根据重试规则异步进行重试，达到最大通知次数后，不再通知\n4. 支付平台提供查询订单支付操作结果接口\n5. 业务系统根据一定业务规则去支付平台查询支付结果\n\n\n\n## 8.你们用什么？能说一下Seata吗？\n\n\n\n我们用比较常用的是Seata——自己去实现分布式事务调度还是比较麻烦的。\n\n\n\n**Seata** 的设计目标是对业务无侵入，因此它是从业务无侵入的两阶段提交（全局事务）着手，在传统的两阶段上进行改进，他把一个分布式事务理解成一个包含了若干分支事务的全局事务。而全局事务的职责是协调它管理的分支事务达成一致性，要么一起成功提交，要么一起失败回滚。也就是一荣俱荣一损俱损~\n\n\n\n![img](大厂面试之分布式篇.assets/1677501695273-41f148ad-293b-4d67-a621-93ed72132374.png)\n\n\n\n**Seata** 中存在这么几种重要角色：\n\n\n\n- **TC（Transaction Coordinator）**：事务协调者。管理全局的分支事务的状态，用于全局性事务的提交和回滚。\n- **TM（Transaction Manager）**：事务管理者。用于开启、提交或回滚事务。\n- **RM（Resource Manager）**：资源管理器。用于分支事务上的资源管理，向 **TC** 注册分支事务，上报分支事务的状态，接收 **TC** 的命令来提交或者回滚分支事务。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501697607-04c5054a-91e2-4268-ba89-49c1f8bd530a.png)\n\n\n\nS'eata整体执行流程：\n\n\n\n1. 服务A中的 **TM** 向 **TC** 申请开启一个全局事务，**TC** 就会创建一个全局事务并返回一个唯一的 **XID**\n2. 服务A中的 **RM** 向 **TC** 注册分支事务，然后将这个分支事务纳入 **XID** 对应的全局事务管辖中\n3. 服务A开始执行分支事务\n4. 服务A开始远程调用B服务，此时 **XID** 会根据调用链传播\n5. 服务B中的 **RM** 也向 **TC** 注册分支事务，然后将这个分支事务纳入 **XID** 对应的全局事务管辖中\n6. 服务B开始执行分支事务\n7. 全局事务调用处理结束后，**TM** 会根据有误异常情况，向 **TC** 发起全局事务的提交或回滚\n8. **TC** 协调其管辖之下的所有分支事务，决定是提交还是回滚\n\n\n\n# 分布式一致性算法\n\n\n\n## 9.分布式算法paxos了解么 ？\n\n\n\n`Paxos` 有点类似前面说的 `2PC`，`3PC`，但比这两种算法更加完善。在很多多大厂都得到了工程实践，比如阿里的 `OceanBase` 的 **分布式数据库**， `Google` 的 `chubby` **分布式锁** 。\n\n\n\n### **Paxos算法是什么？**\n\n\n\n`Paxos` 算法是 **基于消息传递** 且具有 **高效容错特性** 的一致性算法，目前公认的解决 **分布式一致性问题** 最有效的算法之一。\n\n\n\n### **Paxos算法的工作流程？**\n\n\n\n#### 角色\n\n\n\n在Paxos中有这么几个角色：\n\n\n\n1. **Proposer（提议者）** : 提议者提出提案，用于投票表决。\n2. **Accecptor（接受者）** : 对提案进行投票，并接受达成共识的提案。\n3. **Learner（学习者）** : 被告知投票的结果，接受达成共识的提案。\n\n\n\n在实际中，一个节点可以同时充当不同角色。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501700909-1ef3f528-6a56-4688-a30b-34fcc9063887.png)\n\n\n\n提议者提出提案，提案=编号+value，可以表示为[M,V]，每个提案都有唯一编号，而且编号的大小是趋势递增的。\n\n\n\n#### 算法流程\n\n\n\nPaxos算法包含两个阶段，第一阶段**Prepare(准备)**、第二阶段**Accept(接受)**。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501703058-b920ba36-0b50-4899-8891-2f009d07da4c.png)\n\n\n\n##### Prepare(准备)阶段\n\n\n\n1. 提议者提议一个新的提案 P[Mn,?]，然后向接受者的某个超过半数的子集成员发送编号为Mn的准备请求\n2. 如果一个接受者收到一个编号为Mn的准备请求，并且编号Mn大于它已经响应的所有准备请求的编号，那么它就会将它已经批准过的最大编号的提案作为响应反馈给提议者，同时该接受者会承诺不会再批准任何编号小于Mn的提案。\n\n\n\n总结一下，接受者在收到提案后，会给与提议者**两个承诺**与**一个应答**：\n\n\n\n-  两个承诺： \n-  \n\n- - 承诺不会再接受提案号小于或等于 Mn 的 Prepare 请求\n  - 承诺不会再接受提案号小于Mn 的 Accept 请求\n\n-  一个应答： \n-  \n\n- - 不违背以前作出的承诺的前提下，回复已经通过的提案中提案号最大的那个提案所设定的值和提案号Mmax，如果这个值从来没有被任何提案设定过，则返回空值。如果不满足已经做出的承诺，即收到的提案号并不是决策节点收到过的最大的，那允许直接对此 Prepare 请求不予理会。\n\n\n\n##### Accept(接受)阶段\n\n\n\n1. 如果提议者收到来自半数以上的接受者对于它发出的编号为Mn的准备请求的响应，那么它就会发送一个针对[Mn,Vn]的接受请求给接受者，注意Vn的值就是收到的响应中编号最大的提案的值，如果响应中不包含任何提案，那么它可以随意选定一个值。\n2. 如果接受者收到这个针对[Mn,Vn]提案的接受请求，只要该接受者尚未对编号大于Mn的准备请求做出响应，它就可以通过这个提案。\n\n\n\n当提议者收到了多数接受者的接受应答后，协商结束，共识决议形成，将形成的决议发送给所有学习节点进行学习。\n\n\n\n所以Paxos算法的整体详细流程如下：\n\n\n\n![img](大厂面试之分布式篇.assets/1677501705500-158e062c-ad24-46ff-99c3-e7b09dbeaeb6.png)\n\n\n\n算法的流程模拟，可以查看参考[13]。\n\n\n\n### **Paxos算法有什么缺点吗？怎么优化？**\n\n\n\n前面描述的可以称之为Basic Paxos 算法，在单提议者的前提下是没有问题的，但是假如有多个提议者互不相让，那么就可能导致整个提议的过程进入了死循环。\n\n\n\nLamport 提出了 Multi Paxos 的算法思想。\n\n\n\nMulti Paxos算法思想，简单说就是在多个提议者的情况下，选出一个Leader（领导者），由领导者作为唯一的提议者，这样就可以解决提议者冲突的问题。\n\n\n\n## 10.说说Raft算法？\n\n\n\n### **Raft算法是什么？**\n\n\n\n`Raft` 也是一个 **一致性算法**，和 `Paxos` 目标相同。但它还有另一个名字 - **易于理解的一致性算法**。`Paxos` 和 `Raft` 都是为了实现 **一致性** 产生的。这个过程如同选举一样，**参选者** 需要说服 **大多数选民** (Server) 投票给他，一旦选定后就跟随其操作。`Paxos` 和 `Raft` 的区别在于选举的 **具体过程** 不同。\n\n\n\n### **Raft算法的工作流程？**\n\n\n\n#### Raft算法的角色\n\n\n\n`Raft` 协议将 `Server` 进程分为三种角色：\n\n\n\n- **Leader（领导者）**\n- **Follower（跟随者）**\n- **Candidate（候选人）**\n\n\n\n就像一个民主社会，领导者由跟随者投票选出。刚开始没有 **领导者**，所有集群中的 **参与者** 都是 **跟随者**。\n\n\n\n那么首先开启一轮大选。在大选期间 **所有跟随者** 都能参与竞选，这时所有跟随者的角色就变成了 **候选人**，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除 **领导者** 的 **候选人** 又变回 **跟随者** 服从领导者领导。\n\n\n\n这里提到一个概念 **「任期」**，用术语 `Term` 表达。\n\n\n\n三类角色的变迁图如下：\n\n\n\n![img](大厂面试之分布式篇.assets/1677501709183-07be87ba-33b8-490d-975b-2f8e1d81161d.png)\n\n\n\n#### Leader选举过程\n\n\n\nRaft 使用心跳（heartbeat）触发Leader选举。当Server启动时，初始化为Follower。Leader向所有Followers周期性发送heartbeat。如果Follower在选举超时时间内没有收到Leader的heartbeat，就会等待一段随机的时间后发起一次Leader选举。\n\n\n\nFollower将其当前term加一然后转换为Candidate。它首先给自己投票并且给集群中的其他服务器发送 RequestVote RPC 。结果有以下三种情况：\n\n\n\n- 赢得了多数（超过1/2）的选票，成功选举为Leader；\n- 收到了Leader的消息，表示有其它服务器已经抢先当选了Leader；\n- 没有Server赢得多数的选票，Leader选举失败，等待选举时间超时（`Election Timeout`）后发起下一次选举。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501711229-4150e01c-867f-456c-af3a-6e1b983510e1.png)\n\n\n\n选出 `Leader` 后，`Leader` 通过 **定期** 向所有 `Follower` 发送 **心跳信息** 维持其统治。若 `Follower` 一段时间未收到 `Leader` 的 **心跳**，则认为 `Leader` 可能已经挂了，然后再次发起 **选举** 过程。\n\n\n\n# 分布式设计\n\n\n\n## 11.说说什么是幂等性？\n\n\n\n什么是幂等性？\n\n\n\n幂等性是一个数学概念，用在接口上：用在接口上就可以理解为：**同一个接口，多次发出同一个请求，请求的结果是一致的。**\n\n\n\n简单说，就是多次调用如一次。\n\n\n\n什么是幂等性问题？\n\n\n\n在系统的运行中，可能会出现这样的问题：\n\n\n\n1. 用户在填写某些`form表单`时，保存按钮不小心快速点了两次，表中竟然产生了两条重复的数据，只是id不一样。\n2. 开发人员在项目中为了解决`接口超时`问题，通常会引入了`重试机制`。第一次请求接口超时了，请求方没能及时获取返回结果（此时有可能已经成功了），于是会对该请求重试几次，这样也会产生重复的数据。\n3. mq消费者在读取消息时，有时候会读取到`重复消息`，也会产生重复的数据。\n\n\n\n这些都是常见的幂等性问题。\n\n\n\n在分布式系统里，只要下游服务有写（保存、更新）的操作，都有可能会产生幂等性问题。\n\n\n\nPS:幂等和防重有些不同，防重强调的防止数据重复，幂等强调的是多次调用如一次，防重包含幂等。\n\n\n\n## 怎么保证接口幂等性？\n\n\n\n![img](大厂面试之分布式篇.assets/1677501714073-1f823798-0f44-4cef-a4a7-a3b40549b4aa.png)\n\n\n\n1.  insert前先select\n   在保存数据的接口中，在`insert`前，先根据`requestId`等字段先`select`一下数据。如果该数据已存在，则直接返回，如果不存在，才执行  `insert`操作。 \n2.  加唯一索引\n   加唯一索引是个非常简单但很有效的办法，如果重复插入数据的话，就会抛出异常，为了保证幂等性，一般需要捕获这个异常。\n   如果是`java`程序需要捕获：`DuplicateKeyException`异常，如果使用了`spring`框架还需要捕获：`MySQLIntegrityConstraintViolationException`异常。 \n3.  加悲观锁\n   更新逻辑，比如更新用户账户余额，可以加悲观锁，把对应用户的哪一行数据锁住。同一时刻只允许一个请求获得锁，其他请求则等待。 \n\n```sql\nselect * from user id=123 for update;\n```\n\n\n这种方式有一个缺点，获取不到锁的请求一般只能报失败，比较难保证接口返回相同值。 \n\n1.  加乐观锁\n   更新逻辑，也可以用乐观锁，性能更好。可以在表中增加一个`timestamp`或者`version`字段，例如`version`:\n   在更新前，先查询一下数据，将version也作为更新的条件，同时也更新version： \n\n```sql\nupdate user set amount=amount+100,version=version+1 where id=123 and version=1;\n```\n\n\n更新成功后，version增加，重复更新请求进来就无法更新了。 \n\n1.  建防重表\n   有时候表中并非所有的场景都不允许产生重复的数据，只有某些特定场景才不允许。这时候，就可以使用防重表的方式。\n   例如消息消费中，创建防重表，存储消息的唯一ID，消费时先去查询是否已经消费，已经消费直接返回成功。 \n2.  状态机\n   有些业务表是有状态的，比如订单表中有：1-下单、2-已支付、3-完成、4-撤销等状态，可以通过限制状态的流动来完成幂等。 \n3.  分布式锁\n   直接在数据库上加锁的做法性能不够友好，可以使用分布式锁的方式，目前最流行的分布式锁实现是通过Redis，具体实现一般都是使用Redission框架。 \n4.  token机制\n   请求接口之前，需要先获取一个唯一的token，再带着这个token去完成业务操作，服务端根据这个token是否存在，来判断是否是重复的请求。 \n\n\n\n# 分布式限流\n\n\n\n## 12.你了解哪些限流算法？\n\n\n\n- 计数器\n\n\n\n计数器比较简单粗暴，比如我们要限制1s能够通过的请求数，实现的思路就是从第一个请求进来开始计时，在接下来的1s内，每个请求进来请求数就+1，超过最大请求数的请求会被拒绝，等到1s结束后计数清零，重新开始计数。\n\n\n\n这种方式有个很大的弊端：比如前10ms已经通过了最大的请求数，那么后面的990ms的请求只能拒绝，这种现象叫做“突刺现象”。\n\n\n\n- 漏桶算法\n\n\n\n就是桶底出水的速度恒定，进水的速度可能快慢不一，但是当进水量大于出水量的时候，水会被装在桶里，不会直接被丢弃；但是桶也是有容量限制的，当桶装满水后溢出的部分还是会被丢弃的。\n\n\n\n**算法实现**：可以准备一个队列来保存暂时处理不了的请求，然后通过一个线程池定期从队列中获取请求来执行。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501717290-7c0a1413-1cd8-4c37-9ece-4c8a1b32559d.png)\n\n\n\n- 令牌桶算法\n\n\n\n令牌桶就是生产访问令牌的一个地方，生产的速度恒定，用户访问的时候当桶中有令牌时就可以访问，否则将触发限流。\n\n\n\n**实现方案**：Guava RateLimiter限流\n\n\n\nGuava RateLimiter是一个谷歌提供的限流，其基于令牌桶算法，比较适用于单实例的系统。\n\n\n\n![img](大厂面试之分布式篇.assets/1677501719388-a43f5571-4a4d-435d-8bcf-2b4e353fdb90.png)\n\n\n\n","tags":["我要进大厂","面试","分布式"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之操作系统篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之操作系统篇/","content":"\n## 1.操作系统的四个特性？\n\n\n\n并发：同一段时间内多个程序执行（与并行区分，并行指的是同一时刻有多个事件，多处理器系统可以使程序并行执行）\n\n\n\n共享：系统中的资源可以被内存中多个并发执行的进线程共同使用\n\n\n\n虚拟：通过分时复用（如分时系统）以及空分复用（如虚拟内存）技术把一个物理实体虚拟为多个\n\n\n\n异步：系统进程用一种走走停停的方式执行，（并不是一下子走完），进程什么时候以怎样的速度向前推进是不可预知的\n\n\n\n## 2.进程线程\n\n\n\n进程是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间。\n\n\n\n线程是比进程更小的执行单位，它是在一个进程中独立的控制流，一个进程可以启动多个线程，每条线程并行执行不同的任务。\n\n\n\n**进程和线程的区别如下**：\n\n\n\n1、调度：进程是资源管理的基本单位，线程是程序执行的基本单位。\n\n\n\n2、切换：线程上下文切换比进程上下文切换要快得多。\n\n\n\n3、拥有资源： 进程是拥有资源的一个独立单位，线程不拥有系统资源，但是可以访问隶属于进程的资源。\n\n\n\n4、系统开销： 创建或撤销进程时，系统都要为之分配或回收系统资源，如内存空间，I/O设备等，OS所付出的开销显著大于在创建或撤销线程时的开销，进程切换的开销也远大于线程切换的开销。\n\n\n\n## 3.并发和并行\n\n\n\n并发就是在一段时间内，多个任务都会被处理；但在某一时刻，只有一个任务在执行。单核处理器可以做到并发。比如有两个进程`A`和`B`，`A`运行一个时间片之后，切换到`B`，`B`运行一个时间片之后又切换到`A`。因为切换速度足够快，所以宏观上表现为在一段时间内能同时运行多个程序。\n\n\n\n并行就是在同一时刻，有多个任务在执行。这个需要多核处理器才能完成，在微观上就能同时执行多条指令，不同的程序被放到不同的处理器上运行，这个是物理上的多个进程同时进行。\n\n\n\n## 4.多线程相较单线程的好处\n\n\n\n1、并发提升程序执行效率\n\n\n\n2、提升CPU利用率，访存的时候可以切换线程来执行\n\n\n\n3、更快的响应速度，可以有专门的线程来监听用户请求和专门的线程来处理请求。比如监听线程和工作线程是两个线程，这样监听就负责监听，工作的就负责工作，监听到用户请求马上把请求转到工作线程去处理，监听线程继续监听\n\n\n\n## 5.什么是协程？\n\n\n\n协程是一种用户态的轻量级线程。\n\n\n\n协程不是由操作系统内核管理，而是完全由用户程序所控制，这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。\n\n\n\n协程可以理解为可以暂停执行的函数。它拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。\n\n\n\n## 6.线程和协程有什么区别呢？\n\n\n\n1、线程是抢占式，而协程是非抢占式的，所以需要用户自己释放使用权来切换到其他协程，因此同一时间其实只有一个协程拥有运行权，相当于单线程的能力。 2、线程是协程的资源。协程通过 可以关联任意线程或线程池的执行器（Interceptor）来间接使用线程的资源的。\n\n\n\n## 7.进程通信\n\n\n\n进程间通信方式有以下几种：\n\n\n\n1、**管道通信**\n\n\n\n匿名管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。 有名管道是半双工的通信方式，数据只能单向流动。\n\n\n\n2、**消息队列**\n\n\n\n3、**共享内存**。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。\n\n\n\n4、**信号量**。信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\n\n\n\n## 8.什么是死锁？\n\n\n\n死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的一种互相等待的现象。若无外力作用，它们都将无法推进下去。\n\n\n\n如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方持有的资源，所以这两个线程就会互相等待而进入死锁状态。\n\n\n\n![img](大厂面试之操作系统篇.assets/1676359011025-9bca64ba-7a48-4a41-befc-137058d82dc2.png)\n\n\n\n下面通过例子说明线程死锁，代码来自并发编程之美。\n\n\n\n```java\npublic class DeadLockDemo {\n    private static Object resource1 = new Object();//资源 1\n    private static Object resource2 = new Object();//资源 2\n\n    public static void main(String[] args) {\n        new Thread(() -> {\n            synchronized (resource1) {\n                System.out.println(Thread.currentThread() + \"get resource1\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource2\");\n                synchronized (resource2) {\n                    System.out.println(Thread.currentThread() + \"get resource2\");\n                }\n            }\n        }, \"线程 1\").start();\n\n        new Thread(() -> {\n            synchronized (resource2) {\n                System.out.println(Thread.currentThread() + \"get resource2\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource1\");\n                synchronized (resource1) {\n                    System.out.println(Thread.currentThread() + \"get resource1\");\n                }\n            }\n        }, \"线程 2\").start();\n    }\n}\n```\n\n\n\n代码输出如下：\n\n\n\n```java\nThread[线程 1,5,main]get resource1\nThread[线程 2,5,main]get resource2\nThread[线程 1,5,main]waiting get resource2\nThread[线程 2,5,main]waiting get resource1\n```\n\n\n\n线程 A 通过 `synchronized` (resource1) 获得 resource1 的监视器锁，然后通过 `Thread.sleep(1000)`。让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 resource2 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。\n\n\n\n## 9.死锁怎么产生？怎么避免？\n\n\n\n**死锁产生的四个必要条件**：\n\n\n\n- 互斥：一个资源每次只能被一个进程使用\n\n- 请求与保持：一个进程因请求资源而阻塞时，不释放获得的资源\n\n- 不剥夺：进程已获得的资源，在未使用之前，不能强行剥夺\n\n- 循环等待：进程之间循环等待着资源\n\n\n\n**避免死锁的方法**：\n\n\n\n- 互斥条件不能破坏，因为加锁就是为了保证互斥\n\n- 一次性申请所有的资源，避免线程占有资源而且在等待其他资源\n\n- 占有部分资源的线程进一步申请其他资源时，如果申请不到，主动释放它占有的资源\n\n- 按序申请资源\n\n\n\n## 10.进程调度策略有哪几种？\n\n\n\n1、**先来先服务**：非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。另外，对`I/O`密集型进程也不利，因为这种进程每次进行`I/O`操作之后又得重新排队。\n\n\n\n2、**短作业优先**：非抢占式的调度算法，按估计运行时间最短的顺序进行调度。长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。\n\n\n\n3、**最短剩余时间优先**：最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。\n\n\n\n4、**时间片轮转**：将所有就绪进程按 `FCFS` 的原则排成一个队列，每次调度时，把 `CPU` 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 `CPU` 时间分配给队首的进程。\n\n\n\n时间片轮转算法的效率和时间片的大小有很大关系：因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。 而如果时间片过长，那么实时性就不能得到保证。\n\n\n\n5、**优先级调度**：为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。\n\n\n\n## 11.进程有哪些状态？\n\n\n\n进程一共有`5`种状态，分别是创建、就绪、运行（执行）、终止、阻塞。\n\n\n\n![img](大厂面试之操作系统篇.assets/1676359015750-97063aac-4752-45df-80ae-1814b7ca8fc9.png)\n\n\n\n运行状态就是进程正在`CPU`上运行。在单处理机环境下，每一时刻最多只有一个进程处于运行状态。\n\n\n\n就绪状态就是说进程已处于准备运行的状态，即进程获得了除`CPU`之外的一切所需资源，一旦得到`CPU`即可运行。\n\n\n\n阻塞状态就是进程正在等待某一事件而暂停运行，比如等待某资源为可用或等待`I/O`完成。即使`CPU`空闲，该进程也不能运行。\n\n\n\n**运行态→阻塞态**：往往是由于等待外设，等待主存等资源分配或等待人工干预而引起的。 **阻塞态→就绪态**：则是等待的条件已满足，只需分配到处理器后就能运行。 **运行态→就绪态**：不是由于自身原因，而是由外界原因使运行状态的进程让出处理器，这时候就变成就绪态。例如时间片用完，或有更高优先级的进程来抢占处理器等。 **就绪态→运行态**：系统按某种策略选中就绪队列中的一个进程占用处理器，此时就变成了运行态。\n\n\n\n## 12.操作系统里的内存碎片怎么理解？\n\n\n\n内存碎片通常分为内部碎片和外部碎片：\n\n\n\n1、内部碎片是由于采用固定大小的内存分区，当一个进程不能完全使用分给它的固定内存区域时就会产生内部碎片。通常内部碎片难以完全避免\n\n\n\n2、外部碎片是由于某些未分配的连续内存区域太小，以至于不能满足任意进程的内存分配请求，从而不能被进程利用的内存区域。\n\n\n\n**有什么解决办法**？\n\n\n\n现在普遍采取的内存分配方式是段页式内存分配。将内存分为不同的段，再将每一段分成固定大小的页。通过页表机制，使段内的页可以不必连续处于同一内存区域。\n\n\n\n## 13.虚拟内存\n\n\n\n虚拟存储器就是具有请求调入功能，能从逻辑上对内存容量加以扩充的一种存储器系统，虚拟内存有多次性，对换性和虚拟性三个特征，它可以将程序分多次调入内存，使得在较小的用户空间可以执行较大的用户程序，所以同时容纳更多的进程并发执行，从而提高系统的吞吐量。发生缺页时可以调入一个段也可以调入一个页，取决于内存的存储管理方式。虚拟性表示虚拟内存和物理内存的映射。\n\n\n\nLinux下，进程不能直接读写内存物理地址，只能访问【虚拟内存地址】。操作系统会把虚拟内存地址-->物理地址。\n\n\n\n虚拟内存解决有限的内存空间加载较大应用程序的问题，根据需要在内存和磁盘之间来回传送数据。\n\n\n\n通过段页表的形式，虚拟内存中取一段连续的内存空间映射到主内存中，主内存空间的程序段可以不连续 。\n\n\n\n## 14.什么是分页？\n\n\n\n把内存空间划分为**大小相等且固定的块**，作为主存的基本单位。因为程序数据存储在不同的页面中，而页面又离散的分布在内存中，**因此需要一个页表来记录映射关系，以实现从页号到物理块号的映射。**\n\n\n\n访问分页系统中内存数据需要**两次的内存访问** (一次是从内存中访问页表，从中找到指定的物理块号，加上页内偏移得到实际物理地址；第二次就是根据第一次得到的物理地址访问内存取出数据)。\n\n\n\n## 15.什么是分段？\n\n\n\n**分页是为了提高内存利用率，而分段是为了满足程序员在编写代码的时候的一些逻辑需求(比如数据共享，数据保护，动态链接等)。**\n\n\n\n分段内存管理当中，**地址是二维的，一维是段号，二维是段内地址；其中每个段的长度是不一样的，而且每个段内部都是从0开始编址的**。由于分段管理中，每个段内部是连续内存分配，但是段和段之间是离散分配的，因此也存在一个逻辑地址到物理地址的映射关系，相应的就是段表机制。\n\n\n\n## 16.分页和分段有什区别？\n\n\n\n分页对程序员是透明的，但是分段需要程序员显式划分每个段。\n\n\n\n分页的地址空间是一维地址空间，分段是二维的。\n\n\n\n页的大小不可变，段的大小可以动态改变。\n\n\n\n分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。\n\n\n\n## 17.页面置换算法\n\n\n\n**为什么要页面置换：**\n\n\n\n因为应用程序是分多次装入内存的，所以运行到一定的时间，一定会发生缺页。地址映射的过程中，如果页面中发现要访问的页面不在内存中，会产生缺页中断。此时操作系统必须在内存里选择一个页面把他移出内存，为即将调入的页面让出空间。选择淘汰哪一页的规则就是页面置换算法\n\n\n\n**几种页面置换算法：**\n\n\n\n**最佳置换算法（理想）**：将当前页面中在未来最长时间内不会被访问的页置换出去\n\n\n\n**先进先出**：淘汰最早调入的页面\n\n\n\n**最近最久未使用 LRU**：每个页面有一个t来记录上次页面被访问直到现在，每次置换时置换t值最大的页面（用寄存器或栈实现）\n\n\n\n**时钟算法clock**（也被称为最近未使用算法NRU）：页面设置访问为，将页面链接为一个环形列表，每个页有一个访问位0/1, 1表示又一次获救的机会，下次循环指针指向它时可以免除此次置换，但是会把访问位置为0， 代表他下次如果碰到循环指针就该被置换了。页面被访问的时候访问位设为1。页面置换的时候，如果当前指针的访问位为0，置换，否则将这个值置为0，循环直到遇到访问位为0的页面。\n\n\n\n**改进型Clock算法**：在clock算法的基础上添加一个修改位，优先替换访问位和修改位都是0的页面，其次替换访问位为0修改位为1的页面。\n\n\n\n**最少使用算法LFU**：设置寄存器记录页面被访问次数，每次置换当前访问次数最少的。\n\n\n\n## 18.用户态和内核态\n\n\n\n内核态：cpu可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu也可以将自己从一个程序切换到另一个程序。\n\n\n\n用户态：只能受限的访问内存，且不允许访问外围设备，占用cpu的能力被剥夺，cpu资源可以被其他程序获取。\n\n\n\n最大的区别就是权限不同，在运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。\n\n\n\n### 为什么要有这两种状态？\n\n\n\n内核速度快但是资源有限，能控制的进程数不多，所以需要速度慢一些的用户态协助，但是为了避免用户态被恶意利用，所以限制了用户态程序的权限。\n\n\n\n需要限制不同的程序之间的访问能力，防止他们获取别的程序的内存数据，或者获取外围设备的数据，并发送到网络，CPU划分出**两个权限等级** -- 用户态和内核态。\n\n\n\n### 什么时候转换\n\n\n\n**1、系统调用**：\n\n\n\n用户进程主动发起的。用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作，比如fork()就是执行一个创建新进程的系统调用\n\n\n\n用户程序使用系统调用，系统调用会转换为内核态并调用操作系统\n\n\n\n**2、发生异常**：\n\n\n\n会从当前运行进程切换到处理次此异常的内核相关程序中\n\n\n\n**3、外围设备的中断：**\n\n\n\n所有程序都运行在用户态，但在从硬盘读取数据、或从键盘输入时，这些事情只有操作系统能做，程序需要向操作系统请求以程序的名义来执行这些操作。这个时候用户态程序切换到内核态。\n\n\n\n## 19.什么是缓冲区溢出？有什么危害？\n\n\n\n缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据上。\n\n\n\n危害有以下两点：\n\n\n\n- 程序崩溃，导致拒绝额服务\n\n- 跳转并且执行一段恶意代码\n\n\n\n造成缓冲区溢出的主要原因是程序中没有仔细检查用户输入。\n\n\n\n## 20.IO多路复用\n\n\n\n**IO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程。IO多路复用适用如下场合**：\n\n\n\n1、当客户处理多个描述字时（一般是交互式输入和网络套接口），必须使用I/O复用。\n\n\n\n2、当一个客户同时处理多个套接口时，而这种情况是可能的，但很少出现。\n\n\n\n3、如果一个TCP服务器既要处理监听套接口，又要处理已连接套接口，一般也要用到I/O复用。\n\n\n\n4、如果一个服务器即要处理TCP，又要处理UDP，一般要使用I/O复用。\n\n\n\n5、如果一个服务器要处理多个服务或多个协议，一般要使用I/O复用。\n\n\n\n6、与多进程和多线程技术相比，I/O多路复用技术的最大优势是系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减小了系统的开销。","tags":["操作系统","我要进大厂","面试"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之数据结构篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之数据结构篇/","content":"\n## 1.各种数据结构应用场景\n\n\n\n1、栈：逆序输出；语法检查，符号成对判断；方法调用\n\n\n\n2、二叉树：表达式树\n\n\n\n3、B+/B-树：文件系统；数据库索引\n\n\n\n4、哈夫曼树：数据压缩算法\n\n\n\n5、哈希表：提高查找性能\n\n\n\n6、红黑树：大致平衡的二叉查找树，相对AVL树，插入删除结点较快，查找性能没有提升\n\n\n\n## 2.数组\n\n\n\n数组的优点：存取速度快\n\n\n\n数组的缺点:\n\n\n\n1、事先必须知道数组的长度\n\n\n\n2、插入删除元素很慢\n\n\n\n3、空间通常是有限制的\n\n\n\n4、需要大块连续的内存块\n\n\n\n5、插入删除元素的效率很低\n\n\n\n## 3.链表\n\n\n\n优点：\n\n\n\n1、空间没有限制\n\n\n\n2、插入删除元素很快\n\n\n\n缺点：存取速度很慢\n\n\n\n**分类**\n\n\n\n1、单向链表 一个节点指向下一个节点。\n\n\n\n2、双向链表 一个节点有两个指针域。\n\n\n\n3、循环链表 能通过任何一个节点找到其他所有的节点，将两种(双向/单向)链表的最后一个结点指向第一个结点从而实现循环\n\n\n\n## 4.哈希表\n\n\n\n散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。\n\n\n\n## 5.栈\n\n\n\n我们把类似于弹夹那种先进后出的数据结构称为栈，栈是限定**仅在表尾进行插入和删除操作**的线性表，我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈，栈又称后进后出的线性表，简称LIFO结构。\n\n\n\n栈的特殊之处在于限制了这个线性表的**插入和删除位置，它始终只在栈顶进行**。这也就使得：栈底是固定的，最先进栈的只能在栈底。\n\n\n\n栈的插入操作，叫做进栈；栈的删除操作叫做出栈。\n\n\n\n## 6.队列\n\n\n\n队列是只允许**在一端进行插入操作，而在另一端进行删除操作**的线性表，队列是一种先进先出的线性表，简称FIFO，允许插入的一端称为队尾（Rear），允许删除的一端称为队头(Front)。向队中插入元素称为进队，新元素进队后成为新的队尾元素；向队中删除元素称为出队，元素出队后，其后继元素就成为新的队头元素。\n\n\n\n## 7.树\n\n\n\n树是一种数据结构，它看上去像一棵 \"圣诞树\"，它的根在上，叶朝下。\n\n\n\n**树有多个节点(node)，用以储存元素。某些节点之间存在一定的关系，用连线表示，连线称为边(edge)。边的上端节点称为父节点，下端称为子节点。树像是一个不断分叉的树根。**\n\n\n\n### 二叉树\n\n\n\n最多有两棵子树的树被称为二叉树\n\n\n\n满二叉树: 二叉树中所有非叶子结点的度都是2，且叶子结点都在同一层次上\n\n\n\n完全二叉树: 如果一个二叉树与满二叉树前m个节点的结构相同，这样的二叉树被称为完全二叉树\n\n\n\n### 二叉查找树\n\n\n\n指一棵空树或者具有下列性质的二叉树。\n\n\n\n1、若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；\n\n\n\n2、若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；\n\n\n\n3、任意节点的左、右子树也分别为二叉查找树；\n\n\n\n4、没有键值相等的节点。\n\n\n\n### AVL树\n\n\n\n**平衡二叉搜索树**，它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1。\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359100005-ad7be6bf-b26b-4dbb-afa1-a5197742ef32.png)\n\n\n\n简单了解一下**左旋与右旋**的概念。\n\n\n\n左旋与右旋就是为了解决不平衡问题而产生的，我们构建一颗AVL树的过程会出现结点平衡因子（平衡因子就是二叉排序树中每个结点的左子树和右子树的高度差。）绝对值大于1的情况，这时就可以通过左旋或者右旋操作来达到平衡的目的。\n\n\n\n四种旋转情况\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359101864-9e17cc6a-b39b-4fed-96ca-0556494dde0f.png)\n\n\n\n### 红黑树\n\n\n\n红黑树是对AVL树的优化，只要求部分平衡，用非严格的平衡来换取增删节点时候旋转次数的降低，提高了插入和删除的性能。查找性能并没有提高，查找的时间复杂度是O(logn)。红黑树通过左旋、右旋和变色维持平衡。\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359103706-07590fee-692e-4ae5-9d69-a38e01c1470d.png)\n\n\n\n对于插入节点，AVL和红黑树都是最多两次旋转来实现平衡。对于删除节点，avl需要维护从被删除节点到根节点root这条路径上所有节点的平衡，旋转的量级为O(logN)，而红黑树最多只需旋转3次。\n\n\n\n红黑树的特性：\n\n\n\n1、每个节点或者是黑色，或者是红色。\n\n\n\n2、根节点和叶子节点是黑色，叶子节点为空。\n\n\n\n3、红色节点的子节点必须是黑色的。\n\n\n\n4、从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点，保证没有一条路径会比其他路径长一倍。\n\n\n\n优点：相比avl树，红黑树插入删除的效率更高。红黑树维持红黑性质所做的红黑变换和旋转的开销，相较于avl树维持平衡的开销要小得多。\n\n\n\n**应用场景**\n\n\n\n1、Java ConcurrentHashMap & TreeMap\n\n\n\n2、C++ STL: map & set\n\n\n\n3、linux进程调度Completely Fair Scheduler,用红黑树管理进程控制块\n\n\n\n4、epoll在内核中的实现，用红黑树管理事件块\n\n\n\n5、nginx中，用红黑树管理timer等\n\n\n\n### B树\n\n\n\n也称B-树，属于多叉树又名平衡多路查找树。\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359106204-baf72ae9-e7fd-4748-83bf-116f319ddb8f.png)\n\n\n\n规则：\n\n\n\n1、1<子节点数<=m，m代表一个树节点最多有多少个查找路径\n\n\n\n2、每个节点最多有m-1个关键字，非根节点至少有m/2个关键字，根节点最少可以只有1个关键字\n\n\n\n3、每个节点都有指针指向子节点，指针个数=关键字个数+1，叶子节点指针指向null\n\n\n\nB-树的特性：\n\n\n\n1、关键字集合分布在整颗树中；\n\n\n\n2、任何一个关键字只出现在一个节点中；\n\n\n\n3、搜索有可能在非叶子结点结束；\n\n\n\nB+树是B-树的变体，也是一种多路搜索树。B+的搜索与B-树基本相同，区别是B+树只有达到叶子结点才命中，B-树可以在非叶子结点命中。B+树更适合文件索引系统。\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359108970-2d4a2fdc-56b5-42cc-a498-130531990ef8.jpeg)\n\n\n\nB-和B+树的区别：\n\n\n\n1、B+树的非叶子结点不包含data，叶子结点使用链表连接，便于区间查找和遍历。B-树需要遍历整棵树，范围查询性能没有B+树好。\n\n\n\n2、B-树的非树节点存放数据和索引，搜索可能在非叶子结点结束，访问更快。\n\n\n\n## 8.图\n\n\n\n图(Graph)是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为: G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。\n\n\n\n和线性表，树的差异:\n\n\n\n1、线性表中我们把数据元素叫元素，树中将数据元素叫结点，在图中数据元素，我们则称之为顶点(Vertex)。\n\n\n\n2、线性表可以没有元素，称为空表；树中可以没有节点，称为空树；但是，在图中不允许没有顶点(有穷非空性)。\n\n\n\n3、线性表中的各元素是线性关系，树中的各元素是层次关系，而图中各顶点的关系是用边来表示(边集可以为空)。\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359111908-fcd4dda6-91ac-4924-8910-b67bf8720c65.png)\n\n\n\n### 相关术语\n\n\n\n**顶点的度**\n\n\n\n顶点Vi的度(Degree)是指在图中与Vi相关联的边的条数。对于有向图来说，有入度(In-degree)和出度(Out-degree)之分，有向图顶点的度等于该顶点的入度和出度之和。\n\n\n\n**邻接**\n\n\n\n若无向图中的两个顶点V1和V2存在一条边(V1,V2)，则称顶点V1和V2邻接(Adjacent)；\n\n\n\n若有向图中存在一条边<V3,V2>，则称顶点V3与顶点V2邻接，且是V3邻接到V2或V2邻接直V3；\n\n\n\n**路径**\n\n\n\n在无向图中，若从顶点Vi出发有一组边可到达顶点Vj，则称顶点Vi到顶点Vj的顶点序列为从顶点Vi到顶点Vj的路径(Path)。\n\n\n\n**连通**\n\n\n\n若从Vi到Vj有路径可通，则称顶点Vi和顶点Vj是连通(Connected)的。\n\n\n\n**权(Weight)**\n\n\n\n有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做权(Weight)。\n\n\n\n### 类型\n\n\n\n**无向图**\n\n\n\n如果图中任意两个顶点之间的边都是无向边(简而言之就是没有方向的边)，则称该图为无向图(Undirected graphs)。\n\n\n\n无向图中的边使用小括号“()”表示; 比如 (V1,V2);\n\n\n\n**有向图**\n\n\n\n如果图中任意两个顶点之间的边都是有向边(简而言之就是有方向的边)，则称该图为有向图(Directed graphs)。\n\n\n\n有向图中的边使用尖括号“<>”表示; 比如/<V1,V2>\n\n\n\n**完全图**\n\n\n\n`无向完全图`: 在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。(含有n个顶点的无向完全图有(n×(n-1))/2条边)\n\n\n\n`有向完全图: 在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。(含有n个顶点的有向完全图有n×(n-1)条边\n\n\n\n### 图的存储结构\n\n\n\n1、**邻接矩阵**\n\n\n\n图的邻接矩阵(Adjacency Matrix)存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359114523-fdaa7e78-f206-4986-b3b1-ff71a28c0a10.png)\n\n\n\n2、**邻接表**\n\n\n\n邻接表由表头节点和表节点两部分组成，图中每个顶点均对应一个存储在数组中的表头节点。如果这个表头节点所对应的顶点存在邻接节点，则把邻接节点依次存放于表头节点所指向的单向链表中。\n\n\n\n![img](大厂面试之数据结构篇.assets/1676359116185-7b9178a6-cabe-42ca-8ef7-d7258e4dfc46.png)\n\n\n\n下面给出建立图的邻接表中所使用的边结点类的定义\n\n\n\n```java\npublic class EdgeNode {     //定义邻接表中的边结点类型\n    int adjvex;             //邻接点域\n    int weight;             //边的权值域，假定为整型，对于无权图，边的权值为1\n    EdgeNode next;          //指向下一个边结点的链接域\n    public EdgeNode(int adj, EdgeNode nt) \n    {     //对无权图中的边结点进行初始化\n        adjvex=adj; next=nt; weight=1;\n    }\n    public EdgeNode(int adj, int wgt, EdgeNode nt) \n    {     //对有权图中的边结点进行初始化\n        adjvex=adj; next=nt; weight=wgt;\n    }\n}\n```\n\n\n\n图的接口类定义如下：\n\n\n\n```java\npublic interface Graph\n     {\n         boolean createGraph(EdgeElement[]d);  //根据边集数组参数d建立一个图\n         int graphType();                   //返回图的类型\n         int vertices();                    //返回图中的顶点数\n         int edges();                       //返回图中的边数\n         boolean find(int i, int j);        //从图中查找一条边(i,j)是否存在\n         boolean putEdge(EdgeElement theEdge); //向图中插入一条边theEdge\n         boolean removeEdge(int i, int j);     //从图中删除一条边(i,j)\n         int degree(int i);                 //返回顶点i的度\n         int inDegree(int i);               //返回顶点i的入度\n         int outDegree(int i);              //返回顶点i的出度\n         void output();                     //以图的顶点集和边集的形式输出一个图\n         void depthFirstSearch(int v);      //从顶点v开始深度优先搜索遍历图\n         void breadthFirstSearch(int v);    //从顶点v开始广度优先搜索遍历图\n         void clearGraph();                 //清除图中的所有内容\n     }\n```\n\n\n\n### 图的遍历\n\n\n\n**深度优先遍历**\n\n\n\n```java\nprivate void dfs(int i, boolean[] visited) {\n    System.out.printl(i + \" \");\n    visited[i] = true;\n    EdgeNode p = a[i];\n    while(p != null) {\n        int j = p.adjvex;\n        if(!visited[j]) {\n            dfs(j, visited);\n        }\n        p = p.next;\n    }\n}\n```\n\n\n\n**广度优先搜索**\n\n\n\n```java\nprivate void bfs(int i, boolean[] visited) {\n    LinkedList<Integer> queue = new LinkedList<>();\n    System.out.print(i + \" \");\n    visited[i] = true;\n    queue.offer(i);\n    while(!queue.isEmpty()) {\n        int k = queue.poll();\n        EdgeNode p = a[k];\n\n        while(p != null) {\n            int j = p.adjvex;\n            if(!visited[j]) {\n                System.out.print(j + \" \");\n                visited[j] = true;\n                queue.offer(j);\n            }\n            p = p.next;\n        }\n    }\n}\n```","tags":["我要进大厂","面试","数据结构"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之计算机网络篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之计算机网络篇/","content":"\n## 1.网络分层结构\n\n\n\n计算机网络体系大致分为三种，OSI七层模型、TCP/IP四层模型和五层模型。一般面试的时候考察比较多的是五层模型。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358848529-41c2f082-ebda-415d-93cc-bd99e5ec482d.png)\n\n\n\n**五层模型**：应用层、传输层、网络层、数据链路层、物理层。\n\n\n\n1、**应用层**：为应用程序提供交互服务。在互联网中的应用层协议很多，如域名系统DNS、HTTP协议、SMTP协议等。\n\n\n\n2、**传输层**：负责向两台主机进程之间的通信提供数据传输服务。传输层的协议主要有传输控制协议TCP和用户数据协议UDP。\n\n\n\n3、**网络层**：选择合适的路由和交换结点，确保数据及时传送。主要包括IP协议。\n\n\n\n4、**数据链路层**：在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。\n\n\n\n5、**物理层**：实现相邻节点间比特流的透明传输，尽可能屏蔽传输介质和物理设备的差异。\n\n\n\n**ISO七层模型**是国际标准化组织（International Organization for Standardization）制定的一个用于计算机或通信系统间互联的标准体系。\n\n\n\n1、应用层：网络服务与最终用户的一个接口，常见的协议有：**HTTP FTP SMTP SNMP DNS**.\n\n\n\n2、表示层：数据的表示、安全、压缩。，确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。\n\n\n\n3、会话层：建立、管理、终止会话,对应主机进程，指本地主机与远程主机正在进行的会话.\n\n\n\n4、传输层：定义传输数据的协议端口号，以及流控和差错校验,协议有**TCP UDP**.\n\n\n\n5、网络层：进行逻辑地址寻址，实现不同网络之间的路径选择,协议有**ICMP IGMP IP等**.\n\n\n\n6、数据链路层：在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路。\n\n\n\n7、物理层：建立、维护、断开物理连接。\n\n\n\n**TCP/IP 四层模型**\n\n\n\n1、应用层：对应于OSI参考模型的（应用层、表示层、会话层）。\n\n\n\n2传输层: 对应OSI的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。\n\n\n\n3、网际层：对应于OSI参考模型的网络层，主要解决主机到主机的通信问题。\n\n\n\n4、网络接口层：与OSI参考模型的数据链路层、物理层对应。\n\n\n\n## 2.三次握手\n\n\n\n假设发送端为客户端，接收端为服务端。开始时客户端和服务端的状态都是`CLOSED`。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358851894-cb7a8579-821e-4444-b632-8f79cbadc103.png)\n\n\n\n1、第一次握手：客户端向服务端发起建立连接请求，客户端会随机生成一个起始序列号x，客户端向服务端发送的字段中包含标志位`SYN=1`，序列号`seq=x`。第一次握手前客户端的状态为`CLOSE`，第一次握手后客户端的状态为`SYN-SENT`。此时服务端的状态为`LISTEN`。\n\n\n\n2、第二次握手：服务端在收到客户端发来的报文后，会随机生成一个服务端的起始序列号y，然后给客户端回复一段报文，其中包括标志位`SYN=1`，`ACK=1`，序列号`seq=y`，确认号`ack=x+1`。第二次握手前服务端的状态为`LISTEN`，第二次握手后服务端的状态为`SYN-RCVD`，此时客户端的状态为`SYN-SENT`。（其中`SYN=1`表示要和客户端建立一个连接，`ACK=1`表示确认序号有效）\n\n\n\n3、第三次握手：客户端收到服务端发来的报文后，会再向服务端发送报文，其中包含标志位`ACK=1`，序列号`seq=x+1`，确认号`ack=y+1`。第三次握手前客户端的状态为`SYN-SENT`，第三次握手后客户端和服务端的状态都为`ESTABLISHED`。**此时连接建立完成。**\n\n\n\n## 3.两次握手可以吗？\n\n\n\n第三次握手主要为了**防止已失效的连接请求报文段**突然又传输到了服务端，导致产生问题。\n\n\n\n- 比如客户端A发出连接请求，可能因为网络阻塞原因，A没有收到确认报文，于是A再重传一次连接请求。\n\n- 连接成功，等待数据传输完毕后，就释放了连接。\n\n- 然后A发出的第一个连接请求等到连接释放以后的某个时间才到达服务端B，此时B误认为A又发出一次新的连接请求，于是就向A发出确认报文段。\n\n- 如果不采用三次握手，只要B发出确认，就建立新的连接了，**此时A不会响应B的确认且不发送数据，则B一直等待A发送数据，浪费资源。**\n\n\n\n## 4.四次挥手\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358854269-3d6a3162-cebf-4e3f-8153-7501913b207f.png)\n\n\n\n1、A的应用进程先向其TCP发出连接释放报文段（`FIN=1，seq=u`），并停止再发送数据，主动关闭TCP连接，进入`FIN-WAIT-1`（终止等待1）状态，等待B的确认。\n\n\n\n2、B收到连接释放报文段后即发出确认报文段（`ACK=1，ack=u+1，seq=v`），B进入`CLOSE-WAIT`（关闭等待）状态，此时的TCP处于半关闭状态，A到B的连接释放。\n\n\n\n3、A收到B的确认后，进入`FIN-WAIT-2`（终止等待2）状态，等待B发出的连接释放报文段。\n\n\n\n4、B发送完数据，就会发出连接释放报文段（`FIN=1，ACK=1，seq=w，ack=u+1`），B进入`LAST-ACK`（最后确认）状态，等待A的确认。\n\n\n\n5、A收到B的连接释放报文段后，对此发出确认报文段（`ACK=1，seq=u+1，ack=w+1`），A进入`TIME-WAIT`（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间`2MSL`（最大报文段生存时间）后，A才进入`CLOSED`状态。B收到A发出的确认报文段后关闭连接，若没收到A发出的确认报文段，B就会重传连接释放报文段。\n\n\n\n## 5.第四次挥手为什么要等待2MSL？\n\n\n\n**保证A发送的最后一个ACK报文段能够到达B**。这个`ACK`报文段有可能丢失，B收不到这个确认报文，就会超时重传连接释放报文段，然后A可以在`2MSL`时间内收到这个重传的连接释放报文段，接着A重传一次确认，重新启动2MSL计时器，最后A和B都进入到`CLOSED`状态，若A在`TIME-WAIT`状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到B重传的连接释放报文段，所以不会再发送一次确认报文段，B就无法正常进入到`CLOSED`状态。\n\n\n\n**防止已失效的连接请求报文段出现在本连接中**。A在发送完最后一个`ACK`报文段后，再经过2MSL，就可以使这个连接所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现旧的连接请求报文段。\n\n\n\n## 6.为什么是四次挥手？\n\n\n\n因为当Server端收到Client端的`SYN`连接请求报文后，可以直接发送`SYN+ACK`报文。**但是在关闭连接时，当Server端收到Client端发出的连接释放报文时，很可能并不会立即关闭SOCKET**，所以Server端先回复一个`ACK`报文，告诉Client端我收到你的连接释放报文了。只有等到Server端所有的报文都发送完了，这时Server端才能发送连接释放报文，之后两边才会真正的断开连接。故需要四次挥手。\n\n\n\n## 7.TCP有哪些特点？\n\n\n\nTCP是**面向连接**的运输层协议。\n\n\n\n**点对点**，每一条TCP连接只能有两个端点。\n\n\n\nTCP提供**可靠交付**的服务。\n\n\n\nTCP提供**全双工通信**。\n\n\n\n**面向字节流**。\n\n\n\n## 说说TCP报文首部有哪些字段，其作用又分别是什么？\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358857326-f6eec089-2716-47c9-92f2-be92ea7918cf.png)\n\n\n\n**16位端口号**：源端口号，主机该报文段是来自哪里；目标端口号，要传给哪个上层协议或应用程序\n\n\n\n**32位序号**：一次TCP通信（从TCP连接建立到断开）过程中某一个传输方向上的字节流的每个字节的编号。\n\n\n\n**32位确认号**：用作对另一方发送的tcp报文段的响应。其值是收到的TCP报文段的序号值加1。\n\n\n\n**4位头部长度**：表示tcp头部有多少个32bit字（4字节）。因为4位最大能标识15，所以TCP头部最长是60字节。\n\n\n\n**6位标志位**：URG(紧急指针是否有效)，ACk（表示确认号是否有效），PSH（缓冲区尚未填满），RST（表示要求对方重新建立连接），SYN（建立连接消息标志接），FIN（表示告知对方本端要关闭连接了）\n\n\n\n**16位窗口大小**：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。\n\n\n\n**16位校验和**：由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。注意，这个校验不仅包括TCP头部，也包括数据部分。这也是TCP可靠传输的一个重要保障。\n\n\n\n**16位紧急指针**：一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP的紧急指针是发送端向接收端发送紧急数据的方法。\n\n\n\n## 8.TCP和UDP的区别？\n\n\n\n1、TCP**面向连接**；UDP是无连接的，即发送数据之前不需要建立连接。\n\n\n\n2、TCP提供**可靠的服务**；UDP不保证可靠交付。\n\n\n\n3、TCP**面向字节流**，把数据看成一连串无结构的字节流；UDP是面向报文的。\n\n\n\n4、TCP有**拥塞控制**；UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如实时视频会议等）。\n\n\n\n5、每一条TCP连接只能是**点到点**的；UDP支持一对一、一对多、多对一和多对多的通信方式。\n\n\n\n6、TCP首部开销20字节；UDP的首部开销小，只有8个字节。\n\n\n\n## 9.TCP 和 UDP 分别对应的常见应用层协议有哪些？\n\n\n\n**基于TCP的应用层协议有：HTTP、FTP、SMTP、TELNET、SSH**\n\n\n\n- **HTTP**：HyperText Transfer Protocol（超文本传输协议），默认端口80\n\n- **FTP**: File Transfer Protocol (文件传输协议), 默认端口(20用于传输数据，21用于传输控制信息)\n\n- **SMTP**: Simple Mail Transfer Protocol (简单邮件传输协议) ,默认端口25\n\n- **TELNET**: Teletype over the Network (网络电传), 默认端口23\n\n- **SSH**：Secure Shell（安全外壳协议），默认端口 22\n\n\n\n**基于UDP的应用层协议：DNS、TFTP、SNMP**\n\n\n\n- **DNS** : Domain Name Service (域名服务),默认端口 53\n\n- **TFTP**: Trivial File Transfer Protocol (简单文件传输协议)，默认端口69\n\n- **SNMP**：Simple Network Management Protocol（简单网络管理协议），通过UDP端口161接收，只有Trap信息采用UDP端口162。\n\n\n\n## 10.TCP的粘包和拆包\n\n\n\nTCP是面向流，没有界限的一串数据。TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的实际情况进行包的划分，所以在业务上认为，一**个完整的包可能会被TCP拆分成多个包进行发送**，**也有可能把多个小的包封装成一个大的数据包发送**，这就是所谓的TCP粘包和拆包问题。\n\n\n\n**为什么会产生粘包和拆包呢?**\n\n\n\n- 要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包；\n\n- 接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包；\n\n- 要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包；\n\n- 待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。即TCP报文长度-TCP头部长度>MSS。\n\n\n\n**解决方案：**\n\n\n\n- 发送端将每个数据包封装为固定长度\n\n- 在数据尾部增加特殊字符进行分割\n\n- 将数据分为两部分，一部分是头部，一部分是内容体；其中头部结构大小固定，且有一个字段声明内容体的大小。\n\n\n\n## 11.说说TCP是如何确保可靠性的呢？\n\n\n\n首先，TCP的连接是基于**三次握手**，而断开则是基于**四次挥手**。确保连接和断开的可靠性。\n\n\n\n其次，TCP的可靠性，还体现在**有状态**;TCP会记录哪些数据发送了，哪些数据被接收了，哪些没有被接受，并且保证数据包按序到达，保证数据传输不出差错。\n\n\n\n再次，TCP的可靠性，还体现在**可控制**。它有数据包校验、ACK应答、**超时重传(发送方)**、失序数据重传（接收方）、丢弃重复数据、流量控制（滑动窗口）和拥塞控制等机制。\n\n\n\n## 12.说下TCP的滑动窗口机制\n\n\n\nTCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。 TCP会话的双方都各自维护一个发送窗口和一个接收窗口。接收窗口大小取决于应用、系统、硬件的限制。发送窗口则取决于对端通告的接收窗口。接收方发送的确认报文中的window字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将接收方的确认报文window字段设置为 0，则发送方不能发送数据。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358861135-5010ee50-2705-40ae-8143-1789becbe246.png)\n\n\n\nTCP头包含window字段，16bit位，它代表的是窗口的字节容量，最大为65535。这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。接收窗口的大小是约等于发送窗口的大小。\n\n\n\n## 13.详细讲一下拥塞控制？\n\n\n\n防止过多的数据注入到网络中。 几种拥塞控制方法：慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358863170-b1a0fc7a-2542-47a9-9be4-5a7af3fc11b2.jpeg)\n\n\n\n**慢开始**\n\n\n\n把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。每经过一个传输轮次，拥塞窗口 cwnd 就加倍。 为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。\n\n\n\n当 cwnd < ssthresh 时，使用慢开始算法。\n\n\n\n当 cwnd > ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。\n\n\n\n当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法。\n\n\n\n**拥塞避免**\n\n\n\n让拥塞窗口cwnd缓慢地增大，每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长。\n\n\n\n无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送 方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生 拥塞的路由器有足够时间把队列中积压的分组处理完毕。\n\n\n\n**快重传**\n\n\n\n有时个别报文段会在网络中丢失，但实际上网络并未发生拥塞。如果发送方迟迟收不到确认，就会产生超时，就会误认为网络发生了拥塞。这就导致发送方错误地启动慢开始，把拥塞窗口cwnd又设置为1，因而降低了传输效率。\n\n\n\n快重传算法可以避免这个问题。快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认，使发送方及早知道有报文段没有到达对方。\n\n\n\n发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待重传计时器到期。由于发送方尽早重传未被确认的报文段，因此采用快重传后可以使整个网络吞吐量提高约20%。\n\n\n\n**快恢复**\n\n\n\n当发送方连续收到三个重复确认，就会把慢开始门限ssthresh减半，接着把cwnd值设置为慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免算法，使拥塞窗口缓慢地线性增大。\n\n\n\n在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用。 采用这样的拥塞控制方法使得TCP的性能有明显的改进。\n\n\n\n## 14.HTTP协议的特点？\n\n\n\n1、HTTP允许传输**任意类型**的数据。传输的类型由Content-Type加以标记。\n\n\n\n2、**无状态**。对于客户端每次发送的请求，服务器都认为是一个新的请求，上一次会话和下一次会话之间没有联系。\n\n\n\n3、支持**客户端/服务器模式**。\n\n\n\n## 15.HTTP报文格式\n\n\n\nHTTP请求由**请求行、请求头部、空行和请求体**四个部分组成。\n\n\n\n**请求行**：包括请求方法，访问的资源URL，使用的HTTP版本。`GET`和`POST`是最常见的HTTP方法，除此以外还包括`DELETE、HEAD、OPTIONS、PUT、TRACE`。\n\n\n\n**请求头**：格式为“属性名:属性值”，服务端根据请求头获取客户端的信息，主要有`cookie、host、connection、accept-language、accept-encoding、user-agent`。\n\n\n\n**请求体**：用户的请求数据如用户名，密码等。\n\n\n\n**请求报文示例**：\n\n\n\n```java\nPOST /xxx HTTP/1.1 请求行\nAccept:image/gif.image/jpeg, 请求头部\nAccept-Language:zh-cn\nConnection:Keep-Alive\nHost:localhost\nUser-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)\nAccept-Encoding:gzip,deflate\n\nusername=dabin 请求体\n```\n\n\n\nHTTP响应也由四个部分组成，分别是：**状态行、响应头、空行和响应体**。\n\n\n\n**状态行**：协议版本，状态码及状态描述。\n\n\n\n**响应头**：响应头字段主要有`connection、content-type、content-encoding、content-length、set-cookie、Last-Modified，、Cache-Control、Expires`。\n\n\n\n**响应体**：服务器返回给客户端的内容。\n\n\n\n**响应报文示例**：\n\n\n\n```html\nHTTP/1.1 200 OK\nServer:Apache Tomcat/5.0.12\nDate:Mon,6Oct2003 13:23:42 GMT\nContent-Length:112\n\n<html>\n    <body>响应体</body>\n</html>\n```\n\n\n\n## 16.HTTP状态码有哪些？\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358866955-5b5cc131-0432-4ae6-b096-c8fc89e2c3fe.png)\n\n\n\n## 17.HTTP 协议包括哪些请求？\n\n\n\nHTTP协议中共定义了八种方法来表示对Request-URI指定的资源的不同操作方式，具体如下：\n\n\n\nGET：向特定的资源发出请求。\n\n\n\nPOST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。\n\n\n\nOPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送'*'的请求来测试服务器的功能性。\n\n\n\nHEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。\n\n\n\nPUT：向指定资源位置上传其最新内容。\n\n\n\nDELETE：请求服务器删除Request-URI所标识的资源。\n\n\n\nTRACE：回显服务器收到的请求，主要用于测试或诊断。\n\n\n\nCONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n\n\n\n## 18.HTTP状态码301和302的区别？\n\n\n\n301：（永久性转移）请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。\n\n\n\n302：（暂时性转移）服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。此代码与响应GET和HEAD请求的301代码类似，会自动将请求者转到不同的位置。\n\n\n\n**举个形象的例子**：当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，打个比方说，我有一套房子，但是最近走亲戚去亲戚家住了，过两天我还回来的。而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的，就比如你的那套房子其实是租的，现在租期到了，你又在另一个地方找到了房子，之前租的房子不住了。\n\n\n\n## 19.URI和URL的区别\n\n\n\nURI，全称是Uniform Resource Identifier)，中文翻译是统一资源标志符，主要作用是唯一标识一个资源。\n\n\n\nURL，全称是Uniform Resource Location)，中文翻译是统一资源定位符，主要作用是提供资源的路径。打个经典比喻吧，URI像是身份证，可以唯一标识一个人，而URL更像一个住址，可以通过URL找到这个人。\n\n\n\n## 20.POST和GET的区别？\n\n\n\nGET请求参数通过URL传递，POST的参数放在请求体中。\n\n\n\nGET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把请求头和请求体一并发送出去；而对于POST，浏览器先发送请求头，服务器响应100 continue，浏览器再发送请求体。\n\n\n\nGET请求会被浏览器主动缓存，而POST不会，除非手动设置。\n\n\n\nGET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n\n\n\n## 21.如何理解HTTP协议是无状态的\n\n\n\n当浏览器第一次发送请求给服务器时，服务器响应了；如果同个浏览器发起第二次请求给服务器时，它还是会响应，但是呢，服务器不知道你就是刚才的那个浏览器。简言之，服务器不会去记住你是谁，所以是无状态协议。\n\n\n\n## 22.HTTP长连接和短连接？\n\n\n\nHTTP短连接：浏览器和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。**HTTP1.0默认使用的是短连接**。\n\n\n\nHTTP长连接：指的是**复用TCP连接**。多个HTTP请求可以复用同一个TCP连接，这就节省了TCP连接建立和断开的消耗。\n\n\n\n**HTTP/1.1起，默认使用长连接**。要使用长连接，客户端和服务器的HTTP首部的Connection都要设置为keep-alive，才能支持长连接。\n\n\n\n## 23.HTTP 如何实现长连接？\n\n\n\nHTTP分为长连接和短连接，**本质上说的是TCP的长短连接**。TCP连接是一个双向的通道，它是可以保持一段时间不关闭的，因此TCP连接才具有真正的长连接和短连接这一说法哈。\n\n\n\nTCP长连接可以复用一个TCP连接，来发起多次的HTTP请求，这样就可以减少资源消耗，比如一次请求HTML，如果是短连接的话，可能还需要请求后续的JS/CSS。\n\n\n\n**如何设置长连接？**\n\n\n\n通过在头部（请求和响应头）设置**Connection**字段指定为`keep-alive`，HTTP/1.0协议支持，但是是默认关闭的，从HTTP/1.1以后，连接默认都是长连接。\n\n\n\n## 24.HTTP长连接在什么时候会超时？\n\n\n\nHTTP一般会有httpd守护进程，里面可以设置**keep-alive timeout**，当tcp连接闲置超过这个时间就会关闭，也可以在HTTP的header里面设置超时时间。\n\n\n\nTCP 的**keep-alive**包含三个参数，支持在系统内核的net.ipv4里面设置；当 TCP 连接之后，闲置了**tcp_keepalive_time**，则会发生侦测包，如果没有收到对方的ACK，那么会每隔 tcp_keepalive_intvl再发一次，直到发送了**tcp_keepalive_probes**，就会丢弃该连接。\n\n\n\n## 25.HTTP1.1和 HTTP2.0的区别？\n\n\n\nHTTP2.0相比HTTP1.1支持的特性：\n\n\n\n**新的二进制格式**：HTTP1.1 基于文本格式传输数据；HTTP2.0采用二进制格式传输数据，解析更高效。\n\n\n\n**多路复用**：在一个连接里，允许同时发送多个请求或响应，**并且这些请求或响应能够并行的传输而不被阻塞**，避免 HTTP1.1 出现的”队头堵塞”问题。\n\n\n\n**头部压缩**，HTTP1.1的header带有大量信息，而且每次都要重复发送；HTTP2.0 把header从数据中分离，并封装成头帧和数据帧，**使用特定算法压缩头帧**，有效减少头信息大小。并且HTTP2.0**在客户端和服务器端记录了之前发送的键值对，对于相同的数据，不会重复发送。\\******比如请求a发送了所有的头信息字段，请求b则\\******只需要发送差异数据**，这样可以减少冗余数据，降低开销。\n\n\n\n**服务端推送**：HTTP2.0允许服务器向客户端推送资源，无需客户端发送请求到服务器获取。\n\n\n\n## 26.HTTPS与HTTP的区别？\n\n\n\n1、HTTP是超文本传输协议，信息是**明文传输**；HTTPS则是具有**安全性**的ssl加密传输协议。\n\n\n\n2、HTTP和HTTPS用的端口不一样，HTTP端口是80，HTTPS是443。\n\n\n\n3、HTTPS协议**需要到CA机构申请证书**，一般需要一定的费用。\n\n\n\n4、HTTP运行在TCP协议之上；HTTPS运行在SSL协议之上，SSL运行在TCP协议之上。\n\n\n\n## 27.什么是数字证书？\n\n\n\n服务端可以向证书颁发机构CA申请证书，以避免中间人攻击（防止证书被篡改）。证书包含三部分内容：**证书内容、证书签名算法和签名**，签名是为了验证身份。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358872192-e43151fd-0414-4313-91c4-793b531d8101.png)\n\n\n\n服务端把证书传输给浏览器，浏览器从证书里取公钥。证书可以证明该公钥对应本网站。\n\n\n\n**数字签名的制作过程**：\n\n\n\n1、CA使用证书签名算法对证书内容进行**hash运算**。\n\n\n\n2、对hash后的值**用CA的私钥加密**，得到数字签名。\n\n\n\n**浏览器验证过程**：\n\n\n\n1、获取证书，得到证书内容、证书签名算法和数字签名。\n\n\n\n2、用CA机构的公钥**对数字签名解密**（由于是浏览器信任的机构，所以浏览器会保存它的公钥）。\n\n\n\n3、用证书里的签名算法**对证书内容进行hash运算**。\n\n\n\n4、比较解密后的数字签名和对证书内容做hash运算后得到的哈希值，相等则表明证书可信。\n\n\n\n## 28.HTTPS原理\n\n\n\n首先是TCP三次握手，然后客户端发起一个HTTPS连接建立请求，客户端先发一个`Client Hello`的包，然后服务端响应`Server Hello`，接着再给客户端发送它的证书，然后双方经过密钥交换，最后使用交换的密钥加解密数据。\n\n\n\n1、**协商加密算法** 。在`Client Hello`里面客户端会告知服务端自己当前的一些信息，包括客户端要使用的TLS版本，支持的加密算法，要访问的域名，给服务端生成的一个随机数（Nonce）等。需要提前告知服务器想要访问的域名以便服务器发送相应的域名的证书过来。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358874267-a7c88320-ea0a-4f46-8087-a724021f0137.png)\n\n\n\n2、服务端响应`Server Hello`，告诉客户端服务端**选中的加密算法**。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358876384-bb1b6d0e-e7ad-491d-8625-5316e5dad58f.png)\n\n\n\n3、接着服务端给客户端发来了2个证书。第二个证书是第一个证书的签发机构（CA）的证书。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358878314-6e92fe9a-0f83-4f0e-adbe-6c3146db59ff.png)\n\n\n\n4、客户端使用证书的认证机构CA公开发布的RSA公钥**对该证书进行验证**，下图表明证书认证成功。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358880141-bf696ba2-dd59-4d67-9ef9-20ce30e61287.png)\n\n\n\n5、验证通过之后，浏览器和服务器通过**密钥交换算法**产生共享的**对称密钥**。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358881698-d39ab7cc-dcd4-476a-96b7-7fce65fe5f78.png)\n\n\n\n6、开始传输数据，使用同一个对称密钥来加解密。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358883511-b90bc9bc-dbe3-4317-9b2d-ec39eda4da99.png)\n\n\n\n## 29.DNS 的解析过程？\n\n\n\n1、浏览器搜索**自己的DNS缓存**\n\n\n\n2、若没有，则搜索**操作系统中的DNS缓存和hosts文件**\n\n\n\n3、若没有，则操作系统将域名发送至**本地域名服务器**，本地域名服务器查询自己的DNS缓存，查找成功则返回结果，否则依次向**根域名服务器、顶级域名服务器、权限域名服务器**发起查询请求，最终返回IP地址给本地域名服务器\n\n\n\n4、本地域名服务器将得到的IP地址返回给**操作系统**，同时自己也**将IP地址缓存起来**\n\n\n\n5、操作系统将 IP 地址返回给浏览器，同时自己也将IP地址缓存起来\n\n\n\n6、浏览器得到域名对应的IP地址\n\n\n\n## 30.浏览器中输入URL返回页面过程？\n\n\n\n1、**解析域名**，找到主机 IP。\n\n\n\n2、浏览器利用 IP 直接与网站主机通信，**三次握手**，建立 TCP 连接。浏览器会以一个随机端口向服务端的 web 程序 80 端口发起 TCP 的连接。\n\n\n\n3、建立 TCP 连接后，浏览器向主机发起一个HTTP请求。\n\n\n\n4、服务器**响应请求**，返回响应数据。\n\n\n\n5、浏览器**解析响应内容，进行渲染**，呈现给用户。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358886057-ef3eca4c-4c0f-4963-8303-5892533cfe08.png)\n\n\n\n## 31.什么是cookie和session？\n\n\n\n由于HTTP协议是无状态的协议，需要用某种机制来识具体的用户身份，用来跟踪用户的整个会话。常用的会话跟踪技术是cookie与session。\n\n\n\n**cookie**就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。说得更具体一些：当用户使用浏览器访问一个支持cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器；接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体中的，而是存放于HTTP响应头；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统一的位置。 自此，客户端再向服务器发送请求的时候，都会把相应的cookie存放在HTTP请求头再次发回至服务器。服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的cookie得到客户端特有的信息，从而动态生成与该客户端相对应的内容。网站的登录界面中“请记住我”这样的选项，就是通过cookie实现的。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358888696-5c7d867f-41a7-42b2-94f6-4d3e87848c96.png)\n\n\n\n**cookie工作流程**：\n\n\n\n1、servlet创建cookie，保存少量数据，发送给浏览器。\n\n\n\n2、浏览器获得服务器发送的cookie数据，将自动的保存到浏览器端。\n\n\n\n3、下次访问时，浏览器将自动携带cookie数据发送给服务器。\n\n\n\n**session原理**：首先浏览器请求服务器访问web站点时，服务器首先会检查这个客户端请求是否已经包含了一个session标识、称为SESSIONID，如果已经包含了一个sessionid则说明以前已经为此客户端创建过session，服务器就按照sessionid把这个session检索出来使用，如果客户端请求不包含session id，则服务器为此客户端创建一个session，并且生成一个与此session相关联的独一无二的sessionid存放到cookie中，这个sessionid将在本次响应中返回到客户端保存，这样在交互的过程中，浏览器端每次请求时，都会带着这个sessionid，服务器根据这个sessionid就可以找得到对应的session。以此来达到共享数据的目的。 这里需要注意的是，session不会随着浏览器的关闭而死亡，而是等待超时时间。\n\n\n\n![img](大厂面试之计算机网络篇.assets/1676358890845-24db427f-7602-4b8d-a4f9-026d730286d2.png)\n\n\n\n## 32.cookie和session的区别？\n\n\n\n**作用范围不同**，Cookie 保存在客户端，Session 保存在服务器端。\n\n\n\n**有效期不同**，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。\n\n\n\n**隐私策略不同**，Cookie 存储在客户端，容易被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。\n\n\n\n**存储大小不同**， 单个 Cookie 保存的数据不能超过 4K；对于 Session 来说存储没有上限，但出于对服务器的性能考虑，Session 内不要存放过多的数据，并且需要设置 Session 删除机制。\n\n\n\n## 33.什么是对称加密和非对称加密？\n\n\n\n**对称加密**：通信双方使用**相同的密钥**进行加密。特点是加密速度快，但是缺点是密钥泄露会导致密文数据被破解。常见的对称加密有`AES`和`DES`算法。\n\n\n\n**非对称加密**：它需要生成两个密钥，**公钥和私钥**。公钥是公开的，任何人都可以获得，而私钥是私人保管的。公钥负责加密，私钥负责解密；或者私钥负责加密，公钥负责解密。这种加密算法**安全性更高**，但是**计算量相比对称加密大很多**，加密和解密都很慢。常见的非对称算法有`RSA`和`DSA`。\n\n\n\n## 34.说说 WebSocket与socket的区别\n\n\n\nSocket是一套标准，它完成了对TCP/IP的高度封装，屏蔽网络细节，以方便开发者更好地进行网络编程。Socket其实就是等于**IP地址 + 端口 + 协议**。\n\n\n\nWebSocket是一个持久化的协议，它是伴随H5而出的协议，用来解决**http不支持持久化连接**的问题。\n\n\n\nSocket一个是**网编编程的标准接口**，而WebSocket则是应用层通信协议。\n\n\n\n## 35.ARP协议的工作过程？\n\n\n\nARP解决了同一个局域网上的主机和路由器IP和MAC地址的解析。\n\n\n\n每台主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址的对应关系。\n\n\n\n当源主机需要将一个数据包要发送到目的主机时，会首先检查自己 ARP列表中是否存在该 IP地址对应的MAC地址，如果有，就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。\n\n\n\n网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP列表中，如果ARP表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个 ARP响应数据包，告诉对方自己是它需要查找的MAC地址。\n\n\n\n源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。\n\n\n\n如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。\n\n\n\n## 36.ICMP协议的功能\n\n\n\nICMP,Internet Control Message Protocol ,Internet控制消息协议。\n\n\n\nICMP协议是一种面向无连接的协议，用于传输出错报告控制信息。\n\n\n\n它是一个非常重要的协议，它对于网络安全具有极其重要的意义。它属于网络层协议，主要用于在主机与路由器之间传递控制信息，包括**报告错误、交换受限控制和状态信息**等。\n\n\n\n当遇到IP数据无法访问目标、IP路由器无法按当前的传输速率转发数据包等情况时，会自动发送ICMP消息。\n\n\n\n比如我们日常使用得比较多的**ping**，就是基于ICMP的。\n\n\n\n## 37.什么是DoS、DDoS、DRDoS攻击？\n\n\n\n**DOS**: (Denial of Service),翻译过来就是拒绝服务,一切能引起DOS行为的攻击都被称为DOS攻击。最常见的DoS攻击就有**计算机网络宽带攻击**、**连通性攻击**。\n\n\n\n**DDoS**: (Distributed Denial of Service),翻译过来是分布式拒绝服务。是指处于不同位置的多个攻击者同时向一个或几个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器并利用这些机器对受害者同时实施攻击。常见的DDos有**SYN Flood、Ping of Death、ACK Flood、UDP Flood**等。\n\n\n\n**DRDoS**: (Distributed Reflection Denial of Service)，中文是分布式反射拒绝服务，该方式靠的是发送大量带有被害者IP地址的数据包给攻击主机，然后攻击主机对IP地址源做出大量回应，从而形成拒绝服务攻击。\n\n\n\n## 38.什么是CSRF攻击，如何避免\n\n\n\nCSRF，跨站请求伪造（英文全称是Cross-site request forgery），是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。\n\n\n\n**怎么解决CSRF攻击呢？**\n\n\n\n- 检查Referer字段。\n\n- 添加校验token。\n\n\n\n## 39.什么是XSS攻击？\n\n\n\nXSS，跨站脚本攻击（Cross-Site Scripting）。它指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。XSS攻击一般分三种类型：**存储型 、反射型 、DOM型XSS**\n\n\n\n## 40.如何解决XSS攻击问题？\n\n\n\n对输入进行过滤，过滤标签等，只允许合法值。\n\n\n\nHTML转义\n\n\n\n对于链接跳转，如`<a href=\"xxx\"` 等，要校验内容，禁止以script开头的非法链接。\n\n\n\n限制输入长度\n\n\n\n## 41.防盗链\n\n\n\n**盗链**是指服务提供商自己不提供服务的内容，通过技术手段（可以理解成爬虫）去获取其他网站的资源展示在自己的网站上。常见的盗链有以下几种：图片盗链、音频盗链、视频盗链等。\n\n\n\n网站盗链会大量消耗被盗链网站的带宽，而真正的点击率也许会很小，严重损害了被盗链网站的利益。\n\n\n\n被盗网站就自然会**防盗链**，可以通过经常更换图片名，也可以通过检测referer。因为正常用户访问一张图片一定是从自己的网站点击链接进去的，如果一个请求的referer是其他网站，就说明这是一个爬虫。\n\n\n\n**什么是 Referer？**\n\n\n\n这里的 Referer 指的是 HTTP 头部的一个字段，也称为 HTTP 来源地址（HTTP Referer），用来表示从哪儿链接到目前的网页，采用的格式是 URL。换句话说，借着 HTTP Referer 头部网页可以检查访客从哪里而来，这也常被用来对付伪造的跨网站请求。\n\n\n\n盗链网站会针对性进行**反盗链**，可以通过在请求的headers中设置referer来绕过**防盗链**，我们现在使用爬虫抓取别人的网站也是这样。\n\n\n\n**什么是空 Referer，什么时候会出现空 Referer？**\n\n\n\n首先，我们对空 Referer 的定义为，Referer 头部的内容为空，或者，一个 HTTP 请求中根本不包含 Referer 头部。\n\n\n\n那么什么时候 HTTP 请求会不包含 Referer 字段呢？根据 Referer 的定义，它的作用是指示一个请求是从哪里链接过来，那么当一个请求并不是由链接触发产生的，那么自然也就不需要指定这个请求的链接来源。\n\n\n\n比如，直接在浏览器的地址栏中输入一个资源的 URL 地址，那么这种请求是不会包含 Referer 字段的，因为这是一个 “凭空产生” 的 HTTP 请求，并不是从一个地方链接过去的。\n\n\n\n## 42.说下ping的原理\n\n\n\nping，**Packet Internet Groper**，是一种因特网包探索器，用于测试网络连接量的程序。Ping是工作在TCP/IP网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送ICMP（Internet Control Message Protocol 因特网报文控制协议） 请求报文，测试目的站是否可达及了解其有关状态。\n\n\n\n一般来说，ping可以用来检测网络通不通。它是基于`ICMP`协议工作的。假设**机器A** ping**机器B**，工作过程如下：\n\n\n\n1、ping通知系统，新建一个固定格式的ICMP请求数据包\n\n\n\n2、ICMP协议，将该数据包和目标机器B的IP地址打包，一起转交给IP协议层\n\n\n\n3、IP层协议将本机IP地址为源地址，机器B的IP地址为目标地址，加上一些其他的控制信息，构建一个IP数据包\n\n\n\n4、先获取目标机器B的MAC地址。\n\n\n\n5、数据链路层构建一个数据帧，目的地址是IP层传过来的**MAC地址**，源地址是本机的**MAC地址**\n\n\n\n6、机器B收到后，对比目标地址，和自己本机的MAC地址是否一致，符合就处理返回，不符合就丢弃。\n\n\n\n7、根据目的主机返回的ICMP回送回答报文中的时间戳，从而计算出往返时间\n\n\n\n8、最终显示结果有这几项：发送到目的主机的IP地址、发送 & 收到 & 丢失的分组数、往返时间的最小、最大& 平均值","tags":["我要进大厂","面试","计算机网络"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之算法篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之算法篇/","content":"\n## 1. 二叉树的遍历\n\n\n\n二叉树是一种非常重要的数据结构，很多其它数据结构都是基于二叉树的基础演变而来的。\n\n\n\n二叉树的先序、中序和后序属于深度优先遍历DFS，层次遍历属于广度优先遍历BFS。\n\n\n\n![img](大厂面试之算法篇.assets/1676359029260-ff6c73da-d42f-4d4c-851e-97a48db0bed6.png)\n\n\n\n四种主要的遍历思想为：\n\n\n\n前序遍历：根结点 ---> 左子树 ---> 右子树\n\n\n\n中序遍历：左子树---> 根结点 ---> 右子树\n\n\n\n后序遍历：左子树 ---> 右子树 ---> 根结点\n\n\n\n层次遍历：只需按层次遍历即可\n\n\n\n### 前序遍历\n\n\n\n遍历思路：根结点 ---> 左子树 ---> 右子树。\n\n\n\n根据前序遍历的顺序，优先访问根结点，然后在访问左子树和右子树。所以，对于任意结点node，第一部分即直接访问之，之后在判断左子树是否为空，不为空时即重复上面的步骤，直到其为空。若为空，则需要访问右子树。注意，在访问过左孩子之后，需要反过来访问其右孩子，可以是栈这种数据结构来支持。对于任意一个结点node，具体步骤如下：\n\n\n\n1. 访问结点，并把结点node入栈，当前结点置为左孩子；\n\n1. 判断结点node是否为空，若为空，则取出栈顶结点并出栈，将右孩子置为当前结点；否则重复a)步直到当前结点为空或者栈为空（可以发现栈中的结点就是为了访问右孩子才存储的）\n\n\n\n```java\npublic void preOrderTraverse2(TreeNode root) {\n    LinkedList<TreeNode> stack = new LinkedList<>();\n    TreeNode pNode = root;\n    while (pNode != null || !stack.isEmpty()) {\n        if (pNode != null) {\n            System.out.print(pNode.val+\"  \");\n            stack.push(pNode);\n            pNode = pNode.left;\n        } else { //pNode == null && !stack.isEmpty()\n            TreeNode node = stack.pop();\n            pNode = node.right;\n        }\n    }\n}\n```\n\n\n\n### 中序遍历\n\n\n\n遍历思路：左子树 ---> 根结点 ---> 右子树\n\n\n\n```java\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        Deque<TreeNode> deque = new ArrayDeque<>();\n\n        while (!deque.isEmpty() || root != null) {\n            while (root != null) {\n                deque.push(root);\n                root = root.left;\n            }\n            root = deque.pop();\n            res.add(root.val);\n            root = root.right;\n        }\n\n        return res;\n    }\n```\n\n\n\n### 后序遍历\n\n\n\n遍历思路：左子树 ---> 右子树 ---> 根结点。\n\n\n\n使用 null 作为标志位，访问到 null 说明此次递归调用结束。\n\n\n\n```java\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> res = new LinkedList<>();\n        if (root == null) {\n            return res;\n        }\n\n        Stack<TreeNode> stack = new Stack<>();\n        stack.push(root);\n        while (!stack.isEmpty()) {\n            root = stack.pop();\n            if (root != null) {\n                stack.push(root);//最后访问\n                stack.push(null);\n                if (root.right != null) {\n                    stack.push(root.right);\n                }\n                if (root.left != null) {\n                    stack.push(root.left);\n                }\n            } else { //值为null说明此次递归调用结束，将节点值存进结果\n                res.add(stack.pop().val);\n            }\n        }\n\n        return res;\n    }\n}\n```\n\n\n\n### 层序遍历\n\n\n\n只需要一个队列即可，先在队列中加入根结点。之后对于任意一个结点来说，在其出队列的时候，访问之。同时如果左孩子和右孩子有不为空的，入队列。\n\n\n\n```java\npublic void levelTraverse(TreeNode root) {\n\t\tif (root == null) {\n\t\t\treturn;\n\t\t}\n\t\tLinkedList<TreeNode> queue = new LinkedList<>();\n\t\tqueue.offer(root);\n\t\twhile (!queue.isEmpty()) {\n\t\t\tTreeNode node = queue.poll();\n\t\t\tSystem.out.print(node.val+\"  \");\n\t\t\tif (node.left != null) {\n\t\t\t\tqueue.offer(node.left);\n\t\t\t}\n\t\t\tif (node.right != null) {\n\t\t\t\tqueue.offer(node.right);\n\t\t\t}\n\t\t}\n}\n```\n\n\n\n## 2. 排序算法\n\n\n\n常见的排序算法主要有：冒泡排序、插入排序、选择排序、快速排序、归并排序、堆排序、基数排序。各种排序算法的时间空间复杂度、稳定性见下图。\n\n\n\n![img](大厂面试之算法篇.assets/1676359033940-5ecfe770-416b-49e2-a972-9110b28579a3.png)\n\n\n\n### 冒泡排序\n\n\n\n冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n\n\n思路：\n\n\n\n- 比较相邻的元素。如果第一个比第二个大，就交换它们两个；\n\n- 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；\n\n- 针对所有的元素重复以上的步骤，除了最后一个；\n\n- 重复步骤1~3，直到排序完成。\n\n\n\n代码实现：\n\n\n\n```java\npublic void bubbleSort(int[] arr) {\n    if (arr == null) {\n        return;\n    }\n    boolean flag;\n    for (int i = arr.length - 1; i > 0; i--) {\n        flag = false;\n        for (int j = 0; j < i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n                flag = true;\n            }\n        }\n        if (!flag) {\n            return;\n        }\n    }\n}\n```\n\n\n\n### 插入排序\n\n\n\n插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n\n\n\n算法描述：\n\n\n\n一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\n\n\n\n- 从第一个元素开始，该元素可以认为已经被排序；\n\n- 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n\n- 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n\n- 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n\n- 将新元素插入到该位置后；\n\n- 重复步骤2~5。\n\n\n\n代码实现：\n\n\n\n```java\npublic void insertSort(int[] arr) {\n    if (arr == null) {\n        return;\n    }\n    for (int i = 1; i < arr.length; i++) {\n        int tmp = arr[i];\n        int j = i;\n        for (; j > 0 && tmp < arr[j - 1]; j--) {\n            arr[j] = arr[j - 1];\n        }\n        arr[j] = tmp;\n    }\n}\n```\n\n\n\n### 选择排序\n\n\n\n表现**最稳定的排序算法之一**，因为**无论什么数据进去都是O(n2)的时间复杂度**，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间。\n\n\n\n选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n\n\n\n思路：n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：\n\n\n\n- 初始状态：无序区为R[1..n]，有序区为空；\n\n- 第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；\n\n- n-1趟结束，数组有序化了。\n\n\n\n代码实现：\n\n\n\n```java\n    public void selectionSort(int[] arr) {\n        if (arr == null) {\n            return;\n        }\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    int tmp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = tmp;\n                }\n            }\n        }\n    }\n```\n\n\n\n### 希尔排序\n\n\n\n希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。\n\n\n\n**希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。**\n\n\n\n代码实现：\n\n\n\n```java\npublic static int[] ShellSort(int[] array) {\n    int len = array.length;\n    int temp, gap = len / 2;\n    while (gap > 0) {\n        for (int i = gap; i < len; i++) {\n            temp = array[i];\n            int preIndex = i - gap;\n            while (preIndex >= 0 && array[preIndex] > temp) {\n                array[preIndex + gap] = array[preIndex];\n                preIndex -= gap;\n            }\n            array[preIndex + gap] = temp;\n        }\n        gap /= 2;\n    }\n    return array;\n}\n```\n\n\n\n### 基数排序\n\n\n\n基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；\n\n\n\n基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。\n\n\n\n算法描述：\n\n\n\n- 取得数组中的最大数，并取得位数；\n\n- arr为原始数组，从最低位开始取每个位组成radix数组；\n\n- 对radix进行计数排序（利用计数排序适用于小范围数的特点）；\n\n\n\n代码实现：\n\n\n\n```java\npublic static int[] RadixSort(int[] array) {\n    if (array == null || array.length < 2)\n        return array;\n    // 1.先算出最大数的位数；\n    int max = array[0];\n    for (int i = 1; i < array.length; i++) {\n        max = Math.max(max, array[i]);\n    }\n    int maxDigit = 0;\n    while (max != 0) {\n        max /= 10;\n        maxDigit++;\n    }\n    int mod = 10, div = 1;\n    ArrayList<ArrayList<Integer>> bucketList = new ArrayList<ArrayList<Integer>>();\n    for (int i = 0; i < 10; i++)\n        bucketList.add(new ArrayList<Integer>());\n    for (int i = 0; i < maxDigit; i++, mod *= 10, div *= 10) {\n        for (int j = 0; j < array.length; j++) {\n            int num = (array[j] % mod) / div;\n            bucketList.get(num).add(array[j]);\n        }\n        int index = 0;\n        for (int j = 0; j < bucketList.size(); j++) {\n            for (int k = 0; k < bucketList.get(j).size(); k++)\n                array[index++] = bucketList.get(j).get(k);\n            bucketList.get(j).clear();\n        }\n    }\n    return array;\n}\n```\n\n\n\n### 计数排序\n\n\n\n计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n\n\n\n计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。\n\n\n\n```java\npublic static int[] CountingSort(int[] array) {\n    if (array.length == 0) return array;\n    int bias, min = array[0], max = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > max)\n            max = array[i];\n        if (array[i] < min)\n            min = array[i];\n    }\n    bias = 0 - min;\n    int[] bucket = new int[max - min + 1];\n    Arrays.fill(bucket, 0);\n    for (int i = 0; i < array.length; i++) {\n        bucket[array[i] + bias]++;\n    }\n    int index = 0, i = 0;\n    while (index < array.length) {\n        if (bucket[i] != 0) {\n            array[index] = i - bias;\n            bucket[i]--;\n            index++;\n        } else\n            i++;\n    }\n    return array;\n}\n```\n\n\n\n### 快速排序\n\n\n\n快速排序是由**冒泡排序**改进而得到的，是一种排序执行效率很高的排序算法，它利用**分治法**来对待排序序列进行分治排序，它的思想主要是通过一趟排序将待排记录分隔成独立的两部分，其中的一部分比关键字小，后面一部分比关键字大，然后再对这前后的两部分分别采用这种方式进行排序，通过递归的运算最终达到整个序列有序。\n\n\n\n快速排序的过程如下：\n\n\n\n1、在待排序的N个记录中任取一个元素（通常取第一个记录）作为基准，称为基准记录；\n\n\n\n2、定义两个索引 left 和 right 分别表示首索引和尾索引，key 表示基准值；\n\n\n\n3、首先，尾索引向前扫描，直到找到比基准值小的记录，并替换首索引对应的值；\n\n\n\n4、然后，首索引向后扫描，直到找到比基准值大于的记录，并替换尾索引对应的值；\n\n\n\n5、若在扫描过程中首索引等于尾索引(left = right)，则一趟排序结束；将基准值(key)替换首索引所对应的值；\n\n\n\n6、再进行下一趟排序时，待排序列被分成两个区：[0,left-1]和[righ+1,end]\n\n\n\n7、对每一个分区重复以上步骤，直到所有分区中的记录都有序，排序完成\n\n\n\n**快排为什么比冒泡效率高？**\n\n\n\n快速排序之所以比较快，是因为相比冒泡排序，每次的交换都是跳跃式的，每次设置一个基准值，将小于基准值的都交换到左边，大于基准值的都交换到右边，这样不会像冒泡一样每次都只交换相邻的两个数，因此比较和交换的此数都变少了，速度自然更高。\n\n\n\n快速排序的平均时间复杂度是`O(nlgn)`，最坏时间复杂度是`O(n^2)`。\n\n\n\n```java\n    public void quickSort(int[] arr) {\n        if (arr == null) {\n            return;\n        }\n        quickSortHelper(arr, 0, arr.length - 1);\n    }\n    private void quickSortHelper(int[] arr, int left, int right) {\n        if (left > right) {\n            return;\n        }\n        int tmp = arr[left];\n        int i = left;\n        int j = right;\n        while (i < j) {\n            //j先走，最终循环终止时，j停留的位置就是arr[left]的正确位置\n            //改为i<=j，则会进入死循环，[1,5,5,5,5]->[1] 5 [5,5,5]->[5,5,5]，会死循环\n            while (i < j && arr[j] >= tmp) {\n                j--;\n            }\n            while (i < j && arr[i] <= tmp) {\n                i++;\n            }\n            if (i < j) {\n                int tmp1 = arr[i];\n                arr[i] = arr[j];\n                arr[j] = tmp1;\n            } else {\n                break;\n            }\n        }\n\n        //当循环终止的时候，i=j，因为是j先走的，j所在位置的值小于arr[left]，交换arr[j]和arr[left]\n        arr[left] = arr[j];\n        arr[j] = tmp;\n\n        quickSortHelper(arr, left, j - 1);\n        quickSortHelper(arr, j + 1, right);\n    }\n```\n\n\n\n### 归并排序\n\n\n\n归并排序 (merge sort) 是一类与插入排序、交换排序、选择排序不同的另一种排序方法。归并的含义是将两个或两个以上的有序表合并成一个新的有序表。归并排序有多路归并排序、两路归并排序 ， 可用于内排序，也可以用于外排序。\n\n\n\n两路归并排序算法思路是递归处理。每个递归过程涉及三个步骤\n\n\n\n- 分解： 把待排序的 n 个元素的序列分解成两个子序列， 每个子序列包括 n/2 个元素\n\n- 治理： 对每个子序列分别调用归并排序MergeSort， 进行递归操作\n\n- 合并： 合并两个排好序的子序列，生成排序结果\n\n\n\n![img](大厂面试之算法篇.assets/1676359042731-714cfc14-5b58-407d-9988-8d6ce44a7780.png)\n\n\n\n时间复杂度：对长度为n的序列，需进行logn次二路归并，每次归并的时间为O(n)，故时间复杂度是O(nlgn)。\n\n\n\n空间复杂度：归并排序需要辅助空间来暂存两个有序子序列归并的结果，故其辅助空间复杂度为O(n)\n\n\n\n```java\npublic class MergeSort {\n    public void mergeSort(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return;\n        }\n        //辅助数组\n        int[] tmpArr = new int[arr.length];\n        mergeSort(arr, tmpArr, 0, arr.length - 1);\n    }\n\n    private void mergeSort(int[] arr, int[] tmpArr, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) >> 1;\n            mergeSort(arr, tmpArr, left, mid);\n            mergeSort(arr, tmpArr, mid + 1, right);\n            merge(arr, tmpArr, left, mid, right);\n        }\n    }\n\n    private void merge(int[] arr, int[] tmpArr, int left, int mid, int right) {\n        int i = left;\n        int j = mid + 1;\n        int tmpIndex = left;\n        while (i <= mid && j <= right) {\n            if (arr[i] < arr[j]) {\n                tmpArr[tmpIndex++] = arr[i];\n                i++;\n            } else {\n                tmpArr[tmpIndex++] = arr[j];\n                j++;\n            }\n        }\n\n        while (i <= mid) {\n            tmpArr[tmpIndex++] = arr[i++];\n        }\n\n        while (j <= right) {\n            tmpArr[tmpIndex++] = arr[j++];\n        }\n\n        for (int m = left; m <= right; m++) {\n            arr[m] = tmpArr[m];\n        }\n    }\n}\n```\n\n\n\n### 堆排序\n\n\n\n堆是具有下列性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。\n\n\n\n![img](大厂面试之算法篇.assets/1676359046118-a0a1686c-c6e2-4041-9b63-c4d6389cd233.png)\n\n\n\n**Top大问题**解决思路：使用一个固定大小的**最小堆**，当堆满后，每次添加数据的时候与堆顶元素比较，若小于堆顶元素，则舍弃，若大于堆顶元素，则删除堆顶元素，添加新增元素，对堆进行重新排序。\n\n\n\n对于n个数，取Top m个数，时间复杂度为O(nlogm)，这样在n较大情况下，是优于nlogn（其他排序算法）的时间复杂度的。\n\n\n\nPriorityQueue 是一种基于优先级堆的优先级队列。每次从队列中取出的是具有最高优先权的元素。如果不提供Comparator的话，优先队列中元素默认按自然顺序排列，也就是数字默认是小的在队列头。优先级队列用数组实现，但是数组大小可以动态增加，容量无限。\n\n\n\n```java\n//找出前k个最大数，采用小顶堆实现\npublic static int[] findKMax(int[] nums, int k) {\n    PriorityQueue<Integer> pq = new PriorityQueue<>(k);//队列默认自然顺序排列，小顶堆，不必重写compare\n\n    for (int num : nums) {\n        if (pq.size() < k) {\n            pq.offer(num);\n        } else if (pq.peek() < num) {//如果堆顶元素 < 新数，则删除堆顶，加入新数入堆\n            pq.poll();\n            pq.offer(num);\n        }\n    }\n\n    int[] result = new int[k];\n    for (int i = 0; i < k&&!pq.isEmpty(); i++) {\n        result[i] = pq.poll();\n    }\n    return result;\n}\n```\n\n\n\n## 4. 动态规划\n\n\n\n动态规划常常适用于有重叠子问题的问题。动态规划的基本思想：若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。\n\n\n\n动态规划法试图仅仅解决每个子问题一次，一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次遇到同一个子问题的时候直接查表得到解。\n\n\n\n动态规划的解题思路：1、状态定义；2、状态转移方程；3、初始状态。\n\n\n\n### 不同路径\n\n\n\n[不同路径](https://topjavaer.cn/leetcode/unique-paths.html)\n\n\n\n### 最长回文子串\n\n\n\n从给定的字符串 `s` 中找到最长的回文子串的长度。\n\n\n\n例如 `s = \"babbad\"` 的最长回文子串是 `\"abba\"` ，长度是 `4` 。\n\n\n\n解题思路：\n\n\n\n1、定义状态。`dp[i][j]` 表示子串 `s[i..j]` 是否为回文子串\n\n\n\n2、状态转移方程：`dp[i][j] = (s[i] == s[j]) and dp[i + 1][j - 1]`\n\n\n\n3、初始化的时候，单个字符一定是回文串，因此把对角线先初始化为 `true`，即 `dp[i][i] = true` 。\n\n\n\n4、只要一得到 `dp[i][j] = true`，就记录子串的长度和起始位置\n\n\n\n注意事项：总是先得到小子串的回文判定，然后大子串才能参考小子串的判断结果，即填表顺序很重要。\n\n\n\n![img](大厂面试之算法篇.assets/1676359055255-4f750233-b606-4af9-a8ca-e44c1eae699e.png)\n\n\n\n时间复杂度O(N2)，空间复杂度O(N2)，因为使用了二维数组。\n\n\n\n```java\npublic class Solution {\n\n    public String longestPalindrome(String s) {\n        // 特判\n        int len = s.length();\n        if (len < 2) {\n            return s;\n        }\n\n        int maxLen = 1;\n        int begin = 0;\n\n        // dp[i][j] 表示 s[i, j] 是否是回文串\n        boolean[][] dp = new boolean[len][len];\n        char[] charArray = s.toCharArray();\n\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = true;\n        }\n        for (int j = 1; j < len; j++) {\n            for (int i = 0; i < j; i++) {\n                if (charArray[i] != charArray[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i < 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n\n                // 只要 dp[i][j] == true 成立，就表示子串 s[i..j] 是回文，此时记录回文长度和起始位置\n                if (dp[i][j] && j - i + 1 > maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substring(begin, begin + maxLen); //substring(i, j)截取i到j(不包含j)的字符串\n    }\n}\n```\n\n\n\n### 最大子数组和\n\n\n\n**题目描述**：给你一个整数数组 `nums` ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n\n\n**示例**：\n\n\n\n```java\n输入： nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出： 6\n解释： 连续子数组 [4,-1,2,1] 的和最大，为 6 。\n```\n\n\n\n1、首先确定dp数组（dp table）以及下标的含义。\n\n\n\ndp[i]表示以nums[i]结尾的子数组的最大和。\n\n\n\n2、确定递推公式。\n\n\n\n```plain\ndp[i] = dp[i - 1] > 0 ? ( dp[i - 1] + nums[i]) : nums[i]\n```\n\n\n\ndp[i+1]取决于dp[i]的值，不需要使用数组保存状态，只需要一个变量sum来保存上一个状态即可。\n\n\n\n3、dp数组如何初始化。\n\n\n\n从递推公式可以看出来dp[i]是依赖于dp[i - 1]的状态，dp[0]就是递推公式的基础。\n\n\n\ndp[0]应该是多少呢？根据dp[i]的定义，很明显dp[0]应为nums[0]即dp[0] = nums[0]。\n\n\n\n示例代码如下：\n\n\n\n```java\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        int max = nums[0];\n        int sum = 0;\n\n        for (int num : nums) {\n            if (sum > 0) {\n                sum += num;\n            } else {\n                sum = num;\n            }\n            max = Math.max(max, sum);\n        }\n\n        return max;\n    }\n}\n```\n\n\n\n### 最长公共子序列\n\n\n\n一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。 例如，\"ace\" 是 \"abcde\" 的子序列，但 \"aec\" 不是 \"abcde\" 的子序列。\n\n\n\n动态规划。`dp[i][j]`表示text1以i-1结尾的子串和text2以j-1结尾的子串的最长公共子序列的长度。dp横坐标或纵坐标为0表示空字符串，`dp[0][j] = dp[i][0] = 0`，无需额外处理base case。\n\n\n\n![img](大厂面试之算法篇.assets/1676359058936-a2e9fb51-7087-435d-b9c1-7ebb2d6ab2b5.png)\n\n\n\n```java\nclass Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        char[] arr1 = text1.toCharArray();\n        char[] arr2 = text2.toCharArray();\n        //dp[0][x]和dp[x][0]表示有一个为空字符串\n        //dp[1][1]为text1第一个字符和text2第一个字符的最长公共子序列的长度\n        //dp[i][j]表示text1以i-1结尾的子串和text2以j-1结尾的子串的最长公共子序列的长度\n        int len1 = arr1.length;\n        int len2 = arr2.length;\n        int[][] dp = new int[len1 + 1][len2 + 1];\n\n        for (int i = 1; i < len1 + 1; i++) {\n            for (int j = 1; j < len2 + 1; j++) {\n                if (arr1[i - 1] == arr2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[len1][len2];\n    }\n}\n```\n\n\n\n`dp[i][j]`表示text1以i结尾的子串和text2以j结尾的子串的最长公共子序列的长度。需要处理base case。\n\n\n\n```java\nclass Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        char[] arr1 = text1.toCharArray();\n        char[] arr2 = text2.toCharArray();\n\n        int len1 = arr1.length;\n        int len2 = arr2.length;\n        //`dp[i][j]`表示text1以i结尾的子串和text2以j结尾的子串的最长公共子序列的长度。\n        int[][] dp = new int[len1][len2];\n\n        if (arr1[0] == arr2[0]) {\n            dp[0][0] = 1;\n        }\n        for (int i = 1; i < len1; i++) {\n            if (arr1[i] == arr2[0]) {\n                dp[i][0] = 1;\n            } else {\n                dp[i][0] = dp[i - 1][0];\n            }\n        }\n        for (int i = 1; i < len2; i++) {\n            if (arr1[0] == arr2[i]) {\n                dp[0][i] = 1;\n            } else {\n                dp[0][i] = dp[0][i - 1];\n            }\n        }\n\n        for (int i = 1; i < len1; i++) {\n            for (int j = 1; j < len2; j++) {\n                if (arr1[i] == arr2[j]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[len1 - 1][len2 - 1];\n    }\n}\n```\n\n\n\n### 接雨水\n\n\n\n给定 `n` 个非负整数表示每个宽度为 `1` 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n\n\n![img](大厂面试之算法篇.assets/1676359062838-c6d17f6e-c0dd-48dc-8f5c-df7fc40c7e06.png)\n\n\n\n示例：\n\n\n\n```java\n输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n输出：6\n解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。\n```\n\n\n\n动态规划，使用两个数组空间。leftMax[i] 代表第 `i` 列左边（不包含自身）最高的墙的高度，rightMax[i] 代表第 `i` 列右边最高的墙的高度。\n\n\n\n```java\nclass Solution {\n    public int trap(int[] height) {\n        int len = height.length;\n        int res = 0;\n        int[] leftMax = new int[len];\n        int[] rightMax = new int[len];\n\n        for (int i = 1; i < len; i++) {\n            leftMax[i] = Math.max(leftMax[i - 1], height[i - 1]);\n        }\n        \n        for (int j = len - 2; j > 0; j--) {\n            rightMax[j] = Math.max(rightMax[j + 1], height[j + 1]);\n        }\n\n        for (int i = 1; i < len - 1; i++) {\n            int min = Math.min(leftMax[i], rightMax[i]);\n            if (min > height[i]) {\n                res += min - height[i];\n            }\n        }\n\n        return res;\n    }\n}\n```\n\n\n\n### 单词拆分\n\n\n\n![img](大厂面试之算法篇.assets/1676359065661-7019af8b-5f43-4de9-9dc9-2b44da037450.png)\n\n\n\n```java\nclass Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        int len = s.length(), maxw = 0;\n        //dp[i]表示前i个字母组成的字符串是否可以被拆分\n        boolean[] dp = new boolean[len + 1];\n        //状态转移方程初始化条件\n        dp[0] = true;\n        Set<String> set = new HashSet();\n        for(String str : wordDict){\n            set.add(str);\n            maxw = Math.max(maxw, str.length());\n        }\n        for(int i = 1; i < len + 1; i++){\n            for(int j = i; j >= 0 && j >= i - maxw; j--){\n                if(dp[j] && set.contains(s.substring(j, i))){\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        return dp[len];\n    }\n}\n```\n\n\n\n## 5.回溯算法\n\n\n\n回溯算法的基本思想是：从一条路往前走，能进则进，不能进则退回来，换一条路再试。\n\n\n\n### 组合总和\n\n\n\n题目描述：给定一个**无重复元素**的数组 `candidates` 和一个目标数 `target` ，找出 `candidates` 中所有可以使数字和为 `target` 的组合。\n\n\n\n示例：\n\n\n\n```java\n输入：candidates = [2,3,6,7], target = 7,\n输出：\n[\n  [7],\n  [2,2,3]\n]\n```\n\n\n\n使用回溯算法。\n\n\n\n```java\nclass Solution {\n    private List<List<Integer>> ans = new ArrayList<>();\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        if (candidates == null || candidates.length == 0) {\n            return ans;\n        }\n        Arrays.sort(candidates);//排序方便回溯剪枝\n        Deque<Integer> path = new ArrayDeque<>();//作为栈来使用，效率高于Stack；也可以作为队列来使用，效率高于LinkedList；线程不安全\n        combinationSum2Helper(candidates, target, 0, path);\n        return ans;\n    }\n\n    public void combinationSum2Helper(int[] arr, int target, int start, Deque<Integer> path) {\n        if (target == 0) {\n            ans.add(new ArrayList(path));\n        }\n\n        for (int i = start; i < arr.length; i++) {\n            if (target < arr[i]) {//剪枝\n                return;\n            }\n            if (i > start && arr[i] == arr[i - 1]) {//在一个层级，会产生重复\n                continue;\n            }\n            path.addLast(arr[i]);\n            combinationSum2Helper(arr, target - arr[i], i + 1, path);\n            path.removeLast();\n        }\n    }\n}\n```\n\n\n\n### 全排列\n\n\n\n给定一个 **没有重复** 数字的序列，返回其所有可能的全排列。\n\n\n\n示例：\n\n\n\n```java\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n\n\n使用回溯。注意与组合总和的区别（数字有无顺序）。\n\n\n\n```java\nclass Solution {\n    private List<List<Integer>> ans = new ArrayList<>();\n    public List<List<Integer>> permute(int[] nums) {\n        boolean[] flag = new boolean[nums.length];\n        ArrayDeque<Integer> path = new ArrayDeque<>();\n        permuteHelper(nums, flag, path);\n\n        return ans;\n    }\n\n    private void permuteHelper(int[] nums, boolean[] flag, ArrayDeque<Integer> path) {\n        if (path.size() == nums.length) {\n            ans.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (flag[i]) {\n                continue;//继续循环\n            }\n            path.addLast(nums[i]);\n            flag[i] = true;\n            permuteHelper(nums, flag, path);\n            path.removeLast();\n            flag[i] = false;\n        }\n    }\n}\n```\n\n\n\n### 全排列II\n\n\n\n给定一个可包含重复数字的序列，返回所有不重复的全排列。注意与组合总和的区别。\n\n\n\n1、排序；2、同一层级相同元素剪枝。\n\n\n\n![img](大厂面试之算法篇.assets/1676359070681-75d626db-3dad-44d7-be46-d43dd1bae921.png)\n\n\n\n```java\nclass Solution {\n    private List<List<Integer>> ans = new ArrayList<>();\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return ans;\n        }\n        ArrayDeque<Integer> path = new ArrayDeque<>();\n        boolean[] used = new boolean[nums.length];\n        Arrays.sort(nums);//切记\n        dps(nums, used, path);\n\n        return ans;\n    }\n\n    private void dps(int[] nums, boolean[] used, ArrayDeque<Integer> path) {\n        if (path.size() == nums.length) {\n            ans.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (used[i]) {\n                continue;\n            }\n            if ((i > 0 && nums[i] == nums[i - 1]) && !used[i - 1]) {//同一层相同的元素，剪枝\n                continue;//继续循环，不是return退出循环\n            }\n            path.addLast(nums[i]);\n            used[i] = true;\n            dps(nums, used, path);\n            path.removeLast();\n            used[i] = false;\n        }\n    }\n}\n```\n\n\n\n## 6.贪心算法\n\n\n\n贪心算法，是寻找**最优解问题**的常用方法，这种方法模式一般将求解过程分成**若干个步骤**，但每个步骤都应用贪心原则，选取当前状态下**最好/最优的选择**（局部最有利的选择），并以此希望最后堆叠出的结果也是最好/最优的解。\n\n\n\n**贪婪法的基本步骤：**\n\n\n\n1. 从某个初始解出发；\n\n1. 采用迭代的过程，当可以向目标前进一步时，就根据局部最优策略，得到一部分解，缩小问题规模；\n\n1. 将所有解综合起来。\n\n\n\n### 买卖股票的最佳时机 II\n\n\n\n**题目描述**：\n\n\n\n给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。\n\n\n\n在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。\n\n\n\n返回 你能获得的 最大 利润 。\n\n\n\n**示例**：\n\n\n\n```java\n输入：prices = [1,2,3,4,5]\n输出：4\n解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\n     总利润为 4 。\n```\n\n\n\n思路：可以尽可能地完成更多的交易，但不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n\n\n\n```java\n//输入: [7,1,5,3,6,4]\n//输出: 7\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int profit = 0;\n        for (int i = 1; i < prices.length; i++) {\n            int tmp = prices[i] - prices[i - 1];\n            if (tmp > 0) {\n                profit += tmp;\n            }\n        }\n\n        return profit;\n    }\n}\n```\n\n\n\n### 跳跃游戏\n\n\n\n**题目描述**\n\n\n\n给定一个非负整数数组 `nums` ，你最初位于数组的 **第一个下标** 。\n\n\n\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\n\n\n\n判断你是否能够到达最后一个下标。\n\n\n\n**示例**：\n\n\n\n```java\n输入：nums = [2,3,1,1,4]\n输出：true\n解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\n```\n\n\n\n解题思路：\n\n\n\n1、如果某一个作为 起跳点 的格子可以跳跃的距离是 3，那么表示后面 3 个格子都可以作为 起跳点\n\n\n\n2、可以对每一个能作为 起跳点 的格子都尝试跳一次，把 能跳到最远的距离 不断更新\n\n\n\n3、如果可以一直跳到最后，就成功了\n\n\n\n```java\nclass Solution {\n    public boolean canJump(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return true;\n        }\n\n        int maxIndex = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            if (maxIndex >= i) {\n                maxIndex = Math.max(maxIndex, i + nums[i]);\n            } else {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n```\n\n\n\n### 加油站\n\n\n\n**题目描述**\n\n\n\n在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。\n\n\n\n你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。\n\n\n\n给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。\n\n\n\n**示例**\n\n\n\n```java\n输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n输出: 3\n解释:\n从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油\n开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油\n开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油\n开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油\n开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油\n开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\n因此，3 可为起始索引。\n```\n\n\n\n**思路**：\n\n\n\n1、遍历一周，总获得的油量少于要花掉的油量必然没有结果；\n\n\n\n2、先苦后甜，记录遍历时所存的油量最少的站点，由于题目有解只有唯一解，所以从当前站点的下一个站点开始是唯一可能成功开完全程的。\n\n\n\n```java\nclass Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int minIdx=0;\n        int sum=Integer.MAX_VALUE;\n        int num=0;\n        for (int i = 0; i < gas.length; i++) {\n            num+=gas[i]-cost[i];\n            if(num<sum){\n                sum=num;\n                minIdx=i;\n            }\n        }\n        return num<0?-1:(minIdx+1)%gas.length;\n    }\n}\n```\n\n\n\n## 7.双指针\n\n\n\n### 反转链表\n\n\n\n**题目描述**\n\n\n\n给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。\n\n\n\n**示例**\n\n\n\n```java\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n```\n\n\n\n思路：\n\n\n\n1、定义两个指针，第一个指针叫 pre，最初是指向 null 的。\n\n\n\n2、第二个指针 cur 指向 head，然后不断遍历 cur。\n\n\n\n3、每次迭代到 cur，都将 cur 的 next 指向 pre，然后 pre 和 cur 前进一位。\n\n\n\n4、都迭代完了(cur 变成 null 了)，pre 就是最后一个节点了。\n\n\n\n```java\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n\n        ListNode pre = null;\n        ListNode cur = head;\n        ListNode tmp = null;\n        while (cur != null) {\n            tmp = cur.next;\n            cur.next = pre;\n            pre = cur;\n            cur = tmp;\n        }\n\n        return pre;\n    }\n}\n```\n\n\n\n### 反转链表II\n\n\n\n**题目描述**\n\n\n\n给你单链表的头指针 head 和两个整数 left 和 right ，其中 left <= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。\n\n\n\n**示例**\n\n\n\n```java\n输入：head = [1,2,3,4,5], left = 2, right = 4\n输出：[1,4,3,2,5]\n```\n\n\n\n**思路**：双指针+头插法。\n\n\n\n```java\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode pre = dummy;\n        for (int i = 1; i < m; i++) {\n            pre = pre.next;\n        }\n        head = pre.next;\n        for (int i = m; i < n; i++) {\n            ListNode cur = head.next;\n            head.next = cur.next;\n            cur.next = pre.next;\n            pre.next = cur;\n        }\n\n        return dummy.next;\n    }\n}\n```\n\n\n\n### 删除链表倒数第n个节点\n\n\n\n**题目描述**\n\n\n\n给你一个链表，删除链表的倒数第 `n` 个结点，并且返回链表的头结点。\n\n\n\n**示例**\n\n\n\n```java\n输入：head = [1,2,3,4,5], n = 2\n输出：[1,2,3,5]\n```\n\n\n\n思路：使用快慢指针，快指针先走n步。\n\n\n\n```java\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode tmp = new ListNode(0); //技巧\n        tmp.next = head;\n\n        ListNode fast = tmp;\n        ListNode slow = tmp;\n\n        while (n-- > 0) {\n            fast = fast.next;\n        }\n\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        slow.next = slow.next.next;\n\n        return tmp.next;\n    }\n}\n```\n\n\n\n### 三数之和\n\n\n\n[题目链接open in new window](https://leetcode.cn/problems/3sum/)\n\n\n\n**题目描述**\n\n\n\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。\n\n\n\n注意：答案中不可以包含重复的三元组。\n\n\n\n**示例**\n\n\n\n```java\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n```\n\n\n\n**思路**：\n\n\n\n- 首先对数组进行排序，排序后固定一个数 nums[i]nums[i]，再使用左右指针指向 nums[i]nums[i]后面的两端，数字分别为 nums[L]nums[L] 和\n\n- nums[R]nums[R]，计算三个数的和 sumsum 判断是否满足为 00，满足则添加进结果集\n\n- 如果 nums[i]nums[i]大于 00，则三数之和必然无法等于 00，结束循环\n\n- 如果 nums[i]nums[i] == nums[i-1]nums[i−1]，则说明该数字重复，会导致结果重复，所以应该跳过\n\n- 当 sumsum == 00 时，nums[L]nums[L] == nums[L+1]nums[L+1] 则会导致结果重复，应该跳过，LL\n\n- 当 sumsum == 00 时，nums[R]nums[R] == nums[R-1]nums[R−1] 则会导致结果重复，应该跳过，R--R−−\n\n\n\n**参考代码**：\n\n\n\n```java\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        Arrays.sort(nums);\n\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > 0) { //最左边的数字大于0，则sum不会等于0，退出\n                break;\n            }\n            if (i > 0 && nums[i] == nums[i - 1]) { //去重复\n                continue;\n            }\n\n            int left = i + 1;\n            int right = nums.length - 1;\n\n            while (left < right) {\n                int sum = nums[i] + nums[left] + nums[right];\n                if (sum == 0) {\n                    res.add(Arrays.asList(nums[i], nums[left], nums[right])); ///array to list\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    left++;\n                    right--;\n                } else if (sum > 0) {\n                    right--;\n                } else {\n                    left++;\n                }\n            }\n        }\n\n        return res;\n    }\n}\n```\n\n\n\n### 环形链表\n\n\n\n[题目链接open in new window](https://leetcode.cn/problems/linked-list-cycle/)\n\n\n\n**题目描述**\n\n\n\n给你一个链表的头节点 head ，判断链表中是否有环。\n\n\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。\n\n\n\n如果链表中存在环 ，则返回 true 。 否则，返回 false 。\n\n\n\n**示例**\n\n\n\n```java\n输入：head = [3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n```\n\n\n\n**思路**\n\n\n\n快慢指针。快指针每次走两步，慢指针走一步，相当于慢指针不动，快指针每次走一步，如果是环形链表，则一定会相遇。\n\n\n\n```java\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null) {\n            return false;\n        }\n\n        ListNode quick = head;\n        ListNode slow = head;\n\n        while (quick != null && quick.next != null) {\n            slow = slow.next;\n            quick = quick.next.next;\n            \n            if (slow == quick) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n```\n\n\n\n### 环形链表II\n\n\n\n[题目链接open in new window](https://leetcode.cn/problems/linked-list-cycle-ii/)\n\n\n\n**题目描述**\n\n\n\n给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n\n\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n\n\n不允许修改 链表。\n\n\n\n**示例**\n\n\n\n```java\n输入：head = [3,2,0,-4], pos = 1\n输出：返回索引为 1 的链表节点\n解释：链表中有一个环，其尾部连接到第二个节点\n```\n\n\n\n**解题思路**\n\n\n\n方法一：头结点到入环结点的距离为a，入环结点到相遇结点的距离为b，相遇结点到入环结点的距离为c。然后，当fast以slow的两倍速度前进并和slow相遇时，fast走过的距离是s的两倍，即有等式：a+b+c+b = 2(a+b) ，可以得出 a = c ，所以说，让fast和slow分别从相遇结点和头结点同时同步长出发，他们的相遇结点就是入环结点。\n\n\n\n```java\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode fast = head;\n        ListNode slow = head;\n\n        while (true) {\n            if (fast == null || fast.next == null) {\n                return null;\n            }\n            fast = fast.next.next;\n            slow = slow.next;\n            if (fast == slow) {\n                break;\n            }\n        }\n\n        fast = head;\n \n        while (slow != fast) {\n            slow = slow.next;\n            fast = fast.next;\n        }\n\n        return fast;\n    }\n}\n```\n\n\n\n方法二：先算出环的大小n，快指针先走n步，然后快慢指针一起走，相遇的地方即是环的入口。\n\n\n\n```java\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n\t    //快慢指针找出环的大小\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            if (fast == slow) {\n                break;\n            }\n        }\n\n        if (fast == null || fast.next == null) {\n            return null;\n        }\n        \n        int cycleSize = 1;\n        while (fast.next != slow) {\n            cycleSize++;\n            fast = fast.next;\n        }\n\n        //快慢指针重新从链表首部出发，快指针先走sizeOfCycle步\n        //然后两个指针同时一起走，步长为1，相遇节点即是环的入口\n        fast = head;\n        slow = head;\n        while (cycleSize-- > 0) {\n            fast = fast.next;\n        }\n        while (fast != slow) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n\n        return fast;\n    }\n}\n```","tags":["算法","我要进大厂","面试"],"categories":["JAVA","面试","我要进大厂"]},{"title":"操作系统的IO原理","url":"/note/SYSTEM/OPERATE/操作系统的IO原理/","content":"\n\n\n\n\n本文来自阅读《操作系统之哲学原理》第六篇：IO原理篇；第19章：输入和输出\n\nxmind下载：[操作系统的IO原理.xmind](./操作系统的IO原理.assets/IO原理.xmind)\n\n![image-20230511141325442](操作系统的IO原理.assets/image-20230511141325442.png)\n\n","tags":["操作系统","IO原理"],"categories":["SYSTEM","OPERATE"]},{"title":"操作系统的基本原理","url":"/note/SYSTEM/OPERATE/操作系统的基本原理/","content":"\n\n\n\n\n[基础原理篇.xmind](./操作系统的基本原理.assets/基础原理篇.xmind)\n","tags":["操作系统"],"categories":["SYSTEM","OPERATE"]},{"title":"JUC中线程的基础知识","url":"/note/JAVA/JUC/JUC中线程的基础知识/","content":"\n\n\n创建线程的四种方式\n\n\n\n线程的状态\n\n- 中断：wait，notify，sleep\n\n\n\n线程的优先级和守护线程\n\n\n\n线程间的通信\n\n\n\n线程池和自定义线程池\n\n\n\n\n","tags":["线程基础","JUC"],"categories":["JAVA","JUC"]},{"title":"JUC并发之ThreadLocal","url":"/note/JAVA/JUC/JUC并发之ThreadLocal/","content":"\n![image-20230529221314809](JUC并发之ThreadLocal.assets/image-20230529221314809.png)\n\n本文还有xmind，配合xmind食用，味道更佳：[ThreadLocal.xmind](./\\JUC并发之ThreadLocal.assets/ThreadLocal.xmind)\n\n<img src=\"JUC并发之ThreadLocal.assets/image-20230509134256706.png\" alt=\"image-20230509134256706\" style=\"zoom: 67%;\" />\n\n**学习目标**\n\n- **了解ThreadLocal的介绍** \n- **了解ThreadLocal的内部结构**\n- **了解ThreadLocal的核心方法源码**\n- **了解ThreadLocalMap的源码**\n\n## ThreadLocal介绍\n\n### 官方介绍\n\n```java\n/**\n * This class provides thread-local variables.  These variables differ from\n * their normal counterparts in that each thread that accesses one (via its\n * {@code get} or {@code set} method) has its own, independently initialized\n * copy of the variable.  {@code ThreadLocal} instances are typically private\n * static fields in classes that wish to associate state with a thread (e.g.,\n * a user ID or Transaction ID).\n *\n * <p>For example, the class below generates unique identifiers local to each\n * thread.\n * A thread's id is assigned the first time it invokes {@code ThreadId.get()}\n * and remains unchanged on subsequent calls.\n * <pre>\n * import java.util.concurrent.atomic.AtomicInteger;\n *\n * public class ThreadId {\n *     // Atomic integer containing the next thread ID to be assigned\n *     private static final AtomicInteger nextId = new AtomicInteger(0);\n *\n *     // Thread local variable containing each thread's ID\n *     private static final ThreadLocal&lt;Integer&gt; threadId =\n *         new ThreadLocal&lt;Integer&gt;() {\n *             &#64;Override protected Integer initialValue() {\n *                 return nextId.getAndIncrement();\n *         }\n *     };\n *\n *     // Returns the current thread's unique ID, assigning it if necessary\n *     public static int get() {\n *         return threadId.get();\n *     }\n * }\n * </pre>\n * <p>Each thread holds an implicit reference to its copy of a thread-local\n * variable as long as the thread is alive and the {@code ThreadLocal}\n * instance is accessible; after a thread goes away, all of its copies of\n * thread-local instances are subject to garbage collection (unless other\n * references to these copies exist).\n *\n * @author  Josh Bloch and Doug Lea\n * @since   1.2\n */\npublic class ThreadLocal<T> {\n    ...\n```\n\n​\t从Java官方文档中的描述：ThreadLocal类用来提供线程内部的局部变量。这种变量在多线程环境下访问（通过get和set方法访问）时能保证各个线程的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程上下文。\n\n我们可以得知 ThreadLocal 的作用是：提供线程内的局部变量，不同的线程之间不会相互干扰，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或组件之间一些公共变量传递的复杂度。\n\n\n\n总结:\n1. 线程并发: 在多线程并发的场景下\n2. 传递数据: 我们可以通过ThreadLocal在同一线程，不同组件中传递公共变量\n3. 线程隔离: 每个线程的变量都是独立的，不会互相影响\n\n\n\n### 基本使用\n\n#### 常用方法\n\n​\t在使用之前,我们先来认识几个ThreadLocal的常用方法\n\n| 方法声明                  | 描述                       |\n| ------------------------- | -------------------------- |\n| ThreadLocal()             | 创建ThreadLocal对象        |\n| public void set( T value) | 设置当前线程绑定的局部变量 |\n| public T get()            | 获取当前线程绑定的局部变量 |\n| public void remove()      | 移除当前线程绑定的局部变量 |\n\n#### 使用案例\n\n \t我们来看下面这个案例\t, 感受一下ThreadLocal 线程隔离的特点： \n\n```java\npublic class MyDemo {\n    private String content;\n\n    private String getContent() {\n        return content;\n    }\n\n    private void setContent(String content) {\n        this.content = content;\n    }\n\n    public static void main(String[] args) {\n        MyDemo demo = new MyDemo();\n        for (int i = 0; i < 5; i++) {\n            Thread thread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    demo.setContent(Thread.currentThread().getName() + \"的数据\");\n                    System.out.println(\"-----------------------\");\n             \t\tSystem.out.println(Thread.currentThread().getName() + \"--->\" + demo.getContent());\n                }\n            });\n            thread.setName(\"线程\" + i);\n            thread.start();\n        }\n    }\n}\n```\n\n打印结果:\n\n![1574149020726](JUC并发之ThreadLocal.assets/002.png)\n\n​\t从结果可以看出多个线程在访问同一个变量的时候出现的异常，线程间的数据没有隔离。下面我们来看下采用 ThreadLocal 的方式来解决这个问题的例子。\n\n```java\npublic class MyDemo {\n\n    private static ThreadLocal<String> tl = new ThreadLocal<>();\n\n    private String content;\n\n    private String getContent() {\n        return tl.get();\n    }\n\n    private void setContent(String content) {\n         tl.set(content);\n    }\n\n    public static void main(String[] args) {\n        MyDemo demo = new MyDemo();\n        for (int i = 0; i < 5; i++) {\n            Thread thread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    demo.setContent(Thread.currentThread().getName() + \"的数据\");\n                    System.out.println(\"-----------------------\");\n                    System.out.println(Thread.currentThread().getName() + \"--->\" + demo.getContent());\n                }\n            });\n            thread.setName(\"线程\" + i);\n            thread.start();\n        }\n    }\n}\n```\n\n打印结果: \n\n​\t\t\t![1574149117289](JUC并发之ThreadLocal.assets/003.png)\n\n\n\n从结果来看，这样很好的解决了多线程之间数据隔离的问题，十分方便。\n\n\n\n## ThreadLocal的整体流程分析\n\n![image-20230510225925531](JUC并发之ThreadLocal.assets/image-20230510225925531.png)\n\n\n\n关键的三点\n\n- ThreadLocal<T> 中有一个静态内部类：ThreadLocalMap\n- ThreadLocalMap 中有一个静态内部类 Entry；维护了数组：Entry[] table\n  - 这个也是ThreadLocal的底层实现，用数组实现了一个map，也有hash冲突的解决，和扩容\n- 在set方法中有两个核心\n  - hash冲突是怎么解决的？\n  - 扩容的逻辑是怎么样的？\n\n\n\n\n\n\n## ThreadLocal的内部结构\n\n​\t通过以上的学习，我们对ThreadLocal的作用有了一定的认识。现在我们一起来看一下ThreadLocal的内部结构，探究它能够实现线程数据隔离的原理。\n\n### 老版的设计\n\n​\t如果我们不去看源代码的话，可能会猜测`ThreadLocal`是这样子设计的：每个`ThreadLocal`都创建一个`Map`，然后用线程作为`Map`的`key`，要存储的局部变量作为`Map`的`value`，这样就能达到各个线程的局部变量隔离的效果。这是最简单的设计方法，JDK最早期的`ThreadLocal` 确实是这样设计的，但现在早已不是了。\n\n![image-20230509105547606](JUC并发之ThreadLocal.assets/image-20230509105547606.png)\n\n### 现在的设计\n\n​\t但是，JDK后面优化了设计方案，在JDK8中 `ThreadLocal`的设计是：每个`Thread`维护一个`ThreadLocalMap`，这个Map的`key`是`ThreadLocal`实例本身，`value`才是真正要存储的值`Object`。\n\n具体的过程是这样的：\n\n​\t（1） 每个Thread线程内部都有一个Map (ThreadLocalMap)\n​\t（2） Map里面存储ThreadLocal对象（key）和线程的变量副本（value）\n​\t（3）Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。\n​\t（4）对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，互不干扰。\t\n\n![image-20230509105840948](JUC并发之ThreadLocal.assets/image-20230509105840948.png)\n\n### 这样设计的好处\n\n​\t这个设计与我们一开始说的设计刚好相反，这样设计有如下两个优势：\n\n（1） 这样设计之后每个`Map`存储的`Entry`数量就会变少。因为之前的存储数量由`Thread`的数量决定，现在是由`ThreadLocal`的数量决定。在实际运用当中，往往ThreadLocal的数量要少于Thread的数量。\n\n（2） 当`Thread`销毁之后，对应的`ThreadLocalMap`也会随之销毁，能减少内存的使用。\n\n\n\n## ThreadLocal的核心方法源码\n\n​\t基于ThreadLocal的内部结构，我们继续分析它的核心方法源码，更深入的了解其操作原理。\n\n除了构造方法之外， ThreadLocal对外暴露的方法有以下4个：\n\n| 方法声明                   | 描述                         |\n| -------------------------- | ---------------------------- |\n| protected T initialValue() | 返回当前线程局部变量的初始值 |\n| public void set( T value)  | 设置当前线程绑定的局部变量   |\n| public T get()             | 获取当前线程绑定的局部变量   |\n| public void remove()       | 移除当前线程绑定的局部变量   |\n\n​\t以下是这4个方法的详细源码分析(为了保证思路清晰, ThreadLocalMap部分暂时不展开,下一个知识点详解)\n\n### set方法\n\n**（1 ) 源码和对应的中文注释**\n\n```java\n  /**\n     * 设置当前线程对应的ThreadLocal的值\n     *\n     * @param value 将要保存在当前线程对应的ThreadLocal的值\n     */\n    public void set(T value) {\n        // 获取当前线程对象\n        Thread t = Thread.currentThread();\n        // 获取此线程对象中维护的ThreadLocalMap对象\n        ThreadLocalMap map = getMap(t);\n        // 判断map是否存在\n        if (map != null)\n            // 存在则调用map.set设置此实体entry\n            map.set(this, value);\n        else\n            // 1）当前线程Thread 不存在ThreadLocalMap对象\n            // 2）则调用createMap进行ThreadLocalMap对象的初始化\n            // 3）并将 t(当前线程)和value(t对应的值)作为第一个entry存放至ThreadLocalMap中\n            createMap(t, value);\n    }\n\n /**\n     * 获取当前线程Thread对应维护的ThreadLocalMap \n     * \n     * @param  t the current thread 当前线程\n     * @return the map 对应维护的ThreadLocalMap \n     */\n    ThreadLocalMap getMap(Thread t) {\n        return t.threadLocals;\n    }\n\t/**\n     *创建当前线程Thread对应维护的ThreadLocalMap \n     *\n     * @param t 当前线程\n     * @param firstValue 存放到map中第一个entry的值\n     */\n\tvoid createMap(Thread t, T firstValue) {\n        //这里的this是调用此方法的threadLocal\n        t.threadLocals = new ThreadLocalMap(this, firstValue);\n    }\n```\n\n**（2 )  代码执行流程**\n\n​\tA. 首先获取当前线程，并根据当前线程获取一个Map\n\n​\tB. 如果获取的Map不为空，则将参数设置到Map中（当前ThreadLocal的引用作为key）\n\n​\tC. 如果Map为空，则给该线程创建 Map，并设置初始值\n\n### get方法\n\n**（1 ) 源码和对应的中文注释**\n\n```java\n    /**\n     * 返回当前线程中保存ThreadLocal的值\n     * 如果当前线程没有此ThreadLocal变量，\n     * 则它会通过调用{@link #initialValue} 方法进行初始化值\n     *\n     * @return 返回当前线程对应此ThreadLocal的值\n     */\n    public T get() {\n        // 获取当前线程对象\n        Thread t = Thread.currentThread();\n        // 获取此线程对象中维护的ThreadLocalMap对象\n        ThreadLocalMap map = getMap(t);\n        // 如果此map存在\n        if (map != null) {\n            // 以当前的ThreadLocal 为 key，调用getEntry获取对应的存储实体e\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            // 对e进行判空 \n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                // 获取存储实体 e 对应的 value值\n                // 即为我们想要的当前线程对应此ThreadLocal的值\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        /*\n        \t初始化 : 有两种情况有执行当前代码\n        \t第一种情况: map不存在，表示此线程没有维护的ThreadLocalMap对象\n        \t第二种情况: map存在, 但是没有与当前ThreadLocal关联的entry\n         */\n        return setInitialValue();\n    }\n\n    /**\n     * 初始化\n     *\n     * @return the initial value 初始化后的值\n     */\n    private T setInitialValue() {\n        // 调用initialValue获取初始化的值\n        // 此方法可以被子类重写, 如果不重写默认返回null\n        T value = initialValue();\n        // 获取当前线程对象\n        Thread t = Thread.currentThread();\n        // 获取此线程对象中维护的ThreadLocalMap对象\n        ThreadLocalMap map = getMap(t);\n        // 判断map是否存在\n        if (map != null)\n            // 存在则调用map.set设置此实体entry\n            map.set(this, value);\n        else\n            // 1）当前线程Thread 不存在ThreadLocalMap对象\n            // 2）则调用createMap进行ThreadLocalMap对象的初始化\n            // 3）并将 t(当前线程)和value(t对应的值)作为第一个entry存放至ThreadLocalMap中\n            createMap(t, value);\n        // 返回设置的值value\n        return value;\n    }\n```\n\n**（2 )  代码执行流程** \n\n​\tA. 首先获取当前线程, 根据当前线程获取一个Map\n\n​\tB. 如果获取的Map不为空，则在Map中以ThreadLocal的引用作为key来在Map中获取对应的Entry e，否则转到D\n\n​\tC. 如果e不为null，则返回e.value，否则转到D\n\n​\tD. Map为空或者e为空，则通过initialValue函数获取初始值value，然后用ThreadLocal的引用和value作为firstKey和firstValue创建一个新的Map\n\n总结:  **先获取当前线程的 ThreadLocalMap 变量，如果存在则返回值，不存在则创建并返回初始值。**\n\n### remove方法\n\n**（1 ) 源码和对应的中文注释**\n\n```java\n /**\n     * 删除当前线程中保存的ThreadLocal对应的实体entry\n     */\n     public void remove() {\n        // 获取当前线程对象中维护的ThreadLocalMap对象\n         ThreadLocalMap m = getMap(Thread.currentThread());\n        // 如果此map存在\n         if (m != null)\n            // 存在则调用map.remove\n            // 以当前ThreadLocal为key删除对应的实体entry\n             m.remove(this);\n     }\n```\n\n**（2 )  代码执行流程**\n\n​\tA. 首先获取当前线程，并根据当前线程获取一个Map\n\n​\tB. 如果获取的Map不为空，则移除当前ThreadLocal对象对应的entry\n\n### **initialValue方法**\n\n```java\n/**\n  * 返回当前线程对应的ThreadLocal的初始值\n  \n  * 此方法的第一次调用发生在，当线程通过get方法访问此线程的ThreadLocal值时\n  * 除非线程先调用了set方法，在这种情况下，initialValue 才不会被这个线程调用。\n  * 通常情况下，每个线程最多调用一次这个方法。\n  *\n  * <p>这个方法仅仅简单的返回null {@code null};\n  * 如果程序员想ThreadLocal线程局部变量有一个除null以外的初始值，\n  * 必须通过子类继承{@code ThreadLocal} 的方式去重写此方法\n  * 通常, 可以通过匿名内部类的方式实现\n  *\n  * @return 当前ThreadLocal的初始值\n  */\nprotected T initialValue() {\n    return null;\n}\n\n```\n\n​\t此方法的作用是 返回该线程局部变量的初始值。\n\n（1） 这个方法是一个延迟调用方法，从上面的代码我们得知，在set方法还未调用而先调用了get方法时才执行，并且仅执行1次。\n\n（2）这个方法缺省实现直接返回一个``null``。\n\n（3）如果想要一个除null之外的初始值，可以重写此方法。（备注： 该方法是一个``protected``的方法，显然是为了让子类覆盖而设计的）\n\n\n\n\n## ThreadLocalMap源码分析\n\n​\t在分析ThreadLocal方法的时候，我们了解到ThreadLocal的操作实际上是围绕ThreadLocalMap展开的。ThreadLocalMap的源码相对比较复杂, 我们从以下三个方面进行讨论。\n\n\n\n### 基本结构\n\n​\tThreadLocalMap是ThreadLocal的内部类，没有实现Map接口，用独立的方式实现了Map的功能，其内部的Entry也是独立实现。\n\n![image-20230509110912228](JUC并发之ThreadLocal.assets/image-20230509110912228.png)\n\n**（1） 成员变量**\n\n```java\n    /**\n     * 初始容量 —— 必须是2的整次幂\n     */\n    private static final int INITIAL_CAPACITY = 16;\n\n    /**\n     * 存放数据的table，Entry类的定义在下面分析\n     * 同样，数组长度必须是2的整次幂。\n     */\n    private Entry[] table;\n\n    /**\n     * 数组里面entrys的个数，可以用于判断table当前使用量是否超过阈值。\n     */\n    private int size = 0;\n\n    /**\n     * 进行扩容的阈值，表使用量大于它的时候进行扩容。\n     */\n    private int threshold; // Default to 0\n    \n```\n\n​\t跟HashMap类似，INITIAL_CAPACITY代表这个Map的初始容量；table 是一个Entry 类型的数组，用于存储数据；size 代表表中的存储数目； threshold 代表需要扩容时对应 size 的阈值。\n\n\n\n**（2） 存储结构 - Entry**\n\n```java\n/*\n * Entry继承WeakReference，并且用ThreadLocal作为key.\n * 如果key为null(entry.get() == null)，意味着key不再被引用，\n * 因此这时候entry也可以从table中清除。\n */\nstatic class Entry extends WeakReference<ThreadLocal<?>> {\n    /** The value associated with this ThreadLocal. */\n    Object value;\n\n    Entry(ThreadLocal<?> k, Object v) {\n        super(k);\n        value = v;\n    }\n}\n```\n\n​\t 在ThreadLocalMap中，也是用Entry来保存K-V结构数据的。不过Entry中的key只能是ThreadLocal对象，这点在构造方法中已经限定死了。\n\n​\t另外，Entry继承WeakReference，也就是key（ThreadLocal）是弱引用，其目的是将ThreadLocal对象的生命周期和线程生命周期解绑。\n\n### 弱引用和内存泄漏\n\n​\t有些程序员在使用ThreadLocal的过程中会发现有内存泄漏的情况发生，就猜测这个内存泄漏跟Entry中使用了弱引用的key有关系。这个理解其实是不对的。\n\n​\t我们先来回顾这个问题中涉及的几个名词概念，再来分析问题。\n\n   **（1） 内存泄漏相关概念**\n\n- Memory overflow:内存溢出，没有足够的内存提供申请者使用。\n- Memory leak: 内存泄漏是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。内存泄漏的堆积终将导致内存溢出。\t\n\n**（2）  弱引用相关概念**\n\n​\tJava中的引用有4种类型： 强、软、弱、虚。当前这个问题主要涉及到强引用和弱引用：\n\n​\t**强引用（“Strong” Reference）**，就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾回收器就不会回收这种对象。\n\n​\t**弱引用（WeakReference）**，垃圾回收器一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。\n\n  \t\n\n**（3） 如果key使用强引用**\n\n​\t假设ThreadLocalMap中的key使用了强引用，那么会出现内存泄漏吗？\n\n​\t此时ThreadLocal的内存图（实线表示强引用）如下： \n\n![image-20230509111712240](JUC并发之ThreadLocal.assets/image-20230509111712240.png)\n\n\n\n​\t假设在业务代码中使用完ThreadLocal ，threadLocal Ref被回收了。\n\n​\t但是因为threadLocalMap的Entry强引用了threadLocal，造成threadLocal无法被回收。\n\n​\t在没有手动删除这个Entry以及CurrentThread依然运行的前提下，始终有强引用链 threadRef->currentThread->threadLocalMap->entry，Entry就不会被回收（Entry中包括了ThreadLocal实例和value），导致Entry内存泄漏。\n\n​\t也就是说，ThreadLocalMap中的key使用了强引用， 是无法完全避免内存泄漏的。\n\n**（5）如果key使用弱引用**\n\n​\t那么ThreadLocalMap中的key使用了弱引用，会出现内存泄漏吗？\n\n​\t此时ThreadLocal的内存图（实线表示强引用，虚线表示弱引用）如下： \n\n![image-20230509112052764](JUC并发之ThreadLocal.assets/image-20230509112052764.png)\n\n​\t\n\n​\t同样假设在业务代码中使用完ThreadLocal ，threadLocal Ref被回收了。\n\n​\t由于ThreadLocalMap只持有ThreadLocal的弱引用，没有任何强引用指向threadlocal实例, 所以threadlocal就可以顺利被gc回收，此时Entry中的key=null。\n\n​\t但是在没有手动删除这个Entry以及CurrentThread依然运行的前提下，也存在有强引用链 threadRef->currentThread->threadLocalMap->entry -> value ，value不会被回收， 而这块value永远不会被访问到了，导致value内存泄漏。\n\n​\t也就是说，ThreadLocalMap中的key使用了弱引用， 也有可能内存泄漏。\n\n**（6）出现内存泄漏的真实原因**\n\n​\t比较以上两种情况，我们就会发现，内存泄漏的发生跟ThreadLocalMap中的key是否使用弱引用是没有关系的。那么内存泄漏的的真正原因是什么呢？\n\n​\t细心的同学会发现，在以上两种内存泄漏的情况中，都有两个前提：\n\n \t1. 没有手动删除这个Entry\n \t2. CurrentThread依然运行\n\n   第一点很好理解，只要在使用完ThreadLocal，调用其remove方法删除对应的Entry，就能避免内存泄漏。\n\n​\t第二点稍微复杂一点， 由于ThreadLocalMap是Thread的一个属性，被当前线程所引用，所以它的生命周期跟Thread一样长。那么在使用完ThreadLocal的使用，如果当前Thread也随之执行结束，ThreadLocalMap自然也会被gc回收，从根源上避免了内存泄漏。\n\n​\t综上，**ThreadLocal内存泄漏的根源是**：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏。\n\n\n\n扩展：内存泄漏分为两部分：\n\n- 指向 Entry 的指针（也就是 ThreadLocal 对象）的内存泄漏\n- Entry 中Value 发生内存泄漏； \n- 针对第一种内存泄漏，使用弱引用就可以解决了。\n- 针对第二种内存泄漏，需要手动 remove 或者线程终结；\n\n\n\n**（7） 为什么使用弱引用**\n\n​\t根据刚才的分析, 我们知道了： 无论ThreadLocalMap中的key使用哪种类型引用都无法完全避免内存泄漏，跟使用弱引用没有关系。\n\n​\t要避免内存泄漏有两种方式：\n\n  1. 使用完ThreadLocal，调用其remove方法删除对应的Entry\n\n  2. 使用完ThreadLocal，当前Thread也随之运行结束\n\n\n\n相对第一种方式，第二种方式显然更不好控制，特别是使用线程池的时候，线程结束是不会销毁的。\n\n也就是说，只要记得在使用完ThreadLocal及时的调用remove，无论key是强引用还是弱引用都不会有问题。那么为什么key要用弱引用呢？\n\n事实上，在ThreadLocalMap中的set/getEntry方法中，会对key为null（也即是ThreadLocal为null）进行判断，如果为null的话，那么是会对value置为null的。\n\n这就意味着使用完ThreadLocal，CurrentThread依然运行的前提下，就算忘记调用remove方法，**弱引用比强引用可以多一层保障**：弱引用的ThreadLocal会被回收，对应的value在下一次ThreadLocalMap调用set,get,remove中的任一方法的时候会被清除，从而避免内存泄漏。\n\n\n\n###       hash冲突的解决\n\n​\thash冲突的解决是Map中的一个重要内容。我们以hash冲突的解决为线索，来研究一下ThreadLocalMap的核心源码。\n\n**（1） 首先从ThreadLocal的set() 方法入手**\n\n```java\n  public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocal.ThreadLocalMap map = getMap(t);\n        if (map != null)\n            //调用了ThreadLocalMap的set方法\n            map.set(this, value);\n        else\n            createMap(t, value);\n    }\n    \n    ThreadLocal.ThreadLocalMap getMap(Thread t) {\n        return t.threadLocals;\n    }\n\n    void createMap(Thread t, T firstValue) {\n        \t//调用了ThreadLocalMap的构造方法\n        t.threadLocals = new ThreadLocal.ThreadLocalMap(this, firstValue);\n    }\n```\n\n这个方法我们刚才分析过, 其作用是设置当前线程绑定的局部变量 : \n\n​\tA. 首先获取当前线程，并根据当前线程获取一个Map\n\n​\tB. 如果获取的Map不为空，则将参数设置到Map中（当前ThreadLocal的引用作为key）\n\n​\t\t**(这里调用了ThreadLocalMap的set方法)**\n\n​\tC. 如果Map为空，则给该线程创建 Map，并设置初始值\n\n​\t\t**(这里调用了ThreadLocalMap的构造方法)**\n\n\n\n这段代码有两个地方分别涉及到ThreadLocalMap的两个方法, 我们接着分析这两个方法。\n\n\n\n**（2）构造方法`ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue)**`\n\n```java\n /*\n  * firstKey : 本ThreadLocal实例(this)\n  * firstValue ： 要保存的线程本地变量\n  */\nThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {\n        //初始化table\n        table = new ThreadLocal.ThreadLocalMap.Entry[INITIAL_CAPACITY];\n        //计算索引(重点代码）\n        int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);\n        //设置值\n        table[i] = new ThreadLocal.ThreadLocalMap.Entry(firstKey, firstValue);\n        size = 1;\n        //设置阈值\n        setThreshold(INITIAL_CAPACITY);\n    }\n```\n\n​\t构造函数首先创建一个长度为16的Entry数组，然后计算出firstKey对应的索引，然后存储到table中，并设置size和threshold。\n\n​\t**重点分析**： `int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1)`。\n\na. 关于`firstKey.threadLocalHashCode`：\n\n```java\n \tprivate final int threadLocalHashCode = nextHashCode();\n    \n    private static int nextHashCode() {\n        return nextHashCode.getAndAdd(HASH_INCREMENT);\n    }\n//AtomicInteger是一个提供原子操作的Integer类，通过线程安全的方式操作加减,适合高并发情况下的使用\n    private static AtomicInteger nextHashCode =  new AtomicInteger();\n     //特殊的hash值\n    private static final int HASH_INCREMENT = 0x61c88647;\n```\n\n​\t这里定义了一个AtomicInteger类型，每次获取当前值并加上HASH_INCREMENT，`HASH_INCREMENT = 0x61c88647`,这个值跟斐波那契数列（黄金分割数）有关，其主要目的就是为了让哈希码能均匀的分布在2的n次方的数组里, 也就是Entry[] table中，这样做可以尽量避免hash冲突。\n\nb. 关于`& (INITIAL_CAPACITY - 1)`\n\n​\t计算hash的时候里面采用了hashCode & (size - 1)的算法，这相当于取模运算hashCode % size的一个更高效的实现。正是因为这种算法，我们要求size必须是2的整次幂，这也能保证在索引不越界的前提下，使得hash发生冲突的次数减小。\n\n**（3） ThreadLocalMap中的set方法**\n\n```java\nprivate void set(ThreadLocal<?> key, Object value) {\n        ThreadLocal.ThreadLocalMap.Entry[] tab = table;\n        int len = tab.length;\n        //计算索引(重点代码，刚才分析过了）\n        int i = key.threadLocalHashCode & (len-1);\n        /**\n         * 使用线性探测法查找元素（重点代码）\n         */\n        for (ThreadLocal.ThreadLocalMap.Entry e = tab[i];\n             e != null;\n             e = tab[i = nextIndex(i, len)]) {\n            ThreadLocal<?> k = e.get();\n            //ThreadLocal 对应的 key 存在，直接覆盖之前的值\n            if (k == key) {\n                e.value = value;\n                return;\n            }\n            // key为 null，但是值不为 null，说明之前的 ThreadLocal 对象已经被回收了，\n           // 当前数组中的 Entry 是一个陈旧（stale）的元素\n            if (k == null) {\n                //用新元素替换陈旧的元素，这个方法进行了不少的垃圾清理动作，防止内存泄漏\n                replaceStaleEntry(key, value, i);\n                return;\n            }\n        }\n    \n    \t//ThreadLocal对应的key不存在并且没有找到陈旧的元素，则在空元素的位置创建一个新的Entry。\n            tab[i] = new Entry(key, value);\n            int sz = ++size;\n            /**\n             * cleanSomeSlots用于清除那些e.get()==null的元素，\n             * 这种数据key关联的对象已经被回收，所以这个Entry(table[index])可以被置null。\n             * 如果没有清除任何entry,并且当前使用量达到了负载因子所定义(长度的2/3)，那么进行\t\t\t\t \n             * rehash（执行一次全表的扫描清理工作）\n             */\n            if (!cleanSomeSlots(i, sz) && sz >= threshold)\n                rehash();\n}\n\n /**\n     * 获取环形数组的下一个索引\n     */\n    private static int nextIndex(int i, int len) {\n        return ((i + 1 < len) ? i + 1 : 0);\n    }\n\n```\n\n​\t代码执行流程：\n\nA. 首先还是根据key计算出索引 i，然后查找i位置上的Entry，\n\nB. 若是Entry已经存在并且key等于传入的key，那么这时候直接给这个Entry赋新的value值,\n\nC. 若是Entry存在，但是key为null，则调用replaceStaleEntry来更换这个key为空的Entry,\n\nD. 不断循环检测，直到遇到为null的地方，这时候要是还没在循环过程中return，那么就在这个null的位置新建一个Entry，并且插入，同时size增加1。\n\n​    最后调用cleanSomeSlots，清理key为null的Entry，最后返回是否清理了Entry，接下来再判断sz 是否>= thresgold达到了rehash的条件，达到的话就会调用rehash函数执行一次全表的扫描清理。\n\n\n\n**重点分析** ： ThreadLocalMap使用`线性探测法`来解决哈希冲突的。\n\n​\t该方法一次探测下一个地址，直到有空的地址后插入，若整个空间都找不到空余的地址，则产生溢出。\n\n​\t举个例子，假设当前table长度为16，也就是说如果计算出来key的hash值为14，如果table[14]上已经有值，并且其key与当前key不一致，那么就发生了hash冲突，这个时候将14加1得到15，取table[15]进行判断，这个时候如果还是冲突会回到0，取table[0],以此类推，直到可以插入。\n\n​\t按照上面的描述，可以把Entry[]  table看成一个环形数组。\n\n\n\n### 线性探测法也叫开放定址法\n\n1. 开放定址法：当哈希表中某个位置已经被占用时，开放定址法会根据某种算法（例如二次探测、双重散列等）来计算新的位置，并继续查找，直到找到一个空闲位置为止。\n2. 线性探测法：是开放定址法的一种具体实现。\n\n\n\n### 扩容机制\n\n在 ThreadLocalMap set 方法最后两行\n\n```java\n/**\n * cleanSomeSlots用于清除那些e.get()==null的元素，\n * 这种数据key关联的对象已经被回收，所以这个Entry(table[index])可以被置null。\n * 如果没有清除任何entry,并且当前使用量达到了负载因子所定义(长度的2/3)，那么进行\t\t\t\t \n * rehash（执行一次全表的扫描清理工作）\n */\nif (!cleanSomeSlots(i, sz) && sz >= threshold)\n    rehash();\n```\n\n会尝试清理 slot 槽位（启发式清理），如果清理完之后的 slot 槽位，还是大于 threshold 定义长度\n\n就会进行 rehash()\n\n```java\nprivate void rehash() {\n    //清理过期Entry\n    expungeStaleEntries();\n\n    //扩容\n    if (size >= threshold - threshold / 4)\n        resize();\n}\n\n//清理过期Entry\nprivate void expungeStaleEntries() {\n    Entry[] tab = table;\n    int len = tab.length;\n    for (int j = 0; j < len; j++) {\n        Entry e = tab[j];\n        if (e != null && e.get() == null)\n            expungeStaleEntry(j);\n    }\n}\n```\n\nrehash() 包含两个操作\n\n- 全表清理（和启发式清理不一样）\n- 扩容 resize()\n\n```java\n\n        /**\n         * Double the capacity of the table.\n         */\n        private void resize() {\n            Entry[] oldTab = table;\n            int oldLen = oldTab.length;\n            int newLen = oldLen * 2;\n            Entry[] newTab = new Entry[newLen];\n            int count = 0;\n\n            for (int j = 0; j < oldLen; ++j) {\n                Entry e = oldTab[j];\n                if (e != null) {\n                    ThreadLocal<?> k = e.get();\n                    if (k == null) {\n                        e.value = null; // Help the GC\n                    } else {\n                        int h = k.threadLocalHashCode & (newLen - 1);\n                        while (newTab[h] != null)\n                            h = nextIndex(h, newLen);\n                        newTab[h] = e;\n                        count++;\n                    }\n                }\n            }\n\n            setThreshold(newLen);\n            size = count;\n            table = newTab;\n        }\n```\n\n扩容后的`newTab`的大小为老数组的两倍\n\n然后遍历老的table数组，散列方法重新计算位置，开放地址解决冲突，然后放到新的`newTab`\n\n遍历完成之后，`oldTab`中所有的`entry`数据都已经放入到`newTab`中了，然后table引用指向`newTab`\n\n![image-20230509115153827](JUC并发之ThreadLocal.assets/image-20230509115153827.png)\n\n","tags":["JUC","ThreadLocal"],"categories":["JAVA","JUC"]},{"title":"大厂面试之Redis篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之Redis篇/","content":"\n![image-20230526103013405](大厂面试之Redis篇.assets/image-20230524145314057.png)\n\n\n\n## 说说什么是Redis?\n\n\n\nRedis是一种基于键值对（key-value）的NoSQL数据库。\n\n比一般键值对数据库强大的地方，Redis中的value支持string（字符串）、hash（哈希）、 list（列表）、set（集合）、zset（有序集合）、Bitmaps（位图）、 HyperLogLog、GEO（地理信息定位）等多种数据结构，因此 Redis可以满足很多的应用场景。\n\n而且因为Redis会将所有数据都存放在内存中，所以它的读写性能非常出色。\n\n不仅如此，Redis还可以将内存的数据利用快照和日志的形式保存到硬盘上，这样在发生类似断电或者机器故障的时候，内存中的数据不会“丢失”。\n\n除了上述功能以外，Redis还提供了键过期、发布订阅、事务、流水线、Lua脚本等附加功能。\n\n总之，Redis是一款强大的性能利器。\n\n\n\n## Redis可以用来干什么？\n\n\n\n![img](大厂面试之Redis篇.assets/1676357911812-954d8bf0-b8c1-43a8-87a0-1ae82d3071c3.png)\n\n\n\n1、缓存\n\n\n\n这是Redis应用最广泛地方，基本所有的Web应用都会使用Redis作为缓存，来降低数据源压力，提高响应速度。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357931667-08a734be-cbc5-42c2-8e8b-509a7fbe409b.png)\n\n\n\n2、计数器 Redis天然支持计数功能，而且计数性能非常好，可以用来记录浏览量、点赞量等等。\n\n\n\n3、排行榜 Redis提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。\n\n\n\n4、社交网络 赞/踩、粉丝、共同好友/喜好、推送、下拉刷新。\n\n\n\n5、消息队列 Redis提供了发布订阅功能和阻塞队列的功能，可以满足一般消息队列功能。\n\n\n\n6、分布式锁 分布式环境下，利用Redis实现分布式锁，也是Redis常见的应用。\n\n\n\nRedis的应用一般会结合项目去问，以一个电商项目的用户服务为例：\n\n\n\n- Token存储：用户登录成功之后，使用Redis存储Token\n\n- 登录失败次数计数：使用Redis计数，登录失败超过一定次数，锁定账号\n\n- 地址缓存：对省市区数据的缓存\n\n- 分布式锁：分布式环境下登录、注册等操作加分布式锁\n\n- ……\n\n\n\n## Redis 有哪些数据结构？\n\n\n\n![img](大厂面试之Redis篇.assets/1676357936063-9e0cca5d-9b35-4b53-b0c7-cc4393da2a69.png)\n\n\n\n### **string**\n\n\n\n字符串最基础的数据结构。字符串类型的值实际可以是字符串（简单的字符串、复杂的字符串（例如JSON、XML））、数字 （整数、浮点数），甚至是二进制（图片、音频、视频），但是值最大不能超过512MB。\n\n\n\n字符串主要有以下几个典型使用场景：\n\n\n\n- 缓存功能\n\n- 计数\n\n- 共享Session\n\n- 限速\n\n\n\n### **hash**\n\n\n\n哈希类型是指键值本身又是一个键值对结构。\n\n\n\n哈希主要有以下典型应用场景：\n\n\n\n- 缓存用户信息\n\n- 缓存对象\n\n\n\n### **list**\n\n\n\n列表（list）类型是用来存储多个有序的字符串。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色\n\n\n\n列表主要有以下几种使用场景：\n\n\n\n- 消息队列\n\n- 文章列表\n\n\n\n### **set**\n\n\n\n集合（set）类型也是用来保存多个的字符串元素，但和列表类型不一 样的是，集合中不允许有重复元素，并且集合中的元素是无序的。\n\n\n\n集合主要有如下使用场景：\n\n\n\n- 标签（tag）\n\n- 共同关注\n\n\n\n### **sorted set**\n\n\n\n有序集合中的元素可以排序。但是它和列表使用索引下标作为排序依据不同的是，它给每个元素设置一个权重（score）作为排序的依据。\n\n\n\n有序集合主要应用场景：\n\n\n\n- 用户点赞统计\n\n- 用户排序\n\n\n\n## Redis为什么快呢？\n\n\n\nRedis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来说，性能是MySQL的⼏⼗倍。速度快的原因主要有⼏点：\n\n\n\n1、**完全基于内存操作**\n\n\n\n2、使⽤单线程，避免了线程切换和竞态产生的消耗\n\n\n\n3、基于⾮阻塞的IO多路复⽤机制\n\n\n\n4、C语⾔实现，优化过的数据结构，基于⼏种基础的数据结构，redis做了⼤量的优化，性能极⾼![img](大厂面试之Redis篇.assets/1676357940292-701c0890-0f17-44ce-9fbb-63932812a159.png)\n\n\n\n## 能说一下I/O多路复用吗？\n\n\n\n引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择：\n\n\n\n- 第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。\n\n- 第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。这种类似于为每一个用户创建一个进程或者- 线程处理连接。\n\n- 第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。\n\n\n\n第一种就是阻塞IO模型，第三种就是I/O复用模型。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357941942-e03bdd4d-c27c-4e5b-8371-32132b56a499.png)\n\n\n\nLinux系统有三种方式实现IO多路复用：select、poll和epoll。\n\n\n\n例如epoll方式是将用户socket对应的fd注册进epoll，然后epoll帮你监听哪些socket上有消息到达，这样就避免了大量的无用操作。此时的socket应该采用非阻塞模式。\n\n\n\n这样，整个过程只在进行select、poll、epoll这些调用的时候才会阻塞，收发客户消息是不会阻塞的，整个进程或者线程就被充分利用起来，这就是事件驱动，所谓的reactor模式。\n\n\n\n## Redis为什么早期选择单线程？\n\n\n\n官方解释：https://redis.io/topics/faq\n\n\n\n![image-20230511173147070](大厂面试之Redis篇.assets/image-20230511173147070.png)\n\n\n\n官方FAQ表示，因为Redis是基于内存的操作，CPU成为Redis的瓶颈的情况很少见，Redis的瓶颈最有可能是内存的大小或者网络限制。\n\n\n\n如果想要最大程度利用CPU，可以在一台机器上启动多个Redis实例。\n\n\n\nPS：网上有这样的回答，吐槽官方的解释有些敷衍，其实就是历史原因，开发者嫌多线程麻烦，后来这个CPU的利用问题就被抛给了使用者。\n\n\n\n同时FAQ里还提到了， Redis 4.0 之后开始变成多线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 Key 的删除等等。\n\n\n\n## Redis6.0使用多线程是怎么回事?\n\n\n\nRedis不是说用单线程的吗？怎么6.0成了多线程的？\n\n\n\nRedis6.0的多线程是用多线程来处理数据的**读写和协议解析**，但是Redis**执行命令**还是单线程的。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357944805-f384a2c3-e145-47ec-bb25-0dc10b3f3b30.png)\n\n\n\n这样做的⽬的是因为Redis的性能瓶颈在于⽹络IO⽽⾮CPU，使⽤多线程能提升IO读写的效率，从⽽整体提⾼Redis的性能。\n\n\n\n## Redis持久化⽅式有哪些？有什么区别？\n\n\n\nRedis持久化⽅案分为RDB和AOF两种。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357948424-bc727cff-089c-41d9-8ea9-4af8fa2c7128.png)\n\n\n\n### **RDB**\n\n\n\nRDB持久化是把当前进程数据生成**快照**保存到硬盘的过程，触发RDB持久化过程分为手动触发和自动触发。\n\n\n\nRDB⽂件是⼀个压缩的⼆进制⽂件，通过它可以还原某个时刻数据库的状态。由于RDB⽂件是保存在硬盘上的，所以即使Redis崩溃或者退出，只要RDB⽂件存在，就可以⽤它来恢复还原数据库的状态。\n\n\n\n手动触发分别对应save和bgsave命令:\n\n\n\n![img](大厂面试之Redis篇.assets/1676357949860-bc150df0-92da-4d3d-a2ca-7a6ae31869c8.png)\n\n\n\n- save命令：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。\n\n- bgsave命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。\n\n\n\n以下场景会自动触发RDB持久化：\n\n\n\n- 使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。\n\n- 如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点\n\n- 执行debug reload命令重新加载Redis时，也会自动触发save操作\n\n- 默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。\n\n\n\n### **AOF**\n\n\n\nAOF（append only file）持久化：以独立日志的方式记录每次写命令， 重启时再重新执行AOF文件中的命令达到恢复数据的目的。AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式。\n\n\n\nAOF的工作流程操作：命令写入 （append）、文件同步（sync）、文件重写（rewrite）、重启加载 （load）\n\n\n\n![img](大厂面试之Redis篇.assets/1676357951841-274eacc3-f01b-4e24-afaf-70504186398a.png)\n\n\n\n流程如下：\n\n\n\n1）所有的写入命令会追加到aof_buf（缓冲区）中。\n\n\n\n2）AOF缓冲区根据对应的策略向硬盘做同步操作。\n\n\n\n3）随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩 的目的。\n\n\n\n4）当Redis服务器重启时，可以加载AOF文件进行数据恢复。\n\n\n\n## RDB 和 AOF 各自有什么优缺点？\n\n\n\n### **RDB | 优点**\n\n\n\n1、只有一个紧凑的二进制文件 `dump.rdb`，非常适合备份、全量复制的场景。\n\n\n\n2、**容灾性好**，可以把RDB文件拷贝道远程机器或者文件系统张，用于容灾恢复。\n\n\n\n3、**恢复速度快**，RDB恢复数据的速度远远快于AOF的方式\n\n\n\n### **RDB | 缺点**\n\n\n\n1、**实时性低**，RDB 是间隔一段时间进行持久化，没法做到实时持久化/秒级持久化。如果在这一间隔事件发生故障，数据会丢失。\n\n\n\n2、**存在兼容问题**，Redis演进过程存在多个格式的RDB版本，存在老版本Redis无法兼容新版本RDB的问题。\n\n\n\n### **AOF | 优点**\n\n\n\n1、**实时性好**，aof 持久化可以配置 `appendfsync` 属性，有 `always`，每进行一次命令操作就记录到 aof 文件中一次。\n\n\n\n2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。\n\n\n\n### **AOF | 缺点**\n\n\n\n1、AOF 文件比 RDB **文件大**，且 **恢复速度慢**。\n\n\n\n2、**数据集大** 的时候，比 RDB **启动效率低**。\n\n\n\n## RDB和AOF如何选择？\n\n\n\n- 一般来说， 如果想达到足以媲美数据库的 **数据安全性**，应该 **同时使用两种持久化功能**。在这种情况下，当 Redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。\n\n- 如果 **可以接受数分钟以内的数据丢失**，那么可以 **只使用 RDB 持久化**。\n\n- 有很多用户都只使用 AOF 持久化，但并不推荐这种方式，因为定时生成 RDB 快照（snapshot）非常便于进行数据备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快，除此之外，使用 RDB 还可以避免 AOF 程序的 bug。\n\n- 如果只需要数据在服务器运行的时候存在，也可以不使用任何持久化方式。\n\n\n\n## Redis的数据恢复？\n\n\n\n当Redis发生了故障，可以从RDB或者AOF中恢复数据。\n\n\n\n恢复的过程也很简单，把RDB或者AOF文件拷贝到Redis的数据目录下，如果使用AOF恢复，配置文件开启AOF，然后启动redis-server即可。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357955586-2676e80b-708e-451c-a7f5-5dfd9a42ce9f.png)\n\n\n\n**Redis** 启动时加载数据的流程：\n\n\n\n1、AOF持久化开启且存在AOF文件时，优先加载AOF文件。\n\n\n\n2、AOF关闭或者AOF文件不存在时，加载RDB文件。\n\n\n\n3、加载AOF/RDB文件成功后，Redis启动成功。\n\n\n\n4、AOF/RDB文件存在错误时，Redis启动失败并打印错误信息。\n\n\n\n## Redis 4.0 的混合持久化了解吗？\n\n\n\n重启 Redis 时，我们很少使用 `RDB` 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 `RDB` 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。\n\n\n\n**Redis 4.0** 为了解决这个问题，带来了一个新的持久化选项——**混合持久化**。将 `rdb` 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是 **自持久化开始到持久化结束** 的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小：\n\n\n\n![img](大厂面试之Redis篇.assets/1676357958629-b7735226-e18e-4cc9-9c7d-456752a8fa24.png)\n\n\n\n于是在 Redis 重启的时候，可以先加载 `rdb` 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。\n\n\n\nRedis保证高可用主要有三种方式：主从、哨兵、集群。\n\n\n\n## 主从复制了解吗？\n\n\n\n![img](大厂面试之Redis篇.assets/1676357960513-496ebbe4-28b1-46cc-a749-ca0faf861a99.png)\n\n\n\n**主从复制**，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 **主节点(master)**，后者称为 **从节点(slave)**。且数据的复制是 **单向** 的，只能由主节点到从节点。Redis 主从复制支持 **主从同步** 和 **从从同步** 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。\n\n\n\n主从复制主要的作用?\n\n\n\n- **数据冗余：** 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。\n\n- **故障恢复：** 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 *(实际上是一种服务的冗余)*。\n\n- **负载均衡：** 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 *（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）*，分担服务器负载。尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。\n\n- **高可用基石：** 除了上述作用以外，主从复制还是哨兵和集群能够实施的 **基础**，因此说主从复制是 Redis 高可用的基础。\n\n\n\n## Redis主从有几种常见的拓扑结构？\n\n\n\nRedis的复制拓扑结构可以支持单层或多层复制关系，根据拓扑复杂性可以分为以下三种：一主一从、一主多从、树状主从结构。\n\n\n\n1、一主一从结构\n\n\n\n一主一从结构是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357962771-414cab0c-c3b9-4f05-8d7d-2b20aaffc83d.png)\n\n\n\n2、一主多从结构\n\n\n\n一主多从结构（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离（见图6-5）。对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357964539-1c6ac3ae-12f1-4f15-8d5f-faf6db7f5bde.png)\n\n\n\n3、树状主从结构\n\n\n\n树状主从结构（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357966450-81f8fc28-09a5-43a8-af1d-a9a37c4335e3.png)\n\n\n\n## Redis的主从复制原理了解吗？\n\n\n\nRedis主从复制的工作流程大概可以分为如下几步：\n\n\n\n![img](大厂面试之Redis篇.assets/1676357968253-f8ec31da-f2dc-484e-9585-c6b626c1e3b4.png)\n\n\n\n1、保存主节点（master）信息 这一步只是保存主节点信息，保存主节点的ip和port。\n\n\n\n2、主从建立连接 从节点（slave）发现新的主节点后，会尝试和主节点建立网络连接。\n\n\n\n3、发送ping命令 连接建立成功后从节点发送ping请求进行首次通信，主要是检测主从之间网络套接字是否可用、主节点当前是否可接受处理命令。\n\n\n\n4、权限验证 如果主节点要求密码验证，从节点必须正确的密码才能通过验证。\n\n\n\n5、同步数据集 主从复制连接正常通信后，主节点会把持有的数据全部发送给从节点。\n\n\n\n6、命令持续复制 接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。\n\n\n\n## 说说主从数据同步的方式？\n\n\n\nRedis在2.8及以上版本使用psync命令完成主从数据同步，同步过程分为：全量复制和部分复制。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357971220-fc34f191-5435-4576-b8f7-1ff4c704c955.png)\n\n\n\n**全量复制**一般用于初次复制场景，Redis早期支持的复制功能只有全量复制，它会把主节点全部数据一次性发送给从节点，当数据量较大时，会对主从节点和网络造成很大的开销。\n\n\n\n全量复制的完整运行流程如下：\n\n\n\n![img](大厂面试之Redis篇.assets/1676357972661-4a8d31c3-e8df-4503-bd6c-058f0f7d31b7.png)\n\n\n\n1、发送psync命令进行数据同步，由于是第一次进行复制，从节点没有复制偏移量和主节点的运行ID，所以发送psync-1。\n\n\n\n2、主节点根据psync-1解析出当前为全量复制，回复+FULLRESYNC响应。\n\n\n\n3、从节点接收主节点的响应数据保存运行ID和偏移量offset\n\n\n\n4、主节点执行bgsave保存RDB文件到本地\n\n\n\n5、主节点发送RDB文件给从节点，从节点把接收的RDB文件保存在本地并直接作为从节点的数据文件\n\n\n\n6、对于从节点开始接收RDB快照到接收完成期间，主节点仍然响应读写命令，因此主节点会把这期间写命令数据保存在复制客户端缓冲区内，当从节点加载完RDB文件后，主节点再把缓冲区内的数据发送给从节点，保证主从之间数据一致性。\n\n\n\n7、从节点接收完主节点传送来的全部数据后会清空自身旧数据\n\n\n\n8、从节点清空数据后开始加载RDB文件\n\n\n\n9、从节点成功加载完RDB后，如果当前节点开启了AOF持久化功能， 它会立刻做bgrewriteaof操作，为了保证全量复制后AOF持久化文件立刻可用。\n\n\n\n**部分复制**部分复制主要是Redis针对全量复制的过高开销做出的一种优化措施， 使用psync{runId}{offset}命令实现。当从节点（slave）正在复制主节点 （master）时，如果出现网络闪断或者命令丢失等异常情况时，从节点会向 主节点要求补发丢失的命令数据，如果主节点的复制积压缓冲区内存在这部分数据则直接发送给从节点，这样就可以保持主从节点复制的一致性。![img](大厂面试之Redis篇.assets/1676357975681-bdbfcc81-39dd-4eaf-820d-2ce13d9f11b8.png)\n\n\n\n1、当主从节点之间网络出现中断时，如果超过repl-timeout时间，主节点会认为从节点故障并中断复制连接\n\n\n\n2、主从连接中断期间主节点依然响应命令，但因复制连接中断命令无法发送给从节点，不过主节点内部存在的复制积压缓冲区，依然可以保存最近一段时间的写命令数据，默认最大缓存1MB。\n\n\n\n3、当主从节点网络恢复后，从节点会再次连上主节点\n\n\n\n4、当主从连接恢复后，由于从节点之前保存了自身已复制的偏移量和主节点的运行ID。因此会把它们当作psync参数发送给主节点，要求进行部分复制操作。\n\n\n\n5、主节点接到psync命令后首先核对参数runId是否与自身一致，如果一 致，说明之前复制的是当前主节点；之后根据参数offset在自身复制积压缓冲区查找，如果偏移量之后的数据存在缓冲区中，则对从节点发送+CONTINUE响应，表示可以进行部分复制。\n\n\n\n6、主节点根据偏移量把复制积压缓冲区里的数据发送给从节点，保证主从复制进入正常状态。\n\n\n\n## 主从复制存在哪些问题呢？\n\n\n\n主从复制虽好，但也存在一些问题：\n\n\n\n- 一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预。\n\n- 主节点的写能力受到单机的限制。\n\n- 主节点的存储能力受到单机的限制。\n\n\n\n第一个问题是Redis的高可用问题，第二、三个问题属于Redis的分布式问题。\n\n\n\n## Redis Sentinel（哨兵）了解吗？\n\n\n\n主从复制存在一个问题，没法完成自动故障转移。所以我们需要一个方案来完成自动故障转移，它就是Redis Sentinel（哨兵）。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357978322-fbe309c9-b325-4c21-8440-13787e428748.png)\n\n\n\nRedis Sentinel ，它由两部分组成，哨兵节点和数据节点：\n\n\n\n- **哨兵节点：** 哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的 Redis 节点，不存储数据，对数据节点进行监控。\n\n- **数据节点：** 主节点和从节点都是数据节点；\n\n\n\n在复制的基础上，哨兵实现了 **自动化的故障恢复** 功能，下面是官方对于哨兵功能的描述：\n\n\n\n- **监控（Monitoring）：** 哨兵会不断地检查主节点和从节点是否运作正常。\n\n- **自动故障转移（Automatic failover）：** 当 **主节点** 不能正常工作时，哨兵会开始 **自动故障转移操作**，它会将失效主节点的其中一个 **从节点升级为新的主节点**，并让其他从节点改为复制新的主节点。\n\n- **配置提供者（Configuration provider）：** 客户端在初始化时，通过连接哨兵来获得当前 Redis 服务的主节点地址。\n\n- **通知（Notification）：** 哨兵可以将故障转移的结果发送给客户端。\n\n\n\n其中，监控和自动故障转移功能，使得哨兵可以及时发现主节点故障并完成转移。而配置提供者和通知功能，则需要在与客户端的交互中才能体现。\n\n\n\n## Redis Sentinel（哨兵）实现原理知道吗？\n\n\n\n哨兵模式是通过哨兵节点完成对数据节点的监控、下线、故障转移。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357981748-e1e8d25b-a8f8-4aad-b7bd-ff9017c26cf2.png)\n\n\n\n-  **定时监控**\n  ![img](大厂面试之Redis篇.assets/1676357980307-219952de-1d96-43a8-b56d-14971a12ad0a.png) \n\n-  Redis Sentinel通过三个定时监控任务完成对各个节点发现和监控： \n\n- - 每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构\n\n- - 每隔2秒，每个Sentinel节点会向Redis数据节点的**sentinel**：hello 频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息\n\n- - 每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达\n\n-  **主观下线和客观下线**主观下线就是哨兵节点认为某个节点有问题，客观下线就是超过一定数量的哨兵节点认为主节点有问题。![img](大厂面试之Redis篇.assets/1676357983904-e701faec-a65f-4976-a71f-684f7f5b65ce.png) \n\n\n\n1、主观下线 每个Sentinel节点会每隔1秒对主节点、从节点、其他Sentinel节点发送ping命令做心跳检测，当这些节点超过 down-after-milliseconds没有进行有效回复，Sentinel节点就会对该节点做失败判定，这个行为叫做主观下线。\n\n\n\n2、客观下线 当Sentinel主观下线的节点是主节点时，该Sentinel节点会通过sentinel is- master-down-by-addr命令向其他Sentinel节点询问对主节点的判断，当超过 个数，Sentinel节点认为主节点确实有问题，这时该Sentinel节点会做出客观下线的决定\n\n\n\n-  **领导者Sentinel节点选举**Sentinel节点之间会做一个领导者选举的工作，选出一个Sentinel节点作为领导者进行故障转移的工作。Redis使用了Raft算法实现领导者选举。 \n\n-  **故障转移**\n  领导者选举出的Sentinel节点负责故障转移，过程如下：\n  ![img](大厂面试之Redis篇.assets/1676357986607-890712e2-3614-41d8-8c12-8dfe92bbd31b.png)\n  1、在从节点列表中选出一个节点作为新的主节点，这一步是相对复杂一些的一步\n  2、Sentinel领导者节点会对第一步选出来的从节点执行slaveof no one命令让其成为主节点\n  3、Sentinel领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点\n  4、Sentinel节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点 \n\n\n\n## 领导者Sentinel节点选举了解吗？\n\n\n\nRedis使用了Raft算法实 现领导者选举，大致流程如下：\n\n\n\n![img](大厂面试之Redis篇.assets/1676357988308-dd177d4c-d634-4645-8cc7-13f9351c6da9.png)\n\n\n\n1、每个在线的Sentinel节点都有资格成为领导者，当它确认主节点主观 下线时候，会向其他Sentinel节点发送sentinel is-master-down-by-addr命令， 要求将自己设置为领导者。\n\n\n\n2、收到命令的Sentinel节点，如果没有同意过其他Sentinel节点的sentinel is-master-down-by-addr命令，将同意该请求，否则拒绝。\n\n\n\n3、如果该Sentinel节点发现自己的票数已经大于等于max（quorum， num（sentinels）/2+1），那么它将成为领导者。\n\n\n\n4、如果此过程没有选举出领导者，将进入下一次选举。\n\n\n\n## 新的主节点是怎样被挑选出来的？\n\n\n\n选出新的主节点，大概分为这么几步：\n\n\n\n![img](大厂面试之Redis篇.assets/1676357991178-6de54651-8979-403c-9b6d-4dbd30d180e2.png)\n\n\n\n1、过滤：“不健康”（主观下线、断线）、5秒内没有回复过Sentinel节 点ping响应、与主节点失联超过down-after-milliseconds*10秒。\n\n\n\n2、选择slave-priority（从节点优先级）最高的从节点列表，如果存在则返回，不存在则继续。\n\n\n\n3、选择复制偏移量最大的从节点（复制的最完整），如果存在则返 回，不存在则继续。\n\n\n\n4、选择runid最小的从节点。\n\n\n\n## Redis 集群了解吗？\n\n\n\n前面说到了主从存在高可用和分布式的问题，哨兵解决了高可用的问题，而集群就是终极方案，一举解决高可用和分布式问题。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357993275-87209457-3152-4670-b118-ea136969688b.png)\n\n\n\n1、**数据分区：** 数据分区 *(或称数据分片)* 是集群最核心的功能。集群将数据分散到多个节点，一方面 突破了 Redis 单机内存大小的限制，**存储容量大大增加**；**另一方面** 每个主节点都可以对外提供读服务和写服务，**大大提高了集群的响应能力**。\n\n\n\n2、**高可用：** 集群支持主从复制和主节点的 **自动故障转移** *（与哨兵类似）*，当任一节点发生故障时，集群仍然可以对外提供服务。\n\n\n\n## 集群中数据如何分区？\n\n\n\n分布式的存储中，要把数据集按照分区规则映射到多个节点，常见的数据分区规则三种：\n\n\n\n![img](大厂面试之Redis篇.assets/1676357995086-e5f00bd4-ace4-4ddc-86f4-4f1a4b33e451.png)\n\n\n\n### 方案一：节点取余分区\n\n\n\n节点取余分区，非常好理解，使用特定的数据，比如Redis的键，或者用户ID之类，对响应的hash值取余：hash（key）%N，来确定数据映射到哪一个节点上。\n\n\n\n不过该方案最大的问题是，当节点数量变化时，如扩容或收缩节点，数据节点映射关 系需要重新计算，会导致数据的重新迁移。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357997219-aa27007d-dabc-4a2e-a8a7-e464fb73eb32.png)\n\n\n\n### 方案二：一致性哈希分区\n\n\n\n将整个 Hash 值空间组织成一个虚拟的圆环，然后将缓存节点的 IP 地址或者主机名做 Hash 取值后，放置在这个圆环上。当我们需要确定某一个 Key 需 要存取到哪个节点上的时候，先对这个 Key 做同样的 Hash 取值，确定在环上的位置，然后按照顺时针方向在环上“行走”，遇到的第一个缓存节点就是要访问的节点。\n\n\n\n比如说下面 这张图里面，Key 1 和 Key 2 会落入到 Node 1 中，Key 3、Key 4 会落入到 Node 2 中，Key 5 落入到 Node 3 中，Key 6 落入到 Node 4 中。\n\n\n\n![img](大厂面试之Redis篇.assets/1676357998826-145db0ac-cd63-4931-8bf1-fc1167f01b02.png)\n\n\n\n这种方式相比节点取余最大的好处在于加入和删除节点只影响哈希环中 相邻的节点，对其他节点无影响。\n\n\n\n但它还是存在问题：\n\n\n\n- 缓存节点在圆环上分布不平均，会造成部分缓存节点的压力较大\n\n- 当某个节点故障时，这个节点所要承担的所有访问都会被顺移到另一个节点上，会对后面这个节点造成力。\n\n\n\n### 方案三：虚拟槽分区\n\n\n\n这个方案 一致性哈希分区的基础上，引入了 **虚拟节点** 的概念。Redis 集群使用的便是该方案，其中的虚拟节点称为 **槽（slot）**。槽是介于数据和实际节点之间的虚拟概念，每个实际节点包含一定数量的槽，每个槽包含哈希值在一定范围内的数据。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358000877-4a37bfdd-1b56-4023-82fd-d8890a4f4a65.png)\n\n\n\n在使用了槽的一致性哈希分区中，槽是数据管理和迁移的基本单位。槽解耦了数据和实际节点 之间的关系，增加或删除节点对系统的影响很小。仍以上图为例，系统中有 `4` 个实际节点，假设为其分配 `16` 个槽(0-15)；\n\n\n\n- 槽 0-3 位于 node1；4-7 位于 node2；以此类推....\n\n\n\n如果此时删除 `node2`，只需要将槽 4-7 重新分配即可，例如槽 4-5 分配给 `node1`，槽 6 分配给 `node3`，槽 7 分配给 `node4`，数据在其他节点的分布仍然较为均衡。\n\n\n\n## 能说说Redis集群的原理吗？\n\n\n\nRedis集群通过数据分区来实现数据的分布式存储，通过自动故障转移实现高可用。\n\n\n\n### 集群创建\n\n\n\n数据分区是在集群创建的时候完成的。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358003277-20e4896c-0852-46e2-b4d6-d3b84166fb5b.png)\n\n\n\n**设置节点**Redis集群一般由多个节点组成，节点数量至少为6个才能保证组成完整高可用的集群。每个节点需要开启配置cluster-enabled yes，让Redis运行在集群模式下。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358007186-79bac799-da1e-41a5-ac23-e40bc2d95a27.png)\n\n\n\n**节点握手**节点握手是指一批运行在集群模式下的节点通过Gossip协议彼此通信， 达到感知对方的过程。节点握手是集群彼此通信的第一步，由客户端发起命 令：cluster meet{ip}{port}。完成节点握手之后，一个个的Redis节点就组成了一个多节点的集群。\n\n\n\n**分配槽（slot）**Redis集群把所有的数据映射到16384个槽中。每个节点对应若干个槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过 cluster addslots命令为节点分配槽。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358007221-c41a5dbf-2f6a-4cb9-892b-e815c3d35ac1.png)\n\n\n\n### 故障转移\n\n\n\nRedis集群的故障转移和哨兵的故障转移类似，但是Redis集群中所有的节点都要承担状态维护的任务。\n\n\n\n**故障发现**Redis集群内节点通过ping/pong消息实现节点通信，集群中每个节点都会定期向其他节点发送ping消息，接收节点回复pong 消息作为响应。如果在cluster-node-timeout时间内通信一直失败，则发送节 点会认为接收节点存在故障，把接收节点标记为主观下线（pfail）状态。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358009360-b4011f7d-39f0-45f9-9a79-8189f7f61411.png)\n\n\n\n当某个节点判断另一个节点主观下线后，相应的节点状态会跟随消息在集群内传播。通过Gossip消息传播，集群内节点不断收集到故障节点的下线报告。当 半数以上持有槽的主节点都标记某个节点是主观下线时。触发客观下线流程。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358011041-cbab41ad-32fe-4e92-8c57-30463e207541.png)\n\n\n\n**故障恢复**\n\n\n\n故障节点变为客观下线后，如果下线节点是持有槽的主节点则需要在它 的从节点中选出一个替换它，从而保证集群的高可用。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358013040-de71286d-bfb6-4210-bbe9-e90505f57142.png)\n\n\n\n1、资格检查 每个从节点都要检查最后与主节点断线时间，判断是否有资格替换故障 的主节点。\n\n\n\n2、准备选举时间 当从节点符合故障转移资格后，更新触发故障选举的时间，只有到达该 时间后才能执行后续流程。\n\n\n\n3、发起选举 当从节点定时任务检测到达故障选举时间（failover_auth_time）到达后，发起选举流程。\n\n\n\n4、选举投票 持有槽的主节点处理故障选举消息。投票过程其实是一个领导者选举的过程，如集群内有N个持有槽的主节 点代表有N张选票。由于在每个配置纪元内持有槽的主节点只能投票给一个 从节点，因此只能有一个从节点获得N/2+1的选票，保证能够找出唯一的从节点。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358015026-424352e4-ec39-4d94-9b47-e6d61513f8f5.png)\n\n\n\n5、替换主节点 当从节点收集到足够的选票之后，触发替换主节点操作。\n\n\n\n**部署Redis集群至少需要几个物理节点？**\n\n\n\n在投票选举的环节，故障主节点也算在投票数内，假设集群内节点规模是3主3从，其中有2 个主节点部署在一台机器上，当这台机器宕机时，由于从节点无法收集到 3/2+1个主节点选票将导致故障转移失败。这个问题也适用于故障发现环节。因此部署集群时所有主节点最少需要部署在3台物理机上才能避免单点问题。\n\n\n\n## 说说集群的伸缩？\n\n\n\nRedis集群提供了灵活的节点扩容和收缩方案，可以在不影响集群对外服务的情况下，为集群添加节点进行扩容也可以下线部分节点进行缩容。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358017202-93f54195-2406-4364-a213-c5381c6c69a7.png)\n\n\n\n其实，集群扩容和缩容的关键点，就在于槽和节点的对应关系，扩容和缩容就是将一部分`槽`和`数据`迁移给新节点。\n\n\n\n例如下面一个集群，每个节点对应若干个槽，每个槽对应一定的数据，如果希望加入1个节点希望实现集群扩容时，需要通过相关命令把一部分槽和内容迁移给新节点。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358018974-a654f3c7-7dd0-48cb-b5e4-1098cc401a3e.png)\n\n\n\n缩容也是类似，先把槽和数据迁移到其它节点，再把对应的节点下线。\n\n\n\n## Sentinel模式和集群模式有什么区别，分别有什么应用场景？\n\nSentinel模式是对单点Redis提供高可用，不能扩展存储空间，只是对单点Redis提供故障转移的功能。\n\n集群模式是分布式架构，是高可用的；同时使用了分片机制扩展了存储空间。\n\n目前公司中，一般都是使用集群模式，很少使用Sentinel模式。\n\n\n\n## 26.什么是缓存击穿、缓存穿透、缓存雪崩？\n\n\n\nPS:这是多年黄历的老八股了，一定要理解清楚。\n\n\n\n### 缓存击穿\n\n\n\n一个并发访问量比较大的key在某个时间过期，导致所有的请求直接打在DB上。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358022256-fac5bf65-df2e-4b00-950e-32802c669f99.png)\n\n\n\n解决⽅案：\n\n\n\n1、加锁更新，⽐如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写⼊缓存，再返回给⽤户，这样后⾯的请求就可以从缓存中拿到数据了。\n\n![img](大厂面试之Redis篇.assets/1676358023646-e1604997-aefe-4766-ad7f-37fcea643d85.png)\n\n\n\n2、将过期时间组合写在value中，通过异步的⽅式不断的刷新过期时间，防⽌此类现象。\n\n\n\n### 缓存穿透\n\n\n\n缓存穿透指的查询缓存和数据库中都不存在的数据，这样每次请求直接打到数据库，就好像缓存不存在一样。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358025914-91cb6f85-f76e-4a00-bedd-e21097f3aff6.png)\n\n\n\n缓存穿透将导致不存在的数据每次请求都要到存储层去查询，失去了缓存保护后端存储的意义。\n\n\n\n缓存穿透可能会使后端存储负载加大，如果发现大量存储层空命中，可能就是出现了缓存穿透问题。\n\n\n\n缓存穿透可能有两种原因：\n\n\n\n1、自身业务代码问题\n\n\n\n2、恶意攻击，爬虫造成空命中\n\n\n\n它主要有两种解决办法：\n\n\n\n**缓存空值/默认值**\n\n\n\n一种方式是在数据库不命中之后，把一个空对象或者默认值保存到缓存，之后再访问这个数据，就会从缓存中获取，这样就保护了数据库。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358051741-940ee42f-b150-46be-a375-e86356695809.png)\n\n\n\n缓存空值有两大问题：\n\n\n\n1、空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间（如果是攻击，问题更严重），比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。\n\n\n\n2、缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致。这时候可以利用消息队列或者其它异步方式清理缓存中的空对象。\n\n\n\n**布隆过滤器**\n\n\n\n除了缓存空对象，我们还可以在存储和缓存之前，加一个布隆过滤器，做一层过滤。\n\n\n\n布隆过滤器里会保存数据是否存在，如果判断数据不不能再，就不会访问存储。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358053666-c05a6f01-ee7d-4969-8842-90f9a3ab40c5.png)\n\n\n\n两种解决方案的对比：\n\n\n\n![img](大厂面试之Redis篇.assets/1676358055414-43b3405a-b2f7-4c11-850a-8fe99d54f7da.png)\n\n\n\n### 缓存雪崩\n\n\n\n某⼀时刻发⽣⼤规模的缓存失效的情况，例如缓存服务宕机、大量key在同一时间过期，这样的后果就是⼤量的请求进来直接打到DB上，可能导致整个系统的崩溃，称为雪崩。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358057194-0e56aa6f-008c-4f90-a5bd-10cb5c3224fe.png)\n\n\n\n缓存雪崩是三大缓存问题里最严重的一种，我们来看看怎么预防和处理。\n\n\n\n- **提高缓存可用性**\n\n\n\n1、集群部署：通过集群来提升缓存的可用性，可以利用Redis本身的Redis Cluster或者第三方集群方案如Codis等。\n\n\n\n2、多级缓存：设置多级缓存，第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。\n\n\n\n- **过期时间**\n\n\n\n1、均匀过期：为了避免大量的缓存在同一时间过期，可以把不同的 key 过期时间随机生成，避免过期时间太过集中。\n\n\n\n2、热点数据永不过期。\n\n\n\n- **熔断降级**\n\n\n\n1、服务熔断：当缓存服务器宕机或超时响应时，为了防止整个系统出现雪崩，暂时停止业务服务访问缓存系统。\n\n\n\n2、服务降级：当出现大量缓存失效，而且处在高并发高负荷的情况下，在业务系统内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的 fallback（退路）错误处理信息。\n\n\n\n## 27.能说说布隆过滤器吗？\n\n\n\n布隆过滤器，它是一个连续的数据结构，每个存储位存储都是一个`bit`，即`0`或者`1`, 来标识数据是否存在。\n\n\n\n存储数据的时时候，使用K个不同的哈希函数将这个变量映射为bit列表的的K个点，把它们置为1。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358059389-9eca7a20-a059-40a4-a458-2dc9776ca7d7.png)\n\n\n\n我们判断缓存key是否存在，同样，K个哈希函数，映射到bit列表上的K个点，判断是不是1：\n\n\n\n- 如果全不是1，那么key不存在；\n\n- 如果都是1，也只是表示key可能存在。\n\n\n\n布隆过滤器也有一些缺点：\n\n\n\n1、它在判断元素是否在集合中时是有一定错误几率，因为哈希算法有一定的碰撞的概率。\n\n\n\n2、不支持删除元素。\n\n\n\n## 28.如何保证缓存和数据库数据的⼀致性？\n\n\n\n根据CAP理论，在保证可用性和分区容错性的前提下，无法保证一致性，所以缓存和数据库的绝对一致是不可能实现的，只能尽可能保存缓存和数据库的最终一致性。\n\n\n\n### 选择合适的缓存更新策略\n\n\n\n**1、删除缓存而不是更新缓存**\n\n\n\n当一个线程对缓存的key进行写操作的时候，如果其它线程进来读数据库的时候，读到的就是脏数据，产生了数据不一致问题。\n\n\n\n相比较而言，删除缓存的速度比更新缓存的速度快很多，所用时间相对也少很多，读脏数据的概率也小很多。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358062268-a8c6e24a-90dd-4ec1-bb53-d4518984bf07.png)\n\n\n\n**2、先更数据，后删缓存**\n\n\n\n先更数据库还是先删缓存？这是一个问题。\n\n\n\n更新数据，耗时可能在删除缓存的百倍以上。在缓存中不存在对应的key，数据库又没有完成更新的时候，如果有线程进来读取数据，并写入到缓存，那么在更新成功之后，这个key就是一个脏数据。\n\n\n\n毫无疑问，先删缓存，再更数据库，缓存中key不存在的时间的时间更长，有更大的概率会产生脏数据。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358063739-061b60d7-e79c-4033-baca-6f9e88b93419.png)目前最流行的缓存读写策略cache-aside-pattern就是采用先更数据库，再删缓存的方式。\n\n\n\n### 缓存不一致处理\n\n\n\n如果不是并发特别高，对缓存依赖性很强，其实一定程序的不一致是可以接受的。\n\n\n\n但是如果对一致性要求比较高，那就得想办法保证缓存和数据库中数据一致。\n\n\n\n缓存和数据库数据不一致常见的两种原因：\n\n\n\n- 缓存key删除失败\n\n- 并发导致写入了脏数据\n\n\n\n![img](大厂面试之Redis篇.assets/1676358065302-a0c3c047-4cae-4b7d-80de-d724af90f74a.png)\n\n\n\n**消息队列保证key被删除**可以引入消息队列，把要删除的key或者删除失败的key丢尽消息队列，利用消息队列的重试机制，重试删除对应的key。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358066991-a4d69dcc-15c0-4dff-a6bf-450bc926e2ee.png)\n\n\n\n这种方案看起来不错，缺点是对业务代码有一定的侵入性。\n\n\n\n**数据库订阅+消息队列保证key被删除**可以用一个服务（比如阿里的 canal）去监听数据库的binlog，获取需要操作的数据。\n\n\n\n然后用一个公共的服务获取订阅程序传来的信息，进行缓存删除操作。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358068763-ba0591db-0b60-4d15-9e46-054bc843e478.png)\n\n\n\n这种方式降低了对业务的侵入，但其实整个系统的复杂度是提升的，适合基建完善的大厂。\n\n\n\n**延时双删防止脏数据**还有一种情况，是在缓存不存在的时候，写入了脏数据，这种情况在先删缓存，再更数据库的缓存更新策略下发生的比较多，解决方案是延时双删。\n\n\n\n简单说，就是在第一次删除缓存之后，过了一段时间之后，再次删除缓存。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358070316-422f2470-9aa6-4623-9cfd-dfb996e66ab6.png)\n\n\n\n这种方式的延时时间设置需要仔细考量和测试。\n\n\n\n**设置缓存过期时间兜底**\n\n\n\n这是一个朴素但是有用的办法，给缓存设置一个合理的过期时间，即使发生了缓存数据不一致的问题，它也不会永远不一致下去，缓存过期的时候，自然又会恢复一致。\n\n\n\n## 29.如何保证本地缓存和分布式缓存的一致？\n\n\n\nPS:这道题面试很少问，但实际工作中很常见。\n\n\n\n在日常的开发中，我们常常采用两级缓存：本地缓存+分布式缓存。\n\n\n\n所谓本地缓存，就是对应服务器的内存缓存，比如Caffeine，分布式缓存基本就是采用Redis。\n\n\n\n那么问题来了，本地缓存和分布式缓存怎么保持数据一致？\n\n\n\n![img](大厂面试之Redis篇.assets/1676358073717-299c0290-8921-4083-a79c-9b91d395ed91.png)\n\n\n\nRedis缓存，数据库发生更新，直接删除缓存的key即可，因为对于应用系统而言，它是一种中心化的缓存。\n\n\n\n但是本地缓存，它是非中心化的，散落在分布式服务的各个节点上，没法通过客户端的请求删除本地缓存的key，所以得想办法通知集群所有节点，删除对应的本地缓存key。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358075657-da6e3496-a2b0-4bcc-b448-901b6fc154ce.png)\n\n\n\n可以采用消息队列的方式：\n\n\n\n1、采用Redis本身的Pub/Sub机制，分布式集群的所有节点订阅删除本地缓存频道，删除Redis缓存的节点，同事发布删除本地缓存消息，订阅者们订阅到消息后，删除对应的本地key。但是Redis的发布订阅不是可靠的，不能保证一定删除成功。\n\n\n\n2、引入专业的消息队列，比如RocketMQ，保证消息的可靠性，但是增加了系统的复杂度。\n\n\n\n3、设置适当的过期时间兜底，本地缓存可以设置相对短一些的过期时间。\n\n\n\n## 30.怎么处理热key？\n\n\n\n**什么是热Key？**所谓的热key，就是访问频率比较的key。\n\n\n\n比如，热门新闻事件或商品，这类key通常有大流量的访问，对存储这类信息的 Redis来说，是不小的压力。\n\n\n\n假如Redis集群部署，热key可能会造成整体流量的不均衡，个别节点出现OPS过大的情况，极端情况下热点key甚至会超过 Redis本身能够承受的OPS。\n\n\n\n**怎么处理热key？**\n\n\n\n![img](大厂面试之Redis篇.assets/1676358077809-ef759e84-8d0b-4d53-903f-4a9c95aa96b3.png)\n\n\n\n对热key的处理，最关键的是对热点key的监控，可以从这些端来监控热点key:\n\n\n\n1、客户端 客户端其实是距离key“最近”的地方，因为Redis命令就是从客户端发出的，例如在客户端设置全局字典（key和调用次数），每次调用Redis命令时，使用这个字典进行记录。\n\n\n\n2、代理端 像Twemproxy、Codis这些基于代理的Redis分布式架构，所有客户端的请求都是通过代理端完成的，可以在代理端进行收集统计。\n\n\n\n3、Redis服务端 使用monitor命令统计热点key是很多开发和运维人员首先想到，monitor命令可以监控到Redis执行的所有命令。\n\n\n\n只要监控到了热key，对热key的处理就简单了：\n\n\n\n1、把热key打散到不同的服务器，降低压⼒\n\n\n\n2、加⼊⼆级缓存，提前加载热key数据到内存中，如果redis宕机，⾛内存查询\n\n\n\n## 31.缓存预热怎么做呢？\n\n\n\n所谓缓存预热，就是提前把数据库里的数据刷到缓存里，通常有这些方法：\n\n\n\n1、直接写个缓存刷新页面或者接口，上线时手动操作\n\n\n\n2、数据量不大，可以在项目启动的时候自动进行加载\n\n\n\n3、定时任务刷新缓存.\n\n\n\n## 32.热点key重建？问题？解决？\n\n\n\n开发的时候一般使用“缓存+过期时间”的策略，既可以加速数据读写，又保证数据的定期更新，这种模式基本能够满足绝大部分需求。\n\n\n\n但是有两个问题如果同时出现，可能就会出现比较大的问题：\n\n\n\n- 当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。\n\n- 重建缓存不能在短时间完成，可能是一个复杂计算，例如复杂的 SQL、多次IO、多个依赖等。在缓存失效的瞬间，有大量线程来重建缓存，造成后端负载加大，甚至可能会让应用崩溃。\n\n\n\n**怎么处理呢？**\n\n\n\n要解决这个问题也不是很复杂，解决问题的要点在于：\n\n\n\n- 减少重建缓存的次数。\n\n- 数据尽可能一致。\n\n- 较少的潜在危险。\n\n\n\n所以一般采用如下方式：\n\n\n\n1、互斥锁（mutex key） 这种方法只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。\n\n\n\n2、永远不过期 “永远不过期”包含两层意思：\n\n\n\n从缓存层面来看，确实没有设置过期时间，所以不会出现热点key过期后产生的问题，也就是“物理”不过期。\n\n\n\n从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去构建缓存。\n\n\n\n## 33.无底洞问题吗？如何解决？\n\n\n\n**什么是无底洞问题？**\n\n\n\n2010年，Facebook的Memcache节点已经达到了3000个，承载着TB级别的缓存数据。但开发和运维人员发现了一个问题，为了满足业务要求添加了大量新Memcache节点，但是发现性能不但没有好转反而下降了，当时将这 种现象称为缓存的“**无底洞**”现象。\n\n\n\n那么为什么会产生这种现象呢?\n\n\n\n通常来说添加节点使得Memcache集群 性能应该更强了，但事实并非如此。键值数据库由于通常采用哈希函数将 key映射到各个节点上，造成key的分布与业务无关，但是由于数据量和访问量的持续增长，造成需要添加大量节点做水平扩容，导致键值分布到更多的 节点上，所以无论是Memcache还是Redis的分布式，批量操作通常需要从不同节点上获取，相比于单机批量操作只涉及一次网络操作，分布式批量操作会涉及多次网络时间。\n\n\n\n**无底洞问题如何优化呢？**\n\n\n\n先分析一下无底洞问题：\n\n\n\n- 客户端一次批量操作会涉及多次网络操作，也就意味着批量操作会随着节点的增多，耗时会不断增大。\n\n- 网络连接数变多，对节点的性能也有一定影响。\n\n\n\n常见的优化思路如下：\n\n\n\n- 命令本身的优化，例如优化操作语句等。\n\n- 减少网络通信次数。\n\n- 降低接入成本，例如客户端使用长连/连接池、NIO等。\n\n\n\n## 34.Redis报内存不足怎么处理？\n\n\n\nRedis 内存不足有这么几种处理方式：\n\n\n\n- 修改配置文件 redis.conf 的 maxmemory 参数，增加 Redis 可用内存\n\n- 也可以通过命令set maxmemory动态设置内存上限\n\n- 修改内存淘汰策略，及时释放内存空间\n\n- 使用 Redis 集群模式，进行横向扩容。\n\n\n\n## 35.Redis的过期数据回收策略有哪些？\n\n\n\nRedis主要有2种过期数据回收策略：\n\n\n\n![img](大厂面试之Redis篇.assets/1676358082004-332ebb99-fd8b-4450-a436-b3ca3652564e.png)\n\n\n\n**惰性删除**\n\n\n\n惰性删除指的是当我们查询key的时候才对key进⾏检测，如果已经达到过期时间，则删除。显然，他有⼀个缺点就是如果这些过期的key没有被访问，那么他就⼀直⽆法被删除，⽽且⼀直占⽤内存。\n\n\n\n**定期删除**\n\n\n\n定期删除指的是Redis每隔⼀段时间对数据库做⼀次检查，删除⾥⾯的过期key。由于不可能对所有key去做轮询来删除，所以Redis会每次随机取⼀些key去做检查和删除。\n\n\n\n## 36.Redis有哪些内存溢出控制/内存淘汰策略？\n\n\n\nRedis所用内存达到maxmemory上限时会触发相应的溢出控制策略，Redis支持六种策略：\n\n\n\n![img](大厂面试之Redis篇.assets/1676358083740-4191418b-dbd8-4ba6-97d5-252e3567c23d.png)\n\n\n\n1、`noeviction`：默认策略，不会删除任何数据，拒绝所有写入操作并返 回客户端错误信息，此 时Redis只响应读操作。\n\n\n\n2、`volatile-lru`：根据LRU算法删除设置了超时属性（expire）的键，直 到腾出足够空间为止。如果没有可删除的键对象，回退到noeviction策略。\n\n\n\n3、`allkeys-lru`：根据LRU算法删除键，不管数据有没有设置超时属性， 直到腾出足够空间为止。\n\n\n\n4、`allkeys-random`：随机删除所有键，直到腾出足够空间为止。\n\n\n\n5、`volatile-random`：随机删除过期键，直到腾出足够空间为止。\n\n\n\n6、`volatile-ttl`：根据键值对象的ttl属性，删除最近将要过期数据。如果 没有，回退到noeviction策略。\n\n\n\n## 37.Redis阻塞？怎么解决？\n\n\n\nRedis发生阻塞，可以从以下几个方面排查：\n\n\n\n![img](大厂面试之Redis篇.assets/1676358085937-8e75deb6-993a-4627-b2e2-763553e949b4.png)\n\n\n\n**API或数据结构使用不合理**\n\n\n\n通常Redis执行命令速度非常快，但是不合理地使用命令，可能会导致执行速度很慢，导致阻塞，对于高并发的场景，应该尽量避免在大对象上执行算法复杂 度超过O（n）的命令。\n\n\n\n对慢查询的处理分为两步：\n\n\n\n1、发现慢查询：slowlog get{n}命令可以获取最近 的n条慢查询命令；\n\n\n\n2、发现慢查询后，可以从两个方向去优化慢查询：1）修改为低算法复杂度的命令，如hgetall改为hmget等，禁用keys、sort等命 令 2）调整大对象：缩减大对象数据或把大对象拆分为多个小对象，防止一次命令操作过多的数据。\n\n\n\n**CPU饱和的问题**\n\n\n\n单线程的Redis处理命令时只能使用一个CPU。而CPU饱和是指Redis单核CPU使用率跑到接近100%。\n\n\n\n针对这种情况，处理步骤一般如下：\n\n\n\n1、判断当前Redis并发量是否已经达到极限，可以使用统计命令redis-cli-h{ip}-p{port}--stat获取当前 Redis使用情况\n\n\n\n2、如果Redis的请求几万+，那么大概就是Redis的OPS已经到了极限，应该做集群化水品扩展来分摊OPS压力\n\n\n\n3、如果只有几百几千，那么就得排查命令和内存的使用\n\n\n\n**持久化相关的阻塞**\n\n\n\n对于开启了持久化功能的Redis节点，需要排查是否是持久化导致的阻塞。\n\n\n\n1、fork阻塞 fork操作发生在RDB和AOF重写时，Redis主线程调用fork操作产生共享 内存的子进程，由子进程完成持久化文件重写工作。如果fork操作本身耗时过长，必然会导致主线程的阻塞。\n\n\n\n2、AOF刷盘阻塞 当我们开启AOF持久化功能时，文件刷盘的方式一般采用每秒一次，后台线程每秒对AOF文件做fsync操作。当硬盘压力过大时，fsync操作需要等 待，直到写入完成。如果主线程发现距离上一次的fsync成功超过2秒，为了 数据安全性它会阻塞直到后台线程执行fsync操作完成。\n\n\n\n3、HugePage写操作阻塞 对于开启Transparent HugePages的 操作系统，每次写命令引起的复制内存页单位由4K变为2MB，放大了512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。\n\n\n\n## 38.大key问题了解吗？\n\n\n\nRedis使用过程中，有时候会出现大key的情况， 比如：\n\n\n\n- 单个简单的key存储的value很大，size超过10KB\n\n- hash， set，zset，list 中存储过多的元素（以万为单位）\n\n\n\n**大key会造成什么问题呢？**\n\n\n\n- 客户端耗时增加，甚至超时\n\n- 对大key进行IO操作时，会严重占用带宽和CPU\n\n- 造成Redis集群中数据倾斜\n\n- 主动删除、被动删等，可能会导致阻塞\n\n\n\n**如何找到大key?**\n\n\n\n- bigkeys命令：使用bigkeys命令以遍历的方式分析Redis实例中的所有Key，并返回整体统计信息与每个数据类型中Top1的大Key\n\n- redis-rdb-tools：redis-rdb-tools是由Python写的用来分析Redis的rdb快照文件用的工具，它可以把rdb快照文件生成json文件或者生成报表用来分析Redis的使用详情。\n\n\n\n**如何处理大key?**\n\n\n\n![img](大厂面试之Redis篇.assets/1676358088950-07608c5b-a11e-4db3-ad0b-bfb9b3721912.png)\n\n\n\n- **删除大key**\n\n\n\n当Redis版本大于4.0时，可使用UNLINK命令安全地删除大Key，该命令能够以非阻塞的方式，逐步地清理传入的Key。\n\n\n\n当Redis版本小于4.0时，避免使用阻塞式命令KEYS，而是建议通过SCAN命令执行增量迭代扫描key，然后判断进行删除。\n\n\n\n**压缩和拆分key**\n\n\n\n当vaule是string时，比较难拆分，则使用序列化、压缩算法将key的大小控制在合理范围内，但是序列化和反序列化都会带来更多时间上的消耗。\n\n\n\n当value是string，压缩之后仍然是大key，则需要进行拆分，一个大key分为不同的部分，记录每个部分的key，使用multiget等操作实现事务读取。\n\n\n\n当value是list/set等集合类型时，根据预估的数据规模来进行分片，不同的元素计算后分到不同的片。\n\n\n\n## 39.Redis常见性能问题和解决方案？\n\n\n\n1、Master 最好不要做任何持久化工作，包括内存快照和 AOF 日志文件，特别是不要启用内存快照做持久化。\n\n\n\n2、如果数据比较关键，某个 Slave 开启 AOF 备份数据，策略为每秒同步一次。\n\n\n\n3、为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内。\n\n\n\n4、尽量避免在压力较大的主库上增加从库。\n\n\n\n5、Master 调用 BGREWRITEAOF 重写 AOF 文件，AOF 在重写的时候会占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象。\n\n\n\n6、为了 Master 的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关为：Master<–Slave1<–Slave2<–Slave3…，这样的结构也方便解决单点故障问题，实现 Slave 对 Master 的替换，也即，如果 Master 挂了，可以立马启用 Slave1 做 Master，其他不变。\n\n\n\n## 40.使用Redis 如何实现异步队列？\n\n\n\n我们知道redis支持很多种结构的数据，那么如何使用redis作为异步队列使用呢？一般有以下几种方式：\n\n\n\n**使用list作为队列，lpush生产消息，rpop消费消息**\n\n\n\n这种方式，消费者死循环rpop从队列中消费消息。但是这样，即使队列里没有消息，也会进行rpop，会导致Redis CPU的消耗。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358091817-5087270c-ed2b-4079-b058-e22260145247.png)\n\n\n\n可以通过让消费者休眠的方式的方式来处理，但是这样又会又消息的延迟问题。\n\n\n\n**使用list作为队列，lpush生产消息，brpop消费消息**\n\n\n\nbrpop是rpop的阻塞版本，list为空的时候，它会一直阻塞，直到list中有值或者超时。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358093630-67ec8c34-0d24-47aa-b3eb-5d4433494cb7.png)\n\n\n\n这种方式只能实现一对一的消息队列。\n\n\n\n**使用Redis的pub/sub来进行消息的发布/订阅**\n\n\n\n发布/订阅模式可以1：N的消息发布/订阅。发布者将消息发布到指定的频道频道（channel），订阅相应频道的客户端都能收到消息。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358095448-7a18f5df-a836-465a-8d9d-998beb53dbf0.png)\n\n\n\n但是这种方式不是可靠的，它不保证订阅者一定能收到消息，也不进行消息的存储。\n\n\n\n所以，一般的异步队列的实现还是交给专业的消息队列。\n\n\n\n## 41.Redis 如何实现延时队列?\n\n\n\n**使用zset，利用排序实现**\n\n\n\n可以使用 zset这个结构，用设置好的时间戳作为score进行排序，使用 zadd score1 value1 ....命令就可以一直往内存中生产消息。再利用 zrangebysocre 查询符合条件的所有待处理的任务，通过循环执行队列任务即可。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358097840-90b19855-085c-419e-8dca-5ca8182d5e15.png)\n\n\n\n## 42.Redis 支持事务吗？\n\n\n\nRedis提供了简单的事务，但它对事务ACID的支持并不完备。\n\n\n\nmulti命令代表事务开始，exec命令代表事务结束，它们之间的命令是原子顺序执行的：\n\n\n\n```shell\n127.0.0.1:6379> multi \nOK\n127.0.0.1:6379> sadd user:a:follow user:b \nQUEUED \n127.0.0.1:6379> sadd user:b:fans user:a \nQUEUED\n127.0.0.1:6379> sismember user:a:follow user:b \n(integer) 0\n127.0.0.1:6379> exec 1) (integer) 1\n2) (integer) 1\n```\n\n\n\nRedis事务的原理，是所有的指令在 exec 之前不执行，而是缓存在 服务器的一个事务队列中，服务器一旦收到 exec 指令，才开执行整个事务队列，执行完毕后一次性返回所有指令的运行结果。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358100402-afb0809b-36a1-45c0-a325-1cbd62a43dd3.png)\n\n\n\n因为Redis执行命令是单线程的，所以这组命令顺序执行，而且不会被其它线程打断。\n\n\n\n**Redis事务的注意点有哪些？**\n\n\n\n需要注意的点有：\n\n\n\n- Redis 事务是不支持回滚的，不像 MySQL 的事务一样，要么都执行要么都不执行；\n\n- Redis 服务端在执行事务的过程中，不会被其他客户端发送来的命令请求打断。直到事务命令全部执行完毕才会执行其他客户端的命令。\n\n\n\n**Redis 事务为什么不支持回滚？**\n\n\n\nRedis 的事务不支持回滚。\n\n\n\n如果执行的命令有语法错误，Redis 会执行失败，这些问题可以从程序层面捕获并解决。但是如果出现其他问题，则依然会继续执行余下的命令。\n\n\n\n这样做的原因是因为回滚需要增加很多工作，而不支持回滚则可以**保持简单、快速的特性**。\n\n\n\n## 43.Redis和Lua脚本的使用了解吗？\n\n\n\nRedis的事务功能比较简单，平时的开发中，可以利用Lua脚本来增强Redis的命令。\n\n\n\nLua脚本能给开发人员带来这些好处：\n\n\n\n- Lua脚本在Redis中是原子执行的，执行过程中间不会插入其他命令。\n\n- Lua脚本可以帮助开发和运维人员创造出自己定制的命令，并可以将这 些命令常驻在Redis内存中，实现复用的效果。\n\n- Lua脚本可以将多条命令一次性打包，有效地减少网络开销。\n\n\n\n比如这一段很（烂）经（大）典（街）的秒杀系统利用lua扣减Redis库存的脚本：\n\n\n\n```shell\n   -- 库存未预热\n   if (redis.call('exists', KEYS[2]) == 1) then\n        return -9;\n    end;\n    -- 秒杀商品库存存在\n    if (redis.call('exists', KEYS[1]) == 1) then\n        local stock = tonumber(redis.call('get', KEYS[1]));\n        local num = tonumber(ARGV[1]);\n        -- 剩余库存少于请求数量\n        if (stock < num) then\n            return -3\n        end;\n        -- 扣减库存\n        if (stock >= num) then\n            redis.call('incrby', KEYS[1], 0 - num);\n            -- 扣减成功\n            return 1\n        end;\n        return -2;\n    end;\n    -- 秒杀商品库存不存在\n    return -1;\n```\n\n\n\n## 44.Redis的管道了解吗？\n\n\n\nRedis 提供三种将客户端多条命令打包发送给服务端执行的方式：\n\n\n\nPipelining(管道) 、 Transactions(事务) 和 Lua Scripts(Lua 脚本) 。\n\n\n\n**Pipelining**（管道）\n\n\n\nRedis 管道是三者之中最简单的，当客户端需要执行多条 redis 命令时，可以通过管道一次性将要执行的多条命令发送给服务端，其作用是为了降低 RTT(Round Trip Time) 对性能的影响，比如我们使用 nc 命令将两条指令发送给 redis 服务端。\n\n\n\nRedis 服务端接收到管道发送过来的多条命令后，会一直执命令，并将命令的执行结果进行缓存，直到最后一条命令执行完成，再所有命令的执行结果一次性返回给客户端 。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358103585-41bb3f1d-c6ff-4b97-ba0f-2fb9a38da921.png)\n\n\n\n**Pipelining的优势**\n\n\n\n在性能方面， Pipelining 有下面两个优势：\n\n\n\n- **节省了RTT**：将多条命令打包一次性发送给服务端，减少了客户端与服务端之间的网络调用次数\n\n- **减少了上下文切换**：当客户端/服务端需要从网络中读写数据时，都会产生一次系统调用，系统调用是非常耗时的操作，其中设计到程序由用户态切换到内核态，再从内核态切换回用户态的过程。当我们执行 10 条 redis 命令的时候，就会发生 10 次用户态到内核态的上下文切换，但如果我们使用 Pipeining 将多条命令打包成一条一次性发送给服务端，就只会产生一次上下文切换。\n\n\n\n## 45.Redis实现分布式锁了解吗？\n\n\n\nRedis是分布式锁本质上要实现的目标就是在 Redis 里面占一个“茅坑”，当别的进程也要来占时，发现已经有人蹲在那里了，就只好放弃或者稍后再试。\n\n\n\n**V1：setnx命令**\n\n\n\n占坑一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占坑。先来先占， 用完了，再调用 del 指令释放茅坑。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358106130-57562585-b16a-42c2-a546-1c398de58fc0.png)\n\n\n\n```shell\n> setnx lock:fighter true\nOK\n... do something critical ...\n> del lock:fighter\n(integer) 1\n```\n\n\n\n但是有个问题，如果逻辑执行到中间出现异常了，可能会导致 del 指令没有被调用，这样就会陷入死锁，锁永远得不到释放。\n\n\n\n**V2:锁超时释放**\n\n\n\n所以在拿到锁之后，再给锁加上一个过期时间，比如 5s，这样即使中间出现异常也可以保证 5 秒之后锁会自动释放。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358108436-036d711b-b2a6-45b5-8a48-683883edb297.png)\n\n\n\n```shell\n> setnx lock:fighter true\nOK\n> expire lock:fighter 5\n... do something critical ...\n> del lock:fighter\n(integer) 1\n```\n\n\n\n但是以上逻辑还有问题。如果在 setnx 和 expire 之间服务器进程突然挂掉了，可能是因为机器掉电或者是被人为杀掉的，就会导致 expire 得不到执行，也会造成死锁。\n\n\n\n这种问题的根源就在于 setnx 和 expire 是两条指令而不是原子指令。如果这两条指令可以一起执行就不会出现问题。\n\n\n\n**V3:set指令**\n\n\n\n这个问题在Redis 2.8 版本中得到了解决，这个版本加入了 set 指令的扩展参数，使得 setnx 和expire 指令可以一起执行。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358110372-3cbd3f1b-46b2-4ce8-941c-2176e06c7ee1.png)\n\n\n\n```plain\nset lock:fighter3 true ex 5 nx OK ... do something critical ... > del lock:codehole\n```\n\n\n\n上面这个指令就是 setnx 和 expire 组合在一起的原子指令，这个就算是比较完善的分布式锁了。\n\n\n\n当然实际的开发，没人会去自己写分布式锁的命令，因为有专业的轮子——**Redisson**。\n\n\n\n这一部分就比较深了，如果不是简历上写了精通Redis，应该不会怎么问。\n\n\n\n## 说说Redis底层数据结构？\n\n\n\nRedis有**动态字符串(sds)\\******、\\******链表(list)\\******、\\******字典(ht)\\******、\\******跳跃表(skiplist)\\******、\\******整数集合(intset)\\******、\\******压缩列表(ziplist)** 等底层数据结构。\n\n\n\nRedis并没有使用这些数据结构来直接实现键值对数据库，而是基于这些数据结构创建了一个对象系统，来表示所有的key-value。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358112532-0a74b190-8a2c-4bfc-8d5b-d4b8565c518b.png)我们常用的数据类型和编码对应的映射关系：\n\n\n\n![img](大厂面试之Redis篇.assets/1676358115912-1b8a1b56-8e3b-4e95-ac34-53f32f6f3a54.png)\n\n\n\n简单看一下底层数据结构，如果对数据结构掌握不错的话，理解这些结构应该不是特别难：\n\n\n\n1、**字符串**：redis没有直接使⽤C语⾔传统的字符串表示，⽽是⾃⼰实现的叫做简单动态字符串SDS的抽象类型。\n\n\n\nC语⾔的字符串不记录⾃身的⻓度信息，⽽SDS则保存了⻓度信息，这样将获取字符串⻓度的时间由O(N)降低到了O(1)，同时可以避免缓冲区溢出和减少修改字符串⻓度时所需的内存重分配次数。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358118068-33757fc3-a2a8-4be8-a05d-0aedef27fd97.png)\n\n\n\n2、**链表linkedlist**：redis链表是⼀个双向⽆环链表结构，很多发布订阅、慢查询、监视器功能都是使⽤到了链表来实现，每个链表的节点由⼀个listNode结构来表示，每个节点都有指向前置节点和后置节点的指针，同时表头节点的前置和后置节点都指向NULL。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358121139-4f9c9af8-0668-43e8-9bef-d8d2aeeb7c69.png)\n\n\n\n3、**字典dict**：⽤于保存键值对的抽象数据结构。Redis使⽤hash表作为底层实现，一个哈希表里可以有多个哈希表节点，而每个哈希表节点就保存了字典里中的一个键值对。每个字典带有两个hash表，供平时使⽤和rehash时使⽤，hash表使⽤链地址法来解决键冲突，被分配到同⼀个索引位置的多个键值对会形成⼀个单向链表，在对hash表进⾏扩容或者缩容的时候，为了服务的可⽤性，rehash的过程不是⼀次性完成的，⽽是渐进式的。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358123009-73bfc368-2b41-4287-bbe1-bfac15219730.png)\n\n\n\n4、**跳跃表skiplist**：跳跃表是有序集合的底层实现之⼀，Redis中在实现有序集合键和集群节点的内部结构中都是⽤到了跳跃表。Redis跳跃表由zskiplist和zskiplistNode组成，zskiplist⽤于保存跳跃表信息（表头、表尾节点、⻓度等），zskiplistNode⽤于表示表跳跃节点，每个跳跃表节点的层⾼都是1-32的随机数，在同⼀个跳跃表中，多个节点可以包含相同的分值，但是每个节点的成员对象必须是唯⼀的，节点按照分值⼤⼩排序，如果分值相同，则按照成员对象的⼤⼩排序。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358125309-7d11f6af-01b5-4313-b57f-ddf542f11041.png)\n\n\n\n5、**整数集合intset**：⽤于保存整数值的集合抽象数据结构，不会出现重复元素，底层实现为数组。\n\n\n\n<img src=\"大厂面试之Redis篇.assets/1676358127915-4c94b16e-5970-414d-8710-50daaefbebac.png\" alt=\"img\" />\n\n\n\n6、**压缩列表ziplist**：压缩列表是为节约内存⽽开发的顺序性数据结构，它可以包含任意多个节点，每个节点可以保存⼀个字节数组或者整数值。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358131121-1e84051e-c137-4ebb-aaa8-16e424c6b2ee.png)\n\n\n\n## Redis 的 SDS 和 C 中字符串相比有什么优势？\n\n\n\nC 语言使用了一个长度为 `N+1` 的字符数组来表示长度为 `N` 的字符串，并且字符数组最后一个元素总是 `\\0`，这种简单的字符串表示方式 不符合 Redis 对字符串在安全性、效率以及功能方面的要求。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358133476-3c3b180d-75c7-4635-b9cb-d6aedb4c9c88.png)\n\n\n\n**C语言的字符串可能有什么问题？**\n\n\n\n这样简单的数据结构可能会造成以下一些问题：\n\n\n\n- **获取字符串长度复杂度高** ：因为 C 不保存数组的长度，每次都需要遍历一遍整个数组，时间复杂度为O(n)；\n\n- 不能杜绝 **缓冲区溢出/内存泄漏** 的问题 : C字符串不记录自身长度带来的另外一个问题是容易造成缓存区溢出（buffer overflow），例如在字符串拼接的时候，新的\n\n- C 字符串 **只能保存文本数据** → 因为 C 语言中的字符串必须符合某种编码（比如 ASCII），例如中间出现的 `'\\0'` 可能会被判定为提前结束的字符串而识别不了；\n\n\n\n**Redis如何解决？优势？**\n\n\n\n![img](大厂面试之Redis篇.assets/1676358136548-9b405bd4-127a-4210-a700-e370c65e00ab.png)\n\n\n\n简单来说一下 Redis 如何解决的：\n\n\n\n1、**多增加 len 表示当前字符串的长度**：这样就可以直接获取长度了，复杂度 O(1)；\n\n\n\n2、**自动扩展空间**：当 SDS 需要对字符串进行修改时，首先借助于 `len` 和 `alloc` 检查空间是否满足修改所需的要求，如果空间不够的话，SDS 会自动扩展空间，避免了像 C 字符串操作中的溢出情况；\n\n\n\n3、**有效降低内存分配次数**：C 字符串在涉及增加或者清除操作时会改变底层数组的大小造成重新分配，SDS 使用了 **空间预分配** 和 **惰性空间释放** 机制，简单理解就是每次在扩展时是成倍的多分配的，在缩容是也是先留着并不正式归还给 OS；\n\n\n\n4、**二进制安全**：C 语言字符串只能保存 `ascii` 码，对于图片、音频等信息无法保存，SDS 是二进制安全的，写入什么读取就是什么，不做任何过滤和限制；\n\n\n\n## 字典是如何实现的？Rehash 了解吗？\n\n\n\n字典是 Redis 服务器中出现最为频繁的复合型数据结构。除了 **hash** 结构的数据会用到字典外，整个 Redis 数据库的所有 `key` 和 `value` 也组成了一个 **全局字典**，还有带过期时间的 `key` 也是一个字典。*(存储在 RedisDb 数据结构中)*\n\n\n\n**字典结构是什么样的呢？**\n\n\n\n**Redis** 中的字典相当于 Java 中的 **HashMap**，内部实现也差不多类似，采用哈希与运算计算下标位置；通过 **\"数组 + 链表\" \\******的\\******链地址法** 来解决哈希冲突，同时这样的结构也吸收了两种不同数据结构的优点。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358139010-bb0ea1ae-63b3-4629-b001-11a3ad4ac8e0.png)\n\n\n\n**字典是怎么扩容的？**\n\n\n\n字典结构内部包含 **两个 hashtable**，通常情况下只有一个哈希表 ht[0] 有值，在扩容的时候，把ht[0]里的值rehash到ht[1]，然后进行 **渐进式rehash** ——所谓渐进式rehash，指的是这个rehash的动作并不是一次性、集中式地完成的，而是分多次、渐进式地完成的。\n\n\n\n待搬迁结束后，h[1]就取代h[0]存储字典的元素。\n\n\n\n## 跳跃表是如何实现的？原理？\n\n\n\nPS:跳跃表是比较常问的一种结构。\n\n\n\n跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其它节点的指针，从而达到快速访问节点的目的。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358140847-86793c13-bd50-48f4-a652-128a77684a43.png)\n\n\n\n**为什么使用跳跃表?**\n\n\n\n首先，因为 zset 要支持随机的插入和删除，所以它 **不宜使用数组来实现**，关于排序问题，我们也很容易就想到 **红黑树/ 平衡树** 这样的树形结构，为什么 Redis 不使用这样一些结构呢？\n\n\n\n1、**性能考虑：** 在高并发的情况下，树形结构需要执行一些类似于 rebalance 这样的可能涉及整棵树的操作，相对来说跳跃表的变化只涉及局部；\n\n\n\n2、**实现考虑：** 在复杂度与红黑树相同的情况下，跳跃表实现起来更简单，看起来也更加直观；\n\n\n\n基于以上的一些考虑，Redis 基于 **William Pugh** 的论文做出一些改进后采用了 **跳跃表** 这样的结构。\n\n\n\n本质是解决查找问题。\n\n\n\n**跳跃表是怎么实现的？**\n\n\n\n跳跃表的节点里有这些元素：\n\n\n\n1、**层**跳跃表节点的level数组可以包含多个元素，每个元素都包含一个指向其它节点的指针，程序可以通过这些层来加快访问其它节点的速度，一般来说，层的数量月多，访问其它节点的速度就越快。\n\n\n\n每次创建一个新的跳跃表节点的时候，程序都根据幂次定律，随机生成一个介于1和32之间的值作为level数组的大小，这个大小就是层的“高度”\n\n\n\n2、**前进指针**每个层都有一个指向表尾的前进指针（level[i].forward属性），用于从表头向表尾方向访问节点。\n\n\n\n我们看一下跳跃表从表头到表尾，遍历所有节点的路径：\n\n\n\n![img](大厂面试之Redis篇.assets/1676358143181-8c5eda64-27da-4c10-847e-4bd3b977a9e7.png)\n\n\n\n3、**跨度**层的跨度用于记录两个节点之间的距离。跨度是用来计算排位（rank)的：在查找某个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。\n\n\n\n例如查找，分值为3.0、成员对象为o3的节点时，沿途经历的层：查找的过程只经过了一个层，并且层的跨度为3，所以目标节点在跳跃表中的排位为3。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358146495-7d0d8659-0348-46fa-a75c-feb424fc0954.png)\n\n\n\n4、**分值和成员**节点的分值（score属性)是一个double类型的浮点数，跳跃表中所有的节点都按分值从小到大来排序。\n\n\n\n节点的成员对象（obj属性）是一个指针，它指向一个字符串对象，而字符串对象则保存这一个SDS值。\n\n\n\n## 压缩列表了解吗？\n\n\n\n压缩列表是 Redis **为了节约内存** 而使用的一种数据结构，是由一系列特殊编码的连续内存快组成的顺序型数据结构。\n\n\n\n一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358149451-cf638c12-f860-4f4d-acb7-fe88d5dc2e68.png)\n\n\n\n压缩列表由这么几部分组成：\n\n\n\n- **zlbyttes**:记录整个压缩列表占用的内存字节数\n\n- **zltail**:记录压缩列表表尾节点距离压缩列表的起始地址有多少字节\n\n- **zllen**:记录压缩列表包含的节点数量\n\n- **entryX**:列表节点\n\n- **zlend**:用于标记压缩列表的末端\n\n\n\n![img](大厂面试之Redis篇.assets/1676358151402-828cdd8b-182d-4408-bab0-a1087b68106c.png)\n\n\n\n## 快速列表 quicklist 了解吗？\n\n\n\nRedis 早期版本存储 list 列表数据结构使用的是压缩列表 ziplist 和普通的双向链表 linkedlist，也就是说当元素少时使用 ziplist，当元素多时用 linkedlist。\n\n\n\n但考虑到链表的附加空间相对较高，`prev` 和 `next` 指针就要占去 `16` 个字节（64 位操作系统占用 `8` 个字节），另外每个节点的内存都是单独分配，会家具内存的碎片化，影响内存管理效率。\n\n\n\n后来 Redis 新版本（3.2）对列表数据结构进行了改造，使用 `quicklist` 代替了 `ziplist` 和 `linkedlist`，quicklist是综合考虑了时间效率与空间效率引入的新型数据结构。\n\n\n\nquicklist由list和ziplist结合而成，它是一个由ziplist充当节点的双向链表。\n\n\n\n![img](大厂面试之Redis篇.assets/1676358153179-5e3150ab-60d6-4e69-9e10-b6239d7eb519.png)\n\n\n\n## 假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？\n\n\n\n使用 `keys` 指令可以扫出指定模式的 key 列表。但是要注意 keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。\n\n这个时候可以使用 `scan` 指令，`scan` 指令可以无阻塞的提取出指定模式的 `key` 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 `keys` 指令长。","tags":["我要进大厂","面试","Redis"],"categories":["JAVA","面试","我要进大厂"]},{"title":"JUC并发之synchronized","url":"/note/JAVA/JUC/JUC并发之synchronized/","content":"\n![image-20230529221408433](JUC并发之synchronized.assets/image-20230529221408433.png)\n\n锁的出现主要是解决原子性。\n\n但是：锁不仅解决了原子性。同样的，它还解决了可见性。\n\n但是：锁不仅解决了原子性和可见性，还解决了有序性。\n\n哈哈哈哈，牛不牛\n\n锁把可见性，有序性，原子性全都解决了。\n\n但是\n\n锁对有序性的解决，只是保证了as-if-serial语义，并不是严格意义上的有序性。\n\n\n\n## Java提供的锁技术：synchronized关键字\n\n### synchronized关键字的简单使用\n\n```java\nclass X {\n  // 修饰非静态方法\n  synchronized void foo() {\n    // 临界区\n  }\n  // 修饰静态方法\n  synchronized static void bar() {\n    // 临界区\n  }\n  // 修饰代码块\n  Object obj = new Object()；\n  void baz() {\n    synchronized(obj) {\n      // 临界区\n    }\n  }\n}  \n```\n\n当修饰静态方法的时候，锁定的是当前类的 Class 对象，在上面的例子中就是 Class X；\n\n当修饰非静态方法的时候，锁定的是当前实例对象 this。\n\n\n\n### synchronized关键字的实现原理\n\n#### 代码层面\n\n```java\nsynchronized(obj){\n\t//...\n}\n```\n\n#### 字节码层面\n\n分为两种情况：\n\n- synchronized修饰代码块\n\n- synchronized修饰方法\n\nsynchronized修饰代码块\n\n- monitorenter\n\n- moniterexit\n\n- 反编译一段synchronized修饰代码块代码，`javap -c -s -v -l XXX.class`，可以看到相应的字节码指令。\n\n  <img src=\"JUC并发之synchronized.assets/image-20230508144543939.png\" alt=\"image-20230508144543939\" style=\"zoom:80%;\" />\n\n  \n\nsynchronized修饰方法\n\n- ACC_SYNCHRONIZED 标记\n- 反编译一段synchronized修饰方法，`javap -c -s -v -l XXX.class`，可以看到相应的字节码指令。\n\n<img src=\"JUC并发之synchronized.assets/image-20230508144850196.png\" alt=\"image-20230508144850196\" style=\"zoom:80%;\" />\n\n\n\n#### JVM层级（Hotspot）\n\n\n\n<img src=\"JUC并发之synchronized.assets/image-20230508150728674.png\" alt=\"image-20230508150728674\" style=\"zoom:80%;\" />\n\nInterpreterRuntime.cpp:: monitorenter方法是开始获取锁\n\n```c++\nIRT_ENTRY_NO_ASYNC(void, InterpreterRuntime::monitorenter(JavaThread* thread, BasicObjectLock* elem))\n#ifdef ASSERT\n  thread->last_frame().interpreter_frame_verify_monitor(elem);\n#endif\n  if (PrintBiasedLockingStatistics) {\n    Atomic::inc(BiasedLocking::slow_path_entry_count_addr());\n  }\n  Handle h_obj(thread, elem->obj());\n  assert(Universe::heap()->is_in_reserved_or_null(h_obj()),\"must be NULL or an object\");\n  //UseBiasedLocking 轻量级锁的开关是否打开\n  if (UseBiasedLocking) {\n    // Retry fast entry if bias is revoked to avoid unnecessary inflation\n    ObjectSynchronizer::fast_enter(h_obj, elem->lock(), true, CHECK);\n  } else {\n    ObjectSynchronizer::slow_enter(h_obj, elem->lock(), CHECK);\n  }\n  assert(Universe::heap()->is_in_reserved_or_null(elem->obj()),\"must be NULL or an object\");\n#ifdef ASSERT\n  thread->last_frame().interpreter_frame_verify_monitor(elem);\n#endif\nIRT_END\n```\n\nfast_enter方法：获取偏向锁\n\n```c++\nvoid ObjectSynchronizer::fast_enter(Handle obj, BasicLock* lock, bool attempt_rebias, TRAPS) {\n if (UseBiasedLocking) {\n    if (!SafepointSynchronize::is_at_safepoint()) {\n      //在安全点的时候，尝试获取偏向锁：revoke_and_rebias\n      BiasedLocking::Condition cond = BiasedLocking::revoke_and_rebias(obj, attempt_rebias, THREAD);\n      if (cond == BiasedLocking::BIAS_REVOKED_AND_REBIASED) {\n        return;\n      }\n    } else {\n      assert(!attempt_rebias, \"can not rebias toward VM thread\");\n      BiasedLocking::revoke_at_safepoint(obj);\n    }\n    assert(!obj->mark()->has_bias_pattern(), \"biases should be revoked by now\");\n }\n //偏向锁没有获取到，升级为：获取轻量级锁\n slow_enter (obj, lock, THREAD) ;\n}\n```\n\nslow_enter方法：获取轻量级锁\n\n```c++\nvoid ObjectSynchronizer::slow_enter(Handle obj, BasicLock* lock, TRAPS) {\n  markOop mark = obj->mark();\n  assert(!mark->has_bias_pattern(), \"should not see bias pattern here\");\n\n  if (mark->is_neutral()) {\n    // Anticipate successful CAS -- the ST of the displaced mark must\n    // be visible <= the ST performed by the CAS.\n    // 获取轻量级锁的时候，会先进行自旋：cmpxchg_ptr，尝试获取轻量级锁\n    lock->set_displaced_header(mark);\n    if (mark == (markOop) Atomic::cmpxchg_ptr(lock, obj()->mark_addr(), mark)) {\n      TEVENT (slow_enter: release stacklock) ;\n      return ;\n    }\n    // Fall through to inflate() ...\n  } else\n  if (mark->has_locker() && THREAD->is_lock_owned((address)mark->locker())) {\n    assert(lock != mark->locker(), \"must not re-lock the same lock\");\n    assert(lock != (BasicLock*)obj->mark(), \"don't relock with same BasicLock\");\n    lock->set_displaced_header(NULL);\n    return;\n  }\n\n#if 0\n  // The following optimization isn't particularly useful.\n  if (mark->has_monitor() && mark->monitor()->is_entered(THREAD)) {\n    lock->set_displaced_header (NULL) ;\n    return ;\n  }\n#endif\n\n  // The object header will never be displaced to this lock,\n  // so it does not matter what the value is, except that it\n  // must be non-zero to avoid looking like a re-entrant lock,\n  // and must not look locked either.\n  lock->set_displaced_header(markOopDesc::unused_mark());\n  // 如果轻量级锁也没有获取到，就升级为：重量级锁 inflate\n  ObjectSynchronizer::inflate(THREAD, obj())->enter(THREAD);\n}\n```\n\ninflate方法：获取重量级锁\n\n\n\n\n\n\n\n\n\n## Java实例对象内存布局\n\n\n\n对象实例内存布局\n\n<img src=\"JUC并发之synchronized.assets/image-20230508152706963.png\" alt=\"image-20230508152706963\" style=\"zoom:80%;\" />\n\n\n\n- Mark Word：记录锁信息，GC信息等等\n- class pointer：指向当前对象的class字节码文件\n\n\n\n引用Maven依赖\n\n```xml\n<dependencies>\n    <!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core -->\n    <dependency>\n        <groupId>org.openjdk.jol</groupId>\n        <artifactId>jol-core</artifactId>\n        <version>0.9</version>\n    </dependency>\n</dependencies>\n```\n\n编写测试代码\n\n```java\npackage com.mashibing.insidesync;\n\nimport org.openjdk.jol.info.ClassLayout;\n\npublic class T04_HelloJol {\n    public static void main(String[] args) {\n        \n        Object o = new Object();\n        System.out.println(ClassLayout.parseInstance(o).toPrintable());\n        \n        synchronized (o) {\n        \tSystem.out.println(ClassLayout.parseInstance(o).toPrintable());\n        }\n    }\n}\n```\n\n测试结果\n\n<img src=\"JUC并发之synchronized.assets/image-20230507222134977.png\" alt=\"image-20230507222134977\"  />\n\n\n\n\n\n\n\n## 用户态与内核态\n\nJDK早期，synchronized 叫做重量级锁， 因为申请锁资源必须通过 kernel 系统调用进行锁的分配，所以叫：重量级锁。\n\n后来JDK对synchronized进行了优化，细分为了：偏向锁，轻量级锁，重量级锁。其中偏向锁其实就是无锁，轻量级锁不需要 kernel 内核调用。\n\n所以：在用户态生成的锁都属于轻量级，因为不需要 kernel 内核调用。 kernel 内核调用就是内核态，比较耗资源。\n\n\n\n重量级锁的申请，需要应用程序通过用户态，通过指令 0x80 调用内核态，去申请锁。\n\n```assembly\n;hello.asm\n;write(int fd, const void *buffer, size_t nbytes)\n\nsection data\n    msg db \"Hello\", 0xA\n    len equ $ - msg\n\nsection .text\nglobal _start\n_start:\n\n    mov edx, len\n    mov ecx, msg\n    mov ebx, 1 ;文件描述符1 std_out\n    mov eax, 4 ;write函数系统调用号 4\n    int 0x80\n\n    mov ebx, 0\n    mov eax, 1 ;exit函数系统调用号\n    int 0x80\n\n```\n\n\n\n## CAS\n\n\n\nCompare And Swap (Compare And Exchange) / 自旋 / 自旋锁 / 无锁 （无重量锁）\n\n因为经常配合循环操作，直到完成为止，所以泛指一类操作\n\ncas(v, a, b) ，变量v，期待值a, 修改值b\n\n<img src=\"JUC并发之synchronized.assets/image-20230507215542996.png\" alt=\"image-20230507215542996\" style=\"zoom:80%;\" />\n\n\n\n### CAS的ABA问题\n\nABA问题，你的女朋友在离开你的这段儿时间经历了别的人，自旋就是你空转等待，一直等到她接纳你为止\n\n解决办法（加版本号），基础类型简单值不需要版本号\n\n每次修改变量，都在这个变量的版本号上加1，这样，刚刚A->B->A，虽然A的值没变，但是它的版本号已经变了，再判断版本号就会发现此时的A已经被改过了。参考乐观锁的版本号，这种做法可以给数据带上了一种实效性的检验。\n\nJava提供了AtomicStampReference类，它的compareAndSet方法首先检查当前的对象引用值是否等于预期引用，并且当前印戳（Stamp）标志是否等于预期标志，如果全部相等，则以原子方式将引用值和印戳标志的值更新为给定的更新值。\n\n\n\n### CAS的循环性能开销问题\n\n自旋CAS，如果一直循环执行，一直不成功，会给CPU带来非常大的执行开销。\n\n怎么解决循环性能开销问题？\n\n在Java中，很多使用自旋CAS的地方，会有一个自旋次数的限制，超过一定次数，就停止自旋。\n\n\n\n### CAS的只能保证一个变量的原子操作问题\n\nCAS 保证的是对一个变量执行操作的原子性，如果对多个变量操作时，CAS 目前无法直接保证操作的原子性的。\n\n怎么解决只能保证一个变量的原子操作问题？\n\n可以考虑改用锁来保证操作的原子性\n\n可以考虑合并多个变量，将多个变量封装成一个对象，通过AtomicReference来保证原子性。\n\n\n\n### CAS在JUC包的应用\n\n- AtomicInteger\n- AtomicXXX\n\n\n\n### CAS的底层实现\n\n以 AtomicInteger 这个类的 compareAndSet 方法为例\n\n<img src=\"JUC并发之synchronized.assets/image-20230508160116738.png\" alt=\"image-20230508160116738\" style=\"zoom:80%;\" />\n\nAtomicInteger:\n\n```java\npublic final int incrementAndGet() {\n        for (;;) {\n            int current = get();\n            int next = current + 1;\n            if (compareAndSet(current, next))\n                return next;\n        }\n    }\n\npublic final boolean compareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n```\n\nUnsafe:\n\n```java\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n```\n\nUnsafe的底层实现是C++\n\njdk8u: unsafe.cpp\n\n```c++\nUNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))\n  UnsafeWrapper(\"Unsafe_CompareAndSwapInt\");\n  oop p = JNIHandles::resolve(obj);\n  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);\n  // c++ 文件最终调用的是 Atomic::cmpxchg\n  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;\nUNSAFE_END\n```\n\nAtomic::cmpxchg 在不同的架构上有不同的实现。\n\n以 linux_86为例：在这个文件上： jdk8u: atomic_linux_x86.inline.hpp  93行\n\n- `__asm__`：表示是一个汇编指令\n\n```c++\ninline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value) {\n  int mp = os::is_MP();\n  __asm__ volatile (LOCK_IF_MP(%4) \"cmpxchgl %1,(%3)\"\n                    : \"=a\" (exchange_value)\n                    : \"r\" (exchange_value), \"a\" (compare_value), \"r\" (dest), \"r\" (mp)\n                    : \"cc\", \"memory\");\n  return exchange_value;\n}\n```\n\njdk8u: atomic_linux_x86.inline.hpp\n\n```c++\n#define LOCK_IF_MP(mp) \"cmp $0, \" #mp \"; je 1f; lock; 1: \"\n```\n\n最终实现：\n\n- lock指令，在多处理器情况下，会加上lock指令，如果是单处理器，就不需要lock指令了。\n- cmpxchg：是一个汇编指令，在cpu层面实现了cas操作\n\n```assembly\nlock cmpxchg \n```\n\n硬件：\n\nlock指令在执行后面指令的时候锁定一个北桥信号不采用锁总线的方式\n\n\n\n\n\n## 锁升级\n\n开发Java的这群大佬，总是想方设法的优化Java，其中锁肯定是重中之重。\n\n我们都知道，向内核态申请锁是一个很重量级的操作，必然会影响性能；\n\n所以后来有了CAS；\n\n但是CAS的自旋锁仍然会消耗性能；\n\n所以这群大佬们，又想了一些别的办法：引入了\n\n- 偏向锁\n\n至此，Java中的锁就有：偏向锁，轻量级锁（CAS），重量级锁。\n\n那么这些锁之间的关系是什么呢？\n\n### 锁升级\n\n所谓的锁升级，就是从：无锁->偏向锁->轻量级锁->重量级锁的变化过程；\n\n我们现在要探究的就是，这个过程是怎么变化的。\n\n在探究变化之前，我们要先知道锁是什么？\n\n### 锁的本质\n\n锁的本质：就是实例对象内存布局中 markword 的锁标识位。\n\nsynchronized优化的过程和markword息息相关\n\n用markword中最低的三位代表锁状态 其中1位是偏向锁位 2位是普通锁位\n\n**markword的实现表**\n\n<img src=\"JUC并发之synchronized.assets/image-20230508150425391.png\" alt=\"image-20230508150425391\" style=\"zoom: 67%;\" />\n\n以上实验环境是JDK11，打开就是偏向锁，而JDK8默认对象头是无锁\n\n\n\n### 锁升级过程\n\n<img src=\"JUC并发之synchronized.assets/image-20230508223009839.png\" alt=\"image-20230508223009839\" style=\"zoom:80%;\" />\n\n以上实验环境是JDK11，打开就是偏向锁，而JDK8默认对象头是无锁\n\n\n\n#### 什么是偏向锁\n\n在无竞争的情况下，只是在 markword 里存储当前线程指针，CAS操作都不做。\n\n为什么要引入偏向锁\n\n这是因为，Java的开发者发现，对于一个同步块来说，在大部分情况下，都是只有一个线程在执行，根本不存在竞争，所以就直接给一个标识位就可以了。\n\n上偏向锁，指的就是，把markword的线程ID改为自己线程ID的过程。\n\n什么时候释放偏向锁\n\n- 偏向锁不会主动释放\n- 当获取偏向锁的线程死亡，偏向锁会释放，此时对象是无锁状态\n- 当有别的线程来竞争偏向锁，此时会升级位轻量级锁，偏向锁也就不存在了。\n\n\n\n#### 什么是偏向锁未启动/已启动\n\n是否要开启偏向锁，在JVM中是有一个变量标识的。这个变量的默认是：**开启**。但是是**延迟开启**\n\n延迟开启是什么意思？\n\n就是说：在JVM启动的时候，偏向锁默认是没有启动的，经过一定的时间之后，偏向锁才启动。这个时候线程才可以获取偏向锁。那么在偏向锁没有启动的时候，此时线程获取的锁直接就是轻量级锁。\n\n那么一定的时间是指多少时间\n\n默认是4秒，可以通过 `-XX:BiasedLockingStartupDelay=0` 来进行设置。\n\n为什么要把偏向锁设置为延迟启动\n\n因为在JVM启动的时候有很多内部线程，这些内部线程必然会抢占资源，也就是说这些内部线程必然会将锁升级到轻量级锁甚至重量级锁。既然是必然的，那就没必要在经历一次偏向锁，因为经历一次偏向锁，就会造成偏向锁不断的进行锁撤销和锁升级的操作，效率较低。\n\n\n\n#### 什么是匿名偏向\n\n匿名偏向就是在偏向锁开关开启的情况下，但是此时没有任何线程进入。\n\n表示当前对象没有偏向任何线程。此时匿名偏向的markword标识位是`101`，和偏向锁的markword标识位是一样的。\n\n换言之：打开偏向锁标识开关，new出来的对象，默认就是一个可偏向匿名对象101；不打开偏向锁标识开关，new出来的对象就是普通对象。\n\n但是它和偏向锁的位移区别就是：偏向锁此时是有线程进入的。匿名偏向此时没有任何线程进入。\n\n匿名偏向只有JDK1.6才有，1.7之后就被移除了。\n\n1.7之后只有偏向锁了。\n\n\n\n#### 什么是轻度竞争\n\n轻度竞争，就是当前有别的线程来抢占锁资源。\n\n比如：目前线程-A拿到了对象O的偏向锁；此时线程B也需要拿对象O的锁，此时就产生了竞争；\n\n既然有竞争，偏向锁就要升级，升级为：轻量级锁。\n\n轻度竞争：表示自旋次数小于10次（1.6之后加入了自适应自旋，这个10次就没用了），或者自旋的线程数小于CPU核数的一半。\n\n\n\n#### 什么是轻量级锁\n\n本质就是CAS；\n\n自旋锁又是什么？\n\n自旋锁就是当前线程在不停的做CAS操作，抢占锁。就相当于在自旋。\n\n\n\n#### 什么是重度竞争\n\n重度竞争是和轻度竞争比较的，只要超过了轻度，就是重度竞争。\n\n- 自旋次数大于10次（1.6之后加入了自适应自旋，这个10次就没用了）\n- 自旋的线程数大于CPU核数的一半\n\n\n\n#### 什么是重量级锁\n\n就是想内核态通过0x80申请的锁，向操作系统申请资源，linux mutex , CPU从3级-0级系统调用，线程挂起，进入等待队列，等待操作系统的调度，然后再映射回用户空间\n\n为什么有了轻量级锁（CAS自旋锁）还需要重量级锁\n\n- CAS自旋锁浪费性能\n- 而重量级锁有一个waitSet，不占用CPU性能\n\n\n\n## 锁重入\n\nsynchronized 是一个可重入锁。\n\n### 什么是可重入\n\n就是一个线程可以多次获取当前锁；\n\n举个例子\n\n```java\npublic static void main(String[] args){\n  Object o = new Object();\n  for (int i=0; i<3; i++){\n    synchronized(o){\n      //do something...\n    }\n  }\n}\n```\n\nsynchronized代码快中的代码是可以被多次执行的。也就验证了synchronized的可重入性。\n\n如果不可重入的话，在第二次循环，就阻塞了。\n\n### 可重入的实现原理\n\n通过markword的实现表：我这里在拿图拿过来，方便阅读：[锁的本质](#锁的本质)\n\n<img src=\"JUC并发之synchronized.assets/image-20230508150425391.png\" alt=\"image-20230508150425391\" style=\"zoom: 67%;\" />\n\n我们可以看到在无锁态下，markword中有31位是表示hashcode的。这里的hashcode是当前对象的identity hashcode；也就是唯一标识当前对象的。\n\n但是当对象变成了偏向锁的时候，hashcode的31位就没有了，取而代之的是54位的线程指针。\n\n这个线程指针是什么？它又指向了什么？\n\n首先我们要知道，一个对象从无锁态变成偏向锁，必然是因为有线程进入，线程进入了，拿到了这个对象的偏向锁。\n\n此时线程就会创建一个LR（Lock Record）放进自己的线程栈中（线程栈是线程私有的）\n\n而markword中这个54位的线程指针，其实是线程的ID，而它指向了当前的线程，就是拿到了这个对象的偏向锁的这个线程；\n\n什么是LR（Lock Record）\n\n<img src=\"JUC并发之synchronized.assets/image-20230508225623031.png\" alt=\"image-20230508225623031\" style=\"zoom:80%;\" />\n\n- 线程在获取偏向锁的时候，会创建一个LockRecord放在自己的栈中；而对象的hashcode就是存在LockRecord中（我们知道hashcode是对象的identity hashcode，唯一标识），这样当前线程就知道锁的是哪个对象了。\n- 当这个线程再次获取该对象锁的时候（此时就是重入），会再次创建一个LockRecord，只不过此时的LockRecord指向的是null；\n- 同样的，在释放锁的时候，就是一个一个出栈。\n\n扩展：偏向锁和轻量级锁的hashcode是放在lockRecord中的；重量级锁是放在ObjectMonitor的成员中\n\n扩展：关于epoch: (不重要)\n\n> **批量重偏向与批量撤销**渊源：从偏向锁的加锁解锁过程中可看出，当只有一个线程反复进入同步块时，偏向锁带来的性能开销基本可以忽略，但是当有其他线程尝试获得锁时，就需要等到safe point时，再将偏向锁撤销为无锁状态或升级为轻量级，会消耗一定的性能，所以在多线程竞争频繁的情况下，偏向锁不仅不能提高性能，还会导致性能下降。于是，就有了批量重偏向与批量撤销的机制。\n>\n> **原理**以class为单位，为每个class维护**解决场景**批量重偏向（bulk rebias）机制是为了解决：一个线程创建了大量对象并执行了初始的同步操作，后来另一个线程也来将这些对象作为锁对象进行操作，这样会导致大量的偏向锁撤销操作。批量撤销（bulk revoke）机制是为了解决：在明显多线程竞争剧烈的场景下使用偏向锁是不合适的。\n>\n> 一个偏向锁撤销计数器，每一次该class的对象发生偏向撤销操作时，该计数器+1，当这个值达到重偏向阈值（默认20）时，JVM就认为该class的偏向锁有问题，因此会进行批量重偏向。每个class对象会有一个对应的epoch字段，每个处于偏向锁状态对象的Mark Word中也有该字段，其初始值为创建该对象时class中的epoch的值。每次发生批量重偏向时，就将该值+1，同时遍历JVM中所有线程的栈，找到该class所有正处于加锁状态的偏向锁，将其epoch字段改为新值。下次获得锁时，发现当前对象的epoch值和class的epoch不相等，那就算当前已经偏向了其他线程，也不会执行撤销操作，而是直接通过CAS操作将其Mark Word的Thread Id 改成当前线程Id。当达到重偏向阈值后，假设该class计数器继续增长，当其达到批量撤销的阈值后（默认40），JVM就认为该class的使用场景存在多线程竞争，会标记该class为不可偏向，之后，对于该class的锁，直接走轻量级锁的逻辑。\n\n\n\n## 锁升级和锁重入的小结\n\n加锁，指的是锁定对象\n\n锁升级的过程\n\nJDK较早的版本 OS的资源 互斥量 用户态 -> 内核态的转换 重量级 效率比较低\n\n现代版本进行了优化\n\n无锁 - 偏向锁 -轻量级锁（自旋锁）-重量级锁\n\n\n\n偏向锁 - markword 上记录当前线程指针，下次同一个线程加锁的时候，不需要争用，只需要判断线程指针是否同一个，所以，偏向锁，偏向加锁的第一个线程 。hashCode备份在线程栈上 线程销毁，锁降级为无锁\n\n有争用 - 锁升级为轻量级锁 - 每个线程有自己的LockRecord在自己的线程栈上，用CAS去争用markword的LR的指针，指针指向哪个线程的LR，哪个线程就拥有锁\n\n自旋超过10次，升级为重量级锁 - 如果太多线程自旋 CPU消耗过大，不如升级为重量级锁，进入等待队列（不消耗CPU）-XX:PreBlockSpin\n\n\n\n自旋锁在 JDK1.4.2 中引入，使用 -XX:+UseSpinning 来开启。JDK 6 中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。\n\n自适应自旋锁意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。\n\n\n\n偏向锁由于有锁撤销的过程revoke，会消耗系统资源，所以，在锁争用特别激烈的时候，用偏向锁未必效率高。还不如直接使用轻量级锁。\n\n## synchronized的优化\n\n在JDK1.6之前，synchronized的实现直接调用ObjectMonitor的enter和exit，这种锁被称之为**重量级锁**。从JDK6开始，HotSpot虚拟机开发团队对Java中的锁进行优化，提升了synchronized的性能。\n\n优化分为两部分：\n\nC1 Compile Level 1 (一级优化)：增加了适应性自旋、轻量级锁和偏向锁等优化策略，\n\nC2 Compile Level 2 (二级优化)：增加了锁消除、锁粗化等优化策略\n\n\n\n### 锁消除 lock eliminate\n\n```java\npublic void add(String str1,String str2){\n     StringBuffer sb = new StringBuffer();\n     sb.append(str1).append(str2);\n}\n```\n\n我们都知道 StringBuffer 是线程安全的，因为它的关键方法都是被 synchronized 修饰过的，但我们看上面这段代码，我们会发现，sb 这个引用只会在 add 方法中使用，不可能被其它线程引用（因为是局部变量，栈私有），因此 sb 是不可能共享的资源，JVM 会自动消除 StringBuffer 对象内部的锁。\n\n### 锁粗化 lock coarsening\n\n```java\npublic String test(String str){\n       \n       int i = 0;\n       StringBuffer sb = new StringBuffer():\n       while(i < 100){\n           sb.append(str);\n           i++;\n       }\n       return sb.toString():\n}\n```\n\nJVM 会检测到这样一连串的操作都对同一个对象加锁（while 循环内 100 次执行 append，没有锁粗化的就要进行 100  次加锁/解锁），此时 JVM 就会将加锁的范围粗化到这一连串的操作的外部（比如 while 虚幻体外），使得这一连串操作只需要加一次锁即可。\n\n### 锁降级（不重要）\n\nhttps://www.zhihu.com/question/63859501\n\n其实，只被VMThread访问，降级也就没啥意义了。所以可以简单认为锁降级不存在！\n\n\n\n## 参考资料\n\nhttp://openjdk.java.net/groups/hotspot/docs/HotSpotGlossary.html\n\n","tags":["JUC","锁"],"categories":["JAVA","JUC"]},{"title":"JUC并发之ReentrantLock[AQS]","url":"/note/JAVA/JUC/JUC并发之ReentrantLock[AQS]/","content":"\n![image-20230529221524164](JUC并发之ReentrantLock[AQS].assets/image-20230529221524164.png)\n\n## ReentrantLock 是什么\n\nReentrantLock 是可重入的独占锁，只能有一个线程可以获取该锁，其它获取该锁的线程会被阻塞而被放入该锁的阻塞队列里面。\n\n\n\n```java\n    // 创建锁（默认是非公平锁）\n    ReentrantLock lock = new ReentrantLock();\n    // 获取锁操作\n    lock.lock();\n    try {\n        // 执行代码逻辑\n    } catch (Exception ex) {\n        // ...\n    } finally {\n        // 解锁操作\n        lock.unlock();\n    }\n```\n\n\n\n\n\n## ReentrantLock和Synchronized对比\n\n\n\n- 可重入（和synchronized一样，都是可重入的）\n- 有 trylock() 方法，比 synchronized 高级一点\n- 有 lockInterruptibly() 可以对线程中断做出反应，比 synchronized 高级一点\n- 默认是非公平锁，可以通过传参设置为公平锁\n\n\n\n![image-20230510153544586](JUC并发之ReentrantLock[AQS].assets/image-20230510153544586.png)\n\n\n\n\n\n## ReentrantLock 的具体实现是什么\n\n\n\n如果锁当前没有被其它线程占用，并且当前线程之前没有获取过该锁，则当前线程会获取到该锁，然后设置当前锁的拥有者为当前线程，并设置 AQS 的状态值为1 ，然后直接返回。如果当前线程之前己经获取过该锁，则这次只是简单地把 AQS 的状态值加1后返回。\n\n\n\n如果该锁己经被其他线程持有，非公平锁会尝试去获取锁，获取失败的话，则调用该方法线程会被放入 AQS 队列阻塞挂起。\n\n\n\n<img src=\"JUC并发之ReentrantLock[AQS].assets/image-20230510153000813.png\" alt=\"image-20230510153000813\" style=\"zoom:80%;\" />\n\n\n\n\n\n## 什么是公平锁和非公平锁\n\n\n\n非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。\n\n\n\n非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁。**公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面**。\n\n\n\n相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。\n\n\n\n\n\n公平锁的实现代码\n\njava.util.concurrent.locks.ReentrantLock.FairSync#tryAcquire\n\n```java\n        protected final boolean tryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                //公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁\n                if (!hasQueuedPredecessors() &&\n                    compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n```\n\n\n\n非公平锁的实现代码\n\njava.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire\n\n```java\n        final boolean nonfairTryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                //非公平锁会直接 CAS 抢锁\n                if (compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n```\n\n\n\n\n\n## AQS是什么\n\nAbstractQueuedSynchronizer 抽象同步队列，简称 AQS ，它是Java并发包的根基，并发包中的锁就是基于AQS实现的。\n\n\n\n## AQS中涉及到哪些类\n\nAbstractOwnerSynchronizer：是AQS的父类，里面只定义了当前获取到锁的线程\n\nAbstractQueueSynchronizer：AQS类，继承自AbstractOwnerSynchronizer\n\n- 主要包含3个成员变量\n\n  - volatile int state：标记当前线程是否获取到锁\n\n  - Node head：维护的队列头\n\n  - Node tail：维护的队列尾\n\n- 一些方法\n\n  - CAS相关的：设置state\n  - CAS相关的：设置队列头\n  - CAS相关的：设置队列尾\n  - 核心方法：acquire\n  - 模板方法：tryAcquire()\n  - 模板方法：tryRelease()\n  - 核心方法：addWaiter() ：将Node放入队列中。Node是什么？是线程获取不到锁的时候，会被AQS封装成Node对象，放入队列中。\n  - 核心方法：acquireQueue()：队列中的Node尝试获取锁\n    - 获取不到锁：shouldParkAfterFailedAcquire（）：判断是否需要阻塞\n    - 需要阻塞，调用parkAndCheckInterrupt（）方法阻塞\n\nSync：继承自AQS类\n\n- 定义了一个抽象方法，lock() ，给用户提供，方便程序员进行上锁的。\n\nFairSync：继承自Sync\n\n- 公平锁，实现了 lock 方法，给程序员提供简单的获取锁的方式\n- 因为继承自 Sync，Sync继承自AQS，所以它也实现了AQS中的模板方法：tryAcquire（）实现了获取锁的具体逻辑\n\nNonFairSync：继承自Sync\n\n- 非公平锁。实现了 lock 方法，给程序员提供简单的获取锁的方式\n- 因为继承自 Sync，Sync继承自AQS，所以它也实现了AQS中的模板方法：tryAcquire（）实现了获取锁的具体逻辑\n\n\n\n![中心主题](JUC并发之ReentrantLock[AQS].assets/中心主题.png)\n\n\n\n## AQS的具体实现流程\n\n\n\n```mermaid\nsequenceDiagram\nApp->>App: ReentrantLock lock = new ReentrantLock();\nApp->>ReentrantLock: lock.lock();\nReentrantLock->>NonfairSync: sync.lock()\nnote right of NonfairSync: NonfairSync继承自Sync；Sync继承自AQS\nNonfairSync->>AQS: compareAndSetState(0, 1)<br/>CAS操作\nnote right of NonfairSync: CAS操作成功\nAQS-->>NonfairSync: CAS操作成功\nNonfairSync->>AQS: setExclusiveOwnerThread(Thread.currentThread())<br/>设置当前线程拿到锁\nnote right of NonfairSync: CAS操作失败\nAQS-->>NonfairSync: CAS操作失败\nNonfairSync->>AQS: acquire(1)\nAQS->>AQS: tryAcquire(args)<br/>再次尝试获取锁\nAQS->>AQS: addWaiter(Node.EXCLUSIVE)<br/>获取不到，会将当前NonfaitSync放在队列中\nAQS->>AQS: acquireQueued(node,args)<br/>放到队列之后，如果是head节点，会再次尝试获取锁\nAQS->>AQS: shouldParkAfterFailedAcquire(Node pred, Node node)<br/>获取锁失败之后，判断当前节点是否需要阻塞<br/>阻塞的条件是前驱节点的waitStatus是SIGNAL\nAQS->>AQS: parkAndCheckInterrupt()<br/>需要需要阻塞，会进行阻塞：LockSupport.park(this)<br/>并等待唤醒\nnote left of AQS: ReentrantLock的lock方法<br/>对于获取到锁的线程来说，是响应中断的<br/>对于同步队列中的线程，是不响应中断的<br/>也就是如果对同步队列中的线程进行中断,是没有任何作用的<br/>如果希望同步队列中的线程可以响应中断，需要使用lockInterruptibly方法\n```\n\n\n\n![image-20230510104837568](JUC并发之ReentrantLock[AQS].assets/image-20230510104837568.png)\n\n\n\n## 响应中断和不可响应中断\n\n在Java中，运行中的线程，是不能通过程序的方式让它直接死亡的。\n\n那么，你可能会问？中断不是让线程死亡嘛？\n\n- 不是\n\n对于运行中的线程来说，中断只是将这个线程的中断标识位改成了 true，但是此时线程还是在继续运行的。\n\n不管是synchronized关键字，还是ReentrantLock，都是这样的。\n\n下面是验证代码\n\n```java\npackage com.zs.j3y4.thread.lock;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class InterruptReentrantLockDemo {\n    public static void main(String[] args) throws InterruptedException {\n\n        ReentrantLock lock = new ReentrantLock();\n        Thread t1 = new Thread(() -> {\n            try {\n                lock.lockInterruptibly();\n\n                System.out.println(\"Thread 1: Acquired lock. Running...\");\n                // 模拟一些耗时操作，但没有适当地检查中断状态\n                while (true) {\n                    for (int i = 0; i < Integer.MAX_VALUE; i++) {\n                        // do nothing\n                    }\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        });\n\n        t1.start();\n        Thread.sleep(2000);\n\n        // 中断线程t1\n        System.out.println(\"Thread Main : interrupt Thread T1\");\n        System.out.println(\"Thread Main : print Thread 1 interrupt flag :\"+t1.isInterrupted());\n        t1.interrupt();\n        System.out.println(\"Thread Main : print Thread 1 interrupt flag :\"+t1.isInterrupted());\n    }\n}\n\n```\n\n它的打印结果是（注意此时程序还是在运行中的）\n\n```java\nThread 1: Acquired lock. Running...\nThread Main : interrupt Thread T1\nThread Main : print Thread 1 interrupt flag :false\nThread Main : print Thread 1 interrupt flag :true\n```\n\n注意此时程序还是在运行中的，而且我们可以看到，Thread 1 的interrupt 标识已经改成了true\n\n\n\n那么什么时候，可以立即响应中断呢。\n\n- 当线程处于等待或者阻塞状态（如等待锁、等待I/O操作、等待超时等），此时被其他线程中断时，会抛出InterruptedException异常，并清除中断状态标志位\n\n下面是验证代码\n\n```java\npackage com.zs.j3y4.thread.lock;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class InterruptReentrantLockDemo {\n    public static void main(String[] args) throws InterruptedException {\n\n        ReentrantLock lock = new ReentrantLock();\n        Thread t1 = new Thread(() -> {\n            try {\n                lock.lockInterruptibly();\n\n                System.out.println(\"Thread 1: Acquired lock. Running...\");\n                Thread.sleep(10000);\n\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        });\n\n        t1.start();\n        Thread.sleep(2000);\n\n        // 中断线程t1\n        System.out.println(\"Thread Main : interrupt Thread T1\");\n        System.out.println(\"Thread Main : print Thread 1 interrupt flag :\"+t1.isInterrupted());\n        t1.interrupt();\n        System.out.println(\"Thread Main : print Thread 1 interrupt flag :\"+t1.isInterrupted());\n    }\n}\n\n```\n\nThread 1 启动后就开始休眠 10s 钟，但是主线程在 2s 后对Thread 1 进行中断，此时由于 Thread 1 是处于休眠状态，所以它可以立即响应中断。\n\n```java\nThread 1: Acquired lock. Running...\nThread Main : interrupt Thread T1\nThread Main : print Thread 1 interrupt flag :false\nThread Main : print Thread 1 interrupt flag :true\njava.lang.InterruptedException: sleep interrupted\n\tat java.lang.Thread.sleep(Native Method)\n\tat com.zs.j3y4.thread.lock.InterruptReentrantLockDemo.lambda$main$0(InterruptReentrantLockDemo.java:14)\n\tat java.lang.Thread.run(Thread.java:748)\n\nProcess finished with exit code 0\n```\n\n\n\n\n\n对于ReentrantLock的同步队列来说，我们知道同步队列中的Node（其实也就是线程）都是处于阻塞状态的。\n\n我们又知道，在一般情况下，阻塞状态的线程是立即响应中断的。\n\n但是，通过验证我们发现，ReentrantLock的同步队列中的线程，是不可响应中断的。\n\n下面是验证代码\n\n```java\npackage com.zs.j3y4.thread.lock;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ReentrantLockDemo {\n    private static ReentrantLock lock = new ReentrantLock();\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            System.out.println(\"Thread 1: Trying to acquire lock...\");\n            lock.lock();\n            try {\n                System.out.println(\"Thread 1: Lock acquired. Waiting for 10 seconds.\");\n                Thread.sleep(10000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n                System.out.println(\"Thread 1: Lock released.\");\n            }\n        });\n\n        Thread t2 = new Thread(() -> {\n            System.out.println(\"Thread 2: Trying to acquire lock...\");\n            lock.lock();\n            try {\n                System.out.println(\"Thread 2: Lock acquired.\");\n            } finally {\n                lock.unlock();\n                System.out.println(\"Thread 2: Lock released.\");\n            }\n        });\n\n        t1.start();\n        Thread.sleep(1000);\n\n        t2.start();\n        Thread.sleep(2000);\n\n        // 在此处中断线程t2\n        System.out.println(\"Thread 2 interrupted status is : \" +t2.isInterrupted());\n        t2.interrupt();\n        System.out.println(\"Thread 2 interrupted status is : \" +t2.isInterrupted());\n    }\n\n}\n\n```\n\n开始两个线程，Thread 1 先执行，此时可以拿到锁，然后休眠10s；之后Thread 2 开始执行，2s 之后，对Thread 2 进行中断。\n\n运行结果如下\n\n```java\nThread 1: Trying to acquire lock...\nThread 1: Lock acquired. Waiting for 10 seconds.\nThread 2: Trying to acquire lock...\nThread 2 interrupted status is : false\nThread 2 interrupted status is : true\nThread 1: Lock released.\nThread 2: Lock acquired.\nThread 2: Lock released.\n\nProcess finished with exit code 0\n```\n\n我们发现 Thread 2 的中断标识位发生了变化，但是并没有立即中断。\n\n\n\n那么，怎么让同步队列中的线程，立即响应中断呢。就需要使用ReentrantLock提供的lockInterruptibly方法，就可以立即响应中断了。\n\n下面是验证代码\n\n```java\npackage com.zs.j3y4.thread.lock;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ReentrantLockDemo {\n    private static ReentrantLock lock = new ReentrantLock();\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            System.out.println(\"Thread 1: Trying to acquire lock...\");\n            lock.lock();\n            try {\n                System.out.println(\"Thread 1: Lock acquired. Waiting for 10 seconds.\");\n                Thread.sleep(10000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n                System.out.println(\"Thread 1: Lock released.\");\n            }\n        });\n\n        Thread t2 = new Thread(() -> {\n            System.out.println(\"Thread 2: Trying to acquire lock...\");\n            try {\n                lock.lockInterruptibly();\n                System.out.println(\"Thread 2: Lock acquired.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n                System.out.println(\"Thread 2: Lock released.\");\n            }\n        });\n\n        t1.start();\n        Thread.sleep(1000);\n\n        t2.start();\n        Thread.sleep(2000);\n\n        // 在此处中断线程t2\n        System.out.println(\"Thread 2 interrupted status is : \" +t2.isInterrupted());\n        t2.interrupt();\n        System.out.println(\"Thread 2 interrupted status is : \" +t2.isInterrupted());\n    }\n\n}\n\n```\n\n运行结果如下\n\n```java\nThread 1: Trying to acquire lock...\nThread 1: Lock acquired. Waiting for 10 seconds.\nThread 2: Trying to acquire lock...\nThread 2 interrupted status is : false\nThread 2 interrupted status is : true\njava.lang.InterruptedException\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchronizer.java:900)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1225)\n\tat java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:340)\n\tat com.zs.j3y4.thread.lock.ReentrantLockDemo.lambda$main$1(ReentrantLockDemo.java:37)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"Thread-1\" java.lang.IllegalMonitorStateException\n\tat java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:154)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1265)\n\tat java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:462)\n\tat com.zs.j3y4.thread.lock.ReentrantLockDemo.lambda$main$1(ReentrantLockDemo.java:42)\n\tat java.lang.Thread.run(Thread.java:748)\nThread 1: Lock released.\n\nProcess finished with exit code 0\n```\n\n\n\n\n\n对于ReentrantLock的同步队列中的线程，默认是不响应中断的\n\n也就是如果对同步队列中的线程进行中断, 是没有任何作用的，只是中断标识位的修改\n\n如果希望同步队列中的线程可以响应中断，需要使用lockInterruptibly方法\n\n\n\n\n\n## AQS的底层实现原理\n\n其实底层实现原理还是CAS，加队列\n\n\n\n## AQS是一个抽象类，为啥没有抽象方法\n\nAQS用到的设计模式是：模板方法设计模式\n\n正常情况来说，模板方法应该会有一些方法用于给子类实现。\n\n而AQS正好也是一个抽象类，也用到了模板方法设计模式，但是我们发现它里面需要子类实现的模板方法，默认都有一个 ”抛出异常“ 的实现。\n\n```java\n\t//.....\n\t\n\tprotected boolean tryAcquire(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    protected boolean tryRelease(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    protected int tryAcquireShared(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\n    protected boolean tryReleaseShared(int arg) {\n        throw new UnsupportedOperationException();\n    }\n\t//.....\n```\n\n\n\n这是为什么呢？为什么不直接定义成抽象方法呢？\n\n- 这是因为AQS不仅用在了 ReentrantLock 中，用于实现独占锁。\n- 还用在了其他类的实现中，用于实现共享锁，等等。\n- 而 独占锁 需要实现：tryAcquire 和 tryRelease\n- 而 共享锁 需要实现：tryAcquireShared 和 tryReleaseShared\n\n如果设计成 抽象方法，那么这些方法都要在子类实现。 子类就会显得很臃肿。所以都添加了一个默认 “抛出异常” 的实现\n\n\n\n## 相关资料\n\nhttps://www.bilibili.com/video/BV1mP4y1i7Vm\n\nB站这位up主的视频讲解的挺好的\n\n\n\n\n\n","tags":["JUC","锁","ReentrantLock","AQS"],"categories":["JAVA","JUC"]},{"title":"大厂面试之MySQL篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之MySQL篇/","content":"\n## 什么是内连接、外连接、交叉连接、笛卡尔积呢？\n\n可以参考：《mysql的连接查询》一文\n\n内连接（inner join）：两张表的交集部分\n\n外连接（outer join）：分为左外连接：左表全部记录 + 右表相关联记录；右外连接：右表全部记录+左表相关联的记录；全外连接：MySQL不支持\n\n交叉连接（cross join）：就是笛卡尔积\n\n笛卡尔积：是数学中的一个概念，例如集合A={a,b}，集合B={1,2,3}，那么A✖️B={<a,1>,<a,2>,<a,3>,<b,1>,<b,2>,<b,3>,}。\n\n\n\n## 那MySQL 的内连接、左连接、右连接有有什么区别？\n\n\n\nMySQL的连接主要分为内连接和外连接，外连接常用的有左连接、右连接。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357568190-87bc420f-4bee-4bec-9c75-4fcd78e5efd9.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n\n\ninner join 内连接，在两张表进行连接查询时，只保留两张表中完全匹配的结果集\n\n\n\nleft join 在两张表进行连接查询时，会返回左表所有的行，即使在右表中没有匹配的记录。\n\n\n\nright join 在两张表进行连接查询时，会返回右表所有的行，即使在左表中没有匹配的记录。\n\n\n\n## 说一下数据库的三大范式？\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/image-20230506160642634.png\" alt=\"image-20230506160642634\" style=\"zoom:50%;\" />\n\n\n\n第一范式：数据表中的每一列（每个字段）都不可以再拆分。例如用户表，用户地址还可以拆分成国家、省份、市，这样才是符合第一范式的。\n\n\n\n第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。例如订单表里，存储了商品信息（商品价格、商品类型），那就需要把商品ID和订单ID作为联合主键，才满足第二范式。\n\n\n\n第三范式：在满足第二范式的基础上，表中的非主键只依赖于主键，而不依赖于其他非主键。例如订单表，就不能存储用户信息（姓名、地址）。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/image-20230506160625797.png\" alt=\"image-20230506160625797\" style=\"zoom:50%;\" />\n\n\n\n三大范式的作用是为了控制数据库的冗余，是对空间的节省，实际上，一般互联网公司的设计都是反范式的，通过冗余一些数据，避免跨表跨库，利用空间换时间，提高性能。\n\n\n\n## varchar与char的区别？\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357574699-602d72e0-bfd3-4a57-b567-4861e8324885.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**char**：\n\n\n\n- char表示定长字符串，长度是固定的；\n\n- 如果插入数据的长度小于char的固定长度时，则用空格填充；\n\n- 因为长度固定，所以存取速度要比varchar快很多，甚至能快50%，但正因为其长度固定，所以会占据多余的空间，是空间换时间的做法；\n\n- 对于char来说，最多能存放的字符个数为255，和编码无关\n\n\n\n**varchar**：\n\n\n\n- varchar表示可变长字符串，长度是可变的；\n\n- 插入的数据是多长，就按照多长来存储；\n\n- varchar在存取方面与char相反，它存取慢，因为长度不固定，但正因如此，不占据多余的空间，是时间换空间的做法；\n\n- 对于varchar来说，最多能存放的字符个数为65532\n\n\n\n日常的设计，对于长度相对固定的字符串，可以使用char，对于长度不确定的，使用varchar更合适一些。\n\n\n\n## blob和text有什么区别？\n\n\n\nblob用于存储二进制数据，而text用于存储大字符串。\n\n\n\nblob没有字符集，text有一个字符集，并且根据字符集的校对规则对值进行排序和比较\n\n\n\n## DATETIME和TIMESTAMP的异同？\n\n\n\n**相同点**：\n\n\n\n1、两个数据类型存储时间的表现格式一致。均为 `YYYY-MM-DD HH:MM:SS`\n\n\n\n2、两个数据类型都包含「日期」和「时间」部分。\n\n\n\n3、两个数据类型都可以存储微秒的小数秒（秒后6位小数秒）\n\n\n\n**区别**：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357576737-3942122f-f63a-4b91-9ae2-beb0055ff904.png)\n\n\n\n1、**日期范围**：DATETIME 的日期范围是 `1000-01-01 00:00:00.000000` 到 `9999-12-31 23:59:59.999999`；TIMESTAMP 的时间范围是`1970-01-01 00:00:01.000000` UTC`到 ``2038-01-09 03:14:07.999999` UTC\n\n\n\n2、**存储空间**：DATETIME 的存储空间为 8 字节；TIMESTAMP 的存储空间为 4 字节\n\n\n\n3、**时区相关**：DATETIME 存储时间与时区无关；TIMESTAMP 存储时间与时区有关，显示的值也依赖于时区\n\n\n\n4、**默认值**：DATETIME 的默认值为 null；TIMESTAMP 的字段默认不为空(not null)，默认值为当前时间(CURRENT_TIMESTAMP)\n\n\n\n## MySQL中 in 和 exists 的区别？\n\n\n\nMySQL中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对内表进行查询。我们可能认为exists比in语句的效率要高，这种说法其实是不准确的，要区分情景：\n\n\n\n1、如果查询的两个表大小相当，那么用in和exists差别不大。\n\n\n\n2、如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。\n\n\n\n3、not in 和not exists：如果查询语句使用了not in，那么内外表都进行全表扫描，没有用到索引；而not extsts的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。\n\n\n\n## MySQL里记录货币用什么字段类型比较好？\n\n\n\n货币在数据库中MySQL常用Decimal和Numric类型表示，这两种类型被MySQL实现为同样的类型。他们被用于保存与货币有关的数据。\n\n\n\n例如salary DECIMAL(9,2)，9(precision)代表将被用于存储值的总的小数位数，而2(scale)代表将被用于存储小数点后的位数。存储在salary列中的值的范围是从-9999999.99到9999999.99。\n\n\n\nDECIMAL和NUMERIC值作为字符串存储，而不是作为二进制浮点数，以便保存那些值的小数精度。\n\n\n\n之所以不使用float或者double的原因：因为float和double是以二进制存储的，所以有一定的误差。\n\n\n\n## MySQL怎么存储emoji😊?\n\n\n\nMySQL可以直接使用字符串存储emoji。\n\n\n\n但是需要注意的，utf8 编码是不行的，MySQL中的utf8是阉割版的 utf8，它最多只用 3 个字节存储字符，所以存储不了表情。那该怎么办？\n\n\n\n需要使用utf8mb4编码。\n\n\n\n```sql\nalter table blogs modify content text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci not null;\n```\n\n\n\n## drop、delete与truncate的区别？\n\n\n\n三者都表示删除，但是三者有一些差别：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357580659-bb5f1098-da63-4858-b352-357c9e8709cb.png)\n\n\n\n因此，在不再需要一张表的时候，用drop；在想删除部分数据行时候，用delete；在保留表而删除所有数据的时候用truncate。\n\n\n\n## UNION与UNION ALL的区别？\n\n\n\n如果使用UNION ALL，不会合并重复的记录行\n\n\n\n效率 UNION ALL 高于 UNION\n\n\n\n## count(1)、count(*) 与 count(列名) 的区别？\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357582314-8ceb513a-0eee-4140-ab11-d356dc098877.png)\n\n\n\n**执行效果**：\n\n\n\ncount(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL\n\n\n\ncount(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL\n\n\n\ncount(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。\n\n\n\n**执行速度**：\n\n\n\n列名为主键，count(列名)会比count(1)快\n\n\n\n列名不为主键，count(1)会比count(列名)快\n\n\n\n如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）\n\n\n\n如果有主键，则 select count（主键）的执行效率是最优的\n\n\n\n如果表只有一个字段，则 select count（*）最优。\n\n\n\n## 一条SQL查询语句的执行顺序？\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357584566-72310962-9de4-4945-b71b-9a7913636bed.png)\n\n\n\n1、**FROM**：对FROM子句中的左表<left_table>和右表<right_table>执行笛卡儿积（Cartesianproduct），产生虚拟表VT1\n\n\n\n2、**ON**：对虚拟表VT1应用ON筛选，只有那些符合<join_condition>的行才被插入虚拟表VT2中\n\n\n\n3、**JOIN**：如果指定了OUTER JOIN（如LEFT OUTER JOIN、RIGHT OUTER JOIN），那么保留表中未匹配的行作为外部行添加到虚拟表VT2中，产生虚拟表VT3。如果FROM子句包含两个以上表，则对上一个连接生成的结果表VT3和下一个表重复执行步骤1）～步骤3），直到处理完所有的表为止\n\n\n\n4、**WHERE**：对虚拟表VT3应用WHERE过滤条件，只有符合<where_condition>的记录才被插入虚拟表VT4中\n\n\n\n5、**GROUP BY**：根据GROUP BY子句中的列，对VT4中的记录进行分组操作，产生VT5\n\n\n\n6、**CUBE|ROLLUP**：对表VT5进行CUBE或ROLLUP操作，产生表VT6\n\n\n\n7、**HAVING**：对虚拟表VT6应用HAVING过滤器，只有符合<having_condition>的记录才被插入虚拟表VT7中。\n\n\n\n8、**SELECT**：第二次执行SELECT操作，选择指定的列，插入到虚拟表VT8中\n\n\n\n9、**DISTINCT**：去除重复数据，产生虚拟表VT9\n\n\n\n10、**ORDER BY**：将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10。11）\n\n\n\n11、**LIMIT**：取出指定行的记录，产生虚拟表VT11，并返回给查询用户\n\n\n\n## 说说 MySQL 的基础架构?\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357586455-2b9e867b-819d-4719-b59e-cfc296026098.png)\n\n\n\nMySQL逻辑架构图主要分三层：\n\n\n\n- 客户端：最上层的服务并不是MySQL所独有的，大多数基于网络的客户端/服务器的工具或者服务都有类似的架构。比如连接处理、授权认证、安全等等。\n\n- Server层：大多数MySQL的核心服务功能都在这一层，包括查询解析、分析、优化、缓存以及所有的内置函数（例如，日期、时间、数学和加密函数），所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。\n\n- 存储引擎层：第三层包含了存储引擎。存储引擎负责MySQL中数据的存储和提取。Server层通过API与存储引擎进行通信。这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。\n\n\n\n## 一条 SQL 查询语句在 MySQL 中如何执行的？\n\n\n\n权限校验：先检查该语句`是否有权限`，如果没有权限，直接返回错误信息，如果有权限会先查询缓存 (MySQL8.0 版本以前)。\n\n查询缓存：有缓存直接返回结果\n\n分析器：如果没有缓存，分析器进行`词法分析`，`语法分析`，提取 sql 语句中 select 等关键元素，然后判断 sql 语句是否有语法错误，比如关键词是否正确等等。\n\n优化器：语法解析之后，MySQL的服务器会对查询的语句进行优化，比如索引的选择，确定执行的方案。\n\n完成查询优化后，按照生成的执行计划`调用数据库引擎接口`，返回执行结果。\n\n\n\n## 对于一个查询select * from T where K=1；如果K列不存在，会在哪一个阶段报错\n\n分析器。\n\n具体来说分析器做了三部分工作\n\n1. 词法分析阶段（Lexical Analysis）：将SQL语句分解成一个个的词法单元（token），例如关键字、表名、字段名、运算符等。\n2. 语法分析阶段（Syntax Analysis）：根据SQL语法规则，将词法单元组合成语法树，并检查语法是否正确。如果SQL语句不符合语法规则，会在此阶段报错。\n3. 语义分析阶段（Semantic Analysis）：检查SQL语句中使用的表和字段是否存在，并检查数据类型是否匹配。如果SQL语句中使用了不存在的表或字段，或者数据类型不匹配，会在此阶段报错。\n\n题目是说K列不存在，会在分析器报错，如果是表T不存在，同样的，也是在分析器报错。\n\n## MySQL有哪些常见存储引擎？\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357588716-46b16305-5a4d-4f41-8bb3-11b6e7e7ae70.png)\n\n\n\n主要存储引擎以及功能如下：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357590878-880db4fa-618e-4fbc-8e2e-93e0477264df.png)\n\n\n\nMySQL5.5之前，默认存储引擎是MylSAM，5.5之后变成了InnoDB。\n\n\n\nInnoDB支持的哈希索引是自适应的，InnoDB会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表中生成哈希索引。\n\n\n\nMySQL 5.6开始InnoDB支持全文索引。\n\n\n\n## 存储引擎应该怎么选择？\n\n\n\n大致上可以这么选择：\n\n\n\n- 大多数情况下，使用默认的InnoDB就够了。如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 就是比较靠前的选择了。\n\n- 如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。\n\n- 如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为**临时表**，存放查询的中间结果。\n\n\n\n使用哪一种引擎可以根据需要灵活选择，因为存储引擎是基于表的，所以一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求。使用合适的存储引擎将会提高整个数据库的性能。\n\n\n\n## InnoDB和MylSAM主要有什么区别？\n\n\n\nPS:MySQL8.0都开始慢慢流行了，如果不是面试，MylSAM其实可以不用怎么了解。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357593167-0bad9423-e355-4a4b-ad34-47ff9d7cc590.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**1、 存储结构**：每个MyISAM在磁盘上存储成三个文件；InnoDB所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。\n\n\n\n**2、事务支持**：MyISAM不提供事务支持；InnoDB提供事务支持事务，具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全特性。\n\n\n\n**3、最小锁粒度**：MyISAM只支持表级锁，更新时会锁住整张表，导致其它查询和更新都会被阻塞InnoDB支持行级锁。\n\n\n\n**4、 索引类型**：MyISAM的索引为聚簇索引，数据结构是B树；InnoDB的索引是非聚簇索引，数据结构是B+树。\n\n\n\n**5、主键必需**：MyISAM允许没有任何索引和主键的表存在；InnoDB如果没有设定主键或者非空唯一索引，**就会自动生成一个6字节的主键(用户不可见)**，数据是主索引的一部分，附加索引保存的是主索引的值。\n\n\n\n**6、 表的具体行数**：MyISAM保存了表的总行数，如果select count(*) from table;会直接取出出该值; InnoDB没有保存表的总行数，如果使用select count(*) from table；就会遍历整个表;但是在加了wehre条件后，MyISAM和InnoDB处理的方式都一样。\n\n\n\n**7、 外键支持**：MyISAM不支持外键；InnoDB支持外键。\n\n\n\n## MySQL日志文件有哪些？分别介绍下作用？\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357595946-45e12c2d-f64b-4a39-b210-967f9d52bf05.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\nMySQL日志文件有很多，包括 ：\n\n\n\n- **错误日志**（error log）：错误日志文件对MySQL的启动、运行、关闭过程进行了记录，能帮助定位MySQL问题。\n\n- **慢查询日志**（slow query log）：慢查询日志是用来记录执行时间超过 long_query_time 这个变量定义的时长的查询语句。通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。\n\n- **一般查询日志**（general log）：一般查询日志记录了所有对MySQL数据库请求的信息，无论请求是否正确执行。\n\n- **二进制日志**（bin log）：关于二进制日志，它记录了数据库所有执行的DDL和DML语句（除了数据查询语句select、show等），以事件形式记录并保存在二进制文件中。\n\n\n\n还有两个InnoDB存储引擎特有的日志文件：\n\n\n\n- **重做日志**（redo log）：重做日志至关重要，因为它们记录了对于InnoDB存储引擎的事务日志。\n\n- **回滚日志**（undo log）：回滚日志同样也是InnoDB引擎提供的日志，顾名思义，回滚日志的作用就是对数据进行回滚。当事务对数据库进行修改，InnoDB引擎不仅会记录redo log，还会生成对应的undo log日志；如果事务执行失败或调用了rollback，导致事务需要回滚，就可以利用undo log中的信息将数据回滚到修改之前的样子。\n\n\n\n## binlog和redo log有什么区别？\n\n\n\nbin log会记录所有与数据库有关的日志记录，包括InnoDB、MyISAM等存储引擎的日志，而redo log只记InnoDB存储引擎的日志。\n\n\n\n记录的内容不同，bin log记录的是关于一个事务的具体操作内容，即该日志是逻辑日志。而redo log记录的是关于每个页（Page）的更改的物理情况。\n\n\n\n写入的时间不同，bin log仅在事务提交前进行提交，也就是只写磁盘一次。而在事务进行的过程中，却不断有redo ertry被写入redo log中。\n\n\n\n写入的方式也不相同，redo log是循环写入和擦除，bin log是追加写入，不会覆盖已经写的文件。\n\n\n\n## 一条更新语句怎么执行的了解吗？\n\n\n\n更新语句的执行是Server层和引擎层配合完成，数据除了要写入表中，还要记录相应的日志。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357598257-58e3d9b5-3538-4141-a567-8ead55b5b328.png)\n\n\n\n1、执行器先找引擎获取ID=2这一行。ID是主键，存储引擎检索数据，找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。\n\n\n\n2、执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据。\n\n\n\n3、引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。\n\n\n\n4、执行器生成这个操作的binlog，并把binlog写入磁盘。\n\n\n\n5、执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。\n\n\n\n从上图可以看出，MySQL在执行更新语句的时候，在服务层进行语句的解析和执行，在引擎层进行数据的提取和存储；同时在服务层对binlog进行写入，在InnoDB内进行redo log的写入。\n\n\n\n不仅如此，在对redo log写入时有两个阶段的提交，一是binlog写入之前`prepare`状态的写入，二是binlog写入之后`commit`状态的写入。\n\n\n\n## 那为什么要两阶段提交呢？\n\n\n\n为什么要两阶段提交呢？直接提交不行吗？\n\n\n\n我们可以假设不采用两阶段提交的方式，而是采用“单阶段”进行提交，即要么先写入redo log，后写入binlog；要么先写入binlog，后写入redo  log。这两种方式的提交都会导致原先数据库的状态和被恢复后的数据库的状态不一致。\n\n\n\n**先写入redo log，后写入binlog：**\n\n\n\n在写完redo log之后，数据此时具有`crash-safe`能力，因此系统崩溃，数据会恢复成事务开始之前的状态。但是，若在redo log写完时候，binlog写入之前，系统发生了宕机。此时binlog没有对上面的更新语句进行保存，导致当使用binlog进行数据库的备份或者恢复时，就少了上述的更新语句。从而使得`id=2`这一行的数据没有被更新。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357600838-ce9ff617-9879-4ea9-9ebf-be64796c302b.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n**先写入binlog，后写入redo log：**\n\n\n\n写完binlog之后，所有的语句都被保存，所以通过binlog复制或恢复出来的数据库中id=2这一行的数据会被更新为a=1。但是如果在redo log写入之前，系统崩溃，那么redo log中记录的这个事务会无效，导致实际数据库中`id=2`这一行的数据并没有更新。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357603005-83f1582a-4778-4ca3-981d-f98af843582a.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n简单说，redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。\n\n\n\n## redo log什么时候会刷盘？\n\n\n\nredo log的写入不是直接落到磁盘，而是在内存中设置了一片称之为`redo log buffer`的连续内存空间，也就是`redo 日志缓冲区`。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357606264-554ef641-0a87-40ea-9c7d-86a6b7435584.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n**什么时候会刷入磁盘？**\n\n\n\n在如下的一些情况中，log buffer的数据会刷入磁盘：\n\n\n\n**1、log buffer 空间不足时**\n\n\n\nlog buffer 的大小是有限的，如果不停的往这个有限大小的 log buffer 里塞入日志，很快它就会被填满。如果当前写入 log buffer 的redo 日志量已经占满了 log buffer 总容量的大约**一半**左右，就需要把这些日志刷新到磁盘上。\n\n\n\n**2、事务提交时**\n\n\n\n在事务提交时，为了保证持久性，会把log buffer中的日志全部刷到磁盘。注意，这时候，除了本事务的，可能还会刷入其它事务的日志。\n\n\n\n**3、后台线程输入**\n\n\n\n有一个后台线程，大约每秒都会刷新一次`log buffer`中的`redo log`到磁盘。\n\n\n\n**4、正常关闭服务器时**\n\n\n\n**5、触发checkpoint规则**\n\n\n\n重做日志缓存、重做日志文件都是以**块（block）**的方式进行保存的，称之为**重做日志块（redo log block）**,块的大小是固定的512字节。我们的redo log它是固定大小的，可以看作是一个逻辑上的 **log group**，由一定数量的**log block** 组成。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357608646-14d245a3-9faa-4593-aa70-fd8784d0b714.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n它的写入方式是从头到尾开始写，写到末尾又回到开头循环写。\n\n\n\n其中有两个标记位置：\n\n\n\n`write pos`是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。`checkpoint`是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到磁盘。\n\n\n\n<img src=\"大厂面试之MySQL篇.assets/1676357610747-90ac9716-8fe8-4ea9-a32b-0e314d565ee1.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n\n\n当`write_pos`追上`checkpoint`时，表示redo log日志已经写满。这时候就不能接着往里写数据了，需要执行`checkpoint`规则腾出可写空间。\n\n\n\n所谓的**checkpoint规则**，就是checkpoint触发后，将buffer中日志页都刷到磁盘。\n\n\n\n## redolog是怎么刷盘的？\n\n组提交\n\n\n\n\n\n## 慢SQL如何定位呢？\n\n\n\n慢SQL的监控主要通过两个途径：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357613069-3c736aa1-b094-4484-9403-05dd3f08940b.png)\n\n\n\n**慢查询日志**：开启MySQL的慢查询日志，再通过一些工具比如mysqldumpslow去分析对应的慢查询日志，当然现在一般的云厂商都提供了可视化的平台。\n\n\n\n**服务监控**：可以在业务的基建中加入对慢SQL的监控，常见的方案有字节码插桩、连接池扩展、ORM框架过程，对服务运行中的慢SQL进行监控和告警。\n\n\n\n## 有哪些方式优化慢SQL？\n\n\n\n慢SQL的优化，主要从两个方面考虑，SQL语句本身的优化，以及数据库设计的优化。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357614829-943b2704-4795-4dd6-952a-e8bca5f59bfd.png)\n\n\n\n### 避免不必要的列\n\n\n\n这个是老生常谈，但还是经常会出的情况，SQL查询的时候，应该只查询需要的列，而不要包含额外的列，像`slect *` 这种写法应该尽量避免。\n\n\n\n### 分页优化\n\n\n\n在数据量比较大，分页比较深的情况下，需要考虑分页的优化。\n\n\n\n例如：\n\n\n\n```sql\nselect * from table where type = 2 and level = 9 order by id asc limit 190289,10;\n```\n\n\n\n优化方案：\n\n\n\n1、**延迟关联**\n\n\n\n先通过where条件提取出主键，在将该表与原数据表关联，通过主键id提取数据行，而不是通过原来的二级索引提取数据行\n\n\n\n例如：\n\n\n\n```sql\nselect a.* from table a, \n (select id from table where type = 2 and level = 9 order by id asc limit 190289,10 ) b\n where a.id = b.id\n```\n\n\n\n2、**书签方式**\n\n\n\n书签方式就是找到limit第一个参数对应的主键值，根据这个主键值再去过滤并limit\n\n\n\n例如：\n\n\n\n```sql\n  select * from table where id >\n  (select * from table where type = 2 and level = 9 order by id asc limit 190\n```\n\n\n\n### 索引优化\n\n\n\n合理地设计和使用索引，是优化慢SQL的利器。\n\n\n\n**利用覆盖索引**\n\n\n\nInnoDB使用非主键索引查询数据时会回表，但是如果索引的叶节点中已经包含要查询的字段，那它没有必要再回表查询了，这就叫覆盖索引\n\n\n\n例如对于如下查询：\n\n\n\n```sql\nselect name from test where city='上海'\n```\n\n\n\n我们将被查询的字段建立到联合索引中，这样查询结果就可以直接从索引中获取\n\n\n\n```sql\nalter table test add index idx_city_name (city, name);\n```\n\n\n\n**低版本避免使用or查询**\n\n\n\n在 MySQL 5.0 之前的版本要尽量避免使用 or 查询，可以使用 union 或者子查询来替代，因为早期的 MySQL 版本使用 or 查询可能会导致索引失效，高版本引入了索引合并，解决了这个问题。\n\n\n\n**避免使用 != 或者 <> 操作符**\n\n\n\nSQL中，不等于操作符会导致查询引擎放弃查询索引，引起全表扫描，即使比较的字段上有索引\n\n\n\n解决方法：通过把不等于操作符改成or，可以使用索引，避免全表扫描\n\n\n\n例如，把`column<>’aaa’，改成column>’aaa’ or column<’aaa’`，就可以使用索引了\n\n\n\n**适当使用前缀索引**\n\n\n\n适当地使用前缀所云，可以降低索引的空间占用，提高索引的查询效率。\n\n\n\n比如，邮箱的后缀都是固定的“`@xxx.com`”，那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引\n\n\n\n```sql\nalter table test add index index2(email(6));\n```\n\n\n\nPS:需要注意的是，前缀索引也存在缺点，MySQL无法利用前缀索引做order by和group by 操作，也无法作为覆盖索引\n\n\n\n**避免列上函数运算**\n\n\n\n要避免在列字段上进行算术运算或其他表达式运算，否则可能会导致存储引擎无法正确使用索引，从而影响了查询的效率\n\n\n\n```sql\nselect * from test where id + 1 = 50;\nselect * from test where month(updateTime) = 7;\n```\n\n\n\n**正确使用联合索引**\n\n\n\n使用联合索引的时候，注意最左匹配原则。\n\n\n\n### JOIN优化\n\n\n\n**优化子查询**\n\n\n\n尽量使用 Join 语句来替代子查询，因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，同时对于返回结果集比较大的子查询，其对查询性能的影响更大\n\n\n\n**小表驱动大表**\n\n\n\n关联查询的时候要拿小表去驱动大表，因为关联的时候，MySQL内部会遍历驱动表，再去连接被驱动表。\n\n\n\n比如left join，左表就是驱动表，A表小于B表，建立连接的次数就少，查询速度就被加快了。\n\n\n\n```sql\n select name from A left join B ;\n```\n\n\n\n**适当增加冗余字段**\n\n\n\n增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略\n\n\n\n**避免使用JOIN关联太多的表**\n\n\n\n《阿里巴巴Java开发手册》规定不要join超过三张表，第一join太多降低查询的速度，第二join的buffer会占用更多的内存。\n\n\n\n如果不可避免要join多张表，可以考虑使用数据异构的方式异构到ES中查询。\n\n\n\n### 排序优化\n\n\n\n**利用索引扫描做排序**\n\n\n\nMySQL有两种方式生成有序结果：其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的\n\n\n\n但是如果索引不能覆盖查询所需列，就不得不每扫描一条记录回表查询一次，这个读操作是随机IO，通常会比顺序全表扫描还慢\n\n\n\n因此，在设计索引时，尽可能使用同一个索引既满足排序又用于查找行\n\n\n\n例如：\n\n\n\n```sql\n--建立索引（date,staff_id,customer_id）\nselect staff_id, customer_id from test where date = '2010-01-01' order by staff_id,customer_id;\n```\n\n\n\n只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向都一样时，才能够使用索引来对结果做排序\n\n\n\n### UNION优化\n\n\n\n**条件下推**\n\n\n\nMySQL处理union的策略是先创建临时表，然后将各个查询结果填充到临时表中最后再来做查询，很多优化策略在union查询中都会失效，因为它无法利用索引\n\n\n\n最好手工将where、limit等子句下推到union的各个子查询中，以便优化器可以充分利用这些条件进行优化\n\n\n\n此外，除非确实需要服务器去重，一定要使用union all，如果不加all关键字，MySQL会给临时表加上distinct选项，这会导致对整个临时表做唯一性检查，代价很高。\n\n\n\n## 26.怎么看执行计划（explain），如何理解其中各个字段的含义？\n\n\n\nexplain是sql优化的利器，除了优化慢sql，平时的sql编写，也应该先explain，查看一下执行计划，看看是否还有优化的空间。\n\n\n\n直接在 select 语句之前增加`explain`关键字，就会返回执行计划的信息。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357620172-0ee342b7-462a-43e3-b09b-4062afe3a65a.png)\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357621736-4463b2b4-d741-48e4-b3b7-c1d9566305b7.png)\n\n\n\n**id** 列：MySQL会为每个select语句分配一个唯一的id值\n\n\n\n**select_type** 列，查询的类型，根据关联、union、子查询等等分类，常见的查询类型有SIMPLE、PRIMARY。\n\n\n\n**table** 列：表示 explain 的一行正在访问哪个表。\n\n\n\n**type** 列：最重要的列之一。表示关联类型或访问类型，即 MySQL 决定如何查找表中的行。\n\n\n\n性能从最优到最差分别为：system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n\n\n\n- `system`：当表仅有一行记录时(系统表)，数据量很少，往往不需要进行磁盘IO，速度非常快\n\n\n\n`const`：表示查询时命中 `primary key` 主键或者 `unique` 唯一索引，或者被连接的部分是一个常量(`const`)值。这类扫描效率极高，返回数据量少，速度非常快。\n\n\n\n- `eq_ref`：查询时命中主键`primary key` 或者 `unique key`索引， `type` 就是 `eq_ref`。\n\n- `ref_or_null`：这种连接类型类似于 ref，区别在于 `MySQL`会额外搜索包含`NULL`值的行。\n\n- index_merge：使用了索引合并优化方法，查询使用了两个以上的索引。\n\n- unique_subquery：替换下面的 `IN`子查询，子查询返回不重复的集合。\n\n- index_subquery：区别于`unique_subquery`，用于非唯一索引，可以返回重复值。\n\n- range：使用索引选择行，仅检索给定范围内的行。简单点说就是针对一个有索引的字段，给定范围检索数据。在`where`语句中使用 `bettween...and`、`<`、`>`、`<=`、`in` 等条件查询 `type` 都是 `range`。\n\n- index：`Index` 与`ALL` 其实都是读全表，区别在于`index`是遍历索引树读取，而`ALL`是从硬盘中读取。\n\n- ALL：就不用多说了，全表扫描。\n\n\n\n**possible_keys** 列：显示查询可能使用哪些索引来查找，使用索引优化sql的时候比较重要。\n\n\n\n**key** 列：这一列显示 mysql 实际采用哪个索引来优化对该表的访问，判断索引是否失效的时候常用。\n\n\n\n**key_len** 列：显示了 MySQL使用\n\n\n\n**ref** 列：ref 列展示的就是与索引列作等值匹配的值，常见的有：const（常量），func，NULL，字段名。\n\n\n\n**rows** 列：这也是一个重要的字段，MySQL查询优化器根据统计信息，估算SQL要查到结果集需要扫描读取的数据行数，这个值非常直观显示SQL的效率好坏，原则上rows越少越好。\n\n\n\n**Extra** 列：显示不适合在其它列的额外信息，虽然叫额外，但是也有一些重要的信息：\n\n\n\n- Using index：表示MySQL将使用覆盖索引，以避免回表\n\n- Using where：表示会在存储引擎检索之后再进行过滤\n\n- Using temporary ：表示对查询结果排序时会使用一个临时表。\n\n\n\n索引可以说是MySQL面试中的重中之重，一定要彻底拿下。\n\n\n\n## 能简单说一下索引的分类吗？\n\n\n\n从三个不同维度对索引分类：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357625007-118cd5e6-3513-49df-a1bd-9b72b1794537.png)\n\n\n\n例如从基本使用使用的角度来讲：\n\n\n\n- 主键索引: InnoDB主键是默认的索引，数据列不允许重复，不允许为NULL，一个表只能有一个主键。\n\n- 唯一索引: 数据列不允许重复，允许为NULL值，一个表允许多个列创建唯一索引。\n\n- 普通索引: 基本的索引类型，没有唯一性的限制，允许为NULL值。\n\n- 组合索引：多列值组成一个索引，用于组合搜索，效率大于索引合并\n\n\n\n## 为什么使用索引会加快查询？\n\n\n\n传统的查询方法，是按照表的顺序遍历的，不论查询几条数据，MySQL需要将表的数据从头到尾遍历一遍。\n\n\n\n在我们添加完索引之后，MySQL一般通过BTREE算法生成一个索引文件，在查询数据库时，找到索引文件进行遍历，在比较小的索引数据里查找，然后映射到对应的数据，能大幅提升查找的效率。\n\n\n\n和我们通过书的目录，去查找对应的内容，一样的道理。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357627167-bf897395-9525-4294-aa10-1ae7759d5752.png)\n\n\n\n## 创建索引有哪些注意点？\n\n\n\n索引虽然是sql性能优化的利器，但是索引的维护也是需要成本的，所以创建索引，也要注意：\n\n\n\n**1、索引应该建在查询应用频繁的字段**\n\n在用于 where 判断、 order 排序和 join 的(on)字段上创建索引。\n\n\n\n**2、索引的个数应该适量**\n\n索引需要占用空间；更新时候也需要维护。\n\n\n\n**3、区分度低的字段，例如性别，不要建索引。**\n\n离散度太低的字段，扫描的行数降低的有限。\n\n\n\n**4、频繁更新的值，不要作为主键或者索引**\n\n维护索引文件需要成本；还会导致页分裂，IO次数增多。\n\n\n\n**5、组合索引把散列性高(区分度高)的值放在前面**\n\n为了满足最左前缀匹配原则\n\n\n\n**6、创建组合索引，而不是修改单列索引。**\n\n组合索引代替多个单列索引（对于单列索引，MySQL基本只能使用一个索引，所以经常使用多个条件查询时更适合使用组合索引）\n\n\n\n**7、过长的字段，使用前缀索引**\n\n当字段值比较长的时候，建立索引会消耗很多的空间，搜索起来也会很慢。我们可以通过截取字段的前面一部分内容建立索引，这个就叫前缀索引。\n\n\n\n**8、不建议用无序的值(例如身份证、UUID )作为索引**\n\n当主键具有不确定性，会造成叶子节点频繁分裂，出现磁盘存储的碎片化\n\n\n\n## 30.索引哪些情况下会失效呢？\n\n\n\n查询条件包含or，可能导致索引失效\n\n\n\n如果字段类型是字符串，where时一定用引号括起来，否则会因为隐式类型转换，索引失效\n\n\n\nlike通配符可能导致索引失效。\n\n\n\n联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。\n\n\n\n在索引列上使用mysql的内置函数，索引失效。\n\n\n\n对索引列运算（如，+、-、*、/），索引失效。\n\n\n\n索引字段上使用（！= 或者 < >，not in）时，可能会导致索引失效。\n\n\n\n索引字段上使用is null， is not null，可能导致索引失效。\n\n\n\n左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。\n\n\n\nMySQL优化器估计使用全表扫描要比使用索引快,则不使用索引。\n\n\n\n## 索引不适合哪些场景呢？\n\n\n\n数据量比较少的表不适合加索引\n\n\n\n更新比较频繁的字段也不适合加索引\n\n\n\n离散低的字段不适合加索引（如性别）\n\n\n\n## 索引是不是建的越多越好呢？\n\n\n\n当然不是。\n\n\n\n**索引会占据磁盘空间**\n\n\n\n**索引虽然会提高查询效率，但是会降低更新表的效率**。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。\n\n\n\n## MySQL索引用的什么数据结构了解吗？\n\n\n\nMySQL的默认存储引擎是InnoDB，它采用的是B+树结构的索引。\n\n\n\nB+树：只有叶子节点才会存储数据，非叶子节点只存储键值。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357631398-6599935f-564d-4e5d-bef9-014baf1adda1.png)\n\n\n\n在这张图里，有两个重点：\n\n\n\n- 最外面的方块，的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（粉色所示）和指针（黄色/灰色所示），如根节点磁盘包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、4、5……、65。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。\n\n- 叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表，可以进行范围查询。\n\n\n\n## 那一棵B+树能存储多少条数据呢？\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357633720-3df7eaad-55de-4384-9712-45053c2b9678.png)\n\n\n\n假设索引字段是 bigint 类型，长度为 8 字节。指针大小在 InnoDB 源码中设置为 6 字节，这样一共 14 字节。非叶子节点(一页)可以存储 16384/14=1170 个这样的 单元(键值+指针)，代表有 1170 个指针。\n\n\n\n树深度为 2 的时候，有 1170^2 个叶子节点，可以存储的数据为 1170*1170*16=**21902400**。\n\n\n\n在查找数据时一次页的查找代表一次 IO，也就是说，一张 2000 万左右的表，查询数据最多需要访问 3 次磁盘。\n\n\n\n所以在 InnoDB 中 B+ 树深度一般为 1-3 层，它就能满足千万级的数据存储。\n\n\n\n## 为什么要用 B+ 树，而不用普通二叉树？\n\n\n\n可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少，以及查找磁盘次数。\n\n\n\n**为什么不用普通二叉树？**\n\n\n\n普通二叉树存在退化的情况，如果它退化成链表，相当于全表扫描。平衡二叉树相比于二叉查找树来说，查找效率更稳定，总体的查找速度也更快。\n\n\n\n**为什么不用平衡二叉树呢？**\n\n\n\n读取数据的时候，是从磁盘读到内存。如果树这种数据结构作为索引，那每查找一次数据就需要从磁盘中读取一个节点，也就是一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果是 B+ 树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数就降下来啦，查询效率就快。\n\n\n\n## 为什么用 B+ 树而不用 B 树呢？\n\n\n\nB+相比较B树，有这些优势：\n\n\n\n-  它是 B Tree 的变种，B Tree 能解决的问题，它都能解决：B Tree 解决的两大问题：每个节点存储更多关键字；路数更多 \n\n-  扫库、扫表能力更强：如果我们要对表进行全表扫描，只需要遍历叶子节点就可以 了，不需要遍历整棵 B+Tree 拿到所有的数据。 \n\n-  B+Tree 的磁盘读写能力相对于 B Tree 来说更强，IO次数更少：根节点和枝节点不保存数据区， 所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多，IO次数更少。 \n\n-  排序能力更强：因为叶子节点上有下一个数据区的指针，数据形成了链表。 \n\n-  效率更加稳定：B+Tree 永远是在叶子节点拿到数据，所以 IO 次数是稳定的。 \n\n\n\n## Hash 索引和 B+ 树索引区别是什么？\n\n\n\nB+ 树可以进行范围查询，Hash 索引不能。\n\n\n\nB+ 树支持联合索引的最左侧原则，Hash 索引不支持。\n\n\n\nB+ 树支持 order by 排序，Hash 索引不支持。\n\n\n\nHash 索引在等值查询上比 B+ 树效率更高。\n\n\n\nB+ 树使用 like 进行模糊查询的时候，like 后面（比如 % 开头）的话可以起到优化的作用，Hash 索引根本无法进行模糊查询。\n\n\n\n## 聚簇索引与非聚簇索引的区别？\n\n\n\n首先理解聚簇索引不是一种新的索引，而是而是一种**数据存储方式**。聚簇表示数据行和相邻的键值紧凑地存储在一起。我们熟悉的两种存储引擎——MyISAM采用的是非聚簇索引，InnoDB采用的是聚簇索引。\n\n\n\n可以这么说：\n\n\n\n索引的数据结构是树，聚簇索引的索引和数据存储在一棵树上，树的叶子节点就是数据，非聚簇索引索引和数据不在一棵树上。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357639680-590c7242-3590-47e3-b491-ca688d0f3c95.png)\n\n\n\n一个表中只能拥有一个聚簇索引，而非聚簇索引一个表可以存在多个。\n\n\n\n聚簇索引，索引中键值的逻辑顺序决定了表中相应行的物理顺序；索引，索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。\n\n\n\n聚簇索引：物理存储按照索引排序；非聚集索引：物理存储不按照索引排序；\n\n\n\n## 回表了解吗？\n\n\n\n在InnoDB存储引擎里，利用辅助索引查询，先通过辅助索引找到主键索引的键值，再通过主键值查出主键索引里面没有符合要求的数据，它比基于主键索引的查询多扫描了一棵索引树，这个过程就叫回表。\n\n\n\n例如:select * from user where name = ‘张三’;\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357641538-0b24a0a6-3e29-428f-b29f-24876f0a6a87.png)\n\n\n\n## 覆盖索引了解吗？\n\n\n\n在辅助索引里面，不管是单列索引还是联合索引，如果 select 的数据列只用辅助索引中就能够取得，不用去查主键索引，这时候使用的索引就叫做覆盖索引，避免了回表。\n\n\n\n比如，`select name from user where name = ‘张三’;`\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357646730-46cbc847-f339-4ce5-9b7e-4de842c5ca84.png)\n\n\n\n## 什么是最左前缀原则/最左匹配原则？\n\n\n\n注意：最左前缀原则、最左匹配原则、最左前缀匹配原则这三个都是一个概念。\n\n\n\n**最左匹配原则**：在InnoDB的联合索引中，查询的时候只有匹配了前一个/左边的值之后，才能匹配下一个。\n\n\n\n根据最左匹配原则，我们创建了一个组合索引，如 (a1,a2,a3)，相当于创建了（a1）、(a1,a2)和 (a1,a2,a3) 三个索引。\n\n\n\n为什么不从最左开始查，就无法匹配呢？\n\n\n\n比如有一个user表，我们给 name 和 age 建立了一个组合索引。\n\n\n\n```sql\nALTER TABLE user add INDEX comidx_name_phone (name,age);\n```\n\n\n\n组合索引在 B+Tree 中是复合的数据结构，它是按照从左到右的顺序来建立搜索树的 (name 在左边，age 在右边)。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357649180-c90943b9-ab17-4b6c-8862-1566b24a94f8.png)\n\n\n\n从这张图可以看出来，name 是有序的，age 是无序的。当 name 相等的时候， age 才是有序的。\n\n\n\n这个时候我们使用`where name= ‘张三‘ and age = ‘20 ‘`去查询数据的时候， B+Tree 会优先比较 name 来确定下一步应该搜索的方向，往左还是往右。如果 name 相同的时候再比较age。但是如果查询条件没有 name，就不知道下一步应该查哪个 节点，因为建立搜索树的时候 name 是第一个比较因子，所以就没用上索引。\n\n\n\n## 42.什么是索引下推优化？\n\n\n\n索引条件下推优化`（Index Condition Pushdown (ICP) ）`是MySQL5.6添加的，用于优化数据查询。\n\n\n\n- 不使用索引条件下推优化时存储引擎通过索引检索到数据，然后返回给MySQL Server，MySQL Server进行过滤条件的判断。\n\n- 当使用索引条件下推优化时，如果存在某些被索引的列的判断条件时，MySQL Server将这一部分判断条件**下推**给存储引擎，然后由存储引擎通过判断索引是否符合MySQL Server传递的条件，只有当索引符合条件时才会将数据检索出来返回给MySQL服务器。\n\n\n\n例如一张表，建了一个联合索引（name, age），查询语句：`select * from t_user where name like '张%' and age=10;`，由于`name`使用了范围查询，根据最左匹配原则：\n\n\n\n不使用ICP，引擎层查找到`name like '张%'`的数据，再由Server层去过滤`age=10`这个条件，这样一来，就回表了两次，浪费了联合索引的另外一个字段`age`。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357651787-fcdfce4b-9a8b-4b55-8543-f478d8afb8cc.png)\n\n\n\n但是，使用了索引下推优化，把where的条件放到了引擎层执行，直接根据`name like '张%' and age=10`的条件进行过滤，减少了回表的次数。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357653715-c93daf2b-833d-4d35-bbca-28def0602d78.png)\n\n\n\n索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少MySQL服务器从存储引擎接收数据的次数。\n\n\n\n## 43.MySQL中有哪几种锁，列举一下？\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357655779-159488d4-fb1d-4db3-ac1e-28aec4391d87.png)\n\n\n\n如果按锁粒度划分，有以下3种：\n\n\n\n- 表锁：开销小，加锁快；锁定力度大，发生锁冲突概率高，并发度最低;不会出现死锁。\n\n- 行锁：开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。\n\n- 页锁：开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般\n\n\n\n如果按照兼容性，有两种，\n\n\n\n- 共享锁（S Lock）,也叫读锁（read lock），相互不阻塞。\n\n- 排他锁（X Lock），也叫写锁（write lock），排它锁是阻塞的，在一定时间内，只有一个请求能执行写入，并阻止其它锁读取正在写入的数据。\n\n\n\n## 44.说说InnoDB里的行锁实现?\n\n\n\n我们拿这么一个用户表来表示行级锁，其中插入了4行数据，主键值分别是1,6,8,12，现在简化它的聚簇索引结构，只保留数据记录。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357658796-8a74b668-ef44-4e70-9121-9960a105760c.png)\n\n\n\nInnoDB的行锁的主要实现如下：\n\n\n\n**Record Lock 记录锁**\n\n\n\n记录锁就是直接锁定某行记录。当我们使用唯一性的索引(包括唯一索引和聚簇索引)进行等值查询且精准匹配到一条记录时，此时就会直接将这条记录锁定。例如`select * from t where id =6 for update;`就会将`id=6`的记录锁定。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357662797-f2af352a-3599-46e9-a729-99e822937a8c.png)\n\n\n\n**Gap Lock 间隙锁**\n\n\n\n间隙锁(Gap Locks) 的间隙指的是两个记录之间逻辑上尚未填入数据的部分,是一个**左开右开空间**。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357660906-9b7b3410-9f8a-43c7-b088-1a09fb53c501.png)\n\n\n\n间隙锁就是锁定某些间隙区间的。当我们使用用等值查询或者范围查询，并且没有命中任何一个`record`，此时就会将对应的间隙区间锁定。例如`select * from t where id =3 for update;`或者`select * from t where id > 1 and id < 6 for update;`就会将(1,6)区间锁定。\n\n\n\n**Next-key Lock 临键锁**\n\n\n\n临键指的是间隙加上它右边的记录组成的**左开右闭区间**。比如上述的(1,6]、(6,8]等。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357667240-896d7cd6-a96f-4dad-a4f1-8a270bb1e4ec.png)\n\n\n\n临键锁就是记录锁(Record Locks)和间隙锁(Gap Locks)的结合，即除了锁住记录本身，还要再锁住索引之间的间隙。当我们使用范围查询，并且命中了部分`record`记录，此时锁住的就是临键区间。注意，临键锁锁住的区间会包含最后一个record的右边的临键区间。例如`select * from t where id > 5 and id <= 7 for update;`会锁住(4,7]、(7,+∞)。mysql默认行锁类型就是`临键锁(Next-Key Locks)`。当使用唯一性索引，等值查询匹配到一条记录的时候，临键锁(Next-Key Locks)会退化成记录锁；没有匹配到任何记录的时候，退化成间隙锁。\n\n\n\n`间隙锁(Gap Locks)`和`临键锁(Next-Key Locks)`都是用来解决幻读问题的，在`已提交读（READ COMMITTED）`隔离级别下，`间隙锁(Gap Locks)`和`临键锁(Next-Key Locks)`都会失效！\n\n\n\n上面是行锁的三种实现算法，除此之外，在行上还存在插入意向锁。\n\n\n\n**Insert Intention Lock 插入意向锁**\n\n\n\n一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了意向锁 ，如果有的话，插入操作需要等待，直到拥有 gap锁 的那个事务提交。但是事务在等待的时候也需要在内存中生成一个 锁结构 ，表明有事务想在某个 间隙 中插入新记录，但是现在在等待。这种类型的锁命名为 Insert Intention Locks ，也就是插入意向锁 。\n\n\n\n假如我们有个T1事务，给(1,6)区间加上了意向锁，现在有个T2事务，要插入一个数据，id为4，它会获取一个（1,6）区间的插入意向锁，又有有个T3事务，想要插入一个数据，id为3，它也会获取一个（1,6）区间的插入意向锁，但是，这两个插入意向锁锁不会互斥。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357669807-dc0f9770-bf4f-4c42-8f83-40536006e9dd.png)\n\n\n\n## 45.意向锁是什么知道吗？\n\n\n\n意向锁是一个表级锁，不要和插入意向锁搞混。\n\n\n\n意向锁的出现是为了支持InnoDB的多粒度锁，它解决的是表锁和行锁共存的问题。\n\n\n\n当我们需要给一个表加表锁的时候，我们需要根据去判断表中有没有数据行被锁定，以确定是否能加成功。\n\n\n\n假如没有意向锁，那么我们就得遍历表中所有数据行来判断有没有行锁；\n\n\n\n有了意向锁这个表级锁之后，则我们直接判断一次就知道表中是否有数据行被锁定了。\n\n\n\n有了意向锁之后，要执行的事务A在申请行锁（写锁）之前，数据库会自动先给事务A申请表的意向排他锁。当事务B去申请表的互斥锁时就会失败，因为表上有意向排他锁之后事务B申请表的互斥锁时会被阻塞。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357671520-378da683-af29-4e13-9b2f-a9abdb295727.png)\n\n\n\n## 46.MySQL的乐观锁和悲观锁了解吗？\n\n\n\n**悲观锁**（Pessimistic Concurrency Control）：\n\n\n\n悲观锁认为被它保护的数据是极其不安全的，每时每刻都有可能被改动，一个事务拿到悲观锁后，其他任何事务都不能对该数据进行修改，只能等待锁被释放才可以执行。\n\n\n\n数据库中的行锁，表锁，读锁，写锁均为悲观锁。\n\n\n\n**乐观锁（Optimistic Concurrency Control）**\n\n\n\n乐观锁认为数据的变动不会太频繁。\n\n\n\n乐观锁通常是通过在表中增加一个版本(version)或时间戳(timestamp)来实现，其中，版本最为常用。\n\n\n\n事务在从数据库中取数据时，会将该数据的版本也取出来(v1)，当事务对数据变动完毕想要将其更新到表中时，会将之前取出的版本v1与数据中最新的版本v2相对比，如果v1=v2，那么说明在数据变动期间，没有其他事务对数据进行修改，此时，就允许事务对表中的数据进行修改，并且修改时version会加1，以此来表明数据已被变动。\n\n\n\n如果，v1不等于v2，那么说明数据变动期间，数据被其他事务改动了，此时不允许数据更新到表中，一般的处理办法是通知用户让其重新操作。不同于悲观锁，乐观锁通常是由开发者实现的。\n\n\n\n## 47.MySQL 遇到过死锁问题吗，你是如何解决的？\n\n\n\n排查死锁的一般步骤是这样的：\n\n\n\n（1）查看死锁日志 show engine innodb status;\n\n\n\n（2）找出死锁 sql\n\n\n\n（3）分析 sql 加锁情况\n\n\n\n（4）模拟死锁案发\n\n\n\n（5）分析死锁日志\n\n\n\n（6）分析死锁结果\n\n\n\n当然，这只是一个简单的流程说明，实际上生产中的死锁千奇百怪，排查和解决起来没那么简单。\n\n\n\n## 48.MySQL 事务的四大特性说一下？\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357674131-13fcde46-c6f5-42e6-9d51-b7f804c236a9.png)\n\n\n\n原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。\n\n\n\n一致性：指在事务开始之前和事务结束以后，数据不会被破坏，假如 A 账户给 B 账户转 10 块钱，不管成功与否，A 和 B 的总金额是不变的。\n\n\n\n隔离性：多个事务并发访问时，事务之间是相互隔离的，即一个事务不影响其它事务运行效果。简言之，就是事务之间是进水不犯河水的。\n\n\n\n持久性：表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。\n\n\n\n## 49.那ACID靠什么保证的呢？\n\n\n\n事务的**隔离性**是通过数据库锁的机制实现的。\n\n\n\n事务的**一致性**由undo log来保证：undo log是逻辑日志，记录了事务的insert、update、deltete操作，回滚的时候做相反的delete、update、insert操作来恢复数据。\n\n\n\n事务的**原子性**和**持久性**由redo log来保证：redolog被称作重做日志，是物理日志，事务提交的时候，必须先将事务的所有日志写入redo log持久化，到事务的提交操作才算完成。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357676445-0b038bb5-3caf-4f95-86ff-c1c29dcb9e23.png)\n\n\n\n## 50.事务的隔离级别有哪些？MySQL 的默认隔离级别是什么？\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357678865-88f5c4d5-edab-4cbd-9303-332eda604b72.png)\n\n\n\n读未提交（Read Uncommitted）\n\n\n\n读已提交（Read Committed）\n\n\n\n可重复读（Repeatable Read）\n\n\n\n串行化（Serializable）\n\n\n\nMySQL默认的事务隔离级别是可重复读 (Repeatable Read)。\n\n\n\n## 51.什么是幻读，脏读，不可重复读呢？\n\n\n\n事务 A、B 交替执行，事务 A 读取到事务 B 未提交的数据，这就是**脏读**。\n\n\n\n在一个事务范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是**不可重复读**。\n\n\n\n事务 A 查询一个范围的结果集，另一个并发事务 B 往这个范围中插入 / 删除了数据，并静悄悄地提交，然后事务 A 再次查询相同的范围，两次读取得到的结果集不一样了，这就是**幻读**。\n\n\n\n不同的隔离级别，在并发事务下可能会发生的问题：\n\n| 隔离级别                    | 脏读 | 不可重复读 | 幻读 |\n| --------------------------- | ---- | ---------- | ---- |\n| Read Uncommited  读取未提交 | 是   | 是         | 是   |\n| Read Commited 读取已提交    | 否   | 是         | 否   |\n| Repeatable Read 可重复读    | 否   | 否         | 是   |\n| Serialzable 可串行化        | 否   | 否         | 否   |\n\n\n\n## 52.事务的各个隔离级别都是如何实现的？\n\n\n\n**读未提交**\n\n\n\n读未提交，就不用多说了，采取的是读不加锁原理。\n\n\n\n- 事务读不加锁，不阻塞其他事务的读和写\n\n- 事务写阻塞其他事务写，但不阻塞其他事务读；\n\n\n\n**读取已提交&可重复读**\n\n\n\n读取已提交和可重复读级别利用了`ReadView`和`MVCC`，也就是每个事务只能读取它能看到的版本（ReadView）。\n\n\n\n- READ COMMITTED：每次读取数据前都生成一个ReadView\n\n- REPEATABLE READ ：在第一次读取数据时生成一个ReadView\n\n\n\n**串行化**\n\n\n\n串行化的实现采用的是读写都加锁的原理。\n\n\n\n串行化的情况下，对于同一行事务，`写`会加`写锁`，`读`会加`读锁`。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\n\n\n\n## 53.MVCC了解吗？怎么实现的？\n\n\n\nMVCC(Multi Version Concurrency Control)，中文名是多版本并发控制，简单来说就是通过维护数据历史版本，从而解决并发访问情况下的读一致性问题。关于它的实现，要抓住几个关键点，**隐式字段、undo日志、版本链、快照读&当前读、Read View**。\n\n\n\n**版本链**\n\n\n\n对于InnoDB存储引擎，每一行记录都有两个隐藏列**DB_TRX_ID、DB_ROLL_PTR**\n\n\n\n- `DB_TRX_ID`，事务ID，每次修改时，都会把该事务ID复制给`DB_TRX_ID`；\n\n- `DB_ROLL_PTR`，回滚指针，指向回滚段的undo日志。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357684618-8a1cdd94-8234-497b-9bdd-3629b9caae76.png)\n\n\n\n假如有一张`user`表，表中只有一行记录，当时插入的事务id为80。此时，该条记录的示例图如下：\n\n\n\n\n\n\n\n接下来有两个`DB_TRX_ID`分别为`100`、`200`的事务对这条记录进行`update`操作，整个过程如下：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357686951-149e87f7-c7e1-4594-9921-4a33676fcc4a.png)\n\n\n\n由于每次变动都会先把`undo`日志记录下来，并用`DB_ROLL_PTR`指向`undo`日志地址。因此可以认为，**对该条记录的修改日志串联起来就形成了一个**`**版本链**`**，版本链的头节点就是当前记录最新的值**。如下：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357688822-fdf649f2-c876-4c31-b5d5-3e8343a2d96e.png)\n\n\n\n**ReadView**\n\n\n\n对于`Read Committed`和`Repeatable Read`隔离级别来说，都需要读取已经提交的事务所修改的记录，也就是说如果版本链中某个版本的修改没有提交，那么该版本的记录时不能被读取的。所以需要确定在`Read Committed`和`Repeatable Read`隔离级别下，版本链中哪个版本是能被当前事务读取的。于是就引入了`ReadView`这个概念来解决这个问题。\n\n\n\nRead View就是事务执行**快照读**时，产生的读视图，相当于某时刻表记录的一个快照，通过这个快照，我们可以获取：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357690760-1b5ed025-8878-40da-9071-7296f909e335.png)\n\n\n\n- m_ids ：表示在生成 ReadView 时当前系统中活跃的读写事务的事务id 列表。\n\n- min_trx_id ：表示在生成 ReadView 时当前系统中活跃的读写事务中最小的 事务id ，也就是 m_ids 中的最小值。\n\n- max_trx_id ：表示生成 ReadView 时系统中应该分配给下一个事务的 id 值。\n\n- creator_trx_id ：表示生成该 ReadView 的事务的 事务id\n\n\n\n有了这个 ReadView ，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见：\n\n\n\n- 如果被访问版本的 DB_TRX_ID 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。\n\n- 如果被访问版本的 DB_TRX_ID 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 前已经提交，所以该版本可以被当前事务访问。\n\n- 如果被访问版本的 DB_TRX_ID 属性值大于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 后才开启，所以该版本不可以被当前事务访问。\n\n- 如果被访问版本的 DB_TRX_ID 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，那就需要判断一下trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。\n\n\n\n如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。\n\n\n\n在 MySQL 中， READ COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成ReadView的时机不同。\n\n\n\nREAD COMMITTED 是**每次读取数据前都生成一个ReadView**，这样就能保证自己每次都能读到其它事务提交的数据；REPEATABLE READ 是在**第一次读取数据时生成一个ReadView**，这样就能保证后续读取的结果完全一致。\n\n\n\n## 54.数据库读写分离了解吗？\n\n\n\n读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是基本架构图：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357693676-66680746-6515-40fb-b69a-7bf14e6e41c5.png)\n\n\n\n读写分离的基本实现是:\n\n\n\n- 数据库服务器搭建主从集群，一主一从、一主多从都可以。\n\n- 数据库主机负责读写操作，从机只负责读操作。\n\n- 数据库主机通过复制将数据同步到从机，每台数据库服务器都存储了所有的业务数据。\n\n- 业务服务器将写操作发给数据库主机，将读操作发给数据库从机。\n\n\n\n## 55.那读写分离的分配怎么实现呢？\n\n\n\n将读写操作区分开来，然后访问不同的数据库服务器，一般有两种方式：程序代码封装和中间件封装。\n\n\n\n**1、程序代码封装**\n\n\n\n程序代码封装指在代码中抽象一个数据访问层（所以有的文章也称这种方式为 \"中间层封装\" ） ，实现读写操作分离和数据库服务器连接的管理。例如，基于 Hibernate 进行简单封装，就可以实现读写分离：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357695922-d1aaa3a0-2cba-4161-8b34-faf64e1c46e6.png)\n\n\n\n目前开源的实现方案中，淘宝的 TDDL (Taobao Distributed Data Layer, 外号：头都大了）是比较有名的。\n\n\n\n**2、中间件封装**\n\n\n\n中间件封装指的是独立一套系统出来，实现读写操作分离和数据库服务器连接的管理。中间件对业务服务器提供 SQL 兼容的协议，业务服务器无须自己进行读写分离。\n\n\n\n对于业务服务器来说，访问中间件和访问数据库没有区别，事实上在业务服务器看来，中间件就是一个数据库服务器。\n\n\n\n其基本架构是：\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357698108-dd612d75-afc2-4e14-adb4-bca0b441841f.png)\n\n\n\n## 56.主从复制原理了解吗？\n\n\n\nmaster数据写入，更新binlog\n\n\n\nmaster创建一个dump线程向slave推送binlog\n\n\n\nslave连接到master的时候，会创建一个IO线程接收binlog，并记录到relay log中继日志中\n\n\n\nslave再开启一个sql线程读取relay log事件并在slave执行，完成同步\n\n\n\nslave记录自己的binglog\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357700904-3704cf6d-d08d-43be-8310-d19580ce0844.png)\n\n\n\n## 57.主从同步延迟怎么处理？\n\n\n\n**主从同步延迟的原因**\n\n\n\n一个服务器开放Ｎ个链接给客户端来连接的，这样有会有大并发的更新操作, 但是从服务器的里面读取 binlog 的线程仅有一个，当某个 SQL 在从服务器上执行的时间稍长 或者由于某个 SQL 要进行锁表就会导致，主服务器的 SQL 大量积压，未被同步到从服务器里。这就导致了主从不一致， 也就是主从延迟。\n\n\n\n**主从同步延迟的解决办法**\n\n\n\n解决主从复制延迟有几种常见的方法:\n\n\n\n**1、写操作后的读操作指定发给数据库主服务器**\n\n\n\n例如，注册账号完成后，登录时读取账号的读操作也发给数据库主服务器。这种方式和业务强绑定，对业务的侵入和影响较大，如果哪个新来的程序员不知道这样写代码，就会导致一个bug。\n\n\n\n**2、读从机失败后再读一次主机**\n\n\n\n这就是通常所说的 \"二次读取\" ，二次读取和业务无绑定，只需要对底层数据库访问的 API 进行封装即可，实现代价较小，不足之处在于如果有很多二次读取，将大大增加主机的读操作压力。例如，黑客暴力破解账号，会导致大量的二次读取操作，主机可能顶不住读操作的压力从而崩溃。\n\n\n\n**3、关键业务读写操作全部指向主机，非关键业务采用读写分离**\n\n\n\n例如，对于一个用户管理系统来说，注册 + 登录的业务读写操作全部访问主机，用户的介绍、爰好、等级等业务，可以采用读写分离，因为即使用户改了自己的自我介绍，在查询时却看到了自我介绍还是旧的，业务影响与不能登录相比就小很多，还可以忍受。\n\n\n\n## 58.你们一般是怎么分库的呢？\n\n\n\n垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357703918-4dad981e-ddef-472a-9ad7-5bb7078efda5.png)\n\n\n\n水平分库：以字段为依据，按照一定策略（hash、range 等），将一个库中的数据拆分到多个库中。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357705520-a67076a7-8639-448c-b9a2-4974d9b1bc19.png)\n\n\n\n## 59.那你们是怎么分表的？\n\n\n\n水平分表：以字段为依据，按照一定策略（hash、range 等），将一个表中的数据拆分到多个表中。\n\n\n\n垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357707537-36c723cd-0863-4e1e-8caf-140fffec5172.png)\n\n\n\n## 60.水平分表有哪几种路由方式？\n\n\n\n什么是路由呢？就是数据应该分到哪一张表。\n\n\n\n水平分表主要有三种路由方式：\n\n\n\n**范围路由**：\n\n\n\n选取有序的数据列 （例如，整形、时间戳等） 作为路由的条件，不同分段分散到不同的数据库表中。\n\n\n\n我们可以观察一些支付系统，发现只能查一年范围内的支付记录，这个可能就是支付公司按照时间进行了分表。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357709796-56fa3dd7-049d-42df-89bc-a79071b4367c.png)\n\n\n\n范围路由设计的复杂点主要体现在分段大小的选取上，分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会导致单表依然存在性能问题，一般建议分段大小在 100 万至2000 万之间，具体需要根据业务选取合适的分段大小。\n\n\n\n范围路由的优点是可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万，只需要增加新的表就可以了，原有的数据不需要动。范围路由的一个比较隐含的缺点是分布不均匀，假如按照  1000 万来进行分表，有可能某个分段实际存储的数据量只有 1000 条，而另外一个分段实际存储的数据量有 900 万条。\n\n\n\n**Hash 路由**：\n\n\n\n选取某个列 （或者某几个列组合也可以） 的值进行 Hash 运算，然后根据 Hash 结果分散到不同的数据库表中。\n\n\n\n同样以订单 id  为例，假如我们一开始就规划了 4个数据库表，路由算法可以简单地用 id % 4 的值来表示数据所属的数据库表编号，id 为 12的订单放到编号为 50的子表中，id为 13的订单放到编号为 61的字表中。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357712001-561ea860-2adc-480b-b323-ac6ba800c95f.png)\n\n\n\nHash 路由设计的复杂点主要体现在初始表数量的选取上，表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。而用了 Hash 路由后，增加子表数量是非常麻烦的，所有数据都要重分布。Hash 路由的优缺点和范围路由基本相反，Hash 路由的优点是表分布比较均匀，缺点是扩充新的表很麻烦，所有数据都要重分布。\n\n\n\n**配置路由**：\n\n\n\n配置路由就是路由表，用一张独立的表来记录路由信息。同样以订单id 为例，我们新增一张 order_router 表，这个表包含 orderjd 和 tablejd 两列 , 根据 orderjd 就可以查询对应的 table_id。\n\n\n\n配置路由设计简单，使用起来非常灵活，尤其是在扩充表的时候，只需要迁移指定的数据，然后修改路由表就可以了。\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357714662-7411fec1-1dd9-4d2d-aae8-801a5503736b.png)\n\n\n\n配置路由的缺点就是必须多查询一次，会影响整体性能；而且路由表本身如果太大（例如，几亿条数据） ，性能同样可能成为瓶颈，如果我们再次将路由表分库分表，则又面临一个死循环式的路由算法选择问题。\n\n\n\n## 61.不停机扩容怎么实现？\n\n\n\n实际上，不停机扩容，实操起来是个非常麻烦而且很有风险的操作，当然，面试回答起来就简单很多。\n\n\n\n**第一阶段：在线双写，查询走老库**\n\n\n\n1、建立好新的库表结构，数据写入久库的同时，也写入拆分的新库\n\n\n\n2、数据迁移，使用数据迁移程序，将旧库中的历史数据迁移到新库\n\n\n\n3、使用定时任务，新旧库的数据对比，把差异补齐\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357716304-7d70d66f-aa13-42a4-8e31-376847de3cce.png)\n\n\n\n**第二阶段：在线双写，查询走新库**\n\n\n\n1、完成了历史数据的同步和校验\n\n\n\n2、把对数据的读切换到新库\n\n\n\n![img](大厂面试之MySQL篇.assets/1676357718664-cc17e440-240e-46ce-9685-a75cc184c211.png)\n\n\n\n**第三阶段：旧库下线**\n\n\n\n1、旧库不再写入新的数据\n\n\n\n2、经过一段时间，确定旧库没有请求之后，就可以下线老库\n\n\n\n\n\n\n\n## 62.常用的分库分表中间件有哪些？\n\n\n\n- sharding-jdbc\n\n- Mycat\n\n\n\n## 63.那你觉得分库分表会带来什么问题呢？\n\n\n\n从分库的角度来讲：\n\n\n\n**事务的问题**\n\n\n\n使用关系型数据库，有很大一点在于它保证事务完整性。\n\n\n\n而分库之后单机事务就用不上了，必须使用分布式事务来解决。\n\n\n\n**跨库 JOIN 问题**\n\n\n\n在一个库中的时候我们还可以利用 JOIN 来连表查询，而跨库了之后就无法使用 JOIN 了。\n\n\n\n此时的解决方案就是**在业务代码中进行关联**，也就是先把一个表的数据查出来，然后通过得到的结果再去查另一张表，然后利用代码来关联得到最终的结果。\n\n\n\n这种方式实现起来稍微比较复杂，不过也是可以接受的。\n\n\n\n还有可以**适当的冗余一些字段**。比如以前的表就存储一个关联 ID，但是业务时常要求返回对应的 Name 或者其他字段。这时候就可以把这些字段冗余到当前表中，来去除需要关联的操作。\n\n\n\n还有一种方式就是**数据异构**，通过binlog同步等方式，把需要跨库join的数据异构到ES等存储结构中，通过ES进行查询。\n\n\n\n从分表的角度来看：\n\n\n\n- **跨节点的 count,order by,group by 以及聚合函数问题**\n\n\n\n只能由业务代码来实现或者用中间件将各表中的数据汇总、排序、分页然后返回。\n\n\n\n- **数据迁移，容量规划，扩容等问题**\n\n\n\n数据的迁移，容量如何规划，未来是否可能再次需要扩容，等等，都是需要考虑的问题。\n\n\n\n- **ID 问题**\n\n\n\n数据库表被切分后，不能再依赖数据库自身的主键生成机制，所以需要一些手段来保证全局主键唯一。\n\n\n\n1、还是自增，只不过自增步长设置一下。比如现在有三张表，步长设置为3，三张表 ID 初始值分别是1、2、3。这样第一张表的 ID 增长是 1、4、7。第二张表是2、5、8。第三张表是3、6、9，这样就不会重复了。\n\n\n\n2、UUID，这种最简单，但是不连续的主键插入会导致严重的页分裂，性能比较差。\n\n\n\n3、分布式 ID，比较出名的就是 Twitter 开源的 sonwflake 雪花算法\n\n\n\n## 64.百万级别以上的数据如何删除？\n\n\n\n关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执行效率。\n\n\n\n所以，在我们删除数据库百万级别数据的时候，查询MySQL官方手册得知删除数据的速度和创建的索引数量是成正比的。\n\n\n\n1、所以我们想要删除百万数据的时候可以先删除索引\n\n\n\n2、然后删除其中无用数据\n\n\n\n3、删除完成后重新创建索引创建索引也非常快\n\n\n\n## 65.百万千万级大表如何添加字段？\n\n\n\n当线上的数据库数据量到达几百万、上千万的时候，加一个字段就没那么简单，因为可能会长时间锁表。\n\n\n\n大表添加字段，通常有这些做法：\n\n\n\n**通过中间表转换过去**\n\n\n\n创建一个临时的新表，把旧表的结构完全复制过去，添加字段，再把旧表数据复制过去，删除旧表，新表命名为旧表的名称，这种方式可能回丢掉一些数据。\n\n\n\n**用pt-online-schema-change**\n\n\n\n`pt-online-schema-change`是percona公司开发的一个工具，它可以在线修改表结构，它的原理也是通过中间表。\n\n\n\n**先在从库添加 再进行主从切换**\n\n\n\n如果一张表数据量大且是热表（读写特别频繁），则可以考虑先在从库添加，再进行主从切换，切换后再将其他几个节点上添加字段。\n\n\n\n## 66. MySQL 数据库 cpu 飙升的话，要怎么处理呢？\n\n\n\n排查过程：\n\n\n\n（1）使用 top 命令观察，确定是 mysqld 导致还是其他原因。\n\n\n\n（2）如果是 mysqld 导致的，show processlist，查看 session 情况，确定是不是有消耗资源的 sql 在运行。\n\n\n\n（3）找出消耗高的 sql，看看执行计划是否准确， 索引是否缺失，数据量是否太大。\n\n\n\n处理：\n\n\n\n（1）kill 掉这些线程 (同时观察 cpu 使用率是否下降)，\n\n\n\n（2）进行相应的调整 (比如说加索引、改 sql、改内存参数)\n\n\n\n（3）重新跑这些 SQL。\n\n\n\n其他情况：\n\n\n\n也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调整，比如说限制连接数等","tags":["我要进大厂","面试","MySQL"],"categories":["JAVA","面试","我要进大厂"]},{"title":"归并排序算法","url":"/note/ALGORITHM/SORT/归并排序算法/","content":"\n# 归并排序算法","tags":["算法","排序算法","归并排序"],"categories":["ALGORITHM","SORT"]},{"title":"JUC并发总览","url":"/note/JAVA/JUC/JUC并发总览/","content":"\n![image-20230529221237141](JUC并发总览.assets/image-20230529221237141.png)\n\n## 跳出来看全景\n\n学习最忌讳的就是“盲人摸象”，只看到局部，而没有看到全局。所以，你需要从一个个单一的知识和技术中“跳出来”，高屋建瓴地看并发编程。当然，这首要之事就是你建立起一张全景图。\n\n并发编程领域可以抽象成三个核心问题：**分工、同步和互斥**\n\n从性能角度讲，我们为了提高执行一定计算机任务的效率，所以IO等待的时候不能让cpu闲着，所以我们把任务拆分交替执行，有了分时操作系统，出现了并发，后来cpu多核了又有了并行计算。这里也就是作者说的**[分工]**。\n\n分工以后我们为了进一步提升效率和更加灵活地达到目的，所以我们要对任务进行组织编排，也就是对线程组织编排。于是线程之间需要通信，于是操作系统提供了一些让进程，线程之间通信的方式。也就是作者说的**[同步]**。\n\n但是事物总不是完美的。并发和通信带来了较高的编程复杂度，同时也出现了多线程并发操作共享资源的问题。于是天下大势，分久必合，我们又要将对共享资源的访问串行化。所以我们根据现实世界的做法设计了了锁，信号量等等来补充这套体系。也就是作者所说的**[互斥]**。\n\n<img src=\"JUC并发总览.assets/image-20230505171758955.png\" alt=\"image-20230505171758955\" style=\"zoom: 50%;\" />\n\n## 钻进去看本质\n\n拿我个人来说，我已经烦透了去讲述或被讲述一堆概念和结论，而不分析这些概念和结论是怎么来的，以及它们是用来解决什么问题的。在大学里，这样的教材很流行，直接导致了芸芸学子成绩很高，但解决问题的能力很差。其实，知其然知其所以然，才算真的学明白了。\n\n我属于理论派，我认为工程上的解决方案，一定要有理论做基础。所以在学习并发编程的过程中，我都会探索它背后的理论是什么。比如，当看到 Java SDK 里面的条件变量 Condition 的时候，我会下意识地问，“它是从哪儿来的？是 Java 的特有概念，还是一个通用的编程概念？”当我知道它来自管程的时候，我又会问，“管程被提出的背景和解决的问题是什么？”这样一路探索下来，我发现 Java 语言里的并发技术基本都是有理论基础的，并且这些理论在其他编程语言里也有类似的实现。所以我认为，技术的本质是背后的理论模型。\n\n\n\n## 并发领域的全景图\n\n并发领域的「全景图」。      \n\n对于「全景图」，我之前也有一直在构建，可是因为知识储备不够，确实很难构建出来。\n\n稍微了解过并发领域知识的人都知道，里面的知识点、概念多而散：线程安全、锁、同步、异步、阻塞、非阻塞、死锁、队列(为什么并发要跟队列扯上关系)、闭锁、信号量、活锁等等。如果单个去学这些知识点，单个去练习，如果没有「主线」，后期很容易忘。\n\n我思考再思考，也总结了一下学习并发的主线：      \n\n首先，得理解并发的重要性，为什么需要并发？对于这个问题，只需要放在潜意识里面，只需要两个字：性能！其它的细节，再去慢慢拓展。      \n\n然后，既然并发很重要，而并发处理的是任务，接下就是：对任务的抽象、拆解、分工执行。而线程模型，只是其中的一种模型，还有多进程、协程。Java使用的是多线程模型，对应到具体的代码就是：Thread, Runnable, Task，执行任务有：Exectors。 引出了线程，有势必存在着线程安全性的问题，因为多线程访问，数据存在着不一致的问题。      \n\n再然后，大的任务被拆解多个小的子任务，小的子任务被各自执行，不难想象，子任务之间肯定存在着依赖关系，所以需要协调，那如何协调呢？也不难想到，锁是非常直接的方式(Monitor原理)，但是只用锁，协调的费力度太高，在并发的世界里面，又有了一些其它的更抽象的工具：闭锁、屏障、队列以及其它的一些并发容器等；好了，协调的工作不难处理了。可是协调也会有出错的时候，这就有了死锁、活锁等问题，大师围绕着这个问题继续优化协调工具，尽量让使用者不容易出现这些活跃性问题；      \n\n到此，「并发」的历史还在演化：如果一遇到并发问题，就直接上锁，倒也没有什么大问题，可是追求性能是人类的天性。计算机大师就在思考，能不不加锁也能实现并发，还不容易出错，于是就有了：CAS、copy-on-write等技术思想，这就是实现了「无锁」并发；      \n\n可是，事情到此还没有完。如果以上这些个东西，都需要每个程序员自己去弄，然后自己保证正确性，那程序员真累死了，哪还有时间、精力创造这么多美好的应用！于是，计算机大师又开始思考，能不能抽象出统一「模型」，可能这就有了类似于「Java内存模型」这样的东西。\n\n\n\n## JUC并发知识图\n\n### 第一阶段：Java多线程基础知识\n\n1. Java多线程介绍\n2. 多线程编程入门\n3. 线程创建与启动以及线程状态\n4. Runnable接口详细详解\n5. 线程优先级以及守护线程详解\n6. 线程同步\n7. 线程间通讯\n8. 线程组详解\n9. 自运行对象详解\n10. 线程异常回调\n11. 线程池详解\n12. 等待线程完成任务\n13. 阻塞IO和多线程详解\n14. 如何优雅的结束线程\n15. 自定义线程锁详解\n16. FIFO队列与线程\n17. 多线程API查漏补缺\n\n### 第二阶段：多线程设计模式详细介绍\n\n1. 多线程内容回顾\n2. WaitSet概念介绍\n3. 多线程程序衡量标准讨论\n4. Single Thread Execution模式介绍\n5. 不可变对象以及线程安全对象介绍\n6. Guarded Suspension模式讲解\n7. Balking模式详细介绍\n8. Producer-Consumer设计模式详细介绍\n9. 读写锁设计模式详细介绍\n10. Thread-Per-Message模式详细介绍\n11. Worker模式详细介绍\n12. Future设计模式详细介绍\n13. Two-Phase-Termination设计模式详细介绍\n14. Thread-Specific Storage模式详细介绍\n15. Active Object接受异步消息的主动对象\n16. 设计模式查漏补缺\n\n### 第三阶段：JDK并发包详细介绍\n\n1. 原子变量详细介绍\n2. Unsafe详细介绍\n3. CountDownLatch详细介绍\n4. CyclicBarrier详细介绍\n5. Exchanger详细介绍\n6. ExecutorService详细介绍\n7. Phaser详细介绍\n8. 显式锁详细介绍\n   1. ReetrantLock详细介绍\n   2. ReadWriteLock详细介绍\n   3. StampedLock详细介绍\n9. Condition详细介绍\n10. Semaphore信号量详细介绍\n11. ForkJoin框架详细介绍\n12. 并发容器详细介绍\n    1. ConcurrentHashMap详细介绍\n    2. ConcurrentLinkedDeque\n    3. ConcurrentSkipListMap\n    4. ConcurrentSkipSet\n    5. CopyOnWriteArrayList\n    6. CopyOnWriteArraySet\n    7. DelayQueue\n    8. LinkedBlockingDeque\n    9. LinkedBlockingQueue\n    10. LinkedTransferQueue\n    11. PriorityBlockingQueue\n13. CompletableFuture详细介绍\n14. 自定义并发类\n    1. 自定义ThreadPoolExecutor\n    2. 实现一个优先级线程池\n    3. ThreadFactory详细介绍\n    4. 自定义Lock\n    5. 自定义原子对象\n\n### 第四阶段：并发编程深入探讨\n\n1. 死锁诊断，JVM工具，线程堆栈介绍\n2. 线程安全讨论\n3. 数据共享，以及数据共享带来的安全隐患\n4. 构建线程安全的类，选择优化策略\n5. 构建并行任务详细介绍\n6. 执行并行任务详细介绍\n7. 任务的执行与关闭\n8. 线程池的优化\n9. 线程上下文，性能，可伸缩性探讨\n10. 多线程中的锁详情讲解\n11. 构建同步工具\n12. 原子变量与非阻塞同步机制\n13. Google Concurrent包介绍\n14. Google EventBus包介绍\n","tags":["并发总览"],"categories":["JAVA","JUC"]},{"title":"JUC并发的AOV和JMM","url":"/note/JAVA/JUC/JUC并发的AOV和JMM/","content":"\n![image-20230529221626357](JUC并发的AOV和JMM.assets/image-20230529221626357.png)\n\n本文还有xmind图解，点击下载：[并发编程的AOV.xmind](./JUC并发的AOV和内存模型.assets/并发编程的AOV.xmind)\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230507191602711.png\" alt=\"image-20230507191602711\" style=\"zoom: 67%;\" />\n\n\n\n## CPU缓存带来的可见性问题\n\n\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230505220957901.png\" alt=\"image-20230505220957901\" style=\"zoom:80%;\" />\n\n一个线程对共享变量的修改，另外一个线程能够立刻看到，我们称为可见性。\n\n- 在以前单核CPU的情况下，CPU只有一个缓存，所以多个线程同时修改一个变量是不会有可见性问题的\n- 在目前多核CPU的情况下，每一个核心都会有一个缓存， 对变量的修改保存在当前核心的缓存中，另一个核心就无法可见，所以就会存在可见性的问题。\n- 用一段代码来验证一下多核场景下的可见性问题。下面的代码，每执行一次 add10K() 方法，都会循环 10000 次 count+=1 操作。在 calc() 方法中我们创建了两个线程，每个线程调用一次 add10K() 方法，我们来想一想执行 calc() 方法得到的结果应该是多少呢？\n\n```java\npublic class Test {\n  private long count = 0;\n  private void add10K() {\n    int idx = 0;\n    while(idx++ < 10000) {\n      count += 1;\n    }\n  }\n  public static long calc() {\n    final Test test = new Test();\n    // 创建两个线程，执行add()操作\n    Thread th1 = new Thread(()->{\n      test.add10K();\n    });\n    Thread th2 = new Thread(()->{\n      test.add10K();\n    });\n    // 启动两个线程\n    th1.start();\n    th2.start();\n    // 等待两个线程执行结束\n    th1.join();\n    th2.join();\n    return count;\n  }\n}\n```\n\n- 在多核CPU的环境下，返回的结果是：10000 到 20000 之间的随机数。\n\n\n\n## 线程切换带来的原子性问题\n\n我们把一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性。也就是要么全部成功，要么全部失败。\n\nJava 并发程序都是基于多线程的，自然也会涉及到线程切换，但是不可控的在于：我们无法控制CPU切换的时间点。就会导致一些很诡异的问题；\n\n举个例子：count=0；启动两个线程都执行count+=1；你以为的结果是2，实际上结果可能是1，还可能是2；\n\n这是因为，count+=1 这行代码对操作系统来说，对应三个汇编指令：\n\n- 指令 1：首先，需要把变量 count 从内存加载到 CPU 的寄存器；\n\n- 指令 2：之后，在寄存器中执行 +1 操作；\n\n- 指令 3：最后，将结果写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。\n\n而在多线程环境下，CPU切换的时间点是不可控的，所以就会出现下面的情况\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230505222540170.png\" alt=\"image-20230505222540170\" style=\"zoom:80%;\" />\n\n\n\n## 编译优化带来的有序性问题\n\n编译器为了优化性能，有时候会改变程序中语句的先后顺序，例如程序中：“a=6；b=7；”编译器优化后可能变成“b=7；a=6；”，在这个例子中，编译器调整了语句的顺序，但是不影响程序的最终结果。不过有时候编译器及解释器的优化可能导致意想不到的 Bug。\n\n下面看一个经典案例：双重检查创建单例对象\n\n```java\npublic class Singleton {\n  static Singleton instance;\n  static Singleton getInstance(){\n    if (instance == null) {\n      synchronized(Singleton.class) {\n        if (instance == null)\n          instance = new Singleton();\n        }\n    }\n    return instance;\n  }\n}\n```\n\n以上代码在多线程情况下，会出现什么问题呢？\n\n出在 new 操作上，我们以为的 new 操作应该是：\n\n- 分配一块内存 M；\n- 在内存 M 上初始化 Singleton 对象；\n- 然后 M 的地址赋值给 instance 变量。\n\n但是实际上优化后的执行路径却是这样的：\n\n- 分配一块内存 M；\n- 将 M 的地址赋值给 instance 变量；\n- 最后在内存 M 上初始化 Singleton 对象。\n\n所以就有可能导致在将地址赋值给instance之后，没有创建对象，此时线程切换了。就会导致返回的instance实例是null，进而引发NPE；\n\n\n\n问：什么时候会重排序？\n\n答：在编译器与CPU处理器中都能执行指令重排优化操作。\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230507181344121.png\" alt=\"image-20230507181344121\" style=\"zoom:50%;\" />\n\n\n\n问：A如果没有完成实例的初始化，锁应该不会释放的，B是拿不到锁的，怎么还会出问题呢？\n\n答：CPU时间片切换后，线程B刚好执行到第一次判断instance==null，此时不为空（分配了地址，只是没有初始化），不用进入synchronized里，就将还未初始化的instance返回了\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230505224316948.png\" alt=\"image-20230505224316948\" style=\"zoom: 40%;\" />\n\n\n\n特意提到缓存导致的可见性问题，线程切换带来的原子性问题，编译优化带来的有序性问题，其实缓存、线程、编译优化的目的和我们写并发程序的目的是相同的，都是提高程序性能。但是技术在解决一个问题的同时，必然会带来另外一个问题，所以在**采用一项技术的同时，一定要清楚它带来的问题是什么，以及如何规避。**\n\n\n\n## 怎么解决可见性和有序性问题\n\n\n\n我们知道可见性是由于CPU缓存的存在导致的，有序性是由于编译优化导致的，要想解决这两个问题，最简单的思路就是\n\n- 禁用CPU缓存和编译优化\n\n是的，只需要禁用，我们就可以解决可见性和有序性，但是随之而来的问题就是：\n\n- 系统的性能直线下降\n\n很显然这不是我们想要的，那怎么办呢？\n\n- 合理的禁用CPU缓存和编译优化（意思就是：只在需要禁用的时候禁用）\n\n那么，什么时候是需要禁用的时候呢？\n\n- 其实就是指按照程序员的要求来禁用\n\n既然要禁用CPU缓存和编译优化，而且还是需要程序员主观的判断控制，那就需要为程序员提供\n\n- 提供给程序员按需禁用缓存和编译优化的方法\n\n这个方法就是：\n\n- Java内存模型（JMM）\n\n\n\n### Java内存模型（JMM）\n\n这一小部分有一个思维导图，点击下载思维导图文件：[Java内存模型.xmind](./JUC并发的AOV和内存模型.assets/Java内存模型.xmind)\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230506141920930.png\" alt=\"image-20230506141920930\" style=\"zoom:80%;\" />\n\n### 什么是Java内存模型\n\nJava内存模型（JMM）是Java定义的一种抽象的计算机内存模型，并不真实存在。它描述的一组规则或者规范。通过这些规则、规范定义了程序中各个变量的访问方式。从而解决在多线程环境下可能出现的问题。\n\n### **多线程环境下都有哪些问题**\n\n这个标题也可以理解为：为什么要引入JMM？\n\n现代计算机体系大部是采用的对称多处理器的体系架构。每个处理器均有独立的寄存器组和缓存，寄存器组和缓存中保存的同一个变量的值可能是不同的，这就会导致**缓存一致性问题（可见性）**。另外多个处理器可同时执行同一进程中的不同线程，这里称为**处理器的乱序执行（原子性）**。此外，编译器为了提高性能，会对指令进行优化，导致顺序发生变化，如果任由编译器或处理器对这些访问进行优化的话，很有可能出现无法想象的问题，这里称为**编译器的重排序（有序性）**。除了缓存一致性问题、处理器的乱序执行、编译器的重排序，还有内存系统的重排序。\n\n因此Java语言规范引入了JMM，通过定义多项规则对编译器和处理器进行限制，解决这三个问题。\n\n### 怎么解决这些问题的\n\n但是 JMM 只解决了缓存一致性问题（可见性），和编译器的重排序（有序性），另外解决了**部分的**原子性问题\n\n在描述 JMM 是怎么解决这些问题之前，我们先看一下原理，也就是在操作系统上，是怎么解决这些问题的。\n\n#### 操作系统层面上是怎么解决的\n\n在操作系统层面上，缓存一致性问题的解决办法：\n\n- 总线锁 Bus Lock，性能极低，是CPU和硬件层面的\n- 直接内存访问 Direct Memory Access ，简称DMA，是一种硬件设备，绕过处理器直接访问内存\n- 缓存一致性协议 Cache Coherence Protocol，比如Intel公司提出的 MESI 协议，是CPU层面的\n\n在操作系统层面上，并没有解决原子性。\n\n- 因为操作系统执行的是指令，对于任意一个指令来说肯定是原子性的。但是很多情况下我们的一行代码可能对应多行指令：如 `i+=1`\n\n在操作系统层面上，编译器的重排序的解决办法：\n\n- 内存屏障 Memory Barrier，是操作系统和硬件层面的，通过在CPU指令前后加上屏障，避免重排序\n\n上面说了在操作系统层面，那么回到Java语言上来，JMM是怎么解决的呢？\n\n#### JMM是怎么解决这些问题的\n\nJMM 对内存区域重新划分，分为：主内存和工作内存。每个线程运行时，都会创建一个工作内存（也叫栈空间），来保存线程所有的私有变量。而JMM规范中规定所有的变量都存储在主内存中，而主内存中的变量是所有的线程都可以共享的，而对主内存中的变量进行操作时，必须在线程的工作内存进行操作，首先将主内存的变量copy到工作内存，进行操作后，再将变量刷回到主内存中。所有线程只有通过主内存来进行通信。\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230506121343472.png\" alt=\"image-20230506121343472\" style=\"zoom:50%;\" />\n\n为什么要对内存区域重新划分呢？\n\n最主要的原因还是为了实现JVM的跨平台，举个例子，内存屏障的实现在不同的CPU架构上是不同的，甚至指令都不一样，而Java是跨平台的，必然不能直接使用，所以中间加了一层自己的内存结构并制定了自己的内存屏障规范。另外，有了自己的内存结构之后，就可以完美的配合JMM提出的 volatile 关键字，synchronized关键字，final关键字，happens-before关系这些规范了。\n\nJMM对内存区域进行了重新划分，和硬件层面上的内存架构有什么关系呢？\n\n多线程的执行最终是映射到硬件层面，通过硬件上的处理器进行执行，但java内存模型跟硬件内存架构并不完全一致。对于硬件内存架构来说，只有寄存器、缓存行、主内存的概念，并没有工作内存（私有内存区域）、主内存（堆内存）之分。也就是说JMM的内存划分对硬件内存架构并没有什么影响，因为JMM是一种抽象的概念，是一种规范，并不实际存在。对于硬件内存来说，不管是工作内存，还是主内存，都是储存在寄存器、缓存行、主内存中，JMM与硬件内存架构是一种相互交叉的关系，是一种抽象概念划分与真实物理硬件的交叉。（注意对于JVM内存区域划分一样）。\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230506121452727.png\" alt=\"image-20230506121452727\" style=\"zoom:50%;\" />\n\nJMM是通过 volatile 关键字来解决可见性和有序性的。\n\n- 是的，你没有看错，volatile 一个关键字就可以解决两个问题。\n- 原理就是：volatile 关键字用来实现内存屏障(memory barrier)，从而禁止重排序的，即时编译器根据具体的底层体系架构，将这些内存屏障替换成具体的 CPU 指令\n  - 1、对于编译器而言，内存屏障将限制它所能做的重排序优化。从而解决了有序性问题\n  - 2、而对于处理器而言，内存屏障将会导致缓存的刷新操作。从而解决了可见性问题。\n\n对于原子性，JMM并没有保证原子性，在Java中是用锁来实现的原子性，后面会详细展开说。\n\nJMM不仅仅提供了上面这些，还有：volatile 关键字，synchronized关键字，final关键字，happens-before关系来解决在多线程环境下出现的问题。\n\n### Java内存模型的官方文档\n\n官方文档：[Chapter 17. Threads and Locks (oracle.com)](https://docs.oracle.com/javase/specs/jls/se16/html/jls-17.html)，这篇文章是Java语言规范（Java Language Specification）的第17章，主要讲解Java内存模型（Java Memory Model，JMM）的相关内容。\n\n具体来说，该章节介绍了\n\n- Java内存模型的定义和作用；\n- Java内存模型中的原子性、可见性、有序性等概念；\n- 如何使用synchronized、volatile、final等关键字来实现线程安全的编程；\n- Java内存模型中的happens-before关系、同步块和同步方法的语义、volatile变量的语义等概念；\n- 如何避免Java内存模型中的常见问题，如死锁、饥饿等。\n\n文章中详细介绍了Java内存模型的各种概念和规则，并提供了相关的例子和解析，让读者能够更加深入地理解Java内存模型的实现原理和使用方法，从而编写出高效、正确且线程安全的Java程序。\n\n### Java内存模型的总结\n\nJava 内存模型是个很复杂的规范，可以从不同的视角来解读，站在我们这些程序员的视角，本质上可以理解为，Java 内存模型规范了 JVM 如何提供按需禁用缓存和编译优化的方法。**具体来说，这些方法包括 volatile、synchronized 和 final 三个关键字，以及六项 Happens-Before 规则**\n\n\n\n### Happens-Before 规则\n\n**不用去背，没啥意思，如果有面试官问这个，就是LOW**\n\n只靠sychronized和volatile关键字来保证原子性、可见性以及有序性，那么编写并发程序可能会显得十分麻烦，幸运的是，从JDK 5开始，Java使用新的JSR-133内存模型，提供了happens-before 原则来辅助保证程序执行的原子性、可见性以及有序性的问题，它是判断数据是否存在竞争、线程是否安全的依据，happens-before 原则内容如下：\n\n| 原则         | 解释                                                         |\n| ------------ | ------------------------------------------------------------ |\n| 程序顺序原则 | 在一个线程内必须保证语义串行性，也就是说按照代码顺序执行。   |\n| 锁规则       | 解锁(unlock)操作必然发生在后续的同一个锁的加锁(lock)之前，也就是说，如果对于一个锁解锁后，再加锁，那么加锁的动作必须在解锁动作之后(同一个锁)。 |\n| volatile规则 | volatile变量的写，先发生于读，这保证了volatile变量的可见性，简单的理解就是，volatile变量在每次被线程访问时，都强迫从主内存中读该变量的值，而当该变量发生变化时，又会强迫将最新的值刷新到主内存，任何时刻，不同的线程总是能够看到该变量的最新值。 |\n| 传递性       | A先于B ，B先于C 那么A必然先于C                               |\n| 线程启动规则 | 线程的start()方法先于它的每一个动作，即如果线程A在执行线程B的start方法之前修改了共享变量的值，那么当线程B执行start方法时，线程A对共享变量的修改对线程B可见 |\n| 线程终止规则 | 线程的所有操作先于线程的终结，Thread.join()方法的作用是等待当前执行的线程终止。假设在线程B终止之前，修改了共享变量，线程A从线程B的join方法成功返回后，线程B对共享变量的修改将对线程A可见。 |\n| 线程中断规则 | 对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测线程是否中断。 |\n| 对象终结规则 | 对象的构造函数执行，结束先于finalize()方法                   |\n\n\n\n两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。happens-before的定义很微妙，后文会具体说明happens-before为什么要这么定义。——来自《Java并发编程的艺术》\n\n\n\n**Happens-Before与JMM的关系**\n\n一个happens-before规则对应于一个或多个编译器和处理器重排序规则。对于Java程序员来说，happens-before规则简单易懂，它避免Java程序员为了理解JMM提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现方法。\n\n简单理解就是：JMM帮我们封装好了。\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230506152551844.png\" alt=\"image-20230506152551844\" style=\"zoom:80%;\" />\n\n\n\n### volatile关键字的实现原理\n\n通过本文前面，我们知道 volatile 关键字有两个作用\n\n1、在编译器层面，内存屏障禁用了编译器的重排序，保证了有序性；\n\n2、在处理器层面，内存屏障将会导致缓存的刷新操作，保证了可见性。\n\n那么，volatile 关键字到底是怎么实现这些功能的呢？\n\n- 那就涉及到内存屏障了。 \n\n#### 内存屏障\n\n内存屏障在处理器层面，是一种特殊指令。处理器执行的时候看到这种指令，必须保证这个指令前的操作执行完，只能执行后面的；\n\n**在处理器层面**：这些指令包括：ifence，sfence，mfence（Intel的CPU的特有指令，不同的CPU指令可能不一样）\n\n**在JVM层面**：由于JVM是跨平台的，所以JVM规定了自己的内存屏障：LoadLoadBarrier，LoadStoreBarrier，StoreStoreBarrier，StoreLoadBarrier。那么所有实现JVM规范的虚拟机，比如hotspot，都必须实现这四个屏障。\n\n#### volatile关键字和内存屏障有啥关系呢\n\nvolatile 只是一个关键字，它只能简单的用来修饰一个变量，或者说，标记一块内存区域地址；\n\n那么，它和顺序有啥关系呢？为啥说使用 volatile 修饰的变量就可以禁止重排序呢？\n\n举个例子来说\n\n```java\npublic class VolatileExample {\n    private volatile int count = 0;\n    \n    public void set() {\n        count++;\n    }\n    \n    public int get() {\n        return count;\n    }\n}\n```\n\nset 方法是写，而且要写的变量是 count，而 count 使用了 volatile 进行修饰。说明 set 方法是一个 volatile写 操作；\n\nget 方法是读，而且要读的变量是 count，而 count 使用了 volatile 进行修饰，说明 get 方法是一个 volatile读 操作；\n\n\n\n对于 volatile写 操作，在JVM层面上，会添加如下内存屏障\n\n```java\n-----StoreStoreBarrier----\n【volatile写 操作】\n-----StoreLoadBarrier----\n```\n\n对于 volatile读 操作，在JVM层面上，会添加如下内存屏障\n\n```java\n【volatile读 操作】\n-----LoadLoadBarrier----\n-----LoadStoreBarrier----\n```\n\n\n\n那么是什么意思呢：\n\n- 对于 volatile写 操作\n  - StoreStoreBarrier表示：在当前线程写这块内存区域之前，所有别的线程对这块内存要做的**写操作**都必须先完成。\n  - StoreLoadBarrier表示：在当前线程写完这块区域之后，所有别的线程对这块内存的**读操作**才可以开始。\n- 对于 volatile读 操作\n  - LoadLoadBarrier表示：在当前线程读完这块内存区域之后，所有别的线程对这块内存区域的**读操作**才可以开始。\n  - LoadStoreBarrier表示：在当前线程读完这块内存区域之后，所有别的线程对这块内存区域的**写操作**才可以开始。\n\n\n\n#### 内存屏障和重排序有啥关系呢？\n\n关系很简单。\n\n我们知道，在编译器和CPU处理器中都有可能导致指令的重排序。\n\n那么在编译器和CPU处理器中，当遇到内存屏障的相关指令，就不在排序，这就避免了重排序；\n\n既然不再排序了。那么最终生成的机器码就是正确的。\n\n\n\n#### 内存屏障和可见性有啥关系呢？\n\n关系也很简单，这是在JMM层面和CPU层面都做的优化。\n\n我们知道JMM对计算机系统的内存区域重新划分了区域。分为了工作内存和主存。\n\n一个变量被volatile修饰的时候，在系统运行期间，会遇到这个变量的内存屏障，然后：\n\n- 如果要对这个变量进行**写操作**，会先在工作内存中写，由于内存屏障的存在，还会在继续做两个操作\n  - 1、实时的同步到主存中；\n  - 2、通知其他CPU核心，你们缓存中的数据已经失效了。\n- 如果要对这个变量进行**读操作**，由于内存屏障的存在\n  - 不会从缓存中拿，而是实时的去主存中拿\n\n这样，就解决了可见性。\n\n\n\n#### volatile的原理总结\n\n- 代码层面：程序员用 volatile 修饰一个变量\n\n```java\nvolatile i\n```\n\n- 编译器层面：编译成字节码的时候，对使用 volatile 关键字的变量，会使用 ACC_VOLATILE 修饰\n\n```java\nACC_VOLATILE i\n```\n\n- JVM层面：JVM执行字节码的时候，遇到 ACC_VOLATILE 就会添加内存屏障\n\n```java\n-----StoreStoreBarrier----\n【volatile写 操作】\n-----StoreLoadBarrier----\n\n    \n【volatile读 操作】\n-----LoadLoadBarrier----\n-----LoadStoreBarrier----    \n\n    \n屏障两边的指令不可以重排！保障有序！\n```\n\n- hotspot层面\n\n```java\n// bytecodeinterpreter.cpp\nint field_offset = cache->f2_as_index();\n          if (cache->is_volatile()) {\n            if (support_IRIW_for_not_multiple_copy_atomic_cpu) {\n              OrderAccess::fence();\n            }\n---------------------------------------------------------------------\n//orderaccess_linux_x86.inline.hpp\ninline void OrderAccess::fence() {\n  if (os::is_MP()) {\n    // always use locked addl since mfence is sometimes expensive\n#ifdef AMD64\n    __asm__ volatile (\"lock; addl $0,0(%%rsp)\" : : : \"cc\", \"memory\");\n#else\n    __asm__ volatile (\"lock; addl $0,0(%%esp)\" : : : \"cc\", \"memory\");\n#endif\n  }\n}\n------------------------------------------------------------------------\n//主要是调用CPU指令：ifence，sfence，mfence实现内存屏障\n```\n\n\n\n## 怎么解决原子性问题\n\n原子性问题的一个经典面试题就是：为什么在 32 位的机器上对 long 型变量进行加减操作存在并发隐患\n\n要解决这个问题，就要知道为什么会发生原子性问题。\n\n原子性问题的产生原因就是因为：高级编程语言的一行代码可能对应多个CPU指令，以在 32 位的机器上对 long 型变量进行加减操作为例，分为两步：第一步：写高32位；第二步：写低32位；而CPU在执行的时候是可能发生线程切换的，导致出现了原子性出现问题。\n\n那么知道了原因，那就好解决了。\n\n- 禁止线程切换，保证当前线程一直继续执行下去不就好了。\n\n在早期CPU只是单核的情况下，禁止线程切换，可以保证我们的代码只被一个核心的一个线程执行持续执行。问题可以得到解决。\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230507210300090.png\" alt=\"image-20230507210300090\" style=\"zoom:80%;\" />\n\n但是目前CPU都是多核的。也就是意味着我们的一行代码对应的多个CPU指令，可能是不同的核心的不同线程执行的。\n\n在多核CPU情况下，我们禁止线程切换，只能保证当前核心的当前线程持续执行，但是我们的代码被分散到了多个核心上。所以是没有用的。\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230507210513200.png\" alt=\"image-20230507210513200\" style=\"zoom:80%;\" />\n\n那怎么办呢？\n\n- 我们只需要保证同一时刻只有一个线程在执行，就可以解决问题。\n\n“同一时刻只有一个线程执行”这个条件非常重要，我们称之为**互斥**。如果我们能够保证对共享变量的修改是互斥的，那么，无论是单核 CPU 还是多核 CPU，就都能保证原子性了。\n\n<img src=\"JUC并发的AOV和JMM.assets/image-20230507210846979.png\" alt=\"image-20230507210846979\" style=\"zoom:80%;\" />\n\n具体是怎么保证“同一时刻只有一个线程在执行的”\n\n- 就是怎么保证互斥，当然是：**锁**了。\n\n那么java给我们程序员提供的工具就是：\n\n- 锁\n\n锁这部分的内容很多，包括 synchronized，Lock，无锁CAS等，这部分单独抽一篇说。\n\n参考《JUC并发的锁》\n\n\n\n\n\n\n\n## final 关键字\n\n","tags":["JUC","原子性","volalite","内存屏障","有序性","可见性","Java内存模型","JMM"],"categories":["JAVA","JUC"]},{"title":"大厂面试之JVM篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之JVM篇/","content":"\n\n\n# 1.什么是JVM?\n\n\n\nJVM——Java虚拟机，它是Java实现平台无关性的基石。\n\n\n\nJava程序运行的时候，编译器将Java文件编译成平台无关的Java字节码文件（.class）,接下来对应平台JVM对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/image-20230504161048844.png\" alt=\"image-20230504161048844\" style=\"zoom:80%;\" />\n\n\n\n同时JVM也是一个跨语言的平台，和语言无关，只和class的文件格式关联，任何语言，只要能翻译成符合规范的字节码文件，都能被JVM运行。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503624714-e8744f9f-6603-4f57-9211-4dbe9761e5d3.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n# 内存管理\n\n\n\n## 2.能说一下JVM的内存区域吗？\n\n\n\nJVM内存区域最粗略的划分可以分为`堆`和`栈`，当然，按照虚拟机规范，可以划分为以下几个区域：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503626945-c92c5d35-ea8a-4892-a166-626e95ec3cb9.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\nJVM内存分为线程私有区和线程共享区，其中`方法区`和`堆`是线程共享区，`虚拟机栈`、`本地方法栈`和`程序计数器`是线程隔离的数据区。\n\n\n\n**1、程序计数器**\n\n\n\n程序计数器（Program Counter Register）也被称为PC寄存器，是一块较小的内存空间。\n\n\n\n它可以看作是当前线程所执行的字节码的行号指示器。\n\n\n\n**2、Java虚拟机栈**\n\n\n\nJava虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。\n\n\n\nJava虚拟机栈描述的是Java方法执行的线程内存模型：方法执行时，JVM会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503629496-4a73c555-054d-4133-b933-029e1cfeb116.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**3、本地方法栈**\n\n\n\n本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别只是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。\n\n\n\nJava 虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的。\n\n\n\n**4、Java堆**\n\n\n\n对于Java应用程序来说，Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java里“**几乎**”所有的对象实例都在这里分配内存。\n\n\n\nJava堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC堆”（Garbage Collected Heap，）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以Java堆中经常会出现`新生代`、`老年代`、`Eden空间`、`From Survivor空间`、`To Survivor空间`等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是Java虚拟机规范本身制定的。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503632116-8428fa47-5118-4781-b41b-235289c4892b.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**5.方法区**\n\n\n\n方法区是比较特别的一块区域，和堆类似，它也是各个线程共享的内存区域，用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\n\n\n\n它特别在Java虚拟机规范对它的约束非常宽松，所以方法区的具体实现历经了许多变迁，例如jdk1.7之前使用永久代作为方法区的实现。\n\n\n\n## 3.说一下JDK1.6、1.7、1.8内存区域的变化？\n\n\n\nJDK1.6、1.7/1.8内存区域发生了变化，主要体现在方法区的实现：\n\n\n\n- JDK1.6使用永久代实现方法区：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503634698-d37c0cfa-f9c4-4c60-b615-53909203c7ed.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- JDK1.7时发生了一些变化，将字符串常量池、静态变量，存放在堆上\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503636535-3f628479-9a93-445d-8f79-b6e6af487e49.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n-  在JDK1.8时彻底干掉了永久代，而在直接内存中划出一块区域作为**元空间**，运行时常量池、类常量池都移动到元空间。\n\n<img src=\"大厂面试之JVM篇.assets/1677503638514-7d445502-cdfb-43ec-aca1-2989d077a79e.png\" alt=\"img\" /> \n\n\n\n## 4.为什么使用元空间替代永久代作为方法区的实现？\n\n\n\nJava虚拟机规范规定的方法区只是换种方式实现。有客观和主观两个原因。\n\n\n\n- 客观上使用永久代来实现方法区的决定的设计导致了Java应用更容易遇到内存溢出的问题（永久代有-XX：MaxPermSize的上限，即使不设置也有默认大小，而J9和JRockit只要没有触碰到进程可用内存的上限，例如32位系统中的4GB限制，就不会出问题），而且有极少数方法 （例如String::intern()）会因永久代的原因而导致不同虚拟机下有不同的表现。\n- 主观上当Oracle收购BEA获得了JRockit的所有权后，准备把JRockit中的优秀功能，譬如Java Mission Control管理工具，移植到HotSpot 虚拟机时，但因为两者对方法区实现的差异而面临诸多困难。考虑到HotSpot未来的发展，在JDK 6的 时候HotSpot开发团队就有放弃永久代，逐步改为采用本地内存（Native Memory）来实现方法区的计划了，到了JDK 7的HotSpot，已经把原本放在永久代的字符串常量池、静态变量等移出，而到了 JDK 8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的元空间（Meta-space）来代替，把JDK 7中永久代还剩余的内容（主要是类型信息）全部移到元空间中。\n\n\n\n## 5.对象创建的过程了解吗？\n\n\n\n在JVM中对象的创建，我们从一个new指令开始：\n\n\n\n- 首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用\n- 检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，就先执行相应的类加载过程\n- 类加载检查通过后，接下来虚拟机将为新生对象分配内存。\n- 内存分配完成之后，虚拟机将分配到的内存空间（但不包括对象头）都初始化为零值。\n- 接下来设置对象头，请求头里包含了对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。\n\n\n\n这个过程大概图示如下：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503641547-1cdb8ac9-1a4b-4b16-8171-95a5eb356d0d.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 6.什么是指针碰撞？什么是空闲列表？\n\n\n\n内存分配有两种方式，**指针碰撞**（Bump The Pointer）、**空闲列表**（Free List）。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503643493-25e288b8-d94f-4ad8-81bb-454f7df4db70.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- 指针碰撞：假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”。\n- 空闲列表：如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。\n- 两种方式的选择由Java堆是否规整决定，Java堆是否规整是由选择的垃圾收集器是否具有压缩整理能力决定的。\n\n\n\n## 7.JVM 里 new 对象时，堆会发生抢占吗？JVM是怎么设计来保证线程安全的？\n\n\n\n会，假设JVM虚拟机上，每一次new 对象时，指针就会向右移动一个对象size的距离，一个线程正在给A对象分配内存，指针还没有来的及修改，另一个为B对象分配内存的线程，又引用了这个指针来分配内存，这就发生了抢占。\n\n\n\n有两种可选方案来解决这个问题：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503645536-bbe8ec34-a3b3-4539-9919-f2dbf0e0550b.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n-  采用CAS分配重试的方式来保证更新操作的原子性 \n-  每个线程在Java堆中预先分配一小块内存，也就是本地线程分配缓冲（Thread Local Allocation\n  Buffer，TLAB），要分配内存的线程，先在本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。 \n\n\n\n## 8.能说一下对象的内存布局吗？\n\n\n\n在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503647463-47c45c0e-c535-47eb-929b-24f01f56abc9.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**对象头**主要由两部分组成：\n\n\n\n- 第一部分存储对象自身的运行时数据：哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，官方称它为Mark Word，它是个动态的结构，随着对象状态变化。\n- 第二部分是类型指针，指向对象的类元数据类型（即对象代表哪个类）。\n- 此外，如果对象是一个Java数组，那还应该有一块用于记录数组长度的数据\n\n\n\n**实例数据**用来存储对象真正的有效信息，也就是我们在程序代码里所定义的各种类型的字段内容，无论是从父类继承的，还是自己定义的。\n\n\n\n**对齐填充**不是必须的，没有特别含义，仅仅起着占位符的作用。\n\n\n\n## 9.对象怎么访问定位？\n\n\n\nJava程序会通过栈上的reference数据来操作堆上的具体对象。由于reference类型在《Java虚拟机规范》里面只规定了它是一个指向对象的引用，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象的具体位置，所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种：\n\n\n\n- 如果使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息，其结构如图所示：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503650073-29165857-8ebf-4561-a169-5bbb94b9f307.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- 如果使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销，如图所示：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503651863-c56883a1-c3ab-4aaf-9f13-d84e797b860b.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n这两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。\n\n\n\n使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本。\n\n\n\nHotSpot虚拟机主要使用直接指针来进行对象访问。\n\n\n\n## 10.内存溢出和内存泄漏是什么意思？\n\n\n\n内存泄露就是申请的内存空间没有被正确释放，导致内存被白白占用。\n\n\n\n内存溢出就是申请的内存超过了可用内存，内存不够了。\n\n\n\n两者关系：内存泄露可能会导致内存溢出。\n\n\n\n用一个有味道的比喻，内存溢出就是排队去蹲坑，发现没坑位了，内存泄漏，就是有人占着茅坑不拉屎，占着茅坑不拉屎的多了可能会导致坑位不够用。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503654450-accfc02d-8a4e-45da-8352-c9dfa8bf92a3.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 11.能手写内存溢出的例子吗？\n\n\n\n在JVM的几个内存区域中，除了程序计数器外，其他几个运行时区域都有发生内存溢出（OOM）异常的可能，重点关注堆和栈。\n\n\n\n- Java堆溢出\n\n\n\nJava堆用于储存对象实例，只要不断创建不可被回收的对象，比如静态对象，那么随着对象数量的增加，总容量触及最大堆的容量限制后就会产生内存溢出异常（OutOfMemoryError）。\n\n\n\n这就相当于一个房子里，不断堆积不能被收走的杂物，那么房子很快就会被堆满了。\n\n\n\n```java\n/**\n * VM参数： -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError\n */\npublic class HeapOOM {\n    static class OOMObject {\n    }\n\n    public static void main(String[] args) {\n        List<OOMObject> list = new ArrayList<OOMObject>();\n        while (true) {\n            list.add(new OOMObject());\n        }\n    }\n}\n```\n\n\n\n- 虚拟机栈.OutOfMemoryError\n\n\n\nJDK使用的HotSpot虚拟机的栈内存大小是固定的，我们可以把栈的内存设大一点，然后不断地去创建线程，因为操作系统给每个进程分配的内存是有限的，所以到最后，也会发生OutOfMemoryError异常。\n\n\n\n```java\n/**\n * vm参数：-Xss2M\n */\npublic class JavaVMStackOOM {\n    private void dontStop() {\n        while (true) {\n        }\n    }\n\n    public void stackLeakByThread() {\n        while (true) {\n            Thread thread = new Thread(new Runnable() {\n                public void run() {\n                    dontStop();\n                }\n            });\n            thread.start();\n        }\n    }\n\n    public static void main(String[] args) throws Throwable {\n        JavaVMStackOOM oom = new JavaVMStackOOM();\n        oom.stackLeakByThread();\n    }\n}\n```\n\n\n\n## 12.内存泄漏可能由哪些原因导致呢？\n\n\n\n内存泄漏可能的原因有很多种：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503657117-b78c2a04-899c-4496-8506-856dd47b759c.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**静态集合类引起内存泄漏**\n\n\n\n静态集合的生命周期和 JVM 一致，所以静态集合引用的对象不能被释放。\n\n\n\n```java\npublic class OOM {\n static List list = new ArrayList();\n\n public void oomTests(){\n   Object obj = new Object();\n\n   list.add(obj);\n  }\n}\n```\n\n\n\n**单例模式**\n\n\n\n和上面的例子原理类似，单例对象在初始化后会以静态变量的方式在 JVM 的整个生命周期中存在。如果单例对象持有外部的引用，那么这个外部对象将不能被 GC 回收，导致内存泄漏。\n\n\n\n**数据连接、IO、Socket等连接**\n\n\n\n创建的连接不再使用时，需要调用 **close** 方法关闭连接，只有连接被关闭后，GC 才会回收对应的对象（Connection，Statement，ResultSet，Session）。忘记关闭这些资源会导致持续占有内存，无法被 GC 回收。\n\n\n\n```java\n        try {\n            Connection conn = null;\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            conn = DriverManager.getConnection(\"url\", \"\", \"\");\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\"....\");\n          } catch (Exception e) { \n           \n          }finally {\n            //不关闭连接\n          }\n        }\n```\n\n\n\n**变量不合理的作用域**\n\n\n\n一个变量的定义作用域大于其使用范围，很可能存在内存泄漏；或不再使用对象没有及时将对象设置为 null，很可能导致内存泄漏的发生。\n\n\n\n```java\npublic class Simple {\n    Object object;\n    public void method1(){\n        object = new Object();\n        //...其他代码\n        //由于作用域原因，method1执行完成之后，object 对象所分配的内存不会马上释放\n        object = null;\n    }\n}\n```\n\n\n\n**hash值发生变化**\n\n\n\n对象Hash值改变，使用HashMap、HashSet等容器中时候，由于对象修改之后的Hah值和存储进容器时的Hash值不同，所以无法找到存入的对象，自然也无法单独删除了，这也会造成内存泄漏。说句题外话，这也是为什么String类型被设置成了不可变类型。\n\n\n\n**ThreadLocal使用不当**\n\n\n\nThreadLocal的弱引用导致内存泄漏也是个老生常谈的话题了，使用完ThreadLocal一定要记得使用remove方法来进行清除。\n\n\n\n## 13.如何判断对象仍然存活？\n\n\n\n有两种方式，**引用计数算法（reference counting）**和可达性分析算法。\n\n\n\n- **引用计数算法**\n\n\n\n引用计数器的算法是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503660586-9abee06a-23c5-4c96-b10d-4f05b4d93b8c.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- **可达性分析算法**\n\n\n\n目前 Java 虚拟机的主流垃圾回收器采取的是可达性分析算法。这个算法的实质在于将一系列 GC Roots 作为初始的存活对象合集（Gc Root Set），然后从该合集出发，探索所有能够被该集合引用到的对象，并将其加入到该集合中，这个过程我们也称之为标记（mark）。最终，未被探索到的对象便是死亡的，是可以回收的。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503662225-de1158d7-43a5-4527-ab90-a7fbfaa3bffa.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 14.Java中可作为GC Roots的对象有哪几种？\n\n\n\n可以作为GC Roots的主要有四种对象：\n\n\n\n- 虚拟机栈(栈帧中的本地变量表)中引用的对象\n- 方法区中类静态属性引用的对象\n- 方法区中常量引用的对象\n- 本地方法栈中JNI引用的对象\n\n\n\n## 15.说一下对象有哪几种引用？\n\n\n\nJava中的引用有四种，分为强引用（Strongly Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4种，这4种引用强度依次逐渐减弱。\n\n\n\n- 强引用是最传统的`引用`的定义，是指在程序代码之中普遍存在的引用赋值，无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n\n\n\n```java\nObject obj =new Object();\n```\n\n\n\n- 软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存， 才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用。\n\n\n\n```java\n        Object obj = new Object();\n        ReferenceQueue queue = new ReferenceQueue();\n        SoftReference reference = new SoftReference(obj, queue);\n        //强引用对象滞空，保留软引用\n        obj = null;\n```\n\n\n\n- 弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用。\n\n\n\n```java\n        Object obj = new Object();\n        ReferenceQueue queue = new ReferenceQueue();\n        WeakReference reference = new WeakReference(obj, queue);\n        //强引用对象滞空，保留软引用\n        obj = null;\n```\n\n\n\n- 虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。\n\n\n\n```java\n        Object obj = new Object();\n        ReferenceQueue queue = new ReferenceQueue();\n        PhantomReference reference = new PhantomReference(obj, queue);\n        //强引用对象滞空，保留软引用\n        obj = null;\n```\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503665254-cc3e1891-edbe-46f9-ab0f-3a99dbfeb408.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 16.finalize()方法了解吗？有什么作用？\n\n\n\n用一个不太贴切的比喻，垃圾回收就是古代的秋后问斩，finalize()就是刀下留人，在人犯被处决之前，还要做最后一次审计，青天大老爷看看有没有什么冤情，需不需要刀下留人。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503667730-c6e9ac08-fe2b-4f62-861d-ecd6aded9cb7.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。如果对象在在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己 （this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它就”逃过一劫“；但是如果没有抓住这个机会，那么对象就真的要被回收了。\n\n\n\n## 17.Java堆的内存分区了解吗？\n\n\n\n按照垃圾收集，将Java堆划分为**新生代 （Young Generation）**和**老年代（Old Generation）**两个区域，新生代存放存活时间短的对象，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。\n\n\n\n而新生代又可以分为三个区域，eden、from、to，比例是8：1：1，而新生代的内存分区同样是从垃圾收集的角度来分配的。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503669890-4c2f0952-6db9-4d3a-aacb-9cc066a223ef.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 18.垃圾收集算法了解吗？\n\n\n\n垃圾收集算法主要有三种：\n\n\n\n1. **标记-清除算法**\n\n\n\n见名知义，`标记-清除`（Mark-Sweep）算法分为两个阶段：\n\n\n\n- **标记** : 标记出所有需要回收的对象\n- **清除**：回收所有被标记的对象\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503671884-ce56eed4-13ef-492b-b969-654071a2f96b.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n标记-清除算法比较基础，但是主要存在两个缺点：\n\n\n\n- 执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。\n- 内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n\n\n1. **标记-复制算法**\n\n\n\n标记-复制算法解决了标记-清除算法面对大量可回收对象时执行效率低的问题。\n\n\n\n过程也比较简单：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503674474-ea71cac0-7e6d-4a59-9d77-29bbf81babb7.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n这种算法存在一个明显的缺点：一部分空间没有使用，存在空间的浪费。\n\n\n\n新生代垃圾收集主要采用这种算法，因为新生代的存活对象比较少，每次复制的只是少量的存活对象。当然，实际新生代的收集不是按照这个比例。\n\n\n\n1. **标记-整理算法**\n\n\n\n为了降低内存的消耗，引入一种针对性的算法：`标记-整理`（Mark-Compact）算法。\n\n\n\n其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503676387-2831fbac-b1d9-48ef-9d6a-021029b831c4.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n标记-整理算法主要用于老年代，移动存活对象是个极为负重的操作，而且这种操作需要Stop The World才能进行，只是从整体的吞吐量来考量，老年代使用标记-整理算法更加合适。\n\n\n\n## 19.说一下新生代的区域划分？\n\n\n\n新生代的垃圾收集主要采用标记-复制算法，因为新生代的存活对象比较少，每次复制少量的存活对象效率比较高。\n\n\n\n基于这种算法，虚拟机将内存分为一块较大的Eden空间和两块较小的 Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾收集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。默认Eden和Survivor的大小比例是8∶1。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503678911-d4943fee-ac4d-4e6d-95a5-f550b7fcdc25.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 20.Minor GC/Young GC、Major GC/Old GC、Mixed GC、Full GC都是什么意思？\n\n\n\n**部分收集**（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：\n\n\n\n- 新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。\n- 老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前**只有**CMS收集器会有单独收集老年代的行为。\n- 混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。\n\n\n\n**整堆收集**（Full GC）：收集整个Java堆和方法区的垃圾收集。\n\n\n\n## 21.Minor GC/Young GC什么时候触发？\n\n\n\n新创建的对象优先在新生代Eden区进行分配，如果Eden区没有足够的空间时，就会触发Young GC来清理新生代。\n\n\n\n## 22.什么时候会触发Full GC？\n\n\n\n这个触发条件稍微有点多，往下看：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503681486-8b771a67-c436-419b-b8e5-1dbc16855878.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- **Young GC之前检查老年代**：在要进行 Young GC 的时候，发现`老年代可用的连续内存空间` < `新生代历次Young GC后升入老年代的对象总和的平均大小`，说明本次Young GC后可能升入老年代的对象大小，可能超过了老年代当前可用内存空间,那就会触发 Full GC。\n- **Young GC之后老年代空间不足**：执行Young GC之后有一批对象需要放入老年代，此时老年代就是没有足够的内存空间存放这些对象了，此时必须立即触发一次Full GC\n- **老年代空间不足**，老年代内存使用率过高，达到一定比例，也会触发Full GC。\n- **空间分配担保失败**（ Promotion Failure），新生代的 To 区放不下从 Eden 和 From 拷贝过来对象，或者新生代对象 GC 年龄到达阈值需要晋升这两种情况，老年代如果放不下的话都会触发 Full GC。\n- **方法区内存空间不足**：如果方法区由永久代实现，永久代空间不足 Full GC。\n- **System.gc()等命令触发**：System.gc()、jmap -dump 等命令会触发 full gc。\n\n\n\n## 23.对象什么时候会进入老年代？\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503683731-45c187bd-ed4c-4259-a403-fba98657ee15.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**长期存活的对象将进入老年代**\n\n\n\n在对象的对象头信息中存储着对象的迭代年龄,迭代年龄会在每次YoungGC之后对象的移区操作中增加,每一次移区年龄加一.当这个年龄达到15(默认)之后,这个对象将会被移入老年代。\n\n\n\n可以通过这个参数设置这个年龄值。\n\n\n\n```java\n- XX:MaxTenuringThreshold\n```\n\n\n\n**大对象直接进入老年代**\n\n\n\n有一些占用大量连续内存空间的对象在被加载就会直接进入老年代.这样的大对象一般是一些数组,长字符串之类的对。\n\n\n\nHotSpot虚拟机提供了这个参数来设置。\n\n\n\n```java\n-XX：PretenureSizeThreshold\n```\n\n\n\n**动态对象年龄判定**\n\n\n\n为了能更好地适应不同程序的内存状况，HotSpot虚拟机并不是永远要求对象的年龄必须达到- XX：MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。\n\n\n\n**空间分配担保**\n\n\n\n假如在Young GC之后，新生代仍然有大量对象存活，就需要老年代进行分配担保，把Survivor无法容纳的对象直接送入老年代。\n\n\n\n## 24.知道有哪些垃圾收集器吗？\n\n\n\n主要垃圾收集器如下，图中标出了它们的工作区域、垃圾收集算法，以及配合关系。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503686311-7f40160b-146a-4fd8-9af8-37bdba69b934.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n这些收集器里，面试的重点是两个——**CMS**和**G1**。\n\n\n\n- Serial收集器\n\n\n\nSerial收集器是最基础、历史最悠久的收集器。\n\n\n\n如同它的名字（串行），它是一个单线程工作的收集器，使用一个处理器或一条收集线程去完成垃圾收集工作。并且进行垃圾收集时，必须暂停其他所有工作线程，直到垃圾收集结束——这就是所谓的“Stop The World”。\n\n\n\nSerial/Serial Old收集器的运行过程如图：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503688565-0392f21d-0059-4cac-b80f-c2fb2b11c9ff.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- ParNew\n\n\n\nParNew收集器实质上是Serial收集器的多线程并行版本，使用多条线程进行垃圾收集。\n\n\n\n**我们可以通过选项 “-XX:+UseParNewGC” 手动指定使用 ParNew 收集器执行垃圾收集任务**\n\n\n\nParNew/Serial Old收集器运行示意图如下：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503690187-f9be250e-9177-495f-957a-362cfc02ead8.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- Parallel Scavenge\n\n\n\nParallel Scavenge收集器是一款新生代收集器，基于标记-复制算法实现，也能够并行收集。和ParNew有些类似，但Parallel Scavenge主要关注的是垃圾收集的吞吐量——所谓吞吐量，就是CPU用于运行用户代码的时间和总消耗时间的比值，比值越大，说明垃圾收集的占比越小。\n\n**JDK1.8默认的新生代收集器，采用标记-复制算法**\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503692027-f1d68e0d-40a4-454e-95de-5c98c0d5fde7.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- Serial Old\n\n\n\nSerial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。\n\n\n\n- Parallel Old\n\n\n\nParallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。\n\n\n\nJDK1.8 默认的老年代垃圾收集器\n\n\n\n我们可以通过参数 -XX: +UseParalleloldGC 手动指定老年代使用 Parallel Old 并行收集器\n\n<img src=\"大厂面试之JVM篇.assets/1677503693580-279416e3-d99c-4fac-be22-2e6fec9d2a1a.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- CMS收集器\n\n\n\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，同样是老年代的收集器，采用**标记-清除算法**。\n\n\n\n- Garbage First收集器\n\n\n\nGarbage First（简称G1）收集器是垃圾收集器的一个颠覆性的产物，它开创了局部收集的设计思路和基于Region的内存布局形式。\n\n可以使用参数：-XX:+UseG1GC 指定G1垃圾收集器\n\n\n\n## 25.什么是Stop The World ? 什么是 OopMap ？什么是安全点？\n\n\n\n进行垃圾回收的过程中，会涉及对象的移动。为了保证对象引用更新的正确性，必须暂停所有的用户线程，像这样的停顿，虚拟机设计者形象描述为`Stop The World`。也简称为STW。\n\n\n\n在HotSpot中，有个数据结构（映射表）称为`OopMap`。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，记录到OopMap。在即时编译过程中，也会在`特定的位置`生成 OopMap，记录下栈上和寄存器里哪些位置是引用。\n\n\n\n这些特定的位置主要在：\n\n\n\n- 1.循环的末尾（非 counted 循环）\n- 2.方法临返回前 / 调用方法的call指令后\n- 3.可能抛异常的位置\n\n\n\n这些位置就叫作**安全点(safepoint)。** 用户程序执行时并非在代码指令流的任意位置都能够在停顿下来开始垃圾收集，而是必须是执行到安全点才能够暂停。\n\n\n\n用通俗的比喻，假如老王去拉车，车上东西很重，老王累的汗流浃背，但是老王不能在上坡或者下坡休息，只能在平地上停下来擦擦汗，喝口水。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503695720-a69f01ea-a476-42fb-9207-8042a4ea3add.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 26.能详细说一下CMS收集器的垃圾收集过程吗？\n\n\n\nCMS收集齐的垃圾收集分为四步：\n\n\n\n- **初始标记**（CMS initial mark）：单线程运行，需要Stop The World，标记GC Roots能直达的对象。\n- **并发标记**（（CMS concurrent mark）：无停顿，和用户线程同时运行，从GC Roots直达对象开始遍历整个对象图。\n- **重新标记**（CMS remark）：多线程运行，需要Stop The World，标记并发标记阶段产生对象。\n- **并发清除**（CMS concurrent sweep）：无停顿，和用户线程同时运行，清理掉标记阶段标记的死亡的对象。\n\n\n\nConcurrent Mark Sweep收集器运行示意图如下：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503697771-787559ff-0506-4ae2-93cb-64ba6e76c9c8.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 27.G1垃圾收集器了解吗？\n\n\n\nGarbage First（简称G1）收集器是垃圾收集器的一个颠覆性的产物，它开创了局部收集的设计思路和基于Region的内存布局形式。\n\n\n\n虽然G1也仍是遵循分代收集理论设计的，但其堆内存的布局与其他收集器有非常明显的差异。以前的收集器分代是划分新生代、老年代、持久代等。\n\n\n\nG1把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503699536-80d2237a-f211-4729-915e-8a7a0466bc3f.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n这样就避免了收集整个堆，而是按照若干个Region集进行收集，同时维护一个优先级列表，跟踪各个Region回收的“价值，优先收集价值高的Region。\n\n\n\nG1收集器的运行过程大致可划分为以下四个步骤：\n\n\n\n- **初始标记**（initial mark），标记了从GC Root开始直接关联可达的对象。STW（Stop the World）执行。\n- **并发标记**（concurrent marking），和用户线程并发执行，从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象、\n- **最终标记**（Remark），STW，标记再并发标记过程中产生的垃圾。\n- **筛选回收**（Live Data Counting And Evacuation），制定回收计划，选择多个Region 构成回收集，把回收集中Region的存活对象复制到空的Region中，再清理掉整个旧 Region的全部空间。需要STW。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503701396-8ea8e792-40f7-4d04-a223-0e3a38d2460b.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 28.有了CMS，为什么还要引入G1？\n\n\n\n优点：CMS最主要的优点在名字上已经体现出来——并发收集、低停顿。\n\n\n\n缺点：CMS同样有三个明显的缺点。\n\n\n\n- Mark Sweep算法会导致内存碎片比较多\n- CMS的并发能力比较依赖于CPU资源，并发回收时垃圾收集线程可能会抢占用户线程的资源，导致用户程序性能下降。\n- 并发清除阶段，用户线程依然在运行，会产生所谓的理“浮动垃圾”（Floating Garbage），本次垃圾收集无法处理浮动垃圾，必须到下一次垃圾收集才能处理。如果浮动垃圾太多，会触发新的垃圾回收，导致性能降低。\n\n\n\nG1主要解决了内存碎片过多的问题。\n\n\n\n## 29.你们线上用的什么垃圾收集器？为什么要用它？\n\n\n\n怎么说呢，虽然调优说的震天响，但是我们一般都是用默认。管你Java怎么升，我用8，那么JDK1.8默认用的是什么呢？\n\n\n\n可以使用命令：\n\n\n\n```java\njava -XX:+PrintCommandLineFlags -version\n```\n\n\n\n可以看到有这么一行：\n\n\n\n```java\n-XX:+UseParallelGC\n```\n\n\n\n`UseParallelGC` = `Parallel Scavenge + Parallel Old`，表示的是新生代用的`Parallel Scavenge`收集器，老年代用的是`Parallel Old` 收集器。\n\n\n\n那为什么要用这个呢？默认的呗。\n\n\n\n当然面试肯定不能这么答。\n\n\n\nParallel Scavenge的特点是什么？\n\n\n\n高吞吐，我们可以回答：因为我们系统是业务相对复杂，但并发并不是非常高，所以希望尽可能的利用处理器资源，出于提高吞吐量的考虑采用`Parallel Scavenge + Parallel Old`的组合。\n\n\n\n当然，这个默认虽然也有说法，但不太讨喜。\n\n\n\n还可以说：\n\n\n\n采用`Parallel New`+`CMS`的组合，我们比较关注服务的响应速度，所以采用了CMS来降低停顿时间。\n\n\n\n或者一步到位：\n\n\n\n我们线上采用了设计比较优秀的G1垃圾收集器，因为它不仅满足我们低停顿的要求，而且解决了CMS的浮动垃圾问题、内存碎片问题。\n\n\n\n## 30.垃圾收集器应该如何选择？\n\n\n\n垃圾收集器的选择需要权衡的点还是比较多的——例如运行应用的基础设施如何？使用JDK的发行商是什么？等等……\n\n\n\n这里简单地列一下上面提到的一些收集器的适用场景：\n\n\n\n- Serial ：如果应用程序有一个很小的内存空间（大约100 MB）亦或它在没有停顿时间要求的单线程处理器上运行。\n- Parallel：如果优先考虑应用程序的峰值性能，并且没有时间要求要求，或者可以接受1秒或更长的停顿时间。\n- CMS/G1：如果响应时间比吞吐量优先级高，或者垃圾收集暂停必须保持在大约1秒以内。\n- ZGC：如果响应时间是高优先级的，或者堆空间比较大。\n\n\n\n## 31.对象一定分配在堆中吗？有没有了解逃逸分析技术？\n\n\n\n**对象一定分配在堆中吗？** 不一定的。\n\n\n\n随着JIT编译期的发展与逃逸分析技术逐渐成熟，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。其实，在编译期间，JIT会对代码做很多优化。其中有一部分优化的目的就是减少内存堆分配压力，其中一种重要的技术叫做逃逸分析。\n\n\n\n**什么是逃逸分析？**\n\n\n\n**逃逸分析**是指分析指针动态范围的方法，它同编译器优化原理的指针分析和外形分析相关联。当变量（或者对象）在方法中分配后，其指针有可能被返回或者被全局引用，这样就会被其他方法或者线程所引用，这种现象称作指针（或者引用）的逃逸(Escape)。\n\n\n\n通俗点讲，当一个对象被new出来之后，它可能被外部所调用，如果是作为参数传递到外部了，就称之为方法逃逸。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503705162-76c1e695-027a-49b8-bc59-6ad2cd472f51.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n除此之外，如果对象还有可能被外部线程访问到，例如赋值给可以在其它线程中访问的实例变量，这种就被称为线程逃逸。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503707324-75bf1124-c77f-4e62-be38-b4526a928082.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**逃逸分析的好处**\n\n\n\n- 栈上分配\n\n\n\n如果确定一个对象不会逃逸到线程之外，那么久可以考虑将这个对象在栈上分配，对象占用的内存随着栈帧出栈而销毁，这样一来，垃圾收集的压力就降低很多。\n\n\n\n- **同步消除**\n\n\n\n线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争， 对这个变量实施的同步措施也就可以安全地消除掉。\n\n\n\n- **标量替换**\n\n\n\n如果一个数据是基本数据类型，不可拆分，它就被称之为标量。把一个Java对象拆散，将其用到的成员变量恢复为原始类型来访问，这个过程就称为标量替换。假如逃逸分析能够证明一个对象不会被方法外部访问，并且这个对象可以被拆散，那么可以不创建对象，直接用创建若干个成员变量代替，可以让对象的成员变量在栈上分配和读写。\n\n\n\n# JVM调优\n\n\n\n## 32.有哪些常用的命令行性能监控和故障处理工具？\n\n\n\n-  操作系统工具 \n-  \n\n- - top：显示系统整体资源使用情况\n  - vmstat：监控内存和CPU\n  - iostat：监控IO使用\n  - netstat：监控网络使用\n\n-  JDK性能监控工具 \n-  \n\n- - jps：虚拟机进程查看\n  - jstat：虚拟机运行时信息查看\n  - jinfo：虚拟机配置查看\n  - jmap：内存映像（导出）\n  - jhat：堆转储快照分析\n  - jstack：Java堆栈跟踪\n  - jcmd：实现上面除了jstat外所有命令的功能\n\n\n\n## 33.了解哪些可视化的性能监控和故障处理工具？\n\n\n\n以下是一些JDK自带的可视化性能监控和故障处理工具：\n\n\n\n- JConsole\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503709595-5cb0ff29-7111-4784-b364-fd8fc9b0f527.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- VisualVM\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503711625-bea5de06-ce27-459a-a0d8-eedf487b697f.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- Java Mission Control\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503713831-5db9ba8c-71c3-4954-a084-e6acd2b520d1.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n除此之外，还有一些第三方的工具：\n\n\n\n- **MAT**\n\n\n\nJava 堆内存分析工具。\n\n\n\n- **GChisto**\n\n\n\nGC 日志分析工具。\n\n\n\n- **GCViewer**\n\n\n\n`GC` 日志分析工具。\n\n\n\n- **JProfiler**\n\n\n\n商用的性能分析利器。\n\n\n\n- **arthas**\n\n\n\n阿里开源诊断工具。\n\n\n\n- **async-profiler**\n\n\n\nJava 应用性能分析工具，开源、火焰图、跨平台。\n\n\n\n## 34.JVM的常见参数配置知道哪些？\n\n\n\n一些常见的参数配置：\n\n\n\n**堆配置：**\n\n\n\n- -Xms:初始堆大小\n- -Xmx：最大堆大小\n- -XX:NewSize=n:设置年轻代大小\n- -XX:NewRatio=n:设置年轻代和年老代的比值。如：为3表示年轻代和年老代比值为1：3，年轻代占整个年轻代年老代和的1/4\n- -XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如3表示Eden：3 Survivor：2，一个Survivor区占整个年轻代的1/5\n- -XX:MaxPermSize=n:设置持久代大小\n\n\n\n**收集器设置：**\n\n\n\n- -XX:+UseSerialGC:设置串行收集器\n- -XX:+UseParallelGC:设置并行收集器\n- -XX:+UseParalledlOldGC:设置并行年老代收集器\n- -XX:+UseConcMarkSweepGC:设置并发收集器\n\n\n\n**并行收集器设置**\n\n\n\n- -XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数\n- -XX:MaxGCPauseMillis=n:设置并行收集最大的暂停时间（如果到这个时间了，垃圾回收器依然没有回收完，也会停止回收）\n- -XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为：1/(1+n)\n- -XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况\n- -XX:ParallelGCThreads=n:设置并发收集器年轻代手机方式为并行收集时，使用的CPU数。并行收集线程数\n\n\n\n**打印GC回收的过程日志信息**\n\n\n\n- -XX:+PrintGC\n- -XX:+PrintGCDetails\n- -XX:+PrintGCTimeStamps\n- -Xloggc:filename\n\n\n\n## 35.有做过JVM调优吗？\n\n\n\nJVM调优是一件很严肃的事情，不是拍脑门就开始调优的，需要有严密的分析和监控机制，大概的一个JVM调优流程图：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503717013-a9f55da8-e038-4e83-af88-3759cdd3f3eb.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n实际上，JVM调优是不得已而为之，有那功夫，好好把烂代码重构一下不比瞎调JVM强。\n\n\n\n但是，面试官非要问怎么办？可以从处理问题的角度来回答（对应图中事后），这是一个中规中矩的案例：电商公司的运营后台系统，偶发性的引发OOM异常，堆内存溢出。\n\n\n\n1、因为是偶发性的，所以第一次简单的认为就是堆内存不足导致，单方面的加大了堆内存从4G调整到8G  -Xms8g。\n\n\n\n2、但是问题依然没有解决，只能从堆内存信息下手，通过开启了-XX:+HeapDumpOnOutOfMemoryError参数 获得堆内存的dump文件。\n\n\n\n3、用JProfiler 对  堆dump文件进行分析，通过JProfiler查看到占用内存最大的对象是String对象，本来想跟踪着String对象找到其引用的地方，但dump文件太大，跟踪进去的时候总是卡死，而String对象占用比较多也比较正常，最开始也没有认定就是这里的问题，于是就从线程信息里面找突破点。\n\n\n\n4、通过线程进行分析，先找到了几个正在运行的业务线程，然后逐一跟进业务线程看了下代码，有个方法引起了我的注意，`导出订单信息`。\n\n\n\n5、因为订单信息导出这个方法可能会有几万的数据量，首先要从数据库里面查询出来订单信息，然后把订单信息生成excel，这个过程会产生大量的String对象。\n\n\n\n6、为了验证自己的猜想，于是准备登录后台去测试下，结果在测试的过程中发现导出订单的按钮前端居然没有做点击后按钮置灰交互事件，后端也没有做防止重复提交，因为导出订单数据本来就非常慢，使用的人员可能发现点击后很久后页面都没反应，然后就一直点，结果就大量的请求进入到后台，堆内存产生了大量的订单对象和EXCEL对象，而且方法执行非常慢，导致这一段时间内这些对象都无法被回收，所以最终导致内存溢出。\n\n\n\n7、知道了问题就容易解决了，最终没有调整任何JVM参数，只是做了两个处理：\n\n\n\n- 在前端的导出订单按钮上加上了置灰状态，等后端响应之后按钮才可以进行点击\n- 后端代码加分布式锁，做防重处理\n\n\n\n这样双管齐下，保证导出的请求不会一直打到服务端，问题解决！\n\n\n\n## 36.线上服务CPU占用过高怎么排查？\n\n\n\n问题分析：CPU高一定是某个程序长期占用了CPU资源。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503719891-a7619b05-6f64-47ef-8feb-48dbbc1400b0.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n1、所以先需要找出那个进程占用CPU高。\n\n\n\n- top  列出系统各个进程的资源占用情况。\n\n\n\n2、然后根据找到对应进行里哪个线程占用CPU高。\n\n\n\n- top -Hp 进程ID  列出对应进程里面的线程占用资源情况\n\n\n\n3、找到对应线程ID后，再打印出对应线程的堆栈信息\n\n\n\n- printf \"%x\\n\"  PID  把线程ID转换为16进制。\n- jstack PID 打印出进程的所有线程信息，从打印出来的线程信息中找到上一步转换为16进制的线程ID对应的线程信息。\n\n\n\n4、最后根据线程的堆栈信息定位到具体业务方法,从代码逻辑中找到问题所在。\n\n\n\n查看是否有线程长时间的watting 或blocked，如果线程长期处于watting状态下， 关注watting on xxxxxx，说明线程在等待这把锁，然后根据锁的地址找到持有锁的线程。\n\n\n\n## 37.内存飙高问题怎么排查？\n\n\n\n分析：内存飚高如果是发生在java进程上，一般是因为创建了大量对象所导致，持续飚高说明垃圾回收跟不上对象创建的速度，或者内存泄露导致对象无法回收。\n\n\n\n1、先观察垃圾回收的情况\n\n\n\n- jstat -gc PID 1000 查看GC次数，时间等信息，每隔一秒打印一次。\n- jmap -histo PID | head -20  查看堆内存占用空间最大的前20个对象类型,可初步查看是哪个对象占用了内存。\n\n\n\n如果每次GC次数频繁，而且每次回收的内存空间也正常，那说明是因为对象创建速度快导致内存一直占用很高；如果每次回收的内存非常少，那么很可能是因为内存泄露导致内存一直无法被回收。\n\n\n\n2、导出堆内存文件快照\n\n\n\n- jmap -dump:live,format=b,file=/home/myheapdump.hprof PID  dump堆内存信息到文件。\n\n\n\n3、使用visualVM对dump文件进行离线分析，找到占用内存高的对象，再找到创建该对象的业务代码位置，从代码和业务场景中定位具体问题。\n\n\n\n## 38.频繁 minor gc 怎么办？\n\n\n\n优化Minor GC频繁问题：通常情况下，由于新生代空间较小，Eden区很快被填满，就会导致频繁Minor  GC，因此可以通过增大新生代空间`-Xmn`来降低Minor GC的频率。\n\n\n\n## 39.频繁Full GC怎么办？\n\n\n\nFull GC的排查思路大概如下：\n\n\n\n1. 清楚从程序角度，有哪些原因导致FGC？\n\n\n\n- **大对象**：系统一次性加载了过多数据到内存中（比如SQL查询未做分页），导致大对象进入了老年代。\n- **内存泄漏**：频繁创建了大量对象，但是无法被回收（比如IO对象使用完后未调用close方法释放资源），先引发FGC，最后导致OOM.\n- 程序频繁生成一些**长生命周期的对象**，当这些对象的存活年龄超过分代年龄时便会进入老年代，最后引发FGC. （即本文中的案例）\n- **程序BUG**\n- 代码中**显式调用了gc**方法，包括自己的代码甚至框架中的代码。\n- JVM参数设置问题：包括总内存大小、新生代和老年代的大小、Eden区和S区的大小、元空间大小、垃圾回收算法等等。\n\n\n\n1. 清楚排查问题时能使用哪些工具\n\n\n\n- 公司的监控系统：大部分公司都会有，可全方位监控JVM的各项指标。\n- JDK的自带工具，包括jmap、jstat等常用命令：\n\n\n\n```shell\n# 查看堆内存各区域的使用率以及GC情况\njstat -gcutil -h20 pid 1000\n# 查看堆内存中的存活对象，并按空间排序\njmap -histo pid | head -n20\n# dump堆内存文件\njmap -dump:format=b,file=heap pid\n```\n\n\n\n- 可视化的堆内存分析工具：JVisualVM、MAT等\n\n\n\n1. 排查指南\n\n\n\n- 查看监控，以了解出现问题的时间点以及当前FGC的频率（可对比正常情况看频率是否正常）\n- 了解该时间点之前有没有程序上线、基础组件升级等情况。\n- 了解JVM的参数设置，包括：堆空间各个区域的大小设置，新生代和老年代分别采用了哪些垃圾收集器，然后分析JVM参数设置是否合理。\n- 再对步骤1中列出的可能原因做排除法，其中元空间被打满、内存泄漏、代码显式调用gc方法比较容易排查。\n- 针对大对象或者长生命周期对象导致的FGC，可通过 jmap -histo 命令并结合dump堆内存文件作进一步分析，需要先定位到可疑对象。\n- 通过可疑对象定位到具体代码再次分析，这时候要结合GC原理和JVM参数设置，弄清楚可疑对象是否满足了进入到老年代的条件才能下结论。\n\n\n\n## 40.有没有处理过内存泄漏问题？是如何定位的？\n\n\n\n内存泄漏是内在病源，外在病症表现可能有：\n\n\n\n- 应用程序长时间连续运行时性能严重下降\n- CPU 使用率飙升，甚至到 100%\n- 频繁 Full GC，各种报警，例如接口超时报警等\n- 应用程序抛出 `OutOfMemoryError` 错误\n- 应用程序偶尔会耗尽连接对象\n\n\n\n严重**内存泄漏**往往伴随频繁的 **Full GC**，所以分析排查内存泄漏问题首先还得从查看 Full GC 入手。主要有以下操作步骤：\n\n\n\n1.  使用 `jps` 查看运行的 Java 进程 ID \n2.  使用`top -p [pid]` 查看进程使用 CPU 和 MEM 的情况 \n3.  使用 `top -Hp [pid]` 查看进程下的所有线程占 CPU 和 MEM 的情况 \n4.  将线程 ID 转换为 16 进制：`printf \"%x\\n\" [pid]`，输出的值就是线程栈信息中的 **nid**。\n   例如：`printf \"%x\\n\" 29471`，换行输出 **731f**。 \n5.  抓取线程栈：`jstack 29452 > 29452.txt`，可以多抓几次做个对比。\n   在线程栈信息中找到对应线程号的 16 进制值，如下是 **731f** 线程的信息。线程栈分析可使用 Visualvm 插件 **TDA**。 \n\n```shell\n\"Service Thread\" #7 daemon prio=9 os_prio=0 tid=0x00007fbe2c164000 nid=0x731f runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n```\n\n \n\n1.  使用`jstat -gcutil [pid] 5000 10` 每隔 5 秒输出 GC 信息，输出 10 次，查看 **YGC** 和 **Full GC** 次数。通常会出现 YGC 不增加或增加缓慢，而 Full GC 增加很快。\n   或使用 `jstat -gccause [pid] 5000` ，同样是输出 GC 摘要信息。\n   或使用 `jmap -heap [pid]` 查看堆的摘要信息，关注老年代内存使用是否达到阀值，若达到阀值就会执行 Full GC。 \n2.  如果发现 `Full GC` 次数太多，就很大概率存在内存泄漏了 \n3.  使用 `jmap -histo:live [pid]` 输出每个类的对象数量，内存大小(字节单位)及全限定类名。 \n4.  生成 `dump` 文件，借助工具分析哪 个对象非常多，基本就能定位到问题在那了\n   使用 jmap 生成 dump 文件： \n\n```shell\n# jmap -dump:live,format=b,file=29471.dump 29471\nDumping heap to /root/dump ...\nHeap dump file created\n```\n\n\n可以使用 **jhat** 命令分析：`jhat -port 8000 29471.dump`，浏览器访问 jhat 服务，端口是 8000。\n通常使用图形化工具分析，如 JDK 自带的 **jvisualvm**，从菜单 > 文件 > 装入 dump 文件。\n或使用第三方式具分析的，如 **JProfiler** 也是个图形化工具，**GCViewer** 工具。Eclipse 或以使用 MAT 工具查看。或使用在线分析平台 **GCEasy**。\n注意：如果 dump 文件较大的话，分析会占比较大的内存。\n基本上就可以定位到代码层的逻辑了。 \n\n1.  \n\n1. 1. 在 dump 文析结果中查找存在大量的对象，再查对其的引用。\n   2. dump 文件分析\n\n\n\n## 41.有没有处理过内存溢出问题？\n\n\n\n内存泄漏和内存溢出二者关系非常密切，内存溢出可能会有很多原因导致，内存泄漏最可能的罪魁祸首之一。\n\n\n\n排查过程和排查内存泄漏过程类似。\n\n\n\n# 虚拟机执行\n\n\n\n## 42.能说一下类的生命周期吗？\n\n\n\n一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载 （Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化 （Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503725054-aae0538c-dadd-4f1d-bd5b-bae244a071db.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n## 43.类加载的过程知道吗？\n\n\n\n加载是JVM加载的起点，具体什么时候开始加载，《Java虚拟机规范》中并没有进行强制约束，可以交给虚拟机的具体实现来自由把握。\n\n\n\n在加载过程，JVM要做三件事情：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503726689-58741f6c-bad1-4a6d-9513-2e3135990d20.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n- 1）通过一个类的全限定名来获取定义此类的二进制字节流。\n- 2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n- 3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。\n\n\n\n加载阶段结束后，Java虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了，方法区中的数据存储格式完全由虚拟机实现自行定义，《Java虚拟机规范》未规定此区域的具体数据结构。\n\n\n\n类型数据妥善安置在方法区之后，会在Java堆内存中实例化一个java.lang.Class类的对象， 这个对象将作为程序访问方法区中的类型数据的外部接口。\n\n\n\n## 44.类加载器有哪些？\n\n\n\n主要有四种类加载器:\n\n\n\n- **启动类加载器**(Bootstrap ClassLoader)用来加载java核心类库，无法被java程序直接引用。\n- **扩展类加载器**(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\n- **系统类加载器**（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过ClassLoader.getSystemClassLoader()来获取它。\n- **用户自定义类加载器** (user class loader)，用户通过继承 java.lang.ClassLoader类的方式自行实现的类加载器。\n\n\n\n## 45.什么是双亲委派机制？\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503728577-ddb773c5-bd83-4f31-80a3-75dcadcf890e.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n双亲委派模型的工作过程：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去完成加载。\n\n\n\n## 46.为什么要用双亲委派机制？\n\n\n\n答案是为了保证应用程序的稳定有序。\n\n\n\n例如类java.lang.Object，它存放在rt.jar之中，通过双亲委派机制，保证最终都是委派给处于模型最顶端的启动类加载器进行加载，保证Object的一致。反之，都由各个类加载器自行去加载的话，如果用户自己也编写了一个名为java.lang.Object的类，并放在程序的 ClassPath中，那系统中就会出现多个不同的Object类。\n\n\n\n## 47.如何破坏双亲委派机制？\n\n\n\n如果不想打破双亲委派模型，就重写ClassLoader类中的fifindClass()方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。而如果想打破双亲委派模型则需要重写loadClass()方法。\n\n\n\n## 48.历史上有哪几次双亲委派机制的破坏？\n\n\n\n双亲委派机制在历史上主要有三次破坏：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503730859-62e0862f-baf6-4264-b5ac-dfa5404b9591.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\n**第一次破坏**\n\n\n\n双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK 1.2面世以前的“远古”时代。\n\n\n\n由于双亲委派模型在JDK 1.2之后才被引入，但是类加载器的概念和抽象类  java.lang.ClassLoader则在Java的第一个版本中就已经存在，为了向下兼容旧代码，所以无法以技术手段避免loadClass()被子类覆盖的可能性，只能在JDK 1.2之后的java.lang.ClassLoader中添加一个新的  protected方法findClass()，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在 loadClass()中编写代码。\n\n\n\n**第二次破坏**\n\n\n\n双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的，如果有基础类型又要调用回用户的代码，那该怎么办呢？\n\n\n\n例如我们比较熟悉的JDBC:\n\n\n\n各个厂商各有不同的JDBC的实现，Java在核心包`\\lib`里定义了对应的SPI，那么这个就毫无疑问由`启动类加载器`加载器加载。\n\n\n\n但是各个厂商的实现，是没办法放在核心包里的，只能放在`classpath`里，只能被`应用类加载器`加载。那么，问题来了，启动类加载器它就加载不到厂商提供的SPI服务代码。\n\n\n\n为了解决这个问题，引入了一个不太优雅的设计：线程上下文类加载器 （Thread Context ClassLoader）。这个类加载器可以通过java.lang.Thread类的setContext-ClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。\n\n\n\nJNDI服务使用这个线程上下文类加载器去加载所需的SPI服务代码，这是一种父类加载器去请求子类加载器完成类加载的行为。\n\n\n\n**第三次破坏**\n\n\n\n双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，例如代码热替换（Hot Swap）、模块热部署（Hot Deployment）等。\n\n\n\nOSGi实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块（OSGi中称为 Bundle）都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实现代码的热替换。在OSGi环境下，类加载器不再双亲委派模型推荐的树状结构，而是进一步发展为更加复杂的网状结构。\n\n\n\n## 49.你觉得应该怎么实现一个热部署功能？\n\n\n\n我们已经知道了Java类的加载过程。一个Java类文件到虚拟机里的对象，要经过如下过程:首先通过Java编译器，将Java文件编译成class字节码，类加载器读取class字节码，再将类转化为实例，对实例newInstance就可以生成对象。\n\n\n\n类加载器ClassLoader功能，也就是将class字节码转换到类的实例。在Java应用中，所有的实例都是由类加载器，加载而来。\n\n\n\n一般在系统中，类的加载都是由系统自带的类加载器完成，而且对于同一个全限定名的java类（如com.csiar.soc.HelloWorld），只能被加载一次，而且无法被卸载。\n\n\n\n这个时候问题就来了，如果我们希望将java类卸载，并且替换更新版本的java类，该怎么做呢？\n\n\n\n既然在类加载器中，Java类只能被加载一次，并且无法卸载。那么我们是不是可以直接把Java类加载器干掉呢？答案是可以的，我们可以自定义类加载器，并重写ClassLoader的findClass方法。\n\n\n\n想要实现热部署可以分以下三个步骤：\n\n\n\n1. 销毁原来的自定义ClassLoader\n2. 更新class类文件\n3. 创建新的ClassLoader去加载更新后的class类文件。\n\n\n\n到此，一个热部署的功能就这样实现了。\n\n\n\n## 50.Tomcat的类加载机制了解吗？\n\n\n\nTomcat是主流的Java Web服务器之一，为了实现一些特殊的功能需求，自定义了一些类加载器。\n\n\n\nTomcat类加载器如下：\n\n\n\n<img src=\"大厂面试之JVM篇.assets/1677503734187-ee8c8874-1bd5-4411-ba8d-190d63d0edf7.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n\n\nTomcat实际上也是破坏了双亲委派模型的。\n\n\n\nTomact是web容器，可能需要部署多个应用程序。不同的应用程序可能会依赖同一个第三方类库的不同版本，但是不同版本的类库中某一个类的全路径名可能是一样的。如多个应用都要依赖hollis.jar，但是A应用需要依赖1.0.0版本，但是B应用需要依赖1.0.1版本。这两个版本中都有一个类是com.hollis.Test.class。如果采用默认的双亲委派类加载机制，那么无法加载多个相同的类。\n\n\n\n所以，Tomcat破坏了**双亲委派原则**，提供隔离的机制，为每个web容器单独提供一个WebAppClassLoader加载器。每一个WebAppClassLoader负责加载本身的目录下的class文件，加载不到时再交CommonClassLoader加载，这和双亲委派刚好相反。","tags":["JVM","我要进大厂","面试"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试合集","url":"/note/JAVA/面试/我要进大厂/大厂面试合集/","content":"\n\n\n文件点击下载\n\n[大厂面试合集.docx](./大厂面试合集.docx)","tags":["我要进大厂","面试"],"categories":["JAVA","面试","我要进大厂"]},{"title":"大厂面试之并发篇","url":"/note/JAVA/面试/我要进大厂/大厂面试之并发篇/","content":"\n## 1.并行跟并发有什么区别？\n\n\n\n从操作系统的角度来看，线程是CPU分配的最小单位。\n\n\n\n并行就是同一时刻，两个线程都在执行。这就要求有两个CPU去分别执行两个线程。\n\n\n\n并发就是同一时刻，只有一个执行，但是一个时间段内，两个线程都执行了。并发的实现依赖于CPU切换线程，因为切换的时间特别短，所以基本对于用户是无感知的。\n\n\n\n![img](大厂面试之并发篇.assets/1676356856068-60c252d0-0bee-4505-9459-a9ed484347d2.png)\n\n\n\n就好像我们去食堂打饭，并行就是我们在多个窗口排队，几个阿姨同时打菜；并发就是我们挤在一个窗口，阿姨给这个打一勺，又手忙脚乱地给那个打一勺。\n\n\n\n![img](大厂面试之并发篇.assets/1676356858559-42ae25c0-e161-4cb1-af5d-41efc1f3ffd8.png)\n\n\n\n**说说什么是进程和线程？**\n\n\n\n要说线程，必须得先说说进程。\n\n\n\n进程：进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。\n\n\n\n线程：线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源。\n\n\n\n操作系统在分配资源时是把资源分配给进程的， 但是 CPU 资源比较特殊，它是被分配到线程的，因为真正要占用CPU运行的是线程，所以也说线程是 CPU分配的基本单位。\n\n\n\n比如在Java中，当我们启动 main 函数其实就启动了一个JVM进程，而 main 函数在的线程就是这个进程中的一个线程，也称主线程。\n\n\n\n![img](大厂面试之并发篇.assets/1676356861050-55c02990-7266-403f-b556-1b631fb554c7.png)\n\n\n\n一个进程中有多个线程，多个线程共用进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈。\n\n\n\n## 2.说说线程有几种创建方式？\n\n\n\nJava中创建线程主要有三种方式，分别为继承Thread类、实现Runnable接口、实现Callable接口。\n\n\n\n![img](大厂面试之并发篇.assets/1676356864456-1d2c6770-9305-475b-9d77-cda9edba0a75.png)\n\n\n\n继承Thread类，重写run()方法，调用start()方法启动线程\n\n\n\n```java\npublic class ThreadTest {\n\n    /**\n     * 继承Thread类\n     */\n    public static class MyThread extends Thread {\n        @Override\n        public void run() {\n            System.out.println(\"This is child thread\");\n        }\n    }\n\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n}\n```\n\n\n\n实现 Runnable 接口，重写run()方法\n\n\n\n```java\npublic class RunnableTask implements Runnable {\n    public void run() {\n        System.out.println(\"Runnable!\");\n    }\n\n    public static void main(String[] args) {\n        RunnableTask task = new RunnableTask();\n        new Thread(task).start();\n    }\n}\n```\n\n\n\n上面两种都是没有返回值的，但是如果我们需要获取线程的执行结果，该怎么办呢？\n\n\n\n实现Callable接口，重写call()方法，这种方式可以通过FutureTask获取任务执行的返回值\n\n\n\n```java\npublic class CallerTask implements Callable<String> {\n    public String call() throws Exception {\n        return \"Hello,i am running!\";\n    }\n\n    public static void main(String[] args) {\n        //创建异步任务\n        FutureTask<String> task=new FutureTask<String>(new CallerTask());\n        //启动线程\n        new Thread(task).start();\n        try {\n            //等待执行完成，并获取返回结果\n            String result=task.get();\n            System.out.println(result);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n## 3.为什么调用start()方法时会执行run()方法，那怎么不直接调用run()方法？\n\n\n\nJVM执行start方法，会先创建一条线程，由创建出来的新线程去执行thread的run方法，这才起到多线程的效果。\n\n\n\n![img](大厂面试之并发篇.assets/1676356869600-2116241a-4118-45e6-b2f7-6ad5e51b52ba.png)\n\n\n\n**为什么我们不能直接调用run()方法？**也很清楚， 如果直接调用Thread的run()方法，那么run方法还是运行在主线程中，相当于顺序执行，就起不到多线程的效果。\n\n\n\n## 4.线程有哪些常用的调度方法？\n\n\n\n![img](大厂面试之并发篇.assets/1676356872732-0675abf4-07ef-42cb-80f4-5c0db2673266.png)\n\n\n\n**线程等待与通知**\n\n\n\n在Object类中有一些函数可以用于线程的等待与通知。\n\n\n\n`wait()`：当一个线程A调用一个共享变量的 wait()方法时， 线程A会被阻塞挂起， 发生下面几种情况才会返回 ：\n\n\n\n-  线程A调用了共享对象 notify()或者 notifyAll()方法； \n\n-  其他线程调用了线程A的 interrupt() 方法，线程A抛出InterruptedException异常返回。 \n\n\n\n`wait(long timeout)` ：这个方法相比 wait() 方法多了一个超时参数，它的不同之处在于，如果线程A调用共享对象的wait(long timeout)方法后，没有在指定的 timeout ms时间内被其它线程唤醒，那么这个方法还是会因为超时而返回。\n\n\n\n`wait(long timeout, int nanos)`：其内部调用的是 wait(long timout）函数。\n\n\n\n上面是线程等待的方法，而唤醒线程主要是下面两个方法：\n\n\n\n`notify()` : 一个线程A调用共享对象的 notify() 方法后，会唤醒一个在这个共享变量上调用 wait 系列方法后被挂起的线程。一个共享变量上可能会有多个线程在等待，具体唤醒哪个等待的线程是随机的。\n\n\n\n`notifyAll()`：不同于在共享变量上调用 notify() 函数会唤醒被阻塞到该共享变量上的一个线程，notifyAll()方法则会唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。\n\n\n\n问：那如果在synchronized代码块中间部分执行了wait方法，当该线程被再次notify唤醒的时候，是从哪里开始执行的？\n\n- 被再次唤醒notify的时候，该线程会重新开始竞争锁；\n- 竞争到之后，从wait()处往后执行\n\n下面是一段的验证的代码\n\n```java\n\npublic class WaitNotifyDemo {\n    private static final Object lock = new Object();\n    private static final SimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                synchronized (lock) {\n                    System.out.println(sf.format(new Date())+\"：Thread 1 get lock\");\n                    try {\n                        System.out.println(sf.format(new Date())+\"：Thread 1 is waiting\");\n                        lock.wait(); // 在synchronized代码块中间部分执行wait方法\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    System.out.println(sf.format(new Date())+\"：Thread 1 continue。。。\");\n                }\n            }\n        });\n\n        Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                synchronized (lock) {\n                    System.out.println(sf.format(new Date())+\"：Thread 2 get lock\");\n                    lock.notify();\n                    System.out.println(sf.format(new Date())+\"：Thread 2 notify\");\n                    try {\n                        Thread.sleep(5000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    System.out.println(sf.format(new Date())+\"：Thread 2 released lock\");\n                }\n            }\n        });\n\n        t1.start();\n        try {\n            Thread.sleep(1000); // 等待t1线程先执行\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        t2.start();\n    }\n}\n\n```\n\n\n\n\n\nThread类也提供了一个方法用于等待的方法：\n\n\n\n`join()`：如果一个线程A执行了threadB.join()语句，其含义是：当前线程A等待threadB线程执行完成之后才可以继续执行。\n\n\n\n**线程休眠**\n\n\n\n`sleep(long millis)`  :Thread类中的静态方法，当一个执行中的线程A调用了Thread 的sleep方法后，线程A会暂时让出指定时间的执行权，但是线程A所拥有的监视器资源，比如锁还是持有不让出的。指定的睡眠时间到了后该函数会正常返回，接着参与 CPU 的调度，获取到 CPU 资源后就可以继续运行。\n\n\n\n**让出优先权**\n\n\n\n`yield()`：Thread类中的静态方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己的CPU ，但是线程调度器可以无条件忽略这个暗示。\n\n\n\n**线程中断**\n\n\n\nJava 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。\n\n\n\n`void interrupt()` ：中断线程，例如，当线程A运行时，线程B可以调用钱程interrupt() 方法来设置线程的中断标志为true 并立即返回。设置标志仅仅是设置标志, 线程A实际并没有被中断， 会继续往下执行。\n\n\n\n`boolean isInterrupted()`方法：检测当前线程是否被中断。\n\n\n\n`boolean interrupted()` 方法：检测当前线程是否被中断，与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志。\n\n\n\n## 5.线程有几种状态？\n\n\n\n在Java中，线程共有六种状态：\n\njava.lang.Thread.State\n\n```java\n\n    /**\n     * A thread state.  A thread can be in one of the following states:\n     * NEW\n     *     A thread that has not yet started is in this state.\n     * RUNNABLE\n     *     A thread executing in the Java virtual machine is in this state.\n     * BLOCKED\n     *     A thread that is blocked waiting for a monitor lock is in this state.\n     * WAITING\n     *     A thread that is waiting indefinitely for another thread to\n     *     perform a particular action is in this state.\n     * TIMED_WAITING\n     *     A thread that is waiting for another thread to perform an action\n     *     for up to a specified waiting time is in this state.\n     * TERMINATED\n     *     A thread that has exited is in this state.\n     * \n     * A thread can be in only one state at a given point in time.\n     * These states are virtual machine states which do not reflect\n     * any operating system thread states.\n     *\n     * @since   1.5\n     * @see #getState\n     */\n    public enum State {\n        /**\n         * Thread state for a thread which has not yet started.\n         */\n        NEW,\n\n        /**\n         * Thread state for a runnable thread.  A thread in the runnable\n         * state is executing in the Java virtual machine but it may\n         * be waiting for other resources from the operating system\n         * such as processor.\n         */\n        RUNNABLE,\n\n        /**\n         * Thread state for a thread blocked waiting for a monitor lock.\n         * A thread in the blocked state is waiting for a monitor lock\n         * to enter a synchronized block/method or\n         * reenter a synchronized block/method after calling\n         * {@link Object#wait() Object.wait}.\n         */\n        BLOCKED,\n\n        /**\n         * Thread state for a waiting thread.\n         * A thread is in the waiting state due to calling one of the\n         * following methods:\n         * <ul>\n         *   <li>{@link Object#wait() Object.wait} with no timeout</li>\n         *   <li>{@link #join() Thread.join} with no timeout</li>\n         *   <li>{@link LockSupport#park() LockSupport.park}</li>\n         * </ul>\n         *\n         * <p>A thread in the waiting state is waiting for another thread to\n         * perform a particular action.\n         *\n         * For example, a thread that has called <tt>Object.wait()</tt>\n         * on an object is waiting for another thread to call\n         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on\n         * that object. A thread that has called <tt>Thread.join()</tt>\n         * is waiting for a specified thread to terminate.\n         */\n        WAITING,\n\n        /**\n         * Thread state for a waiting thread with a specified waiting time.\n         * A thread is in the timed waiting state due to calling one of\n         * the following methods with a specified positive waiting time:\n         * <ul>\n         *   <li>{@link #sleep Thread.sleep}</li>\n         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>\n         *   <li>{@link #join(long) Thread.join} with timeout</li>\n         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>\n         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>\n         * </ul>\n         */\n        TIMED_WAITING,\n\n        /**\n         * Thread state for a terminated thread.\n         * The thread has completed execution.\n         */\n        TERMINATED;\n    }\n```\n\n线程在自身的生命周期中， 并不是固定地处于某个状态，而是随着代码的执行在不同的状态之间进行切换，Java线程状态变化如图示：\n\n\n\n![img](大厂面试之并发篇.assets/1676356875839-b8ec0b34-f58e-4519-8fe6-8bbe22346917.png)\n\n\n\n## 6.什么是线程上下文切换？\n\n\n\n使用多线程的目的是为了充分利用CPU，但是我们知道，并发其实是一个CPU来应付多个线程。\n\n\n\n![img](大厂面试之并发篇.assets/1676356878653-9db9598b-2bfa-4450-a4d5-8229c40d2f5e.png)\n\n\n\n为了让用户感觉多个线程是在同时执行的， CPU 资源的分配采用了时间片轮转也就是给每个线程分配一个时间片，线程在时间片内占用 CPU 执行任务。当线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占用，这就是上下文切换。\n\n\n\n![img](大厂面试之并发篇.assets/1676356880629-de630971-80d3-4883-949f-107dd000636a.png)\n\n\n\n## 7.守护线程了解吗？\n\n\n\nJava中的线程分为两类，分别为 daemon 线程（守护线程）和 user 线程（用户线程）。\n\n\n\n在JVM 启动时会调用 main 函数，main函数所在的钱程就是一个用户线程。其实在 JVM 内部同时还启动了很多守护线程， 比如垃圾回收线程。\n\n\n\n那么守护线程和用户线程有什么区别呢？区别之一是当最后一个非守护线程束时， JVM会正常退出，而不管当前是否存在守护线程，也就是说守护线程是否结束并不影响 JVM退出。换而言之，只要有一个用户线程还没结束，正常情况下JVM就不会退出。\n\n\n\n## 8.线程间有哪些通信方式？\n\n\n\n![img](大厂面试之并发篇.assets/1676356883131-dc718227-8210-40cc-8646-f5e317ff62f0.png)\n\n\n\n**volatile和synchronized关键字**\n\n\n\n关键字volatile可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程对变量访问的可见性。\n\n\n\n关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排他性。\n\n\n\n**等待/通知机制**\n\n\n\n可以通过Java内置的等待/通知机制（wait()/notify()）实现一个线程修改一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\n\n\n\n**管道输入/输出流**\n\n\n\n管道输入/输出流和普通的文件输入/输出流或者网络输入/输出流不同之处在于，它主要用于线程之间的数据传输，而传输的媒介为内存。\n\n\n\n管道输入/输出流主要包括了如下4种具体实现：PipedOutputStream、PipedInputStream、 PipedReader和PipedWriter，前两种面向字节，而后两种面向字符。\n\n\n\n**使用Thread.join()**\n\n\n\n如果一个线程A执行了thread.join()语句，其含义是：当前线程A等待thread线程终止之后才从thread.join()返回。。线程Thread除了提供join()方法之外，还提供了join(long millis)和join(long millis,int nanos)两个具备超时特性的方法。\n\n\n\n**使用ThreadLocal**\n\n\n\nThreadLocal，即线程变量，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个线程上的一个值。\n\n\n\n可以通过set(T)方法来设置一个值，在当前线程下再通过get()方法获取到原先设置的值。\n\n\n\n关于多线程，其实很大概率还会出一些笔试题，比如交替打印、银行转账、生产消费模型等等，后面陈哥会单独出一期来盘点一下常见的多线程笔试题。\n\n\n\n## 9.ThreadLocal是什么？\n\n\n\nThreadLocal，也就是线程本地变量。如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程安全问题。\n\n\n\n![img](大厂面试之并发篇.assets/1676356885915-22e308f5-9086-4cf9-87b4-79c66f2a9e72.png)\n\n\n\n**创建**\n\n\n\n创建了一个ThreadLoca变量localVariable，任何一个线程都能并发访问localVariable。\n\n\n\n```java\n//创建一个ThreadLocal变量\npublic static ThreadLocal<String> localVariable = new ThreadLocal<>();\n```\n\n\n\n**写入**\n\n\n\n线程可以在任何地方使用localVariable，写入变量。\n\n\n\n```java\nlocalVariable.set(\"鄙人三某”);\n```\n\n\n\n**读取**\n\n\n\n线程在任何地方读取的都是它写入的变量。\n\n\n\n```java\nlocalVariable.get();\n```\n\n\n\n## 10.你在工作中用到过ThreadLocal吗？\n\n\n\n有用到过的，用来做用户信息上下文的存储。\n\n\n\n我们的系统应用是一个典型的MVC架构，登录后的用户每次访问接口，都会在请求头中携带一个token，在控制层可以根据这个token，解析出用户的基本信息。那么问题来了，假如在服务层和持久层都要用到用户信息，比如rpc调用、更新用户获取等等，那应该怎么办呢？\n\n\n\n一种办法是显式定义用户相关的参数，比如账号、用户名……这样一来，我们可能需要大面积地修改代码，多少有点瓜皮，那该怎么办呢？\n\n\n\n这时候我们就可以用到ThreadLocal，在控制层拦截请求把用户信息存入ThreadLocal，这样我们在任何一个地方，都可以取出ThreadLocal中存的用户数据。\n\n\n\n![img](大厂面试之并发篇.assets/1676356889513-0edc8073-1121-41f7-ab40-4b1cd14b97cb.png)\n\n\n\n很多其它场景的cookie、session等等数据隔离也都可以通过ThreadLocal去实现。\n\n\n\n我们常用的数据库连接池也用到了ThreadLocal：\n\n\n\n- 数据库连接池的连接交给ThreadLoca进行管理，保证当前线程的操作都是同一个Connnection。\n\n\n\n## 11.ThreadLocal怎么实现的呢？\n\n\n\n我们看一下ThreadLocal的set(T)方法，发现先获取到当前线程，再获取`ThreadLocalMap`，然后把元素存到这个map中。\n\n\n\n```java\n    public void set(T value) {\n        //获取当前线程\n        Thread t = Thread.currentThread();\n        //获取ThreadLocalMap\n        ThreadLocalMap map = getMap(t);\n        //讲当前元素存入map\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n    }\n```\n\n\n\nThreadLocal实现的秘密都在这个`ThreadLocalMap`了，可以Thread类中定义了一个类型为`ThreadLocal.ThreadLocalMap`的成员变量`threadLocals`。\n\n\n\n```java\npublic class Thread implements Runnable {\n   //ThreadLocal.ThreadLocalMap是Thread的属性\n   ThreadLocal.ThreadLocalMap threadLocals = null;\n}\n```\n\n\n\nThreadLocalMap既然被称为Map，那么毫无疑问它是<key,value>型的数据结构。我们都知道map的本质是一个个<key,value>形式的节点组成的数组，那ThreadLocalMap的节点是什么样的呢？\n\n\n\n```java\n        static class Entry extends WeakReference<ThreadLocal<?>> {\n            /** The value associated with this ThreadLocal. */\n            Object value;\n\n            //节点类\n            Entry(ThreadLocal<?> k, Object v) {\n                //key赋值\n                super(k);\n                //value赋值\n                value = v;\n            }\n        }\n```\n\n\n\n这里的节点，key可以简单低视作ThreadLocal，value为代码中放入的值，当然实际上key并不是ThreadLocal本身，而是它的一个**弱引用**，可以看到Entry的key继承了 WeakReference（弱引用），再来看一下key怎么赋值的：\n\n\n\n```java\n    public WeakReference(T referent) {\n        super(referent);\n    }\n```\n\n\n\nkey的赋值，使用的是WeakReference的赋值。\n\n\n\n![img](大厂面试之并发篇.assets/1676356894039-95594a5d-6b20-436b-9914-1b35fb231544.png)\n\n\n\n所以，怎么回答ThreadLocal原理？要答出这几个点：\n\n\n\n1、Thread类有一个类型为ThreadLocal.ThreadLocalMap的实例变量threadLocals，每个线程都有一个属于自己的ThreadLocalMap。\n\n\n\n2、ThreadLocalMap内部维护着Entry数组，每个Entry代表一个完整的对象，key是ThreadLocal的弱引用，value是ThreadLocal的泛型值。\n\n\n\n3、每个线程在往ThreadLocal里设置值的时候，都是往自己的ThreadLocalMap里存，读也是以某个ThreadLocal作为引用，在自己的map里找对应的key，从而实现了线程隔离。\n\n\n\n4、ThreadLocal本身不存储值，它只是作为一个key来让线程往ThreadLocalMap里存取值。\n\n\n\n## 12.ThreadLocal 内存泄露是怎么回事？\n\n\n\n我们先来分析一下使用ThreadLocal时的内存，我们都知道，在JVM中，栈内存线程私有，存储了对象的引用，堆内存线程共享，存储了对象实例。\n\n\n\n所以呢，栈中存储了ThreadLocal、Thread的引用，堆中存储了它们的具体实例。\n\n\n\n![img](大厂面试之并发篇.assets/1676356896514-11c611d6-f041-47e5-84a7-7c1b49864c97.png)\n\n\n\nThreadLocalMap中使用的 key 为 ThreadLocal 的弱引用。\n\n\n\n“弱引用：只要垃圾回收机制一运行，不管JVM的内存空间是否充足，都会回收该对象占用的内存。”\n\n\n\n那么现在问题就来了，弱引用很容易被回收，如果ThreadLocal（ThreadLocalMap的Key）被垃圾回收器回收了，但是ThreadLocalMap生命周期和Thread是一样的，它这时候如果不被回收，就会出现这种情况：ThreadLocalMap的key没了，value还在，这就会**造成了内存泄漏问题**。\n\n\n\n**那怎么解决内存泄漏问题呢？**\n\n\n\n很简单，使用完ThreadLocal后，及时调用remove()方法释放内存空间。\n\n\n\n```java\nThreadLocal<String> localVariable = new ThreadLocal();\ntry {\n    localVariable.set(\"鄙人三某”);\n    ……\n} finally {\n    localVariable.remove();\n}\n```\n\n\n\n**那为什么key还要设计成弱引用？**\n\n\n\nkey设计成弱引用同样是为了防止内存泄漏。\n\n\n\n假如key被设计成强引用，如果ThreadLocal Reference被销毁，此时它指向ThreadLoca的强引用就没有了，但是此时key还强引用指向ThreadLoca，就会导致ThreadLocal不能被回收，这时候就发生了内存泄漏的问题。\n\n\n\n## 13.ThreadLocalMap的结构了解吗？\n\n\n\nThreadLocalMap虽然被叫做Map，其实它是没有实现Map接口的，但是结构还是和HashMap比较类似的，主要关注的是两个要素：`元素数组`和`散列方法`。\n\n\n\n![img](大厂面试之并发篇.assets/1676356898819-b1b00f43-8909-458e-996e-043d6d491d16.png)\n\n\n\n**元素数组**\n\n\n\n一个table数组，存储Entry类型的元素，Entry是ThreaLocal弱引用作为key，Object作为value的结构。\n\n\n\n```java\n private Entry[] table;\n```\n\n\n\n**散列方法**\n\n\n\n散列方法就是怎么把对应的key映射到table数组的相应下标，ThreadLocalMap用的是哈希取余法，取出key的threadLocalHashCode，然后和table数组长度减一&运算（相当于取余）。\n\n\n\n```java\nint i = key.threadLocalHashCode & (table.length - 1);\n```\n\n\n\n这里的threadLocalHashCode计算有点东西，每创建一个ThreadLocal对象，它就会新增`0x61c88647`，这个值很特殊，它是**斐波那契数** 也叫 **黄金分割数**。`hash`增量为 这个数字，带来的好处就是 `hash` **分布非常均匀**。\n\n\n\n```java\n    private static final int HASH_INCREMENT = 0x61c88647;\n    \n    private static int nextHashCode() {\n        return nextHashCode.getAndAdd(HASH_INCREMENT);\n    }\n```\n\n\n\n## 14.ThreadLocalMap怎么解决Hash冲突的？\n\n\n\n我们可能都知道HashMap使用了链表来解决冲突，也就是所谓的链地址法。\n\n\n\nThreadLocalMap没有使用链表，自然也不是用链地址法来解决冲突了，它用的是另外一种方式——**开放定址法**。开放定址法是什么意思呢？简单来说，就是这个坑被人占了，那就接着去找空着的坑。\n\n\n\n![img](大厂面试之并发篇.assets/1676356901216-b4d3489b-aca9-4dd6-b94a-aafd33774136.png)\n\n\n\n如上图所示，如果我们插入一个value=27的数据，通过 hash计算后应该落入第 4 个槽位中，而槽位 4 已经有了 Entry数据，而且Entry数据的key和当前不相等。此时就会线性向后查找，一直找到 Entry为 null的槽位才会停止查找，把元素放到空的槽中。\n\n\n\n在get的时候，也会根据ThreadLocal对象的hash值，定位到table中的位置，然后判断该槽位Entry对象中的key是否和get的key一致，如果不一致，就判断下一个位置。\n\n\n\n## 15.ThreadLocalMap扩容机制了解吗？\n\n\n\n在ThreadLocalMap.set()方法的最后，如果执行完启发式清理工作后，未清理到任何数据，且当前散列数组中`Entry`的数量已经达到了列表的扩容阈值`(len*2/3)`，就开始执行`rehash()`逻辑：\n\n\n\n```java\nif (!cleanSomeSlots(i, sz) && sz >= threshold)\n    rehash();\n```\n\n\n\n再着看rehash()具体实现：这里会先去清理过期的Entry，然后还要根据条件判断`size >= threshold - threshold / 4` 也就是`size >= threshold* 3/4`来决定是否需要扩容。\n\n\n\n```java\nprivate void rehash() {\n    //清理过期Entry\n    expungeStaleEntries();\n\n    //扩容\n    if (size >= threshold - threshold / 4)\n        resize();\n}\n\n//清理过期Entry\nprivate void expungeStaleEntries() {\n    Entry[] tab = table;\n    int len = tab.length;\n    for (int j = 0; j < len; j++) {\n        Entry e = tab[j];\n        if (e != null && e.get() == null)\n            expungeStaleEntry(j);\n    }\n}\n```\n\n\n\n接着看看具体的`resize()`方法，扩容后的`newTab`的大小为老数组的两倍，然后遍历老的table数组，散列方法重新计算位置，开放地址解决冲突，然后放到新的`newTab`，遍历完成之后，`oldTab`中所有的`entry`数据都已经放入到`newTab`中了，然后table引用指向`newTab`\n\n\n\n![img](大厂面试之并发篇.assets/1676356904798-8cfa5960-6c5e-40c2-b28f-0fbf8c42e313.png)\n\n\n\n具体代码：\n\n\n\n![img](大厂面试之并发篇.assets/1676356906749-5c8a48d9-e202-4bf6-878e-6e2555845df4.png)\n\n\n\n## 16.父子线程怎么共享数据？\n\n\n\n父线程能用ThreadLocal来给子线程传值吗？毫无疑问，不能。那该怎么办？\n\n\n\n这时候可以用到另外一个类——`InheritableThreadLocal`。\n\n\n\n使用起来很简单，在主线程的InheritableThreadLocal实例设置值，在子线程中就可以拿到了。\n\n\n\n```java\npublic class InheritableThreadLocalTest {\n    \n    public static void main(String[] args) {\n        final ThreadLocal threadLocal = new InheritableThreadLocal();\n        // 主线程\n        threadLocal.set(\"不擅技术\");\n        //子线程\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                super.run();\n                System.out.println(\"鄙人三某 ，\" + threadLocal.get());\n            }\n        };\n        t.start();\n    }\n}\n```\n\n\n\n**那原理是什么呢？**\n\n\n\n原理很简单，在Thread类里还有另外一个变量：\n\n\n\n```java\nThreadLocal.ThreadLocalMap inheritableThreadLocals = null;\n```\n\n\n\n在Thread.init的时候，如果父线程的`inheritableThreadLocals`不为空，就把它赋给当前线程（子线程）的`inheritableThreadLocals`。\n\n\n\n```java\n        if (inheritThreadLocals && parent.inheritableThreadLocals != null)\n            this.inheritableThreadLocals =\n                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n```\n\n\n\n## 17.说一下你对Java内存模型（JMM）的理解？\n\n\n\nJava内存模型（Java Memory Model，JMM），是一种抽象的模型，被定义出来屏蔽各种硬件和操作系统的内存访问差异。\n\n\n\nJMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在`主内存`（Main Memory）中，每个线程都有一个私有的`本地内存`（Local Memory），本地内存中存储了该线程以读/写共享变量的副本。\n\n\n\nJava内存模型的抽象图：\n\n\n\n![img](大厂面试之并发篇.assets/1676356911220-4d74fc7c-621a-457d-a8d9-56a782438af0.png)\n\n\n\n本地内存是JMM的 一个抽象概念，并不真实存在。它其实涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。\n\n\n\n![img](大厂面试之并发篇.assets/1676356916018-9d5d2470-d8d4-448f-bc98-4812f2b9eda8.png)\n\n\n\n图里面的是一个双核 CPU 系统架构 ，每个核有自己的控制器和运算器，其中控制器包含一组寄存器和操作控制器，运算器执行算术逻辅运算。每个核都有自己的一级缓存，在有些架构里面还有一个所有 CPU 共享的二级缓存。那么 Java 内存模型里面的工作内存，就对应这里的 Ll 缓存或者 L2 缓存或者 CPU 寄存器。\n\n\n\n## 18.说说你对原子性、可见性、有序性的理解？\n\n\n\n原子性、有序性、可见性是并发编程中非常重要的基础概念，JMM的很多技术都是围绕着这三大特性展开。\n\n\n\n**原子性**：原子性指的是一个操作是不可分割、不可中断的，要么全部执行并且执行的过程不会被任何因素打断，要么就全不执行。\n\n\n\n**可见性**：可见性指的是一个线程修改了某一个共享变量的值时，其它线程能够立即知道这个修改。\n\n\n\n**有序性**：有序性指的是对于一个线程的执行代码，从前往后依次执行，单线程下可以认为程序是有序的，但是并发时有可能会发生指令重排。\n\n\n\n分析下面几行代码的原子性？\n\n\n\n```java\nint i = 2;\nint j = i;\ni++;\ni = i + 1;\n```\n\n\n\n第1句是基本类型赋值，是原子性操作。\n\n\n\n第2句先读i的值，再赋值到j，两步操作，不能保证原子性。\n\n\n\n第3和第4句其实是等效的，先读取i的值，再+1，最后赋值到i，三步操作了，不能保证原子性。\n\n\n\n**原子性、可见性、有序性都应该怎么保证呢？**\n\n\n\n原子性：JMM只能保证基本的原子性，如果要保证一个代码块的原子性，需要使用`synchronized`。\n\n\n\n可见性：Java是利用`volatile`关键字来保证可见性的，除此之外，`final`和`synchronized`也能保证可见性。\n\n\n\n有序性：`synchronized`或者`volatile`都可以保证多线程之间操作的有序性。\n\n\n\n## 19.那说说什么是指令重排？\n\n\n\n在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。重排序分3种类型。\n\n\n\n1、编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。\n\n\n\n2、指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应 机器指令的执行顺序。\n\n\n\n3、内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\n\n\n\n从Java源代码到最终实际执行的指令序列，会分别经历下面3种重排序，如图：\n\n\n\n![img](大厂面试之并发篇.assets/1676356919762-a5a52cbf-5abb-4463-a4bf-af97a5bded0b.png)\n\n\n\n我们比较熟悉的双重校验单例模式就是一个经典的指令重排的例子，`Singleton instance=new Singleton()；`对应的JVM指令分为三步：分配内存空间-->初始化对象--->对象指向分配的内存空间，但是经过了编译器的指令重排序，第二步和第三步就可能会重排序。\n\n\n\n![img](大厂面试之并发篇.assets/1676356921384-9342aedc-7423-49ac-83c5-ca6d940f5a28.png)\n\n\n\nJMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。\n\n\n\n## 20.指令重排有限制吗？happens-before了解吗？\n\n\n\n指令重排也是有一些限制的，有两个规则`happens-before`和`as-if-serial`来约束。\n\n\n\nhappens-before的定义：\n\n\n\n1、如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。\n\n\n\n2、两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照 happens-before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么这种重排序并不非法\n\n\n\nhappens-before和我们息息相关的有六大规则：\n\n\n\n![img](大厂面试之并发篇.assets/1676356923639-2ecb5074-b28f-4ec6-8cb6-84f9e46faf95.png)\n\n\n\n**程序顺序规则**：一个线程中的每个操作，happens-before于该线程中的任意后续操作。\n\n\n\n**监视器锁规则**：对一个锁的解锁，happens-before于随后对这个锁的加锁。\n\n\n\n**volatile变量规则**：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。\n\n\n\n**传递性**：如果A happens-before B，且B happens-before C，那么A happens-before C。\n\n\n\n**start()规则**：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的 ThreadB.start()操作happens-before于线程B中的任意操作。\n\n\n\n**join()规则**：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作 happens-before于线程A从ThreadB.join()操作成功返回。\n\n\n\n## 21.as-if-serial又是什么？单线程的程序一定是顺序的吗？\n\n\n\nas-if-serial语义的意思是：不管怎么重排序（编译器和处理器为了提高并行度），**单线程程序的执行结果不能被改变**。编译器、runtime和处理器都必须遵守as-if-serial语义。\n\n\n\n为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。为了具体说明，请看下面计算圆面积的代码示例。\n\n\n\n```java\ndouble pi = 3.14;   // A\ndouble r = 1.0;   // B \ndouble area = pi * r * r;   // C\n```\n\n\n\n上面3个操作的数据依赖关系：\n\n\n\n![img](大厂面试之并发篇.assets/1676356925824-5a769b53-b64a-449f-9cf6-90bb38c6fe5a.png)\n\n\n\nA和C之间存在数据依赖关系，同时B和C之间也存在数据依赖关系。因此在最终执行的指令序列中，C不能被重排序到A和B的前面（C排到A和B的前面，程序的结果将会被改变）。但A和B之间没有数据依赖关系，编译器和处理器可以重排序A和B之间的执行顺序。\n\n\n\n所以最终，程序可能会有两种执行顺序：\n\n\n\n![img](大厂面试之并发篇.assets/1676356927677-32f90af3-e0c4-4a7b-8ae9-004c2da9673b.png)\n\n\n\nas-if-serial语义把单线程程序保护了起来，遵守as-if-serial语义的编译器、runtime和处理器共同编织了这么一个“楚门的世界”：单线程程序是按程序的“顺序”来执行的。as- if-serial语义使单线程情况下，我们不需要担心重排序的问题，可见性的问题。\n\n\n\n## 22.volatile实现原理了解吗？\n\n\n\nvolatile有两个作用，保证**可见性**和**有序性**。\n\n\n\n**volatile怎么保证可见性的呢？**\n\n\n\n相比synchronized的加锁方式来解决共享变量的内存可见性问题，volatile就是更轻量的选择，它没有上下文切换的额外开销成本。\n\n\n\nvolatile可以确保对某个变量的更新对其他线程马上可见，一个变量被声明为volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存 当其它线程读取该共享变量 ，会从主内存重新获取最新值，而不是使用当前线程的本地内存中的值。\n\n\n\n例如，我们声明一个 volatile 变量 volatile int x = 0，线程A修改x=1，修改完之后就会把新的值刷新回主内存，线程B读取x的时候，就会清空本地内存变量，然后再从主内存获取最新值。\n\n\n\n![img](大厂面试之并发篇.assets/1676356929670-cdd2108b-1c4a-4ad7-adf1-14a19c766f37.png)\n\n\n\n**volatile怎么保证有序性的呢？**\n\n\n\n重排序可以分为编译器重排序和处理器重排序，valatile保证有序性，就是通过分别限制这两种类型的重排序。\n\n\n\n![img](大厂面试之并发篇.assets/1676356931393-714aec15-de45-4e38-ad9d-e62b7a44abba.png)\n\n\n\n为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。\n\n\n\n1、在每个volatile写操作的前面插入一个`StoreStore`屏障\n\n\n\n2、在每个volatile写操作的后面插入一个`StoreLoad`屏障\n\n\n\n3、在每个volatile读操作的后面插入一个`LoadLoad`屏障\n\n\n\n4、在每个volatile读操作的后面插入一个`LoadStore`屏障\n\n\n\n![img](大厂面试之并发篇.assets/1676356933901-4dd9c6d7-10b7-4e4d-bdca-52c86351666c.png)\n\n\n\n![img](大厂面试之并发篇.assets/1676356935999-2240fde5-b78d-450f-8f84-5827918e6278.png)\n\n\n\n## 23.synchronized用过吗？怎么使用？\n\n\n\nsynchronized经常用的，用来保证代码的原子性。\n\n\n\nsynchronized主要有三种用法：\n\n\n\n**修饰实例方法:** 作用于当前对象实例加锁，进入同步代码前要获得 **当前对象实例的锁**\n\n\n\n```java\nsynchronized void method() {\n  //业务代码\n}\n```\n\n\n\n**修饰静态方法**：也就是给当前类加锁，会作⽤于类的所有对象实例 ，进⼊同步代码前要获得当前 class 的锁。因为静态成员不属于任何⼀个实例对象，是类成员（ static 表明这是该类的⼀个静态资源，不管 new 了多少个对象，只有⼀份）。\n\n\n\n如果⼀个线程 A 调⽤⼀个实例对象的⾮静态 synchronized ⽅法，⽽线程 B 需要调⽤这个实例对象所属类的静态 synchronized ⽅法，是允许的，不会发⽣互斥现象，因为访问静态 synchronized ⽅法占⽤的锁是当前类的锁，⽽访问⾮静态 synchronized ⽅法占⽤的锁是当前实例对象锁。\n\n\n\n```java\nsynchronized void staic method() {\n //业务代码\n}\n```\n\n\n\n**修饰代码块** ：指定加锁对象，对给定对象/类加锁。synchronized(this|object) 表示进⼊同步代码库前要获得给定对象的锁。synchronized(类.class) 表示进⼊同步代码前要获得 当前 **class** 的锁\n\n\n\n```java\nsynchronized(this) {\n //业务代码\n}\n```\n\n\n\n## 24.synchronized的实现原理？\n\n**synchronized是怎么加锁的呢？**\n\n\n\n我们使用synchronized的时候，发现不用自己去lock和unlock，是因为JVM帮我们把这个事情做了。\n\n\n\nsynchronized修饰代码块时，JVM采用`monitorenter`、`monitorexit`两个指令来实现同步，`monitorenter` 指令指向同步代码块的开始位置， `monitorexit` 指令则指向同步代码块的结束位置。\n\n\n\n反编译一段synchronized修饰代码块代码，`javap -c -s -v -l SynchronizedDemo.class`，可以看到相应的字节码指令。\n\n\n\n![img](大厂面试之并发篇.assets/1676356939690-fa87311b-e040-4de1-a846-6ff48276881d.png)\n\n\n\nsynchronized修饰同步方法时，JVM采用`ACC_SYNCHRONIZED`标记符来实现同步，这个标识指明了该方法是一个同步方法。\n\n\n\n同样可以写段代码反编译看一下。\n\n\n\n![img](大厂面试之并发篇.assets/1676356945981-f3c7f0b0-2b7d-4fe3-9d9a-fc075c01418e.png)\n\n\n\n**synchronized锁住的是什么呢？**\n\n\n\nmonitorenter、monitorexit或者ACC_SYNCHRONIZED都是**基于Monitor实现**的。\n\n\n\n实例对象结构里有对象头，对象头里面有一块结构叫Mark Word，Mark Word指针指向了**monitor**。\n\n\n\n所谓的Monitor其实是一种**同步工具**，也可以说是一种**同步机制**。在Java虚拟机（HotSpot）中，Monitor是由**ObjectMonitor实现**的，可以叫做内部锁，或者Monitor锁。\n\n\n\n**ObjectMonitor的工作原理**：\n\n\n\n1、ObjectMonitor有两个队列：*WaitSet、*EntryList，用来保存ObjectWaiter 对象列表。\n\n\n\n2、*owner，获取 Monitor 对象的线程进入* owner 区时， *count + 1。如果线程调用了 wait() 方法，此时会释放 Monitor 对象，* owner 恢复为空， *count - 1。同时该等待线程进入* WaitSet 中，等待被唤醒。\n\n\n\n```java\nObjectMonitor() {\n    _header       = NULL;\n    _count        = 0; // 记录线程获取锁的次数\n    _waiters      = 0,\n    _recursions   = 0;  //锁的重入次数\n    _object       = NULL;\n    _owner        = NULL;  // 指向持有ObjectMonitor对象的线程\n    _WaitSet      = NULL;  // 处于wait状态的线程，会被加入到_WaitSet\n    _WaitSetLock  = 0 ;\n    _Responsible  = NULL ;\n    _succ         = NULL ;\n    _cxq          = NULL ;\n    FreeNext      = NULL ;\n    _EntryList    = NULL ;  // 处于等待锁block状态的线程，会被加入到该列表\n    _SpinFreq     = 0 ;\n    _SpinClock    = 0 ;\n    OwnerIsThread = 0 ;\n  }\n```\n\n\n\n可以类比一个去医院就诊的例子[18]：\n\n\n\n首先，患者在**门诊大厅**前台或自助挂号机**进行挂号**；\n\n\n\n随后，挂号结束后患者找到对应的**诊室就诊**：\n\n\n\n- 诊室每次只能有一个患者就诊；\n\n- 如果此时诊室空闲，直接进入就诊；\n\n- 如果此时诊室内有其它患者就诊，那么当前患者进入**候诊室**，等待叫号；\n\n\n\n就诊结束后，**走出就诊室**，候诊室的**下一位候诊患者**进入就诊室。\n\n\n\n![img](大厂面试之并发篇.assets/1676356949214-16233569-1a50-4380-a4c3-e74e1ea02384.png)\n\n\n\n这个过程就和Monitor机制比较相似：\n\n\n\n**门诊大厅**：所有待进入的线程都必须先在**入口Entry Set**挂号才有资格；\n\n\n\n**就诊室**：就诊室**_Owner**里里只能有一个线程就诊，就诊完线程就自行离开\n\n\n\n**候诊室**：就诊室繁忙时，进入**等待区（Wait Set）**，就诊室空闲的时候就从**等待区（Wait Set）**叫新的线程\n\n\n\n![img](大厂面试之并发篇.assets/1676356951068-4cf5160a-a7b7-495c-8321-3f18994bddb6.png)\n\n\n\n所以我们就知道了，同步是锁住的什么东西：\n\n\n\nmonitorenter，在判断拥有同步标识 ACC_SYNCHRONIZED 抢先进入此方法的线程会优先拥有 Monitor 的 owner ，此时计数器 +1。\n\n\n\nmonitorexit，当执行完退出后，计数器 -1，归 0 后被其他进入的线程获得。\n\n\n\n## 25.除了原子性，synchronized可见性，有序性，可重入性怎么实现？\n\n\n\n**synchronized怎么保证可见性？**\n\n\n\n线程加锁前，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值。\n\n\n\n线程加锁后，其它线程无法获取主内存中的共享变量。\n\n\n\n线程解锁前，必须把共享变量的最新值刷新到主内存中。\n\n\n\n**synchronized怎么保证有序性？**\n\n\n\nsynchronized同步的代码块，具有排他性，一次只能被一个线程拥有，所以synchronized保证同一时刻，代码是单线程执行的。\n\n\n\n因为as-if-serial语义的存在，单线程的程序能保证最终结果是有序的，但是不保证不会指令重排。\n\n\n\n所以synchronized保证的有序是执行结果的有序性，而不是防止指令重排的有序性。\n\n\n\n**synchronized怎么实现可重入的呢？**\n\n\n\nsynchronized 是可重入锁，也就是说，允许一个线程二次请求自己持有对象锁的临界资源，这种情况称为可重入锁。\n\n\n\nsynchronized 锁对象的时候有个计数器，他会记录下线程获取锁的次数，在执行完对应的代码块之后，计数器就会-1，直到计数器清零，就释放锁了。\n\n\n\n之所以，是可重入的。是因为 synchronized 锁对象有个计数器，会随着线程获取锁后 +1 计数，当线程执行完毕后 -1，直到清零释放锁。\n\n\n\n## 26.锁升级？synchronized优化了解吗？\n\n\n\n了解锁升级，得先知道，不同锁的状态是什么样的。这个状态指的是什么呢？\n\n\n\nJava对象头里，有一块结构，叫`Mark Word`标记字段，这块结构会随着锁的状态变化而变化。\n\n\n\n64 位虚拟机 Mark Word 是 64bit，我们来看看它的状态变化：\n\n\n\n![img](大厂面试之并发篇.assets/1676356953985-5effa473-5f58-4e6f-9341-9c7fd5378fab.png)\n\n\n\nMark Word存储对象自身的运行数据，如**哈希码、GC分代年龄、锁状态标志、偏向时间戳（Epoch）** 等。\n\n\n\n**synchronized做了哪些优化？**\n\n\n\n在JDK1.6之前，synchronized的实现直接调用ObjectMonitor的enter和exit，这种锁被称之为**重量级锁**。从JDK6开始，HotSpot虚拟机开发团队对Java中的锁进行优化，如增加了适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等优化策略，提升了synchronized的性能。\n\n\n\n**偏向锁**：在无竞争的情况下，只是在Mark Word里存储当前线程指针，CAS操作都不做。\n\n\n\n**轻量级锁**：在没有多线程竞争时，相对重量级锁，减少操作系统互斥量带来的性能消耗。但是，如果存在锁竞争，除了互斥量本身开销，还额外有CAS操作的开销。\n\n\n\n**自旋锁**：减少不必要的CPU上下文切换。在轻量级锁升级为重量级锁时，就使用了自旋加锁的方式\n\n\n\n**锁粗化**：将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。\n\n\n\n**锁消除**：虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。\n\n\n\n**锁升级的过程是什么样的？**\n\n\n\n锁升级方向：无锁-->偏向锁---> 轻量级锁---->重量级锁，这个方向基本上是不可逆的。\n\n\n\n![img](大厂面试之并发篇.assets/1676356956356-1c53e4ec-a41b-4c17-8bdd-156a2f965fe4.png)\n\n\n\n我们看一下升级的过程：\n\n\n\n### 偏向锁：\n\n\n\n**偏向锁的获取：**\n\n\n\n1、判断是否为可偏向状态--MarkWord中锁标志是否为‘01’，是否偏向锁是否为‘1’\n\n\n\n2、如果是可偏向状态，则查看线程ID是否为当前线程，如果是，则进入步骤'5'，否则进入步骤‘3’\n\n\n\n3、通过CAS操作竞争锁，如果竞争成功，则将MarkWord中线程ID设置为当前线程ID，然后执行‘5’；竞争失败，则执行‘4’\n\n\n\n4、CAS获取偏向锁失败表示有竞争。当达到safepoint时获得偏向锁的线程被挂起，**偏向锁升级为轻量级锁**，然后被阻塞在安全点的线程继续往下执行同步代码块\n\n\n\n5、执行同步代码\n\n\n\n**偏向锁的撤销：**\n\n\n\n1、偏向锁不会主动释放(撤销)，只有遇到其他线程竞争时才会执行撤销，由于撤销需要知道当前持有该偏向锁的线程栈状态，因此要等到safepoint时执行，此时持有该偏向锁的线程（T）有‘2’，‘3’两种情况；\n\n\n\n2、撤销----T线程已经退出同步代码块，或者已经不再存活，则直接撤销偏向锁，变成无锁状态----该状态达到阈值20则执行批量重偏向\n\n\n\n3、升级----T线程还在同步代码块中，则将T线程的偏向锁**升级为轻量级锁**，当前线程执行轻量级锁状态下的锁获取步骤----该状态达到阈值40则执行批量撤销\n\n\n\n### 轻量级锁：\n\n\n\n**轻量级锁的获取：**\n\n\n\n1、进行加锁操作时，jvm会判断是否已经时重量级锁，如果不是，则会在当前线程栈帧中划出一块空间，作为该锁的锁记录，并且将锁对象MarkWord复制到该锁记录中\n\n\n\n2、复制成功之后，jvm使用CAS操作将对象头MarkWord更新为指向锁记录的指针，并将锁记录里的owner指针指向对象头的MarkWord。如果成功，则执行‘3’，否则执行‘4’\n\n\n\n3、更新成功，则当前线程持有该对象锁，并且对象MarkWord锁标志设置为‘00’，即表示此对象处于轻量级锁状态\n\n\n\n4、更新失败，jvm先检查对象MarkWord是否指向当前线程栈帧中的锁记录，如果是则执行‘5’，否则执行‘4’\n\n\n\n5、表示锁重入；然后当前线程栈帧中增加一个锁记录第一部分（Displaced Mark Word）为null，并指向Mark Word的锁对象，起到一个重入计数器的作用。\n\n\n\n6、表示该锁对象已经被其他线程抢占，则进行**自旋等待**（默认10次），等待次数达到阈值仍未获取到锁，则**升级为重量级锁**\n\n\n\n大体上省简的升级过程：\n\n\n\n![img](大厂面试之并发篇.assets/1676356958711-96efcac1-7419-430e-804b-1748cfe76aa1.png)\n\n\n\n完整的升级过程：\n\n\n\n![img](大厂面试之并发篇.assets/1676356960440-1a4fd8cf-4c5e-446d-bded-f2601199e002.png)\n\n\n\n## 27.说说synchronized和ReentrantLock的区别？\n\n\n\n可以从锁的实现、功能特点、性能等几个维度去回答这个问题：\n\n\n\n**锁的实现：** synchronized是Java语言的关键字，基于JVM实现。而ReentrantLock是基于JDK的API层面实现的（一般是lock()和unlock()方法配合try/finally 语句块来完成。）\n\n\n\n**性能：** 在JDK1.6锁优化以前，synchronized的性能比ReenTrantLock差很多。但是JDK6开始，增加了适应性自旋、锁消除等，两者性能就差不多了。\n\n\n\n**功能特点：** ReentrantLock 比 synchronized 增加了一些高级功能，如等待可中断、可实现公平锁、可实现选择性通知。\n\n\n\n- ReentrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制\n\n- ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。\n\n- synchronized与wait()和notify()/notifyAll()方法结合实现等待/通知机制，ReentrantLock类借助Condition接口与newCondition()方法实现。\n\n- ReentrantLock需要手工声明来加锁和释放锁，一般跟finally配合释放锁。而synchronized不用手动释放锁。\n\n\n\n下面的表格列出出了两种锁之间的区别：\n\n\n\n![img](大厂面试之并发篇.assets/1676356963058-a24d0139-2c55-4196-bb8d-45057f6e8747.png)\n\n\n\n## 28.AQS了解多少？\n\n\n\nAbstractQueuedSynchronizer 抽象同步队列，简称 AQS ，它是Java并发包的根基，并发包中的锁就是基于AQS实现的。\n\n\n\nAQS是基于一个FIFO的双向队列，其内部定义了一个节点类Node，Node 节点内部的 SHARED 用来标记该线程是获取共享资源时被阻挂起后放入AQS 队列的， EXCLUSIVE 用来标记线程是 取独占资源时被挂起后放入AQS 队列\n\n\n\nAQS 使用一个 volatile 修饰的 int 类型的成员变量 state 来表示同步状态，修改同步状态成功即为获得锁，volatile 保证了变量在多线程之间的可见性，修改 State 值时通过 CAS 机制来保证修改的原子性\n\n\n\n获取state的方式分为两种，独占方式和共享方式，一个线程使用独占方式获取了资源，其它线程就会在获取失败后被阻塞。一个线程使用共享方式获取了资源，另外一个线程还可以通过CAS的方式进行获取。\n\n\n\n如果共享资源被占用，需要一定的阻塞等待唤醒机制来保证锁的分配，AQS 中会将竞争共享资源失败的线程添加到一个变体的 CLH 队列中。\n\n\n\n![img](大厂面试之并发篇.assets/1676356965598-80eea7cb-66ad-457a-a137-fef40f253bcf.png)\n\n\n\n先简单了解一下CLH：Craig、Landin and Hagersten 队列，是 **单向链表实现的队列**。申请线程只在本地变量上自旋，**它不断轮询前驱的状态**，如果发现 **前驱节点释放了锁就结束自旋**\n\n\n\n![img](大厂面试之并发篇.assets/1676356968275-4473424d-34c1-403e-b9e0-932f52f75041.png)\n\n\n\nAQS 中的队列是 CLH 变体的虚拟双向队列，通过将每条请求共享资源的线程封装成一个节点来实现锁的分配：\n\n\n\n![img](大厂面试之并发篇.assets/1676356970276-cedac516-6f35-44f6-b63c-2c84dda63cbd.png)\n\n\n\nAQS 中的 CLH 变体等待队列拥有以下特性：\n\n\n\nAQS 中队列是个双向链表，也是 FIFO 先进先出的特性\n\n\n\n通过 Head、Tail 头尾两个节点来组成队列结构，通过 volatile 修饰保证可见性\n\n\n\nHead 指向节点为已获得锁的节点，是一个虚拟节点，节点本身不持有具体线程\n\n\n\n获取不到同步状态，会将节点进行自旋获取锁，自旋一定次数失败后会将线程阻塞，相对于 CLH 队列性能较好\n\n\n\nps:AQS源码里面有很多细节可问，建议有时间好好看看AQS源码。\n\n\n\n## 29.**ReentrantLock**实现原理？\n\n\n\nReentrantLock 是可重入的独占锁，只能有一个线程可以获取该锁，其它获取该锁的线程会被阻塞而被放入该锁的阻塞队列里面。\n\n\n\n看看ReentrantLock的加锁操作：\n\n\n\n```java\n    // 创建非公平锁\n    ReentrantLock lock = new ReentrantLock();\n    // 获取锁操作\n    lock.lock();\n    try {\n        // 执行代码逻辑\n    } catch (Exception ex) {\n        // ...\n    } finally {\n        // 解锁操作\n        lock.unlock();\n    }\n```\n\n\n\n`new ReentrantLock()`构造函数默认创建的是非公平锁 NonfairSync。\n\n\n\n**公平锁 FairSync**\n\n\n\n1、公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁\n\n\n\n2、公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU 唤醒阻塞线程的开销比非公平锁大\n\n\n\n**非公平锁 NonfairSync**\n\n\n\n非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁\n\n\n\n非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU 不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁\n\n\n\n**默认创建的对象lock()的时候**：\n\n\n\n如果锁当前没有被其它线程占用，并且当前线程之前没有获取过该锁，则当前线程会获取到该锁，然后设置当前锁的拥有者为当前线程，并设置 AQS 的状态值为1 ，然后直接返回。如果当前线程之前己经获取过该锁，则这次只是简单地把 AQS 的状态值加1后返回。\n\n\n\n如果该锁己经被其他线程持有，非公平锁会尝试去获取锁，获取失败的话，则调用该方法线程会被放入 AQS 队列阻塞挂起。\n\n\n\n![img](大厂面试之并发篇.assets/1676356972988-ce91b9f4-c9dc-45ba-b37a-ada99f33e76b.png)\n\n\n\n## 30.ReentrantLock怎么实现公平锁的？\n\n\n\n`new ReentrantLock()`构造函数默认创建的是非公平锁 NonfairSync\n\n\n\n```java\npublic ReentrantLock() {\n    sync = new NonfairSync();\n}\n```\n\n\n\n同时也可以在创建锁构造函数中传入具体参数创建公平锁 FairSync\n\n\n\n```java\nReentrantLock lock = new ReentrantLock(true);\n--- ReentrantLock\n// true 代表公平锁，false 代表非公平锁\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\n\n\nFairSync、NonfairSync 代表公平锁和非公平锁，两者都是 ReentrantLock 静态内部类，只不过实现不同锁语义。\n\n\n\n**非公平锁和公平锁的两处不同：**\n\n\n\n1、非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。\n\n\n\n2、非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。\n\n\n\n![img](大厂面试之并发篇.assets/1676356975824-b919b787-0554-44ac-9c9d-93297ccdcebc.png)\n\n\n\n相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。\n\n\n\n## 31.CAS呢？CAS了解多少？\n\n\n\nCAS叫做CompareAndSwap，⽐较并交换，主要是通过处理器的指令来保证操作的原⼦性的。\n\n\n\nCAS 指令包含 3 个参数：共享变量的内存地址 A、预期的值 B 和共享变量的新值 C。\n\n\n\n只有当内存中地址 A 处的值等于 B 时，才能将内存中地址 A 处的值更新为新值 C。作为一条 CPU 指令，CAS 指令本身是能够保证原子性的 。\n\n\n\n## 32.CAS 有什么问题？如何解决？\n\n\n\nCAS的经典三大问题：\n\n\n\n![img](大厂面试之并发篇.assets/1676356978476-b3cdc825-8f8b-4ef5-929e-fff49fe4e4ca.png)\n\n\n\n### ABA 问题\n\n\n\n并发环境下，假设初始条件是A，去修改数据时，发现是A就会执行修改。但是看到的虽然是A，中间可能发生了A变B，B又变回A的情况。此时A已经非彼A，数据即使成功修改，也可能有问题。\n\n\n\n**怎么解决ABA问题？**\n\n\n\n**加版本号**\n\n\n\n每次修改变量，都在这个变量的版本号上加1，这样，刚刚A->B->A，虽然A的值没变，但是它的版本号已经变了，再判断版本号就会发现此时的A已经被改过了。参考乐观锁的版本号，这种做法可以给数据带上了一种实效性的检验。\n\n\n\nJava提供了AtomicStampReference类，它的compareAndSet方法首先检查当前的对象引用值是否等于预期引用，并且当前印戳（Stamp）标志是否等于预期标志，如果全部相等，则以原子方式将引用值和印戳标志的值更新为给定的更新值。\n\n\n\n### 循环性能开销\n\n\n\n自旋CAS，如果一直循环执行，一直不成功，会给CPU带来非常大的执行开销。\n\n\n\n**怎么解决循环性能开销问题？**\n\n\n\n在Java中，很多使用自旋CAS的地方，会有一个自旋次数的限制，超过一定次数，就停止自旋。\n\n\n\n### 只能保证一个变量的原子操作\n\n\n\nCAS 保证的是对一个变量执行操作的原子性，如果对多个变量操作时，CAS 目前无法直接保证操作的原子性的。\n\n\n\n**怎么解决只能保证一个变量的原子操作问题？**\n\n\n\n可以考虑改用锁来保证操作的原子性\n\n\n\n可以考虑合并多个变量，将多个变量封装成一个对象，通过AtomicReference来保证原子性。\n\n\n\n## 33.Java有哪些保证原子性的方法？如何保证多线程下i++ 结果正确？\n\n\n\n![img](大厂面试之并发篇.assets/1676356981199-70cb4fe5-6e28-4a5a-96a8-500db6f4e751.png)\n\n\n\n使用循环原子类，例如AtomicInteger，实现i++原子操作\n\n\n\n使用juc包下的锁，如ReentrantLock ，对i++操作加锁lock.lock()来实现原子性\n\n\n\n使用synchronized，对i++操作加锁\n\n\n\n## 34.原子操作类了解多少？\n\n\n\n当程序更新一个变量时，如果多线程同时更新这个变量，可能得到期望之外的值，比如变量i=1，A线程更新i+1，B线程也更新i+1，经过两个线程操作之后可能i不等于3，而是等于2。因为A和B线程在更新变量i的时候拿到的i都是1，这就是线程不安全的更新操作，一般我们会使用synchronized来解决这个问题，synchronized会保证多线程不会同时更新变量i。\n\n\n\n其实除此之外，还有更轻量级的选择，Java从JDK 1.5开始提供了java.util.concurrent.atomic包，这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。\n\n\n\n因为变量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性（字段）。\n\n\n\n![img](大厂面试之并发篇.assets/1676356984267-0fcd724a-3540-4b05-b90e-309aec0cd172.png)\n\n\n\nAtomic包里的类基本都是使用Unsafe实现的包装类。\n\n\n\n使用原子的方式更新基本类型，Atomic包提供了以下3个类：\n\n\n\n- AtomicBoolean：原子更新布尔类型。\n\n- AtomicInteger：原子更新整型。\n\n- AtomicLong：原子更新长整型。\n\n\n\n通过原子的方式更新数组里的某个元素，Atomic包提供了以下4个类：\n\n\n\n- AtomicIntegerArray：原子更新整型数组里的元素。\n\n- AtomicLongArray：原子更新长整型数组里的元素。\n\n- AtomicReferenceArray：原子更新引用类型数组里的元素。\n\n- AtomicIntegerArray类主要是提供原子的方式更新数组里的整型\n\n\n\n原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下3个类：\n\n\n\n- AtomicReference：原子更新引用类型。\n\n- AtomicReferenceFieldUpdater：原子更新引用类型里的字段。\n\n- AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference（V initialRef，boolean initialMark）。\n\n\n\n如果需原子地更新某个类里的某个字段时，就需要使用原子更新字段类，Atomic包提供了以下3个类进行原子字段更新：\n\n\n\n- AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。\n\n- AtomicLongFieldUpdater：原子更新长整型字段的更新器。\n\n- AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更新数据和数据的版本号，可以解决使用CAS进行原子更新时可能出现的 ABA问题。\n\n\n\n## 35.AtomicInteger 的原理？\n\n\n\n一句话概括：**使用CAS实现**。\n\n\n\n以AtomicInteger的添加方法为例：\n\n\n\n```java\n    public final int getAndIncrement() {\n        return unsafe.getAndAddInt(this, valueOffset, 1);\n    }\n```\n\n\n\n通过`Unsafe`类的实例来进行添加操作，来看看具体的CAS操作：\n\n\n\n```java\n    public final int getAndAddInt(Object var1, long var2, int var4) {\n        int var5;\n        do {\n            var5 = this.getIntVolatile(var1, var2);\n        } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n        return var5;\n    }\n```\n\n\n\ncompareAndSwapInt 是一个native方法，基于CAS来操作int类型变量。其它的原子操作类基本都是大同小异。\n\n\n\n## 36.线程死锁了解吗？该如何避免？\n\n\n\n死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的互相等待的现象，在无外力作用的情况下，这些线程会一直相互等待而无法继续运行下去。\n\n\n\n![img](大厂面试之并发篇.assets/1676356989114-a883c724-4790-4aad-8d75-2da69b6a28f7.png)\n\n\n\n那么为什么会产生死锁呢？死锁的产生必须具备以下四个条件：\n\n\n\n![img](大厂面试之并发篇.assets/1676356990714-99b1b249-4fa1-4295-8ef3-a3d7714039c9.png)\n\n\n\n互斥条件：指线程对己经获取到的资源进行它性使用，即该资源同时只由一个线程占用。如果此时还有其它线程请求获取获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。\n\n\n\n请求并持有条件：指一个 线程己经持有了至少一个资源，但又提出了新的资源请求，而新资源己被其它线程占有，所以当前线程会被阻塞，但阻塞 的同时并不释放自己已经获取的资源。\n\n\n\n不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其它线程抢占，只有在自己使用完毕后才由自己释放该资源。\n\n\n\n环路等待条件：指在发生死锁时，必然存在一个线程——资源的环形链，即线程集合 {T0，T1，T2,…… ，Tn} 中 T0 正在等待一 T1 占用的资源，Tl1正在等待 T2用的资源，…… Tn 在等待己被 T0占用的资源。\n\n\n\n该如何避免死锁呢？答案是**至少破坏死锁发生的一个条件**。\n\n\n\n其中，互斥这个条件我们没有办法破坏，因为用锁为的就是互斥。不过其他三个条件都是有办法破坏掉的，到底如何做呢？\n\n\n\n对于“请求并持有”这个条件，可以一次性请求所有的资源。\n\n\n\n对于“不可剥夺”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。\n\n\n\n对于“环路等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后就不存在环路了。\n\n\n\n一个死锁的示例\n\n```java\n\npublic class MainTest {\n\n    public static void main(String[] args) {\n\n        Object lock1 = new Object();\n        Object lock2 = new Object();\n\n\n        Thread t1 = new Thread(()->{\n           synchronized (lock1){\n               System.out.println(\"Thread 1 get lock1。。\");\n               try {\n                   Thread.sleep(1000);\n               }catch (InterruptedException e){\n                   e.printStackTrace();\n               }\n               synchronized (lock2){\n                   System.out.println(\"Thread 1 get lock2..\");\n               }\n           }\n        },\"zs-thread-1\");\n\n\n        Thread t2 = new Thread(()->{\n           synchronized (lock2){\n               System.out.println(\"Thread 2 get lock2..\");\n\n               try {\n                   Thread.sleep(1000);\n               } catch (InterruptedException e) {\n                   e.printStackTrace();\n               }\n\n               synchronized (lock1){\n                   System.out.println(\"Thread 1 get lock1。。\");\n               }\n           }\n        },\"zs-thread-2\");\n\n        t1.start();\n        t2.start();\n\n    }\n}\n```\n\n\n\n\n\n\n\n## 37.那死锁问题怎么排查呢？\n\n\n\n可以使用jdk自带的命令行工具排查：\n\n\n\n1、使用jps查找运行的Java进程：jps -l\n\n\n\n2、使用jstack查看线程堆栈信息：jstack -l  进程id\n\n\n\n基本就可以看到死锁的信息。\n\n\n\n还可以利用图形化工具，比如JConsole。出现线程死锁以后，点击JConsole线程面板的`检测到死锁`按钮，将会看到线程的死锁信息。\n\n\n\n![img](大厂面试之并发篇.assets/1676356993682-007e0ee1-5c24-4dcd-b33c-014608d5be9c.png)\n\n\n\n还可以使用arthas的thread命令\n\n- thread -b ：找出当前阻塞其他线程的线程\n- thread :  查看当前线程信息，查看线程的堆栈\n\n```shell\n[arthas@59478]$ thread -b\n\"zs-thread-2\" Id=12 BLOCKED on java.lang.Object@3383bc0c owned by \"zs-thread-1\" Id=11\n    at com.zs.j3y4.thread.lock.MainTest.lambda$main$1(MainTest.java:39)\n    -  blocked on java.lang.Object@3383bc0c\n    -  locked java.lang.Object@7aa68c87 <---- but blocks 1 other threads!\n    at com.zs.j3y4.thread.lock.MainTest$$Lambda$2/1587487668.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:748)\n\n[arthas@59478]$ thread\nThreads Total: 34, NEW: 0, RUNNABLE: 9, BLOCKED: 2, WAITING: 4, TIMED_WAITING: 3, TERMINATED: 0, Internal threads: 16                  \nID    NAME                             GROUP            PRIORITY    STATE      %CPU       DELTA_TIME TIME        INTERRUPTE DAEMON     \n27    arthas-command-execute           system           5           RUNNABLE   1.3        0.002      0:0.018     false      true       \n-1    VM Periodic Task Thread          -                -1          -          0.06       0.000      0:0.009     false      true       \n2     Reference Handler                system           10          WAITING    0.0        0.000      0:0.000     false      true       \n3     Finalizer                        system           8           WAITING    0.0        0.000      0:0.000     false      true       \n4     Signal Dispatcher                system           9           RUNNABLE   0.0        0.000      0:0.000     false      true       \n14    Attach Listener                  system           9           RUNNABLE   0.0        0.000      0:0.020     false      true       \n16    arthas-timer                     system           9           WAITING    0.0        0.000      0:0.000     false      true       \n18    Keep-Alive-Timer                 system           8           TIMED_WAIT 0.0        0.000      0:0.000     false      true       \n19    arthas-NettyHttpTelnetBootstrap- system           5           RUNNABLE   0.0        0.000      0:0.015     false      true       \n20    arthas-NettyWebsocketTtyBootstra system           5           RUNNABLE   0.0        0.000      0:0.000     false      true       \n21    arthas-NettyWebsocketTtyBootstra system           5           RUNNABLE   0.0        0.000      0:0.000     false      true       \n22    arthas-shell-server              system           9           TIMED_WAIT 0.0        0.000      0:0.000     false      true       \n23    arthas-session-manager           system           9           TIMED_WAIT 0.0        0.000      0:0.000     false      true       \n24    arthas-UserStat                  system           9           WAITING    0.0        0.000      0:0.000     false      true       \n26    arthas-NettyHttpTelnetBootstrap- system           5           RUNNABLE   0.0        0.000      0:0.072     false      true       \n5     Monitor Ctrl-Break               main             5           RUNNABLE   0.0        0.000      0:0.008     false      true       \n11    zs-thread-1                      main             5           BLOCKED    0.0        0.000      0:0.001     false      false      \n12    zs-thread-2                      main             5           BLOCKED    0.0        0.000      0:0.001     false      false      \n13    DestroyJavaVM                    main             5           RUNNABLE   0.0        0.000      0:0.073     false      false      \n\n```\n\n\n\n通过arthas可以看到，所以一般给线程起一个通俗易懂的名字比较更方便的排查问题；\n\n\n\n\n\n## 38.CountDownLatch（倒计数器）了解吗？\n\n\n\nCountDownLatch，倒计数器，有两个常见的应用场景[18]：\n\n\n\n**场景1：协调子线程结束动作：等待所有子线程运行结束**\n\n\n\nCountDownLatch允许一个或多个线程等待其他线程完成操作。\n\n\n\n例如，我们很多人喜欢玩的王者荣耀，开黑的时候，得等所有人都上线之后，才能开打。\n\n\n\n![img](大厂面试之并发篇.assets/1676356996209-5fc93bab-8450-4518-9242-18a1099f7b0a.png)\n\n\n\n创建大乔、兰陵王、安其拉、哪吒和铠等五个玩家，主线程必须在他们都完成确认后，才可以继续运行。\n\n\n\n在这段代码中，`new CountDownLatch(5)`用户创建初始的latch数量，各玩家通过`countDownLatch.countDown()`完成状态确认，主线程通过`countDownLatch.await()`等待。\n\n\n\n```java\n    public static void main(String[] args) throws InterruptedException {\n        CountDownLatch countDownLatch = new CountDownLatch(5);\n\n        Thread 大乔 = new Thread(countDownLatch::countDown);\n        Thread 兰陵王 = new Thread(countDownLatch::countDown);\n        Thread 安其拉 = new Thread(countDownLatch::countDown);\n        Thread 哪吒 = new Thread(countDownLatch::countDown);\n        Thread 铠 = new Thread(() -> {\n            try {\n                // 稍等，上个卫生间，马上到...\n                Thread.sleep(1500);\n                countDownLatch.countDown();\n            } catch (InterruptedException ignored) {}\n        });\n\n        大乔.start();\n        兰陵王.start();\n        安其拉.start();\n        哪吒.start();\n        铠.start();\n        countDownLatch.await();\n        System.out.println(\"所有玩家已经就位！\");\n    }\n```\n\n\n\n**场景2. 协调子线程开始动作：统一各线程动作开始的时机**\n\n\n\n王者游戏中也有类似的场景，游戏开始时，各玩家的初始状态必须一致。不能有的玩家都出完装了，有的才降生。\n\n\n\n所以大家得一块出生，在\n\n\n\n![img](大厂面试之并发篇.assets/1676356998618-e5ae59f9-8e33-44a3-89aa-f034c90f8456.png)\n\n\n\n在这个场景中，仍然用五个线程代表大乔、兰陵王、安其拉、哪吒和铠等五个玩家。需要注意的是，各玩家虽然都调用了`start()`线程，但是它们在运行时都在等待`countDownLatch`的信号，在信号未收到前，它们不会往下执行。\n\n\n\n```java\n    public static void main(String[] args) throws InterruptedException {\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n\n        Thread 大乔 = new Thread(() -> waitToFight(countDownLatch));\n        Thread 兰陵王 = new Thread(() -> waitToFight(countDownLatch));\n        Thread 安其拉 = new Thread(() -> waitToFight(countDownLatch));\n        Thread 哪吒 = new Thread(() -> waitToFight(countDownLatch));\n        Thread 铠 = new Thread(() -> waitToFight(countDownLatch));\n\n        大乔.start();\n        兰陵王.start();\n        安其拉.start();\n        哪吒.start();\n        铠.start();\n        Thread.sleep(1000);\n        countDownLatch.countDown();\n        System.out.println(\"敌方还有5秒达到战场，全军出击！\");\n    }\n\n    private static void waitToFight(CountDownLatch countDownLatch) {\n        try {\n            countDownLatch.await(); // 在此等待信号再继续\n            System.out.println(\"收到，发起进攻！\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n\n\nCountDownLatch的**核心方法**也不多：\n\n\n\n- `await()`：等待latch降为0；\n\n- `boolean await(long timeout, TimeUnit unit)`：等待latch降为0，但是可以设置超时时间。比如有玩家超时未确认，那就重新匹配，总不能为了某个玩家等到天荒地老。\n\n- `countDown()`：latch数量减1；\n\n- `getCount()`：获取当前的latch数量。\n\n\n\n## 39.CyclicBarrier（同步屏障）了解吗？\n\n\n\nCyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一 组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。\n\n\n\n它和CountDownLatch类似，都可以协调多线程的结束动作，在它们结束后都可以执行特定动作，但是为什么要有CyclicBarrier，自然是它有和CountDownLatch不同的地方。\n\n\n\n不知道你听没听过一个新人UP主小约翰可汗，小约翰生平有两大恨——“想结衣结衣不依,迷爱理爱理不理。”我们来还原一下事情的经过：小约翰在亲政后认识了新垣结衣，于是决定第一次选妃，向结衣表白，等待回应。然而新垣结衣回应嫁给了星野源，小约翰伤心欲绝，发誓生平不娶，突然发现了铃木爱理，于是小约翰决定第二次选妃，求爱理搭理，等待回应。\n\n\n\n![img](大厂面试之并发篇.assets/1676357003401-f4c11a42-1cc6-417f-b647-03e301ecb49d.png)\n\n\n\n我们拿代码模拟这一场景，发现CountDownLatch无能为力了，因为CountDownLatch的使用是一次性的，无法重复利用，而这里等待了两次。此时，我们用CyclicBarrier就可以实现，因为它可以重复利用。\n\n\n\n![img](大厂面试之并发篇.assets/1676357005814-eb034af5-45de-4bc6-9936-3b9ddca4e78b.png)\n\n\n\n运行结果：\n\n\n\n![img](大厂面试之并发篇.assets/1676357008211-8f6b0701-c429-4303-a55e-40530d88ee30.png)\n\n\n\nCyclicBarrier最最核心的方法，仍然是await()：如果当前线程不是第一个到达屏障的话，它将会进入等待，直到其他线程都到达，除非发生**被中断**、**屏障被拆除**、**屏障被重设**等情况；\n\n\n\n上面的例子抽象一下，本质上它的流程就是这样就是这样：\n\n\n\n![img](大厂面试之并发篇.assets/1676357010270-61d561a1-1c43-4d37-9081-3e2d27f934e7.png)\n\n\n\n## 40.CyclicBarrier和CountDownLatch有什么区别？\n\n\n\n两者最核心的区别[18]：\n\n\n\n1、CountDownLatch是一次性的，而CyclicBarrier则可以多次设置屏障，实现重复利用；\n\n\n\n2、CountDownLatch中的各个子线程不可以等待其他线程，只能完成自己的任务；而CyclicBarrier中的各个线程可以等待其他线程\n\n\n\n它们区别用一个表格整理：\n\n\n\n\n\n\n\n## 41.Semaphore（信号量）了解吗？\n\n\n\nSemaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。\n\n\n\n听起来似乎很抽象，现在汽车多了，开车出门在外的一个老大难问题就是停车 。停车场的车位是有限的，只能允许若干车辆停泊，如果停车场还有空位，那么显示牌显示的就是绿灯和剩余的车位，车辆就可以驶入；如果停车场没位了，那么显示牌显示的就是绿灯和数字0，车辆就得等待。如果满了的停车场有车离开，那么显示牌就又变绿，显示空车位数量，等待的车辆就能进停车场。\n\n\n\n![img](大厂面试之并发篇.assets/1676357012724-49ef5122-836e-408b-b4aa-7c6228a7a33d.jpeg)\n\n\n\n我们把这个例子类比一下，车辆就是线程，进入停车场就是线程在执行，离开停车场就是线程执行完毕，看见红灯就表示线程被阻塞，不能执行，Semaphore的本质就是**协调多个线程对共享资源的获取**。\n\n\n\n![img](大厂面试之并发篇.assets/1676357016715-c3840ec2-a6f9-46a5-b0ef-c0dacd836aeb.png)\n\n\n\n我们再来看一个Semaphore的用途：它可以用于做流量控制，特别是公用资源有限的应用场景，比如数据库连接。\n\n\n\n假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发地读取，但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有10个，这时我们必须控制只有10个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。这个时候，就可以使用Semaphore来做流量控制，如下：\n\n\n\n```java\npublic class SemaphoreTest {\n    private static final int THREAD_COUNT = 30;\n    private static ExecutorService threadPool = Executors.newFixedThreadPool(THREAD_COUNT);\n    private static Semaphore s = new Semaphore(10);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < THREAD_COUNT; i++) {\n            threadPool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        s.acquire();\n                        System.out.println(\"save data\");\n                        s.release();\n                    } catch (InterruptedException e) {\n                    }\n                }\n            });\n        }\n        threadPool.shutdown();\n    }\n}\n```\n\n\n\n在代码中，虽然有30个线程在执行，但是只允许10个并发执行。Semaphore的构造方法`Semaphore（int permits`）接受一个整型的数字，表示可用的许可证数量。`Semaphore（10）`表示允许10个线程获取许可证，也就是最大并发数是10。Semaphore的用法也很简单，首先线程使用 Semaphore的acquire()方法获取一个许可证，使用完之后调用release()方法归还许可证。还可以用tryAcquire()方法尝试获取许可证。\n\n\n\n## 42.Exchanger 了解吗？\n\n\n\nExchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。\n\n\n\n![img](大厂面试之并发篇.assets/1676357020944-d1c87b25-f3bf-4cfc-afad-855898cb3b4b.png)\n\n\n\n这两个线程通过 exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。\n\n\n\nExchanger可以用于遗传算法，遗传算法里需要选出两个人作为交配对象，这时候会交换两人的数据，并使用交叉规则得出2个交配结果。Exchanger也可以用于校对工作，比如我们需要将纸制银行流水通过人工的方式录入成电子银行流水，为了避免错误，采用AB岗两人进行录入，录入到Excel之后，系统需要加载这两个Excel，并对两个Excel数据进行校对，看看是否录入一致。\n\n\n\n```java\npublic class ExchangerTest {\n    private static final Exchanger<String> exgr = new Exchanger<String>();\n    private static ExecutorService threadPool = Executors.newFixedThreadPool(2);\n\n    public static void main(String[] args) {\n        threadPool.execute(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    String A = \"银行流水A\"; // A录入银行流水数据 \n                    exgr.exchange(A);\n                } catch (InterruptedException e) {\n                }\n            }\n        });\n        threadPool.execute(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    String B = \"银行流水B\"; // B录入银行流水数据 \n                    String A = exgr.exchange(\"B\");\n                    System.out.println(\"A和B数据是否一致：\" + A.equals(B) + \"，A录入的是：\"\n                            + A + \"，B录入是：\" + B);\n                } catch (InterruptedException e) {\n                }\n            }\n        });\n        threadPool.shutdown();\n    }\n}\n```\n\n\n\n假如两个线程有一个没有执行exchange()方法，则会一直等待，如果担心有特殊情况发生，避免一直等待，可以使用`exchange(V x, long timeOut, TimeUnit unit)`设置最大等待时长。\n\n\n\n## 43.什么是线程池？\n\n\n\n**线程池：** 简单理解，它就是一个管理线程的池子。\n\n\n\n![img](大厂面试之并发篇.assets/1676357024531-df689dc0-3e16-4486-a13e-01c40c476592.png)\n\n\n\n**它帮我们管理线程，避免增加创建线程和销毁线程的资源损耗**。因为线程其实也是一个对象，创建一个对象，需要经过类加载过程，销毁一个对象，需要走GC垃圾回收流程，都是需要资源开销的。\n\n\n\n**提高响应速度。** 如果任务到达了，相对于从线程池拿线程，重新去创建一条线程执行，速度肯定慢很多。\n\n\n\n**重复利用。** 线程用完，再放回池子，可以达到重复利用的效果，节省资源。\n\n\n\n## 44.能说说工作中线程池的应用吗？\n\n\n\n之前我们有一个和第三方对接的需求，需要向第三方推送数据，引入了多线程来提升数据推送的效率，其中用到了线程池来管理线程。\n\n\n\n![img](大厂面试之并发篇.assets/1676357026337-0ab9d452-4cae-44e0-9231-cc2e42b469c7.png)\n\n\n\n主要代码如下：\n\n\n\n![img](大厂面试之并发篇.assets/1676357028159-1d06f0f5-e0f8-4c21-b4ae-f51f497ff59b.png)\n\n\n\n线程池的参数如下：\n\n\n\n- corePoolSize：线程核心参数选择了CPU数×2\n\n- maximumPoolSize：最大线程数选择了和核心线程数相同\n\n- keepAliveTime：非核心闲置线程存活时间直接置为0\n\n- unit：非核心线程保持存活的时间选择了 TimeUnit.SECONDS 秒\n\n- workQueue：线程池等待队列，使用 LinkedBlockingQueue阻塞队列\n\n\n\n同时还用了synchronized 来加锁，保证数据不会被重复推送：\n\n\n\n```java\n  synchronized (PushProcessServiceImpl.class) {}\n```\n\n\n\nps:这个例子只是简单地进行了数据推送，实际上还可以结合其他的业务，像什么数据清洗啊、数据统计啊，都可以套用。\n\n\n\n## 45.能简单说一下线程池的工作流程吗？\n\n\n\n用一个通俗的比喻：\n\n\n\n有一个营业厅，总共有六个窗口，现在开放了三个窗口，现在有三个窗口坐着三个营业员小姐姐在营业。\n\n\n\n陈哥去办业务，可能会遇到什么情况呢？\n\n\n\n1、陈哥发现有空间的在营业的窗口，直接去找小姐姐办理业务。\n\n\n\n![img](大厂面试之并发篇.assets/1676357032756-5aeb2ecf-7bbe-4458-b2c4-f422b47dbb35.png)\n\n\n\n2、陈哥发现没有空闲的窗口，就在排队区排队等。\n\n\n\n![img](大厂面试之并发篇.assets/1676357035674-5841bde6-7c75-43cf-af52-357d9eb6e980.png)\n\n\n\n3、陈哥发现没有空闲的窗口，等待区也满了，蚌埠住了，经理一看，就让休息的小姐姐赶紧回来上班，等待区号靠前的赶紧去新窗口办，陈哥去排队区排队。小姐姐比较辛苦，假如一段时间发现他们可以不用接着营业，经理就让她们接着休息。\n\n\n\n![img](大厂面试之并发篇.assets/1676357038054-7faa5b7c-076f-4a6a-9de5-f3f84bdd1c30.png)\n\n\n\n4、陈哥一看，六个窗口都满了，等待区也没位置了。陈哥急了，要闹，经理赶紧出来了，经理该怎么办呢？\n\n\n\n![img](大厂面试之并发篇.assets/1676357039802-da447f21-f6b5-438f-9fef-cea5c9762720.png)\n\n\n\n1、我们银行系统已经瘫痪\n\n\n\n2、谁叫你来办的你找谁去\n\n\n\n3、看你比较急，去队里加个塞\n\n\n\n4、今天没办法，不行你看改一天\n\n\n\n**上面的这个流程几乎就跟 JDK 线程池的大致流程类似**，\n\n\n\n1、营业中的 3个窗口对应核心线程池数：corePoolSize\n\n\n\n2、总的营业窗口数6对应：maximumPoolSize\n\n\n\n3、打开的临时窗口在多少时间内无人办理则关闭对应：unit\n\n\n\n4、排队区就是等待队列：workQueue\n\n\n\n5、无法办理的时候银行给出的解决方法对应：RejectedExecutionHandler\n\n\n\n6、threadFactory 该参数在 JDK 中是 线程工厂，用来创建线程对象，一般不会动。\n\n\n\n所以我们线程池的工作流程也比较好理解了：\n\n\n\n1、线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。\n\n\n\n2、当调用 execute() 方法添加一个任务时，线程池会做如下判断：\n\n\n\n- 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；\n\n- 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；\n\n- 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；\n\n- 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会根据拒绝策略来对应处理。\n\n\n\n![img](大厂面试之并发篇.assets/1676357042500-21f5eed7-909b-4f9c-ac50-00b6c716e35f.png)\n\n\n\n1、当一个线程完成任务时，它会从队列中取下一个任务来执行。\n\n\n\n2、当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。\n\n\n\n## 46.线程池主要参数有哪些？\n\n\n\n![img](大厂面试之并发篇.assets/1676357044420-fb9c86c8-627b-4d6d-ac09-737eb69c64e3.png)\n\n\n\n线程池有七大参数，需要重点关注`corePoolSize`、`maximumPoolSize`、`workQueue`、`handler`这四个。\n\n\n\n**1、corePoolSize**\n\n\n\n此值是用来初始化线程池中核心线程数，当线程池中线程池数< `corePoolSize`时，系统默认是添加一个任务才创建一个线程池。当线程数 = corePoolSize时，新任务会追加到workQueue中。\n\n\n\n**2、maximumPoolSize**\n\n\n\n`maximumPoolSize`表示允许的最大线程数 = (非核心线程数+核心线程数)，当`BlockingQueue`也满了，但线程池中总线程数 < `maximumPoolSize`时候就会再次创建新的线程。\n\n\n\n**3、keepAliveTime**\n\n\n\n非核心线程 =(maximumPoolSize - corePoolSize ) ,非核心线程闲置下来不干活最多存活时间。\n\n\n\n**4、unit**\n\n\n\n线程池中非核心线程保持存活的时间的单位\n\n\n\n- TimeUnit.DAYS; 天\n\n- TimeUnit.HOURS; 小时\n\n- TimeUnit.MINUTES; 分钟\n\n- TimeUnit.SECONDS; 秒\n\n- TimeUnit.MILLISECONDS;  毫秒\n\n- TimeUnit.MICROSECONDS;  微秒\n\n- TimeUnit.NANOSECONDS;  纳秒\n\n\n\n**5、workQueue**\n\n\n\n线程池等待队列，维护着等待执行的`Runnable`对象。当运行当线程数= corePoolSize时，新的任务会被添加到`workQueue`中，如果`workQueue`也满了则尝试用非核心线程执行任务，等待队列应该尽量用有界的。\n\n\n\n**6、threadFactory**\n\n\n\n创建一个新线程时使用的工厂，可以用来设定线程名、是否为daemon线程等等。\n\n\n\n**7、handler**\n\n\n\n`corePoolSize`、`workQueue`、`maximumPoolSize`都不可用的时候执行的饱和策略。\n\n\n\n## 47.线程池的拒绝策略有哪些？\n\n\n\n类比前面的例子，无法办理业务时的处理方式，帮助记忆：\n\n\n\n![img](大厂面试之并发篇.assets/1676357047322-958d414b-46e2-4b9d-9027-1f5a6b4229db.png)\n\n\n\n1、AbortPolicy ：直接抛出异常，默认使用此策略\n\n\n\n2、CallerRunsPolicy：用调用者所在的线程来执行任务\n\n\n\n3、DiscardOldestPolicy：丢弃阻塞队列里最老的任务，也就是队列里靠前的任务\n\n\n\n4、DiscardPolicy ：当前任务直接丢弃\n\n\n\n想实现自己的拒绝策略，实现RejectedExecutionHandler接口即可。\n\n\n\n## 48.线程池有哪几种工作队列？\n\n\n\n常用的阻塞队列主要有以下几种：\n\n\n\n![img](大厂面试之并发篇.assets/1676357049435-b107fe5c-36b8-45cb-8125-1031b8cd007b.png)\n\n\n\nArrayBlockingQueue：ArrayBlockingQueue（有界队列）是一个用数组实现的有界阻塞队列，按FIFO排序量。\n\n\n\nLinkedBlockingQueue：LinkedBlockingQueue（可设置容量队列）是基于链表结构的阻塞队列，按FIFO排序任务，容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE，吞吐量通常要高于ArrayBlockingQuene；newFixedThreadPool线程池使用了这个队列\n\n\n\nDelayQueue：DelayQueue（延迟队列）是一个任务定时周期的延迟执行的队列。根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。newScheduledThreadPool线程池使用了这个队列。\n\n\n\nPriorityBlockingQueue：PriorityBlockingQueue（优先级队列）是具有优先级的无界阻塞队列\n\n\n\nSynchronousQueue：SynchronousQueue（同步队列）是一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene，newCachedThreadPool线程池使用了这个队列。\n\n\n\n## 49.线程池提交execute和submit有什么区别？\n\n\n\nexecute 用于提交不需要返回值的任务\n\n\n\n```java\nthreadsPool.execute(new Runnable() { \n    @Override public void run() { \n        // TODO Auto-generated method stub } \n    });\n```\n\n\n\nsubmit()方法用于提交需要返回值的任务。线程池会返回一个future类型的对象，通过这个 future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值\n\n\n\n```java\nFuture<Object> future = executor.submit(harReturnValuetask); \ntry { Object s = future.get(); } catch (InterruptedException e) { \n    // 处理中断异常 \n} catch (ExecutionException e) { \n    // 处理无法执行任务异常 \n} finally { \n    // 关闭线程池 executor.shutdown();\n}\n```\n\n\n\n## 50.线程池怎么关闭知道吗？\n\n\n\n可以通过调用线程池的`shutdown`或`shutdownNow`方法来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。\n\n\n\n**shutdown() 将线程池状态置为shutdown,并不会立即停止**：\n\n\n\n1、停止接收外部submit的任务\n\n\n\n2、内部正在跑的任务和队列里等待的任务，会执行完\n\n\n\n3、等到第二步完成后，才真正停止\n\n\n\n**shutdownNow() 将线程池状态置为stop。一般会立即停止，事实上不一定**：\n\n\n\n1、和shutdown()一样，先停止接收外部提交的任务\n\n\n\n2、忽略队列里等待的任务\n\n\n\n3、尝试将正在跑的任务interrupt中断\n\n\n\n4、返回未执行的任务列表\n\n\n\nshutdown 和shutdownnow简单来说区别如下：\n\n\n\n- shutdownNow()能立即停止线程池，正在跑的和正在等待的任务都停下了。这样做立即生效，但是风险也比较大。\n\n- shutdown()只是关闭了提交通道，用submit()是无效的；而内部的任务该怎么跑还是怎么跑，跑完再彻底停止线程池。\n\n\n\n## 51.线程池的线程数应该怎么配置？\n\n\n\n线程在Java中属于稀缺资源，线程池不是越大越好也不是越小越好。任务分为计算密集型、IO密集型、混合型。\n\n\n\n计算密集型：大部分都在用CPU跟内存，加密，逻辑操作业务处理等。\n\n\n\nIO密集型：数据库链接，网络通讯传输等。\n\n\n\n![img](大厂面试之并发篇.assets/1676357053581-bbed43b9-be4f-4744-8d65-0b1e92b4b678.png)\n\n\n\n一般的经验，不同类型线程池的参数配置：\n\n\n\n计算密集型一般推荐线程池不要过大，一般是CPU数 + 1，+1是因为可能存在**页缺失**(就是可能存在有些数据在硬盘中需要多来一个线程将数据读入内存)。如果线程池数太大，可能会频繁的 进行线程上下文切换跟任务调度。获得当前CPU核心数代码如下：\n\n\n\n```plain\nRuntime.getRuntime().availableProcessors();\n```\n\n\n\nIO密集型：线程数适当大一点，机器的Cpu核心数*2。\n\n\n\n混合型：可以考虑根绝情况将它拆分成CPU密集型和IO密集型任务，如果执行时间相差不大，拆分可以提升吞吐量，反之没有必要。\n\n\n\n当然，实际应用中没有固定的公式，需要结合测试和监控来进行调整。\n\n\n\n## 52.有哪几种常见的线程池？\n\n\n\n面试常问，主要有四种，都是通过工具类Excutors创建出来的，需要注意，阿里巴巴《Java开发手册》里禁止使用这种方式来创建线程池。\n\n\n\n![img](大厂面试之并发篇.assets/1676357056125-1420465f-374c-4f3d-9afb-377be68cb97b.png)\n\n\n\nnewFixedThreadPool  (固定数目线程的线程池)\n\n\n\nnewCachedThreadPool (可缓存线程的线程池)\n\n\n\nnewSingleThreadExecutor (单线程的线程池)\n\n\n\nnewScheduledThreadPool (定时及周期执行的线程池)\n\n\n\n## 53.能说一下四种常见线程池的原理吗？\n\n\n\n前三种线程池的构造直接调用ThreadPoolExecutor的构造方法。\n\n\n\n### newSingleThreadExecutor\n\n\n\n```java\n  public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>(),\n                                    threadFactory));\n    }\n```\n\n\n\n**线程池特点**\n\n\n\n- 核心线程数为1\n\n- 最大线程数也为1\n\n- 阻塞队列是无界队列LinkedBlockingQueue，可能会导致OOM\n\n- keepAliveTime为0\n\n\n\n![img](大厂面试之并发篇.assets/1676357058924-6339b9bd-f1ca-441f-b81b-7b0dc18d416e.png)\n\n\n\n工作流程：\n\n\n\n- 提交任务\n\n- 线程池是否有一条线程在，如果没有，新建线程执行任务\n\n- 如果有，将任务加到阻塞队列\n\n- 当前的唯一线程，从队列取任务，执行完一个，再继续取，一个线程执行任务。\n\n\n\n**适用场景**\n\n\n\n适用于串行执行任务的场景，一个任务一个任务地执行。\n\n\n\n### newFixedThreadPool\n\n\n\n```java\n  public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>(),\n                                      threadFactory);\n    }\n```\n\n\n\n**线程池特点：**\n\n\n\n- 核心线程数和最大线程数大小一样\n\n- 没有所谓的非空闲时间，即keepAliveTime为0\n\n- 阻塞队列为无界队列LinkedBlockingQueue，可能会导致OOM\n\n\n\n![img](大厂面试之并发篇.assets/1676357061932-8f24dfe8-8ba2-4786-a521-1f226c0aebc0.png)\n\n\n\n工作流程：\n\n\n\n- 提交任务\n\n- 如果线程数少于核心线程，创建核心线程执行任务\n\n- 如果线程数等于核心线程，把任务添加到LinkedBlockingQueue阻塞队列\n\n- 如果线程执行完任务，去阻塞队列取任务，继续执行。\n\n\n\n**使用场景**\n\n\n\nFixedThreadPool 适用于处理CPU密集型的任务，确保CPU在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务。\n\n\n\n### newCachedThreadPool\n\n\n\n```java\n   public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>(),\n                                      threadFactory);\n    }\n```\n\n\n\n**线程池特点：**\n\n\n\n- 核心线程数为0\n\n- 最大线程数为Integer.MAX_VALUE，即无限大，可能会因为无限创建线程，导致OOM\n\n- 阻塞队列是SynchronousQueue\n\n- 非核心线程空闲存活时间为60秒\n\n\n\n当提交任务的速度大于处理任务的速度时，每次提交一个任务，就必然会创建一个线程。极端情况下会创建过多的线程，耗尽 CPU 和内存资源。由于空闲 60 秒的线程会被终止，长时间保持空闲的 CachedThreadPool 不会占用任何资源。\n\n\n\n![img](大厂面试之并发篇.assets/1676357064355-c12b6db8-d7a6-4072-b67c-4600b10d0b06.png)\n\n\n\n工作流程：\n\n\n\n- 提交任务\n\n- 因为没有核心线程，所以任务直接加到SynchronousQueue队列。\n\n- 判断是否有空闲线程，如果有，就去取出任务执行。\n\n- 如果没有空闲线程，就新建一个线程执行。\n\n- 执行完任务的线程，还可以存活60秒，如果在这期间，接到任务，可以继续活下去；否则，被销毁。\n\n\n\n**适用场景**\n\n\n\n用于并发执行大量短期的小任务。\n\n\n\n### newScheduledThreadPool\n\n\n\n```java\n    public ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue());\n    }\n```\n\n\n\n**线程池特点**\n\n\n\n- 最大线程数为Integer.MAX_VALUE，也有OOM的风险\n\n- 阻塞队列是DelayedWorkQueue\n\n- keepAliveTime为0\n\n- scheduleAtFixedRate() ：按某种速率周期执行\n\n- scheduleWithFixedDelay()：在某个延迟后执行\n\n\n\n![img](大厂面试之并发篇.assets/1676357066939-5e8a0951-e313-43bb-afd5-9c755b5ee80f.png)\n\n\n\n**工作机制**\n\n\n\n- 线程从DelayQueue中获取已到期的ScheduledFutureTask（DelayQueue.take()）。到期任务是指ScheduledFutureTask的time大于等于当前时间。\n\n- 线程执行这个ScheduledFutureTask。\n\n- 线程修改ScheduledFutureTask的time变量为下次将要被执行的时间。\n\n- 线程把这个修改time之后的ScheduledFutureTask放回DelayQueue中（DelayQueue.add()）。\n\n\n\n![img](大厂面试之并发篇.assets/1676357068949-1a85b428-fb10-4939-95b2-5d2736493610.png)\n\n\n\n**使用场景**\n\n\n\n周期性执行任务的场景，需要限制线程数量的场景\n\n\n\n**使用无界队列的线程池会导致什么问题吗？**\n\n\n\n例如newFixedThreadPool使用了无界的阻塞队列LinkedBlockingQueue，如果线程获取一个任务后，任务的执行时间比较长，会导致队列的任务越积越多，导致机器内存使用不停飙升，最终导致OOM。\n\n\n\n## 54.线程池异常怎么处理知道吗？\n\n\n\n在使用线程池处理任务的时候，任务代码可能抛出RuntimeException，抛出异常后，线程池可能捕获它，也可能创建一个新的线程来代替异常的线程，我们可能无法感知任务出现了异常，因此我们需要考虑线程池异常情况。\n\n\n\n常见的异常处理方式：\n\n\n\n![img](大厂面试之并发篇.assets/1676357071412-345b2afb-dcf2-4f0e-b25a-b4c306c2fc4c.png)\n\n\n\n## 55.能说一下线程池有几种状态吗？\n\n\n\n线程池有这几个状态：RUNNING,SHUTDOWN,STOP,TIDYING,TERMINATED。\n\n\n\n```java\n   //线程池状态\n   private static final int RUNNING    = -1 << COUNT_BITS;\n   private static final int SHUTDOWN   =  0 << COUNT_BITS;\n   private static final int STOP       =  1 << COUNT_BITS;\n   private static final int TIDYING    =  2 << COUNT_BITS;\n   private static final int TERMINATED =  3 << COUNT_BITS;\n```\n\n\n\n线程池各个状态切换图：\n\n\n\n![img](大厂面试之并发篇.assets/1676357074733-c65a7e94-2daa-4b0d-a210-f4934ccca1bc.png)\n\n\n\n**RUNNING**\n\n\n\n该状态的线程池会接收新任务，并处理阻塞队列中的任务;\n\n\n\n调用线程池的shutdown()方法，可以切换到SHUTDOWN状态;\n\n\n\n调用线程池的shutdownNow()方法，可以切换到STOP状态;\n\n\n\n**SHUTDOWN**\n\n\n\n该状态的线程池不会接收新任务，但会处理阻塞队列中的任务；\n\n\n\n队列为空，并且线程池中执行的任务也为空,进入TIDYING状态;\n\n\n\n**STOP**\n\n\n\n该状态的线程不会接收新任务，也不会处理阻塞队列中的任务，而且会中断正在运行的任务；\n\n\n\n线程池中执行的任务为空,进入TIDYING状态;\n\n\n\n**TIDYING**\n\n\n\n该状态表明所有的任务已经运行终止，记录的任务数量为0。\n\n\n\nterminated()执行完毕，进入TERMINATED状态\n\n\n\n**TERMINATED**\n\n\n\n该状态表示线程池彻底终止\n\n\n\n## 56.线程池如何实现参数的动态修改？\n\n\n\n线程池提供了几个  setter方法来设置线程池的参数。\n\n\n\n![img](大厂面试之并发篇.assets/1676357076909-8553593e-bc32-448d-ba6f-6a86c15aabf3.png)\n\n\n\n这里主要有两个思路：\n\n\n\n![img](大厂面试之并发篇.assets/1676357079082-5571edf0-7933-4158-b0d2-083d2467a751.png)\n\n\n\n在我们微服务的架构下，可以利用配置中心如Nacos、Apollo等等，也可以自己开发配置中心。业务服务读取线程池配置，获取相应的线程池实例来修改线程池的参数。\n\n\n\n如果限制了配置中心的使用，也可以自己去扩展**ThreadPoolExecutor**，重写方法，监听线程池参数变化，来动态修改线程池参数。\n\n\n\n## 57.线程池调优了解吗？\n\n\n\n线程池配置没有固定的公式，通常事前会对线程池进行一定评估，常见的评估方案如下：\n\n\n\n![img](大厂面试之并发篇.assets/1676357081500-c19a710a-740a-4fbc-9425-45d5157d23f5.png)\n\n\n\n上线之前也要进行充分的测试，上线之后要建立完善的线程池监控机制。\n\n\n\n事中结合监控告警机制，分析线程池的问题，或者可优化点，结合线程池动态参数配置机制来调整配置。\n\n\n\n事后要注意仔细观察，随时调整。\n\n\n\n![img](大厂面试之并发篇.assets/1676357083487-5bc0fe29-11ae-4f90-97c2-86c0f7e7a7f9.png)\n\n\n\n具体的调优案例可以查看参考[7]美团技术博客。\n\n\n\n## 58.你能设计实现一个线程池吗？\n\n\n\n⭐这道题在阿里的面试中出现频率比较高\n\n\n\n线程池实现原理可以查看 要是以前有人这么讲线程池，我早就该明白了！ ，当然，我们自己实现， 只需要抓住线程池的核心流程-参考[6]：\n\n\n\n![img](大厂面试之并发篇.assets/1676357085324-9d049416-b482-438b-b8e6-835b3a16211a.png)\n\n\n\n我们自己的实现就是完成这个核心流程：\n\n\n\n- 线程池中有N个工作线程\n\n- 把任务提交给线程池运行\n\n- 如果线程池已满，把任务放入队列\n\n- 最后当有空闲时，获取队列中任务来执行\n\n\n\n实现代码[6]：\n\n\n\n![img](大厂面试之并发篇.assets/1676357096574-4e7bde51-33da-4d50-8afb-567ce49fed85.png)\n\n\n\n这样，一个实现了线程池主要流程的类就完成了。\n\n\n\n## 59.单机线程池执行断电了应该怎么处理？\n\n\n\n我们可以对正在处理和阻塞队列的任务做事务管理或者对阻塞队列中的任务持久化处理，并且当断电或者系统崩溃，操作无法继续下去的时候，可以通过回溯日志的方式来撤销`正在处理`的已经执行成功的操作。然后重新执行整个阻塞队列。\n\n\n\n也就是说，对阻塞队列持久化；正在处理任务事务控制；断电之后正在处理任务的回滚，通过日志恢复该次操作；服务器重启后阻塞队列中的数据再加载。\n\n\n\n## 60.Fork/Join框架了解吗？\n\n\n\nFork/Join框架是Java7提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。\n\n\n\n要想掌握Fork/Join框架，首先需要理解两个点，**分而治之**和**工作窃取算法**。\n\n\n\n**分而治之**\n\n\n\nFork/Join框架的定义，其实就体现了分治思想：将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。\n\n\n\n![img](大厂面试之并发篇.assets/1676357100106-fa62e55f-614f-42ff-b43e-71be98ba4e61.png)\n\n\n\n**工作窃取算法**\n\n\n\n大任务拆成了若干个小任务，把这些小任务放到不同的队列里，各自创建单独线程来执行队列里的任务。\n\n\n\n那么问题来了，有的线程干活块，有的线程干活慢。干完活的线程不能让它空下来，得让它去帮没干完活的线程干活。它去其它线程的队列里窃取一个任务来执行，这就是所谓的**工作窃取**。\n\n\n\n工作窃取发生的时候，它们会访问同一个队列，为了减少窃取任务线程和被窃取任务线程之间的竞争，通常任务会使用双端队列，被窃取任务线程永远从双端队列的头部拿，而窃取任务的线程永远从双端队列的尾部拿任务执行。\n\n\n\n![img](大厂面试之并发篇.assets/1676357102488-3c60d9a5-0868-46de-8307-f796baaf4f00.png)\n\n\n\n看一个Fork/Join框架应用的例子，计算1~n之间的和：`1+2+3+…+n`\n\n\n\n设置一个分割阈值，任务大于阈值就拆分任务\n\n\n\n任务有结果，所以需要继承RecursiveTask\n\n\n\n```java\npublic class CountTask extends RecursiveTask<Integer> {\n    private static final int THRESHOLD = 16; // 阈值\n    private int start;\n    private int end;\n\n    public CountTask(int start, int end) {\n        this.start = start;\n        this.end = end;\n    }\n\n    @Override\n    protected Integer compute() {\n        int sum = 0;\n        // 如果任务足够小就计算任务\n        boolean canCompute = (end - start) <= THRESHOLD;\n        if (canCompute) {\n            for (int i = start; i <= end; i++) {\n                sum += i;\n            }\n        } else {\n            // 如果任务大于阈值，就分裂成两个子任务计算\n            int middle = (start + end) / 2;\n            CountTask leftTask = new CountTask(start, middle);\n            CountTask rightTask = new CountTask(middle + 1, end);\n            // 执行子任务\n            leftTask.fork();\n            rightTask.fork(); // 等待子任务执行完，并得到其结果\n            int leftResult = leftTask.join();\n            int rightResult = rightTask.join(); // 合并子任务\n            sum = leftResult + rightResult;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ForkJoinPool forkJoinPool = new ForkJoinPool(); // 生成一个计算任务，负责计算1+2+3+4\n        CountTask task = new CountTask(1, 100); // 执行一个任务\n        Future<Integer> result = forkJoinPool.submit(task);\n        try {\n            System.out.println(result.get());\n        } catch (InterruptedException e) {\n        } catch (ExecutionException e) {\n        }\n    }\n    \n}\n```\n\n\n\nForkJoinTask与一般Task的主要区别在于它需要实现compute方法，在这个方法里，首先需要判断任务是否足够小，如果足够小就直接执行任务。如果比较大，就必须分割成两个子任务，每个子任务在调用fork方法时，又会进compute方法，看看当前子任务是否需要继续分割成子任务，如果不需要继续分割，则执行当前子任务并返回结果。使用join方法会等待子任务执行完并得到其结果。\n\n\n\n## 描述一下notify和notifyAll的区别\n\n1. 首先最好说一下 锁池 和 等待池 的概念\n2. 锁池:假设线程A已经拥有了某个对象(注意:不是类)的锁，而其它的线程想要调用这个对\n\n象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的\n\nsynchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程\n\nA拥有，所以这些线程就进入了该对象的锁池中。\n\n2. 等待池:假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁(因为\n\nwait()方法必须出现在synchronized中，这样自然在执行wait()方法之前线程A就已经拥\n\n有了该对象的锁)，同时线程A就进入到了该对象的等待池中。如果另外的一个线程调用\n\n了相同对象的notifyAll()方法，那么处于该对象的等待池中的线程就会全部进入该对象的\n\n锁池中，准备争夺锁的拥有权。如果另外的一个线程调用了相同对象的notify()方法，那\n\n么仅仅有一个处于该对象的等待池中的线程(随机)会进入该对象的锁池.\n\n1. 如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不\n\n   会去竞争该对象的锁\n\n2. 当有线程调用了对象的 notifyAll()方法(唤醒所有 wait 线程)或 notify()方法(只随机唤醒一\n\n   个 wait 线程)，被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象\n\n   锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争\n\n3. 所谓唤醒线程，另一种解释可以说是将线程由等待池移动到锁池，notifyAll调用后，会将全部 线程由等待池移到锁池，然后参与锁的竞争，竞争成功则继续执行，如果不成功则留在锁池等 待锁被释放后再次参与竞争。而notify只会唤醒一个线程。\n\n\n\n\n\n","tags":["我要进大厂","面试","多线程","高并发"],"categories":["JAVA","面试","我要进大厂"]},{"title":"mermaid的基本用法","url":"/note/TOOLS/MARKDOWN/mermaid的基本用法/","content":"\n\n\n\n\n## 关于 Mermaid\n\n[https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md](https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md)\n\n\n\n## 示例\n\n**下面是一些可以使用 Mermaid 创建的图表示例。点击 [语法](https://mermaid-js.github.io/mermaid/#/n00b-syntaxReference) 查看详情。**\n\n<table>\n<!-- <Flowchart> -->\n\n### 流程图 [<a href=\"https://mermaid-js.github.io/mermaid/#/flowchart\">文档</a> ]\n\n```\nflowchart LR\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\n```mermaid\nflowchart LR\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\n### 时序图 [<a href=\"https://mermaid-js.github.io/mermaid/#/sequenceDiagram\">文档</a> ]\n\n```\nsequenceDiagram\nAlice->>John: Hello John, how are you?\nloop Healthcheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\nNote over Alice,Bob: talk is done\n```\n\n```mermaid\nsequenceDiagram\nAlice->>John: Hello John, how are you?\nloop Healthcheck\n    John->>John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn-->>Alice: Great!\nJohn->>Bob: How about you?\nBob-->>John: Jolly good!\nNote over Alice,Bob: talk is done\n```\n\n### 甘特图 [<a href=\"https://mermaid-js.github.io/mermaid/#/gantt\">文档</a> ]\n\n```\ngantt\n    section Section\n    Completed :done,    des1, 2014-01-06,2014-01-08\n    Active        :active,  des2, 2014-01-07, 3d\n    Parallel 1   :         des3, after des1, 1d\n    Parallel 2   :         des4, after des1, 1d\n    Parallel 3   :         des5, after des3, 1d\n    Parallel 4   :         des6, after des4, 1d\n```\n\n```mermaid\ngantt\n    section Section\n    Completed :done,    des1, 2014-01-06,2014-01-08\n    Active        :active,  des2, 2014-01-07, 3d\n    Parallel 1   :         des3, after des1, 1d\n    Parallel 2   :         des4, after des1, 1d\n    Parallel 3   :         des5, after des3, 1d\n    Parallel 4   :         des6, after des4, 1d\n```\n\n### 类图 [<a href=\"https://mermaid-js.github.io/mermaid/#/classDiagram\">文档</a> ]\n\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\n<<Interface>> Class01\nClass09 --> C2 : Where am I?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n  <<service>>\n  int id\n  size()\n}\n```\n\n```mermaid\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\n<<Interface>> Class01\nClass09 --> C2 : Where am I?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n  <<service>>\n  int id\n  size()\n}\n```\n\n### 状态图 [<a href=\"https://mermaid-js.github.io/mermaid/#/stateDiagram\">文档</a>]\n\n```\nstateDiagram-v2\n[*] --> Still\nStill --> [*]\nStill --> Moving\nMoving --> Still\nMoving --> Crash\nCrash --> [*]\n```\n\n```mermaid\nstateDiagram-v2\n[*] --> Still\nStill --> [*]\nStill --> Moving\nMoving --> Still\nMoving --> Crash\nCrash --> [*]\n```\n\n### 饼图 [<a href=\"https://mermaid-js.github.io/mermaid/#/pie\">文档</a> ]\n\n```\npie\n\"Dogs\" : 386\n\"Cats\" : 85\n\"Rats\" : 15\n```\n\n```mermaid\npie\n\"Dogs\" : 386\n\"Cats\" : 85\n\"Rats\" : 15\n```\n\n### Git 图 [实验特性 ]\n\n### 用户体验旅程图 [<a href=\"https://mermaid-js.github.io/mermaid/#/user-journey\">文档</a> ]\n\n```\n  journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 3: Me\n```\n\n```mermaid\n  journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 3: Me\n```\n\n### C4 图 [<a href=\"https://mermaid-js.github.io/mermaid/#/c4c\">文档</a>]\n\n```\nC4Context\ntitle System Context diagram for Internet Banking System\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\nPerson(customerB, \"Banking Customer B\")\nPerson_Ext(customerC, \"Banking Customer C\")\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\nEnterprise_Boundary(b1, \"BankBoundary\") {\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n  System_Boundary(b2, \"BankBoundary2\") {\n    System(SystemA, \"Banking System A\")\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\n  }\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n  }\n}\nBiRel(customerA, SystemAA, \"Uses\")\nBiRel(SystemAA, SystemE, \"Uses\")\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\nRel(SystemC, customerA, \"Sends e-mails to\")\n```\n\n```mermaid\nC4Context\ntitle System Context diagram for Internet Banking System\nPerson(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\nPerson(customerB, \"Banking Customer B\")\nPerson_Ext(customerC, \"Banking Customer C\")\nSystem(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\nPerson(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\nEnterprise_Boundary(b1, \"BankBoundary\") {\n  SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n  System_Boundary(b2, \"BankBoundary2\") {\n    System(SystemA, \"Banking System A\")\n    System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts.\")\n  }\n  System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n  SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n  Boundary(b3, \"BankBoundary3\", \"boundary\") {\n    SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank, with personal bank accounts.\")\n    SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n  }\n}\nBiRel(customerA, SystemAA, \"Uses\")\nBiRel(SystemAA, SystemE, \"Uses\")\nRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\nRel(SystemC, customerA, \"Sends e-mails to\")\n```\n\n","tags":["mermaid","markdown"],"categories":["TOOLS","MARKDOWN"]},{"title":"SourceTree提交报错Authentication failed for","url":"/note/JAVA/GIT/SourceTree提交报错Authentication failed for/","content":"\n# SourceTree提交报错Authentication failed for\n\n\n\n原因是因为系统中存的用户名和密码不对。\n\n\n\n最简单的操作办法就是把系统中存在的用户名和密码删掉，然后重新填。\n\n\n\n打开选项\n\n<img src=\"SourceTree提交报错Authentication failed for.assets/image-20230427152523652.png\" alt=\"image-20230427152523652\" style=\"zoom:80%;\" />\n\n将Git保存的密码全都删掉\n\n<img src=\"SourceTree提交报错Authentication failed for.assets/image-20230427152615391.png\" alt=\"image-20230427152615391\" style=\"zoom:80%;\" />\n\n然后再次重新提交，系统就会提示需要重新登录了。","tags":["git","mac","sourceTree"],"categories":["JAVA","GIT"]},{"title":"解决IDEA项目代码修改后不生效需要执行mvncleaninstall才生效","url":"/note/TOOLS/IDEA/解决IDEA项目代码修改后不生效需要执行mvncleaninstall才生效/","content":"\n\n\n### 推荐\n\n推荐方法3，亲测有效\n\n### 问题描述\n\n在Git拉下来的代码每次修改代码后需要重新使用mvn clean install命令重新编译，异常麻烦。\n\n检查了 IDEA 的配置，已经配置了自动编译模式，但是死活不生效，异常郁闷。\n\n### 方法1\n\n一开始在网上找到一种治标不治本的方法是在File—>Settings—>Build,Execution,Deployment—>Build Tools—>Maven—>Runner中勾选了Delegate IDE build/run actions to Maven\n\n虽然能够解决但是其本质还是通过运行 maven 的 install 命令进行更新 class 文件，并且每次运行代码之前会卡十几 几十秒用来打包，可谓治标不治本。\n\n### 方法2\n\n进入`parent`项目目录下，执行mvn `idea:module` ，之后会看到项目下面新生成了一个.iml文件，原因是原先的iml文件混乱导致的，重新生成一下就OK了；\n\n### 方法3\n\n后来将项目从 IDEA 中关闭，将`.idea` 文件夹删除，将`.iml`文件删除，重新导入项目就又可以了。\n\n暂时还不知道什么原因，先记录下来吧，也是一种解决方案，以后遇到这种问题不要再耗费这么多时间。毕竟花太多时间来解决开发环境问题不是很值得。\n\n### 注意点\n\n在上面的方案中，我们将.idea和.iml文件都删除了。这里面可能会包含你项目的个性化配置，比如项目中重点代码的书签、一些Todo和一些其他配置，删除最好评估下是否需要备份。\n\n","tags":["idea","不生效"],"categories":["TOOLS","idea"]},{"title":"VirtualBox安装CentOS7","url":"/note/SYSTEM/CENTOS/VirtualBox安装CentOS7/","content":"\n\n\n安装前准备\n\n安装VirtualBox：自行百度安装\n\n准备镜像：可以用 [CentOS官网](https://www.centos.org/)，[CentOS中文官网](http://centos.p2hp.com/) 下载CentOS镜像\n\n我这里下载的是 CentOS 7：http://mirrors.nju.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso\n\nCentOS 7提供了三种ISO镜像文件：\n**DVD ISO** 标准安装版，桌面版\n**Everything ISO** 标准安装版的补充，增加了大量的应用软件\n**Minimal ISO** 精简版，自带的应用软件最少，生产环境推荐使用\n\nMinimal版本优点：\n\n- 节省系统资源，磁盘空间占用小\n- 自带软件少，系统纯净运行更稳定\n- 需要的软件包可以自行安装\n\n\n\n\n\n创建虚拟机\n\n1：点击新建\n\n2：输入名称：centos7；文件夹：是保存虚拟机系统的文件；类型：选择Linux；版本：选择Other Linux(64-bit)\n\n3：选择虚拟机的内存大小：根据自己需求选择，我这里选择了2G\n\n4：创建虚拟机的硬盘：根据自己需求选择，可以稍后创建，现在创建，我选择了：现在创建\n\n5：选择虚拟机硬盘的类型：根据自己需求选择，我选择了默认的VDI类型\n\n6：选择虚拟机硬盘的大小：根据自己需求选择，我选择了动态分配\n\n7：选择虚拟机硬盘的位置：根据自己需求选择，我选择了虚拟硬盘放在D盘\n\n8：选择虚拟机硬盘的大小：根据自己需求选择，我选择了硬盘大小最大为20GB\n\n9：创建完成后，可以选中当前虚拟机\n\n10：点击设置\n\n11：可以对创建好的虚拟机再次调整参数，比如我这里将虚拟机的CPU调整为了2核\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215105959953.png\" alt=\"image-20230215105959953\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215110204977.png\" alt=\"image-20230215110204977\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215110229245.png\" alt=\"image-20230215110229245\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215110308994.png\" alt=\"image-20230215110308994\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215110325528.png\" alt=\"image-20230215110325528\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215110400735.png\" alt=\"image-20230215110400735\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215110904381.png\" alt=\"image-20230215110904381\" style=\"zoom:80%;\" />\n\n\n\n启动虚拟机\n\n1：选中虚拟机\n\n2：点击启动，点击之后，稍等片刻，会弹出虚拟机启动窗口\n\n3：在虚拟机窗口，选择启动镜像，点击文件夹图标\n\n4：选择 注册\n\n5：找到我们之前下载的 CentOS7 的镜像，开启启动\n\n6：通过键盘，移动上下左右箭头，选择 Install CentOS 7，回车\n\n7：选择中文，继续\n\n8：选择安装位置\n\n9：将安装位置选中为我们创建的虚拟硬盘\n\n10：完成\n\n11：开始安装\n\n12：创建root密码，我这里将root设置为：root\n\n13：创建用户，根据自己的需求选择是否创建本地用户，我这里就不创建了，不创建的话，默认就只有一个root用户\n\n14：安装完成，开始重启，重启之后，就可以登录了。\n\n\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215111205370.png\" alt=\"image-20230215111205370\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215111944905.png\" alt=\"image-20230215111944905\" style=\"zoom:80%;\" />\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215112021017.png\" alt=\"image-20230215112021017\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215112159337.png\" alt=\"image-20230215112159337\" style=\"zoom:80%;\" />\n\n\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215112256613.png\" alt=\"image-20230215112256613\" style=\"zoom:80%;\" />\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215112320332.png\" alt=\"image-20230215112320332\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215112345724.png\" alt=\"image-20230215112345724\" style=\"zoom:80%;\" />\n\n\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215112447552.png\" alt=\"image-20230215112447552\" style=\"zoom:80%;\" />\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215115027821.png\" alt=\"image-20230215115027821\" style=\"zoom:80%;\" />\n\n<img src=\"VirtualBox安装CentOS7.assets/image-20230215115129320.png\" alt=\"image-20230215115129320\" style=\"zoom:80%;\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["centos"],"categories":["SYSTEM","CENTOS"]},{"title":"通过docker安装mysql5.7.19并解决中文乱码问题的方法","url":"/note/JAVA/部署与容器/DOCKER/docker安装mysql5719并解决中文乱码/","content":"\n\n\n## 安装Docker\n\n首先安装docker；\n\n## 安装mysql5.7.19\n\n从dokcer仓库下载5.7.19版本的数据，如果不指定版本的话，下载的就是最新的版本，为什么选择5.7.19，因为公司使用的数据库是这个版本，所以就选择这个了。\n\n```shell\ndocker pull mysql:5.7.19\n```\n\n下载好之后，如果有docker desktop的话，就可以看到了，没有desktop也可以使用命令查询\n\n```shell\nzhuansun@MacBook-Pro ~ % docker image list\nREPOSITORY  TAG    IMAGE ID    CREATED    SIZE\nmysql     5.7.19   3e3878acd190  3 years ago  412MB\n```\n\n或者docker desktop\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901193908153.png\" alt=\"image-20220901193908153\" style=\"zoom: 50%;\" />\n\n## 启动mysql5.7.19\n\n然后就是启动docker容器了：\n\n同样的，有两种方式：一种是通过图形化工具docker-desktop；一种是通过命令；\n\n\n\n### 命令行简单启动\n\n```shell\ndocker run -p 3306:3306 --name mysql5.7.19 \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\n-d mysql:5.7.19\n```\n\n解释一下：\n\n| 命令                          | 说明                                                         |\n| ----------------------------- | ------------------------------------------------------------ |\n| docker run                    | 没什么说的                                                   |\n| -p 3306:3306                  | 指定mysql的端口，前面是本机端口，后面是容器端口；如果容器已经起了一个3306的mysql，你想在启动一个mysql，就得把后面的端口改了。 |\n| --name mysql5.7.19            | 容器启动后的名字，只是个名字                                 |\n| -e MYSQL_ROOT_PASSWORD=123456 | docker启动mysql必须要设置密码的，这里是直接设置了root密码，也可以通过其他命令指定新的用户名和密码。网上搜就有 |\n| -d mysql:5.7.19               | 使用mysql:5.7.19这个版本的镜像                               |\n\n\n\n\n\n### docker-desktop简单启动\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195130908.png\" alt=\"image-20220901195130908\" style=\"zoom: 50%;\" />\n\n- 和命令行方式比较一下，就知道啥意思了。但是docker-desktop没找到哪里设置用户名和密码。所以我最终选择是使用命令行方式；\n\n- 但是我们注意到dokcer-desktop下面有一个Volume卷的设置，命令行没有，它是什么意思呢？\n\n- 它表示可以把容器中的数据和本地的数据进行互通；\n\n- 我们知道容器一旦被关闭，或者重启，所有的数据都会丢失；所以我们要把容器中的数据映射到本地磁盘，就是这个意思。\n\n- 不过，上面说了，我们使用命令行的方式启动mysql，那么命令行怎么映射呢？\n\n### 命令行完整启动\n\n```shell\ndocker run -p 3306:3306 --cpus 2 -m 4GB --name mysql5.7.19 \\\n-v /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql \\\n-v /Users/zhuansun/workspace/docker/mysql5.7.19/logs:/var/log/mysql \\\n-v /Users/zhuansun/workspace/docker/mysql5.7.19/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\n-d mysql:5.7.19\n```\n\n解释一下：\n\n| 命令   | 说明                                                         |\n| ------ | ------------------------------------------------------------ |\n| -v     | -v表示将本地的一个文件夹挂载到容器中，容器每次启动的时候，本地的文件都会覆盖到容器中；容器中产生的文件，也会写到本地中。这样保证了数据的持久化 |\n| --cpus | 配置cpu，有时候mysql跑的太快，cpu直接就满了，这里可以配置cpu，后面跟的数据，是cpu的核数 |\n| -m     | 配置内存，默认内存是2G，可以通过 docker stats 查看           |\n\n\n\n- 然后在docker-desktop中也可以看到启动后的app\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195155480.png\" alt=\"image-20220901195155480\" style=\"zoom:50%;\" />\n\n\n\n\n\n## datagrip连接mysql\n\n```shell\nlocalhost\n3306\nroot\n123456\n```\n\n- datagrip也可以连接成功\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195211507.png\" alt=\"image-20220901195211507\" style=\"zoom:50%;\" />\n\n\n\n\n\n## 中文乱码问题的发现\n\n- 我以为到这儿就结束了，其实不是的。\n\n- 因为我在mysql中创建了一个数据库，然后创建了一个表，通过代码插入一条记录之后，发现，妈的，乱码了。\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195229189.png\" alt=\"image-20220901195229189\" style=\"zoom:50%;\" />\n\n- 然后排查为什么会乱码：\n\n- 这是因为我们的mysql通过docker启动之后，默认的编码其实并不是utf8，而是latin1；这就导致了中文乱码的原因。\n\n- 通过 \n\n```mysql\nshow variables like '%char%';\n```\n\n也可以验证这个问题\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195253309.png\" alt=\"image-20220901195253309\" style=\"zoom:50%;\" />\n\n## 中文乱码问题的排查思路\n\n- 那么怎么办呢？就需要修改mysql的配置文件了。\n\n- 这里必须要吐槽一下百度，搜出来的东西，他娘的，都是狗屎；\n\n- 搜索关键字：mac mysql 5.7.19 中文乱码\n\n- 然后百度建议：修改etc下的my.cnf；他娘的，根本没有这个文件好不好。\n\n- 最后还是搜索了好久好久，一直折腾到大半夜，才找到原因\n\n- 在mysql5.7.18版本之前，在etc下会有一个my-default.cnf的文件（网上搜的，没有验证），然后我们安装好mysql之后，把这个文件改个名字就可以了。作为全局配置，但是后续版本，mysql把他删掉了。所以我使用的5.7.19是没有的。\n\n- 那么5.7.19的配置文件在哪里呢？\n\n- 应该是在etc/mysql/这个文件夹下面，但是我登录我的容器一看：这个文件夹下面是空的？卧槽？\n\n- 后续排查发现，因为我们使用了 \n\n```sh\n-v /Users/zhuansun/workspace/docker/mysql5.7.19/conf:/etc/mysql \\\n```\n\n- 所以我们本地的文件覆盖了容器中的内容；本地的文件夹是空的，所以容器里面技术空了。\n\n- 那么没办法了，我又重新启动了一个mysql-dokcer叫做 mysql5.7.19-1，然后没有指定-v,同时还得修改端口，要不然端口就冲突了；\n\n```sh\ndocker run -p 3307:3307 --name mysql5.7.19-1 \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\n-d mysql:5.7.19\n```\n\n- 这样我们创建了一个新的mysql容器，登录进去看看：\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195552187.png\" alt=\"image-20220901195552187\" style=\"zoom:50%;\" />\n\n- 通过docker-desktop登录进去看看：\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195603660.png\" alt=\"image-20220901195603660\" style=\"zoom:50%;\" />\n\n- 进入到容器中，我们可以看到其实 etc/mysql下面是有配置文件的。\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195615455.png\" alt=\"image-20220901195615455\" style=\"zoom:50%;\" />\n\n- 这样就验证了我们之前的猜测，就是本地的空文件夹把mysql里的配置文件给覆盖掉了。\n\n- 那么怎么办呢？ 我得改配置文件啊。得想办法把配置文件放在本地文件夹中，然后再次重启容器，配置文件就可以加载进去了。\n\n- 怎么把配置文件复制到本地呢？\n\n```sh\ndocker cp:mysql5.7.19-1:/etc/mysql /Users/zhuansun/workspace/docker/mysql5.7.19/conf\n```\n\n- 好了，用上面的命令就可以解决了，但是复制下来之后，发现，我草？这么多文件不知道改哪一个，而且怎么还有一个 连接 文件。\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195651594.png\" alt=\"image-20220901195651594\" style=\"zoom:50%;\" />\n\n- 继续百度吧，又被恶心到了一圈。最终决定还是靠自己，但是还是搜到一些有用的东西的。关于这个链接文件是什么？\n- 其实并不是所有的配置文件都在etc下面的，mysql配置文件分为全局配置，和用户配置；是放在不同的地方的，但是**会通过一个链接文件，链接过来**；\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195658976.png\" alt=\"image-20220901195658976\" style=\"zoom:50%;\" />\n\n- 所以按照这个思路，我们去 mysql5.7.19-1 中去看看，链接文件都连接到哪里啦。\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195805841.png\" alt=\"image-20220901195805841\" style=\"zoom:50%;\" />\n\n- 打开这两个文件，看看\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901195823380.png\" alt=\"image-20220901195823380\" style=\"zoom:50%;\" />\n\n- 打开之后可以看到一个文件是用来配置 mysql 的一个文件是用来配置mysqld的，\n\n- 到这里就比较明确的，我们把设置编码的命令设置进来。像下面这个样子。注意要在本地的文件夹中修改哦：只需要修改mysqld.cnf就行了，因为它是全局的\n\n```sql\n# Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n​\n#\n# The MySQL  Server configuration file.\n#\n# For explanations see\n# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n​\n[mysqld]\ncharacter-set-server=utf8\ncollation-server=utf8_general_ci\npid-file    = /var/run/mysqld/mysqld.pid\nsocket      = /var/run/mysqld/mysqld.sock\ndatadir     = /var/lib/mysql\n#log-error  = /var/log/mysql/error.log\n# By default we only accept connections from localhost\n#bind-address   = 127.0.0.1\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n[client]\ndefault-character-set=utf8\n```\n\n\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901200508795.png\" alt=\"image-20220901200508795\" style=\"zoom:50%;\" />\n\n- 然后重启docker容器；欣喜若狂\n\n- 结果发现中文还是插入不进来。卧槽？而且查看编码，仍然是拉丁。奇怪了。\n\n- 最后仔细看了一下，发现是拉丁的参数是database级别的。\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901200533956.png\" alt=\"image-20220901200533956\" style=\"zoom:50%;\" />\n\n- 然后想到，创建数据库之后，数据库是有编码的，因为这个数据库是在修改编码之前创建的，所以他的编码是不会变的。\n\n- 重新创建一个数据库再次测试，发现新的数据库的编码是正确的。\n\n- 至此，中文乱码问题解决。\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901200554433.png\" alt=\"image-20220901200554433\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"docker安装mysql5719并解决中文乱码.assets/image-20220901200614121.png\" alt=\"image-20220901200614121\" style=\"zoom:50%;\" />\n\n","tags":["docker","mysql","乱码"],"categories":["JAVA","部署与容器","DOCKER"]},{"title":"优先队列排序算法","url":"/note/ALGORITHM/SORT/优先队列排序算法/","content":"\n# 优先队列排序算法\n\n","tags":["算法","排序算法","优先队列排序"],"categories":["ALGORITHM","SORT"]},{"title":"快速排序算法","url":"/note/ALGORITHM/SORT/快速排序算法/","content":"\n# 快速排序算法\n\n","tags":["算法","排序算法","快速排序"],"categories":["ALGORITHM","SORT"]},{"title":"【spring】spring的事务生效条件","url":"/note/JAVA/SSM/【spring】spring的事务生效条件/","content":"\n\n\n\n\n参考文章：https://blog.csdn.net/XiaoWenJava123/article/details/102776574\n\n同一个类中，没有事务的方法调用有事务的方法，事务会生效吗？\n\n```java\n@Service\npublic class UserService {\n    \n    public void testA(){\n        //方法A没有事务，调用有事务的方法B\n        testB();\n    }\n    \n    @Transactional\n    public void testB(){\n        \n    }\n   \n}\n```\n\n答：不会生效。\n\n原因：\n\n- spring 在扫描bean的时候会扫描方法上是否包含@Transactional注解。\n- 如果包含，spring会为这个bean动态地生成一个子类（即代理类，proxy），代理类是继承原来那个bean的。\n- 此时，当这个有注解的方法被调用的时候，实际上是由代理类来调用的，代理类在调用之前就会启动事务。\n- 然而，如果这个有注解的方法是被同一个类中的其他方法调用的，那么该方法的调用并没有通过代理类，所以就不会启动事务。\n\n\n\n解决的方法就简单了：\n\n1、将被调用的本类方法重新从Spring中获取\n\n2、在Application上加注解：@EnableAspectJAutoProxy(proxyTargetClass = true, exposeProxy = true)解决同类方法调用时异步和事务不生效：\n\n3、还有一种开启类的事物（不认为是个合理的解决方案）\n\n\n\n\n\n\n\n\n\n方法不是public修饰，因为Spring代理是Cglib,是生成一个子类去调用的，子类没有父类的非public方法，自然不会有事务产生\n\n\n\n","tags":["spring","事务"],"categories":["JAVA","SSM"]},{"title":"【spring】spring注解AOP开发和源码解读及实践","url":"/note/JAVA/SSM/【spring】spring注解AOP开发和源码解读及实践/","content":"\n\n\n# spring注解AOP开发和源码解读及实践\n\n本文主要介绍spring的aop，基于注解和XML的简单使用和源码解读, 本文涉及的所有图片，如果不清晰，可以下载PDF文件进行查看：\n\n## AOP的使用\n\n\n\n在了解使用之前，我们需要先了解一下：execution表达式\n\n### execution表达式\n\n```java\n// 任意公共方法的执行：\nexecution(public * *(..))\n\n//任何一个以“set”开始的方法的执行：\nexecution(* set*(..))\n\n//AccountService 接口的任意方法的执行：\nexecution(* com.xyz.service.AccountService.*(..))\n\n//定义在service包里的任意方法的执行：\nexecution(* com.xyz.service.*.*(..))\n\n//定义在service包和所有子包里的任意类的任意方法的执行：\nexecution(* com.xyz.service..*.*(..))\n\n//定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行：\nexecution(* com.test.spring.aop.pointcutexp..JoinPointObjP2.*(..)))\n\n\n```\n\n\n\n### 基于注解的使用\n\n目前最火的使用方式就是基于注解的使用方式，避免了大量的配置文件，而且易于管理和维护。简单明了，推荐使用。\n\n#### 导入aop所必须的最小maven依赖\n\n- 1.spring的aop依赖于spring的ioc容器，所以需要导入spring-context,同时spirng-context中已经引入了spring-aop，所以就不需要单独的引入spring-aop了。\n\n- 2.spring的aop依赖于强大的AspectJ，所以需要引入aspectjweaver的依赖，但是spring-aspects已经加入了这个依赖，所以，只需要再引入spring-aspects就可以了。\n\n- 3.关于为什么只引入这两个依赖，请移步：[spring-aop和aspectJ的关系](#spring-aop和aspectJ的关系)\n\n- 4.最后，我们自己会编写了一些测试方法，所以需要引入Junit的依赖。\n\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>4.3.12.RELEASE</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aspects</artifactId>\n            <version>4.3.12.RELEASE</version>\n        </dependency>\n\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222163808764.png\" alt=\"image-20221222163808764\" style=\"zoom:80%;\" />\n\n\n\n#### 实现业务逻辑类\n\n- 在这个实例中，具体的业务逻辑类是： com.zspc.core.spring.aop.service.Calculator\n\n- 我们想要的目的是：在业务逻辑运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常，等等等）\n\n```java\npublic class Calculator {\n    /**\n     * 计算两个数的除法\n     */\n    public int div(int a, int b){\n        System.out.println(\"开始计算-->除数:\"+a+\",被除数:\"+b+\".\");\n        return a/b;\n    }\n}\n```\n\n#### 实现具体的日志切面类\n\n- 之前说到，我们的目的是：在业务逻辑类运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常，等等等）\n\n- 所以我们需要一个切面类，切面类里面的方法需要动态感知Calculator.div(int,int)方法运行到哪里然后执行通知方法；\n\n- 环绕通知：目标方法运行前后都运行，需要手动运行joinPoint.proceed()，才能推进目标方法的执行，对应切面类中的logAround()\n\n- 前置通知：目标方法运行之前运行，对应切面类中的logStart()\n\n- 后置通知：目标方法运行之后，结束之前（无论方法正常结束(return)还是异常结束(exception)）运行，对应切面类中的logAfter()\n\n- 返回通知：目标方法返回之后运行，对应切面类中logReturn()\n\n- 异常通知：目标方法发生异常的时候运行，该异常运行后，返回通知不会运行，对应切面类中的logException()\n\n- 执行流程：环绕通知开始-->前置通知-->环绕通知joinPoint.proceed()-->环绕通知结束-->后置通知-->返回通知/异常通知\n\n```java\n\npublic class LogAspect {\n\n    public void logStart(JoinPoint joinPoint) {\n        //...\n    }\n\n    public void logEnd(JoinPoint joinPoint) {\n        //...\n    }\n\n    public void logReturn(JoinPoint joinPoint, Object result) {\n        //...\n    }\n\n    public void logException(JoinPoint joinPoint, Exception exception) {\n        //...\n    }\n\n\n    public Object logAround(ProceedingJoinPoint joinPoint){\n        //...\n    }\n}\n```\n\n#### 对切面类的方法添加注解，标注执行时机\n\n- 对切面类添加注解,并指定切面\n\n  - @Around\n\n  - @Before\n\n  - @After\n\n  - @AfterReturning\n\n  - @AfterThrowing\n\n- 指定切面有两种方法\n\n  - 定义一个公共的切面方法，@Pointcut(\"execution (xxxxx)\")，并在切面类注解中引入\n\n  - 直接在切面类注解中指定切面：@Before(\"com.xxx.xxx.xxx()\")\n\n```java\npublic class LogAspect {\n\n    //抽取公共的切入点表达式\n    @Pointcut(\"execution(* com.zspc.core.spring.aop.service.Calculator.*(..))\")\n    public void pointCut() {}\n\n    @Before(\"pointCut()\")\n    public void logStart(JoinPoint joinPoint) {\n        //...\n    }\n\n    @After(\"pointCut()\")\n    public void logEnd(JoinPoint joinPoint) {\n        //...\n    }\n\n    @AfterReturning(value = \"pointCut()\", returning = \"result\")\n    public void logReturn(JoinPoint joinPoint, Object result) {\n        //....\n    }\n\n    @AfterThrowing(value = \"pointCut()\", throwing = \"exception\")\n    public void logException(JoinPoint joinPoint, Exception exception) {\n        //...\n    }\n\n    @Around(value = \"pointCut()\")\n    public Object logAround(ProceedingJoinPoint joinPoint){\n        //...\n    }\n\n}\n\n```\n\n#### 告诉spring哪个类是切面类\n\n- 就是给切面类加上 @Aspect 注解，让spirng容器知道这是一个切面类。\n\n```java\n@Aspect\npublic class LogAspect {\n\n    //....省略...\n\n}\n\n```\n\n#### 将切面类和业务逻辑类纳入spirng管理\n\n- 就是在配置类中添加@Bean\n\n```sql\n@Configuration\npublic class MainConfig {\n\n\n    @Bean\n    public LogAspect logAspect() {\n        return new LogAspect();\n    }\n\n\n    @Bean\n    public Calculator calculator() {\n        return new Calculator();\n    }\n\n}\n\n```\n\n#### 开启基于注解的aop模式\n\n- 给配置类添加@EnableAspectJAutoProxy,，这样spring才能识别所有的aop注解。\n\n```java\n@Configuration\n@EnableAspectJAutoProxy\npublic class MainConfig {\n\n\n    @Bean\n    public LogAspect logAspect() {\n        return new LogAspect();\n    }\n\n\n    @Bean\n    public Calculator calculator() {\n        return new Calculator();\n    }\n\n}\n```\n\n\n\n#### 最后一步，编写测试类，进行测试\n\n- 测试类\n\n```java\npublic class AOPTest {\n    @Test\n    public void testAop() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Calculator calculator = (Calculator) applicationContext.getBean(\"calculator\");\n        int div = calculator.div(2, 1);\n        System.out.println(div);\n    }\n}\n```\n\n- 测试结果\n\n```java\n环绕通知开始\n前置通知运行。。。参数列表是：{[12, 5]}\n开始计算-->除数:12,被除数:5.\n环绕通知结束\n后置通知运行。。。@After\n返回通知运行。。。@AfterReturning:运行结果：{2}\n2\n```\n\n### 基于XML的使用\n\n#### 略\n\n这个就不说了，和上面差不多\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n       http://www.springframework.org/schema/beans/spring-beans.xsd \n       http://www.springframework.org/schema/aop \n       http://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n\n    <bean id=\"logAspect\" class=\"com.zspc.core.spring.aop.config.LogAspect\"/>\n\n    <bean id=\"calculator\" class=\"com.zspc.core.spring.aop.service.Calculator\"/>\n\n    <aop:config>\n        <aop:aspect ref=\"logAspect\">\n            <aop:pointcut expression=\"execution (* com.zspc.core.spring.aop.service.Calculator.*(..))\" id=\"pointCut\"/>\n            <aop:before pointcut-ref=\"pointCut\" method=\"logStart\"/>\n            <aop:after-returning pointcut-ref=\"pointCut\" method=\"logReturn\"/>\n            <aop:after-throwing pointcut-ref=\"pointCut\" method=\"logException\"/>\n            <!--<aop:after pointcut-ref=\"pointCut\" method=\"doAfter\"/>-->\n            <!--<aop:around pointcut-ref=\"pointCut\" method=\"doAround\"/>-->\n        </aop:aspect>\n    </aop:config>\n\n\n</beans>\n```\n\n\n\n## AOP的源码流程分析\n\n对于任何的源码分析，都做到三步分析，就可以非常明确了：\n\n- 看给容器中注入了什么组件\n\n- 这个组件什么时候工作\n\n- 这个组件的功能是什么\n\n\n\n从 `@EnableAspectJAutoProxy ` 开始\n\n### @EnableAspectJAutoProxy 是什么，干啥用的\n\n结论先行：`@EnableAspectJAutoProxy`的作用就是为了给我们的容器中注入一个：`AnnotationAwareAspectJAutoProxyCreator`\n\n先看看这个注解类`EnableAspectJAutoProxy.java`的源码:\n\n```java\npackage org.springframework.context.annotation;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import({AspectJAutoProxyRegistrar.class})\npublic @interface EnableAspectJAutoProxy {\n    boolean proxyTargetClass() default false;\n\n    boolean exposeProxy() default false;\n}\n\n```\n\n- `EnableAspectJAutoProxy.java`类上有一个注解： `@Import({AspectJAutoProxyRegistrar.class})`： \n\n    - `@Import`这个注解给容器中导入了一个组件 `AspectJAutoProxyRegistrar`\n\n- `AspectJAutoProxyRegistrar`这个组件是干嘛呢？ 我们点进去看他的继承关系，源码如下：\n\n    - ```java\n        package org.springframework.context.annotation;\n        \n        import org.springframework.aop.config.AopConfigUtils;\n        import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n        import org.springframework.core.annotation.AnnotationAttributes;\n        import org.springframework.core.type.AnnotationMetadata;\n        \n        class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar {\n            AspectJAutoProxyRegistrar() {\n            }\n        \n            public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n                AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);\n                AnnotationAttributes enableAspectJAutoProxy = AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);\n                if (enableAspectJAutoProxy != null) {\n                    if (enableAspectJAutoProxy.getBoolean(\"proxyTargetClass\")) {\n                        AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);\n                    }\n        \n                    if (enableAspectJAutoProxy.getBoolean(\"exposeProxy\")) {\n                        AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);\n                    }\n                }\n            }\n        }\n        \n        ```\n\n    - `class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar ` 这个类继承自 `ImportBeanDefinitionRegistrar`\n\n    - 我们发现他是一个 `ImportBeanDefinitionRegistrar `，通过之前的学习，我们知道`ImportBeanDefinitionRegistrar`的作用是：\n        - 使用`@Import`的时候，可以指定`ImportBeanDefinationRegitrar.`\n        - 自定义一个类实现`ImportBeanDefinationRegistrar`接口,并实现`resisterBeanDefinatons`方法，在这个方法里面，可以指定需要注册的组件。\n        - 使用`ImportBeanDefinationRegistrar`,可以指定bean名，以及作用域之类的，比之前两种方式拥有更多的定制性\n        - 关于这些作用，看不懂，没关系，可以参考：\n\n    - 所以，我们要看看`AspectJAutoProxyRegistrar`这个到底给我们容器中注入了什么东西？\n        - `AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);` 通过这行代码，我们看到他给我们注册了一个`AspectJAnnotationAutoProxyCreator`如果需要的话。\n        - 一直点进去这个方法，最后会看到给我们的容器中注入了一个bean：\n        - 注入的bean的名字叫做：`org.springframework.aop.config.internalAutoProxyCreator`\n        - 注入的bena的实际对象是：`org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator`\n\n简单的说就是：EnableAspectJAutoProxy 使用了 @Import，@Import导入了一个AspectJAutoProxyRegistrar ，这个Register继承自ImportBeanDefinitionRegister，并实现了registerBeanDifinitions方法，向容器中注册了一个：AnnotationAwareAspectJAutoProxyCreator\n\n总结：`@EnableAspectJAutoProxy`的作用就是为了给我们的容器中注入一个：`AnnotationAwareAspectJAutoProxyCreator`\n\n以下是示意图（图中也有步骤说明）\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222170945180.png\" alt=\"image-20221222170945180\" style=\"zoom: 33%;\" />\n\n\n\n\n\n### AnnotationAwareAspectJAutoProxyCreator 是什么？干啥用的？\n\n- 我们看看这个类`AnnotationAwareAspectJAutoProxyCreator.java`的继承关系：\n    - class AnnotationAwareAspectJAutoProxyCreator extends AspectJAwareAdvisorAutoProxyCreator\n    - class AspectJAwareAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator\n    - class AbstractAdvisorAutoProxyCreator extends AbstractAutoProxyCreator\n    - class AbstractAutoProxyCreator extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware\n    - 到这里就到底了，我们发现了两个重要的接口：\n        - `SmartInstantiationAwareBeanPostProcessor`：是一个后置处理器xxxxBeanPostProcessor，我们知道在spirng中，后置处理器是一个非常重要的概念，他会在bean的初始化前后做一些工作。所以，我们要看这个`SmartInstantiationAwareBeanPostProcessor`到底做了什么，实现了我们的aop的强大功能\n        - `BeanFactoryAware`：实现了这个接口的bean，可以直接访问 Spring 容器，该bean被容器创建以后，它会拥有一个指向 Spring 容器（也就是BeanFactory）的引用，可以利用该bean根据传入参数动态获取被spring工厂加载的其他的所有的bean。 eg：这部分是IOC的内容，我们不扯那么多\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/znInKzNU3RP5vLmcaq7ij3QsxgXDADDfgxV76ZhS-58.png\" alt=\"znInKzNU3RP5vLmcaq7ij3QsxgXDADDfgxV76ZhS-58\" style=\"zoom: 25%;\" />\n\n\n\n- AnnotationAwareAspectJAutoProxyCreator 作为 xxxBeanPostProcessor 做了什么工作\n\n- AnnotationAwareAspectJAutoProxyCreator 作为 BeanFactoryAware 做了什么工作\n\n- 在分析上面两个问题之前，我们先来看看AnnotationAwareAspectJAutoProxyCreator是什么时候被创建的。\n\n- 在之前，我们知道@EnableAspectJAutoProxy的给我们的容器中注入一个：AnnotationAwareAspectJAutoProxyCreator\n\n- 同时，我们知道AnnotationAwareAspectJAutoProxyCreator的作用主要是作为一个后置处理器，在bean的创建前后做一些工作，以及实现了BeanFactoryAware接口，可以直接与spring容器进行操作。\n\n- 那么，AnnotationAwareAspectJAutoProxyCreator是什么时候被创建的呢？\n\n\n\n### AnnotationAwareAspectJAutoProxyCreator 是什么时候被创建的\n\n- 从程序的入口开始看，这里的入口是指我们的测试类，也就是下面这段代码\n\n```java\npublic class AOPTest {\n    @Test\n    public void testAop() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Calculator calculator = (Calculator) applicationContext.getBean(\"calculator\");\n        int div = calculator.div(2, 1);\n        System.out.println(div);\n    }\n}\n\n```\n\n- new AnnotationConfigApplicationContext(MainConfig.class)： 传入配置类，创建Spring容器\n\n- 点击进去构造方法，在创建容器的时候，有一个非常重要的方法叫做：refresh();\n\n- refresh()方式是整个IOC容器创建的关键，对于他的解释，看下面的说明，关于refresh()方法，在本文中不是重点，可以略过...\n\n```java\n@Override\npublic void refresh() throws BeansException, IllegalStateException {\n   // 来个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛\n   synchronized (this.startupShutdownMonitor) {\n\n      // 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符\n      prepareRefresh();\n\n      // 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，\n      // 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，\n      // 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-> beanDefinition 的 map)\n      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n      // 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean\n      // 这块待会会展开说\n      prepareBeanFactory(beanFactory);\n\n      try {\n         // 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，\n         // 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】\n\n         // 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化\n         // 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事\n         postProcessBeanFactory(beanFactory);\n         // 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法\n         invokeBeanFactoryPostProcessors(beanFactory);\n\n         // 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别\n         // 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization\n         // 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化\n         registerBeanPostProcessors(beanFactory);\n\n         // 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了\n         initMessageSource();\n\n         // 初始化当前 ApplicationContext 的事件广播器，这里也不展开了\n         initApplicationEventMulticaster();\n\n         // 从方法名就可以知道，典型的模板方法(钩子方法)，\n         // 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）\n         onRefresh();\n\n         // 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过\n         registerListeners();\n\n         // 重点，重点，重点\n         // 初始化所有的 singleton beans\n         //（lazy-init 的除外）\n         finishBeanFactoryInitialization(beanFactory);\n\n         // 最后，广播事件，ApplicationContext 初始化完成\n         finishRefresh();\n      }\n\n      catch (BeansException ex) {\n         if (logger.isWarnEnabled()) {\n            logger.warn(\"Exception encountered during context initialization - \" +\n                  \"cancelling refresh attempt: \" + ex);\n         }\n\n         // Destroy already created singletons to avoid dangling resources.\n         // 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源\n         destroyBeans();\n\n         // Reset 'active' flag.\n         cancelRefresh(ex);\n\n         // 把异常往外抛\n         throw ex;\n      }\n\n      finally {\n         // Reset common introspection caches in Spring's core, since we\n         // might not ever need metadata for singleton beans anymore...\n         resetCommonCaches();\n      }\n   }\n}\n```\n\n- 在refresh()方法中，调用了registerBeanPostProcessors(beanFactory);用来注册xxxBeanPostProcessor后置处理器。\n\n- 正如我们的标题：AnnotationAwareAspectJAutoProxyCreator类，他其实就是一个继承了SmartInstantiationAwareBeanPostProcessor的一个后置处理器。\n\n- 所以这个方法里面，其实就创建了我们的AnnotationAwareAspectJAutoProxyCreator类。\n\n  - 作者注：registerBeanPostProcessors(beanFactory)是用来注册xxxBeanPostProcessor的，但是我们的AnnotationAwareAspectJAutoProxyCreator不是以BeanPostProcessor结尾的，能创建它吗？\n\n  - 作者注：当然是能的，在这里，一开始没转过弯，我们要知道我们的AnnotationAwareAspectJAutoProxyCreator虽然不是BeanPostProcessor结尾的，但是他可是继承了xxxBeanPostProcessor的，所以他也是一个BeanPostProcessor。\n\n- 知道了registerBeanPostProcessors(beanFactory)是用来注册xxxBeanPostProcessor，所以我们知道我们的AnnotationAwareAspectJAutoProxyCreator类也是在这里创建的，那么我们进去看看。\n\n- 首先获取所有等待注册的xxxBeanPostProcessor的定义，注意这里只是定义！并不是真正的bean。：String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);\n\n- 怎么理解这里所说的“定义”呢？\n\n  - 就相当于我出门买东西，要买牙刷，牙膏，洗衣液，衣架. 我列了一个清单。\n\n  - 这个清单，是所有要买的东西的定义，但是它不是真正的东西！\n\n- 下一步，对所有的xxxBeanPostProcessor进行归类，并且按类分别生成Bean,这里就是生成真正的Bean了。\n\n- 归类，共分为三类：继承了PriorityOrdered的为一类，继承了Ordered的为一类，剩下的为一类。\n\n- 然后对这三类，分别进行注册。\n  - 优先注册实现了PriorityOrdered接口的BeanPostProcessor； \n\n  - 再给容器中注册实现了Ordered接口的BeanPostProcessor；\n\n  - 最后注册没实现优先级接口的BeanPostProcessor；\n\n- 所谓的注册，实际上就是创建BeanPostProcessor的具体Bean实例，放在容器里。\n\n- 现在，我们知道了，所谓的注册，实际上就是创建BeanPostProcessor的具体Bean实例，并且我们知道了在哪里注册我们的BeanPostProcessor。下面我们具体看看怎么注册的。\n\n- 在看怎么注册的之前，明确一点：在spring启动的时候，会注册很多xxxBeanPostProcessor，我们现在先不需要关注其他的，我们关注的是\n\n- bean 的定义为：InternalAutoProxyCreator\n\n- 创建的bean实例为：AnnonationAwareAspectJAutoProxyCreator\n\n- 主要是关注这个，其他的我们先不看\n\n- 之前我们说了，在refresh()方法中，会注册BeanPostProcessor，而且是按照分类进行注册的。\n\n- 下面这个图，是上面这部分逻辑的图示（图中有说明）\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222174926824.png\" alt=\"image-20221222174926824\" style=\"zoom: 67%;\" />\n\n\n\n- 我们的关注点：AnnontationAwareAspectJAutpProxyCreator是实现了了Ordered接口的，所以我们关注怎么注册实现了Ordered的接口的BeanPostProcessor\n- 主要是在源码：BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); 这一行，通过我们的bean定义和要获取的bean实例类型-->来获取我们的bean实例\n\n```java\n    // Next, register the BeanPostProcessors that implement Ordered.\n    List<BeanPostProcessor> orderedPostProcessors = new ArrayList<BeanPostProcessor>();\n    for (String ppName : orderedPostProcessorNames) {\n        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n        orderedPostProcessors.add(pp);\n        if (pp instanceof MergedBeanDefinitionPostProcessor) {\n            internalPostProcessors.add(pp);\n        }\n    }\n```\n\n- getBean() --调用了--> doGetBean()，doGetBean的主要逻辑如下\n\n```java\nprotected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException {\n    // 尝试从缓存中获取我们的目标Bean对象\n    Object sharedInstance = getSingleton(beanName);\n    if (sharedInstance != null && args == null) {\n        //获取到了，直接拿到目标bean对象\n        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n    }else {\n        // 缓存中获取不到，那么就去生成\n        // 生成之前会做一些检查\n            // Create bean instance. 开始生成目标bean\n            if (mbd.isSingleton()) {\n                //目标类是单例\n                sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {\n                    @Override\n                    public Object getObject() throws BeansException {\n                        try {\n                            return createBean(beanName, mbd, args);\n                        }catch (BeansException ex) {\n                            //异常\n                        }\n                    }\n                });\n                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n            }else if (mbd.isPrototype()) {\n                //目标类是多例--省略了\n                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n            }else {\n                //其他\n            }\n        }\n    }\n    // 检查并返回--省略了\n    return (T) bean;\n}\n```\n\n- 我们是第一次运行，缓存中肯定没有，所以肯定会去生成createBean()，我们进去createBean()看一下，createBean里面 --调用了--> doCreateBean()\n\n- 创建bean实例，都是在 doCreateBean() 中完成的，doCreateBean()主要完成了下面几个工作\n  - 创建bean实例，但是没有任何属性： instanceWrapper = createBeanInstance(beanName, mbd, args);\n\n  - 对bean进行属性复制：populateBean(beanName, mbd, instanceWrapper); \n  - 初始化bean：exposedObject = initializeBean(beanName, exposedObject, mbd); 这个初始化，才是重点中的重点\n\n- 返回初始化之后的bean，就是真真正正的bean了，也就是我们苦思冥想的：AnnotationAwareAspectJAutoProxyCreator的实例。\n\n\n\n- **初始化bean：exposedObject = initializeBean(beanName, exposedObject, mbd); 这个初始化，才是重点中的重点**\n\n- 我们来单独看看这部分重点内容，初始化bean里面会在bean的初始化之前和之后分别执行BeanPostProcessor\n\n- 处理Aware接口的方法回调：invokeAwareMethods(beanName, bean);\n\n- 只有实现了Aware接口的bean才会调用\n\n- 这里主要是做了一步：就是把BeanFactory交给当前的bean，换句话说：就是当前bean里面保存了一个对beanFactory的一个引用。\n\n- 应用后置处理器的postProcessBeforeInitialization（）：wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n\n- 执行自定义的初始化方法：invokeInitMethods(beanName, wrappedBean, mbd);\n\n- 这里所说的自定义的初始化方法，是我们自己配置的 init 方法，会在这里执行\n\n  - 什么是自己配置的init方法，就是下面这种，指定的 initMethod \n  -  > @Bean(initMethod=\"\",destoryMethod=\"\")\n  -  > <bean id=\"\", class=\"\", init-method=\"\", destory-method=\"\">\n\n- 执行后置处理器的postProcessAfterInitialization（）：wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n- 返回wrappedBean，就是我们的目标结果了。\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222175654720.png\" alt=\"image-20221222175654720\" style=\"zoom: 50%;\" />\n\n\n\n- 最后创建完之后，会将我们的BeanPostProcessor放在BeanFoctory中。beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext))\n  - 作者注：BeanPostProcessor也是一个Bean，既然是Bean，就要满足Bean的生成步骤，每一个Bean的生成都会判断是否有对应的BeanPostProcessor需要执行！这也是为什么我们的 AnnotationAwareAspectJAutoProxyCreator明明是一个BeanPostProcessor，为什么还要执行applyBeanPostProcessorsBeforeInitialization和applyBeanPostProcessorsAfterInitialization\n\n\n- 总结：至此，我们本小节的标题：AnnotationAwareAspectJAutoProxyCreator 是什么时候被创建的呢？就已经完成了。我们总体回顾一下\n  - 首先是，我们知道@EnableAspectJAutoProxy的给我们的容器中注入一个：AnnotationAwareAspectJAutoProxyCreator\n  - 同时，我们知道AnnotationAwareAspectJAutoProxyCreator的作用主要是作为一个后置处理器，在bean的创建前后做一些工作，以及实现了BeanFactoryAware接口，可以直接与spring容器进行操作。\n  - 那么，我们现在又知道了AnnotationAwareAspectJAutoProxyCreator的是什么时候被创建的，怎么被创建的，以及创建完之后是加入到了BeanFacory中。\n- 下面，我们就要看看，这个 AnnotationAwareAspectJAutoProxyCreator 是怎么具体影响我们的业务的，是怎么把aop功能添加进来的。\n- 在看这个问题之前，我们要先看一下，我们具体的业务类是怎么创建的。包括：MainConfig, LogAspect, Calculator这三个类\n- MainConfig是一个配置类\n- LogAspect是一个切面类\n- Calculator是一个普通类\n\n\n\n### 具体的业务类(MainConfig, LogAspect, Calculator)是怎么创建的\n\n\n\n- 首先我们明确一点，在spirng中，所有bean的生成走的代码都是同一个，只不过根据接口的不同，走的逻辑不同\n- 对于这三个类bean的生成，因为三个类所代表的含义都是不同的，所以他们分别生成的逻辑是不同的。\n- 在区分这三个类的生成逻辑之前，我们总体看一下，bean的通用生成规则：\n- 对于一个Bean来说，不管这个Bean是BeanPostProcessor，还是config类，还是切面类，或者是普通类，在spirng中，都是通过getBean()作为统一入口\n- 比如对于前面说的BeanPostProcessor，他的创建入口在：\n  - 开始：refresh() \n  - 紧接着：registerBeanPostProcessors(beanFactory);\n  - 紧接着：registerBeanPostProcessors(beanFactory, this);\n  - 这一行调用了getBean()：BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);\n\n- 比如我们的普通Bean 的创建\n  - 开始：refresh() \n  - 紧接着：finishBeanFactoryInitialization(beanFactory);\n  - 紧接着：beanFactory.preInstantiateSingletons();\n  - 最后调用了 getBean()：getBean(beanName); \n\n- 所以，我们从getBean开始，看一下spring是怎么创建Bean的，以及怎么兼容所有的bean类型的（BeanPostProcessor，Config，切面类等）\n- 下面的代码是getBean的主要逻辑流程，我是把所有的逻辑汇总在了一起，实际的代码中，是涉及到多个类的多个方法，比较复杂。我们只看主逻辑。\n\n```java\n\n//遍历所有的bean定义\nfor(String beanName : 所有的BeanName){\n    getBean(){\n        doGetBean(){\n            // 尝试从缓存中获取我们的目标Bean对象\n            Object sharedInstance = getSingleton(beanName);\n            if (sharedInstance != null && args == null) {\n                //获取到了，直接拿到目标bean对象\n                bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n            }else {\n                // 缓存中获取不到，那么就去生成\n                // 生成之前会做一些检查\n                // Create bean instance. 开始生成目标bean\n                if (mbd.isSingleton()) {\n                    //生成单例bean\n                    createBean(){\n\n                        // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.\n                        // 给 BeanPostProcessors 一个机会：返回代理类替代目标类(这里的代理类并不是说从缓存中取出代理类，而是用另一种方式生成代理类)\n                        resolveBeforeInstantiation(){\n                            1.applyBeanPostProcessorsBeforeInstantiation(){\n                                for (BeanPostProcessor bp : getBeanPostProcessors()) {\n                                    if (bp instanceof InstantiationAwareBeanPostProcessor) {\n                                        postProcessBeforeInstantiation(){\n                                            //我们可以看到，这里也有创建代理的逻辑，以至于很多人会搞错。\n                                            //确实，这里是有可能创建代理的，但前提是对于相应的 bean 我们有自定义的 TargetSource 实现，\n                                            //进到 getCustomTargetSource(...) 方法就清楚了，我们需要配置一个 customTargetSourceCreators，它是一个 TargetSourceCreator 数组。\n                                            //这里就不再展开说 TargetSource 了\n                                        }\n                                    }\n                                }\n                            }\n\n                            2.如果before返回的bean是个null，after不会执行\n                            3.applyBeanPostProcessorsAfterInitialization(){\n                                for (BeanPostProcessor bp : getBeanPostProcessors()) {\n                                    postProcessAfterInitialization    \n                                }\n                            }\n                        }\n                        //开始创建Bean\n                        doCreateBean(){\n                            doCreateBean(){\n                                //生成bean对象\n                                createBeanInstance(beanName, mbd, args);\n                                //给bean对象赋属性值\n                                populateBean(beanName, mbd, instanceWrapper);\n                                //初始化bean对象\n                                initializeBean(){\n                                    //执行后置处理器\n                                    1.applyBeanPostProcessorsBeforeInitialization(){\n                                        postProcessBeforeInitialization\n                                    }\n                                    2.invokeInitMethods\n                                    3.applyBeanPostProcessorsAfterInitialization(){\n                                        postProcessAfterInitialization(){\n                                            wrapIfNecessary(){\n                                                //Create proxy if we have advice.\n                                                //如果有切面的话，就创建代理\n                                                //Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);\n                                                createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                    }\n                    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n                }else if (mbd.isPrototype()) {\n                    //生成多例bean--省略了\n                    bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n                }else {\n                    //其他--省略\n                }\n            }\n        }\n        // 检查并返回--省略了\n        return (T) bean;\n    }\n}\n\n```\n\n- 要想把上面那部分代码看懂，至少需要debug调试十几遍，反正我是不知道调试了几十遍，才看懂的。现在对上面的代码几个注意点说下：\n\n- applyBeanPostProcessorsBeforeInstantiation 和 applyBeanPostProcessorsBeforeInitialization 这是两个不一样的方法,一定不要看错，否则会很迷惑\n  - 一个结尾是：Instantiation（实例化）\n  - 一个结尾是：Initialization（初始）\n\n- 下面我们就来看一下，我们关注的三个类的具体创建步骤，结合上面的代码流程，通过三个具体类的创建，来温故知新一下。\n\n\n\n\n\n#### MainConfig\n\n- 我们从refresh()-->finishBeanFactoryInitialization()-->preInstantiateSingletons()-->这些就不说了，我们从遍历Bean定义开始\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/hNUBsLKhDYiqy_0t9sgVmMs6XhnbS9UO2ETVGIxlHBE.png\" alt=\"hNUBsLKhDYiqy_0t9sgVmMs6XhnbS9UO2ETVGIxlHBE\" style=\"zoom: 50%;\" />\n\n\n\n#### LogAspect\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/n64jjFWSA8kCbc9AgoYEMtaVPtku_Nu8LSTDjyp8QsU.png\" alt=\"n64jjFWSA8kCbc9AgoYEMtaVPtku_Nu8LSTDjyp8QsU\" style=\"zoom: 80%;\" />\n\n\n\n#### Calculator\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/WkX2HY8q-7QE94zE6_AGpMWC9AxxIOOW0M6DZ3mCDCA.png\" alt=\"WkX2HY8q-7QE94zE6_AGpMWC9AxxIOOW0M6DZ3mCDCA\" style=\"zoom:80%;\" />\n\n\n\n- 总结：通过以上的分析，我们收获了什么呢？\n\n- 我们知道了BeanPostProcessor有两种，一种是在创建Bean之前给一个机会返回代理，一种是在创建bean之后进行一些操作。\n\n- 前者是继承了SmartInstantiationAwareBeanPostProcessor的才有的功能。后者是所有的BeanPostProcessor都有的功能（包括SmartInstantiationAwareBeanPostProcessor）。\n\n- 同时，我们知道了三个类的具体创建流程：mainConfig，LogAspect，Calculator的创建流程。\n\n- 最后，我们仍然有一个疑问：\n\n- @EnableAspectJAutoProxy给我们的容器中注入一个：AnnotationAwareAspectJAutoProxyCreator\n\n- AnnotationAwareAspectJAutoProxyCreator是一个SmartInstantiationAwareBeanPostProcessor，我们目前只知道他是在bean创建之前给一个返回代理的机会。\n\n- 但是同时我们知道，我们生成的所有这些类（仅限于当前这个demo里的所有类），貌似都没有把握这个机会，在bean创建之前生成了代理。\n\n- 那么，这么AnnotationAwareAspectJAutoProxyCreator到底是有什么作用呢？？我还不知道！！！\n\n- 除了上面那个问题，我们不知道之外，接下来，再来具体看看我们的代理对象，就是Calculator代理对象具体是怎么生成！\n\n\n\n### Calculator代理对象具体是怎么生成的？\n\n\n\n- 话接上回，我们知道了spinrg的aop会对需要增强的bean的创建代理对象。在这里，被切的Calculator类就是一个增强的类，所以spirng会对他创建代理。\n\n- 同样的，我们知道，spring在对切面增强类创建代理，是在wrapIfNessary()这个方法里面创建代理的。那么我们就来看看是什么创建的，切面方法是怎么注入进来的。\n\n- 首先是获取当前bean可用的所有通知方法，Object[] specificInterceptors\n\n- 找到候选的所有的增强器（找哪些通知方法是需要切入当前bean方法的）\n\n- 获取到能在bean使用的增强器。\n\n- 给增强器排序\n\n- 这个获取当前类的所有通知方法的代码，就不看了，我们只需要知道运行完这个方法之后，就会拿到当前类的所有通知方法就可以啦。\n\n- 然后，当我们获取到当前类的所有通知方法之后，保存当前bean在advisedBeans中，并设置为true，表示它是一个增强bean\n\n- 紧接着就是创建代理：Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));\n\n- 将代理保存到proxyFactory，然后创建代理对象：代理有两种，有Spring自动决定创建哪一个代理\n\n- JdkDynamicAopProxy(config);jdk动态代理；\n\n- ObjenesisCglibAopProxy(config);cglib的动态代理；\n\n- 代理创建成功后，给容器中返回当前组件使用cglib增强了的代理对象；\n\n- 以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法。\n\n- 这部分我们不深究究竟是怎么获取通知方法的，已经具体是怎么选择创建什么代理的，以及代理最终是怎么创建的。所以这里就不贴图了。\n\n- 总结：\n\n- 我们知道spring的aop会对需要增强的bean的创建代理对象\n\n- 需要增强的bean会被保存在advisedBeans中，创建后的代理对象也会保存在proxyFactory中，最终创建的proxy代理对象会返回，并保存在IOC容器中，供以后使用。\n\n- 那么，接下来，我们就看看，当我们调用目标方法的时候，代理对象是怎么具体执行的？\n\n\n\n### 调用目标方法，代理对象是怎么执行的？\n\n- 通过以上所有的步骤，我们现在终于走到了最后一步，在开始执行目标方法之前，我们先来简单的整体回顾一下。\n\n- @EnableAspectJAutoProxy 开启AOP功能，并给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator\n\n- AnnotationAwareAspectJAutoProxyCreator这个组件通过refresh()中的registerBeanPostProcessors(beanFactory);这个方法被注册进来\n\n- 然后开始生成所有的bean（包括我们的mainConfig，LogAspect, Calculator）等的创建，在这类的创建步骤中，之前注册的组件：AnnotationAwareAspectJAutoProxyCreator会产生作用\n\n- 什么作用呢？就是在bean的创建之前执行BeanPostProcessor，在before中给一个返回代理对象的机会。\n\n- 如果没有返回代理对象，那么就创建bean，创建bean之后，会再次执行BeanPostProcessor，在after中会判断是否是增强bean，会是需要创建代理\n\n- 如果不需要创建代理，那么就直接返回bean（比如MainConfig，LogAspect这两个就不需要创建代理）\n\n- 如果需要创建代理，那么就获取所有的通知方法，然后spirng决定创建cglib代理还是jdk代理，并返回代理对象。\n\n- 最后，就到了我们这一小节的主题：代理对象是怎么替代目标方法执行的？\n\n- 代理对象创建成功之后，执行目标方法，其实就是通过代理对象来执行目标方法了。\n\n- 执行目标的方法的入口是在我们的测试类中\n\n```java\npublic class AOPTest {\n    @Test\n    public void testAop() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Calculator calculator = (Calculator) applicationContext.getBean(\"calculator\");\n        //这里是是入口\n        int div = calculator.div(2, 1);\n        System.out.println(div);\n    }\n}\n\n```\n\n- 意思就是当我们执行int div = calculator.div(2, 1);，实际上就是我们的代理对象执行的。所以他会进入到代理对象的执行流程里。\n\n- 下一步，就是进入到代理对象的执行，执行目标方法进入了CglibAopProxy.intercept()方法中\n\n- intercept()方法的作用就是在目标方法执行前后进行拦截，这也是我们aop代理对象的核心，就是通过拦截器执行切面。\n\n- 在intercept()方法中主要做了两件事：\n\n- getInterceptorsAndDynamicInterceptionAdvice() 获取所有的拦截器链\n\n- proceed() 执行拦截器链\n\n- 当拦截器链执行完之后，所有的切面也就执行完了。同时会进行返回 return retVal;这个retVal就是我们目标方法的返回值。\n\n- 这就是调用目标方法，代理对象的大致执行流程。\n\n```java\n@Override\npublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n    //一些变量的定义\n    try {\n        //获取拦截器链\n        List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\n        // 对拦截器链进行检查\n        if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) {\n            //如果拦截器链为空，就直接执行目标方法\n            Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);\n            retVal = methodProxy.invoke(target, argsToUse);\n        }else {\n            // 否则就执行拦截器链\n            retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n        }\n        //最后得到返回值，进行返回\n        retVal = processReturnType(proxy, target, method, retVal);\n        return retVal;\n    }finally {\n        //一些处理\n    }\n}\n\n```\n\n- 总结：我们知道了代理对象执行的大致流程，无非是两个关键的步骤：\n\n- 拦截器链的获取\n\n- 拦截器链的执行\n\n### 目标方法执行之拦截器链的获取\n\n\n\n- 通过上面我们知道，目标方法的执行，其实就是代理对象的执行。代理对象在之前之前， 会获取到所有的拦截器（这里的拦截器，实际上就是我们之前说的通知方法，也叫切面方法）\n\n- 那么，现在我们来看一看，拦截器链是怎么获取的。\n\n- 首先，进入拦截器链的获取方法中： List chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\n- 会先从缓存中拿一下，缓存中没有的话，再去获取拦截器链。会将获取的结果放在缓存中，以便于下次可以直接使用\n\n- 获取拦截器链：this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(this, method, targetClass)\n\n- 获取拦截器链的步骤比较简单，我们直接通过简化后的代码进行查看（省略了很多代码，建议跟着源码看）\n\n```java\npublic List<Object> getInterceptorsAndDynamicInterceptionAdvice() {\n    // 定义一个List，从来存放所有的拦截器链：看看人家List的定义，会传入list的大小，不浪费一点内存空间，真好！\n    List<Object> interceptorList = new ArrayList<Object>(config.getAdvisors().length);\n    //遍历所有的Advisors，Advisors里面都是我们的通知方式，通过断点我们看到。包含一个系统默认的通知方法和我们定义的所有拦截方法\n    for (Advisor advisor : config.getAdvisors()) {\n        //会根据不同的类型，分别走不同的逻辑，但是都会调用同一个方法，就是getInterceptors()\n        if (advisor instanceof PointcutAdvisor) {\n            //从advisor中获取MInterceptor\n            MethodInterceptor[] interceptors = registry.getInterceptors(advisor);\n        }else if (advisor instanceof IntroductionAdvisor) {\n            Interceptor[] interceptors = registry.getInterceptors(advisor);\n        }else {\n            Interceptor[] interceptors = registry.getInterceptors(advisor);\n        }\n    }\n    //最后返回所有的拦截器\n    return interceptorList;\n}\n```\n\n- 明白了拦截器链的获取流程之后，我们在进入看看怎么从从advisor中获取MInterceptor，这部分代码更简单，直接贴上源码\n\n```java\n@Override\npublic MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException {\n    //创建list用于保存\n    List<MethodInterceptor> interceptors = new ArrayList<MethodInterceptor>(3);\n    //获取具体的通知方法，advice其实就是我们具体的通知方法。 \n    //advice和advisor的作用是：advisor是一个大集合，里面包含了很多很多东西，advice就是advisor包含的内容之一，就是具体的通知方法\n    Advice advice = advisor.getAdvice();\n    //然后对通知方法进行判断，我们知道通知方法有很多种：前置通知，后置通知等等\n    //如果当前通知方法是MethodInterceptor类型的，就直接放进去\n    if (advice instanceof MethodInterceptor) {\n        interceptors.add((MethodInterceptor) advice);\n    }\n    //如果不是MethodInterceptor类型的，就会通过一个适配器，将通知方法转换成MethodInterceptor类型的。 \n    //可以进去看看这个适配器，其实就是装饰模式，进行了一次包装，包装成MethodInterceotor\n    for (AdvisorAdapter adapter : this.adapters) {\n        if (adapter.supportsAdvice(advice)) {\n            interceptors.add(adapter.getInterceptor(advisor));\n        }\n    }\n    //最后进行一下校验，然后返回\n    if (interceptors.isEmpty()) {\n        throw new UnknownAdviceTypeException(advisor.getAdvice());\n    }\n    return interceptors.toArray(new MethodInterceptor[interceptors.size()]);\n}\n```\n\n\n\n- 执行完以上的步骤，我们就获取到了当前目标类的所有的拦截器。下一步就是执行拦截器了。\n\n\n\n### 目标方法执行之拦截器链的执行\n\n- 到这一步，才是我们切面的真真正正的执行，前面做的都是准备。什么是真真正正的执行呢？就是我们可以在控制台，看到输出。\n\n- 明确一个概念：所谓的spring的aop，就是一个代理类，这个代理类内有很多拦截器，在真正的方法执行前后，会执行这些拦截器，这就是aop的本质。\n\n- 好了，下面我们看看拦截器链的执行吧。这是重点！！\n\n- retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n\n- 其中proceed()方法是重点，他是一个递归调用的方法。\n\n- 在方法的一开始，保存了一个变量，这个变量从-1开始，每一次process()的执行，都会++，直到所有的拦截器都执行完了，才会开始返回。\n\n- 我们直接看源码，这个方法并不是很长。\n\n```java\n@Override\npublic Object proceed() throws Throwable {\n    //    这个变量从-1开始执行，直到所有的拦截器全都执行完\n    if (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) {\n        return invokeJoinpoint();\n    }\n    //变量每次执行++\n    Object interceptorOrInterceptionAdvice = this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);\n    if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) {\n        // Evaluate dynamic method matcher here: static part will already have\n        // been evaluated and found to match.\n        InterceptorAndDynamicMethodMatcher dm =\n                (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;\n        if (dm.methodMatcher.matches(this.method, this.targetClass, this.arguments)) {\n            return dm.interceptor.invoke(this);\n        }\n        else {\n            // Dynamic matching failed.\n            // Skip this interceptor and invoke the next in the chain.\n            return proceed();\n        }\n    }\n    else {\n        // It's an interceptor, so we just invoke it: The pointcut will have\n        // been evaluated statically before this object was constructed.\n        //这里是拦截器链的递归调用，注意传入的是this，也就是当前的MethodInvocation，因为invoke()方法中会用到\n        return ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);\n    }\n}\n\n\n\n@Override\npublic Object invoke(MethodInvocation mi) throws Throwable {\n    //拦截器链，在invoke的时候，会进入到这个方法\n    //注意注意注意，每一次invoke的时候，其实进入的是不一样的方法。 注意自己打断点看一下，所以，我这里把其他的都删掉了。\n    //只留了一个mi.proceed()方法，因为每次进入的都是不同的类的invoke()方法，但是都会调用proceed()\n    //也可以看看，我提供的方法调用栈信息图\n    return mi.proceed();\n}\n```\n\n\n\n- 我之前说，proceed()是递归调用，其实是不对的！他其实不能算作递归调用。\n\n- 因为他是一个MethodInvocation，内部包含了其他的MethodInvocation，内部的MethodInvocation又包含了其他的MethodInvocation。\n\n- MethodInvocation调用proceed()，并不断压栈，直到所有的MethodInvocation调用完了。\n\n- 然后从最最内部的MethodInvocation开始，一个一个返回。直到返回到最上层的MethonInvocation。\n\n- proceed调用栈图\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221222183003694.png\" alt=\"image-20221222183003694\" style=\"zoom:80%;\" />\n\n\n\n- 一些注意点：\n\n- 注意点1：around拦截器的执行时机，要了解，是在压栈之后，立即执行，然后我们知道around里面，调用了proceed，然后会再次将around进行压栈。这个一会再说！\n\n- 注意点2：压栈的顺序，这个一会和注意点1一起说。\n\n- 注意点3：每一个拦截器，分别都执行了什么，比如前置通知压栈后，直接开始调用，然后前置通知调用玩，直接调用目标方法。比如后置通知里有一个finally，表示不管是否发生异常，后置通知都执行。比如返回通知，会直接throw异常，throw异常之后，返回通知就不在执行，交给异常通知了。等等之类的。\n\n- 我们来总体看一下调用流程。并解决注意点1和2\n\n\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/4OTL2oICo5fo_CqT86SyAdIp1Txk-x__mt7r3e0KDto.png\" alt=\"4OTL2oICo5fo_CqT86SyAdIp1Txk-x__mt7r3e0KDto\" style=\"zoom:80%;\" />\n\n\n\n### 总结\n\n *     1）、@EnableAspectJAutoProxy 开启AOP功能\n *     2）、@EnableAspectJAutoProxy 会给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator\n *     3）、AnnotationAwareAspectJAutoProxyCreator是一个后置处理器；\n *     4）、容器的创建流程：\n       *     1）、registerBeanPostProcessors（）注册后置处理器；创建AnnotationAwareAspectJAutoProxyCreator对象\n       *     2）、finishBeanFactoryInitialization（）初始化剩下的单实例bean\n             *     1）、创建业务逻辑组件和切面组件\n             *     2）、AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程\n             *     3）、组件创建完之后，判断组件是否需要增强\n                   *     是：切面的通知方法，包装成增强器（Advisor）;给业务逻辑组件创建一个代理对象（cglib）；\n *     5）、执行目标方法：\n       *     1）、代理对象执行目标方法\n       *     2）、CglibAopProxy.intercept()；\n             *     1）、得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）\n             *     2）、利用拦截器的链式机制，依次进入每一个拦截器进行执行；\n             *     3）、效果：\n                   *     正常执行：环绕通知开始-》前置通知-》目标方法-》环绕通知结束-》后置通知-》返回通知-》结束\n                   *     出现异常：环绕通知开始-》前置通知-》目标方法-》环绕通知结束-》后置通知-》异常通知-》结束\n\n\n\n## 记录一次AOP不生效的排查心路\n\n结论先行：\n\n- AOP生效的条件就是，当调用`目标类`的`目标方法`的时候，实际上是由`目标类的代理对象`调用`目标方法`的，切面会生效\n- 在一个类内部方法调用的时候，切面是不生效的。\n\n\n\n### 业务场景\n\n要给客户展示出各个维度的指标数据，计算的方法都是一样的，只是源数据的结构不一样，所以\n\n- 计算的方法统一抽象到抽象父类中\n- 不同的指标针对不同的源数据，处理成统一结构，然后调用父类中的计算方法统一返回\n- 很显然，这是策略模式\n\n假设我们有指标A，指标B要展示给客户；\n\n因为在测试环境数据不好造，所以我想到了使用AOP进行MOCK\n\n具体的代码见下面\n\n\n\n### 代码结构\n\n#### 结构图\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223144223033.png\" alt=\"image-20221223144223033\" style=\"zoom:80%;\" />\n\n#### 业务代码\n\n##### 抽象父类：AbstractIndicatorStrategy\n\n```java\n\npublic abstract class AbstractIndicatorStrategy {\n\n    @PostConstruct\n    protected abstract void init();\n\n\n    public String process(){\n        String data = getData();\n        return calculate(data);\n    }\n\n    public String calculate(String data){\n        return data+\" = 666\";\n    }\n\n    public abstract String getData();\n\n}\n\n```\n\n\n\n##### 策略类A：IndicatorAStrategyImpl\n\n```java\n@Component\npublic class IndicatorAStrategyImpl extends AbstractIndicatorStrategy {\n    @Override\n    protected void init() {\n        IndicatorStrategyManager.register(\"INDICATOR_A\",this);\n    }\n\n    @Override\n    public String getData() {\n        return \"indicator_a_data\";\n    }\n\n}\n```\n\n\n\n##### 策略类B：IndicatorBStrategyImpl\n\n```java\n\n@Component\npublic class IndicatorBStrategyImpl extends AbstractIndicatorStrategy {\n\n    @Override\n    protected void init() {\n        IndicatorStrategyManager.register(\"INDICATOR_B\",this);\n    }\n\n    @Override\n    public String getData() {\n        return \"indicator_b_data\";\n    }\n\n}\n```\n\n\n\n##### 策略管理类：IndicatorStrategyManager\n\n```java\n\npublic class IndicatorStrategyManager {\n\n    private static Map<String, AbstractIndicatorStrategy> maps = new HashMap<>();\n\n\n    public static void register(String strategyCode, AbstractIndicatorStrategy metricStrategy) {\n        maps.put(strategyCode, metricStrategy);\n    }\n\n    public static AbstractIndicatorStrategy getStrategy(String strategyCode) {\n        return maps.get(strategyCode);\n    }\n\n}\n\n```\n\n\n\n##### 客户端\n\n```java\n//测试策略A\nString indicatorAResult = IndicatorStrategyManager.getStrategy(\"INDICATOR_A\").process();\n//测试策略B\nString indicatorBResult = IndicatorStrategyManager.getStrategy(\"INDICATOR_B\").process();\n```\n\n\n\n以上是业务部分的相关代码，那么AOP是在哪里使用的呢，看下面\n\n\n\n#### AOP代码\n\n上面提到到，我希望通过切面的方式，mock掉`calculate`这个方法\n\n所以我创建了一个切面类；添加了`@Aspect`注解，并且在springboot的启动类上添加了`@EnableAspectJAutoProxy`注解\n\n```java\n\n@Slf4j\n@Aspect\n@Component\npublic class MockAspect {\n\n    @Value(value = \"${remote.mock.indicator:CLOSE}\")\n    private String mockOpen;\n\n    /**\n     * mock calculate\n     */\n    @Pointcut(\"execution(* com.sf.fw.nas.manager.strategy.base.AbstractIndicatorStrategy.calculate(..))\")\n    public void calculate() {}\n\n    /**\n     * 计算指标\n     */\n    @Around(\"calculate()\")\n    public Object aroundCalculate(ProceedingJoinPoint joinPoint) throws Throwable {\n        if (\"OPEN\".equals(mockOpen)) {\n            Object[] args = joinPoint.getArgs();\n            String data = (String) args[0];\n            return data + \" = mock_data\";\n        }\n        return joinPoint.proceed();\n    }\n\n}\n\n```\n\n\n\n```java\n\n@EnableFeignClients(\"com.xxx.remote\")\n@EnableTransactionManagement\n@MapperScan(\"com.xxx.mapper\")\n@SpringBootApplication(exclude = {DruidDataSourceAutoConfigure.class, DataSourceAutoConfiguration.class})\n@EnableAspectJAutoProxy \npublic class AppApplication {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication app = new SpringApplication(AppApplication.class);\n\t\tapp.setBannerMode(Banner.Mode.OFF);\n\t\tapp.run(args);\n\t}\n}\n```\n\n\n\n\n\n### 不生效的场景\n\n最后我们运行代码，发现，我们的切面，压根没有进来\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223143934745.png\" alt=\"image-20221223143934745\" style=\"zoom:80%;\" />\n\n\n\n\n\n### 排查思路\n\n#### 第一次排查：解决了切面没有切对方法的问题（其实不是）\n\n在这一次的排查过程中，我以为是因为我的切面切得是抽象父类的方法，但是我实际调用的是策略子类，方法可能切不到。\n\n所以我修改了一下切面的 execution 表达式；\n\n由原来的：\n\n```java\n@Pointcut(\"execution(* com.sf.fw.nas.manager.strategy.base.AbstractIndicatorStrategy.calculate(..))\")\n```\n\n改成了：\n\n```java\n@Pointcut(\"execution(* com.sf.fw.nas.manager.strategy.*.*.calculate(..))\")\n```\n\n含义是：切在`com.sf.fw.nas.manager.strategy`包和所有子包里的任意类的`calculate`方法的执行\n\n如果看不懂这个表达式的，可以看看：[execution表达式](#execution表达式)\n\n\n\n结论：\n\n切面依旧没有生效。所以说：不是这个问题导致的。\n\n题外话：其实不是 这个问题，最终经过所有的排查思路之后，找到问题并解决之后，发现，即使切的是父类的方法，还是能进去切面的。 \n\n\n\n\n\n#### 第二次排查：解决了调用类不是代理类的问题（关键）\n\n然后我又复习了一遍，AOP到底是什么原理。 [AOP源码流程大致分析](#AOP源码流程大致分析)\n\n了解到：\n\nAOP的实现原理，其实就是动态代理，spring会对切面切到的目标类，生成代理类。\n\n然后执行目标类的目标方法的时候，其实是由代理类来执行的。\n\n这就是AOP的原理。\n\n\n\n了解了上面的步骤之后，我们来验证一下，看看调用目标方法的类是不是代理类呢？\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223150216763.png\" alt=\"image-20221223150216763\" style=\"zoom:80%;\" />\n\n\n\n果不其然，调用目标方法的类，竟然不是代理类；这样AOP肯定是不会生效的。\n\n那么问题来了？\n\n为什么不是代理类呢？\n\n- 是我的切面配置有错误吗？`@Aspect`和@`EnableAspectJAutoProxy` 这两注解没生效吗？\n- 还是其他的配置有问题呢？\n- 还是别的什么问题呢？\n\n我现在有点迷。\n\n\n\n于是我又复习了一下AOP的原理，我要看一下，这个代理类是怎么生成的？为什么我的类不是代理类。[Calculator代理对象具体是怎么生成的？](#Calculator代理对象具体是怎么生成的？)\n\n经过复习，了解到，在spring中，java类分为几种：\n\n- 有BeanPostProcessor，是一个很重要的概念，用来实现spring的很多强大的功能\n- 有普通的类：这里所说的普通的类包括：切面类，Config类，业务类，其实都算是普通类\n\n那么这些类是怎么生成的？\n\n- 在spring的refresh方法中，有两个方法叫做：\n  - registerBeanPostProcessors：这个是用来注册 BeanPostProcessor 的\n  - finishBeanFactoryInitialization：这个就是用来创建生成普通类的。\n- 所以我们的代理对象，正常应该在 finishBeanFactoryInitialization 这个方法中被生成。\n\n然后我们继续了解 finishBeanFactoryInitialization 这个方法\n\n- preInstantiateSingletons：开始实例化单例bean，调用 getBean\n- getBean：获取bean，调用 doGetBean\n- doGetBean：获取bean，会先从缓存拿，拿不到就调用：createBean\n- createBean：创建bean，调用 doCreateBean\n- doCreateBean：开始真正的创建bean，会调用：createBeanInstance，populateBean，initializeBean\n- createBeanInstance 创建bean，populateBean 给bean赋值，initializeBean 初始化bean， 会调用 applyBeanPostProcessorsAfterInitialization\n- applyBeanPostProcessorsAfterInitialization：应用BeanPostProcessor增强bean\n- postProcessAfterInitialization：会找到很多BeanPostProcessor，循环调用BeanPostProcessor的这个方法进行增强\n- AbstractAutoProxyCreator：AbstractAutoProxyCreator是AOP用来增强类的，进入到这个类的postProcessAfterInitialization方法中，会调用：wrapIfNecessary\n- wrapIfNecessary：开始对类进行代理\n- createProxy：真正的创建代理类\n\n好了，了解了以上的流程之后，我们进入到spring的源码中，打上断点，验证：我们的类到底有没有生成代理类？\n\n\n\n打上断点，开始验证：\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223152614060.png\" alt=\"image-20221223152614060\" style=\"zoom:80%;\" />\n\n\n\n然后发现，断点进来了，而且生成了代理类，说明配置是没有问题的。\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223152838510.png\" alt=\"image-20221223152838510\" style=\"zoom:80%;\" />\n\n\n\n既然配置没有问题，那就说明我们的代码有问题。\n\n代理类生成了，但是我们没有获取到代理类，然后我们思考，获取策略类的时候，是从`IndicatorStrategyManager`中获取的。\n\n也就是说，从`IndicatorStrategyManager`中获取的类不是代理类。那么为什么呢？\n\n这个时候去看我们的代码，发现我们在往`IndicatorStrategyManager`注册bean的时候，用的是下面这种方式：\n\n```java\n    @Override\n    protected void init() {\n        IndicatorStrategyManager.register(\"INDICATOR_A\",this);\n    }\n```\n\n我们往策略管理类中注册的是`this`\n\n- this 是什么，this是当前这个bean，不是从spring容器中拿到的bean\n- 所以，它当然不是 代理对象啦。\n\n既然找到了问题，就好解决了。我们把 this 改成 从spring容器中获取bean\n\n```java\n@Component\npublic class IndicatorAStrategyImpl extends AbstractIndicatorStrategy {\n    @Override\n    protected void init() {\n        IndicatorStrategyManager.register(\"INDICATOR_A\",\n            ApplicationContextProvider.getBean(IndicatorAStrategyImpl.class));\n    }\n\n    @Override\n    public String getData() {\n        return \"indicator_a_data\";\n    }\n\n}\n```\n\n其中使用到的`ApplicationContextProvider`这个类是自己写的一个工具类。代码如下\n\n```java\n\n@Component\npublic class ApplicationContextProvider implements ApplicationContextAware, BeanPostProcessor {\n    /**\n     * 上下文对象实例\n     */\n    private static ApplicationContext applicationContext;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        ApplicationContextProvider.applicationContext = applicationContext;\n    }\n\n    /**\n     * 获取applicationContext\n     */\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    /**\n     * 通过class获取Bean.\n     */\n    public static <T> T getBean(Class<T> clazz) {\n        try {\n            return getApplicationContext().getBean(clazz);\n        } catch (NoSuchBeanDefinitionException e) {\n            return null;\n        }\n    }\n\n    /**\n     * 通过name,以及Clazz返回指定的Bean\n     */\n    public static <T> T getBean(String name, Class<T> clazz) {\n        try {\n            return getApplicationContext().getBean(name, clazz);\n        } catch (NoSuchBeanDefinitionException e) {\n            return null;\n        }\n    }\n}\n```\n\n\n\n好了，至此，我们在测试一波：\n\n喜大普奔，现在我们获取到的对象就是我们的代理类啦。\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223154857074.png\" alt=\"image-20221223154857074\" style=\"zoom:80%;\" />\n\n但是很不幸的是，切面仍然没有生效。\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223155053663.png\" alt=\"image-20221223155053663\" style=\"zoom:80%;\" />\n\n\n\n我又迷惑了，为什么呢？ 接着往下看\n\n\n\n#### 第三次排查：找到了cglib内部调用的问题（未解决）\n\n到这里，我已经有点晕了，为什么我的AOP还是不生效呢？\n\n再次回想：AOP生效的条件就是，当调用`目标类`的`目标方法`的时候，实际上是由`目标类的代理对象`调用`目标方法`的。\n\n这句话里面有几个关键词：\n\n- 目标类：当然了，就是我们的策略类A（IndicatorAStrategyImpl）和B（IndicatorBStrategyImpl）这两个东东啦。\n- 目标方法：当然啦，目标方法是我们希望被切面切到的`calculate`方法啦\n- 目标类的代理对象：当然啦，是我们之前看到的 `IndicatorAStrategyImpl$$EnhancerBySpringCGLIB$$c1fb478` 这个东东啦\n- 调用目标方法：就是调用 `calculate`方法。\n\n好，重复一遍最后一句：调用目标方法：就是调用 `calculate`方法。\n\n那么我们看看代码，我们的代理类调用的是谁？\n\n```java\nString indicatorAResult = IndicatorStrategyManager.getStrategy(\"INDICATOR_A\").process();\nString indicatorBResult = IndicatorStrategyManager.getStrategy(\"INDICATOR_B\").process();\n```\n\n是的，没错，我们的代理类调用的是`process`方法，不是`calculate`方法。\n\n那么接下来，就有两个问题了\n\n- 直接用代理类调用calculate方法，AOP真的会生效吗？我已经有点怀疑自己了。\n- 为什么代理类调用process方法，然后process方法调用目标方法calculate的时候，切面不生效呢？\n\n\n\n**直接用代理类调用calculate方法，AOP真的会生效吗**\n\n我们调整一下代码：把调用process的方法改成调用calculate\n\n```java\nString indicatorAResult = IndicatorStrategyManager.getStrategy(\"INDICATOR_A\").calculate(\"test\");\n//String indicatorAResult = IndicatorStrategyManager.getStrategy(\"INDICATOR_A\").process();\n```\n\n发现：切面生效了。\n\n<img src=\"【spring】spring注解AOP开发和源码解读及实践.assets/image-20221223160347614.png\" alt=\"image-20221223160347614\" style=\"zoom:80%;\" />\n\n\n\n**为什么代理类调用process方法，然后process方法调用目标方法calculate的时候，切面不生效呢？**\n\n因为当代理类调用了`process`方法之后，就已经进入了`process`方法内部了；\n\n在`process`方法内部调用`calculate`，其实相当于：`this.calculate`的调用方式；\n\n又是`this`，所以它就已经不是代理类了，所以切面自然也不会生效。\n\n\n\n\n\n## 致谢\n\n- 感谢尚硅谷《spring源码分析》视频教程:https://www.bilibili.com/video/av32102436\n\n- 感谢《Spring AOP 源码解析》一文：https://javadoop.com/post/spring-aop-source\n\n\n\n---\n\n\n\nspring-aop和aspectJ的关系\n\n\n\n\n\nImportBeanDefinitionRegistrar的作用\n\n","tags":["spring","源码解读","AOP"],"categories":["JAVA","SSM"]},{"title":"idea单测的覆盖率","url":"/note/TOOLS/IDEA/idea单测的覆盖率/","content":"\n\n\n最近公司让写单测，写好了一个类的单测，运行之后，发现：怎么没有覆盖率呀？\n\n<img src=\"idea单测的覆盖率.assets/image-20221122213020377.png\" alt=\"image-20221122213020377\"  />\n\n原因\n由于test类文件的包名`com.sf.fw.aging.test.core.rule.RuleExecuteTest`和被测试的类的包名`com.sf.fw.aging.eagle.core.RuleExecutor`不同，引起的。\n\n\n\n解决办法\n\n将测试类和被测试类，放在同一个包名下。简单的操作就是：\n\n在被测试类上，alt + enter 生成测试类，就可以了。\n\n<img src=\"idea单测的覆盖率.assets/image-20221122213324957.png\" alt=\"image-20221122213324957\" style=\"zoom:80%;\" />\n\n\n\n正常\n\n<img src=\"idea单测的覆盖率.assets/image-20221122213708490.png\" alt=\"image-20221122213708490\" style=\"zoom:80%;\" />\n\n\n\n可以设置单测覆盖率的统计路径\n\n<img src=\"idea单测的覆盖率.assets/image-20221125161420585.png\" alt=\"image-20221125161420585\"  />","tags":["idea","单测"],"categories":["TOOLS","idea"]},{"title":"mysql的锁从入门到入土","url":"/note/JAVA/数据库/MYSQL/mysql的锁从入门到入土/","content":"\n\n\n根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表锁和行锁三类。\n\n\n\n本文有xmind，点击下载：[MySQL的锁.xmind](./mysql的锁从入门到入土/Mysql的锁.xmind)\n\n\n\n## 写在前面之锁的分类\n\n<img src=\"mysql的锁从入门到入土.assets/image-20230508171611633.png\" alt=\"image-20230508171611633\" style=\"zoom:67%;\" />\n\n### 共享锁和独占锁（排它锁）\n\n共享锁：`Shared Locks`，简称`S锁`\n\n独占锁（排它锁）：`Exclusive Locks`简称`X锁`\n\n\n\n### 意向共享锁与意向独占锁\n\n意向共享锁：`Intention Shared Lock`，简称`IS锁`。\n\n- 作用是：当一个事务准备给一条记录加`S锁`的时候，会先给这条记录所在的表加一个`IS锁`\n\n意向独占锁：`Intention Exclusive Lock`，简称`IX锁`。\n\n- 作用是：当一个事务准备在一条记录上加`X锁`的时候，会先给这条记录所在的表加一个`IX锁`\n\n\n\n### 读锁和写锁\n\n写锁是排它锁（也叫独占锁），意味着其他线程不能读也不能写，当前线程可读写；\n\n读锁是共享锁，意味着其他线程只能读不能写，本线程也不能写；\n\n全局锁只有读锁。\n\n表锁有读锁和写锁。\n\nMDL锁有读锁和写锁。\n\n\n\n\n\n### 当前读和快照读\n\n在mysql的默认隔离级别RR下\n\n快照读：一般情况下select * from ....where ...  是快照读，不会加锁，有MVCC支持\n\n当前读： `for update`,`lock in share mode`,`update`,`delete`都属于当前读，会加锁\n\n- lock in share mode ： 加的是共享锁（s锁）\n- for update ： 加的是独占锁（排他锁 / x锁）\n- update：加的是独占锁（排他锁 / x锁），update 的加锁语义和 for update 是一致的\n- delete：加的是独占锁（排他锁 / x锁），delete的加锁语义和 for update 是一致的\n\n\n\n## 全局锁\n\n<img src=\"mysql的锁从入门到入土.assets/image-20230508172351248.png\" alt=\"image-20230508172351248\" style=\"zoom:80%;\" />\n\n\n\n### 什么是全局锁\n\n顾名思义，全局锁就是对整个数据库实例加锁。\n\n全局锁只有一个读锁。\n\n\n\n### 何时打开 / 关闭全局锁（FTWRL）\n\n打开\n\n- 只能手动打开，命令是 `Flush tables with read lock (FTWRL)`。\n- 打开全局锁之后，整个数据库处于只读状态，可以查询。\n- 之后以下语句会被阻塞：DML（数据的增删改，可以查询）、DDL（包括建表、修改表结构等）和更新类事务的提交语句。\n\n关闭\n\n- unlock tables 可以解除\n- client 断开的时候自动释放\n\n\n\n### 全局锁使用场景（全库逻辑备份）\n\n全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都 select 出来存成文本。\n\n\n\n#### 全库逻辑备份\n\n为了避免备份过程中出现数据不一致的情况，所以，在备份的时候需要保证数据一致性。\n\n#### 怎么保证备份时数据一致性\n\n全局锁就是保证数据一致性的方法之一，但是全局锁也有很多缺点：\n\n- 在主库上备份，备份的过程中，整个库处于只读状态，业务停止\n- 在备库上备份，会导致同步过来的`binlog`无法执行，主备延迟\n\n那么，使用一致性视图`readview`也是一个办法，而且不会阻止数据库的更新，但是需要满足两个条件\n\n- 需要引擎支持MVCC\n- 需要数据库隔离级别是RR（readview在RR级别下是第一个查询时开启，直到事务结束，都在一个readview下； 但是RC级别下是每一个查询都会开启readview，这样的话，在备份的时候，仍然是数据不一致的。）\n- MySQL官方自带的逻辑备份工具是 mysqldump。当使用`–single-transaction` 参数的时候，就是使用这种方式\n\n那么，使用`set global readonly=true`呢？确实 readonly 方式也可以让全库进入只读状态，但不建议，主要有两个原因：\n\n- 在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。\n- 在异常处理机制上有差异：使用 FTWRL 命令之后，如果client异常断开，那么 MySQL 会自动释放这个全局锁，整库恢复正常。而将整个库设置为 readonly 之后，如果client发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高\n\n\n\n## 表锁（表锁+MDL锁）\n\nMySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)\n\n<img src=\"mysql的锁从入门到入土.assets/image-20230508175131341.png\" alt=\"image-20230508175131341\" style=\"zoom:80%;\" />\n\n\n\n### 表锁\n\n#### 什么是表锁\n\n顾名思义，表锁就是对某张表加锁。\n\n全局锁只有一个读锁，而表锁是有：读锁，和写锁的。\n\n\n\n#### 何时打开/关闭表锁\n\n打开\n\n- 手动打开，表锁的语法是` lock tables … read/write`\n\n关闭\n\n- unlock tables可以解除\n- client 断开的时候自动释放\n\n\n\n#### 表锁的读锁和写锁\n\n全局锁只有一个读锁，而表锁是有：读锁，和写锁的。\n\nlock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。\n\n举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句之后：\n\n- 其他线程写 t1、读写 t2 的语句都会被阻塞。\n- 同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。\n\n\n\n#### 表锁的使用场景\n\n在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。\n\n而对于 InnoDB 这种支持行锁的引擎，一般不用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。\n\n\n\n### 元数据锁（meta data lock，MDL)\n\n\n\n#### 什么是元数据锁\n\nMySQL 5.5 版本中引入了 MDL\n\n执行DML时，加 MDL 读锁\n\n执行DDL时，加 MDL 写锁\n\n\n\n#### 怎么打开/关闭元数据锁\n\nMDL 不需要显式使用，在访问一个表的时候会被自动加上\n\n当对表做DML操作的时候，加 MDL 读锁\n\n当对表做DDL操作的时候，加 MDL 写锁\n\n\n\n#### MDL的使用场景\n\n##### 保证读写的正确性\n\nMDL 的作用是，保证读写的正确性\n\n你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一个字段，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。\n\n\n\n##### ONLINE DDL的实现原理\n\n1. 获取对应要操作表的 MDL写锁（此时表只读）\n2. MDL写锁 降级成 MDL读锁\n3. 真正做DDL操作\n   1. 复制原表结构，创建中间表\n   2. 对中间表执行DDL操作（此时原表可以正常读写）\n   3. 将原表数据导入到中间表\n\n4. MDL读锁 升级成 MDL写锁（此时表只读）\n   1. 删除原表，rename中间表为原表\n5. 释放MDL写锁\n\n第一步获取写锁之后，降级为读锁，此时DML可以正常执行（DML需要的是读锁），但是DDL执行不了（DDL需要的是写锁），这样就支持了online ddl\n\n\n\n#### MDL锁的死锁场景\n\n##### 如何安全的给小表加索引\n\n给一个小表加个字段，导致整个库挂了\n\n| session A                          | session B                | session C                                                    | session D                                                    |\n| ---------------------------------- | ------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin<br/>select * from t limit 1; |                          |                                                              |                                                              |\n|                                    | select * from t limit 1; |                                                              |                                                              |\n|                                    |                          | alter table t add f int;<br><font color='red'>blocked</font> |                                                              |\n|                                    |                          |                                                              | select * from t limit 1;<br/><font color='red'>blocked</font> |\n\n\n\nsessionA：需要MDL读锁，可以正常执行\n\nsessionB：需要MDL读锁，因为读锁是共享锁，可以正常执行\n\nsessionC：需要MDL写锁，因为sessionA和sessionB还没有提交，MDL读锁还没有释放，所以MDL写锁申请不了，会等待\n\nsessionD：需要MDL读锁，因为sessionC在阻塞，所以sessionD也阻塞了\n\n此时整张表处于不可读写状态，如果这个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。\n\n**事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。**([两阶段锁协议](#两阶段锁协议)，后面会说)\n\n\n\n怎么安全的给小表加字段\n\n- 解决大事务，事务不提交，就会一直占着 MDL 锁\n\n如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？\n\n- 在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。\n\n\n\n\n\n## 行锁与死锁\n\n\n\n![image-20230509161335967](mysql的锁从入门到入土.assets/image-20230509161335967.png)\n\n\n\nMySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。\n\n不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。\n\nInnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。\n\n\n\n### 什么是行锁\n\n顾名思义，行锁就是针对数据表中行记录的锁。\n\n这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。\n\n\n\n### 两阶段锁协议\n\n在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是**两阶段锁协议**。\n\n在事务中，行锁是在语句执行时才加上的（[案例十：IN 语句加锁（动态加锁）](#案例十：IN 语句加锁（动态加锁）)），不是事务开始就加上，但释放是统一在事务结束时才释放。\n\n根据这个特性，对于高并发的行记录的操作语句就可以尽可能的安排到最后面，以减少锁等待的时间，提高并发性能\n\n\n\n### 何时加 / 释放行锁\n\n事实上，在事务执行过程中，行锁不会单独加上，因为加锁的最小粒度是 next-key lock（[next-key lock](#next-key lock)）\n\n具体是怎么加的，可以参考：[加锁/释放锁/查看锁规则](#加锁/释放锁/查看锁规则)\n\n但是呢，我们可以简单的理解：在事务中，行锁是在语句执行时才加上的（[案例十：IN 语句加锁（动态加锁）](#案例十：IN 语句加锁（动态加锁）)），如果语句执行的过程中扫描到了行，会给这个行加行锁。\n\n释放是统一在事务结束时才释放\n\n\n\n## 死锁\n\n### 什么是死锁\n\n| session A                               | 事务 B                         |\n| --------------------------------------- | ------------------------------ |\n| begin<br/>update t set k=1 where id =1; | begin;                         |\n|                                         | update t set k=2 where id =2;  |\n| update t set k=3 where id = 2;          |                                |\n|                                         | update t set k=4 where id = 1; |\n\n这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。\n\n\n\n### 出现死锁怎么办\n\n当出现死锁以后，有两种策略：\n\n- 死锁等待：直接进入等待，直到超时。这个超时时间可以通过参数 `innodb_lock_wait_timeout` 来设置。\n- 死锁检测（推荐）：发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 `innodb_deadlock_detect` 设置为 on，表示开启这个逻辑。\n\n\n\n#### 死锁等待\n\n在 InnoDB 中，`innodb_lock_wait_timeout` 的默认值是 50s\n\n意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。\n\n- 设置比较大的值：对于在线服务来说，这个等待时间往往是无法接受的\n- 设置比较小的值：虽然死锁可以很快解开，但是容易出现误杀，比如正常的锁等待，也会导致线程退出\n\n\n\n#### 死锁检测（推荐）\n\n**开启死锁检测**：`innodb_deadlock_detect`设置为`on`，默认值就是`on`\n\n**死锁检测是怎么检测的**：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待（也就是死锁）。\n\n**死锁检测的例子**：新来的线程F，被锁了后就要检查锁住F的线程（假设为D）是否被锁，如果没有被锁，则没有死锁，如果被锁了，还要查看锁住线程D的是谁，如果是F，那么肯定死锁了，如果不是F（假设为B），那么就要继续判断锁住线程B的是谁，一直走直到发现线程没有被锁（无死锁）或者被F锁住（死锁）才会终止。\n\n**死锁检测的代价**\n\n举个例子：1000个线程并发更新同一行，发生了锁等待，这个时候需要检测是否发生了死锁？\n\n那么死锁检测操作就是 100 万（1000 * 1000）这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。\n\n因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。\n\n\n\n### 行锁的死锁场景\n\n#### 热点行更新的性能问题\n\n热点行更新问题，就是大量的并发线程，更新同一行记录的问题，会由于并发量太大，可能导致死锁的产生，触发死锁检测，耗费大量cpu\n\n**解决方案**\n\n- 如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉\n- 控制并发度：死锁检测的成本高，所以控制并发度，就可以减少死锁检测的性能消耗，同时还能减少死锁的产生\n- 将热点行更新问题拆分为更新多行（具体可以从业务角度考虑）\n\n\n\n## 间隙锁（幻读）\n\n通过幻读的产生，来了解一下间隙锁\n\n\n\n### 幻读\n\n\n\n#### 什么是幻读\n\n结论先行：幻读的产生前提\n\n- 只有在**当前读**的情况下才可能产生（[当前读和快照读](#当前读和快照读)），所以下面的演示，查询语句使用了 `for update`\n- 只有 `insert` 的记录才是幻读，update的不是\n\n\n\n#### 幻读的产生\n\n以下的测试是在InnoDB的默认隔离级别RR下\n\n准备一张表和数据\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n这个表除了主键 id 外，还有一个普通索引 c，d是普通列没有索引，初始化语句在表中插入了 6 行数据。\n\n\n\n下面这个这个场景，只是假设，是为了引入幻读，然后引出后面要说的`间隙锁`。\n\n这个场景实际上不会产生的，因为有`间隙锁`的存在。\n\n这里假设`间隙锁`不存在\n\n|      | session A                                                    | session B                                            | session C                                           |\n| ---- | ------------------------------------------------------------ | ---------------------------------------------------- | --------------------------------------------------- |\n| T1   | begin;<br/>select * from t where d = 5 for update;<br/>结果：(5,5,5) |                                                      |                                                     |\n| T2   |                                                              | begin;<br/>update t set d=5 where id =0;<br/>commit; |                                                     |\n| T3   | select * from t where d = 5 for update;<br/>结果：(0,0,5),(5,5,5) |                                                      |                                                     |\n| T4   |                                                              |                                                      | begin;<br/>insert into t values(1,1,5);<br/>commit; |\n| T5   | select * from t where d = 5 for update;<br/>结果：(0,0,5),(1,1,5),(5,5,5) |                                                      |                                                     |\n| T6   | commit;                                                      |                                                      |                                                     |\n\n\n\n在 session A 中执行了三次一模一样的查询，由于这些查询语句使用了 for update ，所以都是当前读，并且加上了 x 锁。\n\n- 第一次查询：结果：(5,5,5)，没问题\n- 第二次查询：结果：(0,0,5),(5,5,5)，因为是当前读，所以可以读到 session B 更新后的记录。（但是这不是幻读）\n- 第三次查询：结果：(0,0,5),(1,1,5),(5,5,5)，因为是当前读，所以可以读到 session C 插入的记录。（是幻读）\n\n通过上面的结果看，因为使用了当前读，能查出来这些数据，是没有问题的。\n\n但是真的没有问题吗？如果你觉得上面的步骤，没有问题，那么你就有问题了，接着往下看：看看幻读的问题\n\n\n\n#### 幻读的问题\n\n##### 幻读破坏语义\n\n回过头来，我们来看这个查询语句：`select * from t where d = 5 for update;`，这个查询语句是什么意思？\n\n- 查询 d=5的记录，并且加上了一个x锁；\n\n注意：加的是一个x锁，按照常理考虑，对所有d=5的记录，都应该有个x锁，既然有了x锁，那么针对d=5的记录，就不能再操作了？\n\n那么 session B 的更新（update t set d=5 where id =0;），和 session C 的插入（insert into t values(1,1,5);），都变化了 d=5 的记录，这是怎么回事呢？\n\n这是因为：\n\n- 在第一次执行查询的时候，只给 id=5 这一行记录加上了锁。所以 session B 可以更新 id=0 这一条记录。但是，这样就破坏了第一次查询语句要锁住所有 d=5 的行的加锁声明。\n- session C 也是一样的道理，对 id=1 这一行的插入，也是破坏了要锁住所有 d=5 的行的加锁声明。\n\n这就是破坏了语义。\n\n\n\n##### 幻读导致数据不一致\n\n我们所说的数据一致性，不止是数据库内部数据状态在此刻的一致性，还包含了数据和日志在逻辑上的一致性。\n\n思考下面这个问题，我们执行这个查询语句：`select * from t where d = 5 for update;`\n\n其中字段 d 上是没有索引的，因此这条查询语句会做全表扫描。\n\n那么，其他被扫描到的，但是不满足条件的记录，会不会被加锁呢？\n\n\n\n###### 假设只锁d=5其他记录不加锁\n\n考虑下面这个场景（当然这个场景也是假设的）\n\n先把数据准备一下：\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n|      | session A                                                    | session B                                                    | session C                                                    |\n| ---- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| T1   | begin<br/>select * from t where d=5 for update;<br>update t set d = 100 where d = 5; |                                                              |                                                              |\n| T2   |                                                              | begin;<br/>update t set d=5 where id =0;<br/>update t set c=5 where id =0;<br/>commit; |                                                              |\n| T3   | select * from t where d = 5 for update;                      |                                                              |                                                              |\n| T4   |                                                              |                                                              | begin;<br/>insert into t values(1,1,5);<br/>update t set c=5 where id=1;<br/>commit; |\n| T5   | select * from t where d = 5 for update;                      |                                                              |                                                              |\n| T6   | commit;                                                      |                                                              |                                                              |\n\n通过上面的一波执行，看一下数据库的最终结果是什么样的\n\n```sql\n之前：(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n之后：(0,5,5),(1,5,5),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25)\n```\n\n这样看，这些数据也没啥问题，但是我们再来看看这时候 binlog 里面的内容。\n\n- session B 的事务先提交，binlog先记录：update t set d=5 where id=0; update t set c=5 where id=0;\n- 然后是 session C 的事务提交了，binlog记录：insert into t values(1,1,5); update t set c=5 where id=1;\n- 最后是 session A 的事务提交了，binlog记录：update t set d = 100 where d = 5;\n- 汇总之后，就是下面这样：\n\n```sql\n//session B\nupdate t set d=5 where id=0; \nupdate t set c=5 where id=0; \n//session C\ninsert into t values(1,1,5);\nupdate t set c=5 where id=1;\n//session A\nupdate t set d=100 where d=5;\n```\n\n然后备库执行上面的binlog之后，结果是什么样的呢？\n\n```sql\n之前：(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n之后：(0,5,100),(1,5,100),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n到这里，比较一下，你就发现了问题\n\n```sql\n主库：(0,5,5),(1,5,5),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25)\n备库：(0,5,100),(1,5,100),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n这个问题很严重，是不行的。\n\n\n\n所以我们认为，只锁d=5其他记录不加锁，这个假设不合理，要改。\n\n那怎么改呢？我们把扫描过程中碰到的行，也都加上x锁，再来看看执行效果。\n\n\n\n###### 假设给所有扫描到的记录都加锁\n\n\n\n把扫描过程中碰到的行，也都加上写锁，再来看看执行效果。\n\n\n\n考虑下面这个场景（当然这个场景也是假设的）\n\n先把数据准备一下：\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n|      | session A                                                    | session B                                                    | session C                                                    |\n| ---- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| T1   | begin<br/>select * from t where d=5 for update;<br>update t set d = 100 where d = 5; |                                                              |                                                              |\n| T2   |                                                              | begin;<br/>update t set d=5 where id =0;<br/><font color='red'>阻塞blocked</font><br/>update t set c=5 where id =0;<br/>commit; |                                                              |\n| T3   | select * from t where d = 5 for update;                      |                                                              |                                                              |\n| T4   |                                                              |                                                              | begin;<br/>insert into t values(1,1,5);<br/>update t set c=5 where id=1;<br/>commit; |\n| T5   | select * from t where d = 5 for update;                      |                                                              |                                                              |\n| T6   | commit;                                                      |                                                              |                                                              |\n| T7   |                                                              | session A释放锁之后，继续执行                                |                                                              |\n\n由于 session A 把所有的行都加了写锁，所以 session B 在执行第一个 update 语句的时候就被锁住了。需要等到 T6 时刻 session A 提交以后，session B 才能继续执行。\n\n通过上面的一波执行，看一下数据库的最终结果是什么样的\n\n```sql\n之前：(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n之后：(0,5,5),(1,5,5),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25)\n```\n\n这样看，这些数据也没啥问题，但是我们再来看看这时候 binlog 里面的内容。\n\n- session B 被阻塞了，所以session C是先提交的，binlog先记录：insert into t values(1,1,5);update t set c=5 where id=1;\n- 然后session A执行完了，binlog记录：update t set d = 100 where d = 5;\n- 最后是session B执行完了，binlog记录：update t set d=5 where id =0; update t set c=5 where id =0;\n- 汇总之后，就是下面这样：\n\n```sql\n//session C\ninsert into t values(1,1,5); \nupdate t set c=5 where id=1; \n//session A\nupdate t set d=100 where d=5;\n//session B\nupdate t set d=5 where id=0; /*(0,0,5)*/\nupdate t set c=5 where id=0; /*(0,5,5)*/\n```\n\n然后备库执行上面的binlog之后，结果是什么样的呢？\n\n```sql\n之前：(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n之后：(0,5,5),(1,5,100),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n到这里，比较一下，你就发现了问题\n\n```sql\n主库：(0,5,5),(1,5,5),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25)\n备库：(0,5,5),(1,5,100),(5,5,100),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n虽然 session B的更新的问题解决了，但是 session C 插入的那一条记录，还是不对。这个问题也很严重。\n\n那么为什么呢？我都对所有的记录，都加了锁，为什么还是不行呢？\n\n- 因为我们在加锁的时候，session C还没有执行的，而等 session C执行完之后，session A已经加锁完毕了\n- 这就导致了 id = 1 这一样记录，没有加上锁。\n\n也就是说，即使把所有的记录都加上锁，还是阻止不了新插入的记录，\n\n\n\n### 间隙锁（InnoDB解决幻读）\n\n由于行锁只能锁住行，当我们向两条记录中间新插入记录的时候，会导致幻读的产生。\n\n对于新插入记录这个动作，要更新的是记录之间的“间隙”。\n\n因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。\n\n\n\n#### 什么是间隙锁（Gap Lock）\n\n顾名思义，间隙锁，锁的就是两个值之间的空隙。比如下面这个表 t，初始化插入了 6 个记录，这就产生了 7 个间隙。\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n我们插入了 6 个记录，就产生了 7 个间隙\n\n- (-∞,0)\n- (0,5)\n- (5,10)\n- (10,15)\n- (15,20)\n- (25,+∞)\n\n这样，当执行 `select * from t where d=5 for update` 的时候，因为扫描全表；\n\n就不止是给数据库中已有的 6 个记录加上了行锁\n\n还同时加了 7 个间隙锁。这样就确保了无法再插入新的记录。\n\n\n\n#### 何时加 / 释放间隙锁\n\n间隙锁是在RR隔离级别下才会生效的。\n\n如果不想使用间隙锁：可以将隔离级别设置成RC，但是同样的，需要解决可能出现的数据和日志不一致问题，需要把 binlog 格式设置为 row\n\n\n\n事实上，在事务执行过程中，间隙锁不会单独加上，因为加锁的最小粒度是 next-key lock（[next-key lock](#next-key lock)）\n\n具体是怎么加的，可以参考：[加锁/释放锁/查看锁规则](#加锁/释放锁/查看锁规则)\n\n但是呢，我们可以简单的理解：在事务中，间隙锁是在语句执行时才加上的（[案例十：IN 语句加锁（动态加锁）](#案例十：IN 语句加锁（动态加锁）)）\n\n释放是统一在事务结束时才释放\n\n\n\n#### 间隙锁和行锁的互斥关系\n\n\n\n间隙锁与间隙锁之间，不存在任何冲突。\n\n间隙锁与行锁之间，不存在任何冲突。\n\n跟间隙锁存在冲突关系的，是“往这个间隙中插入一个记录”这个操作。间隙锁之间都不存在冲突关系。\n\n\n\n\n\n#### 面试：RR隔离级别能解决幻读吗\n\n先说结论：能解决，但不能完全解决。\n\n在快照读的情况下：\n\n- RR隔离级别下，事务开启的时候，就会启动一个readview，是可以解决脏读、不可重复读以及幻读问题的。\n\n- RC隔离级别下，都是当前读，没有快照读，因此无法解决不可重复读以及幻读问题。\n\n在当前读的情况下：\n\n- RR隔离级别下，由于有行锁和间隙锁的存在，当前读也是可以解决脏读、不可重复读以及幻读问题的\n\n- RC隔离级别下，只有行锁，没有间隙锁，因此无法解决不可重复读以及幻读问题。\n\n那么，为什么说RR隔离级别下没有完全解决幻读问题呢？\n\n- 事务1 先快照读，事务2新增了一条数据并提交事务，事务1再当前读。\n- 事务1 先快照读，事务2新增了一条数据并提交事务，事务1对事务2提交的数据进行了修改，事务1再次快照读。\n\n情况1不用说了吧，很好理解。对于情况2， 事务1的更新操作不属于快照读，因此事务1的更新操作是可以生效的，而当前数据会记录最新修改的记录，最新修改的记录为当前事务自己，所以是能看到的。\n\n\n\n\n\n### next-key lock\n\n#### 什么是next-key lock\n\n间隙锁 和 行锁 合称： next-key lock，每个 next-key lock 是前开后闭区间。\n\n比如下面这张表\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n我们插入了 6 个记录，如果用 select * from t for update 要把整个表所有记录锁起来。\n\n此时产生了：6个行锁，7个间隙锁；7个next-key lock\n\n7个next-key lock 分别是 \n\n- (-∞,0]\n- (0,5]\n- (5,10]\n- (10,15]\n- (15,20]\n- (20, 25]\n- (25, +supremum]     \n  - 这个 `supremum `是啥？\n  - 这是因为 +∞是开区间。所以 InnoDB 给每个索引加了一个不存在的最大值 supremum，这样才符合我们前面说的“都是前开后闭区间”\n\n\n\n\n\n#### 何时加 / 释放next-key lock\n\n\n\n在事务执行过程中，加锁的最小粒度是 next-key lock（[next-key lock](#next-key lock)），具体是怎么加的，可以参考：[加锁/释放锁/查看锁规则](#加锁/释放锁/查看锁规则)\n\n释放是统一在事务结束时才释放\n\n\n\n### 间隙锁的死锁场景\n\n\n\n间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。\n\n\n\n场景：任意锁住一行，如果这一行不存在的话就插入，如果存在这一行就更新它的数据\n\n```sql\n\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n看下面这个场景：\n\n| session A                                                    | session B                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select * from t where id = 9 for update;          |                                                              |\n|                                                              | begin<br/>select * from t where id = 9 for update;           |\n|                                                              | insert into t values(9,9,9);<br/><font color='red'>blocked</font> |\n| insert into t values(9,9,9);<br/><font color='red'>ERROR 1231 (40001) : Deadlock found</font> |                                                              |\n\n\n\n- session A 执行 select … for update 语句，由于 id=9 这一行并不存在，因此会加上间隙锁 (5,10);\n- session B 执行 select … for update 语句，同样会加上间隙锁 (5,10)，间隙锁之间不会冲突，因此这个语句可以执行成功；\n- session B 试图插入一行 (9,9,9)，被 session A 的间隙锁挡住了，只好进入等待；\n- session A 试图插入一行 (9,9,9)，被 session B 的间隙锁挡住了。\n- 至此，两个 session 进入互相等待状态，形成死锁。\n\n\n\n间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。\n\n间隙锁是在RR隔离级别下才会生效的。\n\n如果不想使用间隙锁：可以将隔离级别设置成RC，但是同样的，需要解决可能出现的数据和日志不一致问题，需要把 binlog 格式设置为 row（使用statement容易出现数据不一致）\n\n\n\n\n\n### 题外话：隔离级别 RC+ROW\n\nmysql 默认的隔离级别是RR，但是一般在大公司内部的数据库，都是使用RC格式，并且statement格式都是：ROW，这是为什么呢？\n\n比如我司用的就是：RC+ROW\n\n```sql\nmysql> show variables like '%isolation%';\n+-----------------------+----------------+\n| Variable_name         | Value          |\n+-----------------------+----------------+\n| transaction_isolation | READ-COMMITTED |\n+-----------------------+----------------+\n1 row in set, 1 warning (0.03 sec)\n\nmysql> show variables like '%binlog_format%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| binlog_format | ROW   |\n+---------------+-------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n\n\n为什么要使用 RC+ROW呢？\n\n结论先行：为了提升并发和降低死锁产生的概率；同时保证数据的一致性；\n\n- 前面说到，间隙锁的存在会导致锁的范围变大，就更容易导致死锁的产生，比如上面的场景；\n- 而间隙锁是只有在 RR  隔离级别下，才会有的。\n- 所以为了避免使用间隙锁而导致的问题，可以把隔离级别设置成：RC\n- 另外，binlog的格式使用 ROW，是因为默认使用的STATEMENT由于记录的是sql原文，有可能导致主从数据不一致。\n\n\n\n有的朋友发现他们公司就使用的是RC+ROW 的组合。他曾问他们公司的 DBA 说，你为什么要这么配置。DBA 直接答复说，因为大家都这么用呀。\n\n但其实我想说的是，配置是否合理，跟**业务场景**有关，需要具体问题具体分析。但是，如果 DBA 认为之所以这么用的原因是“大家都这么用”，那就有问题了，或者说，迟早会出问题。\n\n#### 问：什么场景，需要RR来保证？\n\n- 一般要求数据一致性的时候，比如备份，比如数据核对校验的场景，金融行业场景。\n\n#### 问：大家都用RC，可是逻辑备份的时候，mysqldump 为什么要把备份线程设置成RR呢？\n\n- 通过一致性视图保证备份时数据的一致性\n- 同时备份的时候不阻塞数据库的DDL\n\n#### 问：在备份期间，备份线程用的是RR，而业务线程用的是RC。同时存在会不会有问题？\n\n- 没问题\n- RR是备份线程单独开启的，只在当前线程内生效\n- 而且由于MVCC的支持，在事务开始的时候，就已经开始记录undolog了\n- 有了回滚段，就能保证备份的时候的数据一致性。\n\n#### 问：这两个不同的隔离级别现象有什么不一样的？\n\n- xxx\n\n#### 问：关于我们的业务，“用RC就够了”这个结论是怎么得到的？\n\n- xxx\n\n如果业务开发和运维团队这些问题都没有弄清楚，那么“没问题”这个结论，本身就是有问题的。\n\n\n\n## 加锁/释放锁/查看锁规则\n\n上面只是介绍了锁，但是什么时候加锁（加锁规则），加了什么锁（查看），什么时候释放（释放锁），我们都还不知道。\n\n适用版本：5.x 系列 <=5.7.24，8.0 系列 <=8.0.13\n\n隔离级别（谈到加锁，必先谈隔离级别）：因为间隙锁在RR隔离级别下才有效，所以下面的加锁规则都是在RR隔离级别下\n\n\n\n![image-20230509161359182](mysql的锁从入门到入土.assets/image-20230509161359182.png)\n\n\n\n### 锁是加在哪儿的\n\n锁就是加在索引上的，这是 InnoDB 的一个基础设定\n\nInnoDB基础设定：锁加在索引上。 如果没有索引，锁加在主键上，主键是天然的唯一索引。\n\n\n\n### 怎么加锁的（加锁规则）\n\n\n\n#### 两个原则，两个优化，一个BUG\n\n我总结的加锁规则里面，包含了两个“原则”、两个“优化”和一个“bug”。\n\n- 原则一：加锁的基本单位是 `next-key lock`\n- 原则二：查找过程中访问到对象才会加锁\n- 优化一：唯一索引上的等值查询，加锁的时候，next-key lock 退化为 行锁\n- 优化二：普通索引上的等值查询，向右遍历且最后一个值不满足等值条件的时候，next-key lock 退化为 间隙锁\n- BUG一：**唯一索引**上的范围查询，会访问到不满足查询条件的第一个值为止。\n\n\n\n#### 案例一：主键索引等值查询\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n只给出现象，试着分析一下现象产生的原因\n\n| session A                                       | session B                                                    | session C                                                    |\n| ----------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>update t set d = d + 1 where id = 7; |                                                              |                                                              |\n|                                                 | insert into t values (8,8,8);<br/><font color = 'red'>blocked</font> |                                                              |\n|                                                 |                                                              | update t set d = d + 1 where id = 10;<br/><font color = 'gree'>ok</font> |\n\n\n\n关键词：update语句，主键索引，主键记录不存在\n\n- 主键记录这一行存在的时候是行锁（优化一），这一行不存在，那就是间隙锁啦。\n\n\n\n\n\n#### 案例二：普通索引等值查询（覆盖索引的优化）\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n| session A                                                   | session B                                                    | session C                                                    |\n| ----------------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select id from t where c = 5 lock in share mode; |                                                              |                                                              |\n|                                                             | update t set d = d + 1 where id = 5;<br/><font color = 'gree'>ok</font> |                                                              |\n|                                                             |                                                              | insert into t values (7,7,7);<br/><font color = 'red'>blocked</font> |\n\n\n\n- 关键词：lock in share mode，只查id是覆盖索引，c是普通索引\n- 因为用到了覆盖索引，所以不会锁主键索引；\n- c是普通索引，而且是=5的查询，锁  ( 0 , 5 ] \n- c是普通索引，还要继续向右查询，锁 (5,10] , 退化成  (5,10)，所以7插不进去\n\n\n\n**覆盖索引的优化**\n\n数据行加读锁，如果查询字段使用了覆盖索引，访问到的对象只有普通索引，并没有访问到主键索引，则不会锁主键索引。\n\n如果没有使用覆盖索引，且当前查询是for update ,update 和 delete 都是当前读，则会回表查询，访问到主键索引，这样主键索引也会加锁。\n\n- lock in share mode 只锁覆盖索引\n-  for update 就不一样了。 执行 for update 时，系统会认为你接下来要更新数据，因此会顺便给主键索引上满足条件的行加上行锁。\n\n\n\n#### 案例三：主键索引范围查询\n\n\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n对于主键查询，考虑下面两个语句，是一样的吗？\n\n```sql\n\nmysql> select * from t where id=10 for update;\nmysql> select * from t where id>=10 and id<11 for update;\n```\n\n它们的查询结果是一样的，等价，但是不完全等价。\n\n| session A                                                    | session B                                                    | session C                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select * from t where id>=10 and id<11 for update; |                                                              |                                                              |\n|                                                              | insert into t values (8,8,8);<br/><font color = 'gree'>ok</font><br/>insert into t values (13,13,13);<br/><font color = 'red'>blocked</font> |                                                              |\n|                                                              |                                                              | update t set d = d + 1 where id = 15;<br/><font color = 'red'>blocked</font> |\n\n\n\n- 关键词：主键索引，范围查询， for update\n- 因为是 >= 10，访问到了10，所以是：( 5, 10 ] , 对10来说，是等值查询，退化成 锁10的行锁。\n- 因为是范围查询，继续向右找，找到15，锁 ( 10 , 15 ] 这里不会退化，因为这是范围查询，不是等值查询，只有等值查询才会退化。 （但是在后续的版本中，8.0.19版本锁定区域已经是（10，15））\n\n\n\n\n\n#### 案例五：唯一索引范围查询（BUG）\n\n\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n| session A                                                    | session B                                                    | session C                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select * from t where id > 10 and id <= 15 for update; |                                                              |                                                              |\n|                                                              | update t set d = d + 1 where id = 20;<br/><font color = 'red'>blocked</font> |                                                              |\n|                                                              |                                                              | insert into t values (16,16,16);<br/><font color = 'red'>blocked</font> |\n\n\n\n\n\n- id > 10，就不会访问到 10\n- id <= 15 , 访问到了 15，所以 锁 ( 10 , 15 ] ，因为bug的存在，会继续向右查找一个记录， 锁 ( 15, 20 ] \n- 8.0.25，这个bug已经被修复，但是只修复了主键（主键也是唯一索引），唯一索引还没有修复\n\n\n\n#### 案例六：普通索引等值查询\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25),(30,10,30);\n```\n\n\n\n| session A                              | session B                                                    | session C                                                    |\n| -------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>delete from t where c = 10; |                                                              |                                                              |\n|                                        | insert into t values (12,12,12);<br/><font color = 'red'>blocked</font> |                                                              |\n|                                        |                                                              | update t set d = d + 1 where c = 15;<br/><font color = 'gree'>ok</font> |\n\n\n\n要想搞明白这个，需要先知道索引是有序的，所以上面这些数据，实际上索引的顺序是（普通索引的叶子节点存的是主键值）：\n\n```sql\n字段c：\t0\t5\t10\t10\t15\t20\t25\n主键：\t\t0\t5\t10\t30\t15\t20\t25\n```\n\n\n\n- 关键词：等值查询，普通索引，delete语句\n- delete 语句：加锁语义和 for update 是一样的，和update也是一样的。\n- c = 10 , 且 c是普通索引，遍历到第一个 c = 10，锁 ( 5 5,      10 10 ] \n- 索引上的等值查询，会向右遍历，遍历到第二个 c=10，锁 ( 5 5,      10 30 ] \n- 索引上的等值查询，会向右遍历，遍历到c=15，此时锁： ( 5 5,      15 15 ] ， 不满足查询条件，退化成间隙锁：锁 ( 5 5,      15 15 )\n- 所以最终锁的范围就是：  ( 5 5,      15 15 )\n\n\n\n#### 案例七：limit 语句加锁\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25),(30,10,30);\n```\n\n\n\n| session A                                      | session B                                                    |\n| ---------------------------------------------- | ------------------------------------------------------------ |\n| begin;<br/>delete from t where c = 10 limit 2; |                                                              |\n|                                                | insert into t values (12,12,12);<br/><font color = 'gree'>ok</font> |\n\n\n\n- 关键词：等值查询，普通索引，delete语句，有limit\n- delete 语句：加锁语义和 for update 是一样的，和update也是一样的。\n- c = 10 , 且 c是普通索引，遍历到第一个 c = 10，锁 ( 5 5,      10 10 ] \n- 索引上的等值查询，会向右遍历，遍历到第二个 c=10，锁 ( 5 5,      10 30 ] ，此时满足了limit的条件，不在向后遍历\n- 所以最终锁的范围就是：  ( 5 5,      10 30 ] \n\n\n\n#### 案例八：一个死锁的例子（验证next-key lock =间隙锁+行锁）\n\n\n\n| session A                                                    | session B                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select id from t where c = 10 lock in share mode; |                                                              |\n|                                                              | update t set d = d + 1 where c = 10;<br/><font color = 'red'>blocked</font> |\n| insert into t values(8,8,8);                                 |                                                              |\n|                                                              | <font color = 'red'>ERROR 1213(40001):Deadlock found when trying to get lock;try restaring transaction</font> |\n\n\n\n- 关键词：c有普通索引，覆盖索引查询，等值查询，lock in share mode当前读\n- session A 的 select 语句会加锁： ( 5 , 10 ]  和 ( 10 , 15 )\n- session B 的 update 语句也要在索引 c 上加  ( 5 , 10 ] ，进入锁等待；\n- session A 的 insert 语句需要再插入 (8,8,8) 这一行，被 session B 的间隙锁锁住。由于出现了死锁，InnoDB 让 session B 回滚。\n\n\n\n那么问题来了，**session B 的 next-key lock 不是还没申请成功吗？**\n\n其实是这样的，session B 的“加 next-key lock(5,10] ”操作，实际上分成了两步，先是加 (5,10) 的间隙锁，加锁成功（间隙锁与间隙锁之间没有加锁冲突）；然后加 c=10 的行锁，这时候才被锁住的。\n\n也就是说，我们在分析加锁规则的时候可以用 next-key lock 来分析。但是要知道，具体执行的时候，是要分成间隙锁和行锁两段来执行的。\n\n\n\n#### 案例九：范围查询ORDER BY排序加锁\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n| session A                                                    | session B                                                    | session C                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select * from t where c >= 15 and c <= 20 order by c desc for update; |                                                              |                                                              |\n|                                                              | insert into t values (11,11,11);<br/><font color = 'red'>blocked</font> |                                                              |\n|                                                              |                                                              | insert into t values (6,6,6);<br/><font color = 'red'>blocked</font> |\n\n\n\n题外话：\n\n下面俩sql有啥区别？\n\n```sql\nselect * from t where c >= 15 and c <= 20 order by c desc for update;\nselect * from t where c >= 15 and c <= 20 order by c desc lock in share mode;\n```\n\n- 在上面语句中，没有区别；但是在下面的语句中会有区别\n\n```sql\nselect id from t where c >= 15 and c <= 20 order by c desc for update;\nselect id from t where c >= 15 and c <= 20 order by c desc lock in share mode;\n```\n\n- 当使用覆盖索引的时候：\n- for update 会对主键索引也加锁。\n- lock in share mode 不会对主键加锁。\n- 这是 [覆盖索引的优化](#案例二：非唯一索引等值查询（覆盖索引的优化）)。 \n\n回过来，接着看这个思考题\n\n- 关键词：for update，范围查询，用到了普通索引，没有用覆盖索引\n- 由于有 order by c desc，所以索引c的扫描顺序是： 25->20->15->10->5->0\n- 当遍历到 c = 20 时，满足查询条件，锁 ( 15 , 20 ]\n- 然后 c 不是唯一索引，所以还会继续向右扫描，直到遇到 25,又加一个 next-key lock (20,25]，不过 25 不满足条件，退化为间隙锁(20,25)。\n- 继续遍历下一个 c = 15，满足查询条件，锁 ( 10 , 15 ]\n- 继续遍历下一个 c = 10，不满足查询条件，锁 ( 5 , 10 ]\n- 因为 c 不是唯一索引，也不会用到 “两个优化” 原则，所以在索引c上最终锁的范围就是： ( 10 , 25 ]\n- 因为是for update，会对扫描到的行也加锁。锁：c=20、c=15、c=10 这三行加三个行锁。\n- 最终锁的范围就是：（ 5，25），\n\n\n\n\n\n#### 案例十：IN 语句加锁（动态加锁）\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n| session A                                                    |\n| ------------------------------------------------------------ |\n| begin;<br/>select id from t where c in(5,20,10) lock in share mode; |\n\n\n\n- 关键词：in语句，覆盖索引\n- in 语句的查询，mysql默认会对 in  中的数据，进行升序排序。\n- 所以这个语句其实是：`begin;<br/>select id from t where c in(5,10,20) lock in share mode;`\n- 查找c=5的时候，加锁 ( 0 , 5 ]，因为c不是唯一索引，继续向右遍历，锁 ( 5, 10 ]，退化成 ( 5 , 10 )\n- 查找c=10的时候，加锁 ( 5, 10 ]，因为c不是唯一索引，继续向右遍历，锁 ( 10, 15 ]，退化成 ( 10 , 15 )\n- 查找c=20的时候，加锁 ( 15, 20 ]，因为c不是唯一索引，继续向右遍历，锁 ( 20, 25 ]，退化成 ( 20 , 25 )\n- 所以最终范围是：( 0 , 5 ]   ( 5, 10 ]   ( 10 , 15 )    ( 15, 20 ]   ( 20 , 25 )  \n- 简单的说就是：( 0 ，25 ) 中去掉 15 的行锁\n\n**动态加锁**\n\n你可能会说，这个加锁范围，不就是从 (5,25) 中去掉 c=15 的行锁吗？为什么这么麻烦地分段说呢？\n\n因为我要跟你强调这个过程：这些锁是“在执行过程中一个一个加的”，而不是一次性加上去的。\n\n这就是动态加锁。执行到哪里，就加锁加到哪里。\n\n\n\n#### 案例十一：一个死锁的例子（验证动态加锁）\n\n案例数据\n\n```sql\n-- 准备表和数据\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n| session A                                                    | session B                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select id from t where c in(5,20,10) lock in share mode; |                                                              |\n|                                                              | select id from t where c in(5,20,10) order by c desc for update; |\n\n\n\n现象：当上面两个语句并发执行的时候，会导致死锁，分析为什么？\n\n- 关键词：in 语句，order by 语句，覆盖索引\n- session A上的语句，in 语句的查询，mysql默认会对 in  中的数据，进行升序排序。\n- 所以sessionA上的语句，等价于：`select id from t where c in(5,10,20) lock in share mode;`\n- 而sessionB上的语句，由于指定了排序，in 中的数据顺序会按照执行的排序进行排。\n- 所以sessionB上的语句，等价于：`select id from t where c in(20,10,5) order by c desc for update;`\n- 由于是**动态加锁**：sessionA上的加锁顺序是：( 0 , 5 ]   ( 5, 10 ]   ( 10 , 15 )    ( 15, 20 ]   ( 20 , 25 )  \n- 由于是**动态加锁**：sessionB上的加锁顺序是：( 20 , 25 )   ( 15, 20 ]   ( 10 , 15 )    ( 5, 10 ]    ( 0 , 5 ]\n- 也就是说，这两条语句要加锁相同的资源，但是加锁顺序相反。当这两条语句并发执行的时候，就可能出现**死锁**。\n\n\n\n所以：\n\n- 由于锁是一个个加的（动态加锁），要避免死锁，对同一组资源，要按照尽量相同的顺序访问。\n- 在发生死锁的时刻，innodb会选择回滚成本更小（占用资源最少）的语句进行回滚： for update 语句占有的资源比 lock in share mode 要多\n\n\n\n\n\n### 释放锁\n\nRR隔离级别遵守两阶段锁协议，所有加锁的资源，都是在事务提交或者回滚的时候才释放的。\n\n1、间隙锁只发生于RR隔离级别下\n\n2、RR隔离级别下遵守两阶段提交，事务结束才释放锁 \n\n3、RC隔离级别 没有间隙锁\n\n4、RC隔离级别 语句执行完就释放“不满足条件的行”的行锁，而不是在事务结束的时候才释放\n\n\n\n\n\n### 查看锁\n\n在`information_scheme`库中有两张表\n\n- `innodb_locks`：该表中会记录一些锁信息：\n  - 如果一个事务想要获取某个锁但未获取到，该锁信息将被记录。\n  - 如果一个事务因为获取到了某个锁，但是这个锁阻塞了别的事务的话，该锁信息会被记录。\n  - 正常获取锁释放锁，没有阻塞的情况，在这张表中，不会被记录。\n\n- `innodb_lock_waits`：表明当前系统中因为等待哪些锁而让事务进入阻塞状态。\n\n还可以使用`SHOW ENGINE INNODB STATUS`中有两个部分：\n\n- `TRANSACTIONS`这一部分表示当前系统中，每个事务加了哪些锁。\n- `LATEST DETECTED DEADLOCK`这一部分是表示当系统中出现死锁的时候，记录的最后一次死锁的信息\n\n\n\n\n\n\n\n## 死锁\n\n在上面介绍其他锁的时候，穿插着介绍了很多死锁的场景，这里汇总一下\n\n\n\n### 什么是死锁\n\n- [什么是死锁](#什么是死锁)\n\n### 出现死锁怎么办\n\n- [出现死锁怎么办](#出现死锁怎么办)\n\n#### 死锁等待\n\n- [死锁等待](#死锁等待)\n\n#### 死锁检测\n\n- [死锁检测（推荐）](#死锁检测（推荐）)\n\n### 死锁的出现场景\n\n#### MDL锁的死锁场景\n\n- [MDL锁的死锁场景](#MDL锁的死锁场景)\n  - 如何安全的给小表加索引\n\n#### 行锁的死锁场景\n\n- [行锁的死锁场景](#行锁的死锁场景)\n  - 热点行更新的性能问题\n\n#### 间隙锁的死锁场景\n\n- [间隙锁的死锁场景](#间隙锁的死锁场景)\n  - 任意锁住一行，如果这一行不存在的话就插入，如果存在这一行就更新它的数据\n\n#### next-key lock 的死锁场景\n\n- [案例八：一个死锁的例子（验证next-key lock =间隙锁+行锁）](#案例八：一个死锁的例子（验证next-key lock =间隙锁+行锁）)\n  - 加锁的粒度是next-key lock，但是实际上间隙锁和行锁是分开执行的\n\n### 怎么查看死锁\n\n通过一个简单的死锁，来分析死锁现场\n\n准备数据\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n按照下面的步骤语句\n\n| session A                                                    | session B                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>update t set d = 55 where c = 5;                  |                                                              |\n|                                                              | begin<br/>update t set d = 1010 where c = 10;                |\n| update t set d = 101010 where c = 10;<br/><font color='red'>blocked</font> |                                                              |\n|                                                              | update t set d = 555 where c = 5;<br/><font color='red'>ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</font> |\n| <font color='gree'>Query OK</font>                           |                                                              |\n\n\n\n执行命令：`show engine innodb status;`,会返回好多好多信息。\n\n其中有一段是：LATEST DETECTED DEADLOCK，表示的就是：记录的最后一次死锁信息（innoDB只会记录最后一次的死锁信息）。\n\n摘录如下：\n\n```sql\n------------------------\nLATEST DETECTED DEADLOCK\n------------------------\n2022-12-15 20:57:44 0x216c\n*** (1) TRANSACTION:\nTRANSACTION 1829, ACTIVE 63 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 5 lock struct(s), heap size 1128, 4 row lock(s), undo log entries 1\nMySQL thread id 11, OS thread handle 22644, query id 21 localhost ::1 root updating\nupdate t set d = 101010 where c = 10\n\n*** (1) HOLDS THE LOCK(S):\nRECORD LOCKS space id 7 page no 5 n bits 80 index c of table `xx`.`t` trx id 1829 lock_mode X\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 0\n 0: len 4; hex 80000005; asc     ;;\n 1: len 4; hex 80000005; asc     ;;\n\n\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 7 page no 5 n bits 80 index c of table `xx`.`t` trx id 1829 lock_mode X waiting\nRecord lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0\n 0: len 4; hex 8000000a; asc     ;;\n 1: len 4; hex 8000000a; asc     ;;\n\n\n*** (2) TRANSACTION:\nTRANSACTION 1830, ACTIVE 28 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 5 lock struct(s), heap size 1128, 4 row lock(s), undo log entries 1\nMySQL thread id 12, OS thread handle 14380, query id 22 localhost ::1 root updating\nupdate t set d = 555 where c = 5\n\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 7 page no 5 n bits 80 index c of table `xx`.`t` trx id 1830 lock_mode X\nRecord lock, heap no 4 PHYSICAL RECORD: n_fields 2; compact format; info bits 0\n 0: len 4; hex 8000000a; asc     ;;\n 1: len 4; hex 8000000a; asc     ;;\n\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 7 page no 5 n bits 80 index c of table `xx`.`t` trx id 1830 lock_mode X waiting\nRecord lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 0\n 0: len 4; hex 80000005; asc     ;;\n 1: len 4; hex 80000005; asc     ;;\n\n*** WE ROLL BACK TRANSACTION (2)\n```\n\n\n\n我们来看看其中的关键信息：\n\n这个结果分成三部分\n\n- (1) TRANSACTION，是第一个事务的信息\n- (2) TRANSACTION，是第二个事务的信息\n- WE ROLL BACK TRANSACTION (2)，是最终的处理结果，表示回滚了第二个事务。\n\n其他可以读取到的信息，这里就不在一一展示了。\n\n\n\n\n\n## 锁等待（间隙锁范围变大）\n\n### 什么是锁等待\n\n通俗的说，就是语句A的执行需要锁，但是锁此时被语句B持有，所以，语句A想要正常执行，就需要等待语句B释放锁；\n\n\n\n### 锁等待的出现场景\n\n#### delete语句导致的锁等待场景\n\n案例数据\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n| session A                                                    | session B                                                    |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| begin;<br/>select * from t where id > 10 and id <= 15 for update; |                                                              |\n|                                                              | delete from t where id = 10;<br/><font color='gree'>ok</font> |\n|                                                              | insert into t values (10,10,10);<br/><font color='red'>blocked</font> |\n\n\n\n- session A的语句锁的范围是：（ 10，15 ] （ 15， 20 ）\n- session B 执行delelte，因为10没有被锁，所以可以删掉。\n- 那么执行sessionB执行insert 10的时候，为什么发生了锁等待，导致阻塞呢？\n- 要想知道为什么，我们就要查看锁的信息，分析为什么产生锁等待。\n  - 结论先贴出来：session A 原本锁的范围是：（ 10，15 ] （ 15， 20 ），当 session B 的delete语句执行之后，锁的范围自动变成了：（ 5，15 ] （ 15， 20 ）\n\n\n\n#### update语句导致的锁等待场景\n\n案例数据\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n```\n\n\n\n| session A                                                  | session B                                                    |\n| ---------------------------------------------------------- | ------------------------------------------------------------ |\n| begin;<br/>select c from t where c > 5 lock in share mode; |                                                              |\n|                                                            | update t set c = 1 where c = 5;<br/><font color='gree'>ok</font> |\n|                                                            | update t set c = 5 where c = 1;<br/><font color='red'>blocked</font> |\n\n\n\n- session A 的语句是覆盖索引，锁的范围是：索引c上的 (5,10]、(10,15]、(15,20]、(20,25]和 (25,supremum]\n- session B 的一个更新语句，可以分为两步\n  - 插入 c = 1， id=5 的记录： c=1没有被锁，可以执行\n  - 删除 c = 5，id=5 的记录：c=5没有被锁，可以执行\n- 这个语句执行完之后，锁的范围会发生变化：(1,10]、(10,15]、(15,20]、(20,25]和 (25,supremum]\n- session B的第二个更新语句，可以分为两步\n  - 插入  c=5，id=5 的记录：因为c=5已经被锁了，所以阻塞了。\n  - 插入 c=1，id=5 的记录：\n\n\n\n### 怎么查看锁等待\n\n执行命令：`show engine innodb status;`,会返回好多好多信息。\n\n其中有一段是：TRANSACTIONS，里面包含了锁信息，我们可以通过分析这部分，得到为什么产生锁等待。\n\n摘录如下：\n\n```sql\n------------\nTRANSACTIONS\n------------\nTrx id counter 1871\nPurge done for trx's n:o < 1870 undo n:o < 0 state: running but idle\nHistory list length 0\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 283993830666896, not started\n0 lock struct(s), heap size 1128, 0 row lock(s)\n---TRANSACTION 283993830664568, not started\n0 lock struct(s), heap size 1128, 0 row lock(s)\n---TRANSACTION 283993830663792, not started\n0 lock struct(s), heap size 1128, 0 row lock(s)\n---TRANSACTION 1870, ACTIVE 9 sec inserting\nmysql tables in use 1, locked 1\nLOCK WAIT 2 lock struct(s), heap size 1128, 1 row lock(s)\nMySQL thread id 12, OS thread handle 14380, query id 79 localhost ::1 root update\ninsert into t values (10,10,10)\n------- TRX HAS BEEN WAITING 9 SEC FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 8 page no 4 n bits 80 index PRIMARY of table `xx`.`t` trx id 1870 lock_mode X locks gap before rec insert intention waiting\nRecord lock, heap no 5 PHYSICAL RECORD: n_fields 5; compact format; info bits 0\n 0: len 4; hex 8000000f; asc     ;;\n 1: len 6; hex 00000000073a; asc      :;;\n 2: len 7; hex 82000000860137; asc       7;;\n 3: len 4; hex 8000000f; asc     ;;\n 4: len 4; hex 8000000f; asc     ;;\n\n------------------\n---TRANSACTION 1866, ACTIVE 54 sec\n2 lock struct(s), heap size 1128, 1 row lock(s)\nMySQL thread id 11, OS thread handle 22644, query id 74 localhost ::1 root\n```\n\n\n\n在死锁日志里：\n\n- lock_mode X waiting：表示next-key lock； \n\n- lock_mode X locks rec but not gap：是只有行锁； \n\n- locks gap before rec：是只有间隙锁；\n\n通过分析以上日志：\n\n- 我们知道，由于 delete 操作把 id=10 这一行删掉了，原来的两个间隙 (5,10)、(10,15）变成了一个 (5,15)。\n- 也就是说：\n  - session A 原本锁的范围是：（ 10，15 ] （ 15， 20 ）\n  - 当 session B 的delete语句执行之后，锁的范围自动变成了：（ 5，15 ] （ 15， 20 ）\n- 这也就是：为什么 session B 的insert语句无法插入的原因了。\n\n\n\n\n\n## 主键自增锁\n\n\n\n### 什么是主键的自增锁\n\n我们知道主键是连续自增的，主键自增的实现逻辑是：\n\n- 每个表会有一个自增id（可以通过`show create table xx`语句查看，`AUTO_INCREMENT`表示的就是自增id）\n- 每个 insert 语句都会获取自增id作为自己的主键id，然后会把 自增id+1 在写到 `AUTO_INCREMENT`中\n- 接下来真正执行insert语句\n\n那么问题来了，如果是一个并发的 insert 语句，是有可能获取到相同的 自增id的，这样就会导致 insert 语句执行失败（主键冲突）。\n\n所以 mysql 为了避免两个事务申请到相同的自增 id，肯定要加锁，然后顺序申请。\n\n这里所加的锁，就是 主键自增锁。\n\n自增 id 锁并不是一个事务锁，而是**每次申请完就马上释放**，以便允许别的事务再申请\n\n\n\n### 主键自增锁的发展历史\n\nMySQL 5.0 ：自增锁的范围是语句级别。也就是说，如果一个语句申请了一个表自增锁，这个锁会等语句执行结束以后才释放。显然，这样设计会影响并发度。\n\nMySQL 5.1.22 ：引入了一个新策略，新增参数` innodb_autoinc_lock_mode`，默认值是 1。\n\n- 设置为0：表示采用之前 MySQL 5.0 版本的策略，即语句执行结束后才释放锁；\n- 设置为1：\n  - 普通 insert 语句，自增锁在申请之后就马上释放\n  - 类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；\n- 设置为2：所有的申请自增主键的动作都是申请后就释放锁\n- 在公司中，这个参数被设置为：2 ，配合binlog_format=ROW可以解决数据一致性的问题\n\n\n\n### insert语句的锁\n\n\n\n#### insert into ... values( ... )\n\n\n\n#### insert into ... select ...\n\n\n\n生产环境中，尽量不要使用，如果必须使用，一定要在后面的select中，加上where条件。\n\n因为这个语句在执行过程中，会对所有扫描到的记录加锁。\n\n这些被加锁的记录，在这个语句执行完之前，是执行不了的。\n\n\n\n#### insert into ... on duplicate key update ...\n\n插入一条记录，如果主键冲突了，则执行更新。\n\n\n\n\n\n## 残留的问题\n\ninsert语句中有很多的锁，比如：插入意向锁，本文没有细化；后续补充。。\n\n锁的内存结构，一个锁加上的时候，在内存中，是一个怎样的存在。。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["锁","mysql"],"categories":["JAVA","数据库","MYSQL"]},{"title":"Redis使用lua脚本删除匹配的key","url":"/note/JAVA/数据库/REDIS/Redis使用lua脚本删除匹配的key/","content":"\n\n\n\n\n## 问题\n\n最近生产环境的redis内存不足了，问题是因为redis的key的过期时间设置的太长了，当初设置了30天过期，但是在实际的运行中，发现redis每天内存占用率以5%的速度增长，当时正值封板期间，不能发布代码解决问题，所以使用了lua脚本来删除过期时间小于10天的数据\n\n\n\n## redis的配置\n\n>  3主3备(2G内存/分片)\n\n\n\n## 脚本\n\n脚本如下\n\n```redis\neval \"local function scanAndDel(cursor,loop_times,count) local loops = 0 repeat local res = redis.call('scan', cursor, 'match', '99*','COUNT', count) if (res ~= nil and #res >= 0) then redis.replicate_commands() cursor = tonumber(res[1]) loops = loops + 1 local ks = res[2] local key_num = #ks for i = 1, key_num, 1 do local k = tostring(ks[i]) local ttl_res = redis.call('ttl',k) local surplus_time = tonumber(ttl_res) if (surplus_time < 1296000) then redis.call('del', k) end end end until (cursor <= 0 or loops >= loop_times) return cursor end return scanAndDel(0,1000,1000)\" 0\n```\n\n对其中的lua脚本格式化之后如下：\n\n```lua\nlocal function scanAndDel(cursor,loop_times,count)\n    local loops = 0\n    repeat local res = redis.call('scan', cursor, 'match', '99*','COUNT', count)\n        if (res ~= nil and #res >= 0)\n        then\n            redis.replicate_commands()\n            cursor = tonumber(res[1])\n            loops = loops + 1\n            local ks = res[2]\n            local key_num = #ks\n            for i = 1, key_num, 1\n            do\n                local k = tostring(ks[i])\n                local ttl_res = redis.call('ttl',k)\n                local surplus_time = tonumber(ttl_res)\n                if (surplus_time < 1296000) then\n                    redis.call('del', k)\n                end\n            end\n        end\n    until (cursor <= 0 or loops >= loop_times)\n    return cursor\nend\nreturn scanAndDel(0,1000,1000)\n```\n\n脚本的逻辑\n\n- 定义一个方法`scanAndDel`三个参数的含义如下\n  - scan命令的游标\n  - 循环次数\n  - 每一次循环scan多少条记录\n\n\n\n\n\n## 缺陷\n\n上面的脚本会循环1000次，一次扫描1000个key，总共就是1千万个key，在实际的生产运行中，大概3S左右会执行完。\n\n```lua\n> eval \"local function scanAndDel(cursor,loop_times,count) local loops = 0 repeat local res = redis.call('scan', cursor, 'match', '99*','COUNT', count) if (res ~= nil and #res >= 0) then redis.replicate_commands() cursor = tonumber(res[1]) loops = loops + 1 local ks = res[2] local key_num = #ks for i = 1, key_num, 1 do local k = tostring(ks[i]) local ttl_res = redis.call('ttl',k) local surplus_time = tonumber(ttl_res) if (surplus_time < 1296000) then redis.call('del', k) end end end until (cursor <= 0 or loops >= loop_times) return cursor end return scanAndDel(0,1000,1000)\" 0\n15471832\n> eval \"local function scanAndDel(cursor,loop_times,count) local loops = 0 repeat local res = redis.call('scan', cursor, 'match', '99*','COUNT', count) if (res ~= nil and #res >= 0) then redis.replicate_commands() cursor = tonumber(res[1]) loops = loops + 1 local ks = res[2] local key_num = #ks for i = 1, key_num, 1 do local k = tostring(ks[i]) local ttl_res = redis.call('ttl',k) local surplus_time = tonumber(ttl_res) if (surplus_time < 1296000) then redis.call('del', k) end end end until (cursor <= 0 or loops >= loop_times) return cursor end return scanAndDel(0,1000,1000)\" 0\n6702980\n```\n\n但是随后而来的就是 **告警**\n\n```java\n\t\n2022-11-14T14:05:19.616+0800|ERROR|consumer-task-AGING_WARN_SCAN_INFO~~AGING_EYE_WARN_SCAN_INFO_CONSUMER-1|com.xxxx.fw.aging.eye.service.AgingCollectServiceImpl||collectLastScanSite error code 9901010001 siteId 11500 exeption io.lettuce.core.RedisCommandTimeoutException: Command timed out after 3 second(s)com.xxxx.framework.cacheproxy.CPException: io.lettuce.core.RedisCommandTimeoutException: Command timed out after 3 second(s)\nat com.xxxx.framework.cacheproxy.redis.RedisCache.call(RedisCache.java:1110)\nat com.xxxx.framework.cacheproxy.redis.RedisCache.setString(RedisCache.java:133)\nat com.xxxx.fw.aging.eye.service.AgingCollectServiceImpl.collectLastScanSite(AgingCollectServiceImpl.java:270)\nat com.xxxx.fw.aging.eye.service.AgingCollectServiceImpl.processScan(AgingCollectServiceImpl.java:263)\nat com.xxxx.fw.aging.eye.service.AgingCollectServiceImpl$$FastClassBySpringCGLIB$$79e7af70.invoke(<generated>)\nat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\nat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)\nat com.xxxx.fw.aging.eye.service.AgingCollectServiceImpl$$EnhancerBySpringCGLIB$$c5b443aa.processScan(<generated>)\nat com.xxxx.fw.aging.eye.kafka.AgingScanConsumer.onMessageProcess(AgingScanConsumer.java:24)\nat com.xxxx.fns.kafka.base.AbstractKafkaCompensateListener.onMessage(AbstractKafkaCompensateListener.java:37)\nat com.xxxx.kafka.api.consume.MessageConverListener.onMessage$original$NTmK7AJg(MessageConverListener.java:27)\nat com.xxxx.kafka.api.consume.MessageConverListener.onMessage$original$NTmK7AJg$accessor$rIclUBpU(MessageConverListener.java)\nat com.xxxx.kafka.api.consume.MessageConverListener$auxiliary$eJDIueqp.call(Unknown Source)\nat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)\nat com.xxxx.kafka.api.consume.MessageConverListener.onMessage(MessageConverListener.java)\nat com.xxxx.kafka.api.client.KafkaConsumer24$ConsumeTask.run(KafkaConsumer24.java:299)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat java.util.concurrent.FutureTask.run(FutureTask.java:266)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\nat java.lang.Thread.run(Thread.java:748)\nCaused by: io.lettuce.core.RedisCommandTimeoutException: Command timed out after 3 second(s)\nat io.lettuce.core.ExceptionFactory.createTimeoutException(ExceptionFactory.java:51)\nat io.lettuce.core.LettuceFutures.awaitOrCancel(LettuceFutures.java:114)\nat io.lettuce.core.cluster.ClusterFutureSyncInvocationHandler.handleInvocation(ClusterFutureSyncInvocationHandler.java:123)\nat io.lettuce.core.internal.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:80)\nat com.sun.proxy.$Proxy153.setex(Unknown Source)\nat com.xxxx.framework.cacheproxy.redis.RedisCache.lambda$setString$9(RedisCache.java:137)\nat com.xxxx.framework.cacheproxy.redis.RedisCache.call(RedisCache.java:1108)\n... 20 common frames omitted\n```\n\n告警信息中可以看出，我在通过lua脚本删除key的过程中，应用的redis连接不上了。\n\n究其原因，是因为lua脚本执行的时候，会阻塞其他的命令。\n\n因为redis是单线程的呀，所以会阻塞。\n\n\n\n### 测试\n\n在单实例中， 新建一个 key ， 然后执行一个需要消耗长时间的lua脚本\n\n```lua\neval \"local a=redis.call('hget','test1','name') local b=1 repeat b=b+1 until(b>100000000000000) return a\" 0\n```\n\n然后开启另一个终端， 执行查询操作 `keys *`\n\n```text\nlocal:0>keys *\n\"BUSY Redis is busy running a script. You can only call SCRIPT KILL or SHUTDOWN NOSAVE.\"\n```\n\nredis 提示 有脚本正在运行， 只能使用 `SCRIPT KILL` 或 `SHUTDOWN NOSAVE` 命令终止脚本运行。\n\n### 总结\n\nlua 确实可以增强 redis 的操作，方便在代码中写循环语句操作 redis， 同时要注意在 单实例的 redis 中， 要评估 lua 脚本的开销， 最好是在 redis 集群中使用 redis， 则 lua 不影响 redis 的读写性能","tags":["redis","lua"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redis基本类型与底层实现","url":"/note/JAVA/数据库/REDIS/Redis基本类型与底层实现/","content":"\n![image-20230526175345576](Redis基本类型与底层实现.assets/image-20230526175345576.png)\n\n## Redis底层数据结构\n\n\n\n### redisObject\n\nRedis使用对象来表示所存储的key和value，每次在Redis中存储一个k-v的时候，Redis至少会创建两个对象\n\n- 一个用来表示k的键对象\n- 一个用来表示v的值对象\n\nRedis中的每一个对象都是由 redisObject 结构来表示\n\n```c\ntypedef struct redisObject {\n    // 类型\n    unsigned type:4;\n    // 编码\n    unsigned encoding:4;\n    // 指向底层实现数据结构的指针\n    void *ptr;\n    // ...\n} robj;\n```\n\n\n\n#### type\n\ntype属性记录了对象的类型\n\n```c\n/* The actual Redis Object */\n#define OBJ_STRING 0    /* String object. */\n#define OBJ_LIST 1      /* List object. */\n#define OBJ_SET 2       /* Set object. */\n#define OBJ_ZSET 3      /* Sorted set object. */\n#define OBJ_HASH 4      /* Hash object. */\n```\n\n\n\n#### encoding\n\nencoding属性记录了对象所使用的编码，也即是说这个对象使用了什么数据结构作为对象的底层实现\n\n```c\n/* Objects encoding. Some kind of objects like Strings and Hashes can be\n * internally represented in multiple ways. The 'encoding' field of the object\n * is set to one of this fields for this object. */\n#define OBJ_ENCODING_RAW 0     /* Raw representation */ //对应简单动态字符串\n#define OBJ_ENCODING_INT 1     /* Encoded as integer */ //long类型的整数\n#define OBJ_ENCODING_HT 2      /* Encoded as hash table */  //字典\n#define OBJ_ENCODING_ZIPMAP 3  /* Encoded as zipmap */  //已淘汰\n#define OBJ_ENCODING_LINKEDLIST 4 /* No longer used: old list encoding. */ //之前是用来实现Redis List类型的，目前已淘汰\n#define OBJ_ENCODING_ZIPLIST 5 /* Encoded as ziplist */ //压缩列表\n#define OBJ_ENCODING_INTSET 6  /* Encoded as intset */  //整数集合\n#define OBJ_ENCODING_SKIPLIST 7  /* Encoded as skiplist */  //跳表\n#define OBJ_ENCODING_EMBSTR 8  /* Embedded sds string encoding */ //embstr编码的简单动态字符串\n#define OBJ_ENCODING_QUICKLIST 9 /* Encoded as linked list of ziplists */ //快表，它替代了LINKEDLIST用来实现Redis的List类型\n#define OBJ_ENCODING_STREAM 10 /* Encoded as a radix tree of listpacks */\n```\n\n以上是Redis5.0.7源码中定义的编码，其中有些编码目前已经被淘汰了，比如：ZIPMAP，LINKEDLIST\n\n《Redis设计与实现》这本书上还在讲 LINKEDLIST，其实已经被淘汰了。\n\n\n\n**type和encoding之间的关系**\n\n每种类型的对象都至少使用了两种不同的编码；\n\n也就是说 每一个type至少对应两个 encoding\n\n下面这张图来自《Redis设计与实现》，其中REDIS_LIST的编码：REDIS_ENCODING_LINKEDLIST 已经被 REDIS_ENCODING_QUICKLIST 取代了。 \n\n<img src=\"Redis基本类型与底层实现.assets/image-20230513113049051.png\" alt=\"image-20230513113049051\" style=\"zoom:67%;\" />\n\n\n\n#### ptr\n\n指向底层实现数据结构的指针\n\n\n\n#### 总结\n\nRedis实现了五种类型，这五种类型对应了多种编码 encoding，具体的编码encoding见上表\n\n这些编码对应底层就是一些数据结构，我们抽几个重点看一看\n\n- 简单动态字符串\n- 字典\n- 跳表\n- 整数集合\n- 压缩列表\n\n而以上所说的这些数据结构，其实就是Redis的5种数据类型的底层实现原理，掌握了这些数据结构，就能明白Redis的底层是怎么实现的。\n\n\n\n\n\n### 简单动态字符串 Simple Dynamic String\n\nRedis没有使用C语言默认提供的字符串类型，而是自己实现了一个名叫 简单动态字符串（Simple Dynamic String）简称 SDS 的结构，用于表示字符串。\n\n\n\n#### SDS的结构\n\nSDS 的定义比较简单，只有一个结构\n\n在`sds.h/sdshdr`\n\n```c\nstruct sdshdr {\n    // 记录buf数组中已使用字节的数量\n    // 等于SDS所保存字符串的长度\n    int len;\n    // 记录buf数组中未使用字节的数量\n    int free;\n    // 字节数组，用于保存字符串\n    char buf[];\n};\n```\n\nSDS的图示结构\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230515111311549.png\" alt=\"image-20230515111311549\" style=\"zoom: 67%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMnNkc2hkciUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjMwJTIyJTIweSUzRCUyMjIxMCUyMiUyMHdpZHRoJTNEJTIyOTAlMjIlMjBoZWlnaHQlM0QlMjIzMCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwJTNCZW50cnlZJTNEMC41JTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNCUyMiUyMHRhcmdldCUzRCUyMjE0JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwdmFsdWUlM0QlMjJmcmVlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjMwJTIyJTIweSUzRCUyMjI0MCUyMiUyMHdpZHRoJTNEJTIyOTAlMjIlMjBoZWlnaHQlM0QlMjIzMCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjUlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0JlbnRyeVglM0QwJTNCZW50cnlZJTNEMC41JTNCZW50cnlEeCUzRDAlM0JlbnRyeUR5JTNEMCUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyNiUyMiUyMHRhcmdldCUzRCUyMjE1JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2JTIyJTIwdmFsdWUlM0QlMjJsZW4lRUYlQkMlOUE0JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjMwJTIyJTIweSUzRCUyMjI3MCUyMiUyMHdpZHRoJTNEJTIyOTAlMjIlMjBoZWlnaHQlM0QlMjIzMCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjclMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCY3VydmVkJTNEMSUzQiUyMiUyMGVkZ2UlM0QlMjIxJTIyJTIwc291cmNlJTNEJTIyOCUyMiUyMHRhcmdldCUzRCUyMjklMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjglMjIlMjB2YWx1ZSUzRCUyMmJ1ZiU1QiU1RCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjIzMCUyMiUyMHklM0QlMjIzMDAlMjIlMjB3aWR0aCUzRCUyMjkwJTIyJTIwaGVpZ2h0JTNEJTIyMzAlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI5JTIyJTIwdmFsdWUlM0QlMjInbiclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIzOTAlMjIlMjB5JTNEJTIyMzA1JTIyJTIwd2lkdGglM0QlMjIzMCUyMiUyMGhlaWdodCUzRCUyMjIwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTAlMjIlMjB2YWx1ZSUzRCUyMidhJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjQyMCUyMiUyMHklM0QlMjIzMDUlMjIlMjB3aWR0aCUzRCUyMjMwJTIyJTIwaGVpZ2h0JTNEJTIyMjAlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMSUyMiUyMHZhbHVlJTNEJTIybSclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI0NTAlMjIlMjB5JTNEJTIyMzA1JTIyJTIwd2lkdGglM0QlMjIzMCUyMiUyMGhlaWdodCUzRCUyMjIwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTIlMjIlMjB2YWx1ZSUzRCUyMidlJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjQ4MCUyMiUyMHklM0QlMjIzMDUlMjIlMjB3aWR0aCUzRCUyMjMwJTIyJTIwaGVpZ2h0JTNEJTIyMjAlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMyUyMiUyMHZhbHVlJTNEJTIyJyU1QzAnJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNTEwJTIyJTIweSUzRCUyMjMwNSUyMiUyMHdpZHRoJTNEJTIyMzAlMjIlMjBoZWlnaHQlM0QlMjIyMCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE0JTIyJTIwdmFsdWUlM0QlMjIlRTQlQjglQkEwJUU3JTlBJTg0JUU2JTk3JUI2JUU1JTgwJTk5JUVGJUJDJThDJUU4JUExJUE4JUU3JUE0JUJBJUU1JUJEJTkzJUU1JTg5JThEJTIwc2RzaGRyJTIwJUU1JUI5JUI2JUU2JUIyJUExJUU2JTlDJTg5JUU1JTg4JTg2JUU5JTg1JThEJUU0JUJCJUJCJUU0JUJEJTk1JUU3JUE5JUJBJUU5JTk3JUI0JTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRG5vbmUlM0JmaWxsQ29sb3IlM0Rub25lJTNCYWxpZ24lM0RsZWZ0JTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzY5JTIyJTIweSUzRCUyMjIwNSUyMiUyMHdpZHRoJTNEJTIyMjcyJTIyJTIwaGVpZ2h0JTNEJTIyMjAlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxNSUyMiUyMHZhbHVlJTNEJTIyJUU4JUExJUE4JUU3JUE0JUJBJUU1JUJEJTkzJUU1JTg5JThEJTIwc2RzaGRyJTIwJUU2JTg5JTgwJUU1JTg1JUIzJUU4JTgxJTk0JUU3JTlBJTg0JUU1JUFEJTk3JUU3JUFDJUE2JUU0JUI4JUIyJUU3JTlBJTg0JUU1JUFEJTk3JUU4JThBJTgyJUU5JTk1JUJGJUU1JUJBJUE2JTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRG5vbmUlM0JmaWxsQ29sb3IlM0Rub25lJTNCYWxpZ24lM0RsZWZ0JTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzc2JTIyJTIweSUzRCUyMjI0NyUyMiUyMHdpZHRoJTNEJTIyMjcyJTIyJTIwaGVpZ2h0JTNEJTIyMjAlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDJTJGcm9vdCUzRSUzQyUyRm14R3JhcGhNb2RlbCUzRQ==\n```\n\n其中：\n\n- len：表示当前 sdshdr 所关联的的字符串的字节长度，不包括后面的 '\\0'\n- buf：是一个字节数组，表示当前 sdshdr 真正关联的字符串的数据，结尾固定会有'\\0'，表示字符串结束\n\n\n\n#### 为什么要有SDS\n\n- C字符串不记录自身的长度信息，对C来说想获取一个字符串的长度，复杂度是O(N)，对于Redis来说，复杂度是O(1)\n- 杜绝缓冲区溢出\n- 二进制安全\n- 等等，我觉得这里不重要，就不总结了。\n\n\n\n#### SDS在Redis中用法\n\nSDS 在Redis中只是 字节数组 的表现形式；比如我们在 clinet 的源码中也可以看到sds变量，这里的sds就是字节数组；\n\n另外SDS在Redis中还用来实现String类型的底层数据结构。\n\n也就是说当Redis类型是String类型的时候，它的底层数据结构就是SDS，如下图：\n\n![image-20230515183139265](Redis基本类型与底层实现.assets/image-20230515183139265.png)\n\n举个例子，比如当执行下面的语句的时候：\n\n```sh\nSET k1 hello\n```\n\nRedis将在数据库中创建一个新的键值对，其中：\n\n- 键值对的键是一个字符串对象，对象的底层实现是一个保存着字符串“k1”的SDS\n- 键值对的值也是一个字符串对象，对象的底层实现是一个保存着字符串“hello”的SDS。\n\n```sh\nLPUSH k2 a b c\n```\n\nRedis将在数据库中创建一个新的键值对，其中：\n\n- 键值对的键是一个字符串对象，对象的底层实现是一个保存了字符串“k2”的SDS。\n- 键值对的值是一个列表对象，列表对象包含了三个字符串对象，这三个字符串对象分别由三个SDS实现：第一个SDS保存着字符串“a”，第二个SDS保存着字符串“b”，第三个SDS保存着字符串“c”。\n\n\n\n### 链表  List（已废弃）\n\n链表是一种很常见的数据结构，但是在 C 语言中，并没有内置这种结构，所以Redis自己实现了自己的链表。\n\n#### 链表的构成\n\n链表的构成分为两部分\n\n- 链表本身的结构定义\n- 链表中链表节点的结构定义\n\n链表本身的结构定义是在：`adlist.h/list`\n\n```c\ntypedef struct list {\n    // 表头节点\n    listNode * head;\n    // 表尾节点\n    listNode * tail;\n    // 链表所包含的节点数量\n    unsigned long len;\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n    // 节点值释放函数\n    void (*free)(void *ptr);\n    // 节点值对比函数\n    int (*match)(void *ptr,void *key);\n} list;\n```\n\n链表节点的定义是在`adlist.h/listNode`\n\n```c\ntypedef struct listNode {\n    // 前置节点\n    struct listNode * prev;\n    // 后置节点\n    struct listNode * next;\n    // 节点的值\n    void * value;\n}listNode;\n```\n\n链表的结构图\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230514145534373.png\" alt=\"image-20230514145534373\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n#### 链表的特点\n\n- 双端\n- 无环\n- 带表头指针和表尾指针\n- 带链表长度计数器\n- 多态\n\n\n\n#### 链表在Redis中的用法\n\n之前是用来实现 List 类型的，不过在后续的版本中已经被删除了。\n\n至于哪个版本删除的，我就不知道了。至少我看的5.0.7版本中实现List类型的已经是：Quick List 和 Zip List 了。\n\n\n\n### 快表 Quick List\n\n#### quickList和linkedList有什么区别\n\n在 Redis 中，quicklist 是一种特殊的数据结构，它是由多个 ziplist 组成的列表（List），可以支持快速的插入、删除和索引操作。而 linkedlist 则是传统的链表（Linked List）数据结构，可以支持灵活的添加、删除和遍历等操作。\n\n具体来说，quicklist 和 linkedlist 的主要区别有：\n\n1. 存储方式：quicklist 是由多个 ziplist 组成的连续内存块，而 linkedlist 是由多个节点组成的离散内存块。\n2. 内存占用：quicklist 可以通过 ziplist 压缩机制来减少内存占用，而 linkedlist 则需要额外的指针空间来存储节点之间的关系，因此通常会占用更多的内存。\n3. 访问效率：quicklist 支持快速的随机访问和范围查找等操作，而 linkedlist 则需要遍历每一个节点才能进行访问或者查找。\n4. 插入和删除效率：quicklist 可以通过将新元素插入到 ziplist 的头部或尾部来实现常数级的插入和删除操作，而 linkedlist 则需要先查找到指定位置的节点，然后修改指针指向，因此插入和删除操作的时间复杂度为 O(n)。\n\n总的来说，quicklist 是一种通过压缩机制来减少内存占用，并支持快速访问、插入和删除等操作的高效数据结构，适用于存储数据量较大、访问频繁的场景。而 linkedlist 则更适合于存储数据量较小、插入和删除频繁的场景，具有灵活性和可扩展性。\n\n\n\n### 压缩列表 Zip List\n\n压缩列表是Redis为了节约内存而开发的，是有一系列特殊编码的连续内存块组成的顺序性数据结构。\n\n一个压缩列表可以包含任意多个Entry节点，每个Entry节点可以保存**一个字节数组或者一个整数值**。\n\n\n\n#### 压缩列表的构成\n\n压缩列表的构成分为两部分\n\n- 一个是表示压缩列表的结构\n- 一个是表示压缩列表中数据存放节点的结构\n\n下面先看：压缩列表的结构\n\n![image-20230513142554570](Redis基本类型与底层实现.assets/image-20230513142554570.png)\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMnpsYnl0ZXMlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi04NSUyMiUyMHklM0QlMjItODglMjIlMjB3aWR0aCUzRCUyMjc1JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwdmFsdWUlM0QlMjJ6bHRhaWwlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMCUyMiUyMHklM0QlMjItODglMjIlMjB3aWR0aCUzRCUyMjcyJTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwdmFsdWUlM0QlMjJ6bGxlbiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNjIlMjIlMjB5JTNEJTIyLTg4JTIyJTIwd2lkdGglM0QlMjI2OCUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNSUyMiUyMHZhbHVlJTNEJTIyZW50cnktMSUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjEzMCUyMiUyMHklM0QlMjItODglMjIlMjB3aWR0aCUzRCUyMjcwJTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2JTIyJTIwdmFsdWUlM0QlMjJlbnRyeS0yJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjAwJTIyJTIweSUzRCUyMi04OCUyMiUyMHdpZHRoJTNEJTIyNjclMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjclMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjI2NyUyMiUyMHklM0QlMjItODglMjIlMjB3aWR0aCUzRCUyMjY3JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4JTIyJTIwdmFsdWUlM0QlMjJlbnRyeS1OJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzM0JTIyJTIweSUzRCUyMi04OCUyMiUyMHdpZHRoJTNEJTIyNjclMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjklMjIlMjB2YWx1ZSUzRCUyMnpsZW5kJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI0MDElMjIlMjB5JTNEJTIyLTg4JTIyJTIwd2lkdGglM0QlMjI2NyUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n其中：\n\n- zlbytes： 保存当前链表所占用的字节数\n- zltail : 保存了当前链表中的尾结点所在的内存地址\n- zllen：保存了当前链表中有多少个Entry节点\n- entry-N: 当前链表中保存的真实数据。\n- zlend：用于标记当前链表的最后一个节点\n\n\n\n然后我们来看看压缩列表中数据存放节点的结构\n\n每个压缩列表节点可以**保存一个字节数组，或者一个整数值**。\n\n![image-20230513142909376](Redis基本类型与底层实现.assets/image-20230513142909376.png)\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMnByZXZpb3VzX2VudHJ5X2xlbmd0aCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTg1JTIyJTIweSUzRCUyMi04OCUyMiUyMHdpZHRoJTNEJTIyMTM2JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzJTIyJTIwdmFsdWUlM0QlMjJlbmNvZGluZyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNTElMjIlMjB5JTNEJTIyLTg4JTIyJTIwd2lkdGglM0QlMjI3MiUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNCUyMiUyMHZhbHVlJTNEJTIyY29udGVudCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMTIzJTIyJTIweSUzRCUyMi04OCUyMiUyMHdpZHRoJTNEJTIyNzIlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0MlMkZyb290JTNFJTNDJTJGbXhHcmFwaE1vZGVsJTNF\n```\n\n\n\n其中：\n\n- previous_entry_length : 记录了当前节点的前一个节点的长度\n  - 好处是当我们拿到当前节点，通过当前节点的起始位置就可以快速计算出上一个节点的起始位置。\n  - 当上一个节点的大小超过254字节的时候，则 previous_entry_length 需要使用5个字节来存储；否则只需要 1 个字节来存储\n- encoding：记录了当前节点中content属性所保存的数据的类型以及长度\n- content：保存了当前节点的值，节点值可以是**一个字节数组或者整数**\n\n\n\n##### 解释节点值可以保存一个字节数据或者整数\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230514143801605.png\" alt=\"image-20230514143801605\" style=\"zoom:67%;\" />\n\n```base64\\n```\n\n\n\n#### 连续更新的问题\n\n上面说了：previous_entry_length 这个属性的特点：\n\n- 记录了当前节点的前一个节点的长度\n- 当上一个节点的大小超过254字节的时候，则 previous_entry_length 需要使用5个字节来存储；否则只需要 1 个字节来存储\n\n那就会导致一个问题：就是连锁更新的问题。\n\n什么问题呢？\n\n假设目前链表中存储了好多好多的节点，我们设想一种极端的情况：每一个节点的长度都刚刚好 = 254个字节，那么每一个节点的 previous_entry_length 都只占用1个字节。\n\n现在假设，我们要对第 1 个节点进行更新，更新之后，第 1 个节点的长度就超过了254个字节。\n\n然后第 2 个节点发现第 1 个节点的长度此时超过了254个字节，那么第 2 个节点中的 previous_entry_length 数据就要扩容：从 1 字节 扩容为 5 字节；\n\n但是呢，第2个节点中的 previous_entry_length 扩容之后，第 2 个节点的长度就超过了254个字节。\n\n所以第 3 个节点也要扩容；第 4 个节点.... \n\n\n\n这都导致了连续更新的时候，此时必然会影响性能。\n\n那么怎么办呢？\n\n\n\n##### 连续更新的解决办法\n\n其实不需要特殊的处理，虽然我们无法避免连续更新的问题存在，但是偶尔几个节点的连续更新，对性能是没有太大的影响的。\n\n像我们上面所说的那种极端情况，一般是不会出现的。\n\n\n\n#### 压缩列表在Redis中的用法\n\nList类型的底层实现之一\n\nHash类型的底层实现之一\n\nSortedSet类型的底层实现之一\n\n\n\n### 字典 Hash Table\n\n#### 字典的构成\n\n在底层实现中，字典的结构如下\n```c\ntypedef struct dict {\n    // 类型特定函数\n    dictType *type;\n    // 私有数据\n    void *privdata;\n    // 哈希表\n    dictht ht[2];\n    // rehash索引\n    //当rehash不在进行时，值为-1\n    in trehashidx; /* rehashing not in progress if rehashidx == -1 */\n} dict;\n```\n\n其中`*type`表示：保存了一组用于操作特定类型键值对的函数\n\n其中`*privdata`表示：是一个可选参数，谁的参数呢？是需要传给`*type`所表示的函数的可选参数\n\n其中`ht[2]`表示：是一个数组，什么数组呢？是一个哈希表（Hash Table）的数据，这里的[2]表示这个哈希表数据有2个位置，它的固定值就是2，不会是其他的值。在正常情况下，Redis只会使用ht[0]，而 ht[1]是用来rehash的时候才用的。\n\n其中`trehashidx`表示：目前rehash的进度，如果是-1表示没有在rehash\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230513124644320.png\" alt=\"image-20230513124644320\" style=\"zoom: 50%;\" />\n\n```base64\\n```\n\n\n\n然后我们再来看其中的`ht[2]`，这个哈希表数组到底是什么？\n\n`dict.h/dictht`：定义了Hash表的整体结构\n\n```c\ntypedef struct dictht {\n    // 哈希表数组：存的是dictEntry\n    dictEntry **table;\n    // 哈希表大小\n    unsigned long size;\n    //哈希表大小掩码，用于计算索引值\n    //总是等于size-1\n    unsigned long sizemask;\n    // 该哈希表已有节点的数量\n    unsigned long used;\n} dictht;\n```\n\n`dict.h/dictEntry`：定义了哈希表中的节点的结构\n\n```c\ntypedef struct dictEntry {\n    // 键\n    void *key;\n    // 值\n    union{\n        void *val;\n        uint64_tu64;\n        int64_ts64;\n    } v;\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n} dictEntry;\n```\n\n其中 key 是一个值指针，指向 key 对应的redisObject\n\n其中 value 是一个结构体，结构体中也有一个 val 的指针，指向 value 对应的 redisObject\n\n\n\n最后，我们把上面出现的：type，privdata，哈希表数组ht，哈希表的定义dictht，哈希表中存的哈希节点dictEntry汇总起来，就是下面的结构：\n\n- 其中 dictEntry 中的 key 和 value 就是我们在[redisObject](#redisObject)中说的，分别对应一个 redisObject；\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517104555924.png\" alt=\"image-20230517104555924\" style=\"zoom: 67%;\" />\n\n```base64\\n```\n\n\n\n#### Hash冲突的问题\n\n为什么会产生Hash冲突\n\n由于 Redis 中的 Hash类型 会对 key 进行 hash 之后，得到 hash 值，然后存到 hashTable 中；这里说的 hashTable 对应上图中的 dictEntry[] 这个hash表\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517105138754.png\" alt=\"image-20230517105138754\" style=\"zoom:67%;\" />\n\n```base64\\n```\n\n\n\n这个过程由于 hash函数 的存在，就有可能导致对不同的 key 进行 hash 之后，得到的结果是一样的；它俩都要往 hashTable的同一个位置存储。就导致了冲突\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230512114909758.png\" alt=\"image-20230512114909758\" style=\"zoom: 50%;\" />\n\n#### 怎么解决hash冲突\n\n有两个角度来解决hash冲突；Redis分别使用了这两个办法\n\n- 算法优化：尽可能的优化 hash 函数，降低hash冲突的发生率；\n- 链地址法：如果还是发生了Hash冲突，在Redis中使用的办法是：将数据抽象为链表，解决hash冲突。\n\n\n\n#### redis解决hash冲突一：算法优化\n\n- 使用 MurmurHash 算法；\n\n##### MurmurHash算法介绍\n\nMurmurHash算法最初由Austin Appleby于2008年发明；优点在于，即使输入的键是有规律的，算法仍能给出一个很好的随机分布性，并且算法的计算速度也非常快。\n\n##### **算法的基本流程**\n\nMurmurHash算法有多个版本，每个版本都有变化，但是主体流程是没有变化的\n\n1、初始化一个随机数，为后续的哈希计算提供了一个随机性来源，降低哈希冲突的概率\n\n2、将输入数据按照特定规则进行拆分，拆分成一块一块的数据\n\n3、对拆分后的每一块数据通过Hash函数（位运算、乘法、异或等操作）进行处理，产生新的哈希值\n\n4、将得到所有数据块的哈希值再进行一次特定的混淆处理，最终生成最终的哈希值\n\n##### **MurmurHash算法各个版本区别**\n\nMurmurHash1：最初始的版本，Hash函数相对简单，Hash冲突率较高\n\nMurmurHash2【Redis采用的】：主要改进：对Hash函数进行了增强\n\nMurmurHash3：主要改进：对拆分的逻辑进行的改进；主要改进：对hash函数进一步增强\n\n#### redis解决hash冲突二：链地址法\n\n什么是链地址法\n\n就是当发生了hash冲突的时候，将冲突的key生成链表的方式进行保存。\n\n如下图就是链地址法\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517105759302.png\" alt=\"image-20230517105759302\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n#### redis解决hash冲突三：线性探测法\n\n当产生hash冲突的时候，查找当前table的下一个位置是否空着，空着，就放在这里。不空着，继续找下一个。\n\n主要用到解决 Hash 类型的 field 的 hash 冲突。\n\n具体参考：《Redis源码分析之命令的处理流程》\n\n\n\n#### rehash（渐进式rehash）\n\n随着操作的不断执行，哈希表保存的键值对会逐渐地增多或者减少，为了让哈希表的负载因子（load factor）维持在一个合理的范围之内，当哈希表保存的键值对数量太多或者太少时，程序需要对哈希表的大小进行相应的扩展或者收缩。\n\n负载因子 = 当前Hash表中的数据 / hash表可以存的总数据\n\n举一个例子，假设我们有一个大小为 16 的哈希表，并将其填满了 8 个元素，此时哈希表的负载因子为 0.5。如果现在向该哈希表中插入一个新元素，并且这个元素对应的桶已经被占用，那么哈希表中已使用桶的数量将增加到 9，负载因子将变为 0.5625（9/16）。如果这个操作导致负载因子超过设定的阈值（如 0.75），则需要进行 rehash 操作，此时系统会创建一个更大的哈希表，并将原始哈希表中的所有元素重新计算哈希值后插入到新的哈希表中。在此过程中，哈希表的总桶数会增加，使得负载因子恢复到合理范围内。\n\n渐进式rehash的过程，字典会同时使用ht[0]和ht[1]两个哈希表，在rehash进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表上的所有键值对rehash到ht[1]，随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash至ht[1]。\n\n\n\n#### 字典在Redis中的用法\n\n当 redis 在启动的时候，会初始化 16 个 redisDb 启动时，会默认创建多个字典dict，这个字段是用来存放当前db中所有的k-v键值对的。\n\n以下的 redisDb 的结构，可以看到其中包含了多个 字典dict；\n\n```c\n/* Redis database representation. There are multiple databases identified\n * by integers from 0 (the default database) up to the max configured\n * database. The database number is the 'id' field in the structure. */\ntypedef struct redisDb {\n    dict *dict;                 /* The keyspace for this DB */\n    dict *expires;              /* Timeout of keys with a timeout set */\n    dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP)*/\n    dict *ready_keys;           /* Blocked keys that received a PUSH */\n    dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */\n    int id;                     /* Database ID */\n    long long avg_ttl;          /* Average TTL, just for stats */\n    list *defrag_later;         /* List of key names to attempt to defrag one by one, gradually. */\n} redisDb;\n```\n\n\n\n另外，字典dict也是实现 Hash类型 的底层数据结构之一。\n\n另外，字典dict也是实现 Set类型 的底层数据结构之一。\n\n\n\n### 跳表 Skip List\n\n跳表是一种有序数据结构，它的复杂度平均是 O(logN)，最差复杂度是 O(N)。\n\n简单的说，跳表的每个节点都维护了多个指向其他节点的指针，这样通过任意一个节点可以跳来跳去，就是跳表\n\n\n\n#### 跳表的结构\n\nRedis的跳跃表由`redis.h/zskiplistNode`和`redis.h/zskiplist`两个结构定义，其中`zskiplistNode`结构用于表示跳跃表节点，而`zskiplist`结构则用于保存跳跃表节点的相关信息，比如节点的数量，以及指向表头节点和表尾节点的指针等等。\n\n`redis.h/zskiplist`定义了一个跳表\n\n```c\ntypedef struct zskiplist {\n    // 表头节点和表尾节点\n    structz skiplistNode *header, *tail;\n    // 表中节点的数量\n    unsigned long length;\n    // 表中层数最大的节点的层数\n    int level;\n} zskiplist;\n```\n\n`redis.h/zskiplistNode`定义了跳表中的节点\n\n```c\ntypedef struct zskiplistNode {\n    // 层\n    struct zskiplistLevel {\n        // 前进指针\n        struct zskiplistNode *forward;\n        // 跨度\n        unsigned int span;\n    } level[];\n    // 后退指针\n    struct zskiplistNode *backward;\n    // 分值\n    double score;\n    // 成员对象\n    robj *obj;\n} zskiplistNode;\n```\n\n\n\n#### 跳表在Redis中的用法\n\nRedis只在两个地方用到了跳跃表，一个是作为SortSet类型的底层数据实现结构；另一个是在集群节点中用作内部数据结构，除此之外，跳跃表在Redis里面没有其他用途。\n\n\n\n### 整数集合\n\n整数集合是只能用来保存整数的，而且可以保证没有重复元素的数据结构。在Redis中，是用来实现 Set类型 的底层数据结构之一。\n\n#### 整数集合的构成\n\n`intset.h/intset`结构表示一个整数集合\n\n```c\ntypedef struct intset {\n    // 编码方式\n    uint32_t encoding;\n    // 集合包含的元素数量\n    uint32_t length;\n    // 保存元素的数组\n    int8_t contents[];\n} intset;\n```\n\n其中\n\n- contents数组是整数集合的底层实现：整数集合的每个元素都是contents数组的一个数组项（item），各个项在数组中按值的大小从小到大有序地排列，并且数组中不包含任何重复项。\n- length属性记录了整数集合包含的元素数量，也即是contents数组的长度。\n- encnding表示当前整数数组的类型，它有三个值\n  - INTSET_ENC_INT16，那么contents就是一个int16_t类型的数组，数组里的每个项都是一个int16_t类型的整数值（最小值为-32768，最大值为32767）\n  - INTSET_ENC_INT32，那么contents就是一个int32_t类型的数组，数组里的每个项都是一个int32_t类型的整数值（最小值为-2147483648，最大值为2147483647）。·\n  - INTSET_ENC_INT64，那么contents就是一个int64_t类型的数组，数组里的每个项都是一个int64_t类型的整数值（最小值为-9223372036854775808，最大值为9223372036854775807）。\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517113436209.png\" alt=\"image-20230517113436209\" style=\"zoom:67%;\" />\n\n```base64\\n```\n\n\n\n#### 整数集合的特点\n\n- 只能保存整数\n- 值没有重复\n\n\n\n#### 整数集合的升级\n\n什么是升级？\n\n升级就是，当前整数集合假设存的是 INT_16 编码（最小值为-32768，最大值为32767）的。 现在要插入一个 大的值，INT_16 不够存了，就需要升级。\n\n升级的过程\n\n![未命名绘图](Redis基本类型与底层实现.assets/未命名绘图.png)\n\n```base64\\n```\n\n因为每次向整数集合添加新元素都可能会引起升级，而每次升级都需要对底层数组中已有的所有元素进行类型转换，所以向整数集合添加新元素的时间复杂度为O（N）\n\n\n\n\n\n#### 整数集合的降级\n\n不支持降级，一旦升上去之后，就不会在降下来了。\n\n\n\n#### 整数集合在Redis中的用法\n\n是Set类型的底层实现之一。当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现\n\n```c\nredis> SADD numbers 1 3 5 7 9\n(integer) 5\nredis> OBJECT ENCODING numbers\n\"intset\"\n```\n\n\n\n\n\n## String类型\n\n### Redis实现String类型\n\nString类型的编码可以是：int， raw 或者 embstr\n\n\n\n#### 使用 int 编码\n\n如果一个字符串对象保存的是整数值，并且这个整数值可以用long类型来表示，那么字符串对象会将整数值保存在字符串对象结构的ptr属性里面，并将字符串对象的编码设置为int。\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517140647860.png\" alt=\"image-20230517140647860\" style=\"zoom: 80%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMnJlZGlzT2JqZWN0JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMDAlMjIlMjB5JTNEJTIyNDY1JTIyJTIwd2lkdGglM0QlMjIxNDYlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMlMjIlMjB2YWx1ZSUzRCUyMnR5cGUlMjZsdCUzQmJyJTI2Z3QlM0JSRURJU19TVFJJTkclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMDAlMjIlMjB5JTNEJTIyNDkzJTIyJTIwd2lkdGglM0QlMjIxNDYlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQlMjIlMjB2YWx1ZSUzRCUyMmVuY29kaW5nJTI2bHQlM0JiciUyNmd0JTNCUkVESVNfRU5DT0RJTkdfSU5UJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTAwJTIyJTIweSUzRCUyMjUyMSUyMiUyMHdpZHRoJTNEJTIyMTQ2JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI2JTIyJTIwdGFyZ2V0JTNEJTIyNyUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNiUyMiUyMHZhbHVlJTNEJTIyKiUyMHB0ciUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTEwMCUyMiUyMHklM0QlMjI1NDklMjIlMjB3aWR0aCUzRCUyMjE0NiUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNyUyMiUyMHZhbHVlJTNEJTIyMTAwODYlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjEyMSUyMiUyMHklM0QlMjI1NDklMjIlMjB3aWR0aCUzRCUyMjYwJTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI4JTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmRpdiUyNmd0JTNCcmVkaXMlMjZhbXAlM0JndCUzQiUyMFNFVCUyMG51bWJlciUyMDEwMDg2JTI2bHQlM0IlMkZkaXYlMjZndCUzQiUyNmx0JTNCZGl2JTI2Z3QlM0JPSyUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyNmd0JTNCcmVkaXMlMjZhbXAlM0JndCUzQiUyME9CSkVDVCUyMEVOQ09ESU5HJTIwbnVtYmVyJTI2bHQlM0IlMkZkaXYlMjZndCUzQiUyNmx0JTNCZGl2JTI2Z3QlM0IlMjZxdW90JTNCaW50JTI2cXVvdCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjIlMjBzdHlsZSUzRCUyMnRleHQlM0JodG1sJTNEMSUzQnN0cm9rZUNvbG9yJTNEJTIzZDc5YjAwJTNCZmlsbENvbG9yJTNEJTIzZmZlNmNjJTNCYWxpZ24lM0RsZWZ0JTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTEwMCUyMiUyMHklM0QlMjIzOTIlMjIlMjB3aWR0aCUzRCUyMjIwOCUyMiUyMGhlaWdodCUzRCUyMjUwJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n#### 使用 raw 编码\n\n\n\n如果字符串对象保存的是一个字符串值，并且这个字符串值的长度大于32字节，那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值，并将对象的编码设置为raw。\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517141520817.png\" alt=\"image-20230517141520817\" style=\"zoom: 50%;\" />\n\n```base64\\n```\n\n\n\n\n\n#### 使用 embstr 编码\n\n\n\nembstr编码是专门用于保存短字符串的一种优化编码方式，这种编码和raw编码一样，都使用redisObject结构和sdshdr结构来表示字符串对象，但raw编码会调用两次内存分配函数来分别创建redisObject结构和sdshdr结构，而embstr编码则通过调用一次内存分配函数来分配一块连续的空间，空间中依次包含redisObject和sdshdr两个结构\n\n\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517143027935.png\" alt=\"image-20230517143027935\" style=\"zoom:80%;\" />\n\n```base64\nJTNDbXhHcmFwaE1vZGVsJTNFJTNDcm9vdCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMCUyMiUyRiUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjAlMjIlMkYlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIlMjIlMjB2YWx1ZSUzRCUyMiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RsZWZ0JTNCZmlsbENvbG9yJTNEJTIzZDVlOGQ0JTNCc3Ryb2tlQ29sb3IlM0QlMjM4MmIzNjYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTExOCUyMiUyMHklM0QlMjI3OTIlMjIlMjB3aWR0aCUzRCUyMjY3MCUyMiUyMGhlaWdodCUzRCUyMjE1NCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMlMjIlMjB2YWx1ZSUzRCUyMiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDElM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RsZWZ0JTNCZmlsbENvbG9yJTNEJTIzZDVlOGQ0JTNCc3Ryb2tlQ29sb3IlM0QlMjM4MmIzNjYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyOTMlMjIlMjB5JTNEJTIyNDUxJTIyJTIwd2lkdGglM0QlMjI0NjQlMjIlMjBoZWlnaHQlM0QlMjIxNDIlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0JTIyJTIwdmFsdWUlM0QlMjIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QxJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEbGVmdCUzQmZpbGxDb2xvciUzRCUyM2Q1ZThkNCUzQnN0cm9rZUNvbG9yJTNEJTIzODJiMzY2JTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMTIlMjIlMjB5JTNEJTIyNDUxJTIyJTIwd2lkdGglM0QlMjIxNzAlMjIlMjBoZWlnaHQlM0QlMjIxNDIlMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI1JTIyJTIwdmFsdWUlM0QlMjJyZWRpc09iamVjdCUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTAwJTIyJTIweSUzRCUyMjQ2NSUyMiUyMHdpZHRoJTNEJTIyMTQ2JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI2JTIyJTIwdmFsdWUlM0QlMjJ0eXBlJTI2bHQlM0JiciUyNmd0JTNCUkVESVNfU1RSSU5HJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTAwJTIyJTIweSUzRCUyMjQ5MyUyMiUyMHdpZHRoJTNEJTIyMTQ2JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI3JTIyJTIwdmFsdWUlM0QlMjJlbmNvZGluZyUyNmx0JTNCYnIlMjZndCUzQlJFRElTX0VOQ09ESU5HX1JBVyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTEwMCUyMiUyMHklM0QlMjI1MjElMjIlMjB3aWR0aCUzRCUyMjE0NiUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyOCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI5JTIyJTIwdGFyZ2V0JTNEJTIyMTAlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjklMjIlMjB2YWx1ZSUzRCUyMiolMjBwdHIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMDAlMjIlMjB5JTNEJTIyNTQ5JTIyJTIwd2lkdGglM0QlMjIxNDYlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjEwJTIyJTIwdmFsdWUlM0QlMjJzZHNoZHIlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCZmlsbENvbG9yJTNEJTIzZGFlOGZjJTNCc3Ryb2tlQ29sb3IlM0QlMjM2YzhlYmYlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMTE3JTIyJTIweSUzRCUyMjQ2NSUyMiUyMHdpZHRoJTNEJTIyNjAlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjExJTIyJTIwdmFsdWUlM0QlMjIlMjZsdCUzQmRpdiUyNmd0JTNCcmVkaXMlMjZhbXAlM0JndCUzQiUyMFNFVCUyMHN0b3J5JTIwJTI2cXVvdCUzQkxvbmclMkMlMjBsb25nJTIwYWdvJTIwdGhlcmUlMjBsaXZlZCUyMGElMjBraW5nJTIwLi4uJTI2cXVvdCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyNmd0JTNCT0slMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjZndCUzQnJlZGlzJTI2YW1wJTNCZ3QlM0IlMjBTVFJMRU4lMjBzdG9yeSUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyNmd0JTNCKGludGVnZXIpJTIwMzclMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjZndCUzQnJlZGlzJTI2YW1wJTNCZ3QlM0IlMjBPQkpFQ1QlMjBFTkNPRElORyUyMHN0b3J5JTI2bHQlM0IlMkZkaXYlMjZndCUzQiUyNmx0JTNCZGl2JTI2Z3QlM0IlMjZxdW90JTNCcmF3JTI2cXVvdCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjIlMjBzdHlsZSUzRCUyMnRleHQlM0JodG1sJTNEMSUzQnN0cm9rZUNvbG9yJTNEJTIzZDc5YjAwJTNCZmlsbENvbG9yJTNEJTIzZmZlNmNjJTNCYWxpZ24lM0RsZWZ0JTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTEwNiUyMiUyMHklM0QlMjIzMTIlMjIlMjB3aWR0aCUzRCUyMjMxMiUyMiUyMGhlaWdodCUzRCUyMjkyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTIlMjIlMjB2YWx1ZSUzRCUyMmZyZWUlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjExNyUyMiUyMHklM0QlMjI0OTMlMjIlMjB3aWR0aCUzRCUyMjYwJTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxMyUyMiUyMHZhbHVlJTNEJTIybGVuJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIxMTclMjIlMjB5JTNEJTIyNTIxJTIyJTIwd2lkdGglM0QlMjI2MCUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTQlMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjE1JTIyJTIwdGFyZ2V0JTNEJTIyMTYlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE1JTIyJTIwdmFsdWUlM0QlMjJidWYlMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjExNyUyMiUyMHklM0QlMjI1NDklMjIlMjB3aWR0aCUzRCUyMjYwJTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxNiUyMiUyMHZhbHVlJTNEJTIyJ0wnJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyMjglMjIlMjB5JTNEJTIyNTQ5JTIyJTIwd2lkdGglM0QlMjIzNSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMTclMjIlMjB2YWx1ZSUzRCUyMidvJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjYzJTIyJTIweSUzRCUyMjU0OSUyMiUyMHdpZHRoJTNEJTIyMzUlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjE4JTIyJTIwdmFsdWUlM0QlMjInbiclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjI5OCUyMiUyMHklM0QlMjI1NDklMjIlMjB3aWR0aCUzRCUyMjM1JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIxOSUyMiUyMHZhbHVlJTNEJTIyJ2cnJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIzMzMlMjIlMjB5JTNEJTIyNTQ5JTIyJTIwd2lkdGglM0QlMjIzNSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjAlMjIlMjB2YWx1ZSUzRCUyMi4uLi4uLi4lMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjM2OCUyMiUyMHklM0QlMjI1NDklMjIlMjB3aWR0aCUzRCUyMjM1JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyMSUyMiUyMHZhbHVlJTNEJTIyJy4nJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI0MDMlMjIlMjB5JTNEJTIyNTQ5JTIyJTIwd2lkdGglM0QlMjIzNSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjIlMjIlMjB2YWx1ZSUzRCUyMicuJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNDM4JTIyJTIweSUzRCUyMjU0OSUyMiUyMHdpZHRoJTNEJTIyMzUlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjIzJTIyJTIwdmFsdWUlM0QlMjInLiclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjQ3MyUyMiUyMHklM0QlMjI1NDklMjIlMjB3aWR0aCUzRCUyMjM1JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNCUyMiUyMHZhbHVlJTNEJTIyJyU1QzAnJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI1MDglMjIlMjB5JTNEJTIyNTQ5JTIyJTIwd2lkdGglM0QlMjIzNSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMjUlMjIlMjB2YWx1ZSUzRCUyMnJlZGlzT2JqZWN0JTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQmZpbGxDb2xvciUzRCUyM2RhZThmYyUzQnN0cm9rZUNvbG9yJTNEJTIzNmM4ZWJmJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMDYlMjIlMjB5JTNEJTIyODAzJTIyJTIwd2lkdGglM0QlMjIxNDYlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjI2JTIyJTIwdmFsdWUlM0QlMjJ0eXBlJTI2bHQlM0JiciUyNmd0JTNCUkVESVNfU1RSSU5HJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTA2JTIyJTIweSUzRCUyMjgzMSUyMiUyMHdpZHRoJTNEJTIyMTQ2JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyNyUyMiUyMHZhbHVlJTNEJTIyZW5jb2RpbmclMjZsdCUzQmJyJTI2Z3QlM0JPQkpfRU5DT0RJTkdfRU1CU1RSJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjItMTA2JTIyJTIweSUzRCUyMjg1OSUyMiUyMHdpZHRoJTNEJTIyMTQ2JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyOCUyMiUyMHN0eWxlJTNEJTIyZWRnZVN0eWxlJTNEb3J0aG9nb25hbEVkZ2VTdHlsZSUzQmN1cnZlZCUzRDElM0Jyb3VuZGVkJTNEMCUzQm9ydGhvZ29uYWxMb29wJTNEMSUzQmpldHR5U2l6ZSUzRGF1dG8lM0JodG1sJTNEMSUzQmVudHJ5WCUzRDAlM0JlbnRyeVklM0QwLjUlM0JlbnRyeUR4JTNEMCUzQmVudHJ5RHklM0QwJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIyOSUyMiUyMHRhcmdldCUzRCUyMjMwJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIyOSUyMiUyMHZhbHVlJTNEJTIyKiUyMHB0ciUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTEwNiUyMiUyMHklM0QlMjI4ODclMjIlMjB3aWR0aCUzRCUyMjE0NiUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzAlMjIlMjB2YWx1ZSUzRCUyMnNkc2hkciUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0JmaWxsQ29sb3IlM0QlMjNkYWU4ZmMlM0JzdHJva2VDb2xvciUzRCUyMzZjOGViZiUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIxMTElMjIlMjB5JTNEJTIyODAzJTIyJTIwd2lkdGglM0QlMjI2MCUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzElMjIlMjB2YWx1ZSUzRCUyMiUyNmx0JTNCZGl2JTI2Z3QlM0JyZWRpcyUyNmFtcCUzQmd0JTNCJTIwU0VUJTIwbXNnJTIwJTI2cXVvdCUzQmhlbGxvJTI2cXVvdCUzQiUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyNmd0JTNCT0slMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTI2bHQlM0JkaXYlMjZndCUzQnJlZGlzJTI2YW1wJTNCZ3QlM0IlMjBPQkpFQ1QlMjBFTkNPRElORyUyMG1zZyUyNmx0JTNCJTJGZGl2JTI2Z3QlM0IlMjZsdCUzQmRpdiUyNmd0JTNCJTI2cXVvdCUzQmVtYnN0ciUyNnF1b3QlM0IlMjZsdCUzQiUyRmRpdiUyNmd0JTNCJTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyM2Q3OWIwMCUzQmZpbGxDb2xvciUzRCUyM2ZmZTZjYyUzQmFsaWduJTNEbGVmdCUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQnJvdW5kZWQlM0QwJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMi0xMTUlMjIlMjB5JTNEJTIyNjk0JTIyJTIwd2lkdGglM0QlMjIzMTIlMjIlMjBoZWlnaHQlM0QlMjI3MCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjMyJTIyJTIwdmFsdWUlM0QlMjJmcmVlJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIxMTElMjIlMjB5JTNEJTIyODMxJTIyJTIwd2lkdGglM0QlMjI2MCUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzMlMjIlMjB2YWx1ZSUzRCUyMmxlbiUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMTExJTIyJTIweSUzRCUyMjg1OSUyMiUyMHdpZHRoJTNEJTIyNjAlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM0JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjIzNSUyMiUyMHRhcmdldCUzRCUyMjM2JTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjByZWxhdGl2ZSUzRCUyMjElMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzNSUyMiUyMHZhbHVlJTNEJTIyYnVmJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIxMTElMjIlMjB5JTNEJTIyODg3JTIyJTIwd2lkdGglM0QlMjI2MCUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzYlMjIlMjB2YWx1ZSUzRCUyMidMJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjIyJTIyJTIweSUzRCUyMjg4NyUyMiUyMHdpZHRoJTNEJTIyMzUlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjM3JTIyJTIwdmFsdWUlM0QlMjInbyclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjI1NyUyMiUyMHklM0QlMjI4ODclMjIlMjB3aWR0aCUzRCUyMjM1JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjIzOCUyMiUyMHZhbHVlJTNEJTIyJ24nJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIyOTIlMjIlMjB5JTNEJTIyODg3JTIyJTIwd2lkdGglM0QlMjIzNSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyMzklMjIlMjB2YWx1ZSUzRCUyMidnJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzI3JTIyJTIweSUzRCUyMjg4NyUyMiUyMHdpZHRoJTNEJTIyMzUlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQwJTIyJTIwdmFsdWUlM0QlMjIuLi4uLi4uJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIzNjIlMjIlMjB5JTNEJTIyODg3JTIyJTIwd2lkdGglM0QlMjIzNSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDElMjIlMjB2YWx1ZSUzRCUyMicuJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMzk3JTIyJTIweSUzRCUyMjg4NyUyMiUyMHdpZHRoJTNEJTIyMzUlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQyJTIyJTIwdmFsdWUlM0QlMjInLiclMjIlMjBzdHlsZSUzRCUyMnJvdW5kZWQlM0QwJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0JodG1sJTNEMSUzQmFsaWduJTNEY2VudGVyJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjQzMiUyMiUyMHklM0QlMjI4ODclMjIlMjB3aWR0aCUzRCUyMjM1JTIyJTIwaGVpZ2h0JTNEJTIyMjglMjIlMjBhcyUzRCUyMmdlb21ldHJ5JTIyJTJGJTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0MyUyMiUyMHZhbHVlJTNEJTIyJy4nJTIyJTIwc3R5bGUlM0QlMjJyb3VuZGVkJTNEMCUzQndoaXRlU3BhY2UlM0R3cmFwJTNCaHRtbCUzRDElM0JhbGlnbiUzRGNlbnRlciUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjI0NjclMjIlMjB5JTNEJTIyODg3JTIyJTIwd2lkdGglM0QlMjIzNSUyMiUyMGhlaWdodCUzRCUyMjI4JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDQlMjIlMjB2YWx1ZSUzRCUyMiclNUMwJyUyMiUyMHN0eWxlJTNEJTIycm91bmRlZCUzRDAlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQmh0bWwlM0QxJTNCYWxpZ24lM0RjZW50ZXIlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyNTAyJTIyJTIweSUzRCUyMjg4NyUyMiUyMHdpZHRoJTNEJTIyMzUlMjIlMjBoZWlnaHQlM0QlMjIyOCUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ1JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI0NiUyMiUyMHRhcmdldCUzRCUyMjQlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlM0UlM0NBcnJheSUyMGFzJTNEJTIycG9pbnRzJTIyJTNFJTNDbXhQb2ludCUyMHglM0QlMjIyNzQlMjIlMjB5JTNEJTIyNDE4JTIyJTJGJTNFJTNDbXhQb2ludCUyMHglM0QlMjItMjclMjIlMjB5JTNEJTIyNDE4JTIyJTJGJTNFJTNDJTJGQXJyYXklM0UlM0MlMkZteEdlb21ldHJ5JTNFJTNDJTJGbXhDZWxsJTNFJTNDbXhDZWxsJTIwaWQlM0QlMjI0NiUyMiUyMHZhbHVlJTNEJTIyJUU0JUI4JTgwJUU2JUFDJUExJUU1JTg2JTg1JUU1JUFEJTk4JUU1JTg4JTg2JUU5JTg1JThEJTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyMzgyYjM2NiUzQmZpbGxDb2xvciUzRCUyM2Q1ZThkNCUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyMjQ5JTIyJTIweSUzRCUyMjM1NiUyMiUyMHdpZHRoJTNEJTIyNDklMjIlMjBoZWlnaHQlM0QlMjIzOSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ3JTIyJTIwc3R5bGUlM0QlMjJlZGdlU3R5bGUlM0RvcnRob2dvbmFsRWRnZVN0eWxlJTNCY3VydmVkJTNEMSUzQnJvdW5kZWQlM0QwJTNCb3J0aG9nb25hbExvb3AlM0QxJTNCamV0dHlTaXplJTNEYXV0byUzQmh0bWwlM0QxJTNCJTIyJTIwZWRnZSUzRCUyMjElMjIlMjBzb3VyY2UlM0QlMjI0OCUyMiUyMHRhcmdldCUzRCUyMjMlMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHJlbGF0aXZlJTNEJTIyMSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjQ4JTIyJTIwdmFsdWUlM0QlMjIlRTQlQkElOEMlRTYlQUMlQTElRTUlODYlODUlRTUlQUQlOTglRTUlODglODYlRTklODUlOEQlMjIlMjBzdHlsZSUzRCUyMnRleHQlM0JodG1sJTNEMSUzQnN0cm9rZUNvbG9yJTNEJTIzODJiMzY2JTNCZmlsbENvbG9yJTNEJTIzZDVlOGQ0JTNCYWxpZ24lM0RjZW50ZXIlM0J2ZXJ0aWNhbEFsaWduJTNEbWlkZGxlJTNCd2hpdGVTcGFjZSUzRHdyYXAlM0Jyb3VuZGVkJTNEMCUzQiUyMiUyMHZlcnRleCUzRCUyMjElMjIlMjBwYXJlbnQlM0QlMjIxJTIyJTNFJTNDbXhHZW9tZXRyeSUyMHglM0QlMjIzNTQlMjIlMjB5JTNEJTIyMzU2JTIyJTIwd2lkdGglM0QlMjI0OSUyMiUyMGhlaWdodCUzRCUyMjM5JTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNDklMjIlMjBzdHlsZSUzRCUyMmVkZ2VTdHlsZSUzRG9ydGhvZ29uYWxFZGdlU3R5bGUlM0JjdXJ2ZWQlM0QxJTNCcm91bmRlZCUzRDAlM0JvcnRob2dvbmFsTG9vcCUzRDElM0JqZXR0eVNpemUlM0RhdXRvJTNCaHRtbCUzRDElM0IlMjIlMjBlZGdlJTNEJTIyMSUyMiUyMHNvdXJjZSUzRCUyMjUwJTIyJTIwdGFyZ2V0JTNEJTIyMiUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIwcmVsYXRpdmUlM0QlMjIxJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTAlMjIlMjB2YWx1ZSUzRCUyMiVFNCVCOCU4MCVFNiVBQyVBMSVFNSU4NiU4NSVFNSVBRCU5OCVFNSU4OCU4NiVFOSU4NSU4RCUyMiUyMHN0eWxlJTNEJTIydGV4dCUzQmh0bWwlM0QxJTNCc3Ryb2tlQ29sb3IlM0QlMjM4MmIzNjYlM0JmaWxsQ29sb3IlM0QlMjNkNWU4ZDQlM0JhbGlnbiUzRGNlbnRlciUzQnZlcnRpY2FsQWxpZ24lM0RtaWRkbGUlM0J3aGl0ZVNwYWNlJTNEd3JhcCUzQnJvdW5kZWQlM0QwJTNCJTIyJTIwdmVydGV4JTNEJTIyMSUyMiUyMHBhcmVudCUzRCUyMjElMjIlM0UlM0NteEdlb21ldHJ5JTIweCUzRCUyMjI3OCUyMiUyMHklM0QlMjI3MDkuNSUyMiUyMHdpZHRoJTNEJTIyNDklMjIlMjBoZWlnaHQlM0QlMjIzOSUyMiUyMGFzJTNEJTIyZ2VvbWV0cnklMjIlMkYlM0UlM0MlMkZteENlbGwlM0UlM0NteENlbGwlMjBpZCUzRCUyMjUxJTIyJTIwdmFsdWUlM0QlMjIlRTUlQUQlOTclRTclQUMlQTYlRTQlQjglQjIlRTklOTUlQkYlRTUlQkElQTYlMjZsdCUzQmJyJTI2Z3QlM0IlMjZsdCUzQmJyJTI2Z3QlM0IlRTUlQTQlQTclRTQlQkElOEUlMjAlMjZhbXAlM0JndCUzQiUyMDMyJTI2bHQlM0JiciUyNmd0JTNCJTI2bHQlM0JiciUyNmd0JTNCJUU1JUFEJTk3JUU4JThBJTgyJUU3JTlBJTg0JUU2JTk3JUI2JUU1JTgwJTk5JUVGJUJDJThDJUU0JUJDJTlBJUU0JUJEJUJGJUU3JTk0JUE4JTIwcmF3JTIwJUU2JUEwJUJDJUU1JUJDJThGJTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyMzk2NzNhNiUzQmZpbGxDb2xvciUzRCUyM2UxZDVlNyUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTE5OCUyMiUyMHklM0QlMjIzMTQlMjIlMjB3aWR0aCUzRCUyMjU0JTIyJTIwaGVpZ2h0JTNEJTIyMjcyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQ214Q2VsbCUyMGlkJTNEJTIyNTIlMjIlMjB2YWx1ZSUzRCUyMiVFNSVBRCU5NyVFNyVBQyVBNiVFNCVCOCVCMiVFOSU5NSVCRiVFNSVCQSVBNiUyNmx0JTNCYnIlMjZndCUzQiUyNmx0JTNCYnIlMjZndCUzQiVFNSVCMCU4RiVFNCVCQSU4RSVFNyVBRCU4OSVFNCVCQSU4RSUyMCUyNmFtcCUzQmx0JTNCJTNEJTIwMzIlMjZsdCUzQmJyJTI2Z3QlM0IlMjZsdCUzQmJyJTI2Z3QlM0IlRTUlQUQlOTclRTglOEElODIlRTclOUElODQlRTYlOTclQjYlRTUlODAlOTklRUYlQkMlOEMlRTQlQkMlOUElRTQlQkQlQkYlRTclOTQlQTglMjZhbXAlM0JuYnNwJTNCJTIwZW1ic3RyJTIwJUU2JUEwJUJDJUU1JUJDJThGJTIyJTIwc3R5bGUlM0QlMjJ0ZXh0JTNCaHRtbCUzRDElM0JzdHJva2VDb2xvciUzRCUyMzk2NzNhNiUzQmZpbGxDb2xvciUzRCUyM2UxZDVlNyUzQmFsaWduJTNEY2VudGVyJTNCdmVydGljYWxBbGlnbiUzRG1pZGRsZSUzQndoaXRlU3BhY2UlM0R3cmFwJTNCcm91bmRlZCUzRDAlM0IlMjIlMjB2ZXJ0ZXglM0QlMjIxJTIyJTIwcGFyZW50JTNEJTIyMSUyMiUzRSUzQ214R2VvbWV0cnklMjB4JTNEJTIyLTIwMiUyMiUyMHklM0QlMjI2NzclMjIlMjB3aWR0aCUzRCUyMjU0JTIyJTIwaGVpZ2h0JTNEJTIyMjcyJTIyJTIwYXMlM0QlMjJnZW9tZXRyeSUyMiUyRiUzRSUzQyUyRm14Q2VsbCUzRSUzQyUyRnJvb3QlM0UlM0MlMkZteEdyYXBoTW9kZWwlM0U=\n```\n\n\n\n- 当字符串长度 大于32字节 的时候，会使用 raw 编码\n- 当字符串长度 小于等于32字节 的时候，会使用 embstr 编码\n- 【重要】embstr只会分配一次内存空间，用来保存redisObject和sdshdr，而raw会分配两次空间，用来保存redisObject和sdshdr\n- embstr 比 raw 格式更好的利用缓存，而且内存分配只有一次，分配和回收速度更快\n\n\n\n#### raw编码和embstr编码的区别\n\n- 当字符串长度 大于32字节 的时候，会使用 raw 编码\n- 当字符串长度 小于等于32字节 的时候，会使用 embstr 编码\n- 【重要】embstr只会分配一次内存空间，用来保存redisObject和sdshdr，而raw会分配两次空间，用来保存redisObject和sdshdr\n- embstr 比 raw 格式更好的利用缓存，而且内存分配只有一次，分配和回收速度更快\n\n\n\n### 编码转换\n\n在对 String 类型进行操作的时候，会在 int ，raw ，embstr 之间来回转换\n\n```sh\nredis> SET number 10086\nOK\nredis> OBJECT ENCODING number\n\"int\"\nredis> APPEND number \" is a good number!\"\n(integer) 23\nredis> GET number\n\"10086 is a good number!\"\nredis> OBJECT ENCODING number\n\"raw\"\n```\n\n\n\n```sh\nredis> SET msg \"hello world\"\nOK\nredis> OBJECT ENCODING msg\n\"embstr\"\nredis> APPEND msg \" again!\"\n(integer) 18\nredis> OBJECT ENCODING msg\n\"raw\"\n```\n\n\n\n![image-20230515183855636](Redis基本类型与底层实现.assets/image-20230515183855636.png)\n\n\n\n\n\n### 基本操作\n\n1. SET：设置指定 key 的值。\n2. GET：获取指定 key 的值。\n3. GETRANGE：获取指定 key 值的子字符串。\n4. MGET：同时获取多个 key 的值。\n5. SETNX：设置指定 key 的值，仅当 key 不存在时才设置。\n6. SETEX：设置指定 key 的值，并指定过期时间（单位为秒）。\n7. MSET：同时设置多个 key 的值。\n8. INCR/DECR：将指定 key 的值加上/减去 1。\n9. INCRBY/DECRBY：将指定 key 的值加上/减去指定的整数值。\n10. APPEND：将指定字符串追加到指定 key 原有的字符串末尾。\n11. STRLEN：获取指定 key 值的长度。\n12. GETSET：设置指定 key 的值，并返回原来的值。\n13. MSETNX：同时设置多个 key 的值，当且仅当所有 key 都不存在时才设置。\n14. SETRANGE：将指定位置的值替换成指定的字符串。\n15. PSETEX：设置指定 key 的值和过期时间（单位为毫秒）。\n16. BITCOUNT：统计指定字符串中二进制位为 1 的个数。\n\n\n\n### 应用场景\n\n#### 正反向索引\n\n什么是正反向索引？在redis中 GETRANGE命令和正反向索引有关系。\n\nGETRANGE 0 -1\n\n#### 二进制安全\n\nredis进程与外界交互的时候，用的是字节流；\n\n我们知道流一般分为：字节流和字符流\n\n而redis使用的是字节流，为什么呢？\n\n因为使用redis的语言有很多，每种语言对于int和string等类型的定义不同，占用的字节就不同\n\n所以redis存储的是字节，取出的时候也是字节，由语言自己进行编解码，这样就不会破坏数据的完整性。\n\n如果redis存字符流，那么不同的语言取出来之后，可能就会出现乱码\n\n#### 使用 bitmap 实现用户上线次数统计\n\n传统的方式：使用mysql数据库，创建：用户登录记录表。记录用户id，登录日期；\n\n假设现在我们希望记录自己网站上的用户的上线频率，比如说，计算用户 A 上线了多少天，用户 B 上线了多少天，诸如此类，以此作为数据，从而决定让哪些用户参加 beta 测试等活动 —— 这个模式可以使用 [SETBIT](https://www.redis.com.cn/commands/setbit.html) 和 [BITCOUNT](https://www.redis.com.cn/commands/bitcount.html) 来实现。\n\n比如说，每当用户在某一天上线的时候，我们就使用 SETBIT ，以用户名作为 key ，将那天所代表的网站的上线日作为 offset 参数，并将这个 offset 上的为设置为 1 。\n\n举个例子，如果今天是网站上线的第 100 天，而用户 peter 在今天阅览过网站，那么执行命令 `SETBIT peter 100 1` ；如果明天 peter 也继续阅览网站，那么执行命令 `SETBIT peter 101 1` ，以此类推。\n\n当要计算 peter 总共以来的上线次数时，就使用 [BITCOUNT](https://www.redis.com.cn/commands/bitcount.html) 命令：执行 `BITCOUNT peter` ，得出的结果就是 peter 上线的总天数。\n\n\n\n## List类型\n\n### Redis实现List类型\n\n列表对象的编码可以是 ziplist 或者是 quicklist\n\n\n\n#### 使用 Zip List 编码\n\n当List类型使用 REDIS_ENCODING_ZIPLIST 的时候，底层结构是使用 压缩列表 Zip List 作为实现。\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230514151224032.png\" alt=\"image-20230514151224032\" style=\"zoom: 50%;\" />\n\n```base64\\n```\n\n\n\n\n\n#### 使用 quickList 编码\n\n当 List 类型使用 REDIS_ENCODING_QUICKLIST 的时候，底层实现结构是：快表 Quick List\n\n在老版本中，List类型的实现有：zipList 和 linkedList 两种。\n\n后来 linkedList 就被废弃了，取而代之的是 quickList 快表。\n\n\n\n#### quickList和linkedList有什么区别\n\n在 Redis 中，quicklist 是一种特殊的数据结构，它是由多个 ziplist 组成的列表（List），可以支持快速的插入、删除和索引操作。而 linkedlist 则是传统的链表（Linked List）数据结构，可以支持灵活的添加、删除和遍历等操作。\n\n具体来说，quicklist 和 linkedlist 的主要区别有：\n\n1. 存储方式：quicklist 是由多个 ziplist 组成的连续内存块，而 linkedlist 是由多个节点组成的离散内存块。\n2. 内存占用：quicklist 可以通过 ziplist 压缩机制来减少内存占用，而 linkedlist 则需要额外的指针空间来存储节点之间的关系，因此通常会占用更多的内存。\n3. 访问效率：quicklist 支持快速的随机访问和范围查找等操作，而 linkedlist 则需要遍历每一个节点才能进行访问或者查找。\n4. 插入和删除效率：quicklist 可以通过将新元素插入到 ziplist 的头部或尾部来实现常数级的插入和删除操作，而 linkedlist 则需要先查找到指定位置的节点，然后修改指针指向，因此插入和删除操作的时间复杂度为 O(n)。\n\n总的来说，quicklist 是一种通过压缩机制来减少内存占用，并支持快速访问、插入和删除等操作的高效数据结构，适用于存储数据量较大、访问频繁的场景。而 linkedlist 则更适合于存储数据量较小、插入和删除频繁的场景，具有灵活性和可扩展性。\n\n\n\n### 基本操作\n\n1. LPUSH key value1 value2 ...：将一个或多个值插入到列表头部。\n2. RPUSH key value1 value2 ...：将一个或多个值插入到列表尾部。\n3. LPOP key：移除并返回列表的第一个元素。\n4. RPOP key：移除并返回列表的最后一个元素。\n5. LINDEX key index：获取列表中指定位置的元素。\n6. LRANGE key start stop：获取列表中指定范围内的所有元素。\n7. LINSERT key BEFORE/AFTER pivot value：在列表中某个元素之前或之后插入一个新元素。\n8. LLEN key：获取列表的长度。\n9. LREM key count value：从列表中删除指定数量的与 value 相等的元素。\n10. LSET key index value：将列表中第 index 个元素的值设置为 value。\n11. LTRIM key start stop：截取列表中指定范围内的所有元素。\n12. BLPOP key1 key2 ... timeout：从多个列表的头部弹出元素，如果所有列表都为空则阻塞一段时间。\n13. BRPOP key1 key2 ... timeout：从多个列表的尾部弹出元素，如果所有列表都为空则阻塞一段时间。\n14. BRPOPLPUSH source destination timeout：从 source 列表的尾部弹出元素并插入到 destination 列表头部。\n15. LINDEX key index：获取列表中指定位置的元素。\n\n\n\n### 应用场景\n\n模拟栈\n\n模拟队列\n\n模拟数组\n\n模拟阻塞队列\n\n\n\n## Hash类型\n\n我们前面说过Redis中的数据类型都是由键对象和值对象共同组成，那么Hash类型是个啥样的呢？\n\n\n\n### Redis实现Hash类型\n\n哈希对象，任何一个RedisObject都要有\n\n- type：表示当前RedisObject的类型\n- encode：表示当前RedisObject的编码\n- ptr：指向数据结构的指针\n\n那么在哈希对象中，这三个值分别是什么呢？\n\n- type：肯定就是 REDIS_HASH 了\n- encode，在Hash类型中，Redis定义了两个编码\n  - REDIS_ENCODING_HT\n  - REDIS_ENCODING_ZIPLIST\n  - redis会根据存储的数据长度动态的选择这两种编码\n- ptr：指向的就是存放数据的数据结构\n\n\n\n#### 使用 ziplist 编码\n\n当编码是：REDIS_ENCODING_ZIPLIST 的时候，Redis使用 压缩列表 ZipList 作为底层数据结构的实现。\n\n使用ZIPLIST的时候，redis实现了\n\n- 保存了同一键值对的两个对象（[为什么是两个对象](#Redis五大类型实现原理)）总是紧紧的挨在一起，前面是键对象，后面是值对象\n- 先添加进ZIPLIST的键值对会放在列表的前面，后添加的键值对会放在它后面，不停的往后追加。\n- 在压缩链表中存的是字节数据或者整数。\n\n**举例说明**\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517173852775.png\" alt=\"image-20230517173852775\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n- 先执行：HSET zs name zs 可以看到压缩链表中会新增两个Entry节点，其中一个表示键，一个表示值\n- 在执行：HSET zs age 12 可以看到压缩链表中，会在第一步的基础上，在新增两个Entry节点，放在原来Entry节点的后面。\n\n\n\n#### 使用 hashtable 编码\n\n当编码是：REDIS_ENCODING_HT 的时候，Redis使用字典作为底层数据结构的实现。\n\n使用字典的时候\n\n- 字典的每个键都是一个字符串对象，对象中保存了键值对的键\n- 字典的每个值都是一个字符串对象，对象中保存了键值对的值\n\n源码分析\n\n<img src=\"Redis基本类型与底层实现.assets/image-20230517173407561.png\" alt=\"image-20230517173407561\" style=\"zoom:80%;\" />\n\n```base64\\n```\n\n\n\n### 编码转换\n\n哈希表底层可以是：ZIPLIST，也可以是 HT\n\n当哈希对象同时满足下面两个条件的时候，哈希对象会使用 ZIPLIST 编码\n\n- 哈希对象保存的所有键值对的键和值得字符串长度都小于64字节\n- 哈希对象保存的键值对数量小于512个\n\n不能满足这两个条件的哈希对象需要使用HT编码\n\n\n\n### 基本操作\n\n1. HSET key field value：设置哈希表 key 中指定字段 field 的值为 value。\n2. HGET key field：获取哈希表 key 中指定字段 field 的值。\n3. HMSET key field1 value1 field2 value2 ...：同时设置多个字段的值。\n4. HMGET key field1 field2 ...：获取哈希表 key 中指定字段的值。\n5. HGETALL key：获取哈希表 key 中所有字段和值。\n6. HDEL key field1 field2 ...：删除哈希表 key 中一个或多个指定字段的值。\n7. HEXISTS key field：判断哈希表 key 中是否存在指定的字段 field。\n8. HINCRBY key field increment：将哈希表 key 中指定字段的值增加 increment。\n9. HINCRBYFLOAT key field increment：将哈希表 key 中指定字段的值增加浮点数 increment。\n10. HKEYS key：获取哈希表 key 的所有字段名。\n11. HLEN key：获取哈希表 key 中字段数量。\n12. HSETNX key field value：只有在字段 field 不存在时，设置哈希表 key 中指定字段的值为 value。\n13. HSTRLEN key field：获取哈希表 key 中指定字段的字符串长度。\n14. HVALS key：获取哈希表 key 中所有字段的值。\n\n\n\n## Set类型\n\n\n\n### Redis实现Set类型\n\n集合对象的编码可以是intset或者hashtable\n\n\n\n#### 使用 intset 编码\n\n\n\n#### 使用 hashtable 编码\n\n\n\n### 编码转换\n\n当集合对象可以同时满足以下两个条件时，对象使用intset编码：\n\n- 集合对象保存的所有元素都是整数值；\n- 集合对象保存的元素数量不超过512个。\n\n不能满足这两个条件的集合对象需要使用hashtable编码。\n\n\n\n## SortedSet类型\n\n有序集合的编码可以是ziplist或者skiplist\n\n### Redis实现SortedSet类型\n\n\n\n#### 使用 ziplist 编码\n\n\n\n#### 使用 skiplist 编码\n\n\n\n### 编码转换\n\n\n\n\n\n","tags":["索引","redis","二进制安全","跳表"],"categories":["JAVA","数据库","REDIS"]},{"title":"Redis诞生背景原理介绍","url":"/note/JAVA/数据库/REDIS/Redis诞生背景原理介绍/","content":"\n![image-20230526175253453](Redis诞生背景原理介绍.assets/image-20230526175253453.png)\n\n\n\n## redis的诞生背景\n\n在计算中，数据是存在磁盘中；而从磁盘中读取数据，一般有两个重要的指标\n\n- 寻址：毫秒级别的； \n- 带宽：单位时间可以传输多少数据，一般是数百MB或者数GB每秒\n\n而如果数据在内存中：\n\n- 寻址：纳秒级别的\n- 带宽：GB起步，肯定比磁盘快的多\n\n总结\n\n- 磁盘比内存慢了十万倍（只是寻址上慢）\n\n\n\n\n\n## redis是kv结构，为啥还要给v定义五种基本类型\n\n大数据概念：**计算向数据移动**。\n\n不给 v 定义类型，是完全可以的。比如 memcache 就是没有类型的，它的 value 是二进制的数据，可以存任何类型的数据。\n\n那么给 v 定义类型有什么好处呢？\n\n举一个例子就明白了。\n\n同样的我们存一个复杂结构数据，比如超长的数组，分别存到 memcache 中和 redis 中，当我们想取出这个 value 中的某一个数据的时候：\n\nmemcache的操作方法是：将 value ，也就是这个超长的数据，全部返回给客户端，由客户端在进行处理。\n\n而redis的操作方法是：将 value 在服务端就可以进行过滤，只给 客户端 返回 客户端 想要的数据。\n\n这就是：计算向数据移动。 \n\n\n\n## redis是怎么处理大量的并发请求的\n\n一个系统可以部署多个redis进程，但是一个redis实例是**单进程单线程**单实例的，那么redis是怎么处理大量的并发请求的呢？\n\n<img src=\"Redis诞生背景原理介绍.assets/image-20230509215237383.png\" alt=\"image-20230509215237383\" style=\"zoom: 50%;\" />\n\n- 如上图，我们的【redis:6379】是部署在【linux】服务器上的，linux有内核；\n\n- 那么redis的处理流程就是：\n\n- 多个client可能发起很多的请求来到linux服务器上，这些请求会交给linux操作系统处理；\n\n- 然后系统会把请求交给redis的进程来处理；\n\n- 这部分工作都是kernel来进行调度的\n\n- 然后redis是通过调用kernel的系统调用（mmap的共享空间+epoll）来实现的，通过这种方式 **多路复用+共享空间(避免拷贝)** 就是redis处理快的原因。\n\n- 具体什么是mmap和epoll可以看下面的解释\n\n\n\n## redis为啥要设计成单进程单线程的\n\n为了避免并发问题。\n\n比如不同的client在同一时刻对 同一个key 进行操作； 一个修改key，一个删除key。\n\n必然会导致并发问题。\n\n而redis为了处理速度，就不能引入过多的逻辑，解决并发问题的常见方式就是锁，如果引入了锁，必然会影响性能。\n\n所以直接使用单进程，单线程的方式，就可以完美解决并发问题。\n\n不管你是多少个线程，反正到了 redis 服务端，都是一个线程。\n\n\n\n## 内核程序调用的发展历程\n\n### 阻塞时期（BIO）\n\n![image-20230511144324177](Redis诞生背景原理介绍.assets/image-20230511144324177.png)\n\n在Linux早期，client读取一个文件的流程是\n\n- client 告诉 Kernel 我要读取哪一个文件；在Linux中一切皆文件，所以 client  会给 kernel 一个 `fd（文件描述符）`\n- kernel 拿到这个 `fd（文件描述符）`开启一个线程，通过 read（系统调用）读取指定的 `fd（文件描述符）`\n- 如果此时`fd（文件描述符）`并没有准备好，那么read（系统调用）所在的这个线程就会一直阻塞；\n- 那么此时别的线程需要读取的`fd（文件描述符）`即使已经准备好了，由于有别的线程在阻塞，所以这个线程也要等着。\n\nread（系统调用）为什么是阻塞的\n\n- read（系统调用）底层是通过 socket 和 kernel 通信的\n- socket也是一个系统调用，只不过在Linux早期阶段，socket是阻塞的。（PS：后面随着Linux的发展，socket可以被设置为：非阻塞）\n\n在这个阶段产生的问题就是：**并发很低**\n\n\n\n### 同步非阻塞（NIO）\n\n![image-20230509215259250](Redis诞生背景原理介绍.assets/image-20230509215259250.png)\n\n在这个阶段，随着Linux的发展， socket这个系统调用，可以通过参数指定，将socket设置为：非阻塞socket；\n\n相对于上一个 阻塞时期（BIO），同步非阻塞的时期的处理逻辑是：\n\n- client 告诉 Kernel 我要读取哪一个文件；在Linux中一切皆文件，所以 client  会给 kernel 一个 `fd（文件描述符）`\n- kernel 拿到这个`fd（文件描述符）`开启一个线程，通过 read（系统调用）读取指定的`fd（文件描述符）`\n  - 由于这个时期，read（系统调用）所依赖的 socket 已经可以被设置为：非阻塞\n  - 所以，就不会像 BIO 阶段一样，开启多个线程了，此时只需要一个线程就可以处理，因为read（系统调用）此时已经是：非阻塞了。\n- 这个线程，在 kernel 中，会一直轮训，判断 client 所需要的`fd（文件描述符）`是否准备好\n  - 如果 read 的这个`fd（文件描述符）`还没有准备好，此时会直接返回false，表示还没有准备好。如果`fd（文件描述符）`准备好了，会直接返回`fd（文件描述符）`；\n  - 轮训发生在用户空间。\n- 这样的话，用户空间在轮训的时候，就可以通过返回值来判断。这样就不会阻塞了\n- 此时轮训的线程，还是同步线程，并不是异步。\n\n问题：如果此时有1000个或者更多的线程read，那么在用户控件轮训1000次或者更多次，就会有很大的调用成本。那么怎么解决呢？\n\n\n\n### 多路复用（NIO）\n\n![image-20230509215310178](Redis诞生背景原理介绍.assets/image-20230509215310178.png)\n\n从同步非阻塞（NIO）过来之后，linux系统继续发展，要怎么解决因为轮训次数多导致的系统消耗呢？\n\n于是kernal新增了一个系统调用，这个系统调用叫做 select，它的作用就是对一批fd（文件描述符）查询这些 fds 是否已经准备好，比如说select(1000fds),其中有800个已经准备好，那么select就会返回这800个fd\n\n然后交给用户线程，由用户线程调用这800个fds，那么就能保证每次调用的fd都是已经准备好的了。\n\n那么这样就没有问题了嘛？当然不是，注意这其中的调用关系\n\n![image-20230509215335798](Redis诞生背景原理介绍.assets/image-20230509215335798.png)\n\n在用户空间和系统空间中；会通过select和read来回调用，注意其中的参数是fds，那么我们知道fd是在系统空间中的，用户空间想要读取和处理一个fd，就需要去系统空间中拿，拿到之后，返回到用户空间，这个过程是将系统空间中的fd复制一份到用户空间中的。那么当fd很多的时候，复制也会增加系统消耗，浪费存储空间。\n\n\n\n\n\n### 多路复用共享空间（mmap）\n\n![image-20230509215344040](Redis诞生背景原理介绍.assets/image-20230509215344040.png)\n\n上面说到了多路复用的场景，会出现系统空间和用户空间fd数据拷贝的问题，那么解决的办法就是：在用户空间和系统空间中间增加一个共享空间。这个共享空间通过红黑树和链表存储fd；\n\n共享空间是通过什么系统调用来实现的？是通过mmap这个系统调用；共享空间里放了一些数据结构：红黑树，链表\n\n一个新加入的等待查询的fd是放在红黑树中的，查询出来的fd是放在链表中的，供用户使用。\n\nepoll是一系列系统调用的统称，包括：epoll_create;epoll_ctl;epoll_wait\n\n整体流程就是：\n\n- 用户线程/进程会调用epoll_create创建一个epoll的fd\n\n- 然后当来一个查询的时候，会交给epoll的fd，然后epoll会有一个共享空间（这个共享空间就是通过mmap实现的）\n\n- 比如我们要查询1000个fd，这1000个fd会通过epoll的fd写入到共享空间的红黑树中；\n\n- 那么epoll的fd是怎么写入到共享空间的呢？是通过epoll中另一个系统调用：epoll_ctl\n  - etl add：向共享空间加一个fd\n\n  - etl del：从共享空间中删除一个fd\n\n- 那么epoll还有一个系统调用，epoll_wait是干嘛的呢？ 它的作用是当我们要查询1000个fd的时候，这些fd通过ctl写入到共享空间中的红黑树之后，每写入一个fd，就会调用wait，然后当前fd就会阻塞等待kernal处理，kernal处理完一个，就返回一个，处理完一个，返回一个。（wait就类似于回调）\n\n- 然后epoll返回fd之后，用户线程会再次调用read从共享空间中获取fd\n\n\n\n###  补充：到底什么是多路复用\n\n多路复用是指同时监控多个 IO 事件的技术，能够让单个线程或进程同时处理多个连接。\n\n常见的多路复用技术包括 select、poll 和 epoll 等\n\n这些技术底层实现原理不尽相同，但都能够在单个进程或线程内同时监视多个 IO 事件，以提高系统的吞吐量和响应速度。\n\n\n\n### 补充：关于共享空间\n\n- 共享空间是“共享的”\n- 什么意思呢？\n  - 就是说用户空间可以直接看到并操作共享空间中的数据，而系统空间也可以直接看到并操作共享空间中的数据\n- 这样的好处是什么呢？\n  - 避免了fd（文件描述符）在用户空间和系统空间中的来回复制，减少性能开销\n- 注意\n  - 这里不是0拷贝，0拷贝的系统调用是：sendfile； 而共享空间的系统调用是：mmap\n  - 但是mmap和sendfile的核心思想都差不多，都是为了减少fd（文件描述符）的拷贝，提升性能\n\n\n\n### 补充：0拷贝\n\n假设这么一个场景：一个程序进程需要读取系统中的一个文件，然后通过网卡发出去\n\n在没有0拷贝之前：1、内核读取文件，写入fd3；2、用户程序进程读取fd3；3：用户程序将读取到的内容写入fd4；4、网卡将fd4发送出去。\n\n<img src=\"Redis诞生背景原理介绍.assets/image-20230509215353219.png\" alt=\"image-20230509215353219\" style=\"zoom:50%;\" />\n\n在没有0拷贝之前，整个过程读来写去的，很浪费性能。那么0拷贝怎么做的呢？\n\n<img src=\"Redis诞生背景原理介绍.assets/image-20230509215400076.png\" alt=\"image-20230509215400076\" style=\"zoom:50%;\" />\n\n0拷贝就很简单了，首先说一下0拷贝的系统调用\n\nsendfile(out,in) 表示将in写入out，因为是直接内核处理，所以不用和用户空间互相拷贝了。\n\n整个流程就是，内核读取文件；然后用户线程通过sendfile0拷贝直接写入到fd4；网卡将fd4发出去\n\n\n\n### 补充：kafka的简单实现原理\n\n<img src=\"Redis诞生背景原理介绍.assets/image-20230509215408746.png\" alt=\"image-20230509215408746\" style=\"zoom:50%;\" />\n\nkafka的简单实现原理是分两步\n\n生产者生产消息\n\n- kafka是接收网卡传过来的数据之后\n\n- 用户进程通过mmap写入到共享空间\n\n- 由于写到了共享空间，kernal就可以直接用了，kernal就可以将这些数据直接写入磁盘文件\n\n- 中间因为使用了mmap系统调用，减少了数据的拷贝；\n\n消费者消费消息\n\n- kafka的消费者是通过sendfile的0拷贝来进行消费的；\n\n- sendfile的两个参数，一个输入，一个输出；输入就是上一步写入的file，输出就是消费者消费的内容；\n\n- 这样消费者使用 sendfile 也避免了数据的拷贝，提升了性能。\n\n\n\nsendfile是一个系统调用，在没有sendfile的时候，用户进程获取一个文件是通过kernel读取文件，然后写入到用户空间，用户空间在把这个文件传给具体的程序处理；有了sendfile这个系统调用之后，可以直接讲文件传给具体的程序处理，避免了中间的拷贝；\n\n\n\n## redis的运行原理\n\n这部分和 《redis是单进程单线程单实例的，那么redis是怎么处理大量的并发请求的呢？》有点重复了。内容都是一致的。\n\nredis里面只有一个线程一个进程吗？ 并不是，要注意这个概念，在redis中处理用户命令的线程只有一个，但是redis本身并不是只有一个线程一个进程。\n\n![image-20230509215419415](Redis诞生背景原理介绍.assets/image-20230509215419415.png)\n\n假设目前有三个client连接了redis，redis是运行在linux上的；\n\n- client发送了redis命令进行查询或者设值，对linux来说，就是很多的socket打在了内核上\n- 然后通过epoll（create,ctl,wait）和共享空间（mmap）等待（wait）redis进程(6379和6380)准备数据，这个数据对linux来说就是fd；\n- 等redis准备好了，会将这些数据(或者说是fd)通知到内核（因为此时内核还在wait，等待回调呢），\n- 然后内核调用read获取内容，在发送给client；\n\n这就是整个redis的处理过程。那么redis为什么快？主要就是因为：使用了多路复用（提高性能）+共享空间（避免拷贝）保证了redis的快速处理。\n","tags":["redis","原理","IO模型"],"categories":["JAVA","数据库","REDIS"]},{"title":"idea激活","url":"/note/TOOLS/IDEA/idea激活/","content":"\n# idea激活\n\n\n\n激活使用的是无限试用的方法\n\n下载插件包：[ide-eval-resetter-2.1.6.zip](idea激活.assets/ide-eval-resetter-2.1.6.zip)\n\n直接拖到IDEA或者DataGrip中安装\n\n安装之后，在Help中就可以看到，点击就可以重置\n\n<img src=\"idea激活.assets/image-20221011163201374.png\" alt=\"image-20221011163201374\" style=\"zoom:80%;\" />","tags":["idea破解"],"categories":["TOOLS","idea"]},{"title":"【mybatis】mybatis从入门到入土","url":"/note/JAVA/SSM/【mybatis】Mybatis从入门到入土/","content":"\n\n\n# 1 环境准备\n## 1.1 下载源码导入IDEA\n\n先下载这三个项目：我是fork到自己仓库了，也可以从mybatis官方仓库下载：[https://github.com/mybatis](https://github.com/mybatis)\n\n> [https://github.com/zhuansun/mybatis-3](https://github.com/zhuansun/mybatis-3)\n\n> [https://github.com/zhuansun/spring](https://github.com/zhuansun/spring)\n\n> [https://github.com/zhuansun/parent](https://github.com/zhuansun/parent)\n\nmybatis-3：mybatis源码项目\n\nspring：mybatis与spring集成使用的，方便mybatis集成spring\n\nparent：mybatis源码所依赖的基础依赖\n\n将这三个项目导入到IDEA，导入方式不是直接打开文件夹，而是新建空项目，然后添加module（可以参考《Mybatis3源码深度解析 1.4节》）：\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/12Qv-Ty5zzBk7QuJvMls9YcQJ1sdFDpF6dZ3G-izeN0.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n项目接口如下：\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/qptRYBgkk0ZUvKQ4jdiTI6mZ-hE3SQ5K1DhAE5OEEFs.png\" alt=\"image\" style=\"zoom: 150%;\" />\n\n## 1.2 HSQLDB数据库简介\n* **是什么**\n* 是纯java语言写的关系型数据库管理系统\n* **怎么用**\n* 运行方式有两种：单独server部署（独立部署）或者内存模式运行（嵌入到应用中）；\n* 数据保存有两种方式：内存或者磁盘；\n* **为什么要用**\n* 因为Mybatis源码使用了HSQLDB作为单元测试使用的数据库，所以为了学习源码，需要了解。\n* **使用示例**\n* 1、准备好sql文件；\n* 2、在项目中引入hsqldb的依赖\n* 3、在代码中就可以直接使用\n\n# 2 JDBC知识准备\n## 2.1 JDBC是什么？\n* java语言提供的访问关系型数据的接口，或者说是规范；\n\n## 2.2 JDBC怎么用?\n* 一般来说分为四个步骤\n* 1、与数据源建立连接；\n* 2、执行SQL语句；\n* 3、检索SQL执行结果；\n* 4、关闭连接\n### * **与数据源建立连接**\n* 简单的来说，就是说去Connection对象：JDBC提供了Connection接口，用来表示与底层数据源的连接；\n* 获取Connection对象的方式一：DriverManager\n\n```java\nConnection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:mybatis\",\"sa\", \"\")\n```\n* 获取Connection对象的方式二：DataSource\n\n```java\n// 创建DataSource实例\nDataSource dataSource = new UnpooledDataSource(\"org.hsqldb.jdbcDriver\",\"jdbc:hsqldb:mem:mybatis\",\"sa\", \"\");\n// 获取Connection对象\nConnection connection = dataSource.getConnection();\n```\n### * **执行SQL语句**\n* JDBC获取到Connection对象后，可以设置事务或者创建Statement，PreparedStatement，CllableStatement对象；\n\n* Statement对象可以理解为SQL语句的执行器，比如调用Statement中的executeQuery方法执行查询，executeUpdate方法执行更新；\n* Statement执行之后，可以通过Statement接口提供的getResultSet获取查询结果集，或者通过getUpdateCount获取更新影响的行数；\n\n### * **检索SQL执行结果**\n* 执行SQL之后会有结果集，比如Statement使用getResultSet得到结果集，我们使用ResultSet这个接口来接收这些返回值；\n* 获取到返回值之后，使用ResultSet提供的各种get方法可以拿到结果；\n### * **关闭连接**\n* 关闭连接\n\n## 2.3 JDBC核心类解读\n### Connection\n* 是什么？一个Connection对象表示通过JDBC驱动与数据源建立的连接，这里的数据源可以是关系型数据库，文件系统或者是其他通过JDBC访问的数据。\n* 特性：使用JDBC API的应用程序，可能需要维护多个Connection对象，一个Connection对象可能访问多个数据源，也可能访问单个数据源。**？？？？没看懂**\n* 获取Connection的方式有两种：**一种是通过DriverManager，一种是通过DateSource（主流都是用这个，推荐）；**\n* 具体相关：包括JDBC驱动类型，DriverManager类，Driver接口，DataSource接口等；\n* JDBC**驱动类型**\n* JDBC驱动类型不是我们所说mysql-connection-java，而是更为底层的驱动类型方式，常见的mysql-connection-java这个jar包只是其中一个驱动类型的具体实现；\n* JDBC-ODBC Bridge Driver ：应用程序->JDBC API->JDBC驱动->ODBC驱动<-通信协议->数据库（桥接影响性能，不推荐）\n* Native API Driver：应用程序->JDBC API->JDBC驱动->特定客户端/特定链接库<-通信协议->特定数据库（特定数据库使用特定链接库，不能跨平台）\n* JDBC-Net Driver：应用程序->JDBC API->JDBC驱动<-通信协议->服务器<-通信协议->数据库（中间使用了服务器转发，影响性能），微软有一款产品再用。\n* Native Protocol Driver：应用程序->JDBC API->JDBC驱动-><-通信协议->数据库（直接使用java开发JDBC某一个数据库的驱动，直接使用该驱动访问数据库，少了转换，性能好，推荐）比如常见的mysql-connection-java.jar 以及oracle的等等，都是使用这个方式。\n* **Driver接口**\n* 所有的驱动都需要实现Driver接口，并且实现一个静态代码块。\n\n```java\npublic class AcmeJdbcDriver implements java.sql.Driver {\nstatic {\njava.sql.DriverManager.registerDriver(new AcmeJdbcDriver());\n}\n...\n}\n```\n* 静态代码块的作用是：在类加载的时候，注册当前驱动的实例；\n* 因为类加载的时候就会注册驱动，所以我们使用JDBC操作数据库之前都要先加载驱动\n\n```Plain Text\n Class.forName(\"org.hsqldb.jdbcDriver\");\n```\n* 加载驱动类目前有两种方式，一种是Class.forName() 一种是通过SPI机制；\n* **DriverAction接口**\n* 可以解除注册，从DriverManager中移除已经注册的驱动，知道就行了。一般是驱动开发人员需要关注；\n* **DriverManager类**\n* Driver接口是驱动，有一些实现类，这些实现类在实例化的时候，会将自己注册到DriverManager中；\n* DriverManager有两个重要的方式：registerDriver() 用来注册驱动实例的。一个是getConnection()用来获取数据库Connection对象的。\n* DriverManager的getConnection，会根据传进来的URL，解析，然后通过URL拿到具体的驱动实现类，最后通过具体的驱动实现类链接到对应的数据库。\n* **小结：三者之间的关系**\n\n```java\n//Driver调用DriverManager注册\npublic class XXXDriver implements Driver{\n    static void registerMe() {\n        DriverManager.registerDriver(new XXXDriver);\n    }\n    Connection connect(String url, java.util.Properties info) throws SQLException{\n        //具体实现\n    }\n}\n//应用程序调用DriverManager获取Connection连接\npublic MainTest{\n    public static void main(String[] args){\n        Connection connection = DriverManager.getConnection(...);\n    }\n}\n//DriverManager调用Driver获取Connection连接\npublic class Drivermanager{\n    //DriverManager的源码\n    public static Connection getConnection(...) throws SQLException {\n        //最终调用的是Driver接口中的connect方法\n        return driver.connect();\n    }\n}\n```\n* **DataSource接口**\n* 和DriverManager对比\n\n|      | DriverManager                                                | DataSource                                                   |\n| ---- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n|      | 需要在代码中硬编码指定驱动；Class.forName(....)，如果需要修改的时候，需要修改业务代码 | 使用配置的方式，同时使用JNDI暴露服务，通过逻辑名称可以简单的获取到DataSource对象，从而获得Connection； 另外当修改数据源的时候，只需要修改配置，不需要对应用代码进行修改。提高了应用程序的可移植性 |\n|      | 每获取一次Connection对象，都需要与数据库建立一次连接，使用完之后，需要关闭连接。 | DataSource接口支持数据库连接池和分布式事务。连接池通过对连接的复用而不是新建一个物理连接来显著地提高程序的效率。从而适用于任务繁忙、负担繁重的企业级分布式事务。 |\n|      | 参考文献：[http://www.voidcn.com/article/p-vwtcyipy-rn.html](http://www.voidcn.com/article/p-vwtcyipy-rn.html) | 参考文献：[http://www.voidcn.com/article/p-vwtcyipy-rn.html](http://www.voidcn.com/article/p-vwtcyipy-rn.html) |\n\n* 大部分开源框架使用的都是DataSource接口；\n* 关闭Connection对象\n* 使用完之后需要显示的关闭；\n* close() 用于关闭connection对象\n* isClosed() 判断连接是否关闭\n* isValid() 判断连接是否有效\n\n### Statement\nStatement是一个接口，有两个比较重要的子接口：PreparedStatement和CallableStatement。\n\nStatement接口定义了执行SQL语句的方法，不支持参数输入；\n\nPreparedStatement接口中增加了设置SQL参数的方法；设值字后，再次设值需要注意，可能需要clear之后才行。\n\nCallableStatement接口继承自PreparedStatement，增加了调用存储过程以及检索存储过程调用结果的方法。\n\n* **问题一：Statement接口中boolean execute(String sql, String columnNames\\[\\]) throws SQLException;这个方法的第二个入参的含义是什么？？**\n\n表示可以被用于检索！！去你妈的。。这是人能听懂的话吗？一步一步的往下看：\n\n首先要知道，在Statement中，以execute(..)方法为例，总共有四个方法，其中有三个方法，提到了可以被用于检索：**【注意：只有当sql是INSERT的时候，第二个字段才会生效，如果是UPDATE后者是DELETE语句，第二个参数填了也没用】**\n\n![image](【mybatis】Mybatis从入门到入土.assets/7_2hrcGsoVHlxvOYILE01hMteeiMPRDWx1WojqRqa6s.png)\n\n对于这三个方法，我们来看看第二个字段分别是什么含义？（摘录自java8api）\n\n```Plain Text\nautoGeneratedKeys - 一个常数，表示使用方法getGeneratedKeys是否应使自动生成的密钥可用于getGeneratedKeys; 以下常数之一： Statement.RETURN_GENERATED_KEYS或Statement.NO_GENERATED_KEYS\n```\n```Plain Text\ncolumnIndexes - 插入行中的列的索引数组，应该可用于通过调用方法进行 getGeneratedKeys\n```\n```Plain Text\ncolumnNames - 插入行中列的名称数组，应该可用于通过调用方法进行 getGeneratedKeys\n```\n瞅瞅，这说的是人话吗！！那么接下来用人话说就是：当我们希望拿到INSERT语句的返回结果（返回结果可以是主键，可以是表中某一个字段）的时候，就指定第二个参数，这样获取到resultSet的时候，就可以拿到我们期望的返回结果。这就叫做**可用于检索**！还是不懂，看个例子就懂了。\n\n例子1：不指定检索字段，是什么样子的\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/yh0upAZS2UmhemvNqE9x10Sqbq5C9xv3yUbszNTb2Y4.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n例子2：指定autoGeneratedKeys检索\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/K2JlTQsnkVc0_tujJUfD9j77ppode0Z28voacv5dShk.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n例子3：\n\n* 不贴代码了\n* 当我们指定检索为：\n\n```Plain Text\nstmt.executeUpdate(sql,Statement.NO_GENERATED_KEYS);\n```\n的时候，和没指定检索是一样的效果；\n\n例子4：\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/peIsrngrofKF5hmFox_31n-jIK03_WatS4LrQMvmwy8.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n总结：到这里，可能有点眉目了，但是还是不知道检索是什么？我们再来接着看指定columnIndexes和columnNames的时候，是什么样子的。\n\n例子5：\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/CTZdEsMJD22gk-eO4eaolRQ81UHZ8jwyrbkBfSqI0lI.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n例子6：\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/LdXnJySFue9S29nD9QMJ8TRGbc5MP7Zaa-K0lIzTZ0s.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n例子7：\n\n* 使用columnIndexes和columnNames的时候，如果超了（指定了3个索引，但是get4个），还是会报错的；\n* 当指定是columnNames的时候，除了可以通过getXXX(数字)的形式，也可以通过getXXX(\"name\")的形式；\n\n总结：当我们希望拿到INSERT语句的返回结果（返回结果可以是主键，可以是表中某一个字段）的时候，就指定第二个参数，这样获取到resultSet的时候，就可以拿到我们期望的返回结果。这就叫做**可用于检索**\n\n* **问题二：CallableStatement到底是干嘛的？什么是存储过程？什么是IN，什么是OUT，什么是INOUT？**\n\n想解答这个问题，需要知道什么是存储过程，都没有学习，也不知道是个啥。\n\n### ResultSet\nResultSet简单的说，就是SQL执行的结果，掌握下面三点：\n\nResultSet的类型：游标是否是可以滚动和修改是否对数据库敏感\n\nResultSet的并行性：resultSet是否可以读写\n\nResultSet的可保持性：事务结束后是否要关闭resultSet\n\n* ResultSet的类型：\n* TYPE\\_FORWARD\\_ONLY（默认）：游标只能向前\n* TYPE\\_SCROLL\\_INSENSITIVE：游标可向前向后，也可指定；ResultSet数据的修改对数据库不敏感（不敏感的意思就是ResultSet的修改不会影响到数据库中的记录）；\n* TYPE\\_SCROLL\\_SENSITIVE：游标可向前向后，也可指定；ResultSet数据库的修改对数据库敏感；\n* 这三个类型，在创建Statement的时候，可以指定\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/MvWGhLnUmWRbrV8Smj9H7lUHrTZx8e41t5wRwKdh7yk.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* ResultSet的并行性\n* CONCUR\\_READ\\_ONLY：为resultSet设置这种属性后，只能从ResultSet中读取数据；修改会报错；\n* CONCUR\\_UPDATABLE：为resultSet设置这种属性后，可读可写；\n* 这两个属性，也是在创建Statement的时候，可以指定的（同ResultSet的类型一样，都是可以指定的）\n* ResultSet的可保持性\n* HOLD\\_CURSOURS\\_OVER\\_COMMIT：调用connection的commit方法后，不关闭当前事务创建的resultSet。\n* CLOSE\\_CURSOURS\\_AT\\_COMMIT：会关闭；好处就是会提高系统的性能。\n* 默认的可保持性，取决于驱动的具体实现。\n* 修改ResultSet对象\n* 并行性为CONCUR\\_UPDATABLE的ResultSet可以使用ResultSet接口中提供的方法对其进行更新，包括更新行，删除行，在驱动的支持下，还可以插入行；\n* 关闭ResultSet对象\n\n### DataBaseMetaData\n* 简单的说，就是用来提供底层数据源的相关的信息；比如获取数据源的信息，获取数据源是否支持某一特性，获取数据源的限制等等；\n* 创建DataBaseMetaData对象：通过connection对象创建的。\n* 获取数据源的基本信息\n\n```Plain Text\n@Test\n    public void testDbMetaData() {\n        try {\n            Class.forName(\"org.hsqldb.jdbcDriver\");\n            // 获取Connection对象\n            Connection conn = DriverManager.getConnection(\"jdbc:hsqldb:mem:mybatis\",\n                    \"sa\", \"\");\n            DatabaseMetaData dmd = conn.getMetaData();\n            System.out.println(\"数据库URL:\" + dmd.getURL());\n            System.out.println(\"数据库用户名:\" + dmd.getUserName());\n            System.out.println(\"数据库产品名:\" + dmd.getDatabaseProductName());\n            System.out.println(\"数据库产品版本:\" + dmd.getDatabaseProductVersion());\n            System.out.println(\"驱动主版本:\" + dmd.getDriverMajorVersion());\n            System.out.println(\"驱动副版本:\" + dmd.getDriverMinorVersion());\n            System.out.println(\"数据库供应商用于schema的首选术语:\" + dmd.getSchemaTerm());\n            System.out.println(\"数据库供应商用于catalog的首选术语:\" + dmd.getCatalogTerm());\n            System.out.println(\"数据库供应商用于procedure的首选术语:\" + dmd.getProcedureTerm());\n            System.out.println(\"null值是否高排序:\" + dmd.nullsAreSortedHigh());\n            System.out.println(\"null值是否低排序:\" + dmd.nullsAreSortedLow());\n            System.out.println(\"数据库是否将表存储在本地文件中:\" + dmd.usesLocalFiles());\n            System.out.println(\"数据库是否为每个表使用一个文件:\" + dmd.usesLocalFilePerTable());\n            System.out.println(\"数据库SQL关键字:\" + dmd.getSQLKeywords());\n            IOUtils.closeQuietly(conn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n## 2.4 JDBC事务\n* 事务边界：事务的开启是JDBC驱动或者数据库决定的，不能再代码中显示的开启；有些框架可能支持显示开始事务，至少JDBC不支持；什么时候开启事务，是SQL:2003规范决定的。\n* 事务提交：关闭一个事务有两种方式，一种是自动提交（默认开启）：SQL在执行完之后，自动提交事务；还有一种是手动提交事务，需要关闭自动提交，然后在提交事务的时候，调用commit()方法；或者使用rollback()回滚事务；\n* 事务隔离级别：事务隔离级别用于指定事务中对数据的操作对其他事务的可见性；\n* 事务中出现的问题\n* 脏读：B事务读取A事务中没有commit的数据，如果A回滚，此时B事务的数据就是错误的；\n* 不可重复读：A事务操作时间很长，开始的时候读一条记录，B事务修改了这条记录，A事务再次读取这条记录将得到不同的结果；\n* 幻读：A事务读取一些符合条件的数据，B事务插入了符合条件的若干数据，A通过相同的条件将会读取到B事务插入的数据；\n* 事务的隔离级别\n* TRANSACTION\\_NONE：驱动不支持事务\n* TRANSACTION\\_READ\\_UNCOMMITED：允许其他事务读取当前事务未提交的数据，可能出现脏读，不可重复读，幻读；\n* TRANSACTION\\_READ\\_COMMITED：当前事务未提交对其他事务是不可见的。可以解决脏读，会出现不可重复读，幻读\n* TRANSACTION\\_REPEATABLE\\_READ：保证在一次事务中，相同查询得到结果是一致的，可以解决脏读和不可重复读，不能解决幻读；\n* TRANSACTION\\_SERIALIZABLE：串行事务；可以解决上面三个问题，但是并发效率极低；\n* 默认的事务隔离级别是由数据库驱动实现的。也可以通过connecton.setTransactionSolation()设置；\n* 事务的保存点\n* 保存点通过在事务中标记一个中间的点，一旦标记，事务可以回滚到标记点，而不影响保存点之前的操作；\n* 驱动是否支持保存点，可以通过DataBaseMetaData中的supportSavePoints()来指定；\n* 设置保存点：connection.setSavePoint()\n* 回滚到保存点：setSavePoint会返回一个SavePoint对象，rollback的时候可以把这个对象传进去；\n\n**“磨刀不误砍柴工”这句话说得好，掌握了JDBC，在学习框架源码，往上靠就行了**\n\n# 3 Mybatis常用工具类\n介绍mybatis中一些比较实用的工具类，例如：SQL，ScriptRunner，SqlRunner和MetaObject等；\n\n## 3.1 SQL类\n用于在Java代码中动态构建SQL语句；\n\n```java\n    @Test\n    public void testSelectSQL() {\n        String orgSql = \"SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\\n\" +\n                        \"FROM PERSON P, ACCOUNT A\\n\" +\n                        \"INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID\\n\" +\n                        \"INNER JOIN COMPANY C on D.COMPANY_ID = C.ID\\n\" +\n                        \"WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) \\n\" +\n                        \"OR (P.LAST_NAME like ?)\\n\" +\n                        \"GROUP BY P.ID\\n\" +\n                        \"HAVING (P.LAST_NAME like ?) \\n\" +\n                        \"OR (P.FIRST_NAME like ?)\\n\" +\n                        \"ORDER BY P.ID, P.FULL_NAME\";\n\n        String newSql =  new SQL() {{\n                    SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\");\n                    SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\");\n                    FROM(\"PERSON P\");\n                    FROM(\"ACCOUNT A\");\n                    INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\");\n                    INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\");\n                    WHERE(\"P.ID = A.ID\");\n                    WHERE(\"P.FIRST_NAME like ?\");\n                    OR();\n                    WHERE(\"P.LAST_NAME like ?\");\n                    GROUP_BY(\"P.ID\");\n                    HAVING(\"P.LAST_NAME like ?\");\n                    OR();\n                    HAVING(\"P.FIRST_NAME like ?\");\n                    ORDER_BY(\"P.ID\");\n                    ORDER_BY(\"P.FULL_NAME\");\n                }}.toString();\n\n        assertEquals(orgSql, newSql);\n    }\n```\n## 3.2 SqlRunner和ScriptRunner\n在Mybatis源码测试用例中出现的频率比较高；用于执行SQL语句和SQL脚本；\n\n```java\n @Test\n    public void testSelectOne() throws SQLException {\n        SqlRunner sqlRunner = new SqlRunner(connection);\n        String qryUserSql = new SQL() {{\n            SELECT(\"*\");\n            FROM(\"user\");\n            WHERE(\"id = ?\");\n        }}.toString();\n        Map<String, Object> resultMap = sqlRunner.selectOne(qryUserSql, Integer.valueOf(1));\n        System.out.println(JSON.toJSONString(resultMap));\n    }\n```\n```java\n @Test\n    public void testScriptRunner() {\n        try {\n            Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:mybatis\",\n                    \"sa\", \"\");\n            ScriptRunner scriptRunner = new ScriptRunner(connection);\n            scriptRunner.runScript(Resources.getResourceAsReader(\"create-table.sql\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n## 3.3 MetaObject和MetaClass\n是Mybatis中的反射工具类，分别封装了对对象和类的反射访问；\n\n```java\n    @Test\n    public void testMetaObject() {\n        List<Order> orders = new ArrayList() {\n            {\n                add(new Order(\"order20171024010246\", \"《Mybatis源码深度解析》图书\"));\n                add(new Order(\"order20171024010248\", \"《AngularJS入门与进阶》图书\"));\n            }\n        };\n        User user = new User(orders, \"江荣波\", 3);\n        MetaObject metaObject = SystemMetaObject.forObject(user);\n        // 获取第一笔订单的商品名称\n        System.out.println(metaObject.getValue(\"orders[0].goodsName\"));\n        // 获取第二笔订单的商品名称\n        System.out.println(metaObject.getValue(\"orders[1].goodsName\"));\n        // 为属性设置值\n        metaObject.setValue(\"orders[1].orderNo\",\"order20181113010139\");\n        // 判断User对象是否有orderNo属性\n        System.out.println(\"是否有orderNo属性且orderNo属性有对应的Getter方法：\" + metaObject.hasGetter(\"orderNo\"));\n        // 判断User对象是否有name属性\n        System.out.println(\"是否有name属性且name属性有对应的Getter方法：\" + metaObject.hasGetter(\"name\"));\n\n    }\n```\n```java\n    @Test\n    public void testMetaClass() {\n        MetaClass metaClass = MetaClass.forClass(Order.class, new DefaultReflectorFactory());\n        // 获取所有有Getter方法的属性名\n        String[] getterNames = metaClass.getGetterNames();\n        System.out.println(JSON.toJSONString(getterNames));\n        // 是否有默认构造方法\n        System.out.println(\"是否有默认构造方法：\" + metaClass.hasDefaultConstructor());\n        // 某属性是否有对应的Getter/Setter方法\n        System.out.println(\"orderNo属性是否有对应的Getter方法：\" + metaClass.hasGetter(\"orderNo\"));\n        System.out.println(\"orderNo属性是否有对应的Setter方法：\" + metaClass.hasSetter(\"orderNo\"));\n\n        System.out.println(\"orderNo属性类型：\" + metaClass.getGetterType(\"orderNo\"));\n\n        // 获取属性Getter方法\n        Invoker invoker = metaClass.getGetInvoker(\"orderNo\");\n        try {\n            // 通过Invoker对象调用Getter方法获取属性值\n            Object orderNo = invoker.invoke(new Order(\"order20171024010248\",\"《Mybatis源码深度解析》图书\"), null);\n            System.out.println(orderNo);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n        }\n\n    }\n```\n## 3.4 ObjectFactory和ProxyFactory\n是对象创建的工具类，前者用于创建Mapper映射实体对象，后者用于创建Mapper映射实体对象对应的代理对象，通过动态代理实现Mybatis中懒加载机制。\n\n```java\n    @Test\n    public void testObjectFactory() {\n        ObjectFactory objectFactory = new DefaultObjectFactory();\n        List<Integer> list = objectFactory.create(List.class);\n        Map<String,String> map = objectFactory.create(Map.class);\n        list.addAll(Arrays.asList(1, 2, 3));\n        map.put(\"test\", \"test\");\n        System.out.println(list);\n        System.out.println(map);\n    }\n```\n```java\n    @Test\n    public void testProxyFactory() {\n        // 创建ProxyFactory对象\n        ProxyFactory proxyFactory = new JavassistProxyFactory();\n        Order order = new Order(\"gn20170123\",\"《Mybatis源码深度解析》图书\");\n        ObjectFactory objectFactory = new DefaultObjectFactory();\n        // 调用ProxyFactory对象的createProxy（）方法创建代理对象\n        Object proxyOrder = proxyFactory.createProxy(order\n                ,mock(ResultLoaderMap.class)\n                ,mock(Configuration.class)\n                ,objectFactory\n                ,Arrays.asList(String.class,String.class)\n                ,Arrays.asList(order.getOrderNo(),order.getGoodsName())\n        );\n        System.out.println(proxyOrder.getClass());\n        System.out.println(((Order)proxyOrder).getGoodsName());\n    }\n```\n# 4 Mybatis核心组件介绍\n## 4.1 使用Mybatis操作数据库\n* 编写mybatis的主配置文件：mybatis-config.xml\n* 新增Java实体与数据库记录建立映射\n* 定义用于执行SQL的Mapper\n* 通过Mybatis提供的API执行我们定义的Mapper\n\n## 4.2 Mybatis核心组件\n<img src=\"【mybatis】Mybatis从入门到入土.assets/-TKD7IgXtBFz_zTiV8VgeJKYL2twPUzV38ZrFg6CzPs.png\" alt=\"image\" style=\"zoom:67%;\" />\n\n### Configuration\nMybatis的配置信息有两种，一种是用来描述Mybatis的主配置信息，一种是用来配置执行SQL语句的Mapper配置文件。\n\nConfiguration是用来描述Mybatis的主配置信息的，其他组件需要获取配置信息的时候，直接通过Configuration对象获取。除此之外，MyBatis在应用启动时，将Mapper配置信息，类型别名，TypeHandler等注册到Configuration组件中，其他组件需要这些信息时，也可以从Configuration对象中获取。\n\n三大作用：\n\n* 用于描述MyBatis配置信息，项目启动时，所有的配置信息都会转换为configuration对象；\n* 作为中间这简化MyBatis各个组件之间的交互，属于**中介者模式**的应用；\n* 作为Executor, ParameterHandler, ResultSetHandler, StatementHandler组件的工厂，便于创建这些组件的实例\n\n### MappedStatement\n用来描述Mapper中的SQL配置信息，是对XML配置文件中///等标签或者@Select/@Update等注解配置信息的封装。\n\n### SqlSession\n是Mybatis提供的面向用户的API，表示和数据库交互时的会话对象，用于完成数据库的CRUD功能，SqlSession是Executor组件的外观，目的是对外提供易于理解和使用的数据库操作接口；\n\n### Executor\n是Mybatis的SQL执行器，在Mybatis中对数据库所有的增删改查操作都是由Executor组件完成的。\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/3MheQjlJAuwOpC0tNFJavPgWUJVQfKCxgQUX0X-ezWQ.png\" alt=\"image\" style=\"zoom: 150%;\" />\n\nSimpleExecutor：能够完成基本的增删改查操作\n\nReuseExecutor：对JDBC的Statement做了缓存，当执行同样的SQL时，直接从缓存中取Statement，避免了频繁创建和销毁，从而提升系统性能；\n\nBatchExecutor：会对调用同一个Mapper执行的update，insert和delete操作，调用Statement对象的批量处理功能。\n\nCachingExecutor：我们知道Mybatis支持一二级缓存，当开启了二级缓存时，会使用CachingExecutor对上面三个进行装饰，为查询增加二级缓存功能。用到了**装饰者模式**的设计模式\n\nExecutor是在SqlSessionFactory.openSession的时候创建的。\n\n### StatementHandler\n封装了对JDBC Statement对象的使用，比如为Statement对象设置参数，调用Statement接口与数据库交互等等。\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/2-ndfSVFWd93s2tMI-R9AYlw7zsz8AQp_Gs-lkLKYa0.png\" alt=\"image\" style=\"zoom:80%;\" />\n\nBaseStatementHandler：抽象类，封装了通用逻辑和方法执行流程，使用了模板方法模式；\n\nSImpleStatementHandler：封装了对JDBC中Statement对象的操作；\n\nPreparedStatementHandler：封装了对JDBC中PreparedStatement对象的操作；\n\nCallableStatementHandler：封装了对JDBC中CallableStatement对象的操作；\n\nRoutingStatementHandler：会更具Mapper配置中的statementType属性（取值为STATEMENT，PREPARED或CALLABLE）创建对应的StatementHandler的实现\n\n### ParameterHandler\n当Mybatis框架使用的Statement类型是PreparedStatement和CallableStatement时，ParameterHandler用于为Statement对象参数占位符设置值。\n\n比较简单，就一个实现：拿到sql中所有的参数，遍历所有的参数，如果需要设值，就获取TypeHandler，然后通过TypeHandler对这个占位符设值。\n\n### ResultSetHandler\n封装了对JDBC中ResultSet的使用，当MyBatis执行的SQL类型是SELECT语句时，ResultSetHandler用于将查询结果转换成Java对象。\n\n一样比较简单，只有一个默认的实现。\n\n### TypeHandler\n是Mybatis中的类型处理器，用于处理Java类型与JDBC类型之间的映射。它的作用主要体现在能够根据Java类型调用PreparedStatement（JDBC的）或CallableStatement（JDBC的）对象对应的SetXXX()方法为Statement对象设置值，而且能够根据Java类型调用ResultSet（JDBC的）对象赌赢的getXXX()获取SQL执行结果。\n\n简单的说：及时jdbc类型和Java类型处理映射的关系；\n\nMybatis通过TypeHandlerRegistry建立JDBC类型，Java类型与Typehandler之间的映射关系；这个类的逻辑比较简单，就是在维护了三个map，分别是jdbc类型与TypeHander的关系，Java类型与Jdbc类型与TypeHander的关系，TypeHander的class与TypeHander之间的关系；这三个map会在TypeHandlerRegistry的无参构造方法中进行register，而这个无参构造方法是在Configuration中被调用的。\n\n### 总结\nMybatis通过sqlSession操作数据库，sqlSession是用户层面的API。\n\n实际上sqlSession是Executor组件的外观（外观模式），目的是为用户提供更友好的方式操作数据库。\n\n真正执行sql操作的是Executor组件，Executor组件可以理解为SQL的执行器，它会使用StatementHandler组件对JDBC的Statement对象进行操作。\n\n当Statement类型是CallableStatement和PreparedStatement时，会通过ParameterHandler组件为参数占位符赋值。\n\nParameterHandler组件中会根据Java类型找到对应的TypeHandler对象；\n\nTypeHandler中会通过Statement提供的setXXX方法为Statement对象中的参数占位符进行设值。\n\nStatementHandler组件使用JDBC中的Statement对象与数据库完成交互后，当SQL语句类型是SELECT时，Mybatis通过ResultSetHandler组件从Statement对象中获取ResultSet对象，然后将ResultSet对象转换为Java对象。\n\n# 5 SqlSession的创建过程\nsqlSession是Mybatis的最顶层API，来学习一下它的创建过程，从三个部分入手\n\n* Configuration实例的创建过程\n* SqlSessionFactory实例的创建过程\n* SqlSession实例化的过程\n\n## 5.1 Configuration实例的创建过程\nConfiguration是Mybatis中比较重要的组件，我们知道mybatis有两种配置文件，一种是描述sql的mapper.xml配置文件，一种是描述mybatis配置的文件；Configuration的创建和xml文件密切相关，但是怎么从xml文件到Configuration的呢？\n\n* 涉及到xml文件的解析，mybatis采用的**XPath**解析xml文件，将配置信息转换成Configuration对象的；（不细说）\n* MyBatis封装了**XPathParser**工具类，简化了XPath的操作，可以方便的获取节点属性，子节点信息等\n\nConfiguration有三个作用：\n\n* 用于描述MyBatis配置信息，例如标签配置的参数信息\n* 作为容器注册Mybatis的其他组件,例如TypeHandler，MappedStatement等\n* 提供工厂方法，创建ResultSethandler，StatementHandler，Executor，Parameterhandler等\n\nConfiguration的创建流程\n\n* 入口：MyBatis通过XMLConfigBuilder来创建Configuration对象的；XMLConfigBuilder接收一个xml配置文件的输入流，调用parse()方法，返回一个Configuration对象。\n* XMLConfigBuilder的parse()方法，会先解析configuration标签，然后通过parseConfiguration()这个方法，解析mybatis的所有标签，每一个标签的解析都有一个单独的方法。\n* 当所有的方法都解析完成之后，就得到了我们的configuration对象。\n\n```java\n        Reader reader = Resources.getResourceAsReader(\"mybatis-config.xml\");\n        // 创建XMLConfigBuilder实例\n        XMLConfigBuilder builder = new XMLConfigBuilder(reader);\n        // 调用XMLConfigBuilder.parse（）方法，解析XML创建Configuration对象\n        Configuration conf = builder.parse();\n```\n## 5.2 SqlSessionFactory实例的创建过程\nmybatis中的sqlSession是使用工厂模式创建的。所以在创建sqlSession之前，需要先创建SqlSessionFactory对象；然后调用工厂的openSession()方法，得到一个sqlSession对象。\n\nsqlSession是mybatis面向用户的最顶层的API；\n\n```java\n        // 获取Mybatis配置文件输入流\n        Reader reader = Resources.getResourceAsReader(\"mybatis-config.xml\");\n        // 通过SqlSessionFactoryBuilder创建SqlSessionFactory实例\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);\n        // 调用SqlSessionFactory的openSession（）方法，创建SqlSession实例\n        SqlSession session = sqlSessionFactory.openSession();\n```\n为了创建sqlSessionFactory对象，首先创建了一个SqlSessionFactoryBuilder对象，然后调用它的build方法，返回一个SqlSessionFactory对象；\n\n那么他的build方法都做了什么事情呢？\n\n```java\n  public SqlSessionFactory build(Reader reader, String environment, Properties properties) {\n    try {\n      XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);\n      return build(parser.parse());\n    }\n    ....\n  }\n```\nbuild方法调用重载的build方法，创建了一个XMLConfigBuilder对象，通过XMLConfigBuilder的parse方法得到一个configuration对象，然后再次调用build方法，就可以得到一个SqlSessionFactory对象。\n\n这里的build方法又做了什么呢？\n\n```java\n  public SqlSessionFactory build(Configuration config) {\n    return new DefaultSqlSessionFactory(config);\n  }\n```\n就是仅仅的一个new而已。这样就**得到了SqlSessionFactory对象**。接下来看**怎么获取sqlSession**呢？\n\n## 5.3 SqlSession实例化的过程\n**得到了SqlSessionFactory对象**。接下来看**怎么获取sqlSession**呢？\n\n拿到sqlSessionFactory后，通过factory的openSession可以得到一个sqlSession对象；openSession都干了什么呢？\n\n```java\n  private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n      //获取mybatis主配置文件的环境信息\n      final Environment environment = configuration.getEnvironment();\n      //创建事务管理器工厂\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      //创建事务管理器\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      //根据mybatis主配置文件的executorType的类型创建对应的executor实例（我们知道mybatis执行sql使用过Executor执行的）\n      final Executor executor = configuration.newExecutor(tx, execType);\n      //创建defaultSqlSession实例\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      // may have fetched a connection so lets call close()\n      closeTransaction(tx);\n      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n```\n获取mybatis主配置文件的环境信息，然后通过环境信息获取事务管理器工厂，通过事务管理器工厂获取事务管理器；\n\n然后获取mybatis主配置文件的executorType类型，和事务管理器一起创建Executor实例；\n\n最后获取sqlSession对象。sqlSession对象中持有executor对象的引用，真正执行SQL操作的是Executor对象。\n\n# 6 SqlSession执行Mapper的过程\nMyBatis的Mapper是由两部分组成：\n\n* 一个是Mapper接口：XXXMapper.java\n\n```java\npublic interface UserMapper {\n\n    List<UserEntity> listAllUser();\n\n    @Select(\"select * from user where id=#{userId,jdbcType=INTEGER}\")\n    UserEntity getUserById(@Param(\"userId\") String userId);\n\n    List<UserEntity> getUserByEntity( UserEntity user);\n}\n```\n* 一个是通过注解或者是XML配置的：XXXMapper.xml\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.blog4java.mybatis.example.mapper.UserMapper\">\n    <sql id=\"userAllField\">\n      id,create_time, name, password, phone, nick_name\n    </sql>\n\n    <select id=\"listAllUser\"  resultType=\"com.blog4java.mybatis.example.entity.UserEntity\" >\n        select\n        <include refid=\"userAllField\"/>\n        from user\n    </select>\n\n</mapper>\n\n```\n## 6.1 Mapper 接口的注册和获取（动态代理）过程\n既然是说注册和获取过程，肯定是两个部分，注册和获取；我们先从获取来看，因为简单。\n\nMapper接口用来定义执行SQL语句相关的方法。\n\n```java\n @Test\n    public  void testMybatis () throws IOException {\n        // ...\n        // 获取SqlSession实例\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        // 获取UserMapper代理对象\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n        // 执行Mapper方法，获取执行结果\n        List<UserEntity> userList = userMapper.listAllUser();\n\n        System.out.println(JSON.toJSONString(userList));\n    }\n```\nsqlSession.getMapper()获取了一个UserMapper的引用，返回的这个引用到底是什么呢？\n\n我们知道接口中定义的方法一定要通过某个类实现，然后创建这个实现类的实例，才能调用方法。\n\n那么sqlSession.getMapper()方法返回的一定是某个类的实例，是哪个类呢？\n\n其实返回的是一个动态代理对象；下面从两个部分来解析这个部分：\n\n* 简单而标准的JDK动态代理是什么样子的？\n* Mybatis的动态代理怎么实现的？\n\n**简单而标准的动态代理**，代码可以参考mybatis-chapter06\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/Ir1XxRhQgNjnKG39bM_HfWNuek7zmX99GosqiHhoA9k.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n**Mybatis的动态代理怎么实现的？**\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/sA8c4Sv6GSkiDxHGuXIig0uq8wvE5pflypKz3yN7x6Q.png\" alt=\"image\" style=\"zoom:80%;\" />\n\nsqlSession.getmapper做了什么事情呢？\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/MZOwlUoFHpxp37EI-6X3gZ5mdx2RIUh-C_GFME_RWkU.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n简单的描述就是：\n\n1、SqlSession.getMapper()调用的是DefaultSqlSession中的getMapper();\n\n2、DefaultSqlSession中的getMapper()是从configuration中getMapper中获取；\n\n3、configuration中getMapper调用的是MapperRegistry的getMapper;\n\n4、MapperRegistry的getMapper是从自己的一个属性中获取：knownMappers.get()，获取代理工厂MapperProxyfactory；\n\n5、然后代理工厂MapperProxyfactory通过newInstance方法，调用Proxy(JDK)生成动态代理对象。\n\n> 在这里，有一个问题，对比标准的代理方式，我们发现mybatis的代理方式，好像没有持有被代理对象的引用？那么这个动态代理，代理的是什么呢？？ ----> [按住ctrl,点我查看答案](#6.6.1%20%20Mybatis%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%BB%A3%E7%90%86%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F)\n\n在第4步中，从knownMappers中后获取代理工厂，拿到代理工厂，就可以创建代理对象了，那么，knownMappers是什么时候注册进去的呢？这里就说了我们的**Mapper接口的注册过程**；\n\nknownMappers是一个Map对象，它里面维护的是：Mapper接口对应的class对象 和 代理工厂对象的关系；\n\nknownMappers是类MapperRegistry的一个属性，在MapperRegister中提供一个方法addMappers，通过这个方法可以注册：Mapper接口对应的class对象 和 代理工厂对象的关系；（同时MapperRegistry还有getMapper方法，可以用来获取）\n\n那么这个addMapper是什么时候调用的呢？？这里先简单的说一下，后面还会再提到。\n\n在Configuration初始化的时候，我们知道Configuration的初始化，是从过XMLConfigBuilder中的parse方法初始化的，在parse方法中初始化了很多的属性，其中就包括mapper的初始化。\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/2w3wQEXMBA-jF6EoD1Kycz-7tU6ENXtkCFjA_qYDmK4.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n在mapper初始化的方法中mapperElement中，调用了configuration的addMapper方法，然后调用了mapperRegistry.addMappers;最终会调用到我们期望调用的方法；\n\n## 6.2 Mapper XML配置信息的解析和注册过程\n前面说过，MyBatis通过MappedStatement描述Mapper的SQL配置信息，SQL配置有两种方式：\n\n* 一种是通过XML文件配置\n* 一种是通过Java注解（其实本质就是一种轻量级的配置信息）\n\n流程图搞了几天，都弄不出来，简单点，用语言描述一下\n\n1、我们知道解析xml，都要解析之后保存在Configuration中，那么找到configuration的解析入口：\n\n```java\nXMLConfigBuilder#parseConfiguration\n```\n2、因为这里说的是解析mapper，我们找到专门解析mapper标签的方法；\n\n```java\norg.apache.ibatis.builder.xml.XMLConfigBuilder#mapperElement\n```\n```java\n  private void mapperElement(XNode parent) throws Exception {\n    if (parent != null) {\n      for (XNode child : parent.getChildren()) {\n        if (\"package\".equals(child.getName())) {\n          String mapperPackage = child.getStringAttribute(\"name\");\n          //这里就是将mapper，找到对应的mapper文件和mapper class，保存在mapperRegistry中\n          configuration.addMappers(mapperPackage);\n        } else {\n\n          if (resource != null && url == null && mapperClass == null) {\n            //通过 resource 属性指定XML文件路径\n            ErrorContext.instance().resource(resource);\n            try(InputStream inputStream = Resources.getResourceAsStream(resource)) {\n              XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());\n              mapperParser.parse();\n            }\n          }\n        }\n      }\n    }\n  }\n```\n3、在上面的代码中，进入到\n\n```java\nmapperParser.parse();\n```\n在这个方法里面解析所有的sql，并将sql生成MappedStatement，保存在configuration中；\n\n```java\n  public void parse() {\n    if (!configuration.isResourceLoaded(resource)) {\n      //调用XPathParser的evalNode()方法获取根节点对应的XNode对象，\n      //然后开始解析所有的sql\n      configurationElement(parser.evalNode(\"/mapper\"));\n      //将资源路径添加到Configuration中\n      configuration.addLoadedResource(resource);\n      //\n      bindMapperForNamespace();\n    }\n\n    //之前已经解析过一遍了，如果出了异常，继续解析之前出现异常的ResultMap对象\n    parsePendingResultMaps();\n    //之前已经解析过一遍了，如果出了异常，继续解析之前出现异常的CacheRef对象\n    parsePendingCacheRefs();\n    //之前已经解析过一遍了，如果出了异常，继续解析之前出现异常的select|insert|update|delete对象\n    parsePendingStatements();\n  }\n```\n4、进入到主要的解析方法中\n\n```java\norg.apache.ibatis.builder.xml.XMLMapperBuilder#configurationElement\n```\n,在这个方法里面，解析所有的具体的sql语句；\n\n```java\n  private void configurationElement(XNode context) {\n    try {\n      //获取命名空间，命名空间不能为空\n      String namespace = context.getStringAttribute(\"namespace\");\n      if (namespace == null || namespace.isEmpty()) {\n        throw new BuilderException(\"Mapper's namespace cannot be empty\");\n      }\n      //设置当前正在解析的mapper的名称空间\n      builderAssistant.setCurrentNamespace(namespace);\n      cacheRefElement(context.evalNode(\"cache-ref\"));\n      cacheElement(context.evalNode(\"cache\"));\n      parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\n      resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\n      sqlElement(context.evalNodes(\"/mapper/sql\"));\n      buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n    } catch (Exception e) {\n      throw new BuilderException(\"Error parsing Mapper XML. The XML location is '\" + resource + \"'. Cause: \" + e, e);\n    }\n  }\n```\n5、这个方法里面解析了很多，我们以解析crud的sql为例，进入到\n\n```Plain Text\nbuildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n```\n，然后在进入到\n\n```Plain Text\norg.apache.ibatis.builder.xml.XMLMapperBuilder#buildStatementFromContext(java.util.List<org.apache.ibatis.parsing.XNode>, java.lang.String)\n```\n到这里面就比较清晰了。\n\n6、使用XMLStatementBuilder进行解析，\n\n```Plain Text\nstatementParser.parseStatementNode();\n```\n解析的方法很长，就不一一列举了，当解析完成的时候，会调用builderAssistant的方法，这是一个辅助类。\n\n```Plain Text\n  public void parseStatementNode() {\n\n    //解析select|insert|update|delete标签\n\n    //将<include>标签替换成<sql>中的内容\n\n    //获取languageDriver对象\n\n    // Parse selectKey after includes and remove them.\n\n    // Parse the SQL (pre: <selectKey> and <include> were parsed and removed)\n\n    //通过languageDriver解析SQL内容，生成SqlSource对象\n\n    //默认的Statement类型是PreparedStatement\n\n    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,\n        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,\n        resultSetTypeEnum, flushCache, useCache, resultOrdered,\n        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);\n  }\n```\n7、在`builderAssistant.addMappedStatement`中，会调用`configuration.addMappedStatement(statement);`将生成的MappedStatement放在configuration中。\n\n## 6.3 Mapper 接口中的方法调用过程\n我们知道，mybatis的方法调用的过程，其实是调用动态代理对象的invoke方法，所以，想知道接口方法的调用过程，就看看invoke方法的执行过程。\n\n```Plain Text\n // 从SqlSession中获取UserMapper代理对象\n UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n // 执行Mapper方法，获取执行结果\n List<UserEntity> userList = userMapper.listAllUser();\n```\n上面代码通过获取到的userMapper调用listAlluser的时候，其实userMapper对象已经是一个动态代理对象了。当这个方法执行的时候，其实执行的是MapperProxy的invoke方法；\n\nMapperProxy的invoke方法的代码很简单：\n\n```Plain Text\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n      if (Object.class.equals(method.getDeclaringClass())) {\n        //如果是继承自Object的类，就直接执行，不处理\n        return method.invoke(this, args);\n      } else {\n        //通过cachedInvoker获取MapperMethodInvoker\n        return cachedInvoker(method).invoke(proxy, method, args, sqlSession);\n      }\n    } catch (Throwable t) {\n      throw ExceptionUtil.unwrapThrowable(t);\n    }\n  }\n```\n1、继承自Object的就不说了，看else里面的。\n\n```Plain Text\ncachedInvoker(method)\n```\n这个方法是mybatis新版本里面的，之前不是这样的。\n\n2、这个方法主要作用是根据动态代理对象调用的方法，判断是否是默认方法（jdk8提供的接口也可以有方法实现体）\n\n3、如果是默认方法，就获取MethodHandle，然后封装成DefaultMethodInvoker；这里不说，不是我们关注的重点。\n\n4、如果不是默认方法，就是调用的mapper接口中的方法，就获取MapperMethod，然后封装成PlainMethodInvoker；这个是重点。\n\n5、获取到MapperMethodInvoker之后，调用invoke方法，重点关注PlainMethodInvoker的invoke方法内容。在这个方法内部，调用了MapperMethod的execute方法。\n\n6、execute方法中的内容，我们等会再说，先回过头看看MapperMethod是个什么东西？\n\n7、MapperMethod中包含SqlCommand（封装了SQL语句的类型和Mapper的ID）和MethodSignature（方法签名，返回值类型，分页信息和参数信息）；分别来看这两个内部类。\n\n8、SqlCommand：\n\n```Plain Text\n    public SqlCommand(Configuration configuration, Class<?> mapperInterface, Method method) {\n      final String methodName = method.getName();\n      // 获取声明该方法的类或接口的Class对象，目的是为了获取MappedStatement\n      final Class<?> declaringClass = method.getDeclaringClass();\n      // 获取描述 insert,update 等标签的MappedStatement对象\n      MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass,\n          configuration);\n\n    // 目的就是为了从MappedStatement中获取id和type\n        name = ms.getId();\n        type = ms.getSqlCommandType();\n\n    }\n```\n9、MethodSignature：\n\n```Plain Text\n    public MethodSignature(Configuration configuration, Class<?> mapperInterface, Method method) {\n      //获取方法的返回值类型\n      Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, mapperInterface);\n      .....\n      //RowBounds参数位置索引,用于处理后续的分页查询\n      this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);\n      //ResultHander参数位置索引，用于处理数据库中检索的每一行数据\n      this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);\n      //ParamNameResolver用于解析Mapper方法参数\n      this.paramNameResolver = new ParamNameResolver(configuration, method);\n    }\n```\n其中new ParamNameResolver(configuration, method)需要说一说，这个类是用来描述sql的参数信息。\n\n* 将@params注解的参数获取到；\n* 如果没有注解，检查参数useActualParamName，使用参数名称作为sql参数的名字。\n* 获取到所有的参数之后，保存在map中，放在不可变的names中。\n\n10、说完了SqlCommand和MethodSignature，在回过头看MapperMethod的execute方法；\n\n* 首先根据SqlCommand对象获取sql语句的类型；\n* 然后根据sql语句的类型调用sqlSession对象对应的方法；（sqlSession是mybatis提供的用户层面的API，方便操作，mybatis中真正执行的是Executor组件）\n\n好了，结束了，在往下看，就是sqlSession怎么执行一个sql的了。\n\n## 6.4 SqlSession执行Mapper的过程\nmybatis生成动态代理之后，调用mapperProxy的invoke方法，在invoke方法中，最终会调用sqlSession的方法，以查询为例子，会调用\n\n```Plain Text\nsqlSession.selectList(command.getName(), param);\n```\n,我们知道sqlSession是mybatis提供的用户层面的API，方便用户查询操作的，所以我们看下他具体是怎么执行查询的呢？\n\n1、selectList会不停的调用重载方法，最终调用到：\n\n```Plain Text\n  private <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {\n    try {\n      //MappedStatement是在mybatis启动的时候就解析xml加载进来了，这里只是根据sql的ID，拿到具体sql的MappedStatement\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      // sqlSession是面向用户的API，真正执行查询的是executor执行器，它是哪里来的？\n      // 是当前sqlSession自带的，sqlSession哪里来的？是在最开始的时候openSession获取到的，然后session.getMapper将this传进来的。\n      // executor是在openSession时候赋值的\n      return executor.query(ms, wrapCollection(parameter), rowBounds, handler);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n```\n2、然后看executor.query方法\n\n```Plain Text\n\n  @Override\n  public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    //获取BoundSql对象，BoundSql是对动态SQL解析生成的SQL语句和参数映射信息的封装\n    BoundSql boundSql = ms.getBoundSql(parameter);\n    //创建cacheKey，用于缓存\n    CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);\n    //调用重载的query方法\n    return query(ms, parameter, rowBounds, resultHandler, key, boundSql);\n  }\n\n\n\n//重载的query方法\n  public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    try {\n      queryStack++;\n      //从缓存中获取结果\n      list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n      if (list != null) {\n        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n      } else {\n        //缓存中获取不到，去数据库里面查询\n        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n      }\n\n    return list;\n  }\n```\n3、可以看到，最终的查询，会走到\n\n```Plain Text\nqueryFromDatabase\n```\n这个方法中，这个方法的入参是MappedStatement（sql所有信息），parameter（参数信息），rowBounds（分页信息），resultHandler（处理结果集的），key（用户缓存），boundSql（sql和参数信息）；\n\n4、\n\n```Plain Text\nqueryFromDatabase\n```\n会调用\n\n```Plain Text\ndoQuery\n```\n,它有很多实现，这里SimpleExecutor中的实现为例子:\n\n```Plain Text\n  @Override\n  public <E> List<E> doQuery(.....) throws SQLException {\n    Statement stmt = null;\n    try {\n      Configuration configuration = ms.getConfiguration();\n      //获取StatementHandler(Mybatis)\n      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n      //创建statement对象，并通过JDBC进行参数设置(JDBC)\n      stmt = prepareStatement(handler, ms.getStatementLog());\n      //执行查询(Mybatis)\n      return handler.query(stmt, resultHandler);\n    } finally {\n      closeStatement(stmt);\n    }\n  }\n\n\n  //执行查询(Mybatis)\n  @Override\n  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n    //获取sql语句\n    String sql = boundSql.getSql();\n    //JDBC查询\n    statement.execute(sql);\n    //处理结果集\n    return resultSetHandler.handleResultSets(statement);\n  }\n```\n5、上面步骤中的参数处理，通过获取connection对象，创建statement，执行查询，获取结果，都是mybatis调用JDBC操作的。\n\n## 6.5 处理结果集\n6、现在来看一下处理结果集\n\n```Plain Text\n  //\n  @Override\n  public List<Object> handleResultSets(Statement stmt) throws SQLException {\n    ErrorContext.instance().activity(\"handling results\").object(mappedStatement.getId());\n\n    final List<Object> multipleResults = new ArrayList<>();\n\n    int resultSetCount = 0;\n    //获取resultSet（JDBC）对象，将ResuleSet对象包装成ResultSetWrapper（MyBatis）\n    ResultSetWrapper rsw = getFirstResultSet(stmt);\n\n    //获取resultMap信息，一般只有一个：在xml中配置的resultMap\n    List<ResultMap> resultMaps = mappedStatement.getResultMaps();\n    int resultMapCount = resultMaps.size();\n    validateResultMapsCount(rsw, resultMapCount);\n    while (rsw != null && resultMapCount > resultSetCount) {\n      ResultMap resultMap = resultMaps.get(resultSetCount);\n      //处理结果集\n      handleResultSet(rsw, resultMap, multipleResults, null);\n      rsw = getNextResultSet(stmt);\n      cleanUpAfterHandlingResultSet();\n      resultSetCount++;\n    }\n\n    //这里一样，获取resultSet，也是xml中配置的\n    String[] resultSets = mappedStatement.getResultSets();\n    if (resultSets != null) {\n      while (rsw != null && resultSetCount < resultSets.length) {\n        ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);\n        if (parentMapping != null) {\n          String nestedResultMapId = parentMapping.getNestedResultMapId();\n          ResultMap resultMap = configuration.getResultMap(nestedResultMapId);\n          //处理结果集\n          handleResultSet(rsw, resultMap, null, parentMapping);\n        }\n        rsw = getNextResultSet(stmt);\n        cleanUpAfterHandlingResultSet();\n        resultSetCount++;\n      }\n    }\n\n    //返回结果集\n    return collapseSingleResultList(multipleResults);\n  }\n```\n## 6.56问题解决\n### 6.6.1 Mybatis的动态代理代理的是什么？\nmybatis的动态代理，其实谁都没有代理； 它仅仅只是生成了一个mapper实例，然后利用了动态代理的“切面”功能； 然后统一使用mapperMethod执行sql查询 标准的JDK动态代理，在真正执行的时候会调用method.invoke() Mybatis的动态代理在真正执行的时候根本没用到method\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/75hg7lcYF4FCkeoxJwcroQ0L0z6VKwGWiNERUHXwGeQ.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n# 7 Mybatis缓存\n## 7.1 Mybatis 缓存（一级和二级）的使用\nMybatis缓存分为一级缓存和二级缓存；\n\n* 一级缓存默认就是开启的，不能关闭，但是可以通过localCacheScope这个属性控制级别，这个参数的取值为SESSION、STATEMENT；\n* SESSION：缓存对整个SqlSession有效，只有执行DML语句的时候，才会被清除。\n* STATEMENT：缓存仅对当前执行的语句有效，当语句执行完毕后，缓存就被清空。\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/3RlWYUTSyXpRjSV3kBog5MhiAThQ9ZyFalGFxSr-vWM.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 二级缓存\n* mybaits的二级缓存是mapper范围级别（二级缓存是基于namespace级别的，在同一个Mapper下有效），需要的话首先要在mybatis主配置文件中开启缓存<setting name=\"cacheEnabled\"value=\"true\"/>\n* 然后在需要二级缓存的具体mapper中配置cache，配置缓存策略，缓存刷新频率，缓存的容量等\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/HnSrXtmhbeYFG8Rz9vtJCsdEmI-oowTIpynDWmp4yTY.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 在配置mapper时，通过useCache属性执行mapper执行的时候是否使用缓存，还可以通过flushCache属性执行Mapper执行后是否刷新缓存。\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/ZP3e4gYDIp9OX8g-f2wsi-FdgZHWyyIQKt-ndvM0qIg.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n## 7.2 Mybatis缓存框架的实现（装饰者模式）\n```Plain Text\npublic interface Cache {\n\n  /**\n   * 获取缓存的id，通常情况下缓存的id是Mapper的命名空间名称\n   */\n  String getId();\n\n  /**\n   * 讲一个Java对象添加到缓存中\n   */\n  void putObject(Object key, Object value);\n\n  Object getObject(Object key);\n\n  Object removeObject(Object key);\n\n  /**\n   * Clears this cache instance.\n   */\n  void clear();\n\n  int getSize();\n\n  /**\n   * 在3.2.6版本后已经不在使用\n   */\n  default ReadWriteLock getReadWriteLock() {\n    return null;\n  }\n\n}\n```\n<img src=\"【mybatis】Mybatis从入门到入土.assets/-gJXouI-iocqoypYF5uhVARHtXyxs7B1vk5GLjeWc10.png\" alt=\"image\" style=\"zoom:80%;\" />\n\nMybatis的缓存设计采用的是装饰者模式，装饰者模式用的最经典的例子就是Java的IO包，Mybatis同样采用了装饰者模式。\n\n* 提供一个接口Cache，提供缓存的基本操作，比如：put，get，remove，clear等\n* 提供一个基本实现：PerpetualCache，仅使用HashMap存放缓存对象。\n* 提供了大量的装饰器，这些装饰器的构造方法入参就是Cache，比如BlockingCache（阻塞的缓存装饰器），FifoCache（先入先出缓存装饰器）等等\n\n```Plain Text\n    @Test\n    public void testCache() {\n        final int N = 100000;\n        Cache cache = new PerpetualCache(\"default\");\n        cache = new LruCache(cache);\n        cache = new FifoCache(cache);\n        cache = new SoftCache(cache);\n        cache = new WeakCache(cache);\n        cache = new ScheduledCache(cache);\n        cache = new SerializedCache(cache);\n        cache = new SynchronizedCache(cache);\n        cache = new TransactionalCache(cache);\n        for (int i = 0; i < N; i++) {\n            cache.putObject(i, i);\n            ((TransactionalCache) cache).commit();\n        }\n        System.out.println(cache.getSize());\n    }\n```\n* 另外，还提用了一个CacheBuilder方法构建缓存对象。\n\n```Plain Text\n    @Test\n    public void testCacheBuilder() {\n        final int N = 100000;\n        Cache cache = new CacheBuilder(\"com.blog4java.mybatis.example.mapper.UserMapper\")\n                .implementation( PerpetualCache.class)\n                .addDecorator(LruCache.class)\n                .clearInterval(10 * 60L)\n                .size(1024)\n                .readWrite(false)\n                .blocking(false)\n                .properties(null)\n                .build();\n        for (int i = 0; i < N; i++) {\n            cache.putObject(i, i);\n        }\n        System.out.println(cache.getSize());\n    }\n```\n## 7.3 一级缓存的具体实现\n* 我们知道sqlSession是面向用户的API，真正执行的操作的是Executor，以查询为例，在Executor中的具体实现类BaseExecutror中的query方法中，我们知道，执行一个select语句的时候，会先从缓存中获取数据，如果缓存中没有，才会去数据库中查，并且从数据库中查到之后，还会放到缓存中。\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/S0vRu1xQJVhbEbyxcpb9KVAkWuZM1sKv1vgo1edueXU.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 这里涉及到两个属性，这两个属性存在BaseExecutor中\n* localCache：Mybatis一级缓存对象，用于缓存Mybatis的查询结果\n* localOutputParameterCache：Mybatis存储过程输出参数缓存，用于缓存存储过程调用结果\n* 这里主要探讨一下localCache，看一下一级缓存是怎么实现的。\n* 需要了解一下CacheKey的实现，如果两个查询的CacheKey一样，就认定为是同一个sql；\n* Cache的生成在CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);\n* Cache的生成和Mapper的id，执行的sql的参数，以及mapper的的namespace有关；\n* key生成之后，就是关于一级缓存的使用了（用来做什么的），还是以查询为例，当查询的时候，会先从缓存中获取数据，如果缓存中没有，才会去数据库中查，并且从数据库中查到之后，还会放到缓存中。\n* 注意：如果一级缓存的范围设置为localCacheScope=STATEMENT，则每次查询操作完成后，都会清空缓存。\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/q6o8_UiLUVbOQ_y7gHV1CoFAp3qvH30l10IBUlz97x4.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 注意：在分布式环境下，务必将localCache设置为STATEMENT，避免其他节点执行SQL更新语句之后，本节点缓存得不到刷新而导致数据一致性的问题。\n\n## 7.4 二级缓存的具体实现\n### 7.4.1 二级缓存的两点常识\n了解二级缓存之前，先了解下面两个常识：\n\n* 二级缓存默认是关闭的，需要开启，具体开启方法，参考：[7.1 Mybatis 缓存（一级和二级）的使用](#7.1%20Mybatis%20%E7%BC%93%E5%AD%98%EF%BC%88%E4%B8%80%E7%BA%A7%E5%92%8C%E4%BA%8C%E7%BA%A7%EF%BC%89%E7%9A%84%E4%BD%BF%E7%94%A8)\n* 还是以查询为例，真正执行查询的是Executor，Executor有几种不同的实现（BaseExecutor不是实现，是抽象类）\n* SImpleExecutor\n* BatchExecutor\n* ReuseExecutor\n* CachingExecutor（比较特殊，用到了装饰者模式，在其他几种Executor基础上，增加了二级缓存功能）\n\n### 7.4.2 Mybatis是怎么创建CachingExecutor的呢\n如果我们配置二级缓存为开启状态，那么Mybatis是怎么创建CachingExecutor的呢？涉及到两部分：\n\n* CachingExecutor是怎么创建出来的？\n* Executor采用工厂模式创建，Configuration类提供了一个工厂方法，newExecutor\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/yaqhOGttroVfNjfXcV-oeb65dc82IbyaFQsnCV7jLok.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 可以看到CachingExecutor是对其他三个Executor的**装饰**；\n* 然后再继续分析CachingExecutor的具体实现；\n* 二级缓存开启之后，Mybatis怎么知道它开启了（CacheEnabled这个属性是什么时候初始化的）\n* 在XmlConfigBuilder中，parseConfiguration()中的settingsElement()方法中。\n\n```Plain Text\nconfiguration.setCacheEnabled(booleanValueOf(props.getProperty(\"cacheEnabled\"), true));\n```\n### 7.4.3 CachingEexcutor的具体实现\n* CachingEexcutor的具体实现\n* 这个类的代码比较少；看他的属性：\n\n```Plain Text\n//delegate是被装饰的Executor\nprivate final Executor delegate;\n//这个就比较重要了，用于管理所有的二级缓存对象\nprivate final TransactionalCacheManager tcm = new TransactionalCacheManager();\n```\n* TransactionalCacheManager的实现\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/z_EJdtrI8-abJABqiy2E2KUL-Y44WXeD6buYhouYfiE.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 接下来，以查询为例，看看二级缓存是怎么工作的\n\n### 7.4.4 以查询为例，看看二级缓存是怎么工作的\n* 执行查询\n\n```Plain Text\n  @Override\n  public <E> List<E> query(....) throws SQLException {\n    Cache cache = ms.getCache();\n    if (cache != null) {\n      flushCacheIfRequired(ms);\n      //如果当前sql开启了二级缓存（就是mapper.xml中的select|update|delete|insert标签中使用了useCache=true这个属性）\n      if (ms.isUseCache() && resultHandler == null) {\n        ensureNoOutParams(ms, boundSql);\n        //先从二级缓存中获取(使用二级缓存管理器TransactionalCacheManager进行获取)\n        @SuppressWarnings(\"unchecked\")\n        List<E> list = (List<E>) tcm.getObject(cache, key);\n        //如果获取不到，就用原来的Executor（也就是被装饰的Executor进行获取）：先从一级缓存拿，拿不到，再从数据库中拿\n        if (list == null) {\n          list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n          // issue #578 and #116\n          tcm.putObject(cache, key, list);\n        }\n        return list;\n      }\n    }\n    return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n  }\n```\n* 执行更新语句\n\n```Plain Text\n  @Override\n  public int update(MappedStatement ms, Object parameterObject) throws SQLException {\n    flushCacheIfRequired(ms);\n    return delegate.update(ms, parameterObject);\n  }\n\n\n  private void flushCacheIfRequired(MappedStatement ms) {\n    Cache cache = ms.getCache();\n    //判断是否需要刷新缓存，（就是mapper.xml中的select|update|delete|insert标签中使用了flushCache=true这个属性）\n    if (cache != null && ms.isFlushCacheRequired()) {\n      tcm.clear(cache);\n    }\n  }\n```\n### 7.4.5 二级缓存Cache实例的创建\n在7.4.4中我们看到，不管是执行查询，还是执行更新，我们都要获取两个参数\n\n* 一个是Cache对象（从MappedStatement中获取的）：这是二级缓存对象-->对应的是mapper.xml中的cache标签\n* 一个就是CacheKey\n* 获取到这两个参数之后，才可以通过二级缓存管理器TransactionalCacheManager获取对应的缓存\n\nCacheKey的创建我们已经知道了，是和sqlID，sql的参数信息，nameSpace有关的。那么二级缓存对象实例Cache对象是什么时候创建的，并且是什么时候保存到MappedStatement中的呢？\n\n* 在\n\n```Plain Text\norg.apache.ibatis.builder.xml.XMLMapperBuilder#parse\n```\n这个方法中，会解析cache标签；\n\n* cache标签解析之后，会通过builderAssistant辅助工具类创建Cache实例（用到的是Cache的builder模式）；\n\n```Plain Text\npublic Cache useNewCache(Class<? extends Cache> typeClass,\n  Class<? extends Cache> evictionClass,\n  Long flushInterval,\n  Integer size,\n  boolean readWrite,\n  boolean blocking,\n  Properties props) {\nCache cache = new CacheBuilder(currentNamespace)\n    .implementation(valueOrDefault(typeClass, PerpetualCache.class))\n    .addDecorator(valueOrDefault(evictionClass, LruCache.class))\n    .clearInterval(flushInterval)\n    .size(size)\n    .readWrite(readWrite)\n    .blocking(blocking)\n    .properties(props)\n    .build();\nconfiguration.addCache(cache);\ncurrentCache = cache;\nreturn cache;\n}\n```\n* Cache对象创建完成之后，除了保存到configuration中，还会先**暂时保存**在当前这个辅助工具类中\n\n```Plain Text\nMapperBuilderAssistant\n```\n* 然后是什么时候，将cache对象保存到MappedStatement中的呢？\n\n```Plain Text\nprivate void configurationElement(XNode context) {\ntry {\n  ....\n  //解析cache标签，生成Cache对象，保存到configuration中，并且暂存在builderAssistant中\n  cacheElement(context.evalNode(\"cache\"));\n    .....    \n    //在这里，解析完select|insert|update|delete,会调用addMappedStatement这个方法\n  buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n} catch (Exception e) {\n  throw ...\n}\n}\n```\n* 在上面的代码中，我们知道解析完select|insert|update|delete,会调用\n\n```Plain Text\norg.apache.ibatis.builder.MapperBuilderAssistant#addMappedStatement(...)\n```\n这个方法\n\n```Plain Text\npublic MappedStatement addMappedStatement(....) {\n  ....\n  MappedStatement.Builder statementBuilder = new MappedStatement.Builder(...)\n      .....\n      .useCache(valueOrDefault(useCache, isSelect))\n      //在这里，就将暂存在MapperBuilderAssistant中的cache对象赋值给了MappedStatement\n      .cache(currentCache);\n  return statement;\n}\n```\n## 7.5 问题解决？？？？？\n### 7.5.1 实际项目中，比如东南亚项目中，怎么控制的缓存呢？\n目前还没有找到答案，应该和mybatis-spring有关，因为代码使用的JavaConfig类进行配置的，不是使用xml，没找到具体的配置在哪里。\n\n# 8 Mybatis日志实现\n常见的日志框架\n\n* Log4j：是欧洲一个项目组开发的日志**实现**，现在是apache基金会的一个项目（1996）\n* Log4j2：是apache开发的日志**实现**，Log4j的升级版（2012）\n* Commons Logging（JCL）：Apache的，一套Java日志**接口**，本身只有一个简单的**实现**（2002下）\n* SLF4J：类似于Commons Logging，也是日志**接口**，本身没有实现（2006）\n* Logback：是日志组件的具体**实现**，属于SLF4J的阵营（2006）\n* JUL：JDK1.4之后java提供日志**实现**（2002上）\n\n# 9 动态SQL实现原理\n动态SQL，顾名思义，就是事先无法预知具体的条件，需要在运行的时候根据具体的情况动态的生成SQL语句。\n\n比如下面的SQL，就是一个动态的SQL\n\n```Plain Text\n    <select id=\"getUserByEntity\"  resultType=\"com.blog4java.mybatis.example.entity.UserEntity\">\n        select\n        <include refid=\"userAllField\"/>\n        from user\n        <where>\n            <if test=\"id != null\">\n                AND id = #{id}\n            </if>\n            <if test=\"name != null\">\n                AND name = #{name}\n            </if>\n            <if test=\"phone != null\">\n                AND phone = #{phone}\n            </if>\n        </where>\n    </select>\n```\n我们的入参可能是id，可能是name，可能是phone，也可能是这三个参数中任意两个或者三个的组合。\n\n当我们SQL的参数不固定的时候，生成SQL就需要根据参数动态来增加或者去除关键字，比如添加上WHERE，去掉多余的AND，OR等。\n\n## 9.1 动态SQL的使用\n主要是一些涉及的标签\n\n* <choose|when|otherwise>\n* <trim|set>\n\n## 9.2 SqlSource、BoundSql、LanguageDriver、SqlNode详解和它们之间的关系\n<img src=\"【mybatis】Mybatis从入门到入土.assets/4ApX3_MkEJJYJUp-QisORKINyjbWe6fjhB9iMRuO6V4.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n## 9.3 动态SQL解析过程\nSqlSource有四个实现，分别是ProviderSqlSource,DynamicSqlSource,RawSqlSource,StaticSqlSource; 其中StaticSqlSource比较特殊，它是用来描述通过ProviderSqlSource,SynamicSqlSource,RawSqlSource解析之后得到的静态sql资源。\n\n* 1、通过注解或者xml配置的sql怎么封装成SqlSource对象的？（SqlSource是怎么来的）\n* 是通过LanguageDriver将Sql配置解析成SqlSource的，什么时候解析的呢？解析的逻辑是什么呢？\n* 是在XmlMapperBuilder中解析select|update|delete|insert语句的时候，会获取到LanguageDriver对象，然后将XNode解析成SqlSource对象\n* 解析的逻辑就是，LanguageDriver通过创建XmlScriptBuilder对象，进行解析，具体逻辑后面说；\n* 2、SqlSource又是怎么解析最后转换成StaticSqlSource的？\n* 比如一个动态sql资源，解析之后肯定一个静态的sql资源；\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/pEIcEuUUVLmiZMER0tKvgXf714RH58QFpihw6DPdkwI.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 那么就是从DynamicSqlSource转换成StaticSqlSource的过程，是在：\n* DynamicSqlSource中的getBoundSql方法中会调用SqlSourceBuilder的parse方法\n* SqlSourceBuilder的parse方法会返回一个sqlSource（返回的这个就是StaticSqlSource）\n* LanguageDriver通过创建XmlScriptBuilder对象，进行解析，这是解析的具体逻辑（Xnode-->SqlSource的过程）\n\n比如一个动态sql：\n\n```Plain Text\n<select id=\"getUserByEntity\"  resultType=\"com.blog4java.mybatis.example.entity.UserEntity\">\n    select\n    <include refid=\"userAllField\"/>\n    from user\n    <where>\n        <if test=\"id != null\">\n            AND id = #{id}\n        </if>\n        <if test=\"name != null\">\n            AND name = #{name}\n        </if>\n        <if test=\"phone != null\">\n            AND phone = #{phone}\n        </if>\n    </where>\n</select>\n```\n它解析成的SqlSource的格式是下面这样的\n\n```Plain Text\n\n\nDynamicSqlSource\n    MixSqlNode\n        1、StaticTextSqlNode select\n        2、StaticTextSqlNode id,name.phone\n        3、StaticTextSqlNode from user\n        4、WhereSqlNode where\n            MixSqlNode\n                1、StaticTextSqlNode \"空\"\n                2、IfSqlNode if\n                    MixSqlNode\n                        StaticTextSqlNode AND id = #{id}\n                        test id != null\n                3、StaticTextSqlNode \"空\"\n                4、IfSqlNode if\n                    MixSqlNode\n                        StaticTextSqlNode AND name = #{name}\n                        test name != null\n                5、StaticTextSqlNode \"空\"\n                6、IfSqlNode if\n                    MixSqlNode\n                        StaticTextSqlNode AND phone = #{phone}\n                        test phone != null            \n                7、StaticTextSqlNode \"空\"\n         5、StaticTextSqlNode \"空\"\n```\n* 问题：SqlNode中有一个apply，用于解析sql，替换占位符，生成静态sql，这个方法什么时候调用的呢？\n* 在通过sqlSource的getBoundSql方法调用的时候，会调用apply方法\n* 那么sqlSource的getBoundSql什么时候调用的呢？\n* 我们知道Mybatis是通过MappedStatement保存sql各种信息的，那么理所当然，MappedStatement中有一个sqlSource的引用，是在XMLMapperBuilder中通过languageDriver解析获取到SqlSource之后，然后通过MapperBuilderAssistant.addMappedStatement方法，会将sqlSource存在MappedStatement中。\n* 在MappedStatement中也有一个getBoundSql方法，这个方法会在真正执行sql之前调用\n* sqlSource的getBoundSql会解析动态sql，但是我们知道sqlSource中存的不过是SqlNode，而sqlNode中可能包含很多AND，OR等关键字，那么这些关键字在apply方法的时候，是怎么被去掉的呢？\n* 以where为例子，我们现在获取到了select \\* from user 然后下一句是 AND phone = #{phone} 我们就需要把AND去掉，然后加上WHERE，拼接成这个样子 WHERE phone=#{phone}\n* 这一步，是在TrimSqlNode中做的，为什么是在这里呢，因为WhereSqlNode是TrimSqlNode的子类，在apply的时候，会创建FilteredDynamicContext这个类，然后会调用applyAll这个方法，在这个方法里，会判断当前的SqlSource的类型，是WHERE的话，就把AND去掉改成Where，同理TrimSqlNode的另一个子类SetSqlNode也是这样的，将And替换成Set。\n* 其他的替换，都是类似的\n\n## 9.4 分析\\${}和#{}的区别\n\\${}：当使用这个占位符的时候，Mybatis会使用TextSqlNode来进行描述，在解析的时候，会直接将参数进行替换，比如一个sql\n\n```Plain Text\nselect * from user where name = ${name}\n```\n,假设前端给的参数是\n\n```Plain Text\nString name = \"zhangsan\"\n```\n，那么解析之后得到的最终sql就是\n\n```Plain Text\nselect * from user where name = zhangsan\n```\n,这个sql是会报错的。当使用这个占位符的时候，参数应该这么传\n\n```Plain Text\nString name = \"'zhangsan'\"\n```\n,手动加上引号。\n\n#{}：略\n\n# 10 MyBatis插件实现原理\n## 10.1 Mybatis插件的使用\n* 首先有一个已经写好的Mybatis拦截器类，怎么写？可以参考10.4自定义拦截器插件\n* 对拦截器进行配置，在MyBatis的主配置文件中：\n\n```Plain Text\n  <plugins>\n        <plugin interceptor=\"com.blog4java.plugin.pager.PageInterceptor\">\n            <property name=\"databaseType\" value=\"hsqldb\"/>\n        </plugin>\n\n        <plugin interceptor=\"com.blog4java.plugin.slowsql.SlowSqlInterceptor\">\n            <property name=\"limitSecond\" value=\"0\"/>\n        </plugin>\n    </plugins>\n```\n* 这样，这个拦截器就生效了。\n\n## 10.2 Mybatis拦截器的拦截节点（可以拦截哪些方法）\n用户自定义的插件，只能针对MyBatis中的4个组件中的部分方法进行拦截\n\n| 组件             | 方法                   | 备注 |\n| ---------------- | ---------------------- | ---- |\n| Executor         | update                 |      |\n|                  | query                  |      |\n|                  | flushStatements        |      |\n|                  | commit                 |      |\n|                  | rollback               |      |\n|                  | getTransaction         |      |\n|                  | close                  |      |\n|                  | isClosed               |      |\n| ParameterHandler | getparameterObject     |      |\n|                  | setParameters          |      |\n| ResultSetHandler | handleResultSets       |      |\n|                  | handleOutputParameters |      |\n| StatementHandler | prepare                |      |\n|                  | parameterize           |      |\n|                  | batch                  |      |\n|                  | update                 |      |\n|                  | query                  |      |\n\n## 10.3 Mybatis插件的注册和拦截过程（原理：动态代理）\n分为两个部分，注册和执行拦截；\n\n注册\n\n* 在configuration中有一个` interceptorChain `属性，用来保存所有的通过标签配置的拦截器实例；\n\n* 在XMLConfigBuilder中构建configuration的时候，有一个方法专门解析的\n\n```java\nprivate void pluginElement(XNode parent) throws Exception {\n  if (parent != null) {\n    for (XNode child : parent.getChildren()) {\n      String interceptor = child.getStringAttribute(\"interceptor\");\n      Properties properties = child.getChildrenAsProperties();\n      //通过java的反射机制，创建拦截器实例\n      Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).getDeclaredConstructor().newInstance();\n      interceptorInstance.setProperties(properties);\n      configuration.addInterceptor(interceptorInstance);\n    }\n  }\n}\n```\n解析完成之后，将生成的拦截器实例，保存在 `interceptorChain `中；执行拦截.\n\n那么拦截逻辑是怎么执行的呢？\n\n之前说过，configuration有三大作用，其中一个作用就是：作为Executor, ParameterHandler, ResultSetHandler, StatementHandler组件的工厂，便于创建这些组件的实例， \\[点我查看configuration的三个作用\\](#Configuration)\n\n统一使用工厂创建者四个类的实例，这样做的好处是什么呢？\n\n* 将创建的类的实例统一起来，可以根据用于配置参数的不同，创建不同的实例：比如用户使用了缓存，就会创建CacheExecutor一样；\n* 可以在工厂方法中，执行拦截逻辑；\n\n```java\n\nstatementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);\nresultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);\nparameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);\nexecutor = (Executor) interceptorChain.pluginAll(executor);\n\n```\n拦截逻辑都是在pluginAll中执行的。至于pluginAll到底做了什么，我们待会在看。\n\n以Executor组件为例（其他3个类同理），看一下Configuration的newExecutor是怎么创建代理对象的。\n\n!\\[image-20210223162433312\\](https://youdao-note-【mybatis】Mybatis从入门到入土.assets.oss-cn-hangzhou.aliyuncs.com/2021-02/20210223162434.png)\n\n当我们系统中配置了Plugin的时候，生成的Executor才是动态代理对象，否则生成的就是Executor对象；因为\n\n```java\npublic Object pluginAll(Object target) {\n  //没有拦截器配置，就不会执行plugin，也就不会生成动态代理对象\n  for (Interceptor interceptor : interceptors) {\n    target = interceptor.plugin(target);\n  }\n  return target;\n}\n```\n以sqlSession的selectOne为例，被代理的Executor执行query方法的调用链路图；\n\n* 被代理的Executor对象，会先执行到Plugin类的invoke方法中\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/2KSB9I7XUzXCy41tQEljCCAlPax8LvCgTdoSUdio7QQ.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n## 10.4 自定义Mybatis拦截器\n拦截器代码\n\n```Java\n\n/**\n * @author : zhuansun\n * @date : 2021-02-23 16:48\n **/\n@Intercepts( {\n    //指定拦截Executor的query方法，因为query方法有很多个，我们要通过args执行拦截入参是这些的query方法\n    //<E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException;\n    @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class,\n        Object.class, RowBounds.class, ResultHandler.class})\n})\npublic class ZspcSqlInterceptor implements Interceptor {\n\n    /**\n     * 这个参数可以通过<plugin>标签中的<properties>设值\n     */\n    private String name;\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n\n        System.out.println(\"111111\"+name);\n\n        return invocation.proceed();\n    }\n\n    @Override\n    public Object plugin(Object target) {\n        return Plugin.wrap(target, this);\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n        this.name = (String) properties.get(\"name\");\n    }\n}\n\n```\nMybatis配置拦截器\n\n```java\n    <plugins>\n\n        <plugin interceptor=\"com.blog4java.plugin.zspc.ZspcSqlInterceptor\">\n            <property name=\"name\" value=\"我就试试\"/>\n        </plugin>\n\n    </plugins>\n```\n调用\n\n```java\n\n    @Test\n    public void testPageInterceptor() {\n        UserQuery query = new UserQuery();\n        query.setPageSize(5);\n        query.setFull(true);\n        List<UserEntity> users = userMapper.getUserPageable(query);\n        System.out.println(\"总数据量：\" + query.getTotalCount() + \",总页数：\"\n                + query.getTotalPage()+ \"，当前查询数据：\" + JSON.toJSONString(users));\n    }\n\n```\n输出\n\n```java\n\n111111我就试试\n总数据量：0,总页数：0，当前查询数据：[{\"id\":0,\"name\":\"User1\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":1,\"name\":\"User2\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":2,\"name\":\"User3\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":3,\"name\":\"User4\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":4,\"name\":\"User5\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":5,\"name\":\"User6\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":6,\"name\":\"User7\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":7,\"name\":\"User8\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":8,\"name\":\"User9\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":9,\"name\":\"User10\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":10,\"name\":\"User11\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":11,\"name\":\"User12\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":12,\"name\":\"User13\",\"password\":\"test\",\"phone\":\"18700001111\"},{\"id\":13,\"name\":\"User14\",\"password\":\"test\",\"phone\":\"18700001111\"}]\nDisconnected from the target VM, address: '127.0.0.1:60862', transport: 'socket'\n\n```\n# 11 MyBatis级联映射与懒加载\n## 11.1 级联映射的介绍与使用\n* 知道什么是级联映射\n* 级联映射的配置（一对多配置 collection，一对一配置 association）\n* discriminator 鉴别器\n\n有一个用户表，有一个订单表，订单表存了用户表的id\n\n比如用户表：id,name(用户名),phone(手机号)\n\n比如订单表：id,userId(用户id),orderNo(订单号),amount(订单金额)\n\n现在有一个需求，我们想查出一个用户，同时查出来这个用户下的所有订单；当然我们有几个方法：\n\n* 先查出user，再根据user查出来订单，最后封装返回值；\n* 使用MyBatis的级联映射\n\n```Plain Text\n//使用级联映射，resultMap指定为detailMap\n<select id=\"getUserByIdFull\" resultMap=\"detailMap\">\n  select * from user where id = #{userId}\n</select>\n//这是detialMap的定义，type是User类型的，里面包含一个collection,指定property为User类的orders属性\n//ofType标识orders属性的类是Order类\n//select标识要执行OrderMapper中的listOrderByUserId这个sql查出来的数据填充orders这个属性\n<resultMap id=\"detailMap\" type=\"com.blog4java.mybatis.example.entity.User\">\n   <collection property=\"orders\" ofType=\"com.blog4java.mybatis.example.entity.Order\"\n                  select=\"com.blog4java.mybatis.example.mapper.OrderMapper.listOrdersByUserId\"\n                  javaType=\"java.util.ArrayList\"\n                  column=\"id\">\n   </collection>\n</resultMap>\n```\n上面是比较简单的级联映射的配置；当然难得也有，比如：\n\n一对多级联映射；\n\n一对一级联映射；\n\n如果我们的需求升级了，用户性别是女的才查订单信息，否则就不查询订单信息；这个时候需要使用到Discriminator。这个的作用类似java中的switch\n\n```Plain Text\n    <resultMap id=\"detailMapForDiscriminator\" type=\"com.blog4java.mybatis.example.entity.User\">\n        <discriminator javaType=\"String\" column=\"gender\">\n            <case value=\"female\" resultType=\"com.blog4java.mybatis.example.entity.User\">\n                <collection property=\"orders\" ofType=\"com.blog4java.mybatis.example.entity.Order\"\n                            select=\"com.blog4java.mybatis.example.mapper.OrderMapper.listOrdersByUserId\"\n                            javaType=\"java.util.ArrayList\"\n                            column=\"id\">\n                </collection>\n            </case>\n        </discriminator>\n    </resultMap>\n```\n## 11.2 懒加载机制的介绍与使用\n**注意：懒加载本身就是针对级联查询的，对于普通查询，没有懒加载一说’**\n\n有这样一个需求，当我们查询用户的时候，如果每次都带出订单信息，但是并不是所有使用到的地方都需要使用订单信息，这样的话，每次都带出，就多了一步这么无用的查询。\n\n那么我们可不可以在调用用户的getOrders方法的时候，就是说当我们确定要拿用户的订单信息的时候，再去数据库里面查询出来。这就叫做懒加载。\n\nMyBatis提供了懒加载机制：\n\n* 在MyBatis的主配置文件中，提供了lazaLoadingEnabled和aggressiveLazyLoading两个参数用于控制是否开启懒加载；\n* lazaLoadingEnabled：是否开启懒加载 true开启\n* aggressiveLazyLoading：控制ResultMap默认的加载行为，false表示懒加载，true表示积极加载\n* 标签提供了一个fetchType属性，为\n\n```Plain Text\nlazy\n```\n表示懒加载，为\n\n```Plain Text\neager\n```\n表示积极加载\n\n```Plain Text\n    <settings>\n       ...\n        <!-- 打开延迟加载的开关 -->\n        <setting name=\"lazyLoadingEnabled\" value=\"true\" />\n        <!-- 将积极加载改为懒加载即按需加载 -->\n        <setting name=\"aggressiveLazyLoading\" value=\"false\" />\n        <!-- toString,hashCode等方法不触发懒加载 -->\n        <setting name=\"lazyLoadTriggerMethods\" value=\"\"/>\n        ...\n    </settings>\n```\n## 11.3 级联查询和懒加载的原理\n* 首先是标签转换成ResultMap对象的逻辑，也是在XMLCOnfigBuilder中解析的，看看代码就知道了。\n* 其次是级联查询的实现逻辑：\n* 知道一个sql在查询完成之后，会使用ResultSetHandler对象的handleResultSets方法处理结果集；\n* handleResultSets方法简化了JDBC对ResultSet对象的操作，会在这里将级联查询的结果进行处理与赋值；\n* 再详细的就不说了，注意一点：级联查询的第二个sql是什么时候执行的呢？可以参考[点我跳转查看](#11.4%20%E9%97%AE%E9%A2%98)\n* 懒加载的实现逻辑\n* 在处理级联查询的结果集的时候，也就是在handleResultSets方法中；\n* 在handleResultSets方法中调用handleRowValues；\n* 然后根据是否是否有嵌套的ResultMap，调用handleRowValuesForNestedResultMap或者handleRowValuesForSimpleResultMap，这都不重要；\n* 重要的是最终会调用到getRowValue方法；\n* 然后会调用到createResultObject这个方法，在这个方法内部，如果开启了懒加载，则调用createProxy创建代理对象（CgLib代理或者javassist代理，只有这两种）；\n* 也就是说，对于开启了懒加载的查询，返回的不是User的实例，而是User实例的代理对象；\n* 当我们执行了User实例代理对象的get方法，就会执行代理类的拦截逻辑；\n* 在拦截逻辑中，会调用到lazyLoader的load方法，最后调用到LoadPair的load方法；\n* 然后会创建ResultLoader对象，最后调用到\n\n```Plain Text\nresultLoader.loadResult()\n```\n，至此完成；\n\n* 懒加载最后一步和正常不开启懒加载的的查询，其实调用的是同一个方法。\n\n## 11.4 问题\n* Mybatis的级联查询，是执行一次sql，还是执行多次sql？\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/WU1bC7GCTaqfR93WF6GZyxDzDGb_U3DIwPnscF3awwc.png\" alt=\"image\" style=\"zoom:80%;\" />\n\n* 从测试的结果来看，是执行了多次sql，那么第二次的sql是在什么时候执行的呢？\n\n他娘的，要骂人了。在跑测试用例的时候，一直很好奇，明天控制台打印出了两个sql，为什么断点只能看到一个。而且IDEA还会有这个提示：\n\n<img src=\"【mybatis】Mybatis从入门到入土.assets/rQzgBZ0o9gq2FaPOBMqu3WbmwTx1632pZxk5yAM1zS4.png\" alt=\"image\"  />\n\n一开始没有在意，还以为是自己断点的位置不对，最后针对这个提示，百度了一下，了解到：\n\n* IDEA对于在toString中调用的方法，是不会走到断点的。具体了解的可以自己百度，很多的。\n* 按照百度的设置，我们把相关设置配置好，最后才发现：\n* 我说为什么断点只能进来一次，原来是因为测试用例默认开启了懒加载；\n* 这就导致查询用户的时候的断点可以进来，在查询order的时候，因为是在toString中调用的，IDEA直接跳过了。\n* 修改了相关配置后，第二个sql就可以断点进来啦。\n* 最后我们测试关闭懒加载模式，看看第二个sql是什么时候调用的呢？\n* 实在第一个sql执行完的之后，处理第一个sql的结果集的时候，在getRowValue方法中，调用applyPropertyMappings方法，然后调用getPropertyMappingValue方法，然后调用getNestedQueryMappingValue方法，然后调用\n\n```Plain Text\nvalue = resultLoader.loadResult()\n```\n方法，在这个方法内部，执行了第二个sql的查询。\n\n# 12 MyBatis与Spring整合\n**简介**\n\n* 我们知道MyBatis是使用sqlSession操作数据库的；\n* 我们知道sqlSession是通过sqlSessionFactory.openSession获取的；\n* 在mybatis-spring中，我们使用spring提供的\n\n```Plain Text\nSqlSessionFactoryBean\n```\n来创建sqlSessionFactory对象\n\n* 在mybatis中，使用sqlSessionFactory.openSession每次都会获取一个新的sqlSession对象，然后调用sqlSession的相关方法就可以与数据库交互了。\n* 在mybatis-spring中，spring提供了sqlSessionTemplate用于完成数据库交互，它是单例的。\n\n**原理**\n\n* spring容器在启动的时候，会将bean的配置信息转换成BeanDefinition对象，BeanDefinition是一个接口，有很多实现类，用来描述不同方式配置的Bean信息；\n* BeanDefinition有一个容器，叫做BeanDefinitionRegistry，所有的Bean信息都会注册到里面；另外，spring对BeanDefinitionRegistry提供了扩展机制，允许用户在spring框架启动时，动态的注册bean信息；\n* 现在我们有了Bean信息，有个Bean信息的容器，spring框架在启动的时候，会根据bean信息创建生成bean实例，并保存在BeanFactory中，他们都是单例的。\n* BeanFactoryPostProcessor\n* ImportBeanDefinitionRegister\n* BeanPostProcessor\n* ClassPathBeanDefinitionScanner\n* FactoryBean：可以理解为生成Bean的，当我们获取FactoryBean的时候，其实获取的是FactoryBean对象getObject方法返回的实例，比如配置SqlSessionFactoryBean，其实获取的是SqlSessionFactory","tags":["mybatis"],"categories":["JAVA","SSM"]},{"title":"mycat的14中分片规则","url":"/note/JAVA/数据库/MYCAT/mycat的14中分片规则/","content":"\n\n\n# 参考文章\n\nhttps://zhuanlan.zhihu.com/p/359262439\n\n# 环境准备\n\n- mycat 有 三个实例（三个分片）\n\n- 创建一个数据库：partition_db\n\n```sql\ncreate database partition_db DEFAULT CHARACTER SET utf8mb4;\n```\n\n\n\n# 分片规则\n\n## 1、取模分片\n\n```xml\n<tableRule name=\"mod-long\"> \n    <rule>\n        <columns>id</columns> \n        <algorithm>mod-long</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"mod-long\" class=\"io.mycat.route.function.PartitionByMod\"> \n    <property name=\"count\">3</property> \n</function>\n```\n\n\n\n配置说明：\n\n| 属性      | 描述                             |\n| --------- | -------------------------------- |\n| columns   | 标识将要分片的表字段             |\n| algorithm | 指定分片函数与function的对应关系 |\n| class     | 指定该分片算法对应的类           |\n| count     | 数据节点的数量                   |\n\n效果：\n\n用主键ID对3取模，数据会均匀的分散在3个分片上；\n\n问题：如果count配置了2，是什么情况？\n\n## 2、范围分片\n\n根据指定的字段及其配置的范围与数据节点的对应情况， 来决定该数据属于哪一个分片 ， 配置如下：\n\n```xml\n<tableRule name=\"auto-sharding-long\"> \n    <rule>\n        <columns>id</columns> \n        <algorithm>rang-long</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"rang-long\" class=\"io.mycat.route.function.AutoPartitionByLong\"> \n    <property name=\"mapFile\">autopartition-long.txt</property> \n    <property name=\"defaultNode\">0</property> \n</function>\n```\n\n\n\nautopartition-long.txt 配置如下：\n\n```xml\n# range start-end ,data node index \n# K=1000,M=10000. \n0-500M=0 \n500M-1000M=1 \n1000M-1500M=2\n```\n\n\n\n含义为 ： \n\n- 0 - 500 万之间的值 ， 存储在0号数据节点 ； \n\n- 500万 - 1000万之间的数据存储在1号数据节点 ；\n\n- 1000万 - 1500 万的数据节点存储在2号节点 ；\n\n配置说明:\n\n| 属性        | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| columns     | 标识将要分片的表字段                                         |\n| algorithm   | 指定分片函数与function的对应关系                             |\n| class       | 指定该分片算法对应的类                                       |\n| mapFile     | 对应的外部配置文件                                           |\n| type        | 默认值为0 ; 0 表示Integer , 1 表示String                     |\n| defaultNode | 默认节点 默认节点的所用:枚举分片时,如果碰到不识别的枚举值, 就让它路由到默认节点 ; 如果没有默认值,碰到不识别的则报错 。 |\n\n## 3、枚举分片\n\n通过在配置文件中配置可能的枚举值, 指定数据分布到不同数据节点上, 本规则适用于按照**省份或状态拆分数据**等业务。\n\n配置如下:\n\n```xml\n<tableRule name=\"sharding-by-intfile\"> \n    <rule>\n        <columns>status</columns> \n        <algorithm>hash-int</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"hash-int\" class=\"io.mycat.route.function.PartitionByFileMap\"> \n    <property name=\"mapFile\">partition-hash-int.txt</property> \n    <property name=\"type\">1</property> \n    <property name=\"defaultNode\">0</property> \n</function>\n```\n\n\n\npartition-hash-int.txt，内容如下 :\n\n```xml\n待处理=0 \n处理中=1 \n已完成=2\n```\n\n\n\n含义为：\n\n- status=待处理的落在0号分片\n\n- status=处理中的落在1号分片\n\n- status=已完成的落在2号分片\n\n配置说明:\n\n| 属性        | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| columns     | 标识将要分片的表字段                                         |\n| algorithm   | 指定分片函数与function的对应关系                             |\n| class       | 指定该分片算法对应的类                                       |\n| mapFile     | 对应的外部配置文件                                           |\n| type        | 默认值为0 ; 0 表示Integer , 1 表示String                     |\n| defaultNode | 默认节点 ; 小于0 标识不设置默认节点 , 大于等于0代表设置默认节点 ; 默认节点的所用:枚举分片时,如果碰到不识别的枚举值, 就让它路由到默认节点 ; 如果没有默认值,碰到不识别的则报错 。 |\n\n## 4、范围取模\n\n该算法为先进行范围分片, 计算出分片组 , 再进行组内求模。\n\n配置如下\n\n```xml\n<tableRule name=\"auto-sharding-rang-mod\"> \n    <rule>\n        <columns>id</columns> \n        <algorithm>rang-mod</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"rang-mod\" class=\"io.mycat.route.function.PartitionByRangeMod\"> \n    <property name=\"mapFile\">autopartition-range-mod.txt</property> \n    <property name=\"defaultNode\">0</property> \n</function>\n```\n\n\n\nautopartition-range-mod.txt配置格式\n\n```xml\n#range start-end , data node group size \n0-500M=1 \n500M-2000M=2\n```\n\n\n\n含义为：\n\n- 0 - 500 万之间的值 ， 存储在一个分片节点上；\n\n- 500万到2000万之间的值，存储在两个分片节点上；\n\n- 然后拿到分片节点数量之后，在对分片节点数量进行取模，得到具体的存储分片； \n\n配置说明:\n\n| 属性        | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| columns     | 标识将要分片的表字段名                                       |\n| algorithm   | 指定分片函数与function的对应关系                             |\n| class       | 指定该分片算法对应的类                                       |\n| mapFile     | 对应的外部配置文件                                           |\n| defaultNode | 默认节点 ; 未包含以上规则的数据存储在defaultNode节点中, 节点从0开始 |\n\n**优点**： 综合了范围分片和求模分片的优点。 分片组内使用求模可以保证组内的数据分布比较均匀，分片组之间采用范围分片可以兼顾范围分片的特点。\n\n**缺点**： 在数据范围时固定值（非递增值）时，存在不方便扩展的情况，例如将 dataNode Group size 从 2 扩展为 4 时，需要进行数据迁移才能完成 ；\n\n## 5、固定分片hash\n\n该算法类似于十进制的求模运算，但是为二进制的操作，例如，取 id 的二进制低 10 位 与 1111111111 进行**位 & 运算**。\n\n```xml\n最小值的情况：\n    0 0 0 0 0 0 0 0 0 0 \n&   1 1 1 1 1 1 1 1 1 1 \n---------------------------------\n    0 0 0 0 0 0 0 0 0 0       =   0\n\n最大值的情况\n    1 1 1 1 1 1 1 1 1 1 \n&   1 1 1 1 1 1 1 1 1 1 \n----------------------------------\n    1 1 1 1 1 1 1 1 1 1       =   2^10-1 = 1023\n```\n\n\n\n配置如下 ：\n\n```xml\n<tableRule name=\"sharding-by-long-hash\"> \n    <rule>\n        <columns>id</columns> \n        <algorithm>func1</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"func1\" class=\"org.opencloudb.route.function.PartitionByLong\"> \n    <property name=\"partitionCount\">2,1</property> \n    <property name=\"partitionLength\">256,512</property> \n</function>\n```\n\n\n\n含义是：\n\n- 在示例中配置的分片策略，希望将数据水平分成3份，前两份各占 25%，第三份占 50%。\n\n- 示例数据：\n\n| id开始   | id结束    | 数据节点 |\n| -------- | --------- | -------- |\n| 1        | 255       | dn1      |\n| 256      | 511       | dn1      |\n| 512      | 1023      | dn2      |\n| 1024     | 1024+255  | dn1      |\n| 1024+256 | 1024+511  | dn2      |\n| 1024+512 | 1024+1023 | dn3      |\n\n配置说明:\n\n| 属性            | 描述                             |\n| --------------- | -------------------------------- |\n| columns         | 标识将要分片的表字段名           |\n| algorithm       | 指定分片函数与function的对应关系 |\n| class           | 指定该分片算法对应的类           |\n| partitionCount  | 分片个数列表，是一个数组         |\n| partitionLength | 分片范围列表，是一个数组         |\n\n约束 :\n\n- 分片长度 : 默认最大2^10 , 为 1024 ;\n\n- partitionCount, partitionLength的数组长度必须是一致的 ;\n\n- 1024 = sum((count[i]*length[i]))\n\n优点： 这种策略比较灵活，可以均匀分配也可以非均匀分配，各节点的分配比例和容量大小由 partitionCount 和 partitionLength 两个参数决定\n\n缺点：和取模分片类似。\n\n看不懂，看这个：https://blog.csdn.net/zhou920786312/article/details/122427650\n\n\n\n## 6、取模范围\n\n该算法先进行取模，然后根据取模值所属范围进行分片。\n\n**注意 : 取模范围算法只能针对于数字类型进行取模运算 ; 如果是字符串则无法进行取模分片 ;**\n\n配置如下:\n\n```xml\n<tableRule name=\"sharding-by-pattern\"> \n    <rule>\n        <columns>id</columns> \n        <algorithm>sharding-by-pattern</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"sharding-by-pattern\" class=\"io.mycat.route.function.PartitionByPattern\"> \n    <property name=\"mapFile\">partition-pattern.txt</property> \n    <property name=\"defaultNode\">0</property> \n    <property name=\"patternValue\">96</property> \n</function>\n```\n\n\n\npartition-pattern.txt配置如下:\n\n```xml\n0-32=0 \n33-64=1 \n65-96=2\n```\n\n\n\n含义是：\n\n- 在mapFile配置文件中\n\n- **1-32即代表id%96后的分布情况**。\n\n- 如果在1-32, 则在分片0上 ; \n\n- 如果在33-64, 则在分片1上 ; \n\n- 如果在65-96, 则在分片2上。\n\n配置说明:\n\n| 属性         | 描述                                                       |\n| ------------ | ---------------------------------------------------------- |\n| columns      | 标识将要分片的表字段                                       |\n| algorithm    | 指定分片函数与function的对应关系                           |\n| class        | 指定该分片算法对应的类                                     |\n| mapFile      | 对应的外部配置文件                                         |\n| defaultNode  | 默认节点 ; 如果id不是数字, 无法求模, 将分配在defaultNode上 |\n| patternValue | 求模基数                                                   |\n\n**优点**：可以自主决定取模后数据的节点分布\n\n**缺点**：dataNode 划分节点是事先建好的，需要扩展时比较麻烦。\n\n\n\n\n\n## 7、字符串hash求模范围\n\n与取模范围算法类似, 该算法支持**数值**、**符号**、**字母取模**，首先截取长度为 prefixLength 的子串，在对子串中每一个字符的 **ASCII 码**求和，然后对求和值进行**取模运算**（sum%patternValue），就可以计算出子串的分片数。\n\n配置如下：\n\n```xml\n<tableRule name=\"sharding-by-prefixpattern\"> \n    <rule>\n        <columns>id</columns> \n        <algorithm>sharding-by-prefixpattern</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"sharding-by-prefixpattern\" class=\"io.mycat.route.function.PartitionByPrefixPattern\"> \n    <property name=\"mapFile\">partition-prefixpattern.txt</property> \n    <property name=\"prefixLength\">5</property> \n    <property name=\"patternValue\">96</property> \n</function>\n```\n\n\n\npartition-prefixpattern.txt配置如下:\n\n```xml\n# range start-end ,data node index \n# ASCII \n# 48-57=0-9 \n# 64、65-90=@、A-Z \n# 97-122=a-z \n###### first host configuration \n0-32=0 \n33-64=1 \n65-96=2\n```\n\n\n\n含义是：\n\n- 对id先截取prefixLength 长度的数据\n\n- 然后对截取后的数据的 每一位 获取ASCII 码\n\n- 然后把所有的ASCII码求和\n\n- 求和之后对patternValue 取模\n\n- 然后对取模的结果在 partition-prefixpattern.txt 中进行范围的匹配\n\n比如：\n\n```xml\n字符串 : \n    gf89f9a \n\n截取字符串的前5位进行ASCII的累加运算 : \n    g - 103 \n    f - 102 \n    8 - 56 \n    9 - 57 \n    f - 102 \n    \n    sum求和 : 103 + 102 + + 56 + 57 + 102 = 420 \n    求模 : 420 % 96 = 36\n```\n\n\n\n配置说明:\n\n| 属性         | 描述                                                         |\n| ------------ | ------------------------------------------------------------ |\n| columns      | 标识将要分片的表字段                                         |\n| algorithm    | 指定分片函数与function的对应关系                             |\n| class        | 指定该分片算法对应的类                                       |\n| mapFile      | 对应的外部配置文件                                           |\n| prefixLength | 截取的位数; 将该字段获取前prefixLength位所有ASCII码的和, 进行求模sum%patternValue ,获取的值，在通配范围内的即分片数 ; |\n| patternValue | 求模基数                                                     |\n\n**优点**：可以自主决定取模后数据的节点分布\n\n**缺点**：｀dataNode｀ 划分节点是事先建好的，需要扩展时比较麻烦。\n\n## 8、应用代码指定\n\n由运行阶段由应用自主决定路由到那个分片 , 直接根据字符子串（必须是数字）计算分片号 , 配置如下 :\n\n```xml\n<tableRule name=\"sharding-by-substring\"> \n    <rule>\n        <columns>id</columns> \n        <algorithm>sharding-by-substring</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"sharding-by-substring\" class=\"io.mycat.route.function.PartitionDirectBySubString\"> \n    <property name=\"startIndex\">0</property> <!-- zero-based --> \n    <property name=\"size\">2</property> \n    <property name=\"partitionCount\">3</property> \n    <property name=\"defaultPartition\">0</property> \n</function>\n```\n\n\n\n含义是：\n\n- 对id从startIndex 开始截取，截取 size 个长度，比如id=756432，截取之后就是75,\n\n- 然后75不在partitionCount 中，75 >3了，所以放在默认分片 defaultPartition 0中\n\n配置说明\n\n| 属性             | 描述                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| columns          | 标识将要分片的表字段                                         |\n| algorithm        | 指定分片函数与function的对应关系                             |\n| class            | 指定该分片算法对应的类                                       |\n| startIndex       | 字符子串起始索引                                             |\n| size             | 字符长度                                                     |\n| patternValue     | 分区（分片）数量                                             |\n| defaultPartition | 默认分片，当截取之后的获得分片号不在分片数量内时，使用默认分片 |\n\n## ??? 9、字符串hash解析\n\n取字符串中的指定位置的子字符串, 进行hash算法， 算出分片 ， \n\n配置如下\n\n```xml\n<tableRule name=\"sharding-by-stringhash\"> \n    <rule>\n        <columns>user_id</columns> \n        <algorithm>sharding-by-stringhash</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"sharding-by-stringhash\" class=\"io.mycat.route.function.PartitionByString\"> \n    <property name=\"partitionLength\">512</property> <!-- zero-based --> \n    <property name=\"partitionCount\">2</property> \n    <property name=\"hashSlice\">0:2</property> \n</function>\n```\n\n\n\n含义是：\n\n- 对一个字符串，截取（0,2）的长度\n- 对截取后的字符串，进行hash\n- hash后的结果，按照partitionLength和partitionCount进行分片\n\n配置说明:\n\n| 属性            | 描述                                                         |\n| --------------- | ------------------------------------------------------------ |\n| columns         | 标识将要分片的表字段                                         |\n| algorithm       | 指定分片函数与function的对应关系                             |\n| class           | 指定该分片算法对应的类                                       |\n| partitionLength | hash取模基数； length * count = 1024 （非出性能考虑）        |\n| partitionCount  | 分区数                                                       |\n| hashSlice       | hash运算符，根据字符串的hash运算；<br/> 0 代表str.length()<br/>-1 代表str.length() - 1<br/>大于0 代表数字自身<br/>可以理解为：substring(start,end) |\n\n## 10、一致性hash\n\n\n\n\n\n\n\n## 11、日期分片\n\n按照日期来分片\n\n```xml\n<tableRule name=\"sharding-by-date\"> \n    <rule>\n        <columns>create_time</columns> \n        <algorithm>sharding-by-date</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"sharding-by-date\" class=\"io.mycat.route.function.PartitionByDate\"> \n    <property name=\"dateFormat\">yyyy-MM-dd</property> \n    <property name=\"sBeginDate\">2020-01-01</property> \n    <property name=\"sEndDate\">2020-12-31</property> \n    <property name=\"sPartionDay\">10</property> \n</function>\n```\n\n\n\n配置说明:\n\n| 属性        | 描述                                                         |\n| ----------- | ------------------------------------------------------------ |\n| columns     | 标识将要分片的表字段                                         |\n| algorithm   | 指定分片函数与function的对应关系                             |\n| class       | 指定该分片算法对应的类                                       |\n| dateFormat  | 日期格式                                                     |\n| sBeginDate  | 开始日期                                                     |\n| sEndDate    | 结束日期，如果配置了结束日期，则表示数据到达了这个日期所在的分片之后，会重头开始再次插入 |\n| sPartionDay | 分区天数，默认是10，表示10天的数据存在一个分区               |\n\n注意：配置规则的表的dataNode的分片，必须和分片规则数量一致\n\n例如 2020-01-01 到 2020-12-31 ，每10天一个分片，一共需要37个分片。\n\n## 12、单月小时\n\n单月内按照小时拆分, 最小粒度是小时 , 一天最多可以有24个分片, 最小1个分片, 下个月从头开始循环, 每个月末需要手动清理数据。\n\n配置如下 ：\n\n```xml\n<tableRule name=\"sharding-by-hour\"> \n    <rule>\n        <columns>create_time</columns> \n        <algorithm>sharding-by-hour</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"sharding-by-hour\" class=\"io.mycat.route.function.LatestMonthPartion\"> \n    <property name=\"splitOneDay\">24</property> \n</function>\n```\n\n\n\n配置说明:\n\n| 属性        | 描述                             |\n| ----------- | -------------------------------- |\n| columns     | 标识将要分片的表字段             |\n| algorithm   | 指定分片函数与function的对应关系 |\n| class       | 指定该分片算法对应的类           |\n| splitOneDay | 一天切分的分片数                 |\n\n## 13、自然月分片\n\n使用场景为按照月份列分区, 每个自然月为一个分片。\n\n 配置如下:\n\n```xml\n<tableRule name=\"sharding-by-month\"> \n    <rule>\n        <columns>create_time</columns> \n        <algorithm>sharding-by-month</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"sharding-by-month\" class=\"io.mycat.route.function.PartitionByMonth\"> \n    <property name=\"dateFormat\">yyyy-MM-dd</property> \n    <property name=\"sBeginDate\">2020-01-01</property> \n    <property name=\"sEndDate\">2020-12-31</property> \n</function>\n```\n\n\n\n配置说明:\n\n| 属性       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| columns    | 标识将要分片的表字段                                         |\n| algorithm  | 指定分片函数与function的对应关系                             |\n| class      | 指定该分片算法对应的类                                       |\n| dateFormat | 日期格式                                                     |\n| sBeginDate | 开始日期                                                     |\n| sEndDate   | 结束日期，如果配置了结束日期，当到达这个月份之后，会重复从开始分片插入 |\n\n## 14、日期范围hash\n\n其思想和范围取模分片一样，先根据日期进行范围分片求出分片组，再根据时间hash使得短期内数据分布的更均匀 ;\n\n配置如下：\n\n```xml\n<tableRule name=\"range-date-hash\"> \n    <rule>\n        <columns>create_time</columns> \n        <algorithm>range-date-hash</algorithm> \n    </rule> \n</tableRule> \n\n<function name=\"range-date-hash\" class=\"io.mycat.route.function.PartitionByRangeDateHash\"> \n    <property name=\"dateFormat\">yyyy-MM-dd HH:mm:ss</property> \n    <property name=\"sBeginDate\">2020-01-01 00:00:00</property> \n    <property name=\"groupPartionSize\">6</property> \n    <property name=\"sPartionDay\">10</property> \n</function>\n```\n\n\n\n配置说明:\n\n| 属性             | 描述                                   |\n| ---------------- | -------------------------------------- |\n| columns          | 标识将要分片的表字段                   |\n| algorithm        | 指定分片函数与function的对应关系       |\n| class            | 指定该分片算法对应的类                 |\n| dateFormat       | 日期格式，符合java标准                 |\n| sBeginDate       | 开始日期，与 dateFormat 指定的格式一致 |\n| groupPartionSize | 每组的分片数量                         |\n| sPartionDay      | 代表多少天为一组                       |\n\n优点 : 可以避免扩容时的数据迁移，又可以一定程度上避免范围分片的热点问题\n\n注意 : 要求日期格式尽量精确些，不然达不到局部均匀的目的","tags":["mycat","分片"],"categories":["JAVA","数据库","MYCAT"]},{"title":"mycat从入门到入土","url":"/note/JAVA/数据库/MYCAT/mycat从入门到入土/","content":"\n\n\n\n\n# Mycat常用的分片规则\n\n# MyCat的核心功能\n\n## 分库分表\n\n## Sql路由\n\n## 结果集聚合\n\n我们考虑这样的场景，分片表orders分布到两个数据库节点上，这时候，我们执行以下sql:\n\n```sql\nselect count(1) from orders;\n```\n\n\n\nsql同时发送到两个节点执行，肯定会得到两个count结果，如果没有经过结果集汇聚，我们得到的会是两行count结果，如下所示:\n\n假设两个节点的数据条数分别为100和200。\n\n```sql\n+-----------+\n| count(1) |\n+-----------+\n|  100  |\n+-----------+\n|  200  |\n+-----------+\n```\n\n\n\n经过结果集汇聚后得到的才是正确的，我们想要的结果:\n\n```sql\n+-----------+\n| count(1) |\n+-----------+\n|  300  |\n+-----------+\n```\n\n\n\n对于结果集汇聚，有两种方案\n\n- 第一种是交给应用层去处理，比如count操作，那么只要对得到的结果进行累加即可，但是，如果考虑更复杂的汇聚呢？需要应用层做的太多太多了。\n\n- 第二种方案，也是最优的方案：为了最大化减少应用层的复杂性，我们考虑在mycat这一层实现结果集汇聚处理。\n\n更复杂的结果集汇聚包括sum、avg、group by、order by、limit等\n\n## 读写分离\n\n# MyCat的核心概念\n\n## 逻辑库（schema）\n\n这个概念对应于mysql数据库里面的database ，逻辑库的定义在schema.xml配置文件里面。\n\n## 逻辑表(table)\n\n逻辑表概念对应于mysql数据库里面的table。逻辑表的定义在schema.xml配置文件里面。逻辑表有以下几种分类:\n\n### 全局表\n\n- 全局表：无须对数据进行切分，在所有的分片上都保存一份数据\n\n- 使用场景：数据量小，变动小，使用频繁，这种表适合于 Mycat 全局表\n\n- 查询：Mycat 在 Join 操作中，业务表与全局表进行 Join 聚合会优先选择相同分片内的全局表 join，避免跨库 Join\n\n- 插入：在进行数据插入操作时， mycat 将把数据分发到全局表对应的所有分片执行，在进行数据读取时候将会随机获取一个节点读取数据。\n\n- 缺点：1.4版本前，Mycat 没有做各个分片的全局表的数据一致性检查\n\n### 分片表\n\n- 分片表分布在两个或者更多个分片节点上，数据的分布依赖于分片规则\n\n### 普通表\n\n- 数据只存在一个特定分片节点上，不分片，也不做副本保存(全局表)，实际上对应一个普通的mysql表。\n\n### ER表\n\n- 具有父子关系的分片表，子表的记录与所关联的父表记录存放在同一个分片节点上，即子表依赖于父表，通过表分组(Table Group)保证两个表的join不会是跨库join。表分组是解决跨分片数据join难题的一种折中方案。\n\n## 分片节点(dataNode)\n\n数据切分以后，一个分片表被分到不同的分片数据库上面，每个表分片所在的database(mysql上的概念)就是分片节点——dataNode。dataNode的定义在database.xml配置文件里面。\n\n## 节点主机(dataHost)\n\n节点主机dataHost对应实际的数据库连接，其中可以定义读库readHost和写库writeHost，用于实现读写分离。一个dataHost至少包括一个writeHost，可以包含若干个readHost，也可以没有readHost。dataHost的定义在database.xml配置文件里面。\n\n## 分片规则(rule)\n\n分片规则作用在分片表之上，是实现数据切分、sql路由的关键点。sf-mycat里面内置多种分片规则，包括前面所说的取模(mod)、哈希取模(hash-mod)、范围分区(range)等等。用户可以根据特定业务需求选取合适的分片规则来规划表数据的存储。分片规则的定义在rule.xml配置文件里面，并在schema.xml文件里面被使用。\n\n# MyCat的注意点（限制）\n\n（不支持的SQL，删除的SQL可能导致的问题？？）\n\nMycat本身为Java程序，无法承载大量数据的汇总分析操作，且Mycat以及业界大多数分布式产品都对分布式事务的强一致性都没有很好的解决方案。在涅槃项目中，分布式数据库中间件Mycat的定位是来解决大吞吐量业务系统，且主要为基于分片字段的原子性的应用调用。因此在研发规范上有如下要求：\n\n- 所有查询都带上分片字段条件，避免全分片扫描\n\n- 同一事务中的操作都落在同一个分片上，避免分布式事务\n\nMycat中并没有真正实现分布式事务，而是弱XA事务，不能保证事务commit阶段的完全一致性，需要应用去避免。\n\n扩容：分布式数据库的扩容方案是跟分片方法息息相关的，扩容方案的好坏，关键在于是否需要数据迁移，对于分片方法为 *哈希取模* 的数据，是随机分布在各个节点的，没有规律。扩容之后路由结果会发生改变，没有好的扩容方案，必须做数据迁移，将数据全量导出后再重新导入。因此在设计阶段应该合理预估的节点数量并预留冗余分片。\n\nmycat如何保证表结构一致的： 分表以后，表的数据必须落到多个数据节点上，这时候表定义也就有了多份。虽然我们可以通过sf-mycat这个总入口执行DDL进行表的创建以及表定义的修改，以达到分表在各个节点上的定义达到一致。但是，因为一些人为操作，可能在开发阶段临时修改表结构定义，并且不是通过sf-mycat总入口修改。那么，这时候有可能产生表结构定义不一致。假设在分表上创建了一个用于优化查询的索引，而后在开发阶段某个分片上的表的这个索引被人为修改，导致这个节点上的查询无法走正常的索引优化而影响执行效率，那么这个时候将拖慢整个sql的执行，甚至于引发一些不可控的场景。","tags":["mycat","分库分表","分片","读写分离"],"categories":["JAVA","数据库","MYCAT"]},{"title":"doris分区的基本操作","url":"/note/JAVA/数据库/DORIS/doris分区的基本操作/","content":"\n\n\n```sql\n\n查看某一个表的分区\nshow partitions from fw_sign_sum_di;\n\n删除分区\nalter table fw_sign_sum_di drop partition p20211230;\n\n添加分区：分区要按照顺序加\nalter table fw_sign_sum_di ADD PARTITION p20211230 VALUES LESS THAN (\"2021-12-31\");\n\n添加分区，可以用下面的代码生成脚本\n\n#         SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\n#         SimpleDateFormat sdf2 = new SimpleDateFormat(\"yyyy-MM-dd\");\n#         Date currentDate = new Date(1643385599000L);\n#         for (int i = 1; i < 500; i++) {\n#             currentDate =  DateUtil.getAfterDays(currentDate,1);\n#             StringBuilder sb = new StringBuilder(\"alter table fw_billstat_sum_di ADD PARTITION p\")\n#                 .append(sdf.format(currentDate)).append(\" \")\n#                 .append(\"VALUES LESS THAN ('\")\n#                 .append(sdf2.format(DateUtil.getAfterDays(currentDate,1)))\n#                 .append(\"');\");\n#             System.out.println(sb.toString());\n#         }\n\n\n```\n\n","tags":["doris"],"categories":["JAVA","数据库","DORIS"]},{"title":"mysql的数据宽度与数据长度","url":"/note/JAVA/数据库/MYSQL/mysql的数据类型和数据宽度和数据长度/","content":"\n\n\n## 前言\n\n在mysql的表定义中\n\n```sql\nCREATE TABLE `ag_aging_warn_clean` (\n\t`id` BIGINT (20) NOT NULL AUTO_INCREMENT,\n\t`status_code` VARCHAR (255) DEFAULT NULL COMMENT '状态code',\n\t`money` float (5,2) DEFAULT NULL,\n\tPRIMARY KEY (`id`),\n\tKEY `ag_aging_warn_clean` (`status_code`)\n) ENGINE = INNODB AUTO_INCREMENT = 66 DEFAULT CHARSET = utf8mb4;\n\n\n```\n\n经常会出现下面这种：\n\n- bigint(20)\n- varchar(255)\n- float(5,2)\n\n括号外面的我们知道是数据类型，括号里面的是什么意思呢？\n\n\n\n说到这个，就要说到mysql的数据类型了，跟着我一步一步走，在mysql中数据类型大致分为五类（下面列的比较全）：\n\n\n\n## mysql中数据类型\n\n- 整数类型：BIT、BOOL、TINY INT、SMALL INT、MEDIUM INT、 INT、 BIG INT\n- 浮点数类型：FLOAT、DOUBLE、DECIMAL\n- 字符串类型：CHAR、VARCHAR、TINY TEXT、TEXT、MEDIUM TEXT、LONGTEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB\n- 日期类型：Date、DateTime、TimeStamp、Time、Year\n- 其他数据类型：BINARY、VARBINARY、ENUM、SET、Geometry、Point、MultiPoint、LineString、MultiLineString、Polygon、GeometryCollection等\n\n然后针对每一个数据类型，它的长度和范围是不一样的（只列出常用的数据类型，全的可以参考 ： https://m.php.cn/article/460317.html）\n\n\n\n## mysql中各数据类型及字节长度\n\n| 数据类型     | 字节长度 | 范围或用法                                                   |\n| ------------ | -------- | ------------------------------------------------------------ |\n| Bit          | 1        | 无符号[0,255]，有符号[-128,127]，**备注**：BIT和BOOL布尔型都占用1字节 |\n| TinyInt      | 1        | 整数[0,255]                                                  |\n| SmallInt     | 2        | 无符号[0,65535]，有符号[-32768,32767]                        |\n| MediumInt    | 3        | 无符号[0,2^24-1]，有符号[-2^23,2^23-1]]                      |\n| Int          | 4        | 无符号[0,2^32-1]，有符号[-2^31,2^31-1]                       |\n| BigInt       | 8        | 无符号[0,2^64-1]，有符号[-2^63 ,2^63 -1]                     |\n| Float(M,D)   | 4        | 单精度浮点数。**备注**：这里的D是精度，如果D<=24则为默认的FLOAT，如果D>24则会自动被转换为DOUBLE型。 |\n| Double(M,D)  | 8        | 双精度浮点。**备注**：关于精度可以参考：[单精度与双精度是什么意思有什么区别.md](单精度与双精度是什么意思有什么区别.md) |\n| Decimal(M,D) | M+1或M+2 | 未打包的浮点数，用法类似于FLOAT和DOUBLE，天缘博客提醒您如果在ASP中使用到Decimal数据类型，直接从数据库读出来的Decimal可能需要先转换成Float或Double类型后再进行运算。 |\n| Date         | 3        | 以YYYY-MM-DD的格式显示，比如：2009-07-19                     |\n| Date Time    | 8        | 以YYYY-MM-DD HH:MM:SS的格式显示，比如：2009-07-19 11：22：30 |\n| TimeStamp    | 4        | 以YYYY-MM-DD的格式显示，比如：2009-07-19                     |\n| Time         | 3        | 以HH:MM:SS的格式显示。比如：11：22：30                       |\n| Year         | 1        | 以YYYY的格式显示。比如：2009                                 |\n| Char(M)      | M        | 定长字符串。                                                 |\n| VarChar(M)   | M        | 变长字符串，要求M<=255                                       |\n| Binary(M)    | M        | 类似Char的二进制存储，特点是插入定长不足补0                  |\n| VarBinary(M) | M        | 类似VarChar的变长二进制存储，特点是定长不补0                 |\n| Tiny Text    | Max:255  | 大小写不敏感                                                 |\n| Text         | Max:64K  | 大小写不敏感                                                 |\n| Medium Text  | Max:16M  | 大小写不敏感                                                 |\n| Long Text    | Max:4G   | 大小写不敏感                                                 |\n| TinyBlob     | Max:255  | 大小写敏感                                                   |\n| Blob         | Max:64K  | 大小写敏感                                                   |\n| MediumBlob   | Max:16M  | 大小写敏感                                                   |\n| LongBlob     | Max:4G   | 大小写敏感                                                   |\n| Enum         | 1或2     | 最大可达65535个不同的枚举值                                  |\n| Set          | 可达8    | 最大可达64个不同的值                                         |\n\n\n\n## 整数型的可选属性\n\n观察第三列【范围或用法】，可以看到，整数型根据数据类型的不同，存储的数值大小也不同，而且还有`无符号`的概念，那么这俩是什么意思呢？\n\n其实在mysql中，整数型的可选属性有三个：\n\n- M   ： 宽度（在0填充的时候才有意义，否则不需要指定）\n- unsigned   ： 无符号类型（非负）\n- zerofill   ：  0填充,（如果某列是zerofill，那么默认就是无符号），如果指定了zerofill只是表示不够M位时，用0在左边填充，如果超过M位，只要不超过数据存储范围即可\n\n那么这三个有什么用的？我们来一个一个看：\n\n当我们设置了`bigint(5)`的时候，数据库中存储了 -1,-12,-123,-12345,-123456,1,12,123,12345,123456，分别是什么效果？\n\n要分设置了 zerofill（0填充）的情况，和不设置 zerofill（0填充） 的情况\n\n- 不设置zerofill（0填充）的情况，如下图\n\n<img src=\"mysql的数据类型和数据宽度和数据长度.assets/image-20220902144000573.png\" alt=\"image-20220902144000573\" style=\"zoom:80%;\" />\n\n\n\n- 设置了zerofill（0填充）的情况，如下图\n  - 当使用*zerofill* 时，默认会自动加unsigned（无符号）属性\n\n<img src=\"mysql的数据类型和数据宽度和数据长度.assets/image-20220902144158868.png\" alt=\"image-20220902144158868\" style=\"zoom:80%;\" />\n\n看完了 zerofill（零填充）的效果之后，我们接着来看 unsigned （无符号）\n\n- 无符号没什么可以说的，以bigint为例\n- 无符号[0,2^64-1]，有符号[-2^63 ,2^63 -1]\n- 设置无符号之后，负数是无法插入的，网上一些傻逼博客说可以插入，只不过展示0，全是放屁\n\n<img src=\"mysql的数据类型和数据宽度和数据长度.assets/image-20220902153330878.png\" alt=\"image-20220902153330878\" style=\"zoom:80%;\" />\n\n问：bigint(5)和bigint(20)有什么区别？\n\n- 在数据插入方面，没有任何区别；两者占用的空间都是8字节；\n- 只不过展示方面不一样，见上\n\n\n\n## 字符串型的宽度\n\n上面了解了 整数型 的【宽度】，引出了无符号和零填充的概念；那么针对字符串呢？\n\n- 字符串不支持【无符号】和【零填充】\n- 但是字符串支持【宽度】\n\n比如下面这种： varchar(255)，其中的255表示什么含义呢？\n\n- 表示这个列只能存储255个字节，是真正的长度限制。\n\n\n\n## 扩展：char 和 varchar 有什么区别\n\nchar：\n\n- char表示定长字符串，长度是固定的；\n\n- 如果插入数据的长度小于char的固定长度时，则用空格填充；\n\n- 因为长度固定，所以存取速度要比varchar快很多，甚至能快50%，但正因为其长度固定，所以会占据多余的空间，是空间换时间的做法；\n\n- 对于char来说，最多能存放的字符个数为255，和编码无关\n\nvarchar：\n\n- varchar表示可变长字符串，长度是可变的；\n\n- 插入的数据是多长，就按照多长来存储；\n\n- varchar在存取方面与char相反，它存取慢，因为长度不固定，但正因如此，不占据多余的空间，是时间换空间的做法；\n\n- 对于varchar来说，最多能存放的字符个数为65532\n\n总结\n\n日常的设计，对于长度相对固定的字符串，可以使用char，对于长度不确定的，使用varchar更合适一些。\n\n\n\n## 扩展：blob和text有什么区别？\n\n\n\nblob用于存储二进制数据，而text用于存储大字符串。\n\nblob没有字符集，text有一个字符集，并且根据字符集的校对规则对值进行排序和比较\n\n排序和比较指的是，当我们使用order by或者比较操作的时候，是和字符集有关的。 \n\n\n\n## 扩展：DATETIME和TIMESTAMP的异同？\n\n**相同点**：\n\n1、两个数据类型存储时间的表现格式一致。均为 `YYYY-MM-DD HH:MM:SS`\n\n2、两个数据类型都包含「日期」和「时间」部分。\n\n3、两个数据类型都可以存储微秒的小数秒（秒后6位小数秒）\n\n区别：\n\n1、**日期范围**：DATETIME 的日期范围是 `1000-01-01 00:00:00.000000` 到 `9999-12-31 23:59:59.999999`；TIMESTAMP 的时间范围是`1970-01-01 00:00:01.000000` UTC`到 2038-01-09 03:14:07.999999` UTC\n\n2、**存储空间**：DATETIME 的存储空间为 8 字节；TIMESTAMP 的存储空间为 4 字节\n\n3、**时区相关**：DATETIME 存储时间与时区无关（存进去是什么，展示就是什么）；TIMESTAMP 存储时间与时区有关（存进去的是时间戳，根据时区的不同展示不同的值）\n\n4、**默认值**：DATETIME 的默认值为 null；TIMESTAMP 的字段默认不为空(not null)，默认值为当前时间(CURRENT_TIMESTAMP)\n\n","tags":["单精度","双精度"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的索引从入门到入土","url":"/note/JAVA/数据库/MYSQL/mysql的索引从入门到入土/","content":"\n\n\n## 索引的XMIND图\n\n文件位置：[点我打开](./mysql的索引从入门到入土.assets/Mysql索引.xmind)\n\n<img src=\"mysql的索引从入门到入土.assets/image-20230506173943461.png\" alt=\"image-20230506173943461\" style=\"zoom:80%;\" />\n\n## 索引的常见数据结构\n\n\n\n哈希表\n\n- 哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。\n\n有序数组\n\n- 有序数组在等值查询和范围查询场景中的性能就都非常优秀。\n\n- 有序数组索引只适用于静态存储引擎\n\n搜索树\n\n- 二叉搜索树：父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。\n\n- 平衡二叉树\n\n- N叉树\n\n\n\n\n\n## InnoDB为什么选择B+树（对比其他树）\n\n\n\n### 为什么选择树\n\n树的查询效率高，还可以保持有序。\n\n\n\n### 为什么不用二叉搜索树\n\n#### 什么是二叉搜索树（也叫二叉排序树或者二叉查找树）\n\n以下是二叉查找树的结构：\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219173305682.png\" alt=\"image-20221219173305682\" style=\"zoom:50%;\" />\n\n它的**特点**是：\n\n- 父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。\n- 只有两个叉\n- 查询的时间复杂度是：O(log(N))\n- 从算法逻辑来讲，二叉搜索树的查找速度和比较次数都是最小的。\n\n\n\n#### 为什么不用二叉搜索树（查找耗磁盘IO）\n\n因为考虑到磁盘IO的性能。\n\n为什么这么说：InnoDB在查找的时候，是不能将所有的索引全部加载到内存中的，所以必然涉及到磁盘IO。\n\n比如下面这个，二叉搜索树，我们想获取到10，需要经历几次磁盘IO：\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219173305682.png\" alt=\"image-20221219173305682\" style=\"zoom:50%;\" />\n\n答案是：4次\n\n- 第一次磁盘IO，读取9\n- 第二次磁盘IO，读取13\n- 第三次磁盘IO，读取11\n- 第四次磁盘IO，读取10\n\n这样性能是很低的。\n\n所以InnoDB并没有采用二叉搜索树来作为索引的数据结构。\n\n但是InnoDB的设计者，又不能抛弃树这个数据结构带来的遍历，所以只能将 “瘦高” 的二叉搜索树，让它变得 “矮胖”。以便于节省磁盘IO。这就是`B树`的特征之一\n\n\n\n### 什么是B树\n\n#### 什么是B树\n\nB树 是一种`多路平衡查找树`，它的每一个节点最多包含`m`个孩子，`m`被称为`B树`的阶。\n\n上面说了，InnoDB的设计者为了想保留树带来的便利，只能将： “瘦高” 的二叉搜索树，让它变得 “矮胖”。以便于节省磁盘IO。\n\n下图就是一个 `3阶的B树` 示意图\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219180143637.png\" alt=\"image-20221219180143637\" style=\"zoom:50%;\" />\n\n\n\n一颗`m阶的B树`，它的特点是：\n\n- `m阶`表示每一个节点最多拥有`m`个孩子\n- 根节点至少有 `2` 个子女\n- 有`k`个孩子的节点包含有k-1个元素，其中： `ceil(m/2) <= k <= m`，（ceil表示向上取整）\n- 每一个叶子节点都包含`k-1`个元素，其中：`ceil(m/2) <= k <= m`，（ceil表示向上取整）\n- 所有的叶子节点都位于同一层\n- 每个节点的元素从小到大排列，并且当该结点的孩子是非叶子结点时，节点中第`k-1`个元素正好是`k`个孩子包含的元素的值域分划。\n\n\n\n\n\n我们一一来看这些特点，其中\n\n- 一颗`3阶`的树，每个节点最多包含`3`个孩子，m = 3\n- `9`是根节点，有`2`个孩子`（2,6）`和 `12`。(根节点至少`2`个)\n- `（2,6）`这个中间节点包含`2`个元素：`2`和`6`，有`3`个孩子。 `2 <= k <= 3`\n- `12 `这个中间节点包含`1`一个元素：`12`，有`2`个孩子。满足规则\n- 叶子节点`1`,`(3,5)`,`8`,`11`,`(13,15)`位于同一层\n- 每个节点的元素从小到大排列，`(3,5)`在`(2,6)`的值域之间。\n\n\n\n#### B树的等值查找\n\n\n\n在下面的一个3阶B树中，查找5，需要经历几次磁盘IO：\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219180143637.png\" alt=\"image-20221219180143637\" style=\"zoom:50%;\" />\n\n答案是：三次\n\n- 第一次磁盘IO：`9`\n- 第二次磁盘IO：`（2,6）`\n- 第三次磁盘IO：`（3,5）`\n\n\n\n#### B树的范围查找\n\n在下面的一个3阶B树中，查找范围是 3-11 的元素，需要经历几次磁盘IO：\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219180143637.png\" alt=\"image-20221219180143637\" style=\"zoom:50%;\" />\n\n答案是：好多好多次\n\n- 3次磁盘IO后，找到范围下限：3 所在的（3,5）这个节点\n- 中序遍历到 元素6\n- 中序遍历到 元素8\n- 中序遍历到 元素9\n- 中序遍历到 元素11，遍历结束\n\n\n\n由此可见，B树的范围查找，很繁琐。\n\n\n\n\n\n\n\n#### B树的插入（自平衡）\n\n插入比较复杂\n\n以下面的为例子：在一个3阶的B树中，插入 4\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219180143637.png\" alt=\"image-20221219180143637\" style=\"zoom:50%;\" />\n\n由于 4 在 （3,5）之间。\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219185214252.png\" alt=\"image-20221219185214252\" style=\"zoom:50%;\" />\n\n- 这是一颗`3阶`的B树，由于每个节点最多包含 `k-1` 个元素，其中  `2 <= k <= 3`，所以每个节点可以包含`1个`，`2个`元素；\n- 要在`（3,5）`之间插入 `4`，`（3,5）`已经是`2`个元素了，不能在插入了。\n- `（3,5）`的父节点`（2,6）`也是`2`个元素，也不能在插入了\n- 根节点 `9` 是`1`个元素，可以在升级为2个元素。\n- 于是：\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219190355215.png\" alt=\"image-20221219190355215\" style=\"zoom:50%;\" />\n\n总结：\n\n- 仅仅是插入一个元素，就让整个B树发生了连锁反应\n- 虽然麻烦，但是也正因为如此，可以让B树始终保持多路平衡。（**自平衡**）\n\n\n\n#### B树的删除（左旋）\n\n\n\n在如下的一个3阶B树中，删除元素11\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219190937755.png\" alt=\"image-20221219190937755\" style=\"zoom:50%;\" />\n\n\n\n- 首先这是一颗3阶B树，由于B树的规则，每个中间节点都包含`k-1`个元素和`k`个孩子，其中 ` 2<= k <= 3`\n- 所以：11删除之后，父节点12就只剩下1个孩子了，不符合规则，3阶的B树每个中间节点至少有2个孩子。\n- 因为，需要找出删除11后，剩余的三个元素12,13,15的中位数，取代节点12；然后节点12下移成为孩子（**左旋**）\n\n\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219191850585.png\" alt=\"image-20221219191850585\" style=\"zoom:50%;\" />\n\n\n\n#### B树的卫星数据\n\n所谓的卫星数据（Satellite Information），指的是索引元素所指向的数据记录；\n\n在B树中，每一个节点都带有卫星数据。\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219221417559.png\" alt=\"image-20221219221417559\" style=\"zoom:50%;\" />\n\n\n\n### 为什么选择B+树\n\n#### 什么是B+树\n\nB+树是基于B树的一种变体。有着比B树更高的查询性能\n\n下面是一个3阶的B+树的示意图：节点之间含有重复元素，叶子节点还用指针连在一起\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219215758443.png\" alt=\"image-20221219215758443\" style=\"zoom:50%;\" />\n\n\n\n\n\n一颗m阶的B+树有以下特点：\n\n- 有k个子树的中间节点包含有k个元素（B树中是k-1个元素）\n- 每个元素不保存数据，只用来索引，所有的数据保存在叶子节点\n- 所有的叶子节点包含了全部元素的信息，而且每个叶子节点都带有指向下一个节点的指针，形成了一个有序链表\n- 叶子节点本身依关键字大小自小而大顺序链接\n- 每一个父节点的元素都出现在子节点中，而且是子节点中最大（或最小）的元素\n- 无论插入多少元素，都要保持最大元素在根节点中\n\n\n\n\n\n#### B+树的卫星数据\n\n所谓的卫星数据（Satellite Information），指的是索引元素所指向的数据记录；\n\n在B+树中，只有叶子节点带有卫星数据。\n\n在mysql中，表中的一行记录就是一个卫星数据。\n\n不过需要注意的是：\n\n- 在mysql中，主键索引的叶子结点存的是`卫星数据`（就是行记录）\n- 在mysql中，非主键索引的叶子节点存的是`指向卫星数据的指针`（就是行记录的主键id）\n\n\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219221505548.png\" alt=\"image-20221219221505548\" style=\"zoom:50%;\" />\n\n\n\n#### B+树的等值查找\n\n\n\n在下面这颗3阶的B+树上查找元素 3，会经历几次磁盘IO：\n\n\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219215758443.png\" alt=\"image-20221219215758443\" style=\"zoom:50%;\" />\n\n\n\n结果：\n\n- 第一次磁盘IO：（8,15）\n- 第二次磁盘IO：（2,5,8）\n- 第三次磁盘IO：（3,5）\n\n\n\n由于B+树的中间节点并没有存放卫星数据，所以比B树更加“矮胖”，也即是说：在相同数据量的情况下，B+树会比B树访问到更少的磁盘IO。\n\n由于 B+树 的中间节点没有存放卫星数据，所以要想拿到记录，必须访问到叶子节点。\n\n而 B树 由于每个节点都存放了卫星数据，所以只要匹配到，就可以获取到记录。\n\n对B树来说：最好的情况是只访问根节点就能拿到记录，最坏的情况就是访问到叶子结点。换言之：B树的查找性能不稳定\n\n对B+树来说：由于每一次都要访问到叶子节点，所以B+树的查找性能是稳定的。\n\n\n\n\n\n#### B+树的范围查找\n\n在下面这颗3阶的B+树上，查找范围是 3-11 的元素，需要经历几次磁盘IO：\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219215758443.png\" alt=\"image-20221219215758443\" style=\"zoom:50%;\" />\n\n答案是：5次\n\n- 第一次磁盘IO：找到：（8,15）\n- 第二次磁盘IO：找到：（2,5,8）\n- 第三次磁盘IO：找到：（3,5），此时找到范围下限：3 所在的（3,5）这个节点\n- 然后通过叶子结点上的指针，直接遍历叶子节点。（3,5），（6,8），（9,11）\n- 直接确定到范围\n\n\n\n相比于B树范围查找的繁琐，B+树就简单的多了。\n\n\n\n### B+树的B树的比较\n\nB+树相比B树的优势有三个\n\n- IO次数更少\n- 查询性能稳定\n- 范围查询简便\n\n至于插入和删除，两者大同小异。\n\n\n\n\n\n## 索引分类\n\n了解下面列出来的索引概念：\n\n- 主键索引\n- 普通索引\n- 聚簇索引\n- 非聚簇索引\n- 二级索引\n- 唯一索引\n- 全文索引\n- 联合索引\n- 覆盖索引\n- 前缀索引\n\n\n\n### 主键索引和普通索引\n\n主键索引：也叫聚簇索引，它 是一种特殊的唯一索引，**不允许有空值**。\n\n普通索引：也叫二级索引，最基本的索引，没有任何限制\n\n主键索引在InnoDB中是聚簇索引；普通索引在InnoDB中是非聚簇索引\n\n\n\n\n\n### 聚簇索引和非聚簇索引\n\n聚簇索引并不是单独的索引类型，而是一种数据存储方式，指的是：数据和对应的索引紧凑的存储在一起。\n\n非聚簇索引指的就是：数据和索引分开存储。\n\n举例来说：\n\n对于InnoDB：主键索引的叶子节点存的是主键id和数据，它们是保存在一起的；非主键索引的叶子节点存的是主键id，和真实的数据是分开的。所以主键索引是聚簇索引，非主键索引是非聚簇索引。（InnoDB的索引和数据是放在同一个文件中的：数据即索引，索引即数据）\n\n对于MyISAM：索引和记录本身就是分开存储的，是不同的文件。所以MyISAM中所有的索引都是非聚簇索引。\n\n\n\n### 唯一索引\n\n唯一索引：与\"普通索引\"类似，不同的就是：索引列的值必须唯一，但**允许有空值**。\n\n\n\n### 全文索引\n\n全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时耗空间。\n\n\n\n### 联合索引\n\n也叫组合索引，为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。\n\n\n\n### 覆盖索引\n\n当一个SQL查询语句所需要查询的字段，被所使用的的索引可以直接满足需求，不需要回表了，称之为覆盖索引\n\n\n\n### 前缀索引\n\n当需要索引的字段很长，而且该字段后半部分的选择性很低，比如邮箱地址；后面都是一样的。\n\n对于这种我们就可以建立前缀索引：使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。\n\n```sql\nmysql> alter table SUser add index index2(email(6));\n```\n\n前缀索引会导致覆盖索引失效，因为前缀索引是截取后的部分做的索引，不得不在回表查一次完整的信息。\n\n\n\n## 索引特点\n\n\n\n### 最左匹配原则\n\n\n\n假设有一个用户表，我们给 （name, age）加上联合索引。\n\n如果我们要查询所有名字第一个字是“张”的人，SQL语句可能会这么写：\n\n```sql\nwhere name like '张%';\n```\n\n在这种情况下，也是可以使用到这个索引的。这就是索引的最左匹配原则。\n\n\n\n- 最左匹配原则可以是联合索引的最左N的字段，也可以是一个字符串的最左M个字符；\n- 在建立联合索引的时候，如何安排索引内的字段顺序，需要仔细考量了。\n\n\n\n### 索引下推\n\n\n\nmysql 5.6 引入了 索引下推优化。可以在索引遍历的过程中，对索引中包含的字段先做判断，直接过滤掉不满足的记录，减少回表次数。\n\n\n\n假如有一个用户表，我们给（name，age）加上联合索引。\n\n如果我们要查询所有名字第一个字是“张”的人，并且年龄大于10岁的男人。SQL语句可能会这么写\n\n```sql\nwhere name like '张%' and age > 10 and male='男';\n```\n\n\n\n对于这个语句，我们知道由于最左匹配原则，使用到了（name，age）这个索引。\n\n然后，接下来呢？\n\n在mysql 5.6之前，接下来就需要回表了。对扫描的每一条记录，都回表判断 age 和 male 是否满足；\n\n在mysql 5.6之后，由于有索引下推优化，对于age的判断可以直接完成，过滤掉age不符合的记录，然后对剩下的记录在此回表判断male是否满足。（减少了回表次数）\n\n\n\n### 索引潜水\n\n英文单词：index dive\n\n主要是用于 IN 查询语句的优化，\n\n跟这个词语相关的，还有一个配置参数 `eq_range_index_dive_limit`。\n\nMySQL5.7.3之前的版本，这个值默认是10，之后的版本，这个值默认是200。\n\n简单的理解就是：IN 语句的数量如果少于200个，就使用**索引潜水（Index dive）**预估扫描行数，很精确，所以选择索引的时候就不容易出错；\n\n如果 IN 语句的数量大于200个，就使用 **索引统计（Index statistics）**预估扫描行数，误差很大，所以会导致选择索引容易选错，导致性能下降\n\n关于索引潜水，具体见：Mysql性能调优从入门到入土\n\n\n\n### 普通索引默认联合主键索引\n\n二级索引会默认与主键索引做联合索引。\n\n为什么？\n\n因为二级索引的叶子节点存放的就是主键。\n\n\n\n\n\n## 索引比较\n\n\n\n任何索引之间的比较，都从 增删改查 四个角度来具体分析，就不迷惑了。\n\n\n\n### 普通索引和主键索引有什么区别？\n\n主键索引的查询，不需要回表了。\n\n普通索引的查询，如果要查询的字段没有被当前索引覆盖，是需要回表的。\n\n针对回表的优化：\n\n- 覆盖索引可以减少回表\n- 索引下推可以减少回表\n\n\n\n\n\n### 普通索引和唯一索引有什么区别？\n\n#### 对查询的影响\n\n- 微乎其微。\n- 普通索引的查询：定位到当前记录之后，还要继续判断下一条记录是否满足条件。\n- 唯一索引的查询：定位到当前记录之后，由于是唯一的，不再需要判断下一条记录了。\n\n不过，后面看到加锁规则这部分的时候，有一个加锁规则是：唯一索引上的范围查询，会访问到不满足查询条件的第一个值为止。 \n\n也就是说：\n\n- 对于范围查询，普通索引和唯一索引是一样的，都需要访问下一条记录。\n- 对于等值查询，唯一索引比普通索引少了一次查找下一条记录的性能消耗。\n\n\n\n#### 对更新的影响\n\n- 参考：《mysql的日志从入门到入土》这篇文章中讲到了changebuffer：\n  - changebuffer（对更新的优化，对比redolog）\n  - changebuffer在 5.5 版本之前叫做：insert buffer，只支持插入操作；在5.5之后，支持了更新操作\n  - changebuffer的作用：\n  - 更新的时候不需要从内存中加载数据页，而是直接将更新后的记录写到changebuffer中（内存中）就可以返回了\n  - 那么changebuffer中的数据什么时候刷盘呢？\n  - 因为写入changebuffer了，一定会写入redolog，后台会定时将redolog中的数据应用到数据页中，同时也会将changebuffer的数据应用到数据页，这是两个后台线程，他俩没有任何关系。操作的都是内存中的数据页，然后刷脏页\n  - 具体的可以参考：《mysql的日志从入门到入土》\n\n- 为什么唯一索引的更新就不能使用 change buffer，只有普通索引可以使用。\n  - 因为唯一索引的更新，需要判断当前的这个更新会不会影响到唯一索引的唯一性。\n\n  - 所以必须判断要将数据页加载到内存中，进行判断才可以。\n\n- change buffer适应于：写多读少的场景和写多读多的场景；\n\n- change buffer 和 redo log的联系和区别。\n  - change buffer减少了磁盘的随机读（减少了加载数据页的操作）\n  - redo log减少的磁盘的随机写（WAL机制）\n\n\n\n### 前缀索引对覆盖索引的影响\n\n我们知道覆盖索引可以减少回表，提升查询性能；\n\n但是当我们的覆盖索引是前缀索引的时候，此时覆盖索引是不生效的。\n\n因为前缀索引是截取后的信息作为索引，要想获取完整的字段，就不得不回表在查询一次。\n\n\n\n\n\n## 合理创建索引\n\n为什么要合理的创建索引。\n\n因为索引很显然并不是越多越好，因为占空间，而且数据变更的时候还要多维护索引的变更，消耗性能。\n\n那么怎么合理的创建索引呢\n\n首先要知道，索引只能用来加快查询的速度，所以\n\n- 索引应该建立在频繁查询的字段上，比如 where 语句后的字段，order by 的字段， join 的字段等。\n\n那么是对所有的where，order by，join等的字段都建立索引吗？很显然不能\n\n- 过多的索引会占用空间，而且更新的时候，还需要维护索引，消耗性能。\n\n那什么样的字段不用建立索引呢？\n\n- 区分度低的字段不用建立索引。\n- 频繁更新的字段一般不建议当做索引，因为要维护索引，页分裂，页合并等，消耗性能。\n\n那剩下的别的字段，就都可以建立索引了吗？也不是\n\n- 为了节省空间，推荐建立 组合索引。\n- 组合索引还有一个好处，就是可以满足最左匹配原则。\n\n另外补充一个\n\n- 字段长的可以前缀索引，倒序索引等。\n\n\n\n\n## 选错索引（索引统计，强制索引）\n\n- 由于索引统计的更新机制，索引统计信息不准确导致的。\n\n- 解决：重新采集统计信息：analyze table\n\n- 解决：手动指定索引；force index\n\n\n\n### 优化器是怎么选择索引的\n\n选择索引是优化器的工作。\n\n\n\n而优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。\n\n在数据库里面，扫描行数是影响执行代价的因素之一。扫描的行数越少，意味着访问磁盘数据的次数越少，消耗的 CPU 资源越少。\n\n\n\n但是扫描行数并不是唯一确定索引的因素。优化器还会结合是否使用临时表、是否排序等因素进行综合判断。\n\n\n\n### **怎么确定扫描行数呢？**\n\n在确定扫描行数之前，mysql 会先看看 索引基数。索引基数决定了要不要使用索引\n\n- 如果索引基数太小，就会弃用索引。\n- 当索引基数比较大的时候，要不要走这个索引，还得看扫描行数，回表，子查询等等，最后优化器根据预估的成本决定是否走这个索引。\n\n\n\n#### 什么是索引基数呢\n\n\n\nMySQL 在真正开始执行语句之前，并不能精确地知道满足这个条件的记录有多少条，而只能根据**统计信息**来估算记录数。\n\n这个**统计信息**就是索引的“**区分度**”。\n\n显然，一个索引上不同的值越多，这个索引的区分度就越好。\n\n而一个索引上不同的值的个数，我们称之为**“基数”（cardinality）**。\n\n也就是说，这个基数越大，索引的区分度越好。\n\n我们可以使用 show index 方法，看到一个索引的基数。\n\n```sql\nmysql> show index from t;\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n| t     |          0 | PRIMARY  |            1 | id          | A         |           6 |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |\n| t     |          1 | c        |            1 | c           | A         |           6 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+\n2 rows in set (0.03 sec)\n```\n\n\n\n**MySQL 是怎样得到索引的基数的呢？**\n\n\n\nMySQL 使用采样统计的方法进行统计索引的基数。\n\n为什么要采样统计呢？因为把整张表取出来一行行统计，虽然可以得到精确的结果，但是代价太高了，所以只能选择“采样统计”。\n\n采样统计的时候，InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。\n\n而数据表是会持续更新的，索引统计信息也不会固定不变。所以，当变更的数据行数超过 1/M 的时候，会自动触发重新做一次索引统计。\n\n举个例子：\n\n取n=3个数据页统计，假设共有10个索引数据页； page1：10个不同值； page2：20个不同值； page3：15 个不同值； 索引基数=(10+20+15)/3*10=150；\n\n\n\n**上文所说的 N  和 M 具体是多少呢？**\n\n在 MySQL 中，有两种存储索引统计的方式，可以通过设置参数 innodb_stats_persistent 的值来选择：\n\n- 设置为 on 的时候，表示统计信息会持久化存储。这时，默认的 N 是 20，M 是 10。\n- 设置为 off 的时候，表示统计信息只存储在内存中。这时，默认的 N 是 8，M 是 16。\n\n由于是采样统计，所以不管 N 是 20 还是 8，这个基数都是很容易不准的。\n\n\n\n#### 怎么确定扫描行数呢？\n\n知道了索引基数，优化器还要继续预估执行这个语句，具体需要扫描多少行\n\n通过 explain 命令可以看到优化器预估的扫描行数，至于mysql是怎么预估扫描行数的，这里就不在展开了。\n\n\n\n### 怎么解决选错索引的问题\n\n如果你通过 explain 命令，看到是由于 预估行数 错误，导致了mysql选错了索引。\n\n可以使用：analyze table t 命令，可以用来重新统计索引信息。\n\n```sql\nmysql> analyze table t;\n+-------+---------+----------+----------+\n| Table | Op      | Msg_type | Msg_text |\n+-------+---------+----------+----------+\n| zs.t  | analyze | status   | OK       |\n+-------+---------+----------+----------+\n1 row in set (0.04 sec)\n```\n\n\n\n另外，我们知道索引的选择，并不是仅仅靠 扫描行数 这一个影响因素来决定的\n\n如果在实际的生产环境中，我们发现使用 索引a 就是比 索引b 有更好的性能\n\n我们可以使用 force index 强制这个sql语句使用索引a，而不是索引b\n\n\n\n\n\n## 索引排序（order by）\n\n\n\n在日常的开发过程中，经常会使用`order by`语句，那么排序的原理是什么呢？\n\n排序分为两种情况\n\n- 排序的字段有索引\n- 排序的字段没有索引\n\n\n\n### 有索引的排序\n\n我们知道索引是有序的，所以有索引的排序会直接使用索引；\n\n直接使用索引排序的话，`explain`结果中是不会有 Using filesort 的\n\n结果中有 Using filesort ，表示的就是需要排序，而且没有用到索引\n\n\n\n### 没有索引的排序\n\n没有索引的排序，相对来说复杂一下。\n\n一个语句是否使用了排序，可以通过：`explain`命令查看，结果中有 Using filesort ，表示的就是需要排序。\n\nMySQL 会给每个线程分配一块`内存`用于排序，称为` sort_buffer`。\n\n\n\n####  sort_buffer是什么\n\nMySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer；\n\nsort_buffer既然是内存区域，就不可能无限的扩大，是可以通过参数`sort_buffer_size`控制的\n\n\n\n\n\n#### sort buffer有多大（内部排序和外部排序）\n\n通过参数`sort_buffer_size`控制的，默认是：262144（公司是：8388608）\n\nsort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。\n\n如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。 这叫做：`内部排序`\n\n但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。这叫做：`外部排序`\n\n\n\n内存放不下时，就需要使用外部排序，外部排序一般使用归并排序算法。\n\n可以这么简单理解，MySQL 将需要排序的数据分成 N 份，每一份单独排序后存在这些临时文件中。然后把这 N 个有序文件再合并成一个有序的大文件。\n\n\n\n内部排序：使用快速排序\n\n外部排序：使用归并排序\n\n\n\n#### 全字段排序\n\n\n\n示例数据\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `city` varchar(16) NOT NULL,\n  `name` varchar(16) NOT NULL,\n  `age` int(11) NOT NULL,\n  `addr` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `city` (`city`)\n) ENGINE=InnoDB;\n\n-- 初始化10条数据\n```\n\n当我们执行下面的查询语句的时候\n\n```sql\nselect city,name,age from t where city='杭州' order by name limit 1000  ;\n```\n\n它的排序执行流程如下：\n\n- 初始化 sort_buffer，确定放入 name、city、age 这三个字段；\n- 从索引 city 找到第一个满足 city='杭州’条件的主键 id；\n- 到主键 id 索引取出整行，取 name、city、age 三个字段的值，存入 sort_buffer 中\n- 从索引 city 取下一个记录的主键 id；\n- 重复步骤 3、4 直到 city 的值不满足查询条件为止；\n- 对 sort_buffer 中的数据按照字段 name 做快速排序；\n- 按照排序结果取前 1000 行返回给客户端。\n\n\n\n\n\n在上面这个过程里面，只对原表的数据读了一遍，剩下的操作都是在 sort_buffer 和临时文件中执行的。\n\n但这个算法有一个问题，就是如果查询要返回的字段很多的话，那么 sort_buffer 里面要放的字段数太多，这样内存里能够同时放下的行数很少，要分成很多个临时文件，排序的性能会很差。\n\n那么，如果 MySQL 认为排序的单行长度太大会怎么做呢？\n\n\n\n#### rowId排序\n\n如果 MySQL 认为排序的单行长度太大会怎么做呢？\n\n`max_length_for_sort_data`：是 MySQL 中专门控制用于排序的行数据的长度的一个参数。\n\n它的意思是，如果单行的长度超过这个值，MySQL 就认为单行太大，要换一个算法。\n\n\n\n示例数据\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `city` varchar(16) NOT NULL,\n  `name` varchar(16) NOT NULL,\n  `age` int(11) NOT NULL,\n  `addr` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `city` (`city`)\n) ENGINE=InnoDB;\n\n-- 初始化10条数据\n```\n\n当我们执行下面的查询语句的时候\n\n```sql\nselect city,name,age from t where city='杭州' order by name limit 1000  ;\n```\n\ncity、name、age 这三个字段的定义总长度是 36，我把 max_length_for_sort_data 设置为 16，我们再来看看计算过程有什么改变。\n\n```sql\nSET max_length_for_sort_data = 16;\n```\n\n新的算法放入 sort_buffer 的字段，只有要排序的列（即 name 字段）和主键 id。\n\n但这时，排序的结果就因为少了 city 和 age 字段的值，不能直接返回了，整个执行流程就变成如下所示的样子：\n\n- 初始化 sort_buffer，确定放入两个字段，即 name 和 id；\n- 从索引 city 找到第一个满足 city='杭州’条件的主键 id；\n- 到主键 id 索引取出整行，取 name、id 这两个字段，存入 sort_buffer 中；\n- 从索引 city 取下一个记录的主键 id；\n- 重复步骤 3、4 直到不满足 city='杭州’条件为止；\n- 对 sort_buffer 中的数据按照字段 name 进行排序；\n- 遍历排序结果，取前 1000 行，并按照 id 的值回到原表中取出 city、name 和 age 三个字段返回给客户端。\n\n\n\n#### 全字段排序 VS rowid 排序\n\n- MySQL 如果觉得排序内存太小，会影响排序效率，会采用 rowid 排序算法，这样排序过程中一次可以排序更多行，但是需要回表\n- MySQL 认为内存足够大，会优先选择全字段排序，把需要的字段都放到 sort_buffer 中，可以减少回表\n\n\n\n## 索引为什么不生效\n\n以下三种情况，都会影响索引的使用\n\n- 条件字段使用函数\n- 隐式类型转换\n- 隐式字符编码转换\n\n\n\n### 条件字段函数操作会影响索引\n\n```sql\n-- 查询创建时间是7月份的记录，created_time有索引\nselect * from t where month(created_time) = 7;\n```\n\n由于加了 month() 函数操作，created_time索引树里面，并不认识7，所以MySQL 无法再使用索引快速定位功能，而**只能使用全索引扫描**。\n\n```sql\nselect * from t where id + 1 = 5;\n```\n\n虽然这个加 1 操作并不会改变主键索引的有序性，但是 MySQL 优化器还是不能用 id 索引快速定位到 id=4 这一行。\n\n所以，需要你在写 SQL 语句的时候，手动改写成 where id = 5 -1 才可以。\n\n\n\n### 隐式类型转换\n\n这个坑，今天刚踩过，表里对于单号 order_no 有索引，order_no 字段是varchar类型，但是我的语句是这么写的\n\n```sql\nmysql> select * from t where order_no=110717;\n```\n\nexplain 的结果显示：这条语句需要走全表扫描\n\n因为：order_no 字段是varchar类型，而我的查询条件里用到的是整型。所以mysql会默认用到类型转换，**导致索引失效**\n\n**字符串和数字做比较的话，是将字符串转换成数字**；所以，上面那个语句等同于\n\n```sql\nmysql> select * from t where CAST(order_no signed int)=110717;\n```\n\n这也就明白了，为什么不会走索引了。\n\n然后考虑下面这个语句，会走主键索引吗\n\n```sql\nmysql> select * from t where id='11';\n```\n\n答案是：会走索引，因为：字符串和数字做比较的话，是将字符串转换成数字，所以没有对条件字段使用函数。索引不会失效\n\n\n\n### 隐式字符编码转换\n\n如果关联的两张表，使用的字符集不同的话，比如一个使用utf8，一个使用utf8mb4； 所以做表连接查询的时候用不上关联字段的索引。\n\n为什么字符集不一样，不能用索引呢？\n\n因为字符集 utf8mb4 是 utf8 的超集，所以当这两个类型的字符串在做比较的时候，MySQL 内部的操作是，先把 utf8 字符串转成 utf8mb4 字符集，再做比较。\n\n（自动类型转换的时候，为了避免数据在转换过程中由于截断导致数据错误，也都是“**按数据长度增加的方向**”进行转换的。）\n\n\n\n\n\n## InnoB的索引模型（B+树）\n\n\n\n### 复习B+树\n\n每一个索引在 InnoDB 里面对应一棵 B+ 树。在复习一下B+树\n\n下面是一个3阶的B+树的示意图：\n\n- 节点之间含有重复元素\n- 叶子节点还用指针连在一起\n\n<img src=\"mysql的索引从入门到入土.assets/image-20221219215758443.png\" alt=\"image-20221219215758443\" style=\"zoom:50%;\" />\n\n接下来：\n\n- 我们考虑各个索引在InnoDB中具体的B+树结构是什么样子的\n- 这些索引是怎么维护的（插入数据，删除数据，更新数据对索引的影响，页分裂，页合并）\n- 这些索引是怎么使用的（等值查询，范围查询）\n\n\n\n### 案例数据\n\n准备一张表：\n\n```sql\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL,\n  `name` varchar(16) NOT NULL,\n  `age` int(11) NOT NULL,\n  `city` varchar(16) NOT NULL,\n  `address` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `city` (`city`),\n  KEY `name_age`(`name`,`age`)\n) ENGINE=InnoDB;\n```\n\n- 表里有一个主键 id\n- 表里有一个普通索引 city\n- 表里有一个联合索引 name_age\n- 接下来，我们看看，不停的向表里写入数据，会发生什么\n\n\n\n**重要声明**：\n\n- 我们知道mysql的数据是按照 数据页 来进行存储的，对于索引来说，同样也是 数据页 存储的。\n- 一个数据页是 16KB，所以一个数据库能存放的元素是有限的。\n- 在测试的时候：我们假设\n  - `id`是 int 类型，占`4`个字节\n  - `name`是 varchar 类型，因为是不定长的，假设 name 不论写入什么，都占`8`个字节\n  - `age`是 int 类型，占`4`个字节\n  - `city`是 varchar 类型，因为是不定长的，假设 city 不论写入什么，都占`8`个字节\n  - `address`是 varchar 类型，因为是不定长的，假设 address 不论写入什么，都占`8`个字节\n- 正常情况下，一个数据页是16KB，我们这里假设，一个数据页只有：`36字节`\n  - 意味着：一个数据页最多能存9个id索引元素(4x9=36)；最多能存4个city索引元素(8x4=32)，最多能存3个 name_age 联合索引元素(12x3=36);\n\n\n\n### 主键索引\n\n\n\n我们上边介绍的`B+`树本身就是一个目录，或者说本身就是一个索引。它有两个特点：\n\n1. 使用记录主键值的大小进行记录和数据页的排序，这包括三个方面的含义：\n\n   - 数据页中的记录是按照主键的大小顺序排成一个单向链表。\n   - 各个 存放用户记录的数据页 也是 根据 数据页中用户记录的主键大小 顺序排成一个双向链表。\n   - 存放 目录项记录的数据页 分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。\n\n2. `B+`树的叶子节点存储的是完整的用户记录。\n\n   所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。\n\n我们把具有这两种特性的`B+`树称为`聚簇索引`，所有完整的用户记录都存放在这个`聚簇索引`的叶子节点处。这种`聚簇索引`并不需要我们在`MySQL`语句中显式的使用`INDEX`语句去创建（后边会介绍索引相关的语句），`InnoDB`存储引擎会自动的为我们创建聚簇索引。另外有趣的一点是，在`InnoDB`存储引擎中，`聚簇索引`就是数据的存储方式（所有的用户记录都存储在了`叶子节点`），也就是所谓的索引即数据，数据即索引。\n\n\n\n\n\n\n\n\n\n### 普通索引\n\n\n\n\n\n\n\n### 联合索引\n\n`B+`树按照`name`和`age`列的大小进行排序，这个包含两层含义：\n\n- 先把各个记录和页按照`name`列进行排序。\n- 在记录的`name`列相同的情况下，采用`age`列进行排序\n\n\n\n\n\n\n\n### 索引维护\n\n\n\n索引维护（更新，页分裂，页合并）\n\n为什么我们一般在建表的时候都会创建一个自增主键，及时表中有业务唯一的id，也会创建一个自增主键？\n\n1、因为主键只会自增，在B+树中一直都是往后写的，不会触发页分裂；但是如果删除过多的话，会触发页合并；\n\n2、要考虑业务唯一的id的长度，比如身份证号，如果用身份证号作为主键，比直接使用整型自增的主键占用的字节数要多，这样每一个页存放的数据就会少，每个页存的数据少了，这样查询的时候，效率就会低。 同时主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。\n\n3、所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。\n\n\n\n\n\n索引的页分裂和页合并是怎么导致的，会有什么影响？具体的分裂和合并的过程是什么样子的？\n\n\n\n为什么mysql的b+树，在非叶子节点中，也保留了双向列表\n\nhttps://www.zhihu.com/question/478187330/answer/2050494617\n\n\n\n\n\n","tags":["mysql","索引"],"categories":["JAVA","数据库","MYSQL"]},{"title":"单精度与双精度是什么意思，有什么区别？","url":"/note/JAVA/数据库/MYSQL/单精度与双精度是什么意思有什么区别/","content":"\n\n\n- 单精度是这样的格式：1位符号，8位指数，23位小数（总共占32位）\n- 所以在mysql中，float占用4个字节（32位）\n\n\n\n<img src=\"单精度与双精度是什么意思有什么区别.assets/image-20220902113054136.png\" alt=\"image-20220902113054136\" style=\"zoom:80%;\" />\n\n\n\n- 双精度是这样的格式：1位符号，11位指数，52位小数（总共占64位）\n- 所以在mysql中，double占用8个字节（64位）\n\n<img src=\"单精度与双精度是什么意思有什么区别.assets/image-20220902113110508.png\" alt=\"image-20220902113110508\" style=\"zoom:80%;\" />\n\n\n\n- 那请问单精度为什么叫单精度，精度代表的是什么？单和双针对的又是谁？\n\n根据IEEE754的规范，要表达的数字占32位是个基准，称为“单”，32位的整数倍即为“几倍精度”。所以还有“半精度”、“双精度”、“四倍精度”、“任意精度”等。\n\n<img src=\"https://pic1.zhimg.com/v2-08470f89b22d899d31b192cf67c78624.png\" alt=\"preview\" style=\"zoom:80%;\" />\n\n\n\n\n\n","tags":["mysql","单精度","双精度"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的连接查询","url":"/note/JAVA/数据库/MYSQL/mysql的连接查询/","content":"\n\n\n### 笛卡尔集\n\n对于两张表的连接，会造成笛卡尔乘积现象：\n\n假设表a有m行，表b有n行：则结果是m*n行。\n\n<img src=\"mysql的连接查询.assets/image-20220831204520815-16671893143504.png\" alt=\"image-20220831204520815\" style=\"zoom:80%;\" />\n\n对于上面的两张表，如果直接查询：\n\n```mysql\nselect name,boyName from beauty,boys; \n```\n\n则结果是：12 * 4 = 48行\n\n很显然不是我们想要的结果！\n\n\n\n那么怎么解决笛卡尔集呢\n\n\n\n通过添加连接条件，可以过滤掉笛卡尔集\n\n```mysql\nselect name,boyName from beauty,boys where beauty.boyfriend_id = boys.id;\n```\n\n\n\n### 隐式内连接-等值连接\n\nmysql的隐式内连接：在 SQL 语句中使用两个或多个表，通过 WHERE 条件筛选满足条件的行进行连接。此时，并没有使用 INNER JOIN 或 JOIN 等显式的连接操作符，因此也被称为隐式连接。虽然隐式连接在某些情况下可以简化 SQL 的编写，但是在实际使用中，建议使用显式连接方式，因为显式连接更加清晰易懂，同时对于复杂的连接查询有更好的可读性和可维护性。\n\n```mysql\n-- 语法\nSELECT 字段1, 字段2... FROM 表1,表2... WHERE 表1.xxx = 表2.xxx\n```\n\n原理：\n\n- 先从表1中拿出第一行的数据,然后匹配表2中的每一行记录，进行WHERE后面的判断\n- 满足判断：找到结果\n- 不满足判断：过滤掉，继续下一个\n\n特点\n\n- 等值连接，可以进行分组\n\n```sql\nselect COUNT(*) ,city from departments d, location l WHERE d.location_id = l.id GROUP BY city;\n```\n\n\n\n### 隐式内连接-非等值连接\n\nmysql的隐式内连接：在 SQL 语句中使用两个或多个表，通过 WHERE 条件筛选满足条件的行进行连接。此时，并没有使用 INNER JOIN 或 JOIN 等显式的连接操作符，因此也被称为隐式连接。虽然隐式连接在某些情况下可以简化 SQL 的编写，但是在实际使用中，建议使用显式连接方式，因为显式连接更加清晰易懂，同时对于复杂的连接查询有更好的可读性和可维护性。\n\n\n\n与等值连接的不同之处在于\n\n- 等值连接的WEHER中是使用 = 进行判断\n\n- 非等值连接，就是不使用 = 进行判断，比如 xxx > xxx，或者 xxx BETWEEN xxx and xxx\n\n```mysql\n-- 语法\nSELECT 字段1, 字段2 ... FROM 表1,表2... WHERE 判断条件\n-- 例子\nselect 员工表.员工工资, 工资等级表.工资等级 from 员工表, 工资等级表 WHERE 员工表.员工工资 BETWEEN 工资等级表.最低工资 AND 工资等级表.最高工资;\n```\n\n原理：\n\n- 就是拿到员工表的中的每一个员工的工资，去工资登记表中进行判断，是否满足WHERE条件后的判断：\n- 满足判断：找到结果\n- 不满足判断：过滤掉，继续下一个\n\n\n\n### 自连接\n\n自连接，简单地说，就是一张表，自己与自己进行连接.\n\n```mysql\nSELECT a.name AS '部门名', b.name AS '上级部门' FROM sys_department a ,sys_department b WHERE a.parent_id = b.id;\n```\n\n\n\n### 外连接-左外连接（LEFT  JOIN）\n\n- LEFT JOIN\n- LEFT OUTER JOIN\n- 只有形式不一样。left join 是 left outer join 的简写，两者含义一样的。\n- 左外连接 = 左表全部记录 + 右表相关联记录\n\n\n\n### 外连接-右外连接（RIGHT JOIN）\n\n- RIGHT JOIN\n- RIGHT OUTER JOIN\n- 有形式不一样。left join 是 left outer join 的简写，两者含义一样的。\n- 右外连接 = 右表全部记录 + 左表相关联记录\n\n\n\n### 外连接-全外连接（不支持）\n\n- mysql不支持全外连接。\n- 全外连接 = 【左有右没有的记录】 + 【右有左没有的记录】 + 【两张表的交集记录】\n\n\n\n### 内连接（JOIN / INNER JOIN）\n\n- JOIN\n- INNER JOIN\n- join 是 inner join 的缩写\n- 内连接 = 两张表的交集记录\n\n\n\n### 交叉连接（CROSS JOIN）\n\n- CROSS JOIN\n- 交叉连接 = 笛卡尔积\n\n\n\n### 总结\n\n<img src=\"mysql的连接查询.assets/image-20220831210715528-16671893143505.png\" alt=\"image-20220831210715528\" style=\"zoom:50%;\" />\n\n\n\n\n\n\n\n\n\n","tags":["mysql","join"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的学习网站","url":"/note/JAVA/数据库/MYSQL/mysql的学习网站/","content":"\n\n\n\n\n## 数据库内核报告\n\n http://mysql.taobao.org/monthly/\n\n<img src=\"mysql的学习网站.assets/image-20220901193533934.png\" alt=\"image-20220901193533934\" style=\"zoom:50%;\" />\n\n\n\n## mysql实战45讲\n\nhttps://time.geekbang.org/column/intro/100020801?tab=catalog\n\n<img src=\"mysql的学习网站.assets/image-20230509173139042.png\" alt=\"image-20230509173139042\" style=\"zoom:50%;\" />\n\n## mysql源码文档\n\nhttps://dev.mysql.com/doc/dev/mysql-server/latest/\n\n<img src=\"mysql的学习网站.assets/image-20230509173254393.png\" alt=\"image-20230509173254393\" style=\"zoom:50%;\" />\n\n## mysql4.7官方文档\n\nhttps://dev.mysql.com/doc/refman/5.7/en/\n\n<img src=\"mysql的学习网站.assets/image-20230509173325577.png\" alt=\"image-20230509173325577\" style=\"zoom: 33%;\" />\n","tags":["mysql","学习","网站"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql的日志从入门到入土","url":"/note/JAVA/数据库/MYSQL/mysql的日志从入门到入土/","content":"\n\n\n本文有xmind，配合xmind查看更加友好哦\n\n> 点击下载：[mysql日志从入门到入土.xmind](mysql的日志从入门到入土.assets/mysql日志从入门到入土.xmind)\n\n<img src=\"mysql的日志从入门到入土.assets/image-20230505191810589.png\" alt=\"image-20230505191810589\" style=\"zoom:80%;\" />\n\n\n\n## 一条更新语句的执行流程是什么（引入redolog和binlog）\n\n> update T set c=c+1 where ID=2;\n\nmysql的更新流程和SQL语句的基本执行链路是一样的：连接器->分析器->优化器->执行器->存储引擎\n\n<img src=\"mysql的日志从入门到入土.assets/image-20221012203451881.png\" alt=\"image-20221012203451881\" style=\"zoom: 80%;\" />\n\n\n\n通过连接器，先连接数据库。\n\n清空查询缓存：在一个表上有更新的时候，跟这个表有关的查询缓存会失效。这也就是我们一般不建议使用查询缓存的原因（在mysql8.0中，已经把查询缓存整个模块都删掉了）。\n\n分析器会通过词法和语法解析知道这是一条更新语句。\n\n优化器决定要使用哪个索引。\n\n执行器负责具体执行，找到这一行，然后更新。\n\n\n\n## 重要的日志模块（redolog和binlog）\n\n与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）\n\n\n\n### 什么是redolog\n\n作者举了《孔乙己》中一个赊账的例子，孔乙己来到酒店喝酒，老板会先把孔乙己的酒钱记录在一个粉板上，然后等不忙的时候，在累加到账本上。\n\n这里的粉板就是redolog，账本就是磁盘；\n\n\n\n考虑这个场景，当很多很多的人来喝酒的时候，老板一般有两种方式记账（当数据库更新一条记录的时候，一般有两种方式）：\n\n- 直接掏出账本，在账本上加加减减。（直接操作磁盘的数据，进行更新）\n- 另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算（先记录到redolog，等mysql空闲的时候，刷到磁盘）。\n\n\n\n在酒店生意红火的时候，老板一定选择后者，因为前者操作实在是太麻烦了。\n\n- 首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找。（磁盘的随机IO读）\n- 找到之后再拿出算盘计算，最后再将结果写回到账本上（磁盘的随机写）\n\n\n\n粉板（redolog）就完美的解决了这两个问题：\n\n- 首先说找记录：mysql的所有记录都是从数据页中查的，如果要更新的数据所在的数据页在内存中，可以直接找到，如果不在内存中，会先从磁盘把这个数据库加载到内存中。（这个步骤没法省，redolog优化的地方并不在于这里，这里会有**changebuffer**优化（后面说））\n- 找到记录之后，然后说更新记录：更新的结果是写到redolog中，而不是写到磁盘中，就避免了磁盘的随机IO，虽然redolog也是写到磁盘中的，但是由于组提交的存在，一次磁盘的写入是大量的顺序IO；（redolog是顺序写，并且可以组提交，还有别的一些优化，收益最大是是这两个因素；）\n\n\n\n### redo log有什么用\n\n有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 **crash-safe**。\n\n\n\n### 为什么要引入redolog\n\n因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，**binlog** 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。\n\nmysql要保证数据的持久性，保证持久性就需要将数据写到磁盘，但是写到磁盘的话，涉及到\n\n- 刷页，因为mysql所有的操作是针对数据页操作的，而一个简单的更新，可能就要刷整整一个数据页\n- 随机IO，一个事务所更新的涉及到的数据页可能不止一个，而且数据页可能不相连，就涉及到随机IO\n\n这俩问题，咋办呢？就引入了redolog，一个更新不刷页（先记录到redolog日志中），这样就避免了上面两个问题\n\n- redolog将随机IO改成了顺序IO，而且避免了每次更新都刷盘（刷盘也是要刷的，但是是组提交）\n\n\n\n### redolog的结构\n\nredolog是循环写的文件，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。\n\n<img src=\"mysql的日志从入门到入土.assets/image-20221027161923607.png\" alt=\"image-20221027161923607\" style=\"zoom: 50%;\" />\n\nwrite pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。\n\nwrite pos 和 checkpoint 之间的是还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。\n\n\n\n### redolog一般设置多大\n\nredo log 太小的话，会导致很快就被写满，然后不得不强行刷 redo log，这样 WAL 机制的能力就发挥不出来了。所以，如果是现在常见的几个 TB 的磁盘的话，就不要太小气了，直接将 redo log 设置为 4 个文件、每个文件 1GB 吧。\n\n- innodb_log_file_size：该参数指定了每个redo日志文件的大小，在MySQL 5.7.21这个版本中的默认值为48MB，\n- innodb_log_files_in_group：该参数指定redo日志文件的个数，默认值为2，最大值为100。\n\n\n\n\n\n### binlog是什么\n\n我们知道mysql是由两部分组成，server层和引擎层，上面介绍的redolog就是innodb引擎独有的日志，而MySQL的server层也有自己的日志，叫做binlog；\n\n为什么要有两个日志呢\n\n因为mysql在5.5版本之前，默认的存储引擎是MyISAM，但是MyISAM并没有**Crash-Safe**的能力，而server层自带的binlog又只有归档的能力，也不具备**Crash-Safe**的能力，所以才会有后来的innodb以插件的形式引入mysql中，作为mysql的引擎，并使用了redo log，实现了Crash-Safe的能力\n\n除了以上的原因，binlog和redolog还有其他的区别，解释了为什么存在两个日志\n\n- 这两个日志的使用方不一样：redolog是innodb引擎所特有的，只有innodb才能用；而binlog是mysql的server层有的，所有的引擎都可以使用；\n- 这两个日志记录的内容不一样：redolog是物理日志，记录的是在某个数据页上做了什么修改；而binlog是逻辑日志，简单的说就是sql语句。\n- 这两个日志的记录方式不一样：redolog是循环写，redolog文件写满了，会从头重新写；binlog是追加写；binlog文件写满了，会切割，在新文件中继续写\n\n\n\n### binlog有什么用\n\n主要是归档（归档之后可以用于数据恢复）和主从同步\n\n\n\n### binlog的结构\n\n#### binlog的存储目录\n\n在磁盘的上的结构，binlog默认是存放在**MySQL服务器的数据目录**下，（可以修改binlog的存放路径和binlog的文件名），如果你不知道数据目录是哪个，可以通过这个命令查看\n\n```sql\nmysql> show variables like '%datadir%';\n+---------------+---------------------------------------------+\n| Variable_name | Value                                       |\n+---------------+---------------------------------------------+\n| datadir       | C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\ |\n+---------------+---------------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n在数据目录下，你就可以看到binlog的文件，就像是这样，binlog是二进制文件，就像它的全名一样：binary log，所以是不能直接打开的：\n\n```sql\nxxx-bin.000001\nxxx-bin.000002\nxxx-bin.000003\nxxx-bin.000004\n...\n```\n\n除了真正存储binlog日志的文件外，MySQL服务器还会在相同的路径下生成一个关于binlog的索引文件，它的名称就是：\n\n```sql\nxxx-bin.index\n```\n\n这个索引文件是一个文本文件，我们可以直接打开：\n\n```mysql\nshell> cat xxx-bin.index\n./xxx-bin.000001\n./xxx-bin.000001\n./xxx-bin.000001\n./xxx-bin.000001\n```\n\n可以看到，这个索引文件只是简单的将各个binlog文件的路径存储了起来而已。\n\n\n\n#### 怎么查看binlog的格式\n\n下面的三种查看方式，前两个是一样的，都表示查看当前session的binlog格式；最后一个表示查看全局的binlog格式\n\n```sql\nmysql> show variables like '%binlog_format%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| binlog_format | ROW   |\n+---------------+-------+\n1 row in set, 1 warning (0.02 sec)\n\nmysql> show session variables like '%binlog_format%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| binlog_format | ROW   |\n+---------------+-------+\n1 row in set, 1 warning (0.02 sec)\n\nmysql> show global variables like '%binlog_format%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| binlog_format | ROW   |\n+---------------+-------+\n1 row in set, 1 warning (0.02 sec)\n```\n\n\n\n#### 怎么设置binlog的格式\n\n下面展示三种设置binlog的方式，前两个是一样的，设置当前session的binlog格式，重启后就失效了。最后一个表示设置全局的binlog格式，需要重启后才生效。\n\n```sql\nmysql> SET binlog_format = 'statement';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET session binlog_format = 'statement';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET global binlog_format = 'statement';\nQuery OK, 0 rows affected (0.00 sec)\n\n```\n\n\n\n\n\n#### binlog的三种格式\n\nbinlog 有两种格式，一种是 statement，一种是 row。可能你在其他资料上还会看到有第三种格式，叫作 mixed，其实它就是前两种格式的混合。\n\n下面看一下三种格式分别记录了什么？\n\n准备以下数据：\n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `a` int(11) DEFAULT NULL,\n  `t_modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  KEY `a` (`a`),\n  KEY `t_modified`(`t_modified`)\n) ENGINE=InnoDB;\n\ninsert into t values(1,1,'2018-11-13');\ninsert into t values(2,2,'2018-11-12');\ninsert into t values(3,3,'2018-11-11');\ninsert into t values(4,4,'2018-11-10');\ninsert into t values(5,5,'2018-11-09');\n```\n\n\n\n###### **statement**\n\n按照上面的方式，查看当前binlog的格式，并将当前会话的binlog的格式设置为：statement\n\n```sql\nmysql> show variables like '%binlog_format%';\n+---------------+-----------+\n| Variable_name | Value     |\n+---------------+-----------+\n| binlog_format | STATEMENT |\n+---------------+-----------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n\n\n执行以下语句\n\n```sql\nmysql> delete from t where a>=4 and t_modified<='2018-11-10' limit 1;\nQuery OK, 1 row affected (0.01 sec)\n```\n\n\n\n在查看binlog的内容之前，首先查看当前binlog写在了哪个文件上，因为binlog有很多个\n\n```sql\nmysql> show master status;\n+----------------+----------+--------------+------------------+-------------------+\n| File           | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+----------------+----------+--------------+------------------+-------------------+\n| xxx-bin.000002 |     7829 |              |                  |                   |\n+----------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n```\n\n然后查看binlog的内容（binlog很大，这里只截取了一部分）\n\n```sql\nmysql> show binlog events in 'xxx-bin.000002';\n+----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+\n| Log_name       | Pos  | Event_type     | Server_id | End_log_pos | Info                                                                      |\n+----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+\n| xxx-bin.000002 | 7489 | Anonymous_Gtid |         1 |        7568 | SET @@SESSION.GTID_NEXT= 'ANONYMOUS'                                      |\n| xxx-bin.000002 | 7568 | Query          |         1 |        7654 | BEGIN                                                                     |\n| xxx-bin.000002 | 7654 | Query          |         1 |        7798 | use `zs`; delete from t   where a>=4 and t_modified<='2018-11-10' limit 1 |\n| xxx-bin.000002 | 7798 | Xid            |         1 |        7829 | COMMIT /* xid=1840 */                                                     |\n+----------------+------+----------------+-----------+-------------+---------------------------------------------------------------------------+\n56 rows in set (0.00 sec)\n```\n\n内容解释\n\n| 行                                           | 含义                                                         |\n| -------------------------------------------- | ------------------------------------------------------------ |\n| 第一行：SET @@SESSION.GTID_NEXT= 'ANONYMOUS' | 主备切换用的，见《mysql主备从入门到入土》                    |\n| 第二行：BEGIN                                | 跟第四行的 commit 对应，表示中间是一个事务                   |\n| 第三行                                       | 是真实执行的语句了。可以看到，在真实执行的 delete 命令之前，还有一个“use ‘zs’”命令。这条命令是 MySQL 根据当前要操作的表所在的数据库，自行添加的。这样做可以保证日志传到备库去执行的时候，不论当前的工作线程在哪个库里，都能够正确地更新到 test 库的表 t。use 'zs’命令之后的 delete 语句，就是我们输入的 SQL 原文了。 |\n| 第四行：COMMIT /* xid=1840 */                | 你可以看到里面写着 xid=1840,xid是崩溃恢复的时候，和redolog关联，用来校验binlog完整性的 |\n\n- 使用mysqlbinlog工具，可以查看到更加具体的内容\n\n```mysql\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin>mysqlbinlog.exe  -vv \"C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\SF0001408876LA-bin.000002\" --start-position=7829 --stop-position=8126\n# The proper term is pseudo_replica_mode, but we use this compatibility alias\n# to make the statement usable on server versions 8.0.24 and older.\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n# at 156\n#221101 14:12:06 server id 1  end_log_pos 125 CRC32 0xe443eab6  Start: binlog v 4, server v 8.0.26 created 221101 14:12:06 at startup\n# Warning: this binlog is either in use or was not closed properly.\nROLLBACK/*!*/;\nBINLOG '\ntrhgYw8BAAAAeQAAAH0AAAABAAQAOC4wLjI2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAC2uGBjEwANAAgAAAAABAAEAAAAYQAEGggAAAAICAgCAAAACgoKKioAEjQA\nCigBtupD5A==\n'/*!*/;\n# at 7829\n#221108 17:42:32 server id 1  end_log_pos 7908 CRC32 0x816102e0         Anonymous_GTID  last_committed=26       sequence_number=27      rbr_only=no     original_committed_timestamp=1667900553012960   immediate_commit_timestamp=1667900553012960  transaction_length=327\n# original_commit_timestamp=1667900553012960 (2022-11-08 17:42:33.012960 中国标准时间)\n# immediate_commit_timestamp=1667900553012960 (2022-11-08 17:42:33.012960 中国标准时间)\n/*!80001 SET @@session.original_commit_timestamp=1667900553012960*//*!*/;\n/*!80014 SET @@session.original_server_version=80026*//*!*/;\n/*!80014 SET @@session.immediate_server_version=80026*//*!*/;\nSET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;\n# at 7908\n#221108 17:42:32 server id 1  end_log_pos 7986 CRC32 0x08dd3003         Query   thread_id=18    exec_time=1     error_code=0\nSET TIMESTAMP=1667900552/*!*/;\nSET @@session.pseudo_thread_id=18/*!*/;\nSET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;\nSET @@session.sql_mode=1075838976/*!*/;\nSET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;\n/*!\\C utf8mb4 *//*!*/;\nSET @@session.character_set_client=255,@@session.collation_connection=255,@@session.collation_server=255/*!*/;\nSET @@session.lc_time_names=0/*!*/;\nSET @@session.collation_database=DEFAULT/*!*/;\n/*!80011 SET @@session.default_collation_for_utf8mb4=255*//*!*/;\nBEGIN\n/*!*/;\n# at 7986\n#221108 17:42:32 server id 1  end_log_pos 8125 CRC32 0x8d364776         Query   thread_id=18    exec_time=1     error_code=0\nuse `zs`/*!*/;\nSET TIMESTAMP=1667900552/*!*/;\n/* ApplicationName=DataGrip 2021.1.2 */ delete from t where id = 3\n/*!*/;\n# at 8125\n#221108 17:42:32 server id 1  end_log_pos 8156 CRC32 0x9959b790         Xid = 2011\nCOMMIT/*!*/;\nSET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;\nDELIMITER ;\n# End of log file\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n```\n\n\n\n###### **row**\n\n先将测试数据复原，重新导入\n\n按照上面的方式，查看当前binlog的格式，并将当前会话的binlog的格式设置为：row\n\n```sql\nmysql> show variables like '%binlog_format%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| binlog_format | ROW   |\n+---------------+-------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n执行以下语句\n\n```sql\nmysql> delete from t where a>=4 and t_modified<='2018-11-10' limit 1;\nQuery OK, 1 row affected (0.01 sec)\n```\n\n在查看binlog的内容之前，首先查看当前binlog写在了哪个文件上，因为binlog有很多个\n\n```sql\nmysql> show master status;\n+----------------+----------+--------------+------------------+-------------------+\n| File           | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+----------------+----------+--------------+------------------+-------------------+\n| xxx-bin.000002 |     7829 |              |                  |                   |\n+----------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n```\n\n然后查看binlog的内容（binlog很大，这里只截取了一部分）\n\n```sql\nmysql> show binlog events in 'xxx-bin.000002';\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n| Log_name       | Pos  | Event_type     | Server_id | End_log_pos | Info                                 |\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n| xxx-bin.000002 | 5043 | Anonymous_Gtid |         1 |        5122 | SET @@SESSION.GTID_NEXT= 'ANONYMOUS' |\n| xxx-bin.000002 | 5122 | Query          |         1 |        5203 | BEGIN                                |\n| xxx-bin.000002 | 5203 | Table_map      |         1 |        5251 | table_id: 169 (zs.t)                 |\n| xxx-bin.000002 | 5251 | Delete_rows    |         1 |        5299 | table_id: 169 flags: STMT_END_F      |\n| xxx-bin.000002 | 5299 | Xid            |         1 |        5330 | COMMIT /* xid=1924 */                |\n+----------------+------+----------------+-----------+-------------+--------------------------------------+\n74 rows in set (0.00 sec)\n```\n\n内容解释\n\n| 行                                           | 含义                                                         |\n| -------------------------------------------- | ------------------------------------------------------------ |\n| 第一行：SET @@SESSION.GTID_NEXT= 'ANONYMOUS' | 主备切换用的，见《mysql主备从入门到入土》                    |\n| 第二行：BEGIN                                | 跟第五行的 commit 对应，表示中间是一个事务                   |\n| 第三行：                                     | 在statement格式中，记录的是sql原文，在row格式下，记录的是两个event：Table_map和Delete_rows这两个动作 |\n| 第四行：                                     | Table_map表示要操作哪个数据库的那张表； Delete_rows表示删除一行，具体的内容，这里看不到，需要借助mysqlbinlog工具来看 |\n| 第五行：COMMIT /* xid=1924 */                | 你可以看到里面写着 xid=1924 ,xid是崩溃恢复的时候，和redolog关联，用来校验binlog完整性的 |\n\n在第四行中，我们看不到具体的内容，所以需要通过mysqlbinlog工具来看\n\nmysqlbinlog是啥，就是一个可以执行的工具，在windows系统下，这个工具在mysql的安装目录下，叫：mysqlbinlog.exe\n\n因为我现在用的windows，所以就用windows来展示了\n\n```sh\nC:\\Users>cd C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\n\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin>dir\n 驱动器 C 中的卷是 系统\n 卷的序列号是 0003-57E7\n\n C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin 的目录\n\n2022/11/01  14:10    <DIR>          .\n2022/11/01  14:10    <DIR>          ..\n2021/07/01  02:12         xxxxxxxxx xxxxxxxx（因为文件太多了，所以我这里就是省略了）\n2021/07/01  02:12         6,960,408 mysql.exe\n2021/07/01  02:12         6,854,952 mysqladmin.exe\n2021/07/01  02:12         7,168,808 mysqlbinlog.exe\n              48 个文件    270,259,595 字节\n               2 个目录 24,862,003,200 可用字节\n```\n\n可以看到在bin目录下，有一个工具叫做：mysqlbinlog.exe\n\n然后我们在`C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin`这个目录下运行下面的命令\n\n```sh\nmysqlbinlog.exe  -vv \"C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\SF0001408876LA-bin.000002\" --start-position=5043 --stop-position=5300\n```\n\n- `-vv`表示verbose，啰嗦模式，为了把内容都解析出来，所以从结果里面可以看到各个字段的值（比如，@1=4、 @2=4 这些值）。\n- `--start-position`表示binlog的开始位置，值哪里来的，来自于`show binlog events in 'xxx-bin.000002'`结果的pos字段\n- `--stop-position`表示binlog的结束位置，值哪里来的，来自于`show binlog events in 'xxx-bin.000002'`结果的pos字段，写大一点，要不然不包括进来（比如我的pos=5299，但是我这里写的是5300）\n\n运行结果如下（结果还挺长的，删掉了一些，只列出比较重要的几个内容）\n\n```sh\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin>mysqlbinlog.exe  -vv \"C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\SF0001408876LA-bin.000002\" --start-position=5043 --stop-position=5300\n# at 5043\n#221101 15:21:11 server id 1  end_log_pos 5122 CRC32 0x72f668e7         Anonymous_GTID  last_committed=17       sequence_number=18      rbr_only=yes    original_committed_timestamp=1667287271257812   immediate_commit_timestamp=1667287271257812  transaction_length=287\nSET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;\n# at 5122\n#221101 15:21:11 server id 1  end_log_pos 5203 CRC32 0xe3288066         Query   thread_id=11    exec_time=0     error_code=0\nSET TIMESTAMP=1667287271/*!*/;\nSET @@session.pseudo_thread_id=11/*!*/;\nSET @@session.sql_mode=1075838976/*!*/;\nBEGIN\n/*!*/;\n# at 5203\n#221101 15:21:11 server id 1  end_log_pos 5251 CRC32 0x613f3131         Table_map: `zs`.`t` mapped to number 169\n# at 5251\n#221101 15:21:11 server id 1  end_log_pos 5299 CRC32 0x75141201         Delete_rows: table id 169 flags: STMT_END_F\n\nBINLOG '\n58hgYxMBAAAAMAAAAIMUAAAAAKkAAAAAAAEAAnpzAAF0AAMDAxEBAAIBAQAxMT9h\n58hgYyABAAAAMAAAALMUAAAAAKkAAAAAAAEAAgAD/wAEAAAABAAAAFvlrwABEhR1\n'/*!*/;\n### DELETE FROM `zs`.`t`\n### WHERE\n###   @1=4 /* INT meta=0 nullable=0 is_null=0 */\n###   @2=4 /* INT meta=0 nullable=1 is_null=0 */\n###   @3=1541779200 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */\n# at 5299\n#221101 15:21:11 server id 1  end_log_pos 5330 CRC32 0xc30d2901         Xid = 1924\nCOMMIT/*!*/;\nSET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;\nDELIMITER ;\n# End of log file\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n```\n\n- `server id 1`表示这个事务是在 server_id=1 的这个库上执行的。\n- `CRC32 0xc30d2901`每个 event 都有 CRC32 的值，这是因为我把参数 binlog_checksum 设置成了 CRC32。\n\n  - 可以通过`show variables like '%binlog_checksum%';` 查看binlog_checksum 的值\n- `SET TIMESTAMP=1667287271/*!*/;`当前sql执行的时间戳，在主备同步的时候，如果有延迟，而sql中又使用了日期函数的话，容易导致主备不一致，所以mysql在binlog中，保存了每个sql执行的时间，这样主备同步的时候，日期函数就不会出问题了。\n- `@1=4 /* INT meta=0 nullable=0 is_null=0 */`\n- `@2=4 /* INT meta=0 nullable=1 is_null=0 */`\n- `@3=1541779200 /* TIMESTAMP(0) meta=0 nullable=0 is_null=0 */`\n- 上面这三行，表示被删掉的这条记录的原始的值。为什么会记录的这么详细？因为我们开启了记录全部信息\n\n```sql\nmysql> show variables like '%binlog_row_image%';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| binlog_row_image | FULL  |\n+------------------+-------+\n1 row in set, 1 warning (0.02 sec)\n```\n\n- 如果把`binlog_row_image`设置为：MINIMAL，就不会记录的这么详细的，只会记录一个id而已。\n- 最后的 Xid event，用于表示事务被正确地提交了。\n\n\n\n###### **mix**\n\nmix格式的binlog其实就是statement和row格式的结合。\n\n对于statement来说，容易导致主备同步不一致的问题，比如主备上索引选择不一致的话，就会导致主备不一致；\n\n对于row来说，如果删除的数据很多，row会把删掉的每一条记录都记下来，占用磁盘IO，浪费空间。\n\n所以就诞生了mix格式\n\n在binlog_format=mix格式下，mysql会自己判断，如果当前语句存在数据不一致的风险，就会采用row格式，否则采用statement格式；\n\n但是mix格式下，因为是mysql自己判断的，这些判断逻辑在实际环境中，可能会出现不可预知的问题。\n\n所以：一般都是直接使用 ROW 格式\n\n\n\n在公司的生产环境，使用的binlog格式是：ROW\n\n```sql\n-- 查看binlog的格式\nshow variables like 'binlog_format';\n```\n\n\n\n### undo log是什么\n\nundo log 是 MVCC实现的基础，关于undo log的详细内容，请参考：[mysql的事务从入门到入土](mysql的事务从入门到入土)\n\n\n\n\n\n## mysql的WAL机制\n\nWAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。\n\nWAL 机制是减少磁盘写，可是每次提交事务都要写 redo log 和 binlog，这磁盘读写次数也没变少呀？\n\n现在你就能理解了，WAL 机制主要得益于两个方面：\n\n- redo log 和 binlog 都是顺序写，磁盘的顺序写比随机写速度要快；\n- 组提交机制，可以大幅度降低磁盘的 IOPS 消耗。怎么降低的呢？[点我去看：组提交（双1配置，LSN）](#组提交（双1配置，LSN）)\n\n## 日志的写入流程（二阶段提交）\n\n\n\n### redolog和binlog的整体写入流程（二阶段提交）\n\n```mermaid\nsequenceDiagram\nclient->>server:更新ID=2这一行\nserver->>innodb:获取ID=2这一行\ninnodb->>innodb:ID=2这一行是否在内存页中\ninnodb->>server:在内存中，直接返回ID=2的行数据\ninnodb->>disk:不在内存中<br/>从磁盘中加载ID=2这一行的数据页\ndisk->>innodb:返回ID=2所在的数据页\ninnodb->>server:返回ID=2的行数据\nserver->>server:对ID=2的数据，进行更新操作\nserver->>innodb:写入更新后的数据\ninnodb->>innodb:更新内存\ninnodb->>innodb:记录redolog，处于prepare状态\ninnodb->>server:更新成功\nserver->>server:记录binlog\nserver->>innodb:提交事务\ninnodb->>innodb:redolog提交，处于commit状态\ninnodb->>server:更新完成\nserver->>client:更新完成\n\n\n```\n\n#### 为什么要有两阶段提交（反证法）\n\n为什么必须要有两阶段提交呢？我们知道两阶段提交是为了保证分布式事务的数据一致性的， 那么mysql是要保证什么数据的一致性。\n\n很显然：是为了保证redolog和binlog的数据一致性\n\n那么为什么要保证redolog和binlog的数据一致性呢？这就涉及到redolog和binlog的作用是什么呢？对！是为了崩溃恢复。\n\n那么我们看看没有两阶段提交会怎么样？\n\n1、**先写redolog后写binlog**。假设redolog写完了，binlog没写完，mysql崩了。重启之后，因为redolog完整，数据恢复；但是binlog不完整， binlog 里面就没有记录这个语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库恢复出来数据与原库的值不同。 另外主备一致也是通过binlog同步的，binlog不完整，备库的数据就不对了。\n\n2、**先写binlog后写redolog**。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以数据不变。但是 binlog 里面已经记录了数据变更的日志。所以，在之后用 binlog 来恢复的时候数据与原库的值不同。\n\n\n\n### redolog的写入流程\n\n```mermaid\nsequenceDiagram\ninnodb->>innodb:dml成功\\n更新内存\\n开始记录redolog\ninnodb->>redologbuffer:redolog记录到内存中\nredologbuffer->>pagecache:写入到文件系统的pagecache中(write)\npagecache->>disk:持久化到磁盘文件(fsync)\n```\n\n我们看到redolog写盘是有三步的，先写redologbuffer，在write到pagecache中，在fsync到disk中；\n\n那么问题来了，这三步，对于mysql来说，究竟哪一步才算做redolog写入成功了呢？\n\n是写到redologbuffer就行了，还是必须要fsync之后才行呢？\n\n其实这是通过一个参数配置的：innodb_flush_log_at_trx_commit\n\n- 当innodb_flush_log_at_trx_commit=0的时候，表示每次事务提交都只留在redologbuffer中；\n- 当innodb_flush_log_at_trx_commit=1的时候，表示每次事务提交都会fsync持久化到磁盘中；\n- 当innodb_flush_log_at_trx_commit=2的时候，表示每次事务提交都只是write到文件系统的pagecache中；\n\n公司的生产环境，配置的是：innodb_flush_log_at_trx_commit = 1\n\n```sql\n-- redolog的刷盘配置\nshow variables like 'innodb_flush_log_at_trx_commit';\n```\n\n\n\nredologbuffer有多大？超过了怎么办呢？\n\n- redologbuffer有多大是通过innodb_log_buffer_size来控制的。show viriables like 'innodb_log_buffer_size'\n- 超过了怎么办？不会超过的，为什么呢？\n  - 当redologbuffer中存的内容超过innodb_log_buffer_size一半的时候，就会触发write到文件系统的pagecache中\n  - 所以不会超过的。\n\n\n\n### binlog的写入流程\n\n```mermaid\nsequenceDiagram\ninnodb->>server:当dml成功\\n此时redolog处于prepare状态\nserver->>server:开始记录binlog\nserver->>binlogcache:将binlog记录到binlogcache中\nbinlogcache->>binlogcache:binlog cache\\n是在内存中的\\n每个线程私有的\nbinlogcache->>pagecache:将binlog写入到操作系统的pagecache中（write）\npagecache->>disk:数据持久化到磁盘（fsync）\\n这一步占用IOPS\n```\n\n我们看到binlog写盘是有三步的，先写binlogcache，在write到pagecache中，在fsync到disk中；\n\n那么问题来了，这三步，对于mysql来说，究竟哪一步才算做binlog写入成功了呢？\n\n是写到binlogcache就行了，还是必须要fsync之后才行呢？\n\n其实这是通过一个参数配置的：sync_binlog\n\n- sync_binlog=0的时候，表示每次事务提交都只write，不fsync\n- sync_binlog=1的时候，表示每次事务提交都会执行fsync\n- sync_binlog=N（N>1）的时候，表示累计到N个事务之后，才fsync\n\n公司的生产环境，配置的是：sync_binlog = 1\n\n```sql\n-- binlog的刷盘配置\nshow variables like 'sync_binlog';\n```\n\n\n\nbinlogcache有多大呢？超过了怎么办呢？\n\n- show viriables like 'binlog_cache_size'；表示单个线程内 binlog cache 所占内存的大小\n- 超过了会刷盘，但是并不是写到binlog文件中，而是暂存到磁盘中，写在临时文件中；\n\n为什么binlogcache是线程私有的？\n\n- 因为一个线程是一个事务，我们要保证一个事务的binlog是完整的，中间不能插入其他的binlog，所以binlogcache是线程私有的\n\n\n\n### redolog和binlog的刷盘时机\n\n**redolog的刷盘时机**\n\n考虑一个极端的情况，当我们把innodb_flash_log_at_trx_commit设置为0的时候，此时redolog只会写到redologbuffer（redologbuffer是在mysql的内存中的），那么什么时候刷盘呢？\n\n- 刷盘时机1：InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。\n- 刷盘时机2：当redologbuffer中的内容占用超过redolog_buffer_size大小的一半时候，后台线程会主动写盘\n- 刷盘时机3：当并行的其他事务提交的时候，会将redologbuffer中的所有内容都刷盘；\n  - 对于时机3：不能将innodb_flash_log_at_trx_commit配置设置为0，因为这个时候，事务提交的时候不会刷盘\n  - 对于时机3：可能会把进行汇总的事务的redolog进行刷盘，会有问题吗？\n    - 不会，这个和崩溃恢复的流程有关。此时redolog是prepare阶段的，要想恢复的话，还得去找binlog呢。\n\n**binlog的刷盘时机**\n\nbinlog会有刷盘时机吗？sync_binlog不管设置成多少，都至少保证了binlog会写到文件系统的pagecache中，接下来就是操作系统的范畴了。\n\n详细的说，binlog的刷盘是在 “二阶段三步骤” 的第二步骤 sync state 中\n\n\n\n### 在两阶段提交的不同时刻，MySQL 异常重启会出现什么现象。\n\n在讨论这个问题的时候，简化一下二阶段提交，只看最基本的情况。\n\n```mermaid\ngraph TD;\nid1([写入binlog处于prepare阶段])--时刻A-->id2([写binlog]);\nid2--时刻B-->id3([提交事务处于comit阶段])\n\n```\n\n\n\n**时刻A**\n\n就是写入 redo log 处于 prepare 阶段之后、写 binlog 之前，发生了崩溃（crash）由于此时 binlog 还没写，redo log 也还没提交，所以崩溃恢复的时候，这个事务会回滚。这时候，binlog 还没写，所以也不会传到备库。到这里，大家都可以理解。\n\n**时刻B**\n\n就是 binlog 写完，redo log 还没 commit 前发生 crash，那崩溃恢复的时候 MySQL 会怎么处理呢？\n\n- 如果 redo log 里面的事务是完整的，也就是已经有了 commit 标识，则直接提交；\n- 如果 redo log 里面的事务只有完整的 prepare，则判断对应的事务 binlog 是否存在并完整：\n  - a. 如果是，则提交事务；\n  - b. 否则，回滚事务。\n\n\n\n## 组提交（双1配置，LSN）\n\n\n\nmysql5.7关于组提交的源码：[点我跳转到github](https://github.com/mysql/mysql-server/blob/5.7/sql/binlog.cc)\n\nmysql8.0关于组提交的源码：[点我跳转到github](https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc)\n\n关于组提交，这篇文章是我见过讲的最好的一篇：https://zhuanlan.zhihu.com/p/567154450\n\n这篇文章里面有一些图，可以帮助更好的理解：https://blog.51cto.com/u_15080021/2642167\n\n还有这一篇，也挺不错的：[mysql - MySQL 2PC & Group Commit](https://segmentfault.com/a/1190000014810628)\n\n### 双1配置\n\n我们看到mysql默认会把innodb_flash_log_at_trx_commit设置为1，sync_binlog设置为1，这就是通常我们所说的 MySQL 的**“ 双 1 ”配置**。\n\n也就是说，一个事务完整提交前，需要等待两次刷盘，一次是 redo log（prepare 阶段），一次是 binlog。\n\n那么问题来了，如果mysql的TPS是2万，也就意味着每秒要写4万次磁盘，但是单独测试磁盘的IOPS，也就在2万左右，怎么能承受住mysql的2万的TPS呢？\n\n这个时候就用到了组提交（group commit）\n\n### 日志逻辑序列号（LSN）\n\n在介绍组提交之前，需要先了解日志逻辑序列号（log sequence number）LSN\n\n#### 什么是LSN\n\n- 每一个redolog的生成，都伴随着LSN的生成\n- LSN是单调递增的\n- LSN是用来对应redolog的一个一个的写入点（write pos）\n- 每当写入长度为length的redolog，LSN的值就会加上length\n\n#### flushed_to_disk_lsn\n\n已经刷到磁盘的LSN\n\n系统第一次启动时，该变量的值和初始的`lsn`值是相同的。随着系统的运行，`redo`日志被不断写入`log buffer`，但是并不会立即刷新到磁盘，`lsn`的值就和`flushed_to_disk_lsn`的值拉开了差距。\n\n如果两者的值相同时，说明log buffer中的所有redo日志都已经刷新到磁盘中了。\n\n#### current_flush_lsn\n\n当前正在刷的LSN\n\n#### LSN有什么用\n\n- 减少redolog组提交时候的刷盘次数，减少磁盘IO（看后面的组提交有详细的说明）\n\n### 组提交\n\n简单的记忆就是：两个阶段，三个步骤\n\n经过 5.6/5.7/8.0 的逐步优化，两阶段提交的逻辑优化为：\n\n- Prepare 阶段：只是将`redolog`写入`pagecache`（并不刷盘）。\n- Commit 阶段按步骤做流水线批处理，拆为三个步骤：\n  - flush stage：`redo log` 刷盘（多个事务 `redo log`合并刷盘），按事务进入的顺序将 `binlog`  写入`pagecache`（并不刷盘）。\n  - sync stage：对 binlog 刷盘（多个事务的 binlog 合并刷盘）。\n  - commit stage：各个线程按顺序做 InnoDB commit 操作。\n\n三个步骤（stage）中，每个 stage 一个队列，第一个进入该队列的线程成为 leader，后续进入的线程会作为follower，并且一直阻塞直至leader完成提交（sql语句会阻塞）。leader 线程会领导队列中的所有线程执行该 stage 的任务，并带领所有 follower 进入到下一个 stage 去执行，当遇到下一个 stage 队列不为空的时候，leader 会变成 follower 注册到此队列中。\n\n\n\n```mermaid\nsequenceDiagram\nserver->>innodb:更新数据\nnote left of innodb:第一阶段\ninnodb->>innodb:记录redolog\ninnodb->>pagecache:redolog write 事务处于prepare\npagecache->>innodb:write 成功\ninnodb->>server:redolog prepare 成功\nnote left of innodb:第二阶段第一步骤\npagecache->>disk:redolog刷盘(【组提交】)\nserver->>server:记录binlog\nserver->>pagecache:binlog写到文件系统的cache\npagecache->>server:binlog 成功\nnote left of disk:第二阶段第二步骤\npagecache->>disk:binlog刷盘（【组提交】）\nnote left of innodb:第二阶段第三步骤\nserver->>innodb:提交事务\ninnodb->>innodb:事务处于commit\ninnodb->>server:更新完成\n```\n\n#### 第二阶段的第一步骤中，是先写binlog还是先刷redolog？\n\n我看了mysql5.7的源码，其实是先刷的redolog，但是mysql45讲说的是先写binlog，在刷redolog。（老师讲错了）\n\nmysql5.7关于组提交的源码：[点我跳转到github](https://github.com/mysql/mysql-server/blob/5.7/sql/binlog.cc)\n\nmysql8.0关于组提交的源码：[点我跳转到github](https://github.com/mysql/mysql-server/blob/8.0/sql/binlog.cc)\n\n第二步骤的第一阶段（就是FLASH_STAGE）的代码如下（mysql5.7）\n\n```c\n\n/**\n  Execute the flush stage.\n  @param total_bytes_var Pointer to variable that will be set to total\n  number of bytes flushed, or NULL.\n  @param rotate_var Pointer to variable that will be set to true if\n  binlog rotation should be performed after releasing locks. If rotate\n  is not necessary, the variable will not be touched.\n  @return Error code on error, zero on success\n */\n\nint\nMYSQL_BIN_LOG::process_flush_stage_queue(my_off_t *total_bytes_var,\n                                         bool *rotate_var,\n                                         THD **out_queue_var)\n{\n  DBUG_ENTER(\"MYSQL_BIN_LOG::process_flush_stage_queue\");\n  #ifndef NDEBUG\n  // number of flushes per group.\n  int no_flushes= 0;\n  #endif\n  assert(total_bytes_var && rotate_var && out_queue_var);\n  my_off_t total_bytes= 0;\n  int flush_error= 1;\n  mysql_mutex_assert_owner(&LOCK_log);\n\n  /*\n    Fetch the entire flush queue and empty it, so that the next batch\n    has a leader. We must do this before invoking ha_flush_logs(...)\n    for guaranteeing to flush prepared records of transactions before\n    flushing them to binary log, which is required by crash recovery.\n  */\n  THD *first_seen= stage_manager.fetch_queue_for(Stage_manager::FLUSH_STAGE);\n  assert(first_seen != NULL);\n  /*\n    We flush prepared records of transactions to the log of storage\n    engine (for example, InnoDB redo log) in a group right before\n    flushing them to binary log. \n    这段注释表示，在写binlog之前需要先把redolog刷盘\n    ha_flush_logs(NULL, true);这个方法就是对redolog刷盘\n  */\n  ha_flush_logs(NULL, true);\n  DBUG_EXECUTE_IF(\"crash_after_flush_engine_log\", DBUG_SUICIDE(););\n  assign_automatic_gtids_to_flush_group(first_seen);\n  /* \n  \tFlush thread caches to binary log. \n  \t这段注释表示，开始 write binlog【这里不明白的是，为什么也叫flush？】\n  */\n  for (THD *head= first_seen ; head ; head = head->next_to_commit)\n  {\n    std::pair<int,my_off_t> result= flush_thread_caches(head);\n    total_bytes+= result.second;\n    if (flush_error == 1)\n      flush_error= result.first;\n#ifndef NDEBUG\n    no_flushes++;\n#endif\n  }\n\n  *out_queue_var= first_seen;\n  *total_bytes_var= total_bytes;\n  if (total_bytes > 0 && my_b_tell(&log_file) >= (my_off_t) max_size)\n    *rotate_var= true;\n#ifndef NDEBUG\n  DBUG_PRINT(\"info\",(\"no_flushes:= %d\", no_flushes));\n  no_flushes= 0;\n#endif\n  DBUG_RETURN(flush_error);\n}\n\n```\n\n\n\n#### 组提交“组”在了哪里\n\n在第二阶段的第一步骤中，redolog进行了组提交刷盘\n\n在第二阶段的第二步骤中，binlog进行组提交刷盘\n\n那么具体是怎么“`组`”提交的呢？\n\n1、在第一阶段，事务线程不停地，刷刷刷的进来，写redolog，此时只写到pagecache中；\n\n2、在第二阶段的第一步骤中，有一个队列，假设叫【队列-1】，\n\n- 当前线程会先把【队列-1】清空，以便下一批有一个leader\n- 当前线程中直接对redolog进行刷盘。ha_flush_logs(NULL, true);\n- 第一个进来的线程作为leader，后续的线程作为follower，进入【队列-1】（也就是说队列-1和刷redolog并没有啥关系）\n\n3、redolog刷盘完成之后，leader对【队列-1】中的事务线程，进行循环，write binlog\n\n4、write bin完成之后，【队列-1】的leader进入第二阶段的第二步骤，会进入到【队列-2】\n\n5、在第二阶段的第二步骤中，【队列-2】的leader会等待（受**binlog_group_commit_sync_delay** 和 **binlog_group_commit_sync_no_delay_count**控制）\n\n6、等待之后，【队列-2】的leader开始对binlog进行刷盘（因为等待了一段时间，所以binlog这里也是组提交）\n\n7、fsync binlog之后，【队列-2】的leader进入第二阶段的第三步骤，会进入到【队列-3】\n\n8、【队列-3】的leader会按照串行化的方式，循环，一个一个的对事务线程进行COMMIT\n\n\n\n#### 组提交和LSN有啥关系\n\n首先明确：\n\n- 在innodb中，每条redolog都有自己的LSN，这是一个单调递增的值。\n- 每个事务的更新操作都会包含一条或者**多条**redo log\n- 各个事务在将redo log写入 redo log buffer (通过log_mutex保护)时，都会获取**当前事务**最大的LSN。\n\n在组提交的第二阶段的第一步骤中，redolog会被组提交刷盘，组提交刷盘的时候，会有下面的流程\n\n那么假设三个事务 tx1, tx2, tx3的最大LSN分别为 100 , 200 , 300  时，他们同时进行提交，如果tx3获取到了 log_mutex 互斥锁, 那么他会将小于 300 之前的redo log一起落盘，同时记录  **flushed_to_disk_lsn**=300， 这样 tx1, tx2不用再次请求磁盘io。\n\n同时，如果存在 tx0 的 LSN0 < 300，LSN0 也会落盘，即使tx0还没有提交。然后当tx0的事务开始提交的时候，发现redolog已经刷盘了（ flushed_to_disk_lsn >= lsn），就直接返回了，节省了时间。\n\n1. 获取 log mutex互斥锁\n2. 如果 flushed_to_disk_lsn >= lsn, 表示日志已经被刷盘，跳转 5 后进入等待状态\n3. 如果 current_flush_lsn >= lsn, 表示日志正在刷盘中，跳转 5 后进入等待状态\n4. 将小于 lsn 的日志刷盘 (sync)\n5. 释放 log_mutex互斥锁\n\n\n\n\n\n## mysql的崩溃恢复Crash-Safe能力（重要作用）\n\n\n\n### 崩溃恢复的具体步骤\n\n1、mysql崩溃重启后，进行恢复\n\n2、判断redolog的状态，如果redolog=commit，直接提交事务\n\n3、如果redolog=prepare，则通过xid去找binlog\n\n4、binlog存在，并且binlog是完整的，提交事务\n\n5、binlog不存在，或者binlog存在，但是不完整，回滚事务\n\n\n\n### MySQL 怎么知道 binlog 是完整的\n\n回答：一个事务的 binlog 是有完整格式的：\n\n- statement 格式的 binlog，最后会有 COMMIT；\n- row 格式的 binlog，最后会有一个 XID event。\n\n另外，在 MySQL 5.6.2 版本以后，还引入了 binlog-checksum 参数，用来验证 binlog 内容的正确性。对于 binlog 日志由于磁盘原因，可能会在日志中间出错的情况，MySQL 可以通过校验 checksum 的结果来发现。所以，MySQL 还是有办法验证事务 binlog 的完整性的。\n\n可以通过下面的命令查看`binlog-checksum`的值\n\n```sql\nmysql> show variables like '%binlog_checksum%';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| binlog_checksum | CRC32 |\n+-----------------+-------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n这是`mysql 8.0`版本的默认值，就是CRC32，它有什么用呢，在ROW格式下的binlog，通过`mysqlbinlog`工具可以看到具体的内容\n\n```sh\n............省略\n# at 5299\n#221101 15:21:11 server id 1  end_log_pos 5330 CRC32 0xc30d2901         Xid = 1824\n............省略\n```\n\n这个`CRC32 0xc30d2901`内容就是CRC32的值，用来校验binlog的完整性。\n\n\n\n### redo log 和 binlog 是怎么关联起来的\n\n它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：\n\n- 如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；\n- 如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。\n\n\n\n### 如果只有binlog可以Crash-Safe吗？\n\n不行，因为binlog是逻辑日志，binlog写完了，并不保证数据一定在磁盘中。\n\n在崩溃恢复的时候，顺序扫描binlog，发现日志是完整的，那么此时要执行这个binlog吗？\n\n- 执行：如果数据已经写到了磁盘，又执行一遍，那数据就不对了呀。\n- 不执行：如果数据没写到磁盘，不执行，数据就少了呀。\n\n综上，只用binlog是不可以的。\n\n\n\n\n\n### 如果只有redolog可以Crash-Safe吗？\n\n如果只从崩溃恢复的角度来讲是可以的。你可以把 binlog 关掉，这样就没有两阶段提交了，但系统依然是 crash-safe 的。\n\n但是呢，redolog是循环写的，所以只用redolog，mysql虽然可以crash-safe，但是不具备归档的能力了。\n\n\n\n## 刷脏页\n\n### 正常运行中的实例，数据写入后的最终落盘，是从 redo log 更新过来的还是从 buffer pool 更新过来的呢？\n\n这里涉及到了，“redo log 里面到底是什么”的问题。\n\n实际上，redo log 并没有记录数据页的完整数据，所以它并没有能力自己去更新磁盘数据页，也就不存在“数据最终落盘，是由 redo log 更新过去”的情况。\n\n- 如果是正常运行的实例的话，数据页被修改以后，跟磁盘的数据页不一致，称为脏页。最终数据落盘，就是把**内存中的数据页**写盘。这个过程，甚至与 redo log 毫无关系。\n- 在崩溃恢复场景中，InnoDB 如果判断到一个数据页可能在崩溃恢复的时候丢失了更新，就会将这个数据页加载到内存中，然后让 redo log 更新内存中的数据页内容。更新完成后，内存页变成脏页，就回到了第一种情况的状态。\n- 在正常运行的实例中，change buffer中的数据也会定期merge到**内存中的数据页**中，然后刷盘\n- 猜测\n  - 正常运行的实例：是 change buffer --> 内存中的数据页 --> 刷盘；\n  - 崩溃恢复的场景：此时change buffer都没了。 所以是：redolog --> 内存中的数据页 --> 刷盘\n\n\n\n\n## changebuffer（对更新的优化，对比redolog）\n\n### changebuffer的更新流程\n\n每一次更新都必须从内存中（不在内存中，就要从磁盘中load）获取到要更新的这一行吗？\n\n- 不是的；\n- 在mysql5.5之前，changebuffer叫做insert buffer，仅支持插入，在5.5之后，叫change buffer，支持了更新和删除；\n- changebuffer只有普通索引才能用到，因为唯一索引要判定记录是否存在，所以查询一定要的\n\n```mermaid\nsequenceDiagram\nclient->>server:执行dml语句\nserver->>innodb:要执行dml语句\ninnodb->>innodb:判断要执行的语句\\n是否在内存中\ninnodb->>cache:在内存中，直接操作内存\ncache->>innodb:操作完成，返回\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\ninnodb->>changebuffer:不在内存中，记录到change buffer\nchangebuffer->>innodb:操作完成，返回\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\nnote over client,disk:记录到缓存中，什么时候刷到磁盘呢？\nchangebuffer->>disk:后台线程定时刷\nchangebuffer->>disk:changebuffer不足时\nchangebuffer->>disk:数据库正常关闭时\nchangebuffer->>disk:redolog写满时\\n（此时数据库不可用）\nnote over client,disk:记录在缓存中，查询的时候怎么办\nclient->>server:请求查询某一条记录\nserver->>innodb:查询某一条记录\ninnodb->>innodb:判断要查询的语句\\n是否在内存中\ncache->>innodb:在内存中，直接返回\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\ndisk->>cache:不在内存中，从disk加载到内存中\ncache->>innodb:获取内存中的这一条记录\ninnodb->>innodb:判断这一条记录是否有更新\ninnodb->>server:没有更新\\n操作完成，返回\nchangebuffer->>innodb:有更新，应用changebuffer的更新\\n这一步叫merge\ninnodb->>cache:将更新后的记录先记录到内存页中\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\n\n```\n\n### 普通索引和唯一索引的更新流程\n\n在普通索引的更新流程（可以用changebuffer）\n\n```mermaid\nsequenceDiagram\nclient->server:执行dml语句\nserver->>innodb:要执行dml语句\ninnodb->>innodb:判断要执行的语句\\n是否在内存中\ninnodb->>cache:在内存中，直接操作内存\ncache->>innodb:操作完成，返回\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\ninnodb->>changebuffer:不在内存中，记录到change buffer\nchangebuffer->>innodb:操作完成，返回\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\n\n```\n\n在唯一索引的更新流程（不可以用changebuffer）\n\n```mermaid\nsequenceDiagram\nclient->server:执行dml语句\nserver->>innodb:要执行dml语句\ninnodb->>innodb:判断要执行的语句\\n是否在内存中\ninnodb->>cache:在内存中，直接操作内存\ncache->>innodb:操作完成，返回\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\ninnodb->>disk:不在内存中，从磁盘中加载到内存\ndisk->>cache:从磁盘中加载到内存\ncache->>innodb:操作完成，返回\ninnodb->>server:操作完成，返回\nserver->>client:操作完成\n```\n\n\n\n### change buffer 和 redo log\n\nredo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。\n\n\n\n\n\n## 一些简单的问题\n\n执行一个 update 语句以后，我再去执行 hexdump 命令直接查看 ibd 文件内容，为什么没有看到数据有改变呢？\n\n\n\n为什么 binlog cache 是线程私有的，而 redo log buffer 是全局共用的？\n\n\n\n事务执行期间，还没到提交阶段，如果发生 crash 的话，redo log 肯定丢了，这会不会导致主备不一致呢？\n\n\n\n如果 binlog 写完盘以后发生 crash，这时候还没给客户端答复就重启了。等客户端再重连进来，发现事务已经提交成功了，这是不是 bug？\n\n","tags":["mysql","binlog","redolog"],"categories":["JAVA","数据库","MYSQL"]},{"title":"mysql如何给大表加索引OnlineDDL","url":"/note/JAVA/数据库/MYSQL/mysql给大表加索引OnlineDDL/","content":"\n\n\n\n\n给大表加索引、加字段属于DDL（数据定义语言）操作，任何对MySQL大表的DDL操作都值得警惕，不然很可能会引起锁表，报错`Waiting for meta data lock`，造成业务崩溃。那么如何对大表进行加索引操作？\n\n\n\n## 早期DDL原理\n\n\n\n再谈如何对加大表加索引前，先谈一下MySQL DDL操作为什么会锁表？对于这个问题，需要先了解一下MySQL5.6.7之前的早期DDL原理。\n\n早期DDL操作分为`copy table`和`inplace`两种方式。\n\n### copy table 方式\n\n1. 创建与原表相同的**临时表**，并在临时表上执行DDL语句\n2. **锁原表，不允许DML（数据操作语言），允许查询**\n3. 将原表中数据逐行拷贝至临时表（过程没有排序）\n4. 原表升级锁，禁止读写，即原表暂停服务\n5. rename操作，将临时表重命名原表\n\n### inplace 方式\n\nfast index creation，仅支持索引的创建跟删除\n\n1. 创建**frm**（表结构定义文件）临时文件\n2. **锁原表，不允许DML（数据操作语言），允许查询**\n3. 根据聚集索引顺序构建新的索引项，按照顺序插入新的索引页\n4. 原表升级锁，禁止读写，即原表暂停服务\n5. rename操作，替换原表的frm文件\n\n\n\n### copy方式  VS inplace 方式？\n\ninplace 方式相对于 copy 方式来说，inplace 不会生成临时表，不会发生数据拷贝，所以**减少了I/O资源占用**。\n\ninplace 只适用于**索引的创建与删除**，不适用于其他类的DDL语句。\n\n不论是早期copy还是早期inplace方式的DDL，都会进行**锁表操作，不允许DML操作，仅允许查询**。\n\n知道了DDL的机制，下面就了解一下“如何对大表进行加索引操作”！\n\n\n\n## 方案一：“影子策略”\n\n\n\n此方法来自《高性能MySQL》一书中的方案。\n\n### 方案思路\n\n1. 创建一张与原表（tb）结构相同的新表（tb_new）\n2. 在新表上创建索引\n3. 重命名原表为其他表名（tb => tb_tmp），新表重命名为原表名（tb_new => tb），此时新表（tb）承担业务\n4. 为原表（tb_tmp）新增索引\n5. 交换表，新表改回最初的名称（tb => tb_new），原表改回最初的名称（tb_tmp => tb），原表（tb）重新承担业务\n6. 把新表数据导入原表（即把新表承担业务期间产生的数据和到原表中）\n\n### 如何实践\n\nSQL实现：\n\n```sql\n# 以下sql对应上面六步\n\ncreate table tb_new like tb;\n\nalter table tb_new add index idx_col_name (col_name);\n\nrename table tb to tb_tmp, tb_new to tb;\n\nalter table tb_tmp add index idx_col_name (col_name);\n\nrename table tb to tb_new, tb_tmp => tb;\n\ninsert into tb (col_name1, col_name2) select col_name1, col_name2 from tb_new;\n```\n\n### 有哪些问题\n\n步骤3之后，新表改为原表名后（tb）开始承担业务，步骤3到结束之前这段时间的新产生的数据都是存在新表中的，但是如果有业务对老数据进行修改或删除操作，那将无法实现，所以步骤3到结束这段时间可能会产生数据（更新和删除）丢失。\n\n\n\n## 方案二：pt-online-schema-change\n\nPERCONA提供若干维护MySQL的小工具，其中 pt-online-schema-change（简称pt-osc）便可用来相对安全地对大表进行DDL操作。\n\npt-online-schema-change 方案利用三个触发器（DELETE \\ UPDATE \\ INSERT触发器）解决了“影子策略”存在的问题，让新老表数据同步时发生的数据变动也能得到同步。\n\n### 工作原理\n\n1. 创建一张与原表结构相同的新表\n2. 对新表进行DDL操作（如加索引）\n3. 在原表上创建3个触发器（DELETE\\UPDATE\\INSERT），用来原表复制到新表时（步骤4）的数据改动时的同步\n4. 将原表数据以数据块（chunk）的形式复制到新表\n5. 表交换，原表重命名为old表，新表重命名原表名\n6. 删除旧表，删除触发器\n\n### 如何使用\n\n见[使用 pt-online-schema-change 工具不锁表在线修改 MySQL 表结构](https://link.segmentfault.com/?enc=LZyogq6Wt0yUIXj9hpxKBw%3D%3D.mTz7mGjIRe%2BqR0GQwjJJbmtqPnn6lrupLe5wCR%2FIfh53ZSk4VgqnepCKNNljhT7ZB7O05511WulBpY8nkzJzgQ5naGBmq5SEkORgF1Gherdcemq6mzYwFFWwOCZsjHDu3xySOppPU4%2Fa7DEPqjky2ZHYHysFX9DSq%2FMBxf%2B28uE%3D)一文\n\n### 问题疑惑\n\n见[pt-online-schema-change的原理解析与应用说明-问题解答](https://link.segmentfault.com/?enc=vdd59uzwtDTSyc6GGmW28g%3D%3D.GmAUReMDuDxsUXZZAz4TtsBNrADSH0I%2F7ue01BhFOnLOdi5ov0BegypEZQNbysVYFPaVXcTD2ShJmVMAT3L4bA%3D%3D)\n\n\n\n## 方案三：ONLINE DDL\n\nMySQL5.6.7 之前由于DDL实现机制的局限性，常用“影子策略”和 pt-online-schema-change 方案进行DDL操作，保证相对安全性。在 MySQL5.6.7 版本中新推出了 Online DDL 特性，支持“无锁”DDL。5.7版本已趋于成熟，所以在5.7之后可以直接利用 ONLINE DDL特性。\n\n对于 ONLINE DDL 下的 inplace 方式，分为了 `rebuild table` 和 `no-rebuild table`。\n\n\n\n### Online DDL执行阶段\n\n大致可分为三个阶段：初始化、执行和提交\n\n#### Initialization阶段\n\n此阶段会使用MDL读锁，禁止其他并发线程修改表结构\n服务器将考虑存储引擎能力、语句中指定的操作以及用户指定的ALGORITHM 和 LOCK选项，确定操作期间允许的并发数\n\n#### Execution阶段\n\n此阶段分为两个步骤 Prepared and Executed\n此阶段是否需要MDL写锁取决于Initialization阶段评估的因素，如果需要MDL写锁的话，仅在Prepared过程会短暂的使用MDL写锁\n其中最耗时的是Excuted过程\n\n#### Commit Table Definition阶段\n\n此阶段会将MDL读锁升级到MDL写锁，此阶段一般较快，因此独占锁的时间也较短\n用新的表定义替换旧的表定义(如果rebuild table)\n\n### ONLINE DDL 过程\n\n1. 获取对应要操作表的 MDL（metadata lock）写锁\n2. MDL写锁 降级成 MDL读锁\n3. 真正做DDL操作\n4. MDL读锁 升级成 MDL写锁\n5. 释放MDL锁\n\n在第3步时，DDL操作时是不会进行锁表的，可以进行DML操作。但可能在拿DML写锁时锁住，见文章[MySQL · 源码阅读 · 白话Online DDL](https://link.segmentfault.com/?enc=yKSiYtlA%2B%2FDHBQARytIswA%3D%3D.NUd8BeocCVMVlmgOSLJOnJqrdCy9I5PIEfxDJPad8PVd%2FSgo7PKv6xKNLtLSHj4Y)\n\n\n\n\n\n\n\n\n\n\n\n","tags":["mysql","索引"],"categories":["JAVA","数据库","MYSQL"]},{"title":"kafka从入门到入土","url":"/note/JAVA/MQ/KAFKA/kafka从入门到入土/","content":"\n\n\n## 基本概念\n\n\n\n### 名词术语\n\n消息：`Record`。Kafka 是消息引擎嘛，这里的消息就是指 Kafka 处理的主要对象。\n\n主题：`Topic`。Topic 是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。\n\n分区：`Partition`。是一个物理概念，可以理解为一个有序不变的消息序列。每个 Topic 下可以有多个 Partition。\n\n分区位移：`Offset`。表示 Partition 中每条消息的位置信息，这个值是存在消息中的，是一个单调递增且不变的值。\n\n副本：`Replica`。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的`Replica`副本。`Replica`还分为`Leader Replica`和`Follower Replica`，各自有不同的角色划分。`Replica`是在`Partition`层级下的，即每个`Partition`可配置多个`Replica`实现高可用。\n\n生产者：`Producer`。向`Topic`发布新消息的应用程序。\n\n消费者：`Consumer`。从`Topic`订阅新消息的应用程序。\n\n消费者位移：`Consumer Offset`。表示`Consumer`的消费进度，每个`Consumer`都有自己的`Consumer Offset`。\n\n消费者组：`Consumer Group`。多个`Consumer`实例共同组成的一个组`Group`，同时消费多个`Partition`以实现高吞吐。\n\n重平衡：`Rebalance`。`Consumer Group`内某个`Consumer`实例挂掉后，其他`Consumer`实例自动重新分配订阅`Topic Partiton`的过程。`Rebalance` 是 Kafka 消费端实现高可用的重要手段。\n\n<img src=\"kafka从入门到入土.assets/58c35d3ab0921bf0476e3ba14069d291.jpg\" alt=\"img\" style=\"zoom: 20%;\" />\n\n\n\n### 三层消息架构\n\n- 第一层：主题层`Topic`\n  - 每个`Topic`可以配置`M`的`Partition`，而每个`Partition`又可以配置`N`个`Replica`\n- 第二层：分区层`Partition`\n  - 每个`Partition`下的`N`个`Replica`中，只能有一个充当`Leader Replica`，`Leader Replica`负责对外提供服务；\n  - 剩下的`N-1`个`Replica`，都是作为`Follower Replica`，`Follower Replica`只是作为数据冗余，不对外提供服务；\n- 第三层：消息层\n  - 每个`Partition`中包含若干消息，每个消息的`Offset`（注意不是`Consumer Offset`）都是从0开始，依次递增；\n\n\n\n### 数据持久化（Log）\n\n`kafka`使用消息日志`Log`来保存数据，一个`Log`就是磁盘上一个只能追加写消息的物理文件。\n\n一个`Log`包含了多个日志段`Log Segment`，消息其实是被追加写到最新的`Log Segment`中的；\n\n当写满一个`Log Segment`的时候，会自动切分一个新的`Log Segment`中，老的`Log Segment`就会被封存；\n\n`kafka`会有一个定时任务，定期检查老的`Log Segment`是否能够被删除，从而释放磁盘空间；\n\n\n\n### 两种消息模型\n\n点对点`peer to peer`\n\n- 同一个消息只能被下游的一个`Consumer`消费；\n- kafka实现点对点，用到的是`Consumer Group`的概念\n\n发布订阅模型`pub/sub`\n\n- 我们常用到的其实就是这种发布订阅模型\n\n\n\n## 发展历史和定位\n\n\n\nkakka既是一个消息引擎系统，同时又是一个分布式流处理平台；\n\n\n\n### 发展历史\n\n- 是`Linkedln`公司内部的孵化项目。\n- `Linkedln`一开始是有 数据强实时性处理方面的需求，用了`activeMq`，但不理想，所以准备自己搞一套。\n- `Kafka` 自诞生伊始是以**消息引擎系统**的面目出现在大众视野中的。如果翻看 `0.10.0.0` 之前的官网说明，你会发现 `Kafka` 社区将其清晰地定位为一个分布式、分区化且带备份功能的提交日志`Commit Log`服务。\n- `Kafka`在设计之初提供三个方面的特性：\n  - 提供一套 API 实现`Producer`和`Consumer`；\n  - 降低网络传输和磁盘存储开销；\n  - 实现高伸缩性架构。\n\n- 后来用的人越来越多，`kafka`思考引入了流处理；\n- `Kafka` 社区于 `0.10.0.0` 版本正式推出了流处理组件 `Kafka Streams`，也正是从这个版本开始，`Kafka` 正式“变身”为分布式的流处理平台，而不仅仅是消息引擎系统了。\n\n\n\n### 与其他的流处理框架的优点\n\n- 第一点是更容易实现端到端的正确性`Correctness`\n- `kafka`自己对于流式计算的定位\n\n\n\n### 定位\n\n- 消息引擎系统\n- 流处理平台\n- 分布式存储系统（很少）\n\n\n\n## kafka版本\n\n### 发行版本\n\n`kafka`存在多个不同的发行版本，类似`linux`系统中的`centos`，`redhat`，`ununtu`等；\n\n| 类型                  | 描述                                                         | 优点                                                         | 缺点                                                         | 选择                                                         |\n| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| apache kafka          | Apache Kafka 是最“正宗”的 Kafka，是我们学习和使用 Kafka 的基础。 | 优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度 | 缺陷在于仅提供基础核心组件，缺失一些高级的特性。             | 如果你仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，那么我推荐你使用 Apache Kafka。 |\n| Confluent Kafka       | Confluent 公司：2014 年，Kafka 的 3 个创始人 Jay Kreps、Naha Narkhede 和饶军离开 LinkedIn 创办了 Confluent 公司，专注于提供基于 Kafka 的企业级流处理解决方案。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。 | 优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证； | 缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。 | 如果你需要用到 Kafka 的一些高级特性，那么推荐你使用 Confluent Kafka。 |\n| CDH Kafka / HDP Kafka | Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理，不管是 CDH 还是 HDP 里面都集成了 Apache Kafka，因此我把这两款产品中的 Kafka 称为 CDH Kafka 和 HDP Kafka。 | 操作简单，节省运维成本                                       | 把控度低，演进速度较慢。                                     | 如果你需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。 |\n\n\n\n### 版本号\n\n\n\n在官网上下载 `Kafka` 时，会看到这样的版本：\n\n<img src=\"kafka从入门到入土.assets/c10df9e6f72126e9c721fba38e27ac23.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n有些人会误将`Scala`版本看作是`Kafka`版本，那么就来解释一下这个版本号\n\n- `2.11/2.12`：代表着`Kafka`源代码的`Scala`编译器版本\n\n- `2.3.0`：才是Kafka的版本号，`2`代表着大版本号；`3`代表着小版本号；`0`代表着修订版本号或补丁\n\n\n\nKafka目前经历了7个大版本，0.7、0.8、0.9、0.10、0.11、1.0和2.0，其中小版本与Patch版本很多就不一一列举\n\n在上面的7个大版本中，在哪个版本进行了重大的改进，来好好看一下\n\n<img src=\"kafka从入门到入土.assets/Kafka版本变迁.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n#### 0.7版本\n\n这是个“上古”版本，只提供了基础的消息队列功能，还没有提供副本机制\n\n#### 0.8版本\n\n正式引入了副本机制，能够比较好地做到消息无丢失，新版本Producer API不稳定\n\n#### 0.9版本\n\n添加了基础的安全认证/权限；新版本Producer API在这个版本中算比较稳定，但是0.9版的Consumer API BUG超多，即使提到社区也不会有人管，所以千万别用！\n\n#### 0.10版本\n\n是里程碑式的大版本，因为该版本引入了Kafka Streams，但还不能生产大规模部署使用，自0.10.2.2版本起，新版本Consumer API算是比较稳定了\n\n#### 0.11版本\n\n引入了两个重量级的功能变更：一个是提供幂等性Producer API以及事务（Transaction） API；另一个是对Kafka消息格式做了重构\n\nProducer实现幂等性以及支持事务都是Kafka实现流处理结果正确性的基石，由于刚推出，事务API有一些Bug，另外事务API主要是为Kafka Streams应用服务的，不建议用\n\n这个版本中各个大功能组件都变得非常稳定了，国内该版本的用户也很多，应该算是目前最主流的版本之一了\n\n如果你对1.0版本是否适用于线上环境依然感到困惑，那么至少将你的环境升级到0.11.0.3，因为这个版本的消息引擎功能已经非常完善了\n\n#### 1.0/2.0版本\n\n合并说下1.0和2.0版本吧，因为这两个大版本主要还是Kafka Streams的各种改进，在消息引擎方面并未引入太多的重大功能特性\n\nKafka Streams的确在这两个版本有着非常大的变化，也必须承认Kafka Streams目前依然还在积极地发展着，如果你是Kafka Streams的用户，至少选择2.0.0版本吧\n\n#### 建议\n\n不论你用的是哪个版本，都请尽量保持服务器端版本和客户端版本一致，否则你将损失很多Kafka为你提供的性能优化收益\n\n\n\n## kafka生产集群部署\n\n上面了解了kafka的基本概念之后，下面看一下kafka的生产部署，需要怎么部署\n\n同时在本小节之后，我们会搭建一个简单的kafka集群，用于后续的学习\n\nkafka的集群搭建需要考虑一下几个因素\n\n| 因素     | 考量点                                  | 建议                                                         |\n| -------- | --------------------------------------- | ------------------------------------------------------------ |\n| 操作系统 | 操作系统的IO模型                        | 将kafka部署在linux上                                         |\n| 磁盘     | 磁盘的IO性能                            | 普通环境使用机械硬盘，不需要搭建RAID                         |\n| 磁盘容量 | 根据消息数，留存时间预估磁盘容量        | 实际使用中磁盘预留20%~30%的空间                              |\n| 带宽     | 根据实际带宽资源和业务SLA预估服务器数量 | 对于千兆网络，建议每台服务器按照700Mbps来计算，避免大流量下的丢包 |\n\n\n\n### 操作系统的选择\n\n操作系统：Windows，Linux，MacOs\n\n选择：Linux\n\n为什么：\n\n- IO模型的使用\n- 网络传输效率\n- 社区支持度\n\n#### IO模型的使用\n\n- 阻塞IO\n- 非阻塞IO\n- IO多路复用\n- 信号驱动IO\n- 异步IO\n\n每种IO都有自己的典型使用场景，比如：\n\n- Java中的Socket对象的阻塞模式和非阻塞模式就是对应前两种\n- Linux系统的select函数就属于IO多路复用\n- 大名鼎鼎的epoll介入第三种和第四种之间\n- 第五种模型，目前很少有Linux支持，然而Windos却在操作系统中提供了叫IOCP线程模型属于第五种\n\n说完了IO模型，再来看kafka与IO模型的关系\n\n- kafka的底层使用的是java的selector\n  - java的selector在linux上的实现机制是：epoll\n  - 而在windos上的实现机制是：select（IO多路复用）\n- 所以，将kafka部署在linux机器上，更有优势\n\n\n\n#### 网络传输效率\n\nkafka的消息是通过网络传输的，而消息又是保存在磁盘中的，所以kafka非常依赖网络和磁盘的性能；\n\n而linux恰巧有零拷贝（Zero copy）技术，就是当数据在磁盘和网络进行传输的时候，避免昂贵的的内核态数据拷贝从而实现数据的高速传输；\n\n而windos要到java8的60更新版本才有这个功能；\n\n\n\n#### 社区的支持度\n\n社区对于windos版的bug不做承诺，基本不会修复；\n\n\n\n### 磁盘的选择\n\n- 选择机械磁盘：kafka多为顺序读写，规避了机械磁盘的弊端，替换成SSD，效益不大\n- 不用组RAID：kafka在软件层面通过分区副本保证了高可用，基本不需要磁盘组RAID\n\n\n\n### 磁盘容量的选择\n\n- 磁盘容量：kafka的日志有保留时间的概念，根据具体的业务量，消息大小，计算好容量；\n\n  - 新增消息量\n\n  - 消息留存时间\n\n  - 平均消息大小\n\n  - 备份数\n\n  - 是否启用压缩（压缩比）\n\n\n\n### 带宽的选择\n\n目前公司普遍的带宽配置都是千兆网（每秒处理1G数据），财大气粗的公司会有万兆网（每秒处理10G数据）；\n\n假设你公司的机房环境是千兆网络，即 1Gbps，现在你有个业务，其业务目标或 SLA 是在 1 小时内处理 1TB 的业务数据。那么问题来了，你到底需要多少台 Kafka 服务器来完成这个业务呢？\n\n千兆网络下，单台机器，假设kafka占用70%的带宽（总要为其他进程保留一些资源），稍等，这只是它能使用的最大带宽资源，你不能让 Kafka 服务器常规性使用这么多资源，故通常要再额外预留出 2/3 的资源，即单台服务器使用带宽 700Mb / 3 ≈ 240Mbps。有了 240Mbps，我们就可以计算 1 小时内处理 1TB 数据所需的服务器数量了。根据这个目标，我们每秒需要处理 2336Mb 的数据，除以 240，约等于 10 台服务器。如果消息还需要额外复制两份，那么总的服务器台数还要乘以 3，即 30 台。\n\n\n\n\n\n## 重要的集群参数配置\n\n\n\n参数配置分为四个方面：\n\n- broker端参数配置\n- topic的参数配置\n- JVM的参数配置\n- 操作系统的参数配置\n\n\n\n### broker端参数（静态参数）\n\n静态参数是指修改后需要重启才能生效的参数；\n\n是配置在 kafka安装的这个机器上的。通过静态的配置文件配置的。\n\n\n\n#### 存储信息类参数\n\n表示 Broker 使用哪些磁盘\n\n| 参数     | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| log.dirs | 【没有默认值的，必须手动指定】指定Broker需要使用的若干个文件目录路径，可配置多个 |\n| log.dir  | 【一般不用设置，新版本已经取消了】只能配置一个，用来补充上面参数的 |\n\n\n\n#### 与ZK相关的参数\n\nZK负责协调管理并保存 Kafka 集群的所有元数据信息，比如集群都有哪些 Broker 在运行、创建了哪些 Topic，每个 Topic 都有多少分区以及这些分区的 Leader 副本都在哪些机器上等信息\n\n| 参数              | 描述                                          |\n| ----------------- | --------------------------------------------- |\n| zookeeper.connect | 负责协调管理并保存 Kafka 集群的所有元数据信息 |\n\n\n\n#### broker连接相关的参数\n\n表示客户端程序或其他 Broker 如何与该 Broker 进行通信的设置\n\n| 参数                 | 描述                                                         |\n| -------------------- | ------------------------------------------------------------ |\n| listeners            | 告诉外部连接需要通过什么协议访问指定主机名和端口开放的kafka服务（用于内网访问） |\n| Advertised.listeners | 表明这组监听器是broker对外发布的（用于外网访问）             |\n| host.name/port       | 这俩参数是过期参数，忘掉                                     |\n\n\n\n#### topic管理的参数\n\n\n\n| 参数                           | 描述                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| auto.create.topics.enable      | 是否允许自动创建topic，<br />建议设置成false；               |\n| unclean.leader.election.enable | 是否允许Unclean Leader选举，<br />建议设置为false；<br />kafka的分区有多个副本，并不是所有的副本都有资格竞争Leader，只有保存数据比较多的才有资格；那如果保存数据比较多的副本全都挂了，那还要不要竞选Leader呢？ 就是这个参数控制的；<br />false表示不竞选，后果：分区不可用；<br />true表示竞选；后果：数据不一致； |\n| auto.leader.rebalance.enable   | 是否允许定期进行Leader选举；true表示到达一定条件，kafka会自动把leader换了，注意是换掉，而不是选举；即使原来的leaderA运行的好好地，也会给换成leaderB；换leader的代价很大，建议设置为false； |\n\n\n\n#### 数据留存方面的参数\n\n| 参数                              | 描述                                 |\n| --------------------------------- | ------------------------------------ |\n| log.retention.{hour\\|minutes\\|ms} | 控制一条消息被保留多长时间           |\n| log.retention.bytes               | Broker为保留消息提供的磁盘容量的大小 |\n| message.max.bytes                 | 控制Broker能够接收的最大的消息大小   |\n\n\n\n### Topic的参数配置\n\ntopic端的参数配置会覆盖broker端的参数配置\n\nTopic 端的参数是在创建Topic的时候，手动设置的。[怎么修改topic的参数配置](#怎么修改topic的参数配置)\n\n\n\n#### 数据留存方面的参数\n\n| 参数              | 描述                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| retention.ms      | 规定了该topic下数据的保存时长，默认7天，如果配置了，就会覆盖broker端的配置 |\n| retention.bytes   | 规定了要为该topic预留多少磁盘容量空间                        |\n| max.message.bytes | 该参数跟 Broker 端的 message.max.bytes 参数的作用是一样的，只不过 max.message.bytes 是作用于某个 topic，而 message.max.bytes 是作用于全局。 |\n\n\n\n#### 怎么修改topic的参数配置\n\n- 创建topic的时候设置\n\n  - > bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic transaction --partitions 1 --replication-factor 1 --config retention.ms=15552000000 --config max.message.bytes=5242880\n\n- 修改topic的时候设置\n\n  - > bin/kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name transaction --alter --add-config max.message.bytes=10485760\n\n\n\n\n\n### JVM的参数配置\n\n设置kafka的JVM参数，只需要设置环境变量就可以啦。[怎么对kafka设置JVM参数](#怎么对kafka设置JVM参数)\n\n\n\n| 参数                       | 描述                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| KAFKA_HEAP_OPTS            | JVM堆大小，建议设置为6GB，默认的1GB太小了                    |\n| KAFKA_JVM_PERFORMANCE_OPTS | 指定垃圾回收器<br>在java7下：cpu充足，就用CMS；否则使用ParallelGC<br>在java8下：选择G1 |\n\n\n\n#### 怎么对kafka设置JVM参数\n\n指定kafka的环境变量即可\n\n- KAFKA_HEAP_OPTS：指定堆大小\n- KAFKA_JVM_PERFORMANCE_OPTS：指定垃圾回收器\n\n```shell\n\n$> export KAFKA_HEAP_OPTS=--Xms6g  --Xmx6g\n$> export KAFKA_JVM_PERFORMANCE_OPTS= -server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true\n$> bin/kafka-server-start.sh config/server.properties\n```\n\n\n\n### 操作系统的参数配置\n\n\n\n| 参数                       | 描述                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| 文件描述符限制             | ulimit -n；其实设置这个参数不重要，但是不设置后果很严重，会看到too many open file 的报错； |\n| 文件系统类型               | 文件系统类型（ext3，ext4，XFS），XFS的性能强于ext4，ZFS的性能强于XFS（但技术比较新，使用很少） |\n| Swappiness                 | 网上很多文章都提到设置其为 0，将 swap 完全禁掉以防止 Kafka 进程使用 swap 空间。我个人反倒觉得还是不要设置成 0 比较好，我们可以设置成一个较小的值。为什么呢？因为一旦设置成 0，当物理内存耗尽时，操作系统会触发 OOM killer 这个组件，它会随机挑选一个进程然后 kill 掉，即根本不给用户任何的预警。但如果设置成一个比较小的值，当开始使用 swap 空间时，你至少能够观测到 Broker 性能开始出现急剧下降，从而给你进一步调优和诊断问题的时间。基于这个考虑，我个人建议将 swappniess 配置成一个接近 0 但不为 0 的值，比如 1。 |\n| 提交时间（系统的刷盘时间） | 提交时间或者说是 Flush 落盘时间。向 Kafka 发送数据并不是真要等数据被写入磁盘才会认为成功，而是只要数据被写入到操作系统的页缓存（Page Cache）上就可以了，随后操作系统根据 LRU 算法会定期将页缓存上的“脏”数据落盘到物理磁盘上。这个定期就是由提交时间来确定的，默认是 5 秒。一般情况下我们会认为这个时间太频繁了，可以适当地增加提交间隔来降低物理磁盘的写操作。当然你可能会有这样的疑问：如果在页缓存中的数据在写入到磁盘前机器宕机了，那岂不是数据就丢失了。的确，这种情况数据确实就丢失了，但鉴于 Kafka 在软件层面已经提供了多副本的冗余机制，因此这里稍微拉大提交间隔去换取性能还是一个合理的做法。 |\n\n\n\n\n\n## 分区机制\n\n\n\n对于那种大批量机器组成的集群环境，每分钟产生的日志量都能以 GB 数，因此如何将这么大的数据量均匀地分配到 Kafka 的各个 Broker 上，就成为一个非常重要的问题。\n\n我们知道 kafka 的数据，是以 Topic 为概念进行存储的，而`topic`是一个逻辑概念，真正存放数据的是`topic`下的`partition`；`partition`是物理概念；\n\n一个消息只会保存在一个`topic`下的一个`partition`中，不会保存在多个`partition`中（`Replica`除外）\n\n那么，为了保证大数据量的均匀分布，其实就是保证一个`topic`下的数据量均匀的分散在各个`partition`中；\n\n那么问题来了？\n\n\n\n\n\n### 为什么要分区\n\n为什么要`Partiton`，为什么`kafka`不直接存储数据，而是要分区存储？为什么要使用`Partiton`，而不是直接使用`topic`？\n\n分区的目的是为了**负载均衡**；或者说分区的目的是为了**提高系统的可伸缩性**；\n\n- 负载均衡\n  - 如果没有分区，所有的请求全部在一个`topic`上，请求量大的时候，只对一个磁盘进行大量的读写（分钟`GB`级别的数据量），可能直接就崩了；\n- 可伸缩性\n  - 顺丰的`kafka`一般是32分区，这样每一个`Partition`都可以有一个`consumer`，提升系统的吞吐量；当数据量增长的时候，可以扩`Partition`，32->64；提升系统的可伸缩性；\n  - 但是一般不建议直接扩`Partition`，在顺丰，一般是申请新的`topic`，然后将消息转发到不同的`topic`中，变相的实现扩`Partition`；\n  - 因为`Partition`过多，`kafka`管理起来很困难，没必要增加不必要的消耗；\n- `Partition`可以实现业务上的功能（消息的顺序问题）\n\n\n\n以上说了`Partiton`存在的必要性\n\n那么既然存在`Partiton`，怎么保证每个`Partiton`的数据量的均匀呢，避免数据倾斜？这就涉及到分区的策略\n\n\n\n### 分区策略\n\n分区策略：就是决定消息被发送到哪个分区\n\n| 分区策略         | 描述                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| 轮训             | 没有指定`partitioner.class`这个配置的时候，在没有指定key的时候（消息键保留策略），轮训策略是兜底的 |\n| 随机             | 使用的很少了，已经被废弃了                                   |\n| 自定义           | 需要显示的配置`partitioner.class`这个配置，同时需要编写代码； |\n| 按消息键保留策略 | 按照key的顺序进行存放                                        |\n\n\n\n默认分区策略：如果指定了key，按照key分发；没有指定key，按照轮训；\n\n\n\n### 怎么设置分区策略\n\n**轮训**\n\n```java\n不需要配置，默认的就是这个。\n```\n\n\n\n**随机**\n\n```java\nList<PartitionInfo> partitions = cluster.partitionsForTopic(topic);\nreturn ThreadLocalRandom.current().nextInt(partitions.size());\n```\n\n\n\n**按消息键保序策略**\n\n```java\nList<PartitionInfo> partitions = cluster.partitionsForTopic(topic);\nreturn Math.abs(key.hashCode()) % partitions.size();\n```\n\n\n\n**自定义**\n\n比如我想实现：根据 `Broker` 所在的 `IP` 地址判断是南方还是北方，实现定制化的分区策略\n\n- 编写一个具体的类实现`org.apache.kafka.clients.producer.Partitioner`接口\n- 实现其中的两个方法：`partition()`和`close()`\n- 显式地配置生产者端的参数`partitioner.class`为你自己实现类的 `Full Qualified Name`\n\n```java\nList<PartitionInfo> partitions = cluster.partitionsForTopic(topic);\nreturn partitions.stream().filter(p -> isSouth(p.leader().host())).map(PartitionInfo::partition).findAny().get()\n```\n\n\n\n## 消息压缩（消息格式）\n\n\n\n### 为什么要压缩？\n\n说起压缩`compression`，我相信你一定不会感到陌生。它秉承了用时间去换空间的经典 `trade-off` 思想，具体来说就是用 CPU 时间去换磁盘空间或网络 I/O 传输量，希望以较小的 CPU 开销带来更少的磁盘占用或更少的网络 I/O 传输。在 `Kafka` 中，压缩也是用来做这件事的。\n\n\n\n### kafka的消息格式\n\nkafka有两大类消息格式，一类是在`0.11.0.0`版本之前的消息格式（称作V1版本），一个是`0.11.0.0`版本之后的格式（称作V2版本）；\n\n不管是哪个版本，kafka消息层次都是分为两层：\n\n| V1版本                                    | V2版本                                    |\n| ----------------------------------------- | ----------------------------------------- |\n| 消息集合（message set） + 消息（message） | 消息集合（record batch） + 消息（record） |\n\n一个消息集合中包含若干个日志项`record item`，日志项`record item`才是真正封装消息的地方；（注意这里不要和日志段（`Log Segment`）混为一谈）\n\nV2版本对V1版本进行了优化，将日志项`record item`中一些通用的字段抽出来，放在了消息集合中；\n\nV2版本对V1版本还有一个关于压缩方面的优化\n\n\n\n### 怎么压缩\n\nV2 版本对 V1 版本还有一个关于压缩方面的优化\n\nV1 版本：是把多条消息进行压缩，然后将压缩后的内容放在外层消息的消息体字段中； \n\nV2 版本：是对整个消息集合进行压缩，显然V2版本的压缩效率应该更高；\n\n压缩使用到的是压缩算法：[压缩算法的选择](#压缩算法的选择)\n\n\n\n### 何时压缩\n\n在 `kafka` 中，压缩可能发生在：`Producer`端和`Broker`端\n\n- `Producer`端【一般都是`Producer`端做压缩】\n  - 在`Producer`程序中添加一个配置：`compression.type` 参数\n  - compression.type=gzip 表示开启gzip压缩\n  \n- `Broker`端\n  - 一般`Broker`端不会对`Producer`发出来的消息进行修改；\n  - 有两个例外情况，会让`Broker`对消息重新压缩\n    - `Broker`端和`Producer`端指定的消息压缩算法不一致（不一致的时候，`broker`端会对`producer`端发出来的消息解压然后重新压缩）\n    - `Broker`端发生了消息格式转换：新老版本消息格式（V1版本和V2版本）兼容的问题\n\n\n\n### 何时解压缩\n\n- `consumer`端消费到消息的时候，进行解压缩\n  - 解压缩的时候，压缩算法是在消息中，用一个字段标识的，所以`consumer`可以拿到消息之后在解压缩\n- `broker`端收到`producer`发出的消息之后，也会解压缩一次，进行消息的校验；\n\n\n\n### 压缩的时机\n\n记住这句话：`Producer`端压缩，`Broker`端保持，`Consumer`端解压缩\n\n\n\n### 压缩算法的选择\n\n一般看两个指标：压缩比 和 压缩/解压缩的吞吐量\n\nGZIP\n\nSnappy\n\nLZ4\n\nzstd\n\n\n\n## 消息丢失\n\n`kafka`只对 已提交成功 的消息做有限度的持久化保证；\n\n\n\n### 什么是消息丢失\n\n对于`Producer`来说：消息发不出去，就是丢失；\n\n对于`Consumer`来说：消息消费不到，就是丢失；\n\n对于`Broker`来说：不存在丢失，`Broker`会对 已提交成功 的消息，做有限度的持久化；\n\n\n\n### 什么时候会消息丢失\n\n- `Producer`丢失消息\n  - `producer.send(msg) `因为是异步，`fire and forget` 所以可能会丢消息\n  - 网络抖动、消息不合法被`broker`拒收（比如：消息体太大）等都会导致消息发送不成功\n- `Consumer`丢失消息\n  - 消费的消息不存在了。一般只有先提交`offset`在消费的场景下会发生；\n  - 多线程处理消息的时候，某一个线程消费失败了，但是`offset`自动提交了；\n\n\n\n### 怎么保证消息不丢失\n\n上面几种丢失消息的场景，怎么避免？\n\n- 【`Producer`端】：不要使用 `producer.send(msg)`，而要使用 `producer.send(msg, callback)`。一定要使用带有回调通知的 `send `方法。\n- 【`Producer`端】：设置 `acks` = `all`。是个动态值（如果原来有`3`个`Replica`，就要写入`3`个，如果有`1`个挂了，那就只需要写入`2`个），表明所有`Replica`都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。\n- 【`Producer`端】：设置 `retries` 为一个较大的值。 表示`Producer `自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，这里开启自动重试，避免消息丢失。（重试会导致消息乱序吗：会）\n- 【Broker端】：设置 `unclean.leader.election.enable` = `false`。它控制的是哪些 `Replica `有资格竞选分区的 `Leader`。如果一个 `Replica ` 落后原先的 `Leader `太多，就不要让它竞选，即不允许这种情况的发生。\n- 【Broker端】：设置` replication.factor` >= `3`。表示某个分区的`Replica`总数，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余\n- 【Broker端】：设置 `min.insync.replicas` > 1。表示至少写入多少个`Replica`才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。\n- 【Broker端】：确保` replication.factor` > `min.insync.replicas`。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 `replication.factor` = `min.insync.replicas` + `1`。\n- 【`Consumer`端】：设置`enable.auto.commit`= `false`，采用手动提交位移的方式。就像前面说的，这对于单 `Consumer `多线程处理的场景而言是至关重要的。\n\n\n\n举个例子：\n\n比如`Replica`=`3`，设置`min.insync.replicas`=`2`，`acks`=`all`\n\n如果`Replica`都正常工作：此时`acks`=`all`的约束就是写入`3`个`Replica`，才算提交成功，此时满足`min.insync.replicas`=`2`约束。\n\n如果`Replica`挂了`1`个，此时`acks`=`all`的约束就是写入`2`个`Replica`即可，此时满足`min.insync.replicas`=`2`约束。\n\n如果`Replica`挂了`2`个，此时`acks`=`all`的约束就是写入`1`个`Replica`即可，此时不满足`min.insync.replicas`=`2`这个下限约束，写入失败。\n\n补充：\n\n> 设置 ack = all，其实就是需要保证 ISR 集合中所有的 Replica 都写入成功才能返回\n\n\n\n公司的生产者的设置\n\n```java\n    public KafkaProducer24(String brokers, ProduceOptionalConfig extraConfig) {\n        this.extraConfig = extraConfig == null ? ProduceOptionalConfig.defaultConfig : extraConfig;\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", brokers);\n        props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n        props.put(\"acks\", \"默认是Leader Replica收到就行\");\n        props.put(\"request.timeout.ms\", \"默认是30000\");\n        props.put(\"compression.type\", \"snappy\");\n        props.put(\"batch.size\", \"默认是16384\");\n        props.put(\"linger.ms\", \"默认是5\");\n        this.producer = new KafkaProducer(props);\n    }\n```\n\n\n\n\n\n## 拦截器\n\nKafka 拦截器自` 0.10.0.0` 版本被引入后并未得到太多的实际应用，我也从未在任何 Kafka 技术峰会上看到有公司分享其使用拦截器的成功案例。\n\n拦截器是一个小众功能。\n\nKafka 拦截器分为生产者拦截器和消费者拦截器\n\n\n\n### 生产者拦截器\n\n开发：实现`org.apache.kafka.clients.producer.ProducerInterceptor`这个接口，这个接口有俩方法\n\n- `onSend`：消息真正发给broker之前\n- `onAcknowledgement`：消息提交成功之后，在`callback`之前\n\n\n\n### 消费者拦截器\n\n开发：实现`org.apache.kafka.clients.consumer.ConsumerInterceptor`这个接口，这个接口有俩方法\n\n- `onConsume`：在消费者真正处理消息之前\n- `onCommit`：消费者处理完消息，提交offset之后\n\n\n\n### 配置拦截器\n\n拦截器开发完成了，怎么让它生效呢？\n\n当前 Kafka 拦截器的设置方法是通过参数配置完成的\n\n生产者和消费者两端有一个相同的参数，名字叫 interceptor.classes，它指定的是一组类的列表\n\n```java\nProperties props = new Properties();\nList<String> interceptors = new ArrayList<>();\ninterceptors.add(\"com.yourcompany.kafkaproject.interceptors.AddTimestampInterceptor\"); // 拦截器1\ninterceptors.add(\"com.yourcompany.kafkaproject.interceptors.UpdateCounterInterceptor\"); // 拦截器2\nprops.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptors);\n```\n\n\n\n## 生产者与TCP连接\n\n\n\n### 为什么采用TCP作为底层传输协议\n\nTCP 拥有一些高级功能，如多路复用请求和同时轮询多个连接的能力。\n\n多路复用请求：multiplexing request，是将两个或多个数据合并到底层—物理连接中的过程。TCP 的多路复用请求会在一条物理连接上创建若干个虚拟连接，每个虚拟连接负责流转各自对应的数据流。严格讲：TCP 并不能多路复用，只是提供可靠的消息交付语义保证，如自动重传丢失的报文。\n\n\n\n### 生产者是什么时候创建TCP连接的\n\n```java\nProperties props = new Properties ();\nprops.put(“参数1”, “参数1的值”)；\nprops.put(“参数2”, “参数2的值”)；\n……\ntry (Producer<String, String> producer = new KafkaProducer<>(props)) {\n            producer.send(new ProducerRecord<String, String>(……), callback);\n  ……\n}\n```\n\n\n\n针对上面的代码，能创建TCP连接的只有两个地方，一是 Producer 实例化的时候；一是 producer.send 的时候；\n\n- **Kafka 是在 Producer 实例化的时候与 Broker 建立的 TCP 连接**\n- 所以，当 producer.send 的时候，其实已经有TCP连接了\n\n\n\n扩展：除了在 Producer 实例化的时候与 Broker 建立的 TCP 连接之外，还有没有其他情况？\n\n- 有，有两个情况，也会创建TCP连接\n- **元数据更新时，会与元数据中没有连接的 Broker 建立 TCP 连接；**\n  - 每隔5分钟， Producer 会定期从 Broker 中获取元数据信息\n  - Producer 尝试给一个不存在的 Topic 发送消息时，Broker 会说这个 Topic 不存在，然后 Producer 会请求 Broker 更新元数据信息\n- **在消息发送时，如果 Producer 发现与要发送消息的 Topic 所在的 Broker 没有 TCP 连接，就会创建连接；**\n\n\n\n### 是怎么创建TCP连接的\n\n在创建 KafkaProducer 实例时，生产者应用会在后台创建并启动一个名为 Sender 的线程，该 Sender 线程开始运行时首先会创建与 Broker 的TCP连接。\n\nBroker有1000个，bootstrap.servers 要配置1000个嘛？ 不需要，因为 Producer 一旦连接到集群中的任一台 Broker，就能拿到整个集群的 Broker 信息。\n\n\n\n\n\n### TCP连接是什么时候被关闭的\n\n- 用户主动关闭，调用 producer.close\n- Kafka自动关闭（虽然是producer端设置的参数，但实际上，是broker关闭的TCP连接）：与 Producer 端参数 connections.max.idle.ms 的值有关。默认情况下该参数值是 9 分钟，即如果在 9 分钟内没有任何请求“流过”某个 TCP 连接，那么 Kafka 会主动帮你把该 TCP 连接关闭。用户可以在 Producer 端设置 connections.max.idle.ms=-1 禁掉这种机制。一旦被设置成 -1，TCP 连接将成为永久长连接。\n\n\n\n\n\n### 会存在的一些问题\n\n- producer每5分钟获取一些元数据，然后与元数据中没有连接的broker建立TCP连接，然后9分钟后，broker会中断空闲的连接，然后5分钟后，在此建立连接；9分钟后，再次中断连接；\n\n\n\n\n\n## 消费者与TCP连接\n\n\n\n### 消费者是什么时候创建TCP连接的\n\n- 生产者是在new KakfaProducer的时候，后台开启一个Sender的线程用来创建TCP连接的；\n- 消费者**不是**在实例化的时候创建的，而是在开始消费消息的时候（consumer.poll）才主动创建TCP连接，准确的说有三个时机\n  - 发起 FindCoordinator 请求时（连接的brokerId是-1，因为不知道连哪一个）\n  - 连接协调者的时候（连接的brokerId是 `Interger.Max - 协调者所在broker的Id号` ，为什么这么设计，为了防止连接重用）\n  - 真正消费消息的时候（连接某个topic的某个分区的leader副本所在的broker）\n\n\n\n### 创建多少个TCP连接\n\n会创建三类TCP连接\n\n- FindCoordinator 请求与任意一个 Broker 的 TCP 连接\n- 与 Coordinator 的连接，此时消费者才能真正的开始工作\n- 与 Partition 所在leader副本的TCP连接，拉取消息，真正开始处理\n\n\n\n其中第一类（FIndCoordinator请求与任意一个Broker的连接）会在消费者真正开始处理消息的时候，也就是后面两类TCP连接建立好之后，第一类连接会被关闭掉；\n\n\n\n\n\n### 消费者是什么时候关闭TCP连接的\n\n\n\n上面说的三类连接，其中第一类连接会在二，三类连接创建好之后，被关闭掉；\n\n二，三类连接的关闭场景有两种：\n\n- 主动关闭，这个不说了\n- kafka自动关闭，由 消费者端参数connection.max.idle.ms控制。当超过指定时间，该消费者没有消息消费时，就会被关闭连接（但是如果我们的消费逻辑是while循环的情况，则永远不会被关闭，因为一直与broker保持通信，实现了“长链接”的效果）\n\n\n\n### 可能存在的问题\n\n第一类 TCP 连接仅仅是为了首次获取元数据而创建的，后面就会被废弃掉。最根本的原因是，消费者在启动时还不知道 Kafka 集群的信息，只能使用“-1” 去注册，即使消费者获取了真实的 Broker ID，它依旧无法区分这个“-1”对应的是哪台 Broker，因此也就无法重用这个 Socket 连接，只能再重新创建一个新的连接。\n\n\n\n为什么会出现这种情况呢？主要是因为目前 Kafka 仅仅使用 ID 这一个维度的数据来表征 Socket 连接信息。这点信息明显不足以确定连接的是哪台 Broker，也许在未来，社区应该考虑使用 < 主机名、端口、ID> 三元组的方式来定位 Socket 资源，这样或许能够让消费者程序少创建一些 TCP 连接。\n\n\n\n也许你会问，反正 Kafka 有定时关闭机制，这算多大点事呢？其实，在实际场景中，我见过很多将 connection.max.idle.ms 设置成 -1，即禁用定时关闭的案例，如果是这样的话，这些 TCP 连接将不会被定期清除，只会成为永久的“僵尸”连接。基于这个原因，社区应该考虑更好的解决方案。\n\n\n\n\n\n\n\n## 幂等和事务生产者\n\n\n\n### 消息交付可靠性\n\n所谓的消息交付可靠性，是指`kafka`对`Producer`和`Consumer`要处理的消息，提供什么样的承诺：\n\n- `最多一次`：消息只会被发送一次，可能会丢失，绝不会重复\n- `至少一次`（默认）：发送消息的时候，至少要有一次broker明确告知已经提交的callback，消息可能重复，但不会丢失\n\n- `精确一次`：消息不会丢失，也不会重复\n\n\n\n### 幂等和事务的概念\n\n略\n\n\n\n### 幂等生产者\n\n在 Kafka 中，`Producer `默认不是幂等性的，但我们可以创建幂等性 `Producer`。\n\n在没有幂等之前，`Producer`向一个`Partition`发送消息，可能会出现同一条消息被多次发送的情况，导致消息重复\n\n在有了幂等之后，`Producer`向一个`Partition`发送消息，发送一次和发送多次，由于幂等存在，在当前这一个`Partition`内消息不会重复\n\n\n\n#### 幂等生产者的使用方式\n\n```java\nprops.put(“enable.idempotence”, true)\n或\nprops.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG， true)\n```\n\n设置 `enable.idempotence = true` 后，`Producer `自动升级成幂等性 `Producer`\n\n如果把 `enable.idempotence = true` ，则一定要设置`ack = all`，否则会报错：Must set acks to all in order to use the idempotent producer. Otherwise we cannot guarantee idempotence\n\n其他所有的代码逻辑都不需要改变。\n\nKafka 自动做消息的重复去重\n\n公司并没有使用幂等生产者，以下是公司的代码\n\n```java\n    public KafkaProducer24(String brokers, ProduceOptionalConfig extraConfig) {\n        this.extraConfig = extraConfig == null ? ProduceOptionalConfig.defaultConfig : extraConfig;\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", brokers);\n        props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n        props.put(\"acks\", \"默认是Leader Replica收到就行\");\n        props.put(\"request.timeout.ms\", \"默认是30000\");\n        props.put(\"compression.type\", \"snappy\");\n        props.put(\"batch.size\", \"默认是16384\");\n        props.put(\"linger.ms\", \"默认是5\");\n        this.producer = new KafkaProducer(props);\n    }\n```\n\n\n\n\n\n#### 幂等生产者的实现原理\n\n- Producer 在每次启动后，都会向 Broker 申请一个全局一个唯一的 pid ，用来标识本次会话\n- V2版本的消息格式增加了 sequence number 字段， producer 每发一批消息， seq 就加1\n- broker 在内存中会维护 <pid, topic, partition, seq> 映射，收到消息后检查 seq ，如果：\n  - new_seq = old_seq + 1 ：正常消息\n  - new_seq <= old_seq ：重复消息\n  - new_seq > old_seq + 1 ： 消息丢失\n\n\n\n#### 幂等生产者的作用范围\n\n只能实现单Session上的幂等性\n\n- 因为`Producer`的每次重启，都会向`Broker`申请一个新的全局唯一的`pid`，用来标识本次会话\n- `Producer`在不同`Session`上的`pid`不一样，是幂等不能跨`Session`的主要原因。\n\n只能保证单分区上的幂等性\n\n- 因为`Broker`端维护的映射是`Partiton`粒度的，所以只能保证单分区上的幂等性\n\n\n\n那么你可能会问，如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。\n\n\n\n### 事务生产者\n\n如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。\n\n这也是幂等性 Producer 和事务型 Producer 的最大区别！\n\n在 Kafka 中，`Producer `默认不是幂等性的，同时默认也不是事务的。\n\nKafka 自 0.11 版本开始也提供了对事务的支持，它能保证多条消息原子性地写入到目标分区，同时也能保证 Consumer 只能看到事务成功提交的消息。\n\n\n\n\n\n#### 事务生产者的使用方式\n\n要想使用kafka的事务，需要同时设置`Producer`和`Consumer`\n\n**设置Producer**\n\n设置事务型 Producer 的方法也很简单，满足两个要求即可：\n\n- 和幂等性 Producer 一样，开启 `enable.idempotence = true`\n- 设置 Producer 端参数` transactional.id`。最好为其设置一个有意义的名字。\n- 在发送消息的时候，需要显示的开启`beginTransaction`和提交`commitTransaction`事务\n- 消息1和消息2，要么全部成功，要么全部失败\n\n```java\n//创建事务生产者\nprops.put(“enable.idempotence”, true);\nprops.put(“transactional.id”, \"my-transcation-id-zs\")\n\n\nproducer.initTransactions();//初始化事务\ntry {\n    producer.beginTransaction();//开启事务\n    producer.send(record1);//发送消息1\n    producer.send(record2);//发送消息2\n    producer.commitTransaction();//提交事务\n} catch (KafkaException e) {\n    producer.abortTransaction();//终止事务\n}\n```\n\n\n\n**设置Consumer**\n\n- 为什么要设置，因为事务型`Producer`即使发送失败了，也会写到kakfa日志中，会被`Consumer`消费到；\n- 设置`Consumer`的 `isolation.level`参数\n  - `read_uncommitted`：读未提交，这是默认值，表明 Consumer 能够读取到 Kafka 写入的任何消息，不论事务型 Producer 提交事务还是终止事务，其写入的消息都可以读取。\n  - `read_committed`：读已提交，表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看到非事务型 Producer 写入的所有消息。\n\n\n\n#### 事务生产者的实现原理\n\n待补充\n\n\n\n## 消费者组和独立消费者\n\n\n\nKafka 为了实现点对点（同一个消息只能被下游的一个 Consumer 消费），使用了`Consumer Group`的概念；\n\n那么什么是`Consumer Group`呢，我们具体看一下\n\n`Consumer Group`：多个 Consumer 实例组成一组消费某一个 Topic，这个 Topic 下的一条消息只能被组中的一个 Consumer 实例消费；\n\n\n\n### 什么是消费者组\n\n`Consumer Group` 是 Kafka 提供的可扩展且具有容错性的消费者机制。\n\n组内有多个消费者实例（Consumer Instance），它们共享一个公共的 Group ID。\n\n组内的所有消费者实例（Consumer Instance）一起消费订阅的主题（Subscribed Topics）的所有分区（Partition）。\n\n当然，该 Topic 的每个 Partition 只能由同一个消费者组内的一个 Consumer 实例来消费。\n\n\n\n### 为什么要引入消费者组\n\n为了提升吞吐量，假设 Topic 的消息的生产速率不变，增加消费者实例，就可以提升吞吐量；\n\n\n\n### 消费者的重平衡\n\n当组内的某一个消费者实例挂了，kafka会自动重平衡；将这个死亡的消费者实例原先消费的分区，转移给存活的消费者实例；\n\n后面会详细介绍：[重平衡](#重平衡)\n\n\n\n### 消费者组的特性是什么\n\n- `Consumer Group` 下可以有一个或多个 Consumer 实例。这里的实例可以是一个单独的进程，也可以是同一进程下的线程。在实际场景中，使用进程更为常见一些。\n- `Group ID` 是一个字符串，在一个 Kafka 集群中，它标识唯一的一个 Consumer Group。\n- `Consumer Group`所订阅的 Topic ，该 Topic 下的某**一个** Partition ，只能分配给组内的某**一个** Consumer 实例消费。当然，这个 Partition 也可以被其他的 Group 消费。\n\n\n\n### 传统的消息引擎模型\n\n- 点对点：一个消息只能被一个消费者消费到\n- 发布订阅：一个 Topic 下的消息，可以被订阅该 Topic 的所有消费者都消费到\n- kafka使用消费者组，实现了两种消息引擎模型； \n  - 如果所有的消费者属于一个消费者组，那就是点对点\n  - 如果所有的消费者属于不同的消费者组，那就是发布订阅\n\n\n\n\n\n### 消费者组的使用方式\n\n待补充，补充一个代码\n\n\n\n### 消费者组是如何维护offset的\n\n对于一个单独的消费者来说，offset就是一个数值；\n\n但是对于一个消费者组来说，因为组内有多个消费者，那么消费者组维护offset是通过一个map来维护的，这个map简单的可以理解为是：Map<TopicPartition,Long>\n\n\n\n对于老版本的kafka来说，offset是保存在zk中的，但是后来kafka的开发者发现，offset的更新太过于频繁，频繁的封信会拖慢zk的性能，所以在新版本的kafka中，offset是保存在broker内部的一个特殊的topic中的(__consumer_offset)。\n\n下面我们来看看这个特殊的 Topic：位移主题（__consumer_offset）\n\n\n\n### 独立消费者\n\n在 Kafka 中，消费消息除了使用 消费者组 Consumer Group 外，还有一种消费者会被使用，但是在业务场景中，使用的不多，一般是从在 Kafka 的流处理中。\n\n它是：独立消费者 Standalone Consumer\n\n1、请问Standalone Consumer 的独立消费者一般什么情况会用到 \n\n- 很多流处理框架的Kafka connector都没有使用consumer group，而是直接使用standalone consumer，因为group机制不好把控 \n\n2、Standalone Consumer 的独立消费者 使用跟普通消费者组有什么区别的。\n\n- standalone consumer没有rebalance，也没有group提供的负载均衡，你需要自己实现。其他方面（比如位移提交）和group没有太大的不同\n\n3、如果使用 Standalone Consumer，是不是也不会发生 rebalance 了？\n\n- standalone consumer就没有rebalance一说了。 它的特点主要是灵活。虽然社区一直在改进rebalance的性能，但大数据量下consumer group机制依然有很多弊病（比如rebalance太慢等），所以很多大数据框架(Spark /Flink)的kafka connector并不使用group机制，而是使用standalone consumer\n\n\n\n## 位移和位移主题\n\n位移在 Kafka 中是一个很重要的概念，分为：消费者位移（Consumer Offset）和分区位移（Offset）：[名词术语](#名词术语)\n\n\n\n### 消费者位移和分区位移\n\n消费者位移（Consumer Offset）：消费者位移是随时变化的，毕竟它是消费者消费进度的指示器嘛。\n\n分区位移（Offset）：表示的是分区内的消息位置，它是不变的，即一旦消息被成功写入到一个分区上，它的位移值就是固定的了。\n\n举个例子：\n\n一个消息发送到kafka集群，kafka就会给这个消息并一个编号，这个编号就是“分区位移”；而且这个“分区位移”是固定不变的；\n\n当有消费者消费的时候，消费者会记录我自己消费到了哪里，这个就是消费者位移；（消息者位移其实并不是记录在消费者端的，而是记录在zk或者kafka中的）；\n\n分区位移是一个常量，在消息写入到 Partition 中之后，就不变了。所以分区位移没什么好研究的。\n\n我们主要看一看：消费者位移\n\n\n\n### 消费者位移\n\n之前介绍过，消费者组是怎么维护 消费者位移（Consumer Offset） 的，在低版本中，Consumer Offset 是维护在 ZK 中的，在后续版本中，是记录在 Broker 中的一个特殊的 Topic 中，这个 Topic 叫做：位移主题（__consumer_offset）\n\n\n\n__consumer_offsets 在 Kafka 源码中有个更为正式的名字，叫位移主题，即 Offsets Topic。\n\n\n\n### 位移主题\n\n\n\n#### 为什么会有位移主题\n\n对于老版本的 Kafka 来说，Consumer Offset 是保存在 ZK 中的，但是后来 Kafka 的开发者发现，Consumer Offset 的更新太过于频繁，频繁的更新会拖慢 ZK 的性能，所以在新版本的 Kafka 中，Consumer Offset 是保存在 Broker 内部的一个特殊的 Topic 中的：__consumer_offset\n\n\n\n#### 位移主题是什么\n\n是 Kafka 中的一个内部 Topic\n\n这个 Topic 的主要作用是用来管理 Consumer Offset\n\nConsumer Offset 管理机制其实很简单，就是将 Consumer 的位移数据作为一条条普通的 Kafka 消息，发送到 __consumer_offsets 中。\n\n可以这么说，__consumer_offsets 的主要作用是保存 Kafka 消费者的位移信息。\n\n\n\n#### 位移主题什么时候创建\n\n当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题。\n\n\n\n#### 位移主题的分区和副本\n\n我们知道 __consumer_offset 虽然是内部 Topic，但是它仍然是一个 Topic ，既然是 Topic ，那么它的分区数和副本是多少呢？\n\n- 分区数：50；由Broker 端参数 offsets.topic.num.partitions指定\n- 副本数：3；由Broker 端参数 offsets.topic.replication.factor指定\n\n\n\n#### 位移主题中存了什么\n\n存了三类消息\n\n- 位移消息：表示当前消费者组消费的位移信息\n- 用于保存 Consumer Group 信息的消息：比较神秘，几乎无法在搜索引擎中搜到。不过，你只需要记住它是用来注册 Consumer Group 的就可以了。\n- 用于删除 Group 过期位移甚至是删除 Group 的消息：tombstone 消息，即墓碑消息，也称 delete mark\n\n**位移消息**\n\n之前说过，Kafka 中有两种消息格式，[kafka的消息格式](#kafka的消息格式)，那么位移主题的消息格式，其实是 Kafka 自定义的特殊消息格式。\n\n既然是自定义的消息格式，也就说明：开发者不能随意的向这个主题发送消息，因为一旦你写入的消息不满足 Kafka 规定的格式，那么 Kafka 内部无法成功解析，就会造成 Broker 的崩溃。\n\n那么这个主题存的到底是什么格式的消息呢？\n\n事实上， Kafka 自定义的位移主题消息格式，其实是一个 KV 结构\n\nK：保存 3 部分内容：<Group ID，主题名，分区号>  （即使是单个消费者（Standalone Consumer），也是会有groupid的）\n\nV：Offset\n\n\n\n**墓碑消息**\n\n墓碑消息只出现在源码中而不暴露给你。\n\n它的主要特点是它的消息体是 null，即空消息体。\n\n那么，何时会写入这类消息呢？\n\n一旦某个 Consumer Group 下的所有 Consumer 实例都停止了，而且它们的 Consumer Offset 数据都已被删除时，Kafka 会向位移主题的对应分区写入 tombstone 消息，表明要彻底删除这个 Consumer Group 的信息。\n\n\n\n#### 怎么提交offset到位移主题\n\n\n\nKafka Consumer 提交 Offset 时会写入  __consumer_offset 这个 Topic\n\n那 Consumer 是怎么提交位移的呢？\n\n目前 Kafka Consumer 提交位移的方式有两种：自动提交位移和手动提交位移。\n\n\n\n##### 自动提交位移\n\n- 设置 Consumer 端参数：enable.auto.commit\n- 设置 Consumer 端参数：auto.commit.interval.ms\n\n```java\n\nProperties props = new Properties();\n     props.put(\"bootstrap.servers\", \"localhost:9092\");\n     props.put(\"group.id\", \"test\");\n     props.put(\"enable.auto.commit\", \"true\");\n     props.put(\"auto.commit.interval.ms\", \"2000\");\n     props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n     props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n     KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n     consumer.subscribe(Arrays.asList(\"foo\", \"bar\"));\n     while (true) {\n         ConsumerRecords<String, String> records = consumer.poll(100);\n         for (ConsumerRecord<String, String> record : records)\n             System.out.printf(\"offset = %d, key = %s, value = %s%n\", record.offset(), record.key(), record.value());\n     }\n```\n\n\n\n\n\n##### 手动提交位移\n\n- 设置 Consumer 端参数：enable.auto.commit\n- 然后我们就需要手动提交位移了，手动提交位移，Kafka提供了两种方式：同步提交方式和异步提交方式\n\n\n\n###### 同步提交方式\n\n- KafkaConsumer#commitSync()\n- 提交失败了，会自动重试，再次提交，所以会影响消费性能\n\n```java\n\nwhile (true) {\n    ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1));\n    process(records); // 处理消息\n    try {\n        consumer.commitSync();\n    } catch (CommitFailedException e) {\n        handle(e); // 处理提交失败异常\n    }\n}\n```\n\n\n\n###### 异步提交方式\n\n- KafkaConsumer#commitAsync()\n\n```java\n\nwhile (true) {\n    ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1));\n    process(records); // 处理消息\n    consumer.commitAsync((offsets, exception) -> {\n        if (exception != null)\n            handle(exception);\n    });\n}\n```\n\n\n\n###### 同步提交方式+异步提交方式\n\n- 同步会出现的问题：是阻塞的，会降低 Consumer 的 TPS ；好处是会自动重试，提交不成功的话，不会拉取新的消息；\n- 异步会出现的问题：提交异常的话，不会重试；会导致消息重复消费\n- 怎么办呢？结合两者，先使用异步提交一次，如果失败了，finally里使用同步方式\n\n```java\n\ntry {\n    while(true) {\n        ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1));\n        process(records); // 处理消息\n        commitAysnc(); // 使用异步提交规避阻塞\n    }\n} catch(Exception e) {\n    handle(e); // 处理异常\n} finally {\n    try {\n        consumer.commitSync(); // 最后一次提交使用同步阻塞式提交\n    } finally {\n        consumer.close();\n    }\n}\n```\n\n\n\n##### 公司内部使用\n\n在公司内部默认是使用：手动提交位移\n\n```java\nif (this.optionalConfig.isTransactional()) {\n    properties.put(\"enable.auto.commit\", \"false\");\n} else {\n    properties.put(\"enable.auto.commit\", \"true\");\n}\n\n\n\npublic class ConsumeOptionalConfig {\n    //....\n    private boolean transactional = true;\n    //....\n}\n\n```\n\n既然公司内部使用的手动提交，那么在哪里提交的位移呢？\n\n```java\nprotected void commitInit() {\n    //公司是为：每一个Consumer开了一个线程，后台手动提交位移\n    this.commitOffsetThread = new TransactionalConsumer.CommitOffsetThread();\n    this.commitOffsetThread.start();\n}\n\n//这是线程真正提交位移的方式，提交到 ZK 的\nlong nextOffset = currentOffset + 1L;\n((ZookeeperConsumerConnector)TransactionalConsumer.this.connector).commitOffsetToZooKeeper(new TopicAndPartition(TransactionalConsumer.this.topic, partition), nextOffset);\nthis.logger.info(String.format(\"commit offset: topic:%s, partition:%d, nextOffset: %s\", TransactionalConsumer.this.topic, partition, nextOffset));\n```\n\n\n\n##### Offset提交导致的问题\n\n上面说了 Offset 的提交，有两种方式：自动提交和手动提交，手动提交又分为：同步提交和异步提交\n\n那么它们会导致什么问题呢？会不会导致消息的丢失消费和消息的重复消费？\n\n**自动提交**\n\n- 自动提交会导致消息的丢失\n- 自动提交会导致消息的重复消费\n\n为什么会导致丢失？是因为消息消费的流程是：Concumer 先 Pull 一部分消息到内存中，然后开始消费，但是需要提交给 Broker 的 Offset 是Pull下来的最大的Offset，由于提交 Offset 是自动的，有可能 Pull 下来的消息还没有消费完，Offset 已经提交了；然后如果从内存中消费出现了问题，那么会导致内存中剩余没消费就永远不会在消费了。\n\n为什么会导致重复？是因为自动提交，默认周期是5秒，如果在第3秒的时候，Broker发生了 Rebalance，那么 Offset 就提交不上去，当 Rebalance 完成之后，这部分数据，还会被在消费一次。\n\n**手动提交**\n\n- 手动提交方式，可以解决消息的重复消费和丢失问题，因为我消费一个，提交一次Offset\n- 同步提交方式，会影响消费端的性能\n- 异步提交方式，解决了性能问题，但是消费成功之后，位移提交失败，不会自动重试提交，如果我们在 callback 中手动重试，又有可能导致提交上去的是一个老的 Offset\n- 异步+同步方式：每次提交Offset都是异步的，然后在 finally 中同步提交一次，可以完美避免以上问题\n\n怎么避免的呢？消费者 poll 方法内部有维护一个不可见的指针，commitAysnc 方法异步提交不管是否成功，poll 仍然能根据自己维护的指针位移消费数据，最后在finally内用同步方法， 同步最新的 Offset。 这样提交上去的就不是老的 Offset\n\n\n\n如果你选择的是自动提交位移，那么就可能存在一个问题：只要 Consumer 一直启动着，它就会无限期地向位移主题写入消息。导致磁盘爆满；因为自动提交位移是后台定时提交的（auto.commit.interval.ms默认是5s）；\n\n那么满了怎么办？满了就删除，怎么删除呢？\n\n\n\n#### 位移主题中的过期数据（过期位移）\n\n我们知道所有的位移数据都是保存在 位移主题 中的，如果不删除的话，位移主题就会无限的膨胀\n\n为了避免该主题无限期膨胀。Kafka 会定期的清理位移主题中的数据。\n\n\n\n**那么什么样的数据被称为过期数据呢？**\n\n我们知道位移主题中存了三类消息，这里以 位移消息 为例；\n\n位移消息的消息格式是Map格式，key是 groupid+topic+partition ；value是位移数据\n\n举个例子说：\n\n一个消费者组（假设groupid为：consumer_group_1），这个消费者组消费一个 Topic（假设消费：topic_a）；然后这个 Topic 有3个 Partition；\n\n生产者 源源不断的向 Topic 中写数据，消费者组不停地消费数据，消费一个数据，就向 位移主题 中发一个位移消息；\n\n那么这里的位移消息可能就是下面这样的：\n\nconsumer_group_1+topic_a+partition_1  ：  2345\n\nconsumer_group_1+topic_a+partition_1  ：  2346\n\nconsumer_group_1+topic_a+partition_1  ：  2347\n\n。。。。。\n\n最终，我们就会发现，同一个key就会存在很多数据，而且只有最后一条数据，才是有效的。那么之前的数据，都**被称为过期数据**；\n\n\n\n再次之外，还有一种情况：\n\n在 Broker 端有一个参数：`offsets.retention.minutes`,这个参数表明了 offset 的保留时间，什么意思呢？\n\n就是说：我们提交到 位移主题 中的消息，并不会永远的保存，在超过了这个配置时间后，Kafka后台有一个线程，就会把这个Offset删掉\n\n这个值一般是 7 天。\n\n也就是说：如果你的消费者7天都没有上线了，或者7天都没有提交 offset 了，Kafka就会把这个消费者组的 位移数据 判定为过期数据。并删除\n\n\n\n#### 位移主题中的过期数据（过期位移）清理\n\n在上面我们知道了 位移主题 中的过期数据有两类：\n\n- 一类是：同一个`key`的过期数据\n- 一类是：超过了`offsets.retention.minutes`的过期数据\n\n\n\n**第一类过期数据，Kafka是怎么清理的呢？**\n\n答案就是 Compaction。\n\n国内很多文献都将其翻译成压缩，我个人是有一点保留意见的。\n\n在英语中，压缩的专有术语是 Compression，它的原理和 Compaction 很不相同，我更倾向于翻译成压实，或干脆采用 JVM 垃圾回收中的术语：整理。\n\n它的原理很简单：就是将：同一个 <Group ID，主题名，分区号> 的 Offset 进行压实整理，只保留最新的\n\n<img src=\"kafka从入门到入土.assets/image-20220828155424662.png\" alt=\"image-20220828155424662\" style=\"zoom: 50%;\" />\n\n图中位移为 0、2 和 3 的消息的 Key 都是 K1。Compact 之后，分区只需要保存位移为 3 的消息，因为它是最新发送的。\n\nKafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可压缩数据。这个后台线程叫 Log Cleaner。\n\n\n\n**第二类过期数据，Kafka是怎么清理的呢？**\n\n上面说到，Kafka有一个后台线程：Log Cleaner。\n\n这个线程除了会清理第一类过期数据之外，还会清理第二类过期数据。\n\n很多实际生产环境中都出现过位移主题无限膨胀占用过多磁盘空间的问题，如果你的环境中也有这个问题，我建议你去检查一下 Log Cleaner 线程的状态，通常都是这个线程挂掉了导致的。\n\nKafka 定期自动删除过期位移的条件就是，组要处于 Empty 状态（消费者组的状态机）。因此，如果你的消费者组停掉了很长时间（超过 7 天），那么 Kafka 很可能就把该组的位移数据删除了\n\n\n\n#### 位移提交失败怎么办\n\n一般的失败，API会自动重试；\n\n但是有一个异常叫做 CommitFailedException，这个异常抛出，说明位移的提交出现了大问题，需要人工介入了\n\n那么这个异常是啥意思呢？什么时候会产生呢？产生了之后要怎么处理呢？\n\n**什么是 CommitFailedException**\n\n> Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. \n>\n> This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. \n>\n> You can address this either by increasing max.poll.interval.ms or by reducing the maximum size of batches returned in poll() with max.poll.records.\n\n翻译过来就是：\n\n> 本次提交位移失败了，原因是消费者组已经开启了 Rebalance 过程，并且将要提交位移的分区分配给了另一个消费者实例。\n>\n> 出现这个情况的原因是：你的消费者实例连续两次调用 poll 方法的时间间隔超过了期望的 max.poll.interval.ms 参数值。这通常表明，你的消费者实例花费了太长的时间进行消息处理，耽误了调用 poll 方法。\n>\n> 你可以通过：增加期望的时间间隔 max.poll.interval.ms 参数值 或者 减少 poll 方法一次性返回的消息数量，即减少 max.poll.records 参数值。\n\n**那么什么时候会抛出这个异常呢？**\n\n从源代码方面来说，CommitFailedException 异常通常发生在手动提交位移时，即用户显式调用 KafkaConsumer.commitSync() 方法时。\n\n从使用场景来说，有两种典型的场景可能遭遇该异常。\n\n场景一\n\n- 当消息处理的总时间超过预设的 max.poll.interval.ms 参数值时，Kafka Consumer 端会抛出 CommitFailedException 异常。\n\n- 模拟异常产生：\n\n```java\n…\nProperties props = new Properties();\n…\nprops.put(\"max.poll.interval.ms\", 5000);\nconsumer.subscribe(Arrays.asList(\"test-topic\"));\n \nwhile (true) {\n    ConsumerRecords<String, String> records = \n    consumer.poll(Duration.ofSeconds(1));\n    // 使用Thread.sleep模拟真实的消息处理逻辑\n    Thread.sleep(6000L);\n    consumer.commitSync();\n}\n```\n\n场景二\n\n- 消费者组 Consumer Group  和 独立消费者 Standalone Consumer 拥有了相同的 group.id，当独立消费者程序手动提交位移时，Kafka 就会立即抛出 CommitFailedException 异常，因为 Kafka 无法识别这个具有相同 group.id 的消费者实例，于是就向它返回一个错误，表明它不是消费者组内合法的成员。\n- 这种情况一般出现在很多部门消费同一个 Kafka 集群导致的，各个部门的消费者命名重复了，导致相同的 group.id\n\n\n\n**当前当异常出现了，我们应该怎么办呢？**\n\n怎么解决问题，要先知道问题是怎么出现的。\n\n比如在 场景一 中，我们知道产生问题的原因是：两次 poll() 方法调用的间隔超过了 max.poll.interval.ms\n\n那么就简单了，针对 场景一 ，我们可以：\n\n- **调大 max.poll.interval.ms 这个间隔时间**，默认时间是 5分钟\n- **减少每次 poll() 拉取的消息数量**：我们知道一次 poll() 方法，默认拉 500 条，因为拉取的太多了，消费的慢，所以导致两次 poll() 时间间隔太长\n- 接第二条，‘消费的慢’，那我们就提到消息速率，**优化代码，减少每条消息的处理时间**，提高TPS\n- 除了优化代码，提交消费速度，还可以**使用多线程，提高消费速度**，但是要注意多线程下的位移提交问题\n\n针对场景二呢，上面四个办法就不能用了，不过一般大公司下，消费者都是需要申请的，如果重复了，一般是申请不了的。\n\n\n\n\n\n## 多线程消费\n\n\n\n### Kafka Java Consumer 的单线程设计\n\n为什么 Kafka Java Consumer 要设计成单线程，看一下发展历史就明白了了\n\n在目前的 KafkaConsumer 的API出现之前，有一个 Scala 版本的 Consumer 的API，这组 Scale 的API 被称为老版本 Consumer\n\n在老版本 Consumer 中，Consumer 的设计是多线程的架构：\n\n- 每个 Consumer 实例在内部为所有订阅的 Topic 分区，创建对应的消息获取线程（就是一个分区一个线程），称为 Fetcher 线程\n- 老版本的 Consumer 同时也是阻塞的，Consumer 实例启动后，内部会创建阻塞式的消息获取迭代器\n\n那么为什么后来变成单线程的了呢？\n\n- 主要是因为老版本的 Consumer 是阻塞的\n- 而在大部分业务场景下，比如对数据的过滤，连接，分组，就不能是阻塞式的。\n- 所以在新版的 Consumer 下，Kafka 设计了 单线程+轮训 的机制\n\n采用单线程还有另外一个考虑\n\n- 就是单线程可以简化 Consumer 的设计，在任何编程语言中，单线程都比多线程更方便维护\n\n不过，虽然 Consumer 的设计是单线程的，但是并不意味着我们就不能多线程了。\n\n虽然 KafkaConsumer 的类的设计是单线程的，而且**不是线程安全**的。但是只是说明 拉取消息 的逻辑是单线程的\n\n但是消息拉取之后，怎么处理消息，完全是由开发者决定的，此时可以**手动开发多线程**进行消费\n\n### 多线程方案\n\n总体来说有两种方案。\n\n#### **方案一**\n\n消费者程序启动多个线程，每个线程维护专属的 KafkaConsumer 实例，负责完整的消息获取、消息处理流程。\n\n简单地说：一个线程负责一个分区\n\n<img src=\"kafka从入门到入土.assets/image-20230214112054515.png\" alt=\"image-20230214112054515\" style=\"zoom: 33%;\" />\n\n#### **方案二**\n\n消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑\n\n简单的说：一个或多个线程负责拉取消息，多个线程负责处理消息\n\n<img src=\"kafka从入门到入土.assets/image-20230214112223276.png\" alt=\"image-20230214112223276\" style=\"zoom:33%;\" />\n\n\n\n#### **方案对比**\n\n| 方案   | 优点                                     | 缺点                                                         |\n| ------ | ---------------------------------------- | ------------------------------------------------------------ |\n| 方案一 | 方便实现                                 | 占用更多的系统资源                                           |\n| 方案一 | 速度快，没有线程间的交互开销             | 线程数受限于 Topic 的分区数（最多一个分区一个线程），扩展性差 |\n| 方案一 | 易于维护分区间的消息顺序                 | 线程自己拉取消息，自己处理消息，可能导致超时，引发Rebalance  |\n| 方案二 | 可独立扩展获取消息线程数和处理消息线程数 | 实现难度高                                                   |\n| 方案二 | 伸缩性好                                 | 难以维护分区内的消息消费顺序                                 |\n| 方案二 |                                          | 处理链路长，不利于 Offset 的提交管理                         |\n\n\n\n#### **代码实现**\n\n方案一\n\n- 这段代码创建了一个 Runnable 类，表示执行消费获取和消费处理的逻辑。每个 KafkaConsumerRunner 类都会创建一个专属的 KafkaConsumer 实例。在实际应用中，你可以创建多个 KafkaConsumerRunner 实例，并依次执行启动它们，以实现方案 1 的多线程架构。\n\n```java\n\npublic class KafkaConsumerRunner implements Runnable {\n     private final AtomicBoolean closed = new AtomicBoolean(false);\n     private final KafkaConsumer consumer;\n\n\n     public void run() {\n         try {\n             consumer.subscribe(Arrays.asList(\"topic\"));\n             while (!closed.get()) {\n      ConsumerRecords records = \n        consumer.poll(Duration.ofMillis(10000));\n                 //  执行消息处理逻辑\n             }\n         } catch (WakeupException e) {\n             // Ignore exception if closing\n             if (!closed.get()) throw e;\n         } finally {\n             consumer.close();\n         }\n     }\n\n\n     // Shutdown hook which can be called from a separate thread\n     public void shutdown() {\n         closed.set(true);\n         consumer.wakeup();\n     }\n```\n\n\n\n方案二\n\n- 这段代码最重要的地方是最后一行：当 Consumer 的 poll 方法返回消息后，由专门的线程池来负责处理具体的消息。调用 poll 方法的主线程不负责消息处理逻辑，这样就实现了方案 2 的多线程架构。\n\n```java\n\nprivate final KafkaConsumer<String, String> consumer;\nprivate ExecutorService executors;\n...\n\n\nprivate int workerNum = ...;\nexecutors = new ThreadPoolExecutor(\n  workerNum, workerNum, 0L, TimeUnit.MILLISECONDS,\n  new ArrayBlockingQueue<>(1000), \n  new ThreadPoolExecutor.CallerRunsPolicy());\n\n\n...\nwhile (true)  {\n  ConsumerRecords<String, String> records = \n    consumer.poll(Duration.ofSeconds(1));\n  for (final ConsumerRecord record : records) {\n    executors.submit(new Worker(record));\n  }\n}\n..\n```\n\n\n\n## 重平衡与协调者\n\n\n\n### 什么是重平衡\n\nRebalance 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区。\n\n比如某个 Group 下有 20 个 Consumer 实例，它订阅了一个具有 100 个分区的 Topic。正常情况下，Kafka 平均会为每个 Consumer 分配 5 个分区。这个分配的过程就叫 Rebalance。\n\n\n\n### 什么时候会重平衡\n\n- Consumer Group 内 Consumer实例 数量发生变化（新增或减少）；\n- Consumer Group 订阅的 Topic 数发生变化；\n- Consumer Group 订阅的 Topic 的 Partition 数量发生变化\n\n\n\n### 重平衡策略\n\n- 举例：比如组内有2个消费者，这个组消费 TopicA 和 TopicB ,其中 Consumer-1 消费 TopicA，Consumer-2 消费 TopicB，当该 Consumer Group 新订阅一个 TopicC 的时候，会不会 Consumer-1 消费到 TopicB，Consumer-2 消费到 TopicA\n\nKafka 有三种策略保证重平衡后的公平\n\n**Rnage 分配策略**\n\nRange分配策略是面向每个 Topic 的，首先会对同一个 Topic 里面的 Partition 按照序号进行排序，并把消费者线程按照字母顺序进行排序。然后用分区数除以消费者线程数量来判断每个消费者线程消费几个分区。如果除不尽，那么前面几个消费者线程将会多消费一个分区。 \n\n**RoundRobin策略**\n\nRoundRobin策略的原理是将 Consumer Group 内所有 Consumer 以及订阅的所有 Topic 的 Partition 按照字典序排序，然后通过轮询算法逐个将分区以此分配给每个消费者。 使用RoundRobin分配策略时会出现两种情况： \n\n- 如果同一消费组内，所有的消费者订阅的消息都是相同的，那么 RoundRobin 策略的分区分配会是均匀的。\n\n-  如果同一消费者组内，所订阅的消息是不相同的，那么在执行分区分配的时候，就不是完全的轮询分配，有可能会导致分区分配的不均匀。如果某个消费者没有订阅消费组内的某个 topic，那么在分配分区的时候，此消费者将不会分配到这个 topic 的任何分区。 \n\n**Sticky分配策略**\n\nSticky分配策略，这种分配策略是在 Kafka 的 0.11.X 版本才开始引入的，是目前最复杂也是最优秀的分配策略。 Sticky分配策略的原理比较复杂，它的设计主要实现了两个目的： \n\n- 分区的分配要尽可能的均匀；\n\n-  分区的分配尽可能的与上次分配的保持相同。 如果这两个目的发生了冲突，优先实现第一个目的。\n\n\n\n### 什么是协调者Coordinator\n\n所谓协调者，在 Kafka 中对应的术语是 Coordinator，它专门为 Consumer Group 服务，负责为 Group 执行 Rebalance 以及提供位移管理和组成员管理等。\n\n- 协调者 coordinators 是协调管理 Consumer Group 的一个程序，运行在broker上的\n\n- 每一个broker在启动时都会启动 coordinator 组件（coordinator程序），也就是说每个 Broker 都有具备称为 Coordinator 的能力\n\n\n\n\n具体来讲，Consumer 端应用程序在提交位移时，其实是向 Coordinator 所在的 Broker 提交位移。\n\n同样地，当 Consumer 应用启动时，也是向 Coordinator 所在的 Broker 发送各种请求，然后由 Coordinator 负责执行消费者组的注册、成员管理记录等元数据管理操作。\n\n\n\n### 消费者组是怎么找到自己的coordinator的\n\n既然 Coordinator 是运行在 Broker上 的一个程序，那么一个消费者组，是怎么找到自己的 Coordinator 的呢？\n\n在[消费者与TCP连接](#消费者与TCP连接)这一节中，我们知道消费者在启动的时候，会创建三类 TCP 连接\n\n- 第一类：与负载最小的 Broker 创建连接，发送 FIndCoordinator 请求，希望该 Broker 告诉自己谁是我的协调者；\n- 第二类：与 Coordinator 创建TCP连接，加入组，分配方案，位移获取和提交等\n- 第三类：与 要消费的分区的副本所在 Broker 创建 TCP 连接，真正开始消费数据\n\n所以，消费者组找到自己的 Coordinator 是在第一类 TCP 请求中找到的\n\n那么 具体是怎么找到的呢？是通过之前说过的 __consumer_offset 这个主题来找的\n\n分为两步\n\n- 获取当前 Consumer Group 的 groupid，然后hash得到hash值；\n- 获取__consumer_offset 的分区数，默认是50\n- 计算 ：abs ( hash % 50 ) = 分区号\n- 然后，找到这个分区号的 leader 副本所在的 broker ；这个broker就是这个消费者的coordinator\n\n\n\n\n\n\n\n### 重平衡的缺点\n\n- 会STW（stop the world）：消费者会全部停止消费\n- 时间太慢了，几百个消费者重平衡一次，要几个小时\n- Rebalance 的设计是要求所有 Consumer 实例共同参与，全部重新分配所有分区\n- 在 Rebalance 过程中，所有 Consumer 实例都要参与，所以在整个过程中都不能消费任何消息，因此它对 Consumer 的 TPS 影响很大\n\n\n\n### 避免消费者组重平衡\n\n\n\n首先，明确一个概念，目前Rebalance的弊端（慢，STW）这2个弊端，社区是没有办法解决的；\n\n针对Rebalance的效率低的情况，社区采用了StickyAssignor策略来提升性能；\n\n既然无法解决，那我们只能尽量避免，怎么避免呢？就要从导致Rebalance发生的三种情况来看\n\n- 组成员数量发生变化（99%的Rebalance都是这个原因）\n- 订阅主题数量发生变化（一般是程序开发者主动操作，无法避免）\n- 订阅主题的分区数发生变化（一般是程序开发者主动操作，无法避免）\n\n\n\n组成员数量发生变化，变化分为两种，一种是增加，一种是减少\n\n- 增加：一般都是程序开发者主动操作，比如为了提升topic的消费速率，无法避免\n- 减少：如果是主动停掉的，那自不必说，无法避免；\n- 减少：不是主动停掉的，是被 Coordinator 错误地认为“已停止”从而被“踢出”Group。如果是这个原因导致的 Rebalance，我们就不能不管了。\n\n\n\n**什么时候coordinator会认为consumer实例已停止**\n\n- Coordinator 没有收到 Consumer 的心跳，就会让 Consumer 离组，重新 Rebalance\n  - Consumer 端有个参数，叫 session.timeout.ms，默认10秒；\n  - Coordinator 在10s内没有收到 Consumer 的心跳，就Rebalance\n  - 心跳是consumer主动给coordinator的，那么多久一次呢？是由参数：heartbeat.interval.ms控制的；\n  - 推荐配置：session.timeout.ms=6s，heartbeat.interval.ms=2s：要保证 Consumer 实例在被判定为“dead”之前，能够发送至少 3 轮的心跳请求\n- Consumer 实例在一定时间内消费不完已经 pull() 下来的消息，就会主动离组，重新Rebalance\n  - Consumer 端有个参数，max.poll.interval.ms 参数，默认5分钟\n  - 一个consumer在5分钟内，没有消费完拉取的数据，就Rebalance\n- consumer端的GC情况\n\n\n\nstandalone consumer 就没有 rebalance 一说了。 它的特点主要是灵活。\n\n虽然社区一直在改进rebalance的性能，但大数据量下consumer group机制依然有很多弊病（比如rebalance太慢等）\n\n所以很多大数据框架(Spark /Flink)的kafka connector并不使用group机制，而是使用standalone consumer\n\n\n\n### 怎么排查生产是否重平衡过多\n\n主动去排查：去找Coordinator所在的broker日志，如果经常发生rebalance，会有类似于\"(Re)join group\" 之类的日志\n\n被动排查：一般 Rebalance 过多，会降低消费者能力，间接的就会出现消息堵，可以配置相关告警\n\n\n\n### 重平衡核心全流程\n\n\n\n重平衡是怎么做到的？\n\n在 Kafka 中，每个 Consumer 都会通过**心跳线程**，定期的向 Coordinator 汇报自己的状态；\n\n同时 Coordinator 也会通过**心跳线程**，告诉 Consumer ：我收到了你的汇报；\n\n如果 Consumer 超时没有汇报；说明这个 Cnnsumer 有问题了，此时 Coordinator 就会开启重平衡\n\nCoordinator 会通过**心跳线程**，向这个 Consumner 所在的 Group 下的所有 Consumer，发送消息：**REBALANCE_IN_PROGRESS**\n\n当 Consumer 收到这种消息之后，就知道要开启重平衡了\n\n\n\n而 Coordinator 具体是怎么实现重平衡的呢？\n\n其实是通过控制 Consumer Group 的状态来完成重平衡的。这是**理解重平衡的基础**。\n\n下面我们就来看看 消费者组的状态机，这是**理解重平衡的基础**；\n\n\n\n#### 消费者组的状态机\n\n\n\n消费者组的状态主要有以下 五个：\n\n| 状态                | 说明                                                         |\n| ------------------- | ------------------------------------------------------------ |\n| Empty               | 组内没有任何成员，但消费者可能存在已经提交的数据，并且未过期：[位移主题中的过期数据（过期位移）](#位移主题中的过期数据（过期位移）) |\n| Dead                | 组内没有任何成员，Coordinator 已经把这个消费者组的元数据信息删除了 |\n| PreparingRebalance  | 消费者组准备开启重平衡，此时所有成员都要重新申请加入组       |\n| CompletingRebalance | 消费者组下的所有成员都已经加入，等待Leader分配方案，老版本中这个状态叫：AwatingSync |\n| Stable              | 消费者组的稳定状态，表示重平衡已经完成，可以正常开启消费了   |\n\n```mermaid\nstateDiagram\n\tdirection LR\n    Empty-->Dead: 组信息过期被删除\n    Empty-->PreparingRebalance:准备开启rebalance\n    PreparingRebalance-->Dead:位移主题分区Leader发生变化\n    PreparingRebalance-->Empty:组内所有成员离组\n    PreparingRebalance-->CompletingRebalance:有成员入组\n    CompletingRebalance-->Dead:位移主题分区Leader发生变化\n    CompletingRebalance-->PreparingRebalance:成员加入或离开\n    CompletingRebalance-->Stable:Leader完成分配\n    Stable-->Dead:位移主题分区Leader发生变化\n    Stable-->PreparingRebalance:心跳过期/成员离组/新成员加入\n    \n    %% 给状态添加样式\n    classDef badBadEvent fill:green,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n\tclass Empty badBadEvent\n\tclass PreparingRebalance badBadEvent\n\tclass CompletingRebalance badBadEvent\n\tclass Stable badBadEvent\n\tclass Dead badBadEvent\n\n```\n\n\n\n一个消费者组最开始是 Empty 状态\n\n当重平衡过程开启后，它会被置于 PreparingRebalance 状态等待成员加入\n\n之后变更到 CompletingRebalance 状态等待分配方案\n\n最后流转到 Stable 状态完成重平衡\n\n当有新成员加入或已有成员退出时，消费者组的状态从 Stable 直接跳到 PreparingRebalance 状态，此时，所有现存成员就必须重新申请加入组。\n\n当所有成员都退出组后，消费者组状态变更为 Empty\n\n\n\n\n\n#### 重平衡流程\n\n##### 场景一：新成员入组\n\n```mermaid\nsequenceDiagram\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者-->>成员1: 心跳响应：你好成员1，已收到\n\t成员2->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 B\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者-->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组\n\t成员1->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 A\n\t协调者-->>成员2: joinGroup响应：你好成员2，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员1->主题A，成员2->主题B}\n\t协调者-->>成员1: joinGroup响应：你好成员1，你已成功入组，当前组的Leader是成员2，请等待分配方案\n\t成员1->>协调者: syncGroup请求：你好协调者，我是成员1，等待分配方案\n\t成员2->>协调者: syncGroup请求：你好协调者，我是成员2，也是这个组的Leader<br/>以下是我的分配方案：{成员1->主题A分区0，成员2->主题B分区0}\n\t协调者-->>成员1: syncGroup响应：你好成员1，你负责消费主题A的0分区\n\t协调者-->>成员2: syncGroup响应：你好成员2，你负责消费主题B的0分区\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者-->>成员1: 心跳响应：你好成员1，已收到\n\t成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着\n\t协调者-->>成员2: 心跳响应：你好成员2，已收到\n\n\n```\n\n\n\n##### 场景二：组成员主动离组\n\n```mermaid\nsequenceDiagram\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者-->>成员1: 心跳响应：你好成员1，已收到\n\t成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着\n\t协调者-->>成员2: 心跳响应：你好成员2，已收到\n\t成员1->>协调者: leaveGroup请求：你好协调者，我是组内的成员1，申请主动离组\n\t协调者-->>成员1: leaveGroup响应：你好成员1，已收到\n\t成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着\n\t协调者-->>成员2: 心跳响应：你好成员2，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组\n\t成员2->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 B\n\t协调者-->>成员2: joinGroup响应：你好成员2，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员2->主题B}\n\t成员2->>协调者: syncGroup请求：你好协调者，我是成员2，也是这个组的Leader<br/>以下是我的分配方案：{成员2->主题B分区0}\n\t协调者-->>成员2: syncGroup响应：你好成员2，你负责消费主题B的0分区\n\t成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着\n\t协调者-->>成员2: 心跳响应：你好成员2，已收到\n```\n\n\n\n##### 场景三：组成员崩溃离组\n\n```mermaid\nsequenceDiagram\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者-->>成员1: 心跳响应：你好成员1，已收到\n\t成员2->>协调者: 心跳请求：你好协调者，我是组内的成员2，我还活着\n\t协调者-->>成员2: 心跳响应：你好成员2，已收到\n\tnote left of 成员2: 成员2此时已离线\n\t协调者->>协调者: 发现成员2已经很长时间没有汇报了\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者-->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组\n\t成员1->>协调者: joinGroup请求：你好协调者，我请求加入组，我要消费的是主题是 A\n\t协调者-->>成员1: joinGroup响应：你好成员1，你已成功入组，你是这组的Leader<br/>这组的订阅信息有：{成员1->主题A}\n\t成员1->>协调者: syncGroup请求：你好协调者，我是成员1，也是这个组的Leader<br/>以下是我的分配方案：{成员1->主题A分区0}\n\t协调者-->>成员1: syncGroup响应：你好成员1，你负责消费主题A的0分区\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者-->>成员1: 心跳响应：你好成员1，已收到\n```\n\n\n\n##### 场景四：重平衡时协调者对组内成员提交位移的处理\n\n```mermaid\nsequenceDiagram\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n  \t协调者-->>成员1: 心跳响应：你好成员1，已收到\n  \t协调者->>协调者: 此时发现需要重平衡\n\t成员1->>协调者: 心跳请求：你好协调者，我是组内的成员1，我还活着\n\t协调者->>成员1: 心跳响应：你好成员1，REBALANCE_IN_PROGRESS,重平衡，你需要重新入组\n\t成员1->>成员1: 必须赶在超时时间内提交位移\n\tnote right of 成员1 : 赶在超时时间内提交位移\n\t成员1->>协调者: 提交位移请求：你好协调者，我要提交的位移是：{....}\n\t协调者->>成员1: 提交位移响应：你好成员1，位移数据已收到\n\tnote right of 成员1 : 如果提交失败了，这部分数据在重平衡之后就会被重新消费\n```\n\n\n\n\n\n#### 重平衡的一些问题\n\njoingroup时等待所有消费者上报订阅信息，协调者通过什么判断所有消费者都已经上报了？\n\n- join group时也是有一个总的超时时间的（取所有member最大的rebalance超时时间），靠这个作为判断是否进入到下一阶段的阈值。\n- 如果在这次 Rebalance 期间，有 消费者 超时没有上报信息，那么这个消费者会被排除在这轮 Rebalance 之外\n\n如果在超时时间之后，排除在外的 消费者 此时上报了信息，怎么办？\n\n- 相当于 新成员入组，重新 Rebalance\n\n\n\n\n\n\n## 副本机制\n\n\n\n我们之前谈到过，Kafka 是有 Topic 概念的，而每个 Topic 又进一步划分成若干个 Partition。\n\n每个 Partition 配置有若干个 Replica，Replica 的概念实际上是在 Partition 层级下定义的\n\n\n\n### 什么是副本\n\n所谓副本（Replica），本质就是一个只能追加写消息的提交日志。\n\n同一个 Partition 下的所有 Replica 保存有相同的消息序列，这些 Replica 分散保存在不同的 Broker 上，从而能够对抗部分 Broker 宕机带来的数据不可用。\n\n在实际生产环境中，每台 Broker 都可能保存有各个 Topic 下不同 Partition 的不同 Replica，因此，单个 Broker 上存有成百上千个 Replica 的现象是非常正常的。\n\n下图展示的是一个有 3 台 Broker 的 Kafka 集群上的副本分布情况。\n\n从这张图中，我们可以看到，主题 1 分区 0 的 3 个副本分散在 3 台 Broker 上，其他主题分区的副本也都散落在不同的 Broker 上，从而实现数据冗余。\n\n<img src=\"kafka从入门到入土.assets/image-20230214160607518.png\" alt=\"image-20230214160607518\" style=\"zoom:33%;\" />\n\n\n\n### 副本之间数据是怎么同步的\n\n我们知道 Replica 是用来冗余数据的，同一个 Partiton 下的所有 Replica 的数据都应该是一模一样的，顺序都是一样的\n\n那么这么多的 Replica，是怎么进行 Replica 之间的数据同步的呢？\n\nKafka使用的解决方案：就是采用**基于领导者（Leader-based）的副本机制**\n\n<img src=\"kafka从入门到入土.assets/image-20230214161048286.png\" alt=\"image-20230214161048286\" style=\"zoom:33%;\" />\n\n- 在 Kafka 中，副本分成两类：领导者副本（Leader Replica）和追随者副本（Follower Replica）。每个分区在创建时都要选举一个 Leader Replica，剩余的是 Follower Replica\n- Kafka 的副本机制比其他分布式系统要更严格一些。在 Kafka 中，Follower Replica 是不对外提供服务的。所有的读写请求都必须由 Leader Replica所在的 Broker负责处理。而 Follower 的任务只有一个：就是从 Leader 异步拉取消息，并写入到自己的提交日志中，从而实现与 Leader 的同步。\n- 当 Leader Replica 挂掉了，或者说 Leader Replica 所在的 Broker 宕机时，Kafka 依托于 ZK 进行新的 Leader Replica 的选举\n\n你一定要特别注意上面的第二点，即追随者副本是不对外提供服务的。\n\n原因归咎于两点：方便 Read-your-writes ，同时方便实现单调读（Monotonic Reads）\n\n\n\n### Follower不提供服务的优点\n\n有两个好处\n\n#### 方便实现“Read-your-writes”\n\n所谓 Read-your-writes，顾名思义就是，当你使用生产者 API 向 Kafka 成功写入消息后，马上使用消费者 API 去读取刚才生产的消息。\n\n举个例子，比如你平时发微博时，你发完一条微博，肯定是希望能立即看到的，这就是典型的 Read-your-writes 场景。如果允许追随者副本对外提供服务，由于副本同步是异步的，因此有可能出现追随者副本还没有从领导者副本那里拉取到最新的消息，从而使得客户端看不到最新写入的消息。\n\n#### 方便实现单调读（Monotonic Reads）\n\n什么是单调读呢？就是对于一个消费者用户而言，在多次消费消息时，它不会看到某条消息一会儿存在一会儿不存在。\n\n如果允许追随者副本提供读服务，那么假设当前有 2 个追随者副本 F1 和 F2，它们异步地拉取领导者副本数据。倘若 F1 拉取了 Leader 的最新消息而 F2 还未及时拉取，那么，此时如果有一个消费者先从 F1 读取消息之后又从 F2 拉取消息，它可能会看到这样的现象：第一次消费时看到的最新消息在第二次消费时不见了，这就不是单调读一致性。但是，如果所有的读请求都是由 Leader 来处理，那么 Kafka 就很容易实现单调读一致性。\n\n\n\n\n\n现在我们知道了 Replica 的同步机制，和 Follower Replica 不对外提供服务的原因，接下来还有两个问题，我们一一来看：\n\nKafka 是怎么保证 Replica 的数据一致性的\n\n当 Leader Replica 挂掉之后，Kafka 是怎么进行选举新的 Leader Replica 的\n\n\n\n### 怎么保证 副本数据一致性\n\n我们知道 Kafka 的 Partition 有很多个 Replica\n\nReplica 分为 Leader Replica 和 Follower Replica\n\nLeader Replica 对外提供读写服务，Follower Replica 只是从 Leader Replica 异步同步数据，不对外提供任何服务；\n\n那么，Kakfa是怎么保证这些 Replica 内的数据是一致的呢？\n\n\n\n#### **In-Sync Replicas（ISR）**\n\n既然 Follower Replica 是异步的方式，从Leader Replica 同步数据的，那么就一定会存在延迟；\n\n就像 Mysql 的主从一样，主要涉及到数据同步，就一定会有延迟，无外乎：延迟的大小是多少。\n\n\n\nKafka 知道这个延迟是无法避免的，所以，Kafka 维护了一个集合，这个集合中保存的是：与Leader同步的Follower；\n\n什么是与Leader同步的Follower？有同步的Follower，难道还有不同步的Follower？\n\n- 是的，有同步的，就有不同步的。\n- Kafka 有自己一套判定条件，只要 Follower Replica 满足了这个判定条件，Kafka 就认为这个 Follower 是同步的。就会放进 ISR 集合；\n- 这个条件就是：replica.lag.time.max.ms，表示 Follower 副本能够落后 Leader 副本的最长时间间隔，默认是10S\n- 也就是说：当 Follower 与 Leader 的同步时间差，在10秒内，Kafka就认为这个 Follower 是同步的。否则就是不同步的\n- ISR 集合有什么用的，主要是用来选举新的 Leader Replica 的，后面会说\n\n\n\nISR 是一个动态调整的集合，当 Follower 落后于 Leader ，并且落后时间大于`replica.lag.time.max.ms`，Kafka 就会将这个 Follower 踢出 ISR；\n\n同样的，当一个落后的 Follower 最终追上了 Leader ，Kafka 会将这个 Follower 在加入 ISR；\n\n\n\n#### ISR是怎么变化的\n\nKafka 在启动的时候会开启两个任务\n\n一个任务用来定期地检查是否需要调整 ISR 集合，这个周期是replica.lag.time.max.ms的一半，默认5秒；\n\n当检测到 ISR 集合中有失效副本时，就会收缩 ISR 集合，当检查到有 Follower 的 HighWatermark （高水位）追赶上 Leader 时，就会扩充ISR。 \n\n除此之外，当 ISR 集合发生变更的时候。还会将变更后的记录缓存到 isrChangeSet 中\n\n另一个任务会周期性地检查 isrChangeSet，如果发现这个 isrChangeSet 有新的变更记录，那么它会在 ZK 中持久化一个节点。\n\n然后因为 Controller（Kafka 控制器） 在这个 ZK 节点的路径上注册了一个Watcher，所以它就能够感知到 ISR 的变化，并向它所管理的broker发送更新元数据的请求。最后删除该ZK节点。 \n\n\n\nLeader 副本天然就在 ISR 中\n\n极端的情况：ISR 包含全部的 Replica，也有可能 ISR 中一个 Replica 都没有，如果一个都没有的话，说明 Leader 都挂了，此时就需要选举新的 Leader了。\n\n\n\n### 怎么进行选举新的 Leader Replica\n\n选举的时候，是通过 Controller（Kafka控制器）来处理的。 Coordinator（协调者）只是消费者组用来重平衡的；这两个不是一个概念；\n\n当 ISR 不为空的时候，则选择其中一个作为新Leader，新的ISR则包含当前 ISR 中所有幸存的 Replica。\n\n当 ISR 为空的时候，此时幸存的 Replica 都是非同步副本，也就是说：都是和 老的 Leader Replica 差距比较大的 Replica，如果此时从这些 非同步副本 中选举一个作为 Leader 的话，就会有消息丢失的风险；如果不选举，那就是 Kafka 服务不可用了。\n\n当 ISR 为空的时候，如果进行选举，则这个选举叫做： Unclean 领导者选举，Broker 端参数 unclean.leader.election.enable 控制是否允许 Unclean 领导者选举\n\n如果开启了  Unclean 领导者选举 ，相当于选择了可用性，牺牲了一致性；如果不选举，相当于选择了一致性，牺牲了可用性\n\n建议不要开启，毕竟我们还可以通过其他的方式来提升高可用性。如果为了这点儿高可用性的改善，牺牲了数据一致性，那就非常不值当了。\n\n\n\n\n\n## 请求是怎么被处理的\n\n\n\n### kafka的请求分类\n\n之前，我们了解到 Kafka 是使用 TCP 进行通信，在TCP的基础上，Kafka定义了属于自己的请求协议：\n\n比如常见的 PRODUCE 请求是用于生产消息的，FETCH 请求是用于消费消息的，METADATA 请求是用于请求 Kafka 集群元数据信息的等等\n\n截止到 2.3 版本，总共有 45 种，在这 45 种请求中，可以分为两类：\n\n**数据类请求**：Kafka 社区把 PRODUCE 和 FETCH 这类请求称为数据类请求。\n\n**控制类请求**：Kafka 社区把 LeaderAndIsr、StopReplica 这类请求称为控制类请求。\n\n\n\n### 处理请求的方式\n\n在传统的开发设计中，对一个请求的处理，很自然的就可以想到下面两种方式\n\n#### 同步处理\n\n服务端收到一个消息，立即开始处理，处理完成后返回\n\n```java\n//伪代码\nwhile (true) {\n    Request request = accept(connection);\n    handle(request);\n}\n```\n\n这个方法实现简单，但是有个致命的缺陷，那就是吞吐量太差。由于只能顺序处理每个请求，因此，每个请求都必须等待前一个请求处理完毕才能得到处理。这种方式只适用于请求发送非常不频繁的系统。\n\n#### 异步处理\n\n既然同步的方式效率差， 那就用异步的方式\n\n```java\n//伪代码\nwhile (true) {\n    Request = request = accept(connection);\n    Thread thread = new Thread(() -> {\n        handle(request);});\n    thread.start();\n}\n```\n\n这个方法反其道而行之，完全采用异步的方式。系统会为每个入站请求都创建单独的线程来处理。这个方法的好处是，它是完全异步的，每个请求的处理都不会阻塞下一个请求。但缺陷也同样明显。为每个请求都创建线程的做法开销极大，在某些场景下甚至会压垮整个服务。\n\n\n\n### Kafka 是如何处理请求的\n\nKafka 使用 Reactor 模式来处理请求\n\n#### 什么是Reactor模式\n\nReactor 模式是 JUC 包的作者 Doug Lea 的作品，真不愧是大神。\n\n简单来说，Reactor 模式是事件驱动架构的一种实现方式，特别适合应用于处理多个客户端并发向服务器端发送请求的场景。\n\nReactor 模式的架构如下图所示，图来自 Doug Lea 的PPT：[https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf](#https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf)：\n\n<img src=\"kafka从入门到入土.assets/image-20230215172615962.png\" alt=\"image-20230215172615962\" style=\"zoom: 33%;\" />\n\n多个 Client 客户端会发送请求给到 Reactor。\n\nReactor 有个请求分发线程 Dispatcher ，也就是图中的 Acceptor 线程，它会将不同的请求下发到多个工作线程中处理。\n\nDispatcher 是 Reactor 模式的一个概念，它的实现是：Acceptor 线程，所以它俩是指同一个东西。\n\nAcceptor 线程只是用于请求分发，不涉及具体的逻辑处理，非常得轻量级，因此有很高的吞吐量表现。\n\n而工作线程可以根据实际业务处理需要任意增减，从而动态调节系统负载能力。\n\n\n\n#### Kafka 的Reactor模式\n\n<img src=\"kafka从入门到入土.assets/image-20230215173456675.png\" alt=\"image-20230215173456675\" style=\"zoom:33%;\" />\n\nKafka 的 Broker 端有个 SocketServer 组件，类似于 Reactor 模式中的 Dispatcher。\n\n它也有对应的 Acceptor 线程和一个工作线程池，只不过在 Kafka 中，这个工作线程池有个专属的名字，叫网络线程池。\n\nKafka 提供了 Broker 端参数 num.network.threads，用于调整该网络线程池的线程数。\n\nnum.network.threads 的默认值是 3，表示每台 Broker 启动时会创建 3 个网络线程，专门处理客户端发送的请求。\n\n\n\n\n\n\n\n##### 在Reactor模式下怎么处理请求\n\n<img src=\"kafka从入门到入土.assets/image-20230215192742666.png\" alt=\"image-20230215192742666\" style=\"zoom:50%;\" />\n\n\n\n上图，其中 1-7 步骤是处理请求， 7-10 是响应请求\n\n1、客户端或者其他Broker发起请求，这里的请求可能是 数据类请求，也可能是 控制类请求\n\n2、请求发送到 Broker，会由 SocketServer 组件开始处理\n\n3、SocketServer 组件（Acceptor线程）开始处理\n\n4、SocketServer 组件（Acceptor线程）会将请求分发到网络线程池，这是一个很轻量级的工作\n\n5、网络线程池中的某个线程接收到请求，但是这个线程并不会开始处理，而是将当前请求发送到共享请求队列\n\n6、Broker 端还有一个IO线程池，会不停的从共享请求队列中获取请求，这才是真正的开始处理请求\n\n- Broker 端参数 num.io.threads 控制了这个线程池中的线程数。\n- 目前该参数默认值是 8，表示每台 Broker 启动后自动创建 8 个 IO 线程处理请求\n- 你可以根据实际硬件条件设置此线程池的个数\n\n7、这个请求如果是 PRODUCE 请求，就写入日志；如果是 FETCH 请求，就从磁盘或者页缓存中读取数据\n\n\n\n##### 在Reactor模式下怎么响应请求\n\n<img src=\"kafka从入门到入土.assets/image-20230215192742666.png\" alt=\"image-20230215192742666\" style=\"zoom:50%;\" />\n\n\n\n上图，其中 1-7 步骤是处理请求， 7-10 是响应请求\n\n\n\n7、这个请求如果是 PRODUCE 请求，就写入日志；如果是 FETCH 请求，就从磁盘或者页缓存中读取数据\n\n8、如果当前这个请求**可以直接返回**，就会找到当时发送这个请求的线程，然后返回到这个线程的响应队列中\n\n- 什么是可以直接返回的请求？ \n\n- > 再讲什么是可以直接返回的请求之前，先了解一个什么是不可以直接返回的请求？\n  >\n  > 不可以直接返回的请求，比如设置了 acks=all 的 PRODUCE 请求\n  >\n  > 一旦设置了 acks=all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回\n  >\n  > 此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果\n  >\n  > 这就是不能直接返回的请求。\n  >\n  > 相反的，就是可以直接返回的请求\n\n- 响应队列是网络线程池中每个线程专属的吗？\n\n- > 是的。\n  >\n  > 请求队列是所有网络线程共享的，而响应队列则是每个网络线程专属的。\n  >\n  > 这么设计的原因就在于，Dispatcher 只是用于请求分发而不负责响应回传，因此只能让每个网络线程自己发送 Response 给客户端，所以这些 Response 也就没必要放在一个公共的地方。\n\n- 怎么找到当时发送这个请求的线程呢？\n\n- > 在源码中，有这部分代码逻辑：RequestChannel 类的 sendResponse 方法\n  >\n  > // 找出response对应的Processor线程，即request当初是由哪个Processor线程处理的 \n  >\n  > val processor = processors.get(response.processor) \n  >\n  > // 将response对象放置到对应Processor线程的Response队列中 \n  >\n  > if (processor != null) { \n  >\n  >   processor.enqueueResponse(response) \n  >\n  > }\n\n8、如果当前这个请求是**不可以直接返回的**，就会将当前这个请求暂存到 Purgatory\n\n- 什么是不可以直接返回的请求？ \n\n- > 不可以直接返回的请求，比如设置了 acks=all 的 PRODUCE 请求\n  >\n  > 一旦设置了 acks=all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回\n  >\n  > 此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果\n  >\n  > 这就是不能直接返回的请求。\n  >\n  > 相反的，就是可以直接返回的请求\n\n- Purgatory 是什么？\n\n- > Purgatory 的组件，这是 Kafka 中著名的“炼狱”组件。\n  >\n  > 它是用来缓存延时请求（Delayed Request）的。\n  >\n  > 所谓延时请求，就是那些一时未满足条件，不能立刻处理的请求。\n\n9、等 Purgatory 中暂存的请求，可以返回的时候，会找到当时发送这个请求的线程，返回到这个线程的响应队列中\n\n- 怎么知道是可以返回的时候？\n\n- > 举个例子：比如设置了 acks=all 的 PRODUCE 请求\n  >\n  > 一旦设置了 acks=all，那么该请求就必须等待 ISR 中所有副本都接收了消息后才能返回\n  >\n  > 此时处理该请求的 IO 线程就必须等待其他 Broker 的写入结果\n  >\n  > 此时才可以返回\n\n10、网络线程池的线程，会将自己响应队列中的响应数据，通过网络传输回去。\n\n\n\n\n\n### 控制类和数据类请求分离\n\n在本小节开头，就介绍过：Kafka 的请求分类两类\n\n**数据类请求**：Kafka 社区把 PRODUCE 和 FETCH 这类请求称为数据类请求。\n\n**控制类请求**：Kafka 社区把 LeaderAndIsr、StopReplica 这类请求称为控制类请求。\n\n在了解了 Kafka 是怎么处理请求的流程之后，思考这么一个问题：\n\n如果当前 共享请求队列 中，已经积压了很多的数据，IO线程正在马不停蹄的处理，此时我们发送一个请求：要求一个 Replica 下线。\n\n此时：这个要求 Replica 下线的请求是优先处理，还是顺序处理？\n\n如果是优先处理，那共享请求队列中积压的数据，怎么办？\n\n如果是顺序处理，如果等待的时间很长很长，Replica 一直无法下线怎么办？\n\n\n\n所以我们需要把 控制类请求 和 数据类请求 **分开处理**。\n\n这就是 控制类和数据类请求分离\n\n\n\n#### 场景\n\n举一个具体的场景：\n\n假设我们有个主题只有 1 个分区，该分区配置了 2 个副本\n\n其中 Leader 副本保存在 Broker 0 上，Follower 副本保存在 Broker 1 上\n\n假设 Broker 0 这台机器积压了很多的 PRODUCE 请求\n\n此时你如果使用 Kafka 命令强制将该主题分区的 Leader、Follower 角色互换\n\n那么 Kafka 内部的控制器组件（Controller）会发送 LeaderAndIsr 请求给 Broker 0，显式地告诉它，当前它不再是 Leader，而是 Follower 了\n\n而 Broker 1 上的 Follower 副本因为被选为新的 Leader，因此停止向 Broker 0 拉取消息\n\n\n\n#### 不分离的现象\n\n如果 控制类请求 和 数据类请求 不分离\n\nLeaderAndIsr 请求（ Leader、Follower 角色互换）就会放在 共享请求队列 的后面\n\n如果 共享请求队列 积压了很多，我们就要等很长很长时间，才能处理到这个 控制类请求\n\n很显然，这不是我们想要的结果\n\n\n\n#### 分离的现象\n\n如果 控制类请求 和 数据类请求 分离\n\n那么在 LeaderAndIsr 发送之前积压的 PRODUCE 请求就都无法正常完成了。\n\n\n\n这是我们想要的结果吗？\n\n我不知道这是不是我们想要的结果，但这是目前 Kafka 的处理方式\n\nKafka 会优先处理 LeaderAndIsr 请求，Broker 0 就会立刻抛出 NOT_LEADER_FOR_PARTITION 异常，快速地标识这些积压 PRODUCE 请求已失败\n\n\n\n#### 怎么设计分离\n\n现在我们知道 Kafka 会优先处理 控制类请求，如果是你来设计，你会怎么让 Kafka 优先处理 控制类请求呢？\n\n方案一：\n\n在 Broker 中实现一个优先级队列，并赋予控制类请求更高的优先级。\n\n这是很自然的想法，所以我本以为社区也会这么实现的，但后来我这个方案被清晰地记录在“已拒绝方案”列表中。\n\n拒绝的原因在于，它无法处理请求队列已满的情形。当请求队列已经无法容纳任何新的请求时，纵然有优先级之分，它也无法处理新的控制类请求了\n\n\n\n方案二：\n\n直接将 控制类请求 替换 共享请求队列中 的最前面的数据，这样就可以优先处理控制类请求了，处理完控制类请求，再将这个数据类请求插队到队头；\n\n这个方案是网友分享的，当然，Kafka 社区也没有采用这个方案\n\n\n\n那么 Kafka 是怎么做的呢？\n\n\n\n#### Kafka是怎么分离的\n\n那么，社区是如何解决的呢？\n\n很简单，Kafka 社区实现了两套一模一样的 Reactor模型\n\n一个用来处理 数据类型请求，一个用来处理 控制类请求；实现了两类请求的分离。\n\n也就是说，Kafka Broker 启动后，会在后台分别创建两套网络线程池和 IO 线程池的组合，它们分别处理数据类请求和控制类请求。\n\n至于所用的 Socket 端口，自然是使用不同的端口了，你需要提供不同的 listeners 配置，显式地指定哪套端口用于处理哪类请求。\n\n\n\n\n\n## kafka控制器\n\n\n\n### 什么是控制器组件\n\n控制器组件（Controller），是 Apache Kafka 的核心组件\n\n它的主要作用是在 ZK 的帮助下管理和协调整个 Kafka 集群\n\n集群中任意一台 Broker 都能充当控制器的角色，只能有一个 Broker 成为控制器\n\n每个正常运转的 Kafka 集群，在任意时刻都有且只有一个控制器\n\n控制器是重度依赖 ZK 的，因此，我们有必要花一些时间学习下 ZK 是做什么的。\n\n\n\n### Kafka依赖ZK\n\n#### 什么是ZK\n\nZK 是一个分布式协调服务框架，它使用的数据模型类似于文件系统的树形结构，根目录也是以“/”开始\n\nZK结构上的每个节点被称为 znode，用来保存一些元数据协调信息，可分为持久性 znode 和临时 znode\n\n- 持久性 znode 不会因为 ZooKeeper 集群重启而消失\n\n- 临时 znode 则与创建该 znode 的 ZooKeeper 会话绑定，一旦会话结束，该节点会被自动删除\n\nZK 赋予客户端监控 znode 变更的能力，即所谓的 Watch 通知功能。\n\n- 一旦 znode 节点被创建、删除，子节点数量发生变化，或是 znode 所存的数据本身变更\n- ZK 会通过节点变更监听器 (ChangeHandler) 的方式显式通知客户端。\n\n\n\n#### Kafka使用ZK做了什么\n\nKafka 大量使用了 ZK 的 Watch 机制对集群进行管理，如下图\n\n不用了解每个 znode 的作用，但可以大致体会下 Kafka 对 ZooKeeper 的依赖。\n\n```mermaid\ngraph LR;\n \tKafka的ZK节点 --> /consumers\n \t/consumers --> consumer_group_name\n \tconsumer_group_name --> offsets\n \tconsumer_group_name --> ids\n \tconsumer_group_name --> owners\n\tKafka的ZK节点 --> /controller_epoch\n\tKafka的ZK节点 --> /brokers/ids\n\tKafka的ZK节点 --> /controller\n\tKafka的ZK节点 --> /admin/delete_topics\n\tKafka的ZK节点 --> /admin/preferred_replica_election\n\tKafka的ZK节点 --> /brokers/seqid\n\tKafka的ZK节点 --> /isr_change_notifaction\n\tKafka的ZK节点 --> /config\n\t/config --> clients\n\t/config --> changes\n\t/config --> topics\n\tKafka的ZK节点 --> /config/changes\n\tKafka的ZK节点 --> /brokers/topics\n\tKafka的ZK节点 --> /admin/reassign_partitions\n\tKafka的ZK节点 --> /admin\n\t/admin --> delete_topics\n```\n\n在之前我们说过，每个 Broker 都有成为 控制器（Controller）的能力，但是控制器有且只有一个，那么控制器是怎么被选出来的\n\n\n\n### 控制器是怎么选出来的\n\n在之前我们说过，每个 Broker 都有成为 控制器（Controller）的能力\n\n但是控制器有且只有一个，那么控制器是怎么被选出来的\n\n\n\n实际上，Broker 在启动时，会尝试去 ZK 中创建 /controller 节点\n\nKafka 当前选举控制器的规则是：第一个成功创建 /controller 节点的 Broker 会被指定为控制器。\n\n\n\n### 控制器用来做什么的\n\n之前说过，控制器（Controller）起到了管理整个集群的作用，那么它具体都做了什么呢？\n\n```mermaid\ngraph LR;\n\tKafka控制器 --> 主题管理\n\tKafka控制器 --> 分区重分配\n\tKafka控制器 --> Preferred领导者选举\n\tKafka控制器 --> 集群成员管理\n\tKafka控制器 --> 数据服务\n\t\n```\n\n### 控制器中存了什么数据\n\n接下来，我们就详细看看，控制器中到底保存了哪些数据\n\n控制器既然作为整个 Kafka 集群的管理者，里面主要存了三部分数据\n\n- 所有 Topic 信息\n  - 某个 Topic 下的所有副本\n  - 某个 Topic 的所有分区\n  - 所有的 Topic 列表\n  - 移除某个 Topic 的所有信息\n- 所有 Broker 信息\n  - 该 Broker 下的所有分区\n  - 某组 Broker 的所有副本\n  - 正在关闭的 Broker 列表\n  - 当前存活的 Broker 列表\n- 所有涉及运维的 Partiton 信息\n  - 当前存活的所有 Partiton 副本\n  - 正在进行重分配的 Partiton 列表\n  - 某组 Partiton 下的所有副本\n  - 正在进行 preferred leader 选举的Partition\n  - 分配给每个 Partition 的副本列表\n  - 每个 Partition 的 Leader 和 ISR 信息\n\n```mermaid\ngraph LR;\n\t控制器数据 --> 所有Topic信息\n\t所有Topic信息 --> 某个Topic下的所有副本\n\t所有Topic信息 --> 某个Topic的所有分区\n\t所有Topic信息 --> 所有的Topic列表\n\t所有Topic信息 --> 移除某个Topic的所有信息\n\t控制器数据 --> 所有Broker信息\n\t所有Broker信息 --> 该Broker下的所有分区\n\t所有Broker信息 --> 某组Broker的所有副本\n\t所有Broker信息 --> 正在关闭的Broker列表\n\t所有Broker信息 --> 当前存活的Broker列表\n\t控制器数据 --> 所有涉及运维的Partiton信息\n\t所有涉及运维的Partiton信息 --> 当前存活的所有Partiton副本\n\t所有涉及运维的Partiton信息 --> 正在进行重分配的Partiton列表\n\t所有涉及运维的Partiton信息 --> 某组Partiton下的所有副本\n\t所有涉及运维的Partiton信息 --> 正在进行preferredleader选举的Partition\n\t所有涉及运维的Partiton信息 --> 分配给每个Partition的副本列表\n\t所有涉及运维的Partiton信息 --> 每个Partition的Leader和ISR信息\n```\n\n值得注意的是，这些数据其实在 ZooKeeper 中也保存了一份\n\n每当控制器初始化时，它都会从 ZooKeeper 上读取对应的元数据并填充到自己的缓存中\n\n\n\n\n\n\n\n### 控制器故障转移\n\n我们在前面强调过，在 Kafka 集群运行过程中，只能有一台 Broker 充当控制器的角色\n\n那么这就存在单点失效（Single Point of Failure）的风险\n\nKafka 是如何应对单点失效的呢？\n\n\n\n当运行中的控制器突然宕机或意外终止时，Kafka 能够快速地感知到，并立即启用备用控制器来代替之前失败的控制器\n\n\n\n<img src=\"kafka从入门到入土.assets/image-20230218120514451.png\" alt=\"image-20230218120514451\" style=\"zoom: 23%;\" />\n\n\n\n最开始时，Broker 0 是控制器。\n\n当 Broker 0 宕机后，此时 ZK 就会通过 Watch 机制感知到并删除了 /controller 临时节点。\n\n之后所有存活的 Broker 就会收到通知，此时所有存活的 Broker 开始竞选新的控制器身份。\n\nBroker 3 最终赢得了选举，成功地在 ZK 上重建了 /controller 节点。\n\n之后，Broker 3 会从 ZK 中读取集群元数据信息，并初始化到自己的缓存中。\n\n至此，控制器的 Failover 完成，可以行使正常的工作职责了。\n\n\n\n### 控制器内部设计原理\n\n<font color='red'>**这部分只是根据部分文章，自己总结出来的，有些逻辑点说不通，后续还需要通过看 Kafka 的源码再补充完善这部分**</font>\n\n\n\n#### 老版本多线程设计\n\n在 Kafka 0.11 版本之前，Kafka 控制器是一个**模拟状态机的多线程控制器**。 \n\n<img src=\"kafka从入门到入土.assets/image-20230219143821049.png\" alt=\"image-20230219143821049\" style=\"zoom:50%;\" />\n\n```base64\\n```\n\n\n\n它以下列方式工作：\n\n既然是模拟状态机，那么都有哪些状态呢？\n\n**需要维持的状态**：这些状态是存储在 <font color='purple'>**Controller Context**</font> 中的\n\n- 每台机器上的分区副本。\n- 分区的领导者。\n\n**什么会导致这些状态变化呢（状态变化源）**\n\n- <font color='#FFF2CC'>注册到 Zookeeper 的监听器线程。</font>\n  - <font color='#FFF2CC'>AddPartitionsListener</font>>\n  - <font color='#FFF2CC'>BrokerChangeListener</font>\n  - <font color='#FFF2CC'>DeleteTopicListener</font>\n  - <font color='#FFF2CC'>PartitionReassignedListener（admin）</font>\n  - <font color='#FFF2CC'>PreferredReplicaElectionListener（admin）</font>\n  - <font color='#FFF2CC'>ReassignedPartitionsIsrChangeListener</font>\n  - <font color='#FFF2CC'>TopicChangeListener</font>\n- <font color='#FFF2CC'>controller与broker之间的socket连接 (controlled shutdown)</font>\n- <font color='#FFE6CC'>内部定时任务 **Schedule Task**线程（比如：preferred leader 选举）</font>\n\n\n\n**状态是怎么变化的呢**\n\n- ZK的监听线程，Kafka的API线程，内部定时任务的线程 都会**同时**改变状态\n- 就是这些线程会同时修改 <font color='purple'>**Controller Context**</font> \n\n\n\n**状态是怎么传播的**\n\n- 通过controller与broker之间的socket连接，进行状态的传输\n- 通过controller与broker之间的消息队列\n- 发送给broker的异步消息\n- 不需要回调的消息（主题删除的除外）\n\n\n\n**故障转移**\n\n- 基于 Zookeeper 的领导者选举\n- Zookeeper 作为容错的持久状态存储。\n\n\n\n**这个设计的缺陷**\n\n控制器是多线程的设计，会在内部创建很多个线程。比如：\n\n- 控制器需要为每个 Broker 都创建一个对应的 Socket 连接\n- 控制器向这些 Broker 发送特定请求，会创建专属的列表\n- 控制器连接 ZooKeeper 的会话，也会创建单独的线程来处理 Watch 机制的通知回调\n- 控制器还会为主题删除创建额外的 I/O 线程\n- 多线程访问共享可变数据（控制器缓存）是维持线程安全最大的难题\n- 为了保护数据安全性，控制器不得不在代码中大量使用 ReentrantLock 同步机制，这就进一步拖慢了整个控制器的处理速度\n\n\n\n\n\n#### 新版本单线程加时间队列设计\n\nkafka 设计原文：https://cwiki.apache.org/confluence/display/kafka/kafka+controller+redesign\n\n鉴于这些原因，社区于 0.11 版本重构了控制器的底层设计，主要改进了两点\n\n- 把多线程的方案改成了单线程加事件队列的方案。\n- 将 Broker 与 Zookeeper 的连接从同步改成了异步\n\n<img src=\"kafka从入门到入土.assets/image-20230219144633226.png\" alt=\"image-20230219144633226\" style=\"zoom:35%;\" />\n\n```base64\\n```\n\n\n\n将之前的 **状态变化源** 所涉及到的线程，抽象成 一个一个的**事件 Event**\n\n之前状态的变化，是通过线程直接操作控制器缓存\n\n现在状态发生了变化，会将这个变化抽象成事件，放在事件队列中\n\n由一个 <font color='green'>Event Execotor Thread</font> 单独处理，并操作 <font color='purple'>**Controller Context**</font> \n\n此时的 zk 线程只负责 <font color='purple'>**Controller Context**</font> 更新而不负责事件 Event 执行。\n\n\n\n针对控制器的第二个改进就是，将之前同步操作 ZooKeeper 全部改为异步操作。\n\nZooKeeper 本身的 API 提供了同步写和异步写两种方式。\n\n之前控制器操作 ZooKeeper 使用的是同步的 API，性能很差，集中表现为，当有大量主题分区发生变更时，ZooKeeper 容易成为系统的瓶颈。\n\n新版本 Kafka 修改了这部分设计，完全摒弃了之前的同步 API 调用，转而采用异步 API 写入 ZooKeeper，性能有了很大的提升。\n\n根据社区的测试，改成异步之后，ZooKeeper 写入提升了 10 倍！\n\n\n\n\n\n### 如何处理脑裂\n\n如果 Controller 挂掉了，Kafka集群必须找到可以替代的 controller，否则集群将不能正常运转。\n\n这里面存在一个问题，很难确定 Broker 是挂掉了，还是仅仅只是短暂性的故障。\n\n但是，不管是哪种情况，集群为了正常运转，必须选出新的controller。\n\n但是如果老的 controller 又正常了，他并不知道自己已经被取代了，那么此时集群中会出现两台controller。\n\n\n\n#### 什么是脑裂\n\n比如，某个 controlle r由于 GC 时间比较久，而被认为已经挂掉，并选择了一个新的controller。\n\n在 GC 的情况下，在老的 Controller眼中，并没有改变任何东西，该 Broker 甚至不知道它已经暂停了。\n\n因此，它将继续充当当前 Controller，但是此时系统中已经选择了另外一个新的 Controller\n\n对于当前 Kafka 集群来说，就有了两个 Controller，有了两个大脑，就是脑裂了。\n\n这是分布式系统中的常见情况，称为脑裂。\n\n\n\n#### 如何解决脑裂\n\nKafka是通过使用**epoch number**（纪元编号，也称为隔离令牌）来完成的。\n\nepoch number只是单调递增的数字，第一次选出Controller时，epoch number值为1\n\n如果再次选出新的Controller，则epoch number将为2，依次单调递增\n\n\n\n简单的说，就是老的 controller 复活之后，它的 epoch 还是老的值，它所下发的命令携带的 epoch 还是老的值\n\n当它的命令到达 broker 端之后，broker 发现有另一个 controller 发来的消息的epoch是新的值\n\n就不会执行老的 controller 的命令。\n\n\n\n\n\n## 关于高水位和Leader Epoch的讨论\n\n\n\n高水位和低水位分别是什么\n\nHW\n\nLEO（Log End Offet）\n\nLSO（Log Stable Offset）：事务生产者\n\n\n\n每个 Replica 都有自己的 HW 和 LEO；\n\nPartiton 的 HW 就是 Leader Replica 的HW；\n\nLeader Replica 所在的 Broker 除了保存当前 Replica 的 HW 和 LEO 之外，还保存了 它的 Follower Replica 的 HW 和 LEO\n\n\n\n\n\n\n\n\n\n\n\n## 问题\n\n\n\n为什么kafka不像mysql那样允许追随者副本（follower replica）对外提供只读服务？\n\nkafka是怎么做到 提供一套 API 实现生产者和消费者？\n\nkafka是怎么做到 降低网络传输和磁盘存储开销；\n\nkafka是怎么做到 实现高伸缩性架构。\n\nkafka为什么快，为什么高吞吐？\n\n- 消息日志（Log）只能追加写，避免了随机IO，改成了顺序IO，大大提高了写能力；\n\n你觉得 Kafka 未来的演进路线是怎么样的？如果你是 Kafka 社区的“掌舵人”，你准备带领整个社区奔向什么方向呢？\n\n想你是一家创业公司的架构师，公司最近准备改造现有系统，引入 Kafka 作为消息中间件衔接上下游业务。作为架构师的你会怎么选择合适的 Kafka 发行版呢\n\nkafka每天 1 亿条 1KB 大小的消息，保存两份且留存两周的时间，需要多大的磁盘空间？\n\n如果需要kafka1小时内处理1TB的业务数据，在千兆网络下，需要多少台kafka机器？\n\nkafka怎么实现的故障转移？\n\nkafka是怎么保障大数据量均匀的分布在各个Broker上的？\n\nkafka的零拷贝技术是什么？\n\n- https://blog.csdn.net/ljheee/article/details/99652448\n- https://www.jianshu.com/p/835ec2d4c170\n\nbroker端收到消息也会解压缩，进行消息校验，那么零拷贝还有用嘛？\n\nconsumer可以先提交offset，在处理消息嘛？\n\nkafka的producer是在producer实例化的时候，创建的TCP连接，那么这个时候，producer都不知道要往那个topic发消息，那么就不知道要连接到哪个broker？kafka是怎么做的呢？\n\nkafka在建立TCP连接的步骤中，有没有可以优化的地方，目前社区做的不好的地方？\n\n丰网的kafka的消费者重复注册是怎么做的？是同一个消费者实例的多个线程，还是同一个消费者类，注册了多个bean；\n\n重试机制会导致消息乱序吗？\n\n- 重试机制不会重新计算Partition信息\n- 重试机制会导致消息乱序，但是可以通过 max.in.flight.requests.per.connection=1 来避免，但是会导致吞吐量下降\n- max.in.flight.requests.per.connection：表示限制客户端在单个连接上能够发送的未响应请求的个数；\n- 设置为 1 表示：broker收到一个请求之后，在响应之前，是不会接收别的请求的\n\n消息的分区位移是什么时候写入的？\n\n如果一个消息写入失败了，Producer 有重试，它的Offset是新的，还是老的？\n\nConsumer设置自动提交位移，有一个提交频率，具体的流程是怎么提交的，如果消费到了Producer重试的消息，Offset会怎么样？\n\n","tags":["kafka","生产者","消费者","消息","中间件"],"categories":["JAVA","MQ","KAFKA"]},{"title":"mongo的基本查询语法","url":"/note/JAVA/数据库/MONGO/mongo的基本查询语法/","content":"\n\n\n\n\n```sql\ndb.in_board.find({}).count(true)\ndb.in_board.find({\"fwDisp\":\"true\",\"dispTime\":{$gte:\"1638806400000\",$lt:\"1638892799000\"}}).count(true)\n\n\ndb.in_board.find({\"fwDisp\":\"true\",\"signTime\":{$gte:\"1638806400000\",$lt:\"1638892799000\"}}).count(true)\ndb.in_board.find({\"fwDisp\":\"true\",\"dispTime\":{$gte:\"1638806400000\",$lt:\"1638892799000\"},\"signTime\":{$ne:null},\"signTime\":{$lte:\"this.latestSignTime\"}}).count(true)\ndb.in_board.find({\"fwDisp\":\"true\",\"dispTime\":{$gte:\"1638720000000\",$lt:\"1638806399000\"},\"signTime\":{$ne:null},\"signTime\":{$lte:\"this.latestSignTime\"}}).sort({\"_id\": 1})\n\ndb.in_board.find({\"fwDisp\":\"true\",\"dispTime\":{$gte:\"1638892800000\",$lt:\"1638979199000\"},\"dispSettleSiteId\":\"99618\"}).count(true)\ndb.in_board.find({\"fwDisp\":\"true\",\"dispTime\":{$gte:\"1638892800000\",$lt:\"1638979199000\"},\"dispSettleSiteId\":\"99618\",\"signTime\":{$ne:null},\"signTime\":{$lte:\"this.latestSignTime\"}}).count(true)\n\n\n```\n\n\n\n\n\n","tags":["mongo"],"categories":["JAVA","数据库","MONGO"]},{"title":"oracle创建索引的一些规范","url":"/note/JAVA/数据库/ORACLE/oracle创建索引的一些规范/","content":"\n\n\n1、表的主键、外键必须有索引；\n\n2、数据量超过300的表应该有索引；\n\n3、经常与其他表进行连接的表，在连接字段上应该建立索引；\n\n4、经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；\n\n5、索引应该建在选择性高的字段上；\n\n6、索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；\n\n7、复合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替：\n\nA、正确选择复合索引中的主列字段，一般是选择性较好的字段；\n\nB、复合索引的几个字段是否经常同时以AND方式出现在Where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引；\n\nC、如果复合索引中包含的字段经常单独出现在Where子句中，则分解为多个单字段索引；\n\nD、如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段；\n\nE、如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引；\n\n8、频繁进行数据操作的表，不要建立太多的索引；\n\n9、删除无用的索引，避免对执行计划造成负面影响；\n\n以上是一些普遍的建立索引时的判断依据。一言以蔽之，索引的建立必须慎重，对每个索引的必要性都应该经过仔细分析，要有建立的依据。 因为太多的索引与不充分、不正确的索引对性能都毫无益处：在表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也 会增加处理上的开销。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性 能，特别是对频繁更新的表来说，负面影响更大","tags":["索引","oracle"],"categories":["JAVA","数据库","ORACLE"]}]